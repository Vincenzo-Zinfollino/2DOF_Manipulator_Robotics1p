
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000977c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08009920  08009920  00019920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de0  08009de0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de8  08009de8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dec  08009dec  00019dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  20000070  08009e60  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  08009e60  00020734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe28  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fc  00000000  00000000  0002fec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  000321c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00032fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017603  00000000  00000000  00033cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f97d  00000000  00000000  0004b2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090320  00000000  00000000  0005ac40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eaf60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c50  00000000  00000000  000eafb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009904 	.word	0x08009904

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08009904 	.word	0x08009904

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <HAL_UART_RxCpltCallback>:
/* reduction values for motors */
const uint8_t reduction1 = 1; //10;
const uint8_t reduction2 = 1; // 5;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    char *cmd, *data, *value;
    uint8_t i = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	74fb      	strb	r3, [r7, #19]
    /* read the first characters */
    cmd = strtok((char*) &rx_data, ":");
 8000f18:	492b      	ldr	r1, [pc, #172]	; (8000fc8 <HAL_UART_RxCpltCallback+0xbc>)
 8000f1a:	482c      	ldr	r0, [pc, #176]	; (8000fcc <HAL_UART_RxCpltCallback+0xc0>)
 8000f1c:	f005 fc40 	bl	80067a0 <strtok>
 8000f20:	60f8      	str	r0, [r7, #12]
    if(strcmp(cmd, "trj")){ /* trj case*/
 8000f22:	492b      	ldr	r1, [pc, #172]	; (8000fd0 <HAL_UART_RxCpltCallback+0xc4>)
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f7ff f95b 	bl	80001e0 <strcmp>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d041      	beq.n	8000fb4 <HAL_UART_RxCpltCallback+0xa8>
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        data = strtok(NULL, ":");
 8000f30:	4925      	ldr	r1, [pc, #148]	; (8000fc8 <HAL_UART_RxCpltCallback+0xbc>)
 8000f32:	2000      	movs	r0, #0
 8000f34:	f005 fc34 	bl	80067a0 <strtok>
 8000f38:	6178      	str	r0, [r7, #20]
        while(data != NULL){
 8000f3a:	e028      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x82>
            if(i == 6) break; /* reading penup */
 8000f3c:	7cfb      	ldrb	r3, [r7, #19]
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d029      	beq.n	8000f96 <HAL_UART_RxCpltCallback+0x8a>
            value = "0x"; /* will contain the value extracted from the received string */
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_UART_RxCpltCallback+0xc8>)
 8000f44:	60bb      	str	r3, [r7, #8]
            strcat(value, data); /* string concatenation REF: https://www.programiz.com/c-programming/library-function/string.h/strcat */
 8000f46:	6979      	ldr	r1, [r7, #20]
 8000f48:	68b8      	ldr	r0, [r7, #8]
 8000f4a:	f005 fc19 	bl	8006780 <strcat>
            rbpush((((ringbuffer_t *) &manip)+i),  strtoull(value, NULL, 16)); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 8000f4e:	7cfb      	ldrb	r3, [r7, #19]
 8000f50:	2258      	movs	r2, #88	; 0x58
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <HAL_UART_RxCpltCallback+0xcc>)
 8000f58:	189c      	adds	r4, r3, r2
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	68b8      	ldr	r0, [r7, #8]
 8000f60:	f005 fd9e 	bl	8006aa0 <strtoull>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fb1e 	bl	80005ac <__aeabi_ul2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	ec43 2b10 	vmov	d0, r2, r3
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f001 ffed 	bl	8002f58 <rbpush>
            data = strtok(NULL, ":");
 8000f7e:	4912      	ldr	r1, [pc, #72]	; (8000fc8 <HAL_UART_RxCpltCallback+0xbc>)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f005 fc0d 	bl	80067a0 <strtok>
 8000f86:	6178      	str	r0, [r7, #20]
            i++;
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	74fb      	strb	r3, [r7, #19]
        while(data != NULL){
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1d3      	bne.n	8000f3c <HAL_UART_RxCpltCallback+0x30>
 8000f94:	e000      	b.n	8000f98 <HAL_UART_RxCpltCallback+0x8c>
            if(i == 6) break; /* reading penup */
 8000f96:	bf00      	nop
        }
        rbpush(&manip.penup, (double) atoi(data));
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	f005 fbbb 	bl	8006714 <atoi>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff facf 	bl	8000544 <__aeabi_i2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	ec43 2b10 	vmov	d0, r2, r3
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <HAL_UART_RxCpltCallback+0xd0>)
 8000fb0:	f001 ffd2 	bl	8002f58 <rbpush>
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(huart, rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8000fb4:	2240      	movs	r2, #64	; 0x40
 8000fb6:	4905      	ldr	r1, [pc, #20]	; (8000fcc <HAL_UART_RxCpltCallback+0xc0>)
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f004 faf6 	bl	80055aa <HAL_UART_Receive_DMA>
}
 8000fbe:	bf00      	nop
 8000fc0:	371c      	adds	r7, #28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	08009920 	.word	0x08009920
 8000fcc:	2000008c 	.word	0x2000008c
 8000fd0:	08009924 	.word	0x08009924
 8000fd4:	08009928 	.word	0x08009928
 8000fd8:	200000d0 	.word	0x200000d0
 8000fdc:	200002e0 	.word	0x200002e0

08000fe0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
    // TODO: Implement limit switch handling
    uint32_t now;
    now = HAL_GetTick();
 8000fea:	f002 fbc5 	bl	8003778 <HAL_GetTick>
 8000fee:	60f8      	str	r0, [r7, #12]
    if((now - previous_trigger) > DEBOUNCE_DELAY){
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b32      	cmp	r3, #50	; 0x32
 8000ffa:	d913      	bls.n	8001024 <HAL_GPIO_EXTI_Callback+0x44>
        if(!triggered){
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_GPIO_EXTI_Callback+0x50>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d105      	bne.n	8001010 <HAL_GPIO_EXTI_Callback+0x30>
            uint8_t limit_switch = 1;
 8001004:	2301      	movs	r3, #1
 8001006:	72fb      	strb	r3, [r7, #11]
            // SECTION - DEBUG
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001008:	2120      	movs	r1, #32
 800100a:	480a      	ldr	r0, [pc, #40]	; (8001034 <HAL_GPIO_EXTI_Callback+0x54>)
 800100c:	f003 fa71 	bl	80044f2 <HAL_GPIO_TogglePin>
            // !SECTION - DEBUG
        }
        triggered = 1-triggered;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_GPIO_EXTI_Callback+0x50>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f1c3 0301 	rsb	r3, r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_GPIO_EXTI_Callback+0x50>)
 800101c:	701a      	strb	r2, [r3, #0]
        previous_trigger = now;
 800101e:	4a03      	ldr	r2, [pc, #12]	; (800102c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6013      	str	r3, [r2, #0]
    }
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200005e0 	.word	0x200005e0
 8001030:	200005e4 	.word	0x200005e4
 8001034:	40020000 	.word	0x40020000

08001038 <init_man>:
- man_t *manip: man_t obj. to initialize;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e00b      	b.n	800105e <init_man+0x26>
        rbclear((((ringbuffer_t *) manip)+i));
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2258      	movs	r2, #88	; 0x58
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f002 f85a 	bl	800310c <rbclear>
    for(i = 0; i < 14; i++){
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	3301      	adds	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b0d      	cmp	r3, #13
 8001062:	d9f0      	bls.n	8001046 <init_man+0xe>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e018      	b.n	800109c <init_man+0x64>
        manip->B[i] = (double) 0;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	339a      	adds	r3, #154	; 0x9a
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	18d1      	adds	r1, r2, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	e9c1 2300 	strd	r2, r3, [r1]
        manip->C[i] = (double) 0;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	339e      	adds	r3, #158	; 0x9e
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	18d1      	adds	r1, r2, r3
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < 4; i++){
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d9e3      	bls.n	800106a <init_man+0x32>
    }
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <dot>:
- double *C: pointer to a vector of doubles of size nA*mB, which represents the resulting nAxmB matrix -> if the operation cannot be done, it will be NULL;
@outputs: 
- uint8_t: 0 or 1 that shows whether the operation completed successfully or not.
@#
*/
uint8_t dot(double *A, uint8_t nA, uint8_t mA, double* B, uint8_t nB, uint8_t mB, double* C){ /* nAxmA * nBxmB dot product */
 80010ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010b0:	b087      	sub	sp, #28
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	72fb      	strb	r3, [r7, #11]
 80010bc:	4613      	mov	r3, r2
 80010be:	72bb      	strb	r3, [r7, #10]
        this method exists just to make the code more readable and understand what each
        operation actually does instead of having meaningless calculations */
    
    /* C[i, j] = \sum_k A[i, k]*B[k, j] */
    /* given n rows and m columns, the matrix indexes i, j correspond to j+i*m array index */
    if(mA != nB){
 80010c0:	7aba      	ldrb	r2, [r7, #10]
 80010c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d003      	beq.n	80010d2 <dot+0x26>
        C = NULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
        return 0; /* matrix multiplication cannot be done */
 80010ce:	2300      	movs	r3, #0
 80010d0:	e074      	b.n	80011bc <dot+0x110>
    }
    uint8_t i, j, k;
    for(i = 0; i < nA*mB; i++){
 80010d2:	2300      	movs	r3, #0
 80010d4:	75fb      	strb	r3, [r7, #23]
 80010d6:	e00c      	b.n	80010f2 <dot+0x46>
        C[i] = (double) 0.0;
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010de:	18d1      	adds	r1, r2, r3
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < nA*mB; i++){
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	3301      	adds	r3, #1
 80010f0:	75fb      	strb	r3, [r7, #23]
 80010f2:	7dfa      	ldrb	r2, [r7, #23]
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 80010fa:	fb01 f303 	mul.w	r3, r1, r3
 80010fe:	429a      	cmp	r2, r3
 8001100:	dbea      	blt.n	80010d8 <dot+0x2c>
    }

    for( i = 0; i < nA; i++){
 8001102:	2300      	movs	r3, #0
 8001104:	75fb      	strb	r3, [r7, #23]
 8001106:	e054      	b.n	80011b2 <dot+0x106>
        for( j = 0; j < mB; j++){
 8001108:	2300      	movs	r3, #0
 800110a:	75bb      	strb	r3, [r7, #22]
 800110c:	e049      	b.n	80011a2 <dot+0xf6>
            for( k = 0; k < mA; k++){
 800110e:	2300      	movs	r3, #0
 8001110:	757b      	strb	r3, [r7, #21]
 8001112:	e03f      	b.n	8001194 <dot+0xe8>
                C[j+i*mB] += (double) (A[k+i*mA]*B[j+k*mB]);
 8001114:	7dba      	ldrb	r2, [r7, #22]
 8001116:	7dfb      	ldrb	r3, [r7, #23]
 8001118:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800111c:	fb01 f303 	mul.w	r3, r1, r3
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001126:	4413      	add	r3, r2
 8001128:	e9d3 4500 	ldrd	r4, r5, [r3]
 800112c:	7d7a      	ldrb	r2, [r7, #21]
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	7ab9      	ldrb	r1, [r7, #10]
 8001132:	fb01 f303 	mul.w	r3, r1, r3
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001142:	7dba      	ldrb	r2, [r7, #22]
 8001144:	7d7b      	ldrb	r3, [r7, #21]
 8001146:	f897 603c 	ldrb.w	r6, [r7, #60]	; 0x3c
 800114a:	fb06 f303 	mul.w	r3, r6, r3
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff fa5d 	bl	8000618 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4690      	mov	r8, r2
 8001164:	4699      	mov	r9, r3
 8001166:	7dba      	ldrb	r2, [r7, #22]
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800116e:	fb01 f303 	mul.w	r3, r1, r3
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001178:	18d6      	adds	r6, r2, r3
 800117a:	4642      	mov	r2, r8
 800117c:	464b      	mov	r3, r9
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f893 	bl	80002ac <__adddf3>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	e9c6 2300 	strd	r2, r3, [r6]
            for( k = 0; k < mA; k++){
 800118e:	7d7b      	ldrb	r3, [r7, #21]
 8001190:	3301      	adds	r3, #1
 8001192:	757b      	strb	r3, [r7, #21]
 8001194:	7d7a      	ldrb	r2, [r7, #21]
 8001196:	7abb      	ldrb	r3, [r7, #10]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3bb      	bcc.n	8001114 <dot+0x68>
        for( j = 0; j < mB; j++){
 800119c:	7dbb      	ldrb	r3, [r7, #22]
 800119e:	3301      	adds	r3, #1
 80011a0:	75bb      	strb	r3, [r7, #22]
 80011a2:	7dba      	ldrb	r2, [r7, #22]
 80011a4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3b0      	bcc.n	800110e <dot+0x62>
    for( i = 0; i < nA; i++){
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	3301      	adds	r3, #1
 80011b0:	75fb      	strb	r3, [r7, #23]
 80011b2:	7dfa      	ldrb	r2, [r7, #23]
 80011b4:	7afb      	ldrb	r3, [r7, #11]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3a6      	bcc.n	8001108 <dot+0x5c>
            }
        }
    }
    return 1; // matrix multiplication successfully completed
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080011c6 <inv2x2>:
- double *invM: pointer to the inverted matrix (NULL if inversion is not possible);
@outputs: 
- uint8_t: shows whether the inversion was completed or not
@#
*/
uint8_t inv2x2(double *M, double *invM){
 80011c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
    double d = DET(M);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3318      	adds	r3, #24
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa1a 	bl	8000618 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4692      	mov	sl, r2
 80011ea:	469b      	mov	fp, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3308      	adds	r3, #8
 80011f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3310      	adds	r3, #16
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fa0c 	bl	8000618 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4650      	mov	r0, sl
 8001206:	4659      	mov	r1, fp
 8001208:	f7ff f84e 	bl	80002a8 <__aeabi_dsub>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if(d == 0){
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001220:	f7ff fc62 	bl	8000ae8 <__aeabi_dcmpeq>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <inv2x2+0x6c>
        invM = NULL;
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
        return 0; /* Inversion not possible */
 800122e:	2300      	movs	r3, #0
 8001230:	e043      	b.n	80012ba <inv2x2+0xf4>
    }
    invM[0] =  M[3]/d;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3318      	adds	r3, #24
 8001236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800123a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800123e:	f7ff fb15 	bl	800086c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	6839      	ldr	r1, [r7, #0]
 8001248:	e9c1 2300 	strd	r2, r3, [r1]
    invM[3] =  M[0]/d;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	f103 0618 	add.w	r6, r3, #24
 8001258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800125c:	f7ff fb06 	bl	800086c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	e9c6 2300 	strd	r2, r3, [r6]
    invM[1] = -M[1]/d;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3308      	adds	r3, #8
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	4690      	mov	r8, r2
 8001272:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f103 0608 	add.w	r6, r3, #8
 800127c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001280:	4640      	mov	r0, r8
 8001282:	4649      	mov	r1, r9
 8001284:	f7ff faf2 	bl	800086c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9c6 2300 	strd	r2, r3, [r6]
    invM[2] = -M[2]/d;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3310      	adds	r3, #16
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	4614      	mov	r4, r2
 800129a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f103 0610 	add.w	r6, r3, #16
 80012a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012a8:	4620      	mov	r0, r4
 80012aa:	4629      	mov	r1, r5
 80012ac:	f7ff fade 	bl	800086c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c6 2300 	strd	r2, r3, [r6]
    return 1; /* Inversion completed successfully */
 80012b8:	2301      	movs	r3, #1
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080012c4 <sum>:
- double *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void sum(double *A, double *B, uint8_t n, double *C){
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 80012d4:	2300      	movs	r3, #0
 80012d6:	75fb      	strb	r3, [r7, #23]
 80012d8:	e018      	b.n	800130c <sum+0x48>
        C[i] = A[i] + B[i];
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	7dfc      	ldrb	r4, [r7, #23]
 80012f4:	00e4      	lsls	r4, r4, #3
 80012f6:	683d      	ldr	r5, [r7, #0]
 80012f8:	442c      	add	r4, r5
 80012fa:	f7fe ffd7 	bl	80002ac <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	e9c4 2300 	strd	r2, r3, [r4]
    for(i = 0; i < n; i++){
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	3301      	adds	r3, #1
 800130a:	75fb      	strb	r3, [r7, #23]
 800130c:	7dfa      	ldrb	r2, [r7, #23]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	429a      	cmp	r2, r3
 8001312:	d3e2      	bcc.n	80012da <sum+0x16>
    }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bdb0      	pop	{r4, r5, r7, pc}

0800131e <diff>:
- double *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void diff(double *A, double *B, uint8_t n, double *C){
 800131e:	b5b0      	push	{r4, r5, r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
 8001332:	e018      	b.n	8001366 <diff+0x48>
        C[i] = A[i] - B[i];
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	4413      	add	r3, r2
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	7dfc      	ldrb	r4, [r7, #23]
 800134e:	00e4      	lsls	r4, r4, #3
 8001350:	683d      	ldr	r5, [r7, #0]
 8001352:	442c      	add	r4, r5
 8001354:	f7fe ffa8 	bl	80002a8 <__aeabi_dsub>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	e9c4 2300 	strd	r2, r3, [r4]
    for(i = 0; i < n; i++){
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	3301      	adds	r3, #1
 8001364:	75fb      	strb	r3, [r7, #23]
 8001366:	7dfa      	ldrb	r2, [r7, #23]
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	429a      	cmp	r2, r3
 800136c:	d3e2      	bcc.n	8001334 <diff+0x16>
    }
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}

08001378 <det>:
- double *d: pointer to the variable that will hold the resulting determinant;
@outputs: 
- void;
@#
*/
void det(double *M, uint8_t n, double *d){
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	b08b      	sub	sp, #44	; 0x2c
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	460b      	mov	r3, r1
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	72fb      	strb	r3, [r7, #11]
    uint8_t i,j,k,found;
    int8_t det_sign;
    double temp, factor;
    if(n == 1){
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d106      	bne.n	800139a <det+0x22>
        *d = M[0];
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	e9c1 2300 	strd	r2, r3, [r1]
        return;
 8001398:	e16b      	b.n	8001672 <det+0x2fa>
    }
    if(n == 2){
 800139a:	7afb      	ldrb	r3, [r7, #11]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d121      	bne.n	80013e4 <det+0x6c>
        *d = DET(M);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3318      	adds	r3, #24
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7ff f933 	bl	8000618 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4614      	mov	r4, r2
 80013b8:	461d      	mov	r5, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3308      	adds	r3, #8
 80013be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3310      	adds	r3, #16
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f925 	bl	8000618 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7fe ff67 	bl	80002a8 <__aeabi_dsub>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	e9c1 2300 	strd	r2, r3, [r1]
        through the multiplication of its diagonal.
        If matrix A is transformed into matrix B via elementary row operations:
        1. row exchange: A_j exchanged with A_i-> detB = -detA;
        2. row subtraction: A_j -= k*A_i -> detB = detA;
    */
    found = 0; 
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    det_sign = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    for(k = 0; k < n; k++){
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80013f6:	e0f8      	b.n	80015ea <det+0x272>
        for(i = k; i < n; i++){
 80013f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001400:	e079      	b.n	80014f6 <det+0x17e>
            if(M[i*n] != 0){
 8001402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001406:	7afa      	ldrb	r2, [r7, #11]
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	f7ff fb63 	bl	8000ae8 <__aeabi_dcmpeq>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d155      	bne.n	80014d4 <det+0x15c>
                found = 1;
 8001428:	2301      	movs	r3, #1
 800142a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                if(i != k){
 800142e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001432:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001436:	429a      	cmp	r2, r3
 8001438:	d04c      	beq.n	80014d4 <det+0x15c>
                    det_sign *=-1; /* keep track of sign change */
 800143a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800143e:	425b      	negs	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    /* exchange rows */
                    for(j = k; j < n; j++){
 8001446:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800144a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800144e:	e03c      	b.n	80014ca <det+0x152>
                        temp = M[i*n+j];
 8001450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001454:	7afa      	ldrb	r2, [r7, #11]
 8001456:	fb03 f202 	mul.w	r2, r3, r2
 800145a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	e9c7 2304 	strd	r2, r3, [r7, #16]
                        M[i*n+j] = M[k*n+j];
 800146e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001472:	7afa      	ldrb	r2, [r7, #11]
 8001474:	fb03 f202 	mul.w	r2, r3, r2
 8001478:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001488:	7af9      	ldrb	r1, [r7, #11]
 800148a:	fb02 f101 	mul.w	r1, r2, r1
 800148e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001492:	440a      	add	r2, r1
 8001494:	00d2      	lsls	r2, r2, #3
 8001496:	68f9      	ldr	r1, [r7, #12]
 8001498:	4411      	add	r1, r2
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	e9c1 2300 	strd	r2, r3, [r1]
                        M[k*n+j] = temp;
 80014a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014a6:	7afa      	ldrb	r2, [r7, #11]
 80014a8:	fb03 f202 	mul.w	r2, r3, r2
 80014ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	18d1      	adds	r1, r2, r3
 80014b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014bc:	e9c1 2300 	strd	r2, r3, [r1]
                    for(j = k; j < n; j++){
 80014c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014c4:	3301      	adds	r3, #1
 80014c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3bd      	bcc.n	8001450 <det+0xd8>
                    }
                }
            }
            if(!found){
 80014d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d107      	bne.n	80014ec <det+0x174>
                *d = 0;
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	e9c1 2300 	strd	r2, r3, [r1]
                return;
 80014ea:	e0c2      	b.n	8001672 <det+0x2fa>
        for(i = k; i < n; i++){
 80014ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f0:	3301      	adds	r3, #1
 80014f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d380      	bcc.n	8001402 <det+0x8a>
            }
        }
        /* row subtraction */
        for(i = k+1; i < n; i++){
 8001500:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001504:	3301      	adds	r3, #1
 8001506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800150a:	e064      	b.n	80015d6 <det+0x25e>
            factor = (double) (M[i*n]/M[k*n]);
 800150c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001510:	7afa      	ldrb	r2, [r7, #11]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001520:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001524:	7afa      	ldrb	r2, [r7, #11]
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	f7ff f99a 	bl	800086c <__aeabi_ddiv>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for(j = k; j < n; j++){
 8001540:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001548:	e03b      	b.n	80015c2 <det+0x24a>
                M[i*n+j] -= M[k*n+j]*factor;
 800154a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800154e:	7afa      	ldrb	r2, [r7, #11]
 8001550:	fb03 f202 	mul.w	r2, r3, r2
 8001554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001564:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001568:	7afa      	ldrb	r2, [r7, #11]
 800156a:	fb03 f202 	mul.w	r2, r3, r2
 800156e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001582:	f7ff f849 	bl	8000618 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001592:	7afa      	ldrb	r2, [r7, #11]
 8001594:	fb03 f202 	mul.w	r2, r3, r2
 8001598:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	18d6      	adds	r6, r2, r3
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7fe fe7c 	bl	80002a8 <__aeabi_dsub>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	e9c6 2300 	strd	r2, r3, [r6]
            for(j = k; j < n; j++){
 80015b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015bc:	3301      	adds	r3, #1
 80015be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3be      	bcc.n	800154a <det+0x1d2>
        for(i = k+1; i < n; i++){
 80015cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d0:	3301      	adds	r3, #1
 80015d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015da:	7afb      	ldrb	r3, [r7, #11]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d395      	bcc.n	800150c <det+0x194>
    for(k = 0; k < n; k++){
 80015e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015e4:	3301      	adds	r3, #1
 80015e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80015ea:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f4ff af01 	bcc.w	80013f8 <det+0x80>
            }
        }
    }
    /* multiply elements on main diagonal */
    *d = 1;
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <det+0x300>)
 80015fe:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < n; i++){
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001608:	e01b      	b.n	8001642 <det+0x2ca>
        *d *= M[i*n+i];
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001614:	7afa      	ldrb	r2, [r7, #11]
 8001616:	fb03 f202 	mul.w	r2, r3, r2
 800161a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4413      	add	r3, r2
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7fe fff5 	bl	8000618 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < n; i++){
 8001638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800163c:	3301      	adds	r3, #1
 800163e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001642:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3de      	bcc.n	800160a <det+0x292>
    }
    *d *= det_sign; /* each row exchange changes the determinant sign */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001652:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff74 	bl	8000544 <__aeabi_i2d>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4620      	mov	r0, r4
 8001662:	4629      	mov	r1, r5
 8001664:	f7fe ffd8 	bl	8000618 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001672:	372c      	adds	r7, #44	; 0x2c
 8001674:	46bd      	mov	sp, r7
 8001676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001678:	3ff00000 	.word	0x3ff00000

0800167c <inv>:
- double *invM: pointer to the temporary variable that will hold the inverse matrix of M;
@outputs: 
- uint8_t: it is a boolean value that shows whether the inversion is completed successfully or not.
@#
*/
uint8_t inv(double *M, double *adjM, double *subM, double *trM, uint8_t n, double *invM){
 800167c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8001680:	b089      	sub	sp, #36	; 0x24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
    /* cofM and trM are passed by the user so that the size of the arrays are controlled by the user */
    uint8_t i;
    double d;
    for(i = 0; i < n*n; i++){
 800168c:	2300      	movs	r3, #0
 800168e:	77fb      	strb	r3, [r7, #31]
 8001690:	e00e      	b.n	80016b0 <inv+0x34>
        trM[i] = M[i]; // copy temporarily matrix M in trM
 8001692:	7ffb      	ldrb	r3, [r7, #31]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	7ffa      	ldrb	r2, [r7, #31]
 800169c:	00d2      	lsls	r2, r2, #3
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	4411      	add	r1, r2
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < n*n; i++){
 80016aa:	7ffb      	ldrb	r3, [r7, #31]
 80016ac:	3301      	adds	r3, #1
 80016ae:	77fb      	strb	r3, [r7, #31]
 80016b0:	7ffa      	ldrb	r2, [r7, #31]
 80016b2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80016b6:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	429a      	cmp	r2, r3
 80016c0:	dbe7      	blt.n	8001692 <inv+0x16>
    }
    det(trM, n, &d);
 80016c2:	f107 0210 	add.w	r2, r7, #16
 80016c6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80016ca:	4619      	mov	r1, r3
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f7ff fe53 	bl	8001378 <det>
    if(d == 0) return 0;
 80016d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	f7ff fa03 	bl	8000ae8 <__aeabi_dcmpeq>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <inv+0x70>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e03b      	b.n	8001764 <inv+0xe8>
    adj(M, subM, n, adjM);
 80016ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f83d 	bl	8001774 <adj>
    tr(adjM, n, n, trM);
 80016fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80016fe:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68b8      	ldr	r0, [r7, #8]
 8001706:	f000 f8ae 	bl	8001866 <tr>
    for(i = 0; i < n*n; i++){
 800170a:	2300      	movs	r3, #0
 800170c:	77fb      	strb	r3, [r7, #31]
 800170e:	e01f      	b.n	8001750 <inv+0xd4>
        invM[i] = (double) (1/d)*trM[i];
 8001710:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001714:	f04f 0000 	mov.w	r0, #0
 8001718:	4915      	ldr	r1, [pc, #84]	; (8001770 <inv+0xf4>)
 800171a:	f7ff f8a7 	bl	800086c <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4690      	mov	r8, r2
 8001724:	4699      	mov	r9, r3
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	4413      	add	r3, r2
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	7ff9      	ldrb	r1, [r7, #31]
 8001734:	00c9      	lsls	r1, r1, #3
 8001736:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001738:	1844      	adds	r4, r0, r1
 800173a:	4640      	mov	r0, r8
 800173c:	4649      	mov	r1, r9
 800173e:	f7fe ff6b 	bl	8000618 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	e9c4 2300 	strd	r2, r3, [r4]
    for(i = 0; i < n*n; i++){
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	3301      	adds	r3, #1
 800174e:	77fb      	strb	r3, [r7, #31]
 8001750:	7ffa      	ldrb	r2, [r7, #31]
 8001752:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001756:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	429a      	cmp	r2, r3
 8001760:	dbd6      	blt.n	8001710 <inv+0x94>
    }
    return 1;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3724      	adds	r7, #36	; 0x24
 8001768:	46bd      	mov	sp, r7
 800176a:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 800176e:	bf00      	nop
 8001770:	3ff00000 	.word	0x3ff00000

08001774 <adj>:
- double *adjM: pointer to the variable that will hold the resulting adjugate matrix;
@outputs: 
- void;
@#
*/
void adj(double *M, double *subM, uint8_t n, double *adjM){
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	71fb      	strb	r3, [r7, #7]
    uint8_t i,j,w,k;
    double d;
    for( i = 0; i < n; i++){
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
 8001788:	e064      	b.n	8001854 <adj+0xe0>
        for(j = 0; j < n; j++){
 800178a:	2300      	movs	r3, #0
 800178c:	77bb      	strb	r3, [r7, #30]
 800178e:	e05a      	b.n	8001846 <adj+0xd2>
            k=0;
 8001790:	2300      	movs	r3, #0
 8001792:	773b      	strb	r3, [r7, #28]
            w=0;
 8001794:	2300      	movs	r3, #0
 8001796:	777b      	strb	r3, [r7, #29]
            while(w < (n-1)*(n-1)){
 8001798:	e024      	b.n	80017e4 <adj+0x70>
                if(k%n != j && (uint8_t) (k/n) != i){
 800179a:	7f3b      	ldrb	r3, [r7, #28]
 800179c:	79fa      	ldrb	r2, [r7, #7]
 800179e:	fbb3 f1f2 	udiv	r1, r3, r2
 80017a2:	fb01 f202 	mul.w	r2, r1, r2
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	7fba      	ldrb	r2, [r7, #30]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d016      	beq.n	80017de <adj+0x6a>
 80017b0:	7f3a      	ldrb	r2, [r7, #28]
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	7ffa      	ldrb	r2, [r7, #31]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d00e      	beq.n	80017de <adj+0x6a>
                    subM[w] = M[k];
 80017c0:	7f3b      	ldrb	r3, [r7, #28]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	7f7a      	ldrb	r2, [r7, #29]
 80017ca:	00d2      	lsls	r2, r2, #3
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	4411      	add	r1, r2
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	e9c1 2300 	strd	r2, r3, [r1]
                    w++;
 80017d8:	7f7b      	ldrb	r3, [r7, #29]
 80017da:	3301      	adds	r3, #1
 80017dc:	777b      	strb	r3, [r7, #29]
                }
                k++;
 80017de:	7f3b      	ldrb	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	773b      	strb	r3, [r7, #28]
            while(w < (n-1)*(n-1)){
 80017e4:	7f7a      	ldrb	r2, [r7, #29]
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	79f9      	ldrb	r1, [r7, #7]
 80017ec:	3901      	subs	r1, #1
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	429a      	cmp	r2, r3
 80017f4:	dbd1      	blt.n	800179a <adj+0x26>
            }
            det(subM, n-1, &d);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f107 0210 	add.w	r2, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	68b8      	ldr	r0, [r7, #8]
 8001804:	f7ff fdb8 	bl	8001378 <det>
            if((i+j) % 2 != 0){
 8001808:	7ffa      	ldrb	r2, [r7, #31]
 800180a:	7fbb      	ldrb	r3, [r7, #30]
 800180c:	4413      	add	r3, r2
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <adj+0xb2>
                d *= -1;
 8001818:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800181c:	4614      	mov	r4, r2
 800181e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001822:	e9c7 4504 	strd	r4, r5, [r7, #16]
            }
            adjM[i*n+j] = d;
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	79fa      	ldrb	r2, [r7, #7]
 800182a:	fb03 f202 	mul.w	r2, r3, r2
 800182e:	7fbb      	ldrb	r3, [r7, #30]
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	18d1      	adds	r1, r2, r3
 8001838:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800183c:	e9c1 2300 	strd	r2, r3, [r1]
        for(j = 0; j < n; j++){
 8001840:	7fbb      	ldrb	r3, [r7, #30]
 8001842:	3301      	adds	r3, #1
 8001844:	77bb      	strb	r3, [r7, #30]
 8001846:	7fba      	ldrb	r2, [r7, #30]
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	429a      	cmp	r2, r3
 800184c:	d3a0      	bcc.n	8001790 <adj+0x1c>
    for( i = 0; i < n; i++){
 800184e:	7ffb      	ldrb	r3, [r7, #31]
 8001850:	3301      	adds	r3, #1
 8001852:	77fb      	strb	r3, [r7, #31]
 8001854:	7ffa      	ldrb	r2, [r7, #31]
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	429a      	cmp	r2, r3
 800185a:	d396      	bcc.n	800178a <adj+0x16>
        }
    }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bdb0      	pop	{r4, r5, r7, pc}

08001866 <tr>:
- double *trM: pointer to the variable that will hold the transposed matrix;
@outputs: 
- void;
@#
*/
void tr(double *M, uint8_t n, uint8_t m, double *trM){
 8001866:	b480      	push	{r7}
 8001868:	b087      	sub	sp, #28
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	72fb      	strb	r3, [r7, #11]
 8001874:	4613      	mov	r3, r2
 8001876:	72bb      	strb	r3, [r7, #10]
    uint8_t i,j;
    for(i = 0; i < n; i++){
 8001878:	2300      	movs	r3, #0
 800187a:	75fb      	strb	r3, [r7, #23]
 800187c:	e022      	b.n	80018c4 <tr+0x5e>
        for(j=0; j < m; j++){
 800187e:	2300      	movs	r3, #0
 8001880:	75bb      	strb	r3, [r7, #22]
 8001882:	e018      	b.n	80018b6 <tr+0x50>
            trM[j*n+i] = M[i*m+j];
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	7aba      	ldrb	r2, [r7, #10]
 8001888:	fb03 f202 	mul.w	r2, r3, r2
 800188c:	7dbb      	ldrb	r3, [r7, #22]
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	7dba      	ldrb	r2, [r7, #22]
 8001898:	7af9      	ldrb	r1, [r7, #11]
 800189a:	fb02 f101 	mul.w	r1, r2, r1
 800189e:	7dfa      	ldrb	r2, [r7, #23]
 80018a0:	440a      	add	r2, r1
 80018a2:	00d2      	lsls	r2, r2, #3
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4411      	add	r1, r2
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	e9c1 2300 	strd	r2, r3, [r1]
        for(j=0; j < m; j++){
 80018b0:	7dbb      	ldrb	r3, [r7, #22]
 80018b2:	3301      	adds	r3, #1
 80018b4:	75bb      	strb	r3, [r7, #22]
 80018b6:	7dba      	ldrb	r2, [r7, #22]
 80018b8:	7abb      	ldrb	r3, [r7, #10]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3e2      	bcc.n	8001884 <tr+0x1e>
    for(i = 0; i < n; i++){
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	3301      	adds	r3, #1
 80018c2:	75fb      	strb	r3, [r7, #23]
 80018c4:	7dfa      	ldrb	r2, [r7, #23]
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d3d8      	bcc.n	800187e <tr+0x18>
        }
    }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <pseudo_inv>:
- double *psinvM: pointer to the variable that will hold the pseudo-inverse;
@outputs: 
- void;
@#
*/
void pseudo_inv(double *M, double *trM, double *tempM, double *adjM, double *subM, double *invM, double *dotM, uint8_t n, double *psinvM){
 80018da:	b580      	push	{r7, lr}
 80018dc:	b088      	sub	sp, #32
 80018de:	af04      	add	r7, sp, #16
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]
    /* (M^T*M)^(-1)*M^T */
    tr(M, n, n, trM);
 80018e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018ec:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7ff ffb7 	bl	8001866 <tr>
    dot(trM, n, n, M, n, n, dotM);
 80018f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018fc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f7ff fbca 	bl	80010ac <dot>
    inv(dotM, adjM, subM, tempM, n, invM);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	6a38      	ldr	r0, [r7, #32]
 800192a:	f7ff fea7 	bl	800167c <inv>
    dot(invM, n, n, trM, n, n, psinvM);
 800192e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001932:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	9302      	str	r3, [sp, #8]
 800193a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	69f8      	ldr	r0, [r7, #28]
 800194a:	f7ff fbaf 	bl	80010ac <dot>
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <B_calc>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void B_calc(man_t *manip){
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    double q1,q2;
    rblast(&manip->q0_actual, &q1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001966:	f107 0210 	add.w	r2, r7, #16
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f001 fb79 	bl	8003064 <rblast>
    rblast(&manip->q1_actual, &q2);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001978:	f107 0208 	add.w	r2, r7, #8
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f001 fb70 	bl	8003064 <rblast>
    manip->B[0] = (double) (0.024938*cos(q1 + 2*q2) + 0.12469*cos(q1 + q2) + 0.26194*cos(q1) + 0.074812*cos(q2) + 0.16349);
 8001984:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	f7fe fc8e 	bl	80002ac <__adddf3>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800199c:	f7fe fc86 	bl	80002ac <__adddf3>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	ec43 2b17 	vmov	d7, r2, r3
 80019a8:	eeb0 0a47 	vmov.f32	s0, s14
 80019ac:	eef0 0a67 	vmov.f32	s1, s15
 80019b0:	f006 f87a 	bl	8007aa8 <cos>
 80019b4:	ec51 0b10 	vmov	r0, r1, d0
 80019b8:	a3a9      	add	r3, pc, #676	; (adr r3, 8001c60 <B_calc+0x308>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fe2b 	bl	8000618 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4614      	mov	r4, r2
 80019c8:	461d      	mov	r5, r3
 80019ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d2:	f7fe fc6b 	bl	80002ac <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	ec43 2b17 	vmov	d7, r2, r3
 80019de:	eeb0 0a47 	vmov.f32	s0, s14
 80019e2:	eef0 0a67 	vmov.f32	s1, s15
 80019e6:	f006 f85f 	bl	8007aa8 <cos>
 80019ea:	ec51 0b10 	vmov	r0, r1, d0
 80019ee:	a39e      	add	r3, pc, #632	; (adr r3, 8001c68 <B_calc+0x310>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fe10 	bl	8000618 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fc54 	bl	80002ac <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4614      	mov	r4, r2
 8001a0a:	461d      	mov	r5, r3
 8001a0c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a10:	eeb0 0a47 	vmov.f32	s0, s14
 8001a14:	eef0 0a67 	vmov.f32	s1, s15
 8001a18:	f006 f846 	bl	8007aa8 <cos>
 8001a1c:	ec51 0b10 	vmov	r0, r1, d0
 8001a20:	a393      	add	r3, pc, #588	; (adr r3, 8001c70 <B_calc+0x318>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fdf7 	bl	8000618 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4620      	mov	r0, r4
 8001a30:	4629      	mov	r1, r5
 8001a32:	f7fe fc3b 	bl	80002ac <__adddf3>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4614      	mov	r4, r2
 8001a3c:	461d      	mov	r5, r3
 8001a3e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a42:	eeb0 0a47 	vmov.f32	s0, s14
 8001a46:	eef0 0a67 	vmov.f32	s1, s15
 8001a4a:	f006 f82d 	bl	8007aa8 <cos>
 8001a4e:	ec51 0b10 	vmov	r0, r1, d0
 8001a52:	a389      	add	r3, pc, #548	; (adr r3, 8001c78 <B_calc+0x320>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fdde 	bl	8000618 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fc22 	bl	80002ac <__adddf3>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	a383      	add	r3, pc, #524	; (adr r3, 8001c80 <B_calc+0x328>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fc19 	bl	80002ac <__adddf3>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f501 619a 	add.w	r1, r1, #1232	; 0x4d0
 8001a84:	e9c1 2300 	strd	r2, r3, [r1]
    manip->B[1] = (double) (0.012469*cos(q1 + 2*q2) + 0.09975*cos(q1 + q2) + 0.14962*cos(q1) + 0.049875*cos(q2) + 0.058307);
 8001a88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	f7fe fc0c 	bl	80002ac <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aa0:	f7fe fc04 	bl	80002ac <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ec43 2b17 	vmov	d7, r2, r3
 8001aac:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab0:	eef0 0a67 	vmov.f32	s1, s15
 8001ab4:	f005 fff8 	bl	8007aa8 <cos>
 8001ab8:	ec51 0b10 	vmov	r0, r1, d0
 8001abc:	a372      	add	r3, pc, #456	; (adr r3, 8001c88 <B_calc+0x330>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fda9 	bl	8000618 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4614      	mov	r4, r2
 8001acc:	461d      	mov	r5, r3
 8001ace:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ad6:	f7fe fbe9 	bl	80002ac <__adddf3>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	ec43 2b17 	vmov	d7, r2, r3
 8001ae2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae6:	eef0 0a67 	vmov.f32	s1, s15
 8001aea:	f005 ffdd 	bl	8007aa8 <cos>
 8001aee:	ec51 0b10 	vmov	r0, r1, d0
 8001af2:	a367      	add	r3, pc, #412	; (adr r3, 8001c90 <B_calc+0x338>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fd8e 	bl	8000618 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fbd2 	bl	80002ac <__adddf3>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b14:	eeb0 0a47 	vmov.f32	s0, s14
 8001b18:	eef0 0a67 	vmov.f32	s1, s15
 8001b1c:	f005 ffc4 	bl	8007aa8 <cos>
 8001b20:	ec51 0b10 	vmov	r0, r1, d0
 8001b24:	a35c      	add	r3, pc, #368	; (adr r3, 8001c98 <B_calc+0x340>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fd75 	bl	8000618 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f7fe fbb9 	bl	80002ac <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4614      	mov	r4, r2
 8001b40:	461d      	mov	r5, r3
 8001b42:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b46:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4a:	eef0 0a67 	vmov.f32	s1, s15
 8001b4e:	f005 ffab 	bl	8007aa8 <cos>
 8001b52:	ec51 0b10 	vmov	r0, r1, d0
 8001b56:	a352      	add	r3, pc, #328	; (adr r3, 8001ca0 <B_calc+0x348>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fd5c 	bl	8000618 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4620      	mov	r0, r4
 8001b66:	4629      	mov	r1, r5
 8001b68:	f7fe fba0 	bl	80002ac <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	a34c      	add	r3, pc, #304	; (adr r3, 8001ca8 <B_calc+0x350>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f7fe fb97 	bl	80002ac <__adddf3>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 8001b88:	e941 2302 	strd	r2, r3, [r1, #-8]
    manip->B[2] = manip->B[1]; // the matrix is symmetrical
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8001b92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 8001b9c:	e9c1 2300 	strd	r2, r3, [r1]
    manip->B[3] = (double) (0.074812*cos(q1 + q2) + 0.14962*cos(q1) + 0.024938*cos(q2) + 0.058309);
 8001ba0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ba8:	f7fe fb80 	bl	80002ac <__adddf3>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	ec43 2b17 	vmov	d7, r2, r3
 8001bb4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb8:	eef0 0a67 	vmov.f32	s1, s15
 8001bbc:	f005 ff74 	bl	8007aa8 <cos>
 8001bc0:	ec51 0b10 	vmov	r0, r1, d0
 8001bc4:	a32c      	add	r3, pc, #176	; (adr r3, 8001c78 <B_calc+0x320>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fd25 	bl	8000618 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bda:	eeb0 0a47 	vmov.f32	s0, s14
 8001bde:	eef0 0a67 	vmov.f32	s1, s15
 8001be2:	f005 ff61 	bl	8007aa8 <cos>
 8001be6:	ec51 0b10 	vmov	r0, r1, d0
 8001bea:	a32b      	add	r3, pc, #172	; (adr r3, 8001c98 <B_calc+0x340>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	f7fe fd12 	bl	8000618 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	f7fe fb56 	bl	80002ac <__adddf3>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4614      	mov	r4, r2
 8001c06:	461d      	mov	r5, r3
 8001c08:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c10:	eef0 0a67 	vmov.f32	s1, s15
 8001c14:	f005 ff48 	bl	8007aa8 <cos>
 8001c18:	ec51 0b10 	vmov	r0, r1, d0
 8001c1c:	a310      	add	r3, pc, #64	; (adr r3, 8001c60 <B_calc+0x308>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fcf9 	bl	8000618 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe fb3d 	bl	80002ac <__adddf3>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	a31d      	add	r3, pc, #116	; (adr r3, 8001cb0 <B_calc+0x358>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fb34 	bl	80002ac <__adddf3>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 8001c4e:	e941 2302 	strd	r2, r3, [r1, #-8]
    /*  manip::B is actually a vector, but it can be seen as follows: 
        [B[0], B[1]]
        [B[2], B[3]] */
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	f3af 8000 	nop.w
 8001c60:	d9b5e95b 	.word	0xd9b5e95b
 8001c64:	3f998958 	.word	0x3f998958
 8001c68:	102363b2 	.word	0x102363b2
 8001c6c:	3fbfebaf 	.word	0x3fbfebaf
 8001c70:	fd60e94f 	.word	0xfd60e94f
 8001c74:	3fd0c39f 	.word	0x3fd0c39f
 8001c78:	15592d99 	.word	0x15592d99
 8001c7c:	3fb326e1 	.word	0x3fb326e1
 8001c80:	859c8c93 	.word	0x859c8c93
 8001c84:	3fc4ed3d 	.word	0x3fc4ed3d
 8001c88:	d9b5e95b 	.word	0xd9b5e95b
 8001c8c:	3f898958 	.word	0x3f898958
 8001c90:	4bc6a7f0 	.word	0x4bc6a7f0
 8001c94:	3fb98937 	.word	0x3fb98937
 8001c98:	8769ec2d 	.word	0x8769ec2d
 8001c9c:	3fc326bf 	.word	0x3fc326bf
 8001ca0:	4bc6a7f0 	.word	0x4bc6a7f0
 8001ca4:	3fa98937 	.word	0x3fa98937
 8001ca8:	44417870 	.word	0x44417870
 8001cac:	3fadda6a 	.word	0x3fadda6a
 8001cb0:	601ffb48 	.word	0x601ffb48
 8001cb4:	3faddaad 	.word	0x3faddaad

08001cb8 <C_calc>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void C_calc(man_t *manip){
 8001cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cbc:	b08a      	sub	sp, #40	; 0x28
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
    double q1, q2, dq1, dq2;
    rblast(&manip->q0_actual, &q1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001cc8:	f107 0220 	add.w	r2, r7, #32
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f001 f9c8 	bl	8003064 <rblast>
    rblast(&manip->q1_actual, &q2);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001cda:	f107 0218 	add.w	r2, r7, #24
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f001 f9bf 	bl	8003064 <rblast>
    rblast(&manip->dq0_actual, &dq1);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001cec:	f107 0210 	add.w	r2, r7, #16
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f001 f9b6 	bl	8003064 <rblast>
    rblast(&manip->dq1_actual, &dq2);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8001cfe:	f107 0208 	add.w	r2, r7, #8
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 f9ad 	bl	8003064 <rblast>
    manip->C[0] = (double) ( - 0.5*dq2*(0.024938*sin(q1 + 2*q2) + 0.049875*sin(q1 + q2) + 0.049875*sin(q2)));
 8001d0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4bb1      	ldr	r3, [pc, #708]	; (8001fd8 <C_calc+0x320>)
 8001d14:	f7fe fc80 	bl	8000618 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4614      	mov	r4, r2
 8001d1e:	461d      	mov	r5, r3
 8001d20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	f7fe fac0 	bl	80002ac <__adddf3>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d38:	f7fe fab8 	bl	80002ac <__adddf3>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	ec43 2b17 	vmov	d7, r2, r3
 8001d44:	eeb0 0a47 	vmov.f32	s0, s14
 8001d48:	eef0 0a67 	vmov.f32	s1, s15
 8001d4c:	f005 ff00 	bl	8007b50 <sin>
 8001d50:	ec51 0b10 	vmov	r0, r1, d0
 8001d54:	a398      	add	r3, pc, #608	; (adr r3, 8001fb8 <C_calc+0x300>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fc5d 	bl	8000618 <__aeabi_dmul>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4690      	mov	r8, r2
 8001d64:	4699      	mov	r9, r3
 8001d66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6e:	f7fe fa9d 	bl	80002ac <__adddf3>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	ec43 2b17 	vmov	d7, r2, r3
 8001d7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d7e:	eef0 0a67 	vmov.f32	s1, s15
 8001d82:	f005 fee5 	bl	8007b50 <sin>
 8001d86:	ec51 0b10 	vmov	r0, r1, d0
 8001d8a:	a38d      	add	r3, pc, #564	; (adr r3, 8001fc0 <C_calc+0x308>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	f7fe fc42 	bl	8000618 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4640      	mov	r0, r8
 8001d9a:	4649      	mov	r1, r9
 8001d9c:	f7fe fa86 	bl	80002ac <__adddf3>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4690      	mov	r8, r2
 8001da6:	4699      	mov	r9, r3
 8001da8:	ed97 7b06 	vldr	d7, [r7, #24]
 8001dac:	eeb0 0a47 	vmov.f32	s0, s14
 8001db0:	eef0 0a67 	vmov.f32	s1, s15
 8001db4:	f005 fecc 	bl	8007b50 <sin>
 8001db8:	ec51 0b10 	vmov	r0, r1, d0
 8001dbc:	a380      	add	r3, pc, #512	; (adr r3, 8001fc0 <C_calc+0x308>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fc29 	bl	8000618 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4640      	mov	r0, r8
 8001dcc:	4649      	mov	r1, r9
 8001dce:	f7fe fa6d 	bl	80002ac <__adddf3>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	4629      	mov	r1, r5
 8001dda:	f7fe fc1d 	bl	8000618 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 8001de8:	e9c1 2300 	strd	r2, r3, [r1]
    manip->C[1] = (double) ( - 0.012469*(dq1 + dq2)*(sin(q1 + 2*q2) + 2*sin(q1 + q2) + 2*sin(q2)));
 8001dec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001df4:	f7fe fa5a 	bl	80002ac <__adddf3>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	a371      	add	r3, pc, #452	; (adr r3, 8001fc8 <C_calc+0x310>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fc07 	bl	8000618 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	461d      	mov	r5, r3
 8001e12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	f7fe fa47 	bl	80002ac <__adddf3>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e2a:	f7fe fa3f 	bl	80002ac <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	ec43 2b17 	vmov	d7, r2, r3
 8001e36:	eeb0 0a47 	vmov.f32	s0, s14
 8001e3a:	eef0 0a67 	vmov.f32	s1, s15
 8001e3e:	f005 fe87 	bl	8007b50 <sin>
 8001e42:	ec59 8b10 	vmov	r8, r9, d0
 8001e46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e4e:	f7fe fa2d 	bl	80002ac <__adddf3>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	ec43 2b17 	vmov	d7, r2, r3
 8001e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e5e:	eef0 0a67 	vmov.f32	s1, s15
 8001e62:	f005 fe75 	bl	8007b50 <sin>
 8001e66:	ec51 0b10 	vmov	r0, r1, d0
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	f7fe fa1d 	bl	80002ac <__adddf3>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4640      	mov	r0, r8
 8001e78:	4649      	mov	r1, r9
 8001e7a:	f7fe fa17 	bl	80002ac <__adddf3>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4690      	mov	r8, r2
 8001e84:	4699      	mov	r9, r3
 8001e86:	ed97 7b06 	vldr	d7, [r7, #24]
 8001e8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e8e:	eef0 0a67 	vmov.f32	s1, s15
 8001e92:	f005 fe5d 	bl	8007b50 <sin>
 8001e96:	ec51 0b10 	vmov	r0, r1, d0
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	f7fe fa05 	bl	80002ac <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4640      	mov	r0, r8
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	f7fe f9ff 	bl	80002ac <__adddf3>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	4629      	mov	r1, r5
 8001eb6:	f7fe fbaf 	bl	8000618 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8001ec4:	e941 2302 	strd	r2, r3, [r1, #-8]
    manip->C[2] = (double) (dq1*(0.012469*sin(q1 + 2*q2) + 0.024938*sin(q1 + q2) + 0.024938*sin(q2)));
 8001ec8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	f7fe f9ec 	bl	80002ac <__adddf3>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ee0:	f7fe f9e4 	bl	80002ac <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	ec43 2b17 	vmov	d7, r2, r3
 8001eec:	eeb0 0a47 	vmov.f32	s0, s14
 8001ef0:	eef0 0a67 	vmov.f32	s1, s15
 8001ef4:	f005 fe2c 	bl	8007b50 <sin>
 8001ef8:	ec51 0b10 	vmov	r0, r1, d0
 8001efc:	a334      	add	r3, pc, #208	; (adr r3, 8001fd0 <C_calc+0x318>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	f7fe fb89 	bl	8000618 <__aeabi_dmul>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4614      	mov	r4, r2
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f16:	f7fe f9c9 	bl	80002ac <__adddf3>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	ec43 2b17 	vmov	d7, r2, r3
 8001f22:	eeb0 0a47 	vmov.f32	s0, s14
 8001f26:	eef0 0a67 	vmov.f32	s1, s15
 8001f2a:	f005 fe11 	bl	8007b50 <sin>
 8001f2e:	ec51 0b10 	vmov	r0, r1, d0
 8001f32:	a321      	add	r3, pc, #132	; (adr r3, 8001fb8 <C_calc+0x300>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb6e 	bl	8000618 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f9b2 	bl	80002ac <__adddf3>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4614      	mov	r4, r2
 8001f4e:	461d      	mov	r5, r3
 8001f50:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f54:	eeb0 0a47 	vmov.f32	s0, s14
 8001f58:	eef0 0a67 	vmov.f32	s1, s15
 8001f5c:	f005 fdf8 	bl	8007b50 <sin>
 8001f60:	ec51 0b10 	vmov	r0, r1, d0
 8001f64:	a314      	add	r3, pc, #80	; (adr r3, 8001fb8 <C_calc+0x300>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe fb55 	bl	8000618 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4620      	mov	r0, r4
 8001f74:	4629      	mov	r1, r5
 8001f76:	f7fe f999 	bl	80002ac <__adddf3>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f86:	f7fe fb47 	bl	8000618 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8001f94:	e9c1 2300 	strd	r2, r3, [r1]
    manip->C[3] = (double) 0.0;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e941 2302 	strd	r2, r3, [r1, #-8]
    /*  manip::C is actually a vector, but it can be seen as follows: 
        [C[0], C[1]]
        [C[2], C[3]] */
}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fb6:	bf00      	nop
 8001fb8:	d9b5e95b 	.word	0xd9b5e95b
 8001fbc:	3f998958 	.word	0x3f998958
 8001fc0:	4bc6a7f0 	.word	0x4bc6a7f0
 8001fc4:	3fa98937 	.word	0x3fa98937
 8001fc8:	d9b5e95b 	.word	0xd9b5e95b
 8001fcc:	bf898958 	.word	0xbf898958
 8001fd0:	d9b5e95b 	.word	0xd9b5e95b
 8001fd4:	3f898958 	.word	0x3f898958
 8001fd8:	bfe00000 	.word	0xbfe00000

08001fdc <controller>:
- double *u: double[2] vector pointer that holds the control input to apply to motors (speed control);
@outputs: 
- void;
@#
*/
void controller(man_t *manip, double *u){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b0ce      	sub	sp, #312	; 0x138
 8001fe0:	af04      	add	r7, sp, #16
 8001fe2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001fe6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001fea:	6018      	str	r0, [r3, #0]
 8001fec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ff0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ff4:	6019      	str	r1, [r3, #0]
    double q[2], dq[2], ddq[2], q_actual[2], dq_actual[2], ddq_actual[2];
    double ep[2], ed[2], y[2], tau[2], Kpep[2], Kded[2], By[2], Cdq[2];
    double Bddq[2], invC[4], result[2];

    /* data preparation */
    rbpop(&manip->q0, &q[0]);
 8001ff6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ffa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fff2 	bl	8002ff0 <rbpop>
    rbpop(&manip->q1, &q[1]);
 800200c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002010:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800201a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800201e:	3308      	adds	r3, #8
 8002020:	4619      	mov	r1, r3
 8002022:	4610      	mov	r0, r2
 8002024:	f000 ffe4 	bl	8002ff0 <rbpop>
    rbpop(&manip->dq0, &dq[0]);
 8002028:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800202c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	33b0      	adds	r3, #176	; 0xb0
 8002034:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f000 ffd8 	bl	8002ff0 <rbpop>
    rbpop(&manip->dq1, &dq[1]);
 8002040:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002044:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800204e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002052:	3308      	adds	r3, #8
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f000 ffca 	bl	8002ff0 <rbpop>
    rbpop(&manip->ddq0, &ddq[0]);
 800205c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002060:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800206a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f000 ffbd 	bl	8002ff0 <rbpop>
    rbpop(&manip->ddq1, &ddq[1]);
 8002076:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800207a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8002084:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002088:	3308      	adds	r3, #8
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f000 ffaf 	bl	8002ff0 <rbpop>
    rblast(&manip->q0_actual, &q_actual[0]);
 8002092:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002096:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80020a0:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 ffdc 	bl	8003064 <rblast>
    rblast(&manip->q1_actual, &q_actual[1]);
 80020ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80020b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 80020ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020be:	3308      	adds	r3, #8
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 ffce 	bl	8003064 <rblast>
    rblast(&manip->dq0_actual, &dq_actual[0]);
 80020c8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80020cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80020d6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 ffc1 	bl	8003064 <rblast>
    rblast(&manip->dq1_actual, &dq_actual[1]);
 80020e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80020e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f503 725c 	add.w	r2, r3, #880	; 0x370
 80020f0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020f4:	3308      	adds	r3, #8
 80020f6:	4619      	mov	r1, r3
 80020f8:	4610      	mov	r0, r2
 80020fa:	f000 ffb3 	bl	8003064 <rblast>
    rblast(&manip->ddq0_actual, &ddq_actual[0]);
 80020fe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002102:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800210c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f000 ffa6 	bl	8003064 <rblast>
    rblast(&manip->ddq1_actual, &ddq_actual[1]);
 8002118:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800211c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 8002126:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800212a:	3308      	adds	r3, #8
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f000 ff98 	bl	8003064 <rblast>
    B_calc(manip);
 8002134:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002138:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	f7ff fc0b 	bl	8001958 <B_calc>
    C_calc(manip);
 8002142:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002146:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	f7ff fdb4 	bl	8001cb8 <C_calc>

    diff(q, q_actual, 2, ep); /* q - q_d */
 8002150:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002154:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8002158:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800215c:	2202      	movs	r2, #2
 800215e:	f7ff f8de 	bl	800131e <diff>
    diff(dq, dq_actual, 2, ed); /* dq - dq_d */
 8002162:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002166:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800216a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800216e:	2202      	movs	r2, #2
 8002170:	f7ff f8d5 	bl	800131e <diff>

    dot((double *) Kp, 2, 2, ep, 2, 1, Kpep); /* Kp*ep */
 8002174:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8002178:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800217c:	9302      	str	r3, [sp, #8]
 800217e:	2301      	movs	r3, #1
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	2302      	movs	r3, #2
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	4613      	mov	r3, r2
 8002188:	2202      	movs	r2, #2
 800218a:	2102      	movs	r1, #2
 800218c:	484c      	ldr	r0, [pc, #304]	; (80022c0 <controller+0x2e4>)
 800218e:	f7fe ff8d 	bl	80010ac <dot>
    dot((double *) Kd, 2, 2, ed, 2, 1, Kded); /* Kd*ed */
 8002192:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002196:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800219a:	9302      	str	r3, [sp, #8]
 800219c:	2301      	movs	r3, #1
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	2302      	movs	r3, #2
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	2202      	movs	r2, #2
 80021a8:	2102      	movs	r1, #2
 80021aa:	4846      	ldr	r0, [pc, #280]	; (80022c4 <controller+0x2e8>)
 80021ac:	f7fe ff7e 	bl	80010ac <dot>

    /* y = Kp*e_p + Kd*e_d + ddq */
    sum(Kpep, Kded, 2, y);
 80021b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021b4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80021b8:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80021bc:	2202      	movs	r2, #2
 80021be:	f7ff f881 	bl	80012c4 <sum>
    sum(y, ddq, 2, y);
 80021c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021c6:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80021ca:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80021ce:	2202      	movs	r2, #2
 80021d0:	f7ff f878 	bl	80012c4 <sum>

    dot(manip->B, 2, 2, y, 2, 1, By); /* B*y */
 80021d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80021d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f503 609a 	add.w	r0, r3, #1232	; 0x4d0
 80021e2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80021e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021ea:	9302      	str	r3, [sp, #8]
 80021ec:	2301      	movs	r3, #1
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	2302      	movs	r3, #2
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	2202      	movs	r2, #2
 80021f8:	2102      	movs	r1, #2
 80021fa:	f7fe ff57 	bl	80010ac <dot>
    dot(manip->C, 2, 2, dq_actual, 2, 1, Cdq); /* C*dq */
 80021fe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002202:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f503 609e 	add.w	r0, r3, #1264	; 0x4f0
 800220c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8002210:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	2301      	movs	r3, #1
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	2302      	movs	r3, #2
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	2202      	movs	r2, #2
 8002222:	2102      	movs	r1, #2
 8002224:	f7fe ff42 	bl	80010ac <dot>
    sum(By, Cdq, 2, tau); /* tau = B*y+C*dq  */
 8002228:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800222c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002230:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002234:	2202      	movs	r2, #2
 8002236:	f7ff f845 	bl	80012c4 <sum>

    dot(manip->B, 2, 2, ddq_actual, 2, 1, Bddq); /* B*ddq */
 800223a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800223e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 609a 	add.w	r0, r3, #1232	; 0x4d0
 8002248:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800224c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	2301      	movs	r3, #1
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	2302      	movs	r3, #2
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	2202      	movs	r2, #2
 800225e:	2102      	movs	r1, #2
 8002260:	f7fe ff24 	bl	80010ac <dot>
    diff(tau, Bddq, 2, result); /* tau - B*ddq */
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800226c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002270:	2202      	movs	r2, #2
 8002272:	f7ff f854 	bl	800131e <diff>
    inv2x2(manip->C, invC); /* inv(C) */
 8002276:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800227a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8002284:	f107 0218 	add.w	r2, r7, #24
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe ff9b 	bl	80011c6 <inv2x2>
    dot(invC, 2, 2, result, 2, 1, u); /* u = inv(C) * (tau - B*ddq) */
 8002290:	f107 0208 	add.w	r2, r7, #8
 8002294:	f107 0018 	add.w	r0, r7, #24
 8002298:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800229c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	2301      	movs	r3, #1
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	2302      	movs	r3, #2
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	2202      	movs	r2, #2
 80022b0:	2102      	movs	r1, #2
 80022b2:	f7fe fefb 	bl	80010ac <dot>
}
 80022b6:	bf00      	nop
 80022b8:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	08009930 	.word	0x08009930
 80022c4:	08009950 	.word	0x08009950

080022c8 <rad2stepdir>:
- int8_t *dir: pointer to the variable that will hold the direction (+1 means counterclockwise, -1 means clockwise);
@outputs: 
- void;
@#
*/
void rad2stepdir(double dq, double resolution, double frequency, uint32_t *steps, int8_t *dir){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	ed87 0b06 	vstr	d0, [r7, #24]
 80022d2:	ed87 1b04 	vstr	d1, [r7, #16]
 80022d6:	ed87 2b02 	vstr	d2, [r7, #8]
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
    dq = delta_q/delta_t = delta_q*f -> stepdir*Resolution*f
    stepdir = dq/(Resolution*f)
    dir = sign(stepdir)
    step = abs(stepdir)
    */
    int32_t stepdir = (int32_t) (dq/(resolution*frequency));
 80022de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022e6:	f7fe f997 	bl	8000618 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022f2:	f7fe fabb 	bl	800086c <__aeabi_ddiv>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fc3b 	bl	8000b78 <__aeabi_d2iz>
 8002302:	4603      	mov	r3, r0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
    *dir = SIGN(stepdir);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	43db      	mvns	r3, r3
 800230a:	0fdb      	lsrs	r3, r3, #31
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	2b00      	cmp	r3, #0
 8002314:	bfd4      	ite	le
 8002316:	2301      	movle	r3, #1
 8002318:	2300      	movgt	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	b25a      	sxtb	r2, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	701a      	strb	r2, [r3, #0]
    *steps = abs(stepdir);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	2b00      	cmp	r3, #0
 800232a:	bfb8      	it	lt
 800232c:	425b      	neglt	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	0000      	movs	r0, r0
	...

08002340 <speed_estimation>:
- double *a_est: pointer to the variable that will hold the acceleration estimation;
@outputs: 
- void;
@#
*/
void speed_estimation(ringbuffer_t *q_actual, double *v_est, double *a_est){
 8002340:	b5b0      	push	{r4, r5, r7, lr}
 8002342:	ed2d 8b02 	vpush	{d8}
 8002346:	f5ad 5dca 	sub.w	sp, sp, #6464	; 0x1940
 800234a:	b082      	sub	sp, #8
 800234c:	af06      	add	r7, sp, #24
 800234e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8002352:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8002356:	6018      	str	r0, [r3, #0]
 8002358:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800235c:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 8002360:	6019      	str	r1, [r3, #0]
 8002362:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8002366:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800236a:	601a      	str	r2, [r3, #0]
    /* temp matrices */
    double trM[ESTIMATION_STEPS*ESTIMATION_STEPS], tempM[ESTIMATION_STEPS*ESTIMATION_STEPS];
    double adjM[ESTIMATION_STEPS*ESTIMATION_STEPS], subM[(ESTIMATION_STEPS-1)*(ESTIMATION_STEPS-1)];
    double invM[ESTIMATION_STEPS*ESTIMATION_STEPS], dotM[ESTIMATION_STEPS*ESTIMATION_STEPS];

    now = (double) HAL_GetTick(); /* time passed from when the process launch */
 800236c:	f001 fa04 	bl	8003778 <HAL_GetTick>
 8002370:	4603      	mov	r3, r0
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f8d6 	bl	8000524 <__aeabi_ui2d>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	f507 51c9 	add.w	r1, r7, #6432	; 0x1920
 8002380:	e9c1 2300 	strd	r2, r3, [r1]
    uint8_t i,j;
    for(i = 0; i < ESTIMATION_STEPS; i++){
 8002384:	2300      	movs	r3, #0
 8002386:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 800238a:	f102 020f 	add.w	r2, r2, #15
 800238e:	7013      	strb	r3, [r2, #0]
 8002390:	e07f      	b.n	8002492 <speed_estimation+0x152>
        for(j = 0; j < ESTIMATION_STEPS; j++){
 8002392:	2300      	movs	r3, #0
 8002394:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 8002398:	f102 020e 	add.w	r2, r2, #14
 800239c:	7013      	strb	r3, [r2, #0]
 800239e:	e066      	b.n	800246e <speed_estimation+0x12e>
            A[j+i*ESTIMATION_STEPS] = pow((double)(now - i*T_C), (double) ESTIMATION_STEPS-i-1);
 80023a0:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80023a4:	f103 030f 	add.w	r3, r3, #15
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8ca 	bl	8000544 <__aeabi_i2d>
 80023b0:	a37f      	add	r3, pc, #508	; (adr r3, 80025b0 <speed_estimation+0x270>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe f92f 	bl	8000618 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	f507 51c9 	add.w	r1, r7, #6432	; 0x1920
 80023c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023c6:	f7fd ff6f 	bl	80002a8 <__aeabi_dsub>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	ec43 2b18 	vmov	d8, r2, r3
 80023d2:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80023d6:	f103 030f 	add.w	r3, r3, #15
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f8b1 	bl	8000544 <__aeabi_i2d>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	f04f 0000 	mov.w	r0, #0
 80023ea:	496f      	ldr	r1, [pc, #444]	; (80025a8 <speed_estimation+0x268>)
 80023ec:	f7fd ff5c 	bl	80002a8 <__aeabi_dsub>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b6b      	ldr	r3, [pc, #428]	; (80025ac <speed_estimation+0x26c>)
 80023fe:	f7fd ff53 	bl	80002a8 <__aeabi_dsub>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	ec43 2b17 	vmov	d7, r2, r3
 800240a:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800240e:	f103 030e 	add.w	r3, r3, #14
 8002412:	7819      	ldrb	r1, [r3, #0]
 8002414:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002418:	f103 030f 	add.w	r3, r3, #15
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	18cc      	adds	r4, r1, r3
 8002428:	eeb0 1a47 	vmov.f32	s2, s14
 800242c:	eef0 1a67 	vmov.f32	s3, s15
 8002430:	eeb0 0a48 	vmov.f32	s0, s16
 8002434:	eef0 0a68 	vmov.f32	s1, s17
 8002438:	f005 fbe2 	bl	8007c00 <pow>
 800243c:	eeb0 7a40 	vmov.f32	s14, s0
 8002440:	eef0 7a60 	vmov.f32	s15, s1
 8002444:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002448:	f103 0310 	add.w	r3, r3, #16
 800244c:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8002450:	00e3      	lsls	r3, r4, #3
 8002452:	4413      	add	r3, r2
 8002454:	ed83 7b00 	vstr	d7, [r3]
        for(j = 0; j < ESTIMATION_STEPS; j++){
 8002458:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800245c:	f103 030e 	add.w	r3, r3, #14
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 8002468:	f102 020e 	add.w	r2, r2, #14
 800246c:	7013      	strb	r3, [r2, #0]
 800246e:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002472:	f103 030e 	add.w	r3, r3, #14
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b09      	cmp	r3, #9
 800247a:	d991      	bls.n	80023a0 <speed_estimation+0x60>
    for(i = 0; i < ESTIMATION_STEPS; i++){
 800247c:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002480:	f103 030f 	add.w	r3, r3, #15
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 800248c:	f102 020f 	add.w	r2, r2, #15
 8002490:	7013      	strb	r3, [r2, #0]
 8002492:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002496:	f103 030f 	add.w	r3, r3, #15
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b09      	cmp	r3, #9
 800249e:	f67f af78 	bls.w	8002392 <speed_estimation+0x52>
        }
    }

    for(i = 0; i < ESTIMATION_STEPS; i++){
 80024a2:	2300      	movs	r3, #0
 80024a4:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 80024a8:	f102 020f 	add.w	r2, r2, #15
 80024ac:	7013      	strb	r3, [r2, #0]
 80024ae:	e021      	b.n	80024f4 <speed_estimation+0x1b4>
        rbget(q_actual, i, &X[i]);
 80024b0:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80024b4:	f103 030f 	add.w	r3, r3, #15
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	f507 52ad 	add.w	r2, r7, #5536	; 0x15a0
 80024be:	f102 0208 	add.w	r2, r2, #8
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	441a      	add	r2, r3
 80024c6:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80024ca:	f103 030f 	add.w	r3, r3, #15
 80024ce:	7819      	ldrb	r1, [r3, #0]
 80024d0:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80024d4:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	f000 fde3 	bl	80030a4 <rbget>
    for(i = 0; i < ESTIMATION_STEPS; i++){
 80024de:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80024e2:	f103 030f 	add.w	r3, r3, #15
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 80024ee:	f102 020f 	add.w	r2, r2, #15
 80024f2:	7013      	strb	r3, [r2, #0]
 80024f4:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80024f8:	f103 030f 	add.w	r3, r3, #15
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b09      	cmp	r3, #9
 8002500:	d9d6      	bls.n	80024b0 <speed_estimation+0x170>
        ---
        p_i -> P[i]
        x_i=A_i*P -> X = [x_0; x_1; ...; x_n] = [A_0; A_1; ...; A_n]*P = A*P -> P = A^(-1)*X = (A^T*A)^(-1)*A^T*X
    */

    pseudo_inv(A, trM, tempM, adjM, subM, invM, dotM, ESTIMATION_STEPS, invA);
 8002502:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8002506:	3b18      	subs	r3, #24
 8002508:	f607 34f8 	addw	r4, r7, #3064	; 0xbf8
 800250c:	f607 7118 	addw	r1, r7, #3864	; 0xf18
 8002510:	f507 50af 	add.w	r0, r7, #5600	; 0x15e0
 8002514:	f100 0018 	add.w	r0, r0, #24
 8002518:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800251c:	f102 0218 	add.w	r2, r2, #24
 8002520:	9204      	str	r2, [sp, #16]
 8002522:	220a      	movs	r2, #10
 8002524:	9203      	str	r2, [sp, #12]
 8002526:	f107 0210 	add.w	r2, r7, #16
 800252a:	9202      	str	r2, [sp, #8]
 800252c:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8002530:	9201      	str	r2, [sp, #4]
 8002532:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002536:	9200      	str	r2, [sp, #0]
 8002538:	4622      	mov	r2, r4
 800253a:	f7ff f9ce 	bl	80018da <pseudo_inv>
    dot(invA, ESTIMATION_STEPS, ESTIMATION_STEPS, X, ESTIMATION_STEPS, 1, P);
 800253e:	f507 52ad 	add.w	r2, r7, #5536	; 0x15a0
 8002542:	f102 0208 	add.w	r2, r2, #8
 8002546:	f507 5091 	add.w	r0, r7, #4640	; 0x1220
 800254a:	f100 0018 	add.w	r0, r0, #24
 800254e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8002552:	f103 0318 	add.w	r3, r3, #24
 8002556:	9302      	str	r3, [sp, #8]
 8002558:	2301      	movs	r3, #1
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	230a      	movs	r3, #10
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	220a      	movs	r2, #10
 8002564:	210a      	movs	r1, #10
 8002566:	f7fe fda1 	bl	80010ac <dot>
    *v_est = 0;
 800256a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800256e:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	e9c1 2300 	strd	r2, r3, [r1]
    *a_est = 0;
 8002580:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8002584:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < ESTIMATION_STEPS; i++){
 8002596:	2300      	movs	r3, #0
 8002598:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 800259c:	f102 020f 	add.w	r2, r2, #15
 80025a0:	7013      	strb	r3, [r2, #0]
 80025a2:	e10b      	b.n	80027bc <speed_estimation+0x47c>
 80025a4:	f3af 8000 	nop.w
 80025a8:	40240000 	.word	0x40240000
 80025ac:	3ff00000 	.word	0x3ff00000
 80025b0:	47ae147b 	.word	0x47ae147b
 80025b4:	3f847ae1 	.word	0x3f847ae1
        esp = (ESTIMATION_STEPS-i-1);
 80025b8:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80025bc:	f103 030f 	add.w	r3, r3, #15
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	f1c3 0309 	rsb	r3, r3, #9
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ffbc 	bl	8000544 <__aeabi_i2d>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80025d4:	f101 0118 	add.w	r1, r1, #24
 80025d8:	e9c1 2300 	strd	r2, r3, [r1]
        /* the derivation of constant values is 0 -> exclude the derivative of the constant values from the computation otherwise it would be now^i with i < 0 */
        if(esp-1 >= 0){
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	4b7f      	ldr	r3, [pc, #508]	; (80027e0 <speed_estimation+0x4a0>)
 80025e2:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80025e6:	f101 0118 	add.w	r1, r1, #24
 80025ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025ee:	f7fd fe5b 	bl	80002a8 <__aeabi_dsub>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	f7fe fa8f 	bl	8000b24 <__aeabi_dcmpge>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d04d      	beq.n	80026a8 <speed_estimation+0x368>
            *v_est += esp*pow(now, esp-1)*P[i];
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <speed_estimation+0x4a0>)
 8002612:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8002616:	f101 0118 	add.w	r1, r1, #24
 800261a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800261e:	f7fd fe43 	bl	80002a8 <__aeabi_dsub>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	ec43 2b17 	vmov	d7, r2, r3
 800262a:	eeb0 1a47 	vmov.f32	s2, s14
 800262e:	eef0 1a67 	vmov.f32	s3, s15
 8002632:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002636:	ed93 0b00 	vldr	d0, [r3]
 800263a:	f005 fae1 	bl	8007c00 <pow>
 800263e:	ec51 0b10 	vmov	r0, r1, d0
 8002642:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8002646:	f103 0318 	add.w	r3, r3, #24
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	f7fd ffe3 	bl	8000618 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800265e:	f103 030f 	add.w	r3, r3, #15
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 8002668:	f102 0210 	add.w	r2, r2, #16
 800266c:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f7fd ffce 	bl	8000618 <__aeabi_dmul>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8002688:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	f7fd fe0b 	bl	80002ac <__adddf3>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 800269e:	f6a1 1128 	subw	r1, r1, #2344	; 0x928
 80026a2:	6809      	ldr	r1, [r1, #0]
 80026a4:	e9c1 2300 	strd	r2, r3, [r1]
        }
        if(esp-2 >= 0){ 
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026b0:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80026b4:	f101 0118 	add.w	r1, r1, #24
 80026b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026bc:	f7fd fdf4 	bl	80002a8 <__aeabi_dsub>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	f7fe fa28 	bl	8000b24 <__aeabi_dcmpge>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d065      	beq.n	80027a6 <speed_estimation+0x466>
            *a_est += esp*(esp-1)*pow(now, esp-2)*P[i];
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <speed_estimation+0x4a0>)
 80026e0:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80026e4:	f101 0118 	add.w	r1, r1, #24
 80026e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ec:	f7fd fddc 	bl	80002a8 <__aeabi_dsub>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80026fc:	f103 0318 	add.w	r3, r3, #24
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f7fd ff88 	bl	8000618 <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4614      	mov	r4, r2
 800270e:	461d      	mov	r5, r3
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002718:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 800271c:	f101 0118 	add.w	r1, r1, #24
 8002720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002724:	f7fd fdc0 	bl	80002a8 <__aeabi_dsub>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	ec43 2b17 	vmov	d7, r2, r3
 8002730:	eeb0 1a47 	vmov.f32	s2, s14
 8002734:	eef0 1a67 	vmov.f32	s3, s15
 8002738:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800273c:	ed93 0b00 	vldr	d0, [r3]
 8002740:	f005 fa5e 	bl	8007c00 <pow>
 8002744:	ec53 2b10 	vmov	r2, r3, d0
 8002748:	4620      	mov	r0, r4
 800274a:	4629      	mov	r1, r5
 800274c:	f7fd ff64 	bl	8000618 <__aeabi_dmul>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800275c:	f103 030f 	add.w	r3, r3, #15
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 8002766:	f102 0210 	add.w	r2, r2, #16
 800276a:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fd ff4f 	bl	8000618 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8002786:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd fd8c 	bl	80002ac <__adddf3>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 800279c:	f6a1 112c 	subw	r1, r1, #2348	; 0x92c
 80027a0:	6809      	ldr	r1, [r1, #0]
 80027a2:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < ESTIMATION_STEPS; i++){
 80027a6:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80027aa:	f103 030f 	add.w	r3, r3, #15
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 80027b6:	f102 020f 	add.w	r2, r2, #15
 80027ba:	7013      	strb	r3, [r2, #0]
 80027bc:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80027c0:	f103 030f 	add.w	r3, r3, #15
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b09      	cmp	r3, #9
 80027c8:	f67f aef6 	bls.w	80025b8 <speed_estimation+0x278>
        }
    }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	f507 57c9 	add.w	r7, r7, #6432	; 0x1920
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	ecbd 8b02 	vpop	{d8}
 80027dc:	bdb0      	pop	{r4, r5, r7, pc}
 80027de:	bf00      	nop
 80027e0:	3ff00000 	.word	0x3ff00000

080027e4 <init_rate>:
- uint32_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint32_t ms){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
    rate->last_time = HAL_GetTick();
 80027ee:	f000 ffc3 	bl	8003778 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	601a      	str	r2, [r3, #0]
    rate->delta_time = ms;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	605a      	str	r2, [r3, #4]
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <rate_sleep>:
- rate_t *rate: pointer to the rate struct;
@outputs: 
- void;
@#
*/
void rate_sleep(rate_t *rate){
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
    double now, interval;
    now = HAL_GetTick();
 800280e:	f000 ffb3 	bl	8003778 <HAL_GetTick>
 8002812:	4603      	mov	r3, r0
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fe85 	bl	8000524 <__aeabi_ui2d>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    interval = (uint32_t) (now - rate->last_time); /* time passed from the last rate_sleep call */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fe7c 	bl	8000524 <__aeabi_ui2d>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002834:	f7fd fd38 	bl	80002a8 <__aeabi_dsub>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f7fe f9c2 	bl	8000bc8 <__aeabi_d2uiz>
 8002844:	4603      	mov	r3, r0
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fe6c 	bl	8000524 <__aeabi_ui2d>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	e9c7 2302 	strd	r2, r3, [r7, #8]
    /* wait until enough time has passed from the last rate_sleep call */
    while( interval < rate->delta_time){
 8002854:	e022      	b.n	800289c <rate_sleep+0x96>
        now = HAL_GetTick();
 8002856:	f000 ff8f 	bl	8003778 <HAL_GetTick>
 800285a:	4603      	mov	r3, r0
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe61 	bl	8000524 <__aeabi_ui2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	e9c7 2304 	strd	r2, r3, [r7, #16]
        interval = (uint32_t) (now - rate->last_time);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe58 	bl	8000524 <__aeabi_ui2d>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800287c:	f7fd fd14 	bl	80002a8 <__aeabi_dsub>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f7fe f99e 	bl	8000bc8 <__aeabi_d2uiz>
 800288c:	4603      	mov	r3, r0
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe48 	bl	8000524 <__aeabi_ui2d>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while( interval < rate->delta_time){
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fe3f 	bl	8000524 <__aeabi_ui2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ae:	f7fe f925 	bl	8000afc <__aeabi_dcmplt>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ce      	bne.n	8002856 <rate_sleep+0x50>
    }
    /* if enough time has passed, save the time stamp and go on with the process */
    rate->last_time = now;
 80028b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028bc:	f7fe f984 	bl	8000bc8 <__aeabi_d2uiz>
 80028c0:	4602      	mov	r2, r0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
    return;
 80028c6:	bf00      	nop
}
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <read_encoders>:
- TIM_HandleTypeDef *htim2: pointer to the timer struct that decodes the second encoder;
- man_t *manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void read_encoders(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, man_t *manip){
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b08c      	sub	sp, #48	; 0x30
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
    CNT/ARR returns a value between 0 and 1: by multiplying it by 2*pi the resulting value shows the position of the motor
    the reduction of the motor is already taken care of in the ARR value: ARR=CPR*REDUCTION -> 4x1000xreduction
    4x is caused by the timer mode (TI1 and TI2)
    */
    double v_est, a_est; /* used to hold temporarily the estimations of speed and acceleration */
    double displacement1 = (double) (2*M_PI*(htim1->Instance->CNT)/(htim1->Instance->ARR));
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fe1e 	bl	8000524 <__aeabi_ui2d>
 80028e8:	a36f      	add	r3, pc, #444	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f7fd fe93 	bl	8000618 <__aeabi_dmul>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4614      	mov	r4, r2
 80028f8:	461d      	mov	r5, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fe0f 	bl	8000524 <__aeabi_ui2d>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4620      	mov	r0, r4
 800290c:	4629      	mov	r1, r5
 800290e:	f7fd ffad 	bl	800086c <__aeabi_ddiv>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double displacement2 = (double) (2*M_PI) - (2*M_PI*(htim2->Instance->CNT)/(htim2->Instance->ARR)); /* the motor is upside down */
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fdff 	bl	8000524 <__aeabi_ui2d>
 8002926:	a360      	add	r3, pc, #384	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fe74 	bl	8000618 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4614      	mov	r4, r2
 8002936:	461d      	mov	r5, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fdf0 	bl	8000524 <__aeabi_ui2d>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4620      	mov	r0, r4
 800294a:	4629      	mov	r1, r5
 800294c:	f7fd ff8e 	bl	800086c <__aeabi_ddiv>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	a154      	add	r1, pc, #336	; (adr r1, 8002aa8 <read_encoders+0x1d8>)
 8002956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800295a:	f7fd fca5 	bl	80002a8 <__aeabi_dsub>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if(displacement1 > 2*M_PI){
 8002966:	a350      	add	r3, pc, #320	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002970:	f7fe f8e2 	bl	8000b38 <__aeabi_dcmpgt>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d004      	beq.n	8002984 <read_encoders+0xb4>
    	displacement1 = 2*M_PI; /* clamping */
 800297a:	a34b      	add	r3, pc, #300	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}
	if(displacement2 > 2*M_PI){
 8002984:	a348      	add	r3, pc, #288	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800298e:	f7fe f8d3 	bl	8000b38 <__aeabi_dcmpgt>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <read_encoders+0xd2>
		displacement2 = 2*M_PI; /* clamping */
 8002998:	a343      	add	r3, pc, #268	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}
    if(displacement1 > M_PI){
 80029a2:	a343      	add	r3, pc, #268	; (adr r3, 8002ab0 <read_encoders+0x1e0>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029ac:	f7fe f8c4 	bl	8000b38 <__aeabi_dcmpgt>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <read_encoders+0xfc>
    	displacement1 = displacement1 - (2*M_PI); /* redefining the domain between -PI and +PI */
 80029b6:	a33c      	add	r3, pc, #240	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029c0:	f7fd fc72 	bl	80002a8 <__aeabi_dsub>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }
    if(displacement2 > M_PI){
 80029cc:	a338      	add	r3, pc, #224	; (adr r3, 8002ab0 <read_encoders+0x1e0>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029d6:	f7fe f8af 	bl	8000b38 <__aeabi_dcmpgt>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <read_encoders+0x126>
    	displacement2 = displacement2 - (2*M_PI); /* redefining the domain between -PI and +PI */
 80029e0:	a331      	add	r3, pc, #196	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029ea:	f7fd fc5d 	bl	80002a8 <__aeabi_dsub>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    /* the 5th bit of the CR1 register is the DIR bit */
    /*
    uint8_t dir1 = (uint8_t) (htim1->Instance->CR1 >> 4) & 1;
    uint8_t dir2 = (uint8_t) (htim2->Instance->CR1 >> 4) & 1;
    */
    rbpush(&manip->q0_actual, displacement1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80029fc:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 faa9 	bl	8002f58 <rbpush>
    rbpush(&manip->q1_actual, displacement2);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002a0c:	ed97 0b08 	vldr	d0, [r7, #32]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 faa1 	bl	8002f58 <rbpush>
    /* TODO: do logging of data */

    /* speed and acceleration estimations for both motors*/
    speed_estimation(&manip->q0_actual, &v_est, &a_est);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002a1c:	f107 0210 	add.w	r2, r7, #16
 8002a20:	f107 0118 	add.w	r1, r7, #24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc8b 	bl	8002340 <speed_estimation>
    rbpush(&manip->dq0_actual, v_est);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002a30:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a34:	eeb0 0a47 	vmov.f32	s0, s14
 8002a38:	eef0 0a67 	vmov.f32	s1, s15
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fa8b 	bl	8002f58 <rbpush>
    rbpush(&manip->ddq0_actual, a_est);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8002a48:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a50:	eef0 0a67 	vmov.f32	s1, s15
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fa7f 	bl	8002f58 <rbpush>

    speed_estimation(&manip->q1_actual, &v_est, &a_est);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002a60:	f107 0210 	add.w	r2, r7, #16
 8002a64:	f107 0118 	add.w	r1, r7, #24
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fc69 	bl	8002340 <speed_estimation>
    rbpush(&manip->dq1_actual, v_est);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8002a74:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a78:	eeb0 0a47 	vmov.f32	s0, s14
 8002a7c:	eef0 0a67 	vmov.f32	s1, s15
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fa69 	bl	8002f58 <rbpush>
    rbpush(&manip->ddq1_actual, a_est);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8002a8c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a90:	eeb0 0a47 	vmov.f32	s0, s14
 8002a94:	eef0 0a67 	vmov.f32	s1, s15
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fa5d 	bl	8002f58 <rbpush>

}
 8002a9e:	bf00      	nop
 8002aa0:	3730      	adds	r7, #48	; 0x30
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	54442d18 	.word	0x54442d18
 8002aac:	401921fb 	.word	0x401921fb
 8002ab0:	54442d18 	.word	0x54442d18
 8002ab4:	400921fb 	.word	0x400921fb

08002ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002abe:	f000 fdf5 	bl	80036ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ac2:	f000 f863 	bl	8002b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ac6:	f000 f9bd 	bl	8002e44 <MX_GPIO_Init>
  MX_DMA_Init();
 8002aca:	f000 f99b 	bl	8002e04 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002ace:	f000 f96f 	bl	8002db0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002ad2:	f000 f8c5 	bl	8002c60 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002ad6:	f000 f917 	bl	8002d08 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip); /* initialize the manipulator struct */
 8002ada:	4827      	ldr	r0, [pc, #156]	; (8002b78 <main+0xc0>)
 8002adc:	f7fe faac 	bl	8001038 <init_man>
  init_rate(&rate, (uint32_t) (T_C*1000)); /* initialize the rate struct */
 8002ae0:	f107 0320 	add.w	r3, r7, #32
 8002ae4:	210a      	movs	r1, #10
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fe7c 	bl	80027e4 <init_rate>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8002aec:	2240      	movs	r2, #64	; 0x40
 8002aee:	4923      	ldr	r1, [pc, #140]	; (8002b7c <main+0xc4>)
 8002af0:	4823      	ldr	r0, [pc, #140]	; (8002b80 <main+0xc8>)
 8002af2:	f002 fd5a 	bl	80055aa <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* start timers */
  HAL_TIM_Base_Start_IT(&htim3);
 8002af6:	4823      	ldr	r0, [pc, #140]	; (8002b84 <main+0xcc>)
 8002af8:	f002 f9c6 	bl	8004e88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002afc:	4822      	ldr	r0, [pc, #136]	; (8002b88 <main+0xd0>)
 8002afe:	f002 f9c3 	bl	8004e88 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    read_encoders(&htim3, &htim4, &manip);
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <main+0xc0>)
 8002b04:	4920      	ldr	r1, [pc, #128]	; (8002b88 <main+0xd0>)
 8002b06:	481f      	ldr	r0, [pc, #124]	; (8002b84 <main+0xcc>)
 8002b08:	f7ff fee2 	bl	80028d0 <read_encoders>
    controller(&manip, u); /* apply the control law to find the input */
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	4619      	mov	r1, r3
 8002b12:	4819      	ldr	r0, [pc, #100]	; (8002b78 <main+0xc0>)
 8002b14:	f7ff fa62 	bl	8001fdc <controller>
    /* change the input from [rad/s] to [steps] and [direction] (stepdir) */
    rad2stepdir(u[0], (double) RESOLUTION, (double) 1/T_C, &steps0, &dir0); /* first motor */
 8002b18:	ed97 7b04 	vldr	d7, [r7, #16]
 8002b1c:	1dfa      	adds	r2, r7, #7
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8002b68 <main+0xb0>
 8002b2a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8002b70 <main+0xb8>
 8002b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b32:	eef0 0a67 	vmov.f32	s1, s15
 8002b36:	f7ff fbc7 	bl	80022c8 <rad2stepdir>
    rad2stepdir(u[1], (double) RESOLUTION, (double) 1/T_C, &steps1, &dir1); /* second motor */
 8002b3a:	ed97 7b06 	vldr	d7, [r7, #24]
 8002b3e:	1dba      	adds	r2, r7, #6
 8002b40:	f107 0308 	add.w	r3, r7, #8
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	ed9f 2b07 	vldr	d2, [pc, #28]	; 8002b68 <main+0xb0>
 8002b4c:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8002b70 <main+0xb8>
 8002b50:	eeb0 0a47 	vmov.f32	s0, s14
 8002b54:	eef0 0a67 	vmov.f32	s1, s15
 8002b58:	f7ff fbb6 	bl	80022c8 <rad2stepdir>
    /* apply the inputs to the motors */
    // TODO: implement methods to apply inputs to motors !!
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    rate_sleep(&rate); /* wait with a fixed frequency */
 8002b5c:	f107 0320 	add.w	r3, r7, #32
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fe50 	bl	8002806 <rate_sleep>
    read_encoders(&htim3, &htim4, &manip);
 8002b66:	e7cc      	b.n	8002b02 <main+0x4a>
 8002b68:	00000000 	.word	0x00000000
 8002b6c:	40590000 	.word	0x40590000
 8002b70:	2a305532 	.word	0x2a305532
 8002b74:	3fa013a9 	.word	0x3fa013a9
 8002b78:	200000d0 	.word	0x200000d0
 8002b7c:	2000008c 	.word	0x2000008c
 8002b80:	20000678 	.word	0x20000678
 8002b84:	200005e8 	.word	0x200005e8
 8002b88:	20000630 	.word	0x20000630

08002b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b094      	sub	sp, #80	; 0x50
 8002b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b92:	f107 0320 	add.w	r3, r7, #32
 8002b96:	2230      	movs	r2, #48	; 0x30
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 fde8 	bl	8006770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <SystemClock_Config+0xcc>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <SystemClock_Config+0xcc>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc0:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <SystemClock_Config+0xcc>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <SystemClock_Config+0xd0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <SystemClock_Config+0xd0>)
 8002bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <SystemClock_Config+0xd0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002be8:	2302      	movs	r3, #2
 8002bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bec:	2301      	movs	r3, #1
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002c00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002c06:	2304      	movs	r3, #4
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c0e:	f107 0320 	add.w	r3, r7, #32
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 fca0 	bl	8004558 <HAL_RCC_OscConfig>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002c1e:	f000 f995 	bl	8002f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c22:	230f      	movs	r3, #15
 8002c24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c26:	2302      	movs	r3, #2
 8002c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 ff02 	bl	8004a48 <HAL_RCC_ClockConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c4a:	f000 f97f 	bl	8002f4c <Error_Handler>
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3750      	adds	r7, #80	; 0x50
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40007000 	.word	0x40007000

08002c60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08c      	sub	sp, #48	; 0x30
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c66:	f107 030c 	add.w	r3, r7, #12
 8002c6a:	2224      	movs	r2, #36	; 0x24
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 fd7e 	bl	8006770 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c7c:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <MX_TIM3_Init+0xa0>)
 8002c7e:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <MX_TIM3_Init+0xa4>)
 8002c80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c82:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <MX_TIM3_Init+0xa0>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <MX_TIM3_Init+0xa0>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <MX_TIM3_Init+0xa0>)
 8002c90:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002c94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c96:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <MX_TIM3_Init+0xa0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9c:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <MX_TIM3_Init+0xa0>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002caa:	2301      	movs	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002cc6:	f107 030c 	add.w	r3, r7, #12
 8002cca:	4619      	mov	r1, r3
 8002ccc:	480c      	ldr	r0, [pc, #48]	; (8002d00 <MX_TIM3_Init+0xa0>)
 8002cce:	f002 f93d 	bl	8004f4c <HAL_TIM_Encoder_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002cd8:	f000 f938 	bl	8002f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4805      	ldr	r0, [pc, #20]	; (8002d00 <MX_TIM3_Init+0xa0>)
 8002cea:	f002 fb8f 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002cf4:	f000 f92a 	bl	8002f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cf8:	bf00      	nop
 8002cfa:	3730      	adds	r7, #48	; 0x30
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	200005e8 	.word	0x200005e8
 8002d04:	40000400 	.word	0x40000400

08002d08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08c      	sub	sp, #48	; 0x30
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d0e:	f107 030c 	add.w	r3, r7, #12
 8002d12:	2224      	movs	r2, #36	; 0x24
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 fd2a 	bl	8006770 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d24:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <MX_TIM4_Init+0xa0>)
 8002d26:	4a21      	ldr	r2, [pc, #132]	; (8002dac <MX_TIM4_Init+0xa4>)
 8002d28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <MX_TIM4_Init+0xa0>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <MX_TIM4_Init+0xa0>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <MX_TIM4_Init+0xa0>)
 8002d38:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002d3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <MX_TIM4_Init+0xa0>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d44:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <MX_TIM4_Init+0xa0>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d52:	2301      	movs	r3, #1
 8002d54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d62:	2301      	movs	r3, #1
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002d6e:	f107 030c 	add.w	r3, r7, #12
 8002d72:	4619      	mov	r1, r3
 8002d74:	480c      	ldr	r0, [pc, #48]	; (8002da8 <MX_TIM4_Init+0xa0>)
 8002d76:	f002 f8e9 	bl	8004f4c <HAL_TIM_Encoder_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002d80:	f000 f8e4 	bl	8002f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4805      	ldr	r0, [pc, #20]	; (8002da8 <MX_TIM4_Init+0xa0>)
 8002d92:	f002 fb3b 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002d9c:	f000 f8d6 	bl	8002f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002da0:	bf00      	nop
 8002da2:	3730      	adds	r7, #48	; 0x30
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000630 	.word	0x20000630
 8002dac:	40000800 	.word	0x40000800

08002db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <MX_USART2_UART_Init+0x50>)
 8002db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002dd6:	220c      	movs	r2, #12
 8002dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_USART2_UART_Init+0x4c>)
 8002de8:	f002 fb92 	bl	8005510 <HAL_UART_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002df2:	f000 f8ab 	bl	8002f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000678 	.word	0x20000678
 8002e00:	40004400 	.word	0x40004400

08002e04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <MX_DMA_Init+0x3c>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <MX_DMA_Init+0x3c>)
 8002e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <MX_DMA_Init+0x3c>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2010      	movs	r0, #16
 8002e2c:	f000 fd8b 	bl	8003946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002e30:	2010      	movs	r0, #16
 8002e32:	f000 fda4 	bl	800397e <HAL_NVIC_EnableIRQ>

}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800

08002e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4a:	f107 0314 	add.w	r3, r7, #20
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	60da      	str	r2, [r3, #12]
 8002e58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	4b38      	ldr	r3, [pc, #224]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a37      	ldr	r2, [pc, #220]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002e64:	f043 0304 	orr.w	r3, r3, #4
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b35      	ldr	r3, [pc, #212]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a30      	ldr	r2, [pc, #192]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a29      	ldr	r2, [pc, #164]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	4b23      	ldr	r3, [pc, #140]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002eb8:	f043 0302 	orr.w	r3, r3, #2
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <MX_GPIO_Init+0xfc>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2120      	movs	r1, #32
 8002ece:	481d      	ldr	r0, [pc, #116]	; (8002f44 <MX_GPIO_Init+0x100>)
 8002ed0:	f001 faf6 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002eda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4817      	ldr	r0, [pc, #92]	; (8002f48 <MX_GPIO_Init+0x104>)
 8002eec:	f001 f964 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efc:	2300      	movs	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	4619      	mov	r1, r3
 8002f06:	480f      	ldr	r0, [pc, #60]	; (8002f44 <MX_GPIO_Init+0x100>)
 8002f08:	f001 f956 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|LIMIT_SWITCH_2_Pin;
 8002f0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1c:	f107 0314 	add.w	r3, r7, #20
 8002f20:	4619      	mov	r1, r3
 8002f22:	4808      	ldr	r0, [pc, #32]	; (8002f44 <MX_GPIO_Init+0x100>)
 8002f24:	f001 f948 	bl	80041b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2028      	movs	r0, #40	; 0x28
 8002f2e:	f000 fd0a 	bl	8003946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f32:	2028      	movs	r0, #40	; 0x28
 8002f34:	f000 fd23 	bl	800397e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f38:	bf00      	nop
 8002f3a:	3728      	adds	r7, #40	; 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40020000 	.word	0x40020000
 8002f48:	40020800 	.word	0x40020800

08002f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f50:	b672      	cpsid	i
}
 8002f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <Error_Handler+0x8>
	...

08002f58 <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	ed87 0b00 	vstr	d0, [r7]
    buffer->buffer[buffer->tail] = data;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	18d1      	adds	r1, r2, r3
 8002f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f74:	e9c1 2300 	strd	r2, r3, [r1]
    buffer->tail++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	781a      	ldrb	r2, [r3, #0]
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <rbpush+0x94>)
 8002f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8e:	08d9      	lsrs	r1, r3, #3
 8002f90:	460b      	mov	r3, r1
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	789b      	ldrb	r3, [r3, #2]
 8002fa4:	2b0a      	cmp	r3, #10
 8002fa6:	d114      	bne.n	8002fd2 <rbpush+0x7a>
        /* overwriting data: also move head forward */
        buffer->head++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	785b      	ldrb	r3, [r3, #1]
 8002fac:	3301      	adds	r3, #1
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	785a      	ldrb	r2, [r3, #1]
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <rbpush+0x94>)
 8002fba:	fba3 1302 	umull	r1, r3, r3, r2
 8002fbe:	08d9      	lsrs	r1, r3, #3
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	705a      	strb	r2, [r3, #1]
 8002fd0:	e005      	b.n	8002fde <rbpush+0x86>
    }else{
        buffer->length++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	789b      	ldrb	r3, [r3, #2]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 8002fde:	2301      	movs	r3, #1
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	cccccccd 	.word	0xcccccccd

08002ff0 <rbpop>:
- rbelement_t *data: pointer to the variable that will hold the popped value;
@outputs: 
- rberror_t: whether the popping procedure was concluded successfully.
@#
*/
rberror_t rbpop(ringbuffer_t *buffer, rbelement_t *data){
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	789b      	ldrb	r3, [r3, #2]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <rbpop+0x16>
        return 0; /* pop operation could not be completed because the buffer is empty */
 8003002:	2300      	movs	r3, #0
 8003004:	e025      	b.n	8003052 <rbpop+0x62>
    }
    *data = buffer->buffer[buffer->head];
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	3301      	adds	r3, #1
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	6839      	ldr	r1, [r7, #0]
 8003018:	e9c1 2300 	strd	r2, r3, [r1]
    buffer->head++;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	3301      	adds	r3, #1
 8003022:	b2da      	uxtb	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	705a      	strb	r2, [r3, #1]
    buffer->head %= RBUF_SZ;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	785a      	ldrb	r2, [r3, #1]
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <rbpop+0x70>)
 800302e:	fba3 1302 	umull	r1, r3, r3, r2
 8003032:	08d9      	lsrs	r1, r3, #3
 8003034:	460b      	mov	r3, r1
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	b2da      	uxtb	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	705a      	strb	r2, [r3, #1]
    buffer->length--;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	789b      	ldrb	r3, [r3, #2]
 8003048:	3b01      	subs	r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	709a      	strb	r2, [r3, #2]
    return 1;
 8003050:	2301      	movs	r3, #1
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	cccccccd 	.word	0xcccccccd

08003064 <rblast>:
- rbelement_t *data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	789b      	ldrb	r3, [r3, #2]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <rblast+0x16>
        return 0; // operation failed
 8003076:	2300      	movs	r3, #0
 8003078:	e00e      	b.n	8003098 <rblast+0x34>
    }
    uint8_t index = buffer->tail-1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	3b01      	subs	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
        index += RBUF_SZ;
    }
    *data = buffer->buffer[index];
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	3301      	adds	r3, #1
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	6839      	ldr	r1, [r7, #0]
 8003092:	e9c1 2300 	strd	r2, r3, [r1]
    return 1;
 8003096:	2301      	movs	r3, #1
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <rbget>:

rberror_t rbget(ringbuffer_t *buffer, uint8_t i, rbelement_t *element){
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	460b      	mov	r3, r1
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	789b      	ldrb	r3, [r3, #2]
 80030b6:	7afa      	ldrb	r2, [r7, #11]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d301      	bcc.n	80030c0 <rbget+0x1c>
        /* out of bounds */
        return 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	e01c      	b.n	80030fa <rbget+0x56>
    }
    uint8_t index = (buffer->head+i) % RBUF_SZ;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	461a      	mov	r2, r3
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	441a      	add	r2, r3
 80030ca:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <rbget+0x64>)
 80030cc:	fb83 1302 	smull	r1, r3, r3, r2
 80030d0:	1099      	asrs	r1, r3, #2
 80030d2:	17d3      	asrs	r3, r2, #31
 80030d4:	1ac9      	subs	r1, r1, r3
 80030d6:	460b      	mov	r3, r1
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	1ad1      	subs	r1, r2, r3
 80030e0:	460b      	mov	r3, r1
 80030e2:	75fb      	strb	r3, [r7, #23]
    *element = buffer->buffer[index];
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	3301      	adds	r3, #1
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	e9c1 2300 	strd	r2, r3, [r1]
    return 1;
 80030f8:	2301      	movs	r3, #1
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	66666667 	.word	0x66666667

0800310c <rbclear>:
- ringbuffer_t *buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e00d      	b.n	800313a <rbclear+0x2e>
        buffer->buffer[i] = 0;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	3301      	adds	r3, #1
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	18d1      	adds	r1, r2, r3
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < RBUF_SZ; i++){
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	3301      	adds	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b09      	cmp	r3, #9
 800313e:	d9ee      	bls.n	800311e <rbclear+0x12>
    }
    buffer->length = 0;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_MspInit+0x4c>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <HAL_MspInit+0x4c>)
 8003170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003174:	6453      	str	r3, [r2, #68]	; 0x44
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <HAL_MspInit+0x4c>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_MspInit+0x4c>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a08      	ldr	r2, [pc, #32]	; (80031ac <HAL_MspInit+0x4c>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_MspInit+0x4c>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800319e:	2007      	movs	r0, #7
 80031a0:	f000 fbc6 	bl	8003930 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40023800 	.word	0x40023800

080031b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08c      	sub	sp, #48	; 0x30
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b8:	f107 031c 	add.w	r3, r7, #28
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a3a      	ldr	r2, [pc, #232]	; (80032b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d134      	bne.n	800323c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	4b39      	ldr	r3, [pc, #228]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4a38      	ldr	r2, [pc, #224]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
 80031e2:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	4b32      	ldr	r3, [pc, #200]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a31      	ldr	r2, [pc, #196]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b2f      	ldr	r3, [pc, #188]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800320a:	23c0      	movs	r3, #192	; 0xc0
 800320c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003216:	2300      	movs	r3, #0
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800321a:	2302      	movs	r3, #2
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321e:	f107 031c 	add.w	r3, r7, #28
 8003222:	4619      	mov	r1, r3
 8003224:	4826      	ldr	r0, [pc, #152]	; (80032c0 <HAL_TIM_Encoder_MspInit+0x110>)
 8003226:	f000 ffc7 	bl	80041b8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	201d      	movs	r0, #29
 8003230:	f000 fb89 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003234:	201d      	movs	r0, #29
 8003236:	f000 fba2 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800323a:	e038      	b.n	80032ae <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <HAL_TIM_Encoder_MspInit+0x114>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d133      	bne.n	80032ae <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
 8003256:	4b19      	ldr	r3, [pc, #100]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800327e:	23c0      	movs	r3, #192	; 0xc0
 8003280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800328e:	2302      	movs	r3, #2
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	4619      	mov	r1, r3
 8003298:	480b      	ldr	r0, [pc, #44]	; (80032c8 <HAL_TIM_Encoder_MspInit+0x118>)
 800329a:	f000 ff8d 	bl	80041b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	201e      	movs	r0, #30
 80032a4:	f000 fb4f 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032a8:	201e      	movs	r0, #30
 80032aa:	f000 fb68 	bl	800397e <HAL_NVIC_EnableIRQ>
}
 80032ae:	bf00      	nop
 80032b0:	3730      	adds	r7, #48	; 0x30
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40020000 	.word	0x40020000
 80032c4:	40000800 	.word	0x40000800
 80032c8:	40020400 	.word	0x40020400

080032cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a39      	ldr	r2, [pc, #228]	; (80033d0 <HAL_UART_MspInit+0x104>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d16b      	bne.n	80033c6 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <HAL_UART_MspInit+0x108>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	4a37      	ldr	r2, [pc, #220]	; (80033d4 <HAL_UART_MspInit+0x108>)
 80032f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fc:	6413      	str	r3, [r2, #64]	; 0x40
 80032fe:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <HAL_UART_MspInit+0x108>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <HAL_UART_MspInit+0x108>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a30      	ldr	r2, [pc, #192]	; (80033d4 <HAL_UART_MspInit+0x108>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <HAL_UART_MspInit+0x108>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003326:	230c      	movs	r3, #12
 8003328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003332:	2303      	movs	r3, #3
 8003334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003336:	2307      	movs	r3, #7
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333a:	f107 0314 	add.w	r3, r7, #20
 800333e:	4619      	mov	r1, r3
 8003340:	4825      	ldr	r0, [pc, #148]	; (80033d8 <HAL_UART_MspInit+0x10c>)
 8003342:	f000 ff39 	bl	80041b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003346:	4b25      	ldr	r3, [pc, #148]	; (80033dc <HAL_UART_MspInit+0x110>)
 8003348:	4a25      	ldr	r2, [pc, #148]	; (80033e0 <HAL_UART_MspInit+0x114>)
 800334a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800334c:	4b23      	ldr	r3, [pc, #140]	; (80033dc <HAL_UART_MspInit+0x110>)
 800334e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003352:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003354:	4b21      	ldr	r3, [pc, #132]	; (80033dc <HAL_UART_MspInit+0x110>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_UART_MspInit+0x110>)
 800335c:	2200      	movs	r2, #0
 800335e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003360:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <HAL_UART_MspInit+0x110>)
 8003362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003366:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003368:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <HAL_UART_MspInit+0x110>)
 800336a:	2200      	movs	r2, #0
 800336c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_UART_MspInit+0x110>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_UART_MspInit+0x110>)
 8003376:	2200      	movs	r2, #0
 8003378:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800337a:	4b18      	ldr	r3, [pc, #96]	; (80033dc <HAL_UART_MspInit+0x110>)
 800337c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003380:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003382:	4b16      	ldr	r3, [pc, #88]	; (80033dc <HAL_UART_MspInit+0x110>)
 8003384:	2204      	movs	r2, #4
 8003386:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <HAL_UART_MspInit+0x110>)
 800338a:	2203      	movs	r2, #3
 800338c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <HAL_UART_MspInit+0x110>)
 8003390:	2200      	movs	r2, #0
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003394:	4b11      	ldr	r3, [pc, #68]	; (80033dc <HAL_UART_MspInit+0x110>)
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800339a:	4810      	ldr	r0, [pc, #64]	; (80033dc <HAL_UART_MspInit+0x110>)
 800339c:	f000 fb0a 	bl	80039b4 <HAL_DMA_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80033a6:	f7ff fdd1 	bl	8002f4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <HAL_UART_MspInit+0x110>)
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <HAL_UART_MspInit+0x110>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	2100      	movs	r1, #0
 80033ba:	2026      	movs	r0, #38	; 0x26
 80033bc:	f000 fac3 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033c0:	2026      	movs	r0, #38	; 0x26
 80033c2:	f000 fadc 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033c6:	bf00      	nop
 80033c8:	3728      	adds	r7, #40	; 0x28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40004400 	.word	0x40004400
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40020000 	.word	0x40020000
 80033dc:	200006bc 	.word	0x200006bc
 80033e0:	40026088 	.word	0x40026088

080033e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033e8:	e7fe      	b.n	80033e8 <NMI_Handler+0x4>

080033ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ee:	e7fe      	b.n	80033ee <HardFault_Handler+0x4>

080033f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f4:	e7fe      	b.n	80033f4 <MemManage_Handler+0x4>

080033f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fa:	e7fe      	b.n	80033fa <BusFault_Handler+0x4>

080033fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003400:	e7fe      	b.n	8003400 <UsageFault_Handler+0x4>

08003402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003430:	f000 f98e 	bl	8003750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}

08003438 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <DMA1_Stream5_IRQHandler+0x10>)
 800343e:	f000 fc51 	bl	8003ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200006bc 	.word	0x200006bc

0800344c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <TIM3_IRQHandler+0x10>)
 8003452:	f001 fe21 	bl	8005098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200005e8 	.word	0x200005e8

08003460 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <TIM4_IRQHandler+0x10>)
 8003466:	f001 fe17 	bl	8005098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000630 	.word	0x20000630

08003474 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <USART2_IRQHandler+0x10>)
 800347a:	f002 f8c7 	bl	800560c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000678 	.word	0x20000678

08003488 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_1_Pin);
 800348c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003490:	f001 f84a 	bl	8004528 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_2_Pin);
 8003494:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003498:	f001 f846 	bl	8004528 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800349c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80034a0:	f001 f842 	bl	8004528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
	return 1;
 80034ac:	2301      	movs	r3, #1
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <_kill>:

int _kill(int pid, int sig)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80034c2:	f003 f92b 	bl	800671c <__errno>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2216      	movs	r2, #22
 80034ca:	601a      	str	r2, [r3, #0]
	return -1;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_exit>:

void _exit (int status)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034e0:	f04f 31ff 	mov.w	r1, #4294967295
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ffe7 	bl	80034b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80034ea:	e7fe      	b.n	80034ea <_exit+0x12>

080034ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e00a      	b.n	8003514 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034fe:	f3af 8000 	nop.w
 8003502:	4601      	mov	r1, r0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	60ba      	str	r2, [r7, #8]
 800350a:	b2ca      	uxtb	r2, r1
 800350c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3301      	adds	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	dbf0      	blt.n	80034fe <_read+0x12>
	}

return len;
 800351c:	687b      	ldr	r3, [r7, #4]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e009      	b.n	800354c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	60ba      	str	r2, [r7, #8]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	3301      	adds	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	dbf1      	blt.n	8003538 <_write+0x12>
	}
	return len;
 8003554:	687b      	ldr	r3, [r7, #4]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_close>:

int _close(int file)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
	return -1;
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003586:	605a      	str	r2, [r3, #4]
	return 0;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <_isatty>:

int _isatty(int file)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
	return 1;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
	return 0;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <_sbrk+0x5c>)
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <_sbrk+0x60>)
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035dc:	4b13      	ldr	r3, [pc, #76]	; (800362c <_sbrk+0x64>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <_sbrk+0x64>)
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <_sbrk+0x68>)
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d207      	bcs.n	8003608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035f8:	f003 f890 	bl	800671c <__errno>
 80035fc:	4603      	mov	r3, r0
 80035fe:	220c      	movs	r2, #12
 8003600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	e009      	b.n	800361c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <_sbrk+0x64>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <_sbrk+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	4a05      	ldr	r2, [pc, #20]	; (800362c <_sbrk+0x64>)
 8003618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800361a:	68fb      	ldr	r3, [r7, #12]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20020000 	.word	0x20020000
 8003628:	00000400 	.word	0x00000400
 800362c:	2000071c 	.word	0x2000071c
 8003630:	20000738 	.word	0x20000738

08003634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <SystemInit+0x20>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <SystemInit+0x20>)
 8003640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003690 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800365c:	480d      	ldr	r0, [pc, #52]	; (8003694 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800365e:	490e      	ldr	r1, [pc, #56]	; (8003698 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003660:	4a0e      	ldr	r2, [pc, #56]	; (800369c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003664:	e002      	b.n	800366c <LoopCopyDataInit>

08003666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800366a:	3304      	adds	r3, #4

0800366c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800366c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800366e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003670:	d3f9      	bcc.n	8003666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003672:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003674:	4c0b      	ldr	r4, [pc, #44]	; (80036a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003678:	e001      	b.n	800367e <LoopFillZerobss>

0800367a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800367a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800367c:	3204      	adds	r2, #4

0800367e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800367e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003680:	d3fb      	bcc.n	800367a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003682:	f7ff ffd7 	bl	8003634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003686:	f003 f84f 	bl	8006728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800368a:	f7ff fa15 	bl	8002ab8 <main>
  bx  lr    
 800368e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003698:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800369c:	08009df0 	.word	0x08009df0
  ldr r2, =_sbss
 80036a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80036a4:	20000734 	.word	0x20000734

080036a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036a8:	e7fe      	b.n	80036a8 <ADC_IRQHandler>
	...

080036ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <HAL_Init+0x40>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <HAL_Init+0x40>)
 80036b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_Init+0x40>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <HAL_Init+0x40>)
 80036c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <HAL_Init+0x40>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_Init+0x40>)
 80036ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036d4:	2003      	movs	r0, #3
 80036d6:	f000 f92b 	bl	8003930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036da:	2000      	movs	r0, #0
 80036dc:	f000 f808 	bl	80036f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e0:	f7ff fd3e 	bl	8003160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023c00 	.word	0x40023c00

080036f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_InitTick+0x54>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_InitTick+0x58>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	4619      	mov	r1, r3
 8003702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003706:	fbb3 f3f1 	udiv	r3, r3, r1
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f943 	bl	800399a <HAL_SYSTICK_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e00e      	b.n	800373c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b0f      	cmp	r3, #15
 8003722:	d80a      	bhi.n	800373a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003724:	2200      	movs	r2, #0
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	f000 f90b 	bl	8003946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003730:	4a06      	ldr	r2, [pc, #24]	; (800374c <HAL_InitTick+0x5c>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	e000      	b.n	800373c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000000 	.word	0x20000000
 8003748:	20000008 	.word	0x20000008
 800374c:	20000004 	.word	0x20000004

08003750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_IncTick+0x20>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_IncTick+0x24>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4413      	add	r3, r2
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <HAL_IncTick+0x24>)
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000008 	.word	0x20000008
 8003774:	20000720 	.word	0x20000720

08003778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return uwTick;
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <HAL_GetTick+0x14>)
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000720 	.word	0x20000720

08003790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <__NVIC_SetPriorityGrouping+0x44>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037ac:	4013      	ands	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c2:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <__NVIC_SetPriorityGrouping+0x44>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	60d3      	str	r3, [r2, #12]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <__NVIC_GetPriorityGrouping+0x18>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	f003 0307 	and.w	r3, r3, #7
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	2b00      	cmp	r3, #0
 8003804:	db0b      	blt.n	800381e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	4907      	ldr	r1, [pc, #28]	; (800382c <__NVIC_EnableIRQ+0x38>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2001      	movs	r0, #1
 8003816:	fa00 f202 	lsl.w	r2, r0, r2
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000e100 	.word	0xe000e100

08003830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	6039      	str	r1, [r7, #0]
 800383a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	db0a      	blt.n	800385a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	490c      	ldr	r1, [pc, #48]	; (800387c <__NVIC_SetPriority+0x4c>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	0112      	lsls	r2, r2, #4
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	440b      	add	r3, r1
 8003854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003858:	e00a      	b.n	8003870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4908      	ldr	r1, [pc, #32]	; (8003880 <__NVIC_SetPriority+0x50>)
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	3b04      	subs	r3, #4
 8003868:	0112      	lsls	r2, r2, #4
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	440b      	add	r3, r1
 800386e:	761a      	strb	r2, [r3, #24]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000e100 	.word	0xe000e100
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f1c3 0307 	rsb	r3, r3, #7
 800389e:	2b04      	cmp	r3, #4
 80038a0:	bf28      	it	cs
 80038a2:	2304      	movcs	r3, #4
 80038a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3304      	adds	r3, #4
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	d902      	bls.n	80038b4 <NVIC_EncodePriority+0x30>
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3b03      	subs	r3, #3
 80038b2:	e000      	b.n	80038b6 <NVIC_EncodePriority+0x32>
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	401a      	ands	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038cc:	f04f 31ff 	mov.w	r1, #4294967295
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	43d9      	mvns	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038dc:	4313      	orrs	r3, r2
         );
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3724      	adds	r7, #36	; 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038fc:	d301      	bcc.n	8003902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038fe:	2301      	movs	r3, #1
 8003900:	e00f      	b.n	8003922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <SysTick_Config+0x40>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390a:	210f      	movs	r1, #15
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	f7ff ff8e 	bl	8003830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <SysTick_Config+0x40>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391a:	4b04      	ldr	r3, [pc, #16]	; (800392c <SysTick_Config+0x40>)
 800391c:	2207      	movs	r2, #7
 800391e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	e000e010 	.word	0xe000e010

08003930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff29 	bl	8003790 <__NVIC_SetPriorityGrouping>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003946:	b580      	push	{r7, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003958:	f7ff ff3e 	bl	80037d8 <__NVIC_GetPriorityGrouping>
 800395c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff ff8e 	bl	8003884 <NVIC_EncodePriority>
 8003968:	4602      	mov	r2, r0
 800396a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff5d 	bl	8003830 <__NVIC_SetPriority>
}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	4603      	mov	r3, r0
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ff31 	bl	80037f4 <__NVIC_EnableIRQ>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ffa2 	bl	80038ec <SysTick_Config>
 80039a8:	4603      	mov	r3, r0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7ff feda 	bl	8003778 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e099      	b.n	8003b04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039f0:	e00f      	b.n	8003a12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039f2:	f7ff fec1 	bl	8003778 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d908      	bls.n	8003a12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2203      	movs	r2, #3
 8003a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e078      	b.n	8003b04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e8      	bne.n	80039f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4b38      	ldr	r3, [pc, #224]	; (8003b0c <HAL_DMA_Init+0x158>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d107      	bne.n	8003a7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	4313      	orrs	r3, r2
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f023 0307 	bic.w	r3, r3, #7
 8003a92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d117      	bne.n	8003ad6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fb01 	bl	80040c0 <DMA_CheckFifoParam>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2240      	movs	r2, #64	; 0x40
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e016      	b.n	8003b04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fab8 	bl	8004054 <DMA_CalcBaseAndBitshift>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	223f      	movs	r2, #63	; 0x3f
 8003aee:	409a      	lsls	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	f010803f 	.word	0xf010803f

08003b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_DMA_Start_IT+0x26>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e040      	b.n	8003bb8 <HAL_DMA_Start_IT+0xa8>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d12f      	bne.n	8003baa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fa4a 	bl	8003ff8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	223f      	movs	r2, #63	; 0x3f
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0216 	orr.w	r2, r2, #22
 8003b7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0208 	orr.w	r2, r2, #8
 8003b96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e005      	b.n	8003bb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bce:	f7ff fdd3 	bl	8003778 <HAL_GetTick>
 8003bd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d008      	beq.n	8003bf2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e052      	b.n	8003c98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0216 	bic.w	r2, r2, #22
 8003c00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <HAL_DMA_Abort+0x62>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0208 	bic.w	r2, r2, #8
 8003c30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0201 	bic.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c42:	e013      	b.n	8003c6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c44:	f7ff fd98 	bl	8003778 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d90c      	bls.n	8003c6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e015      	b.n	8003c98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e4      	bne.n	8003c44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	223f      	movs	r2, #63	; 0x3f
 8003c80:	409a      	lsls	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d004      	beq.n	8003cbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e00c      	b.n	8003cd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2205      	movs	r2, #5
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cf0:	4b8e      	ldr	r3, [pc, #568]	; (8003f2c <HAL_DMA_IRQHandler+0x248>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a8e      	ldr	r2, [pc, #568]	; (8003f30 <HAL_DMA_IRQHandler+0x24c>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	0a9b      	lsrs	r3, r3, #10
 8003cfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0e:	2208      	movs	r2, #8
 8003d10:	409a      	lsls	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01a      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d013      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0204 	bic.w	r2, r2, #4
 8003d36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	f043 0201 	orr.w	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d54:	2201      	movs	r2, #1
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d012      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d72:	2201      	movs	r2, #1
 8003d74:	409a      	lsls	r2, r3
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	f043 0202 	orr.w	r2, r3, #2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d012      	beq.n	8003dbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00b      	beq.n	8003dbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	2204      	movs	r2, #4
 8003daa:	409a      	lsls	r2, r3
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	f043 0204 	orr.w	r2, r3, #4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d043      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d03c      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	2210      	movs	r2, #16
 8003de0:	409a      	lsls	r2, r3
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d018      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d108      	bne.n	8003e14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d024      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	4798      	blx	r3
 8003e12:	e01f      	b.n	8003e54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01b      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
 8003e24:	e016      	b.n	8003e54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d107      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0208 	bic.w	r2, r2, #8
 8003e42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	2220      	movs	r2, #32
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 808f 	beq.w	8003f84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8087 	beq.w	8003f84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d136      	bne.n	8003efc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0216 	bic.w	r2, r2, #22
 8003e9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <HAL_DMA_IRQHandler+0x1da>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0208 	bic.w	r2, r2, #8
 8003ecc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	223f      	movs	r2, #63	; 0x3f
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d07e      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	4798      	blx	r3
        }
        return;
 8003efa:	e079      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01d      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10d      	bne.n	8003f34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d031      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	4798      	blx	r3
 8003f28:	e02c      	b.n	8003f84 <HAL_DMA_IRQHandler+0x2a0>
 8003f2a:	bf00      	nop
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d023      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4798      	blx	r3
 8003f44:	e01e      	b.n	8003f84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10f      	bne.n	8003f74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0210 	bic.w	r2, r2, #16
 8003f62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d032      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d022      	beq.n	8003fde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2205      	movs	r2, #5
 8003f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d307      	bcc.n	8003fcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f2      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0x2cc>
 8003fca:	e000      	b.n	8003fce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4798      	blx	r3
 8003fee:	e000      	b.n	8003ff2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ff0:	bf00      	nop
    }
  }
}
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004014:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d108      	bne.n	8004038 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004036:	e007      	b.n	8004048 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	60da      	str	r2, [r3, #12]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	3b10      	subs	r3, #16
 8004064:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800406e:	4a13      	ldr	r2, [pc, #76]	; (80040bc <DMA_CalcBaseAndBitshift+0x68>)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d909      	bls.n	8004096 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	1d1a      	adds	r2, r3, #4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	659a      	str	r2, [r3, #88]	; 0x58
 8004094:	e007      	b.n	80040a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800409e:	f023 0303 	bic.w	r3, r3, #3
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	aaaaaaab 	.word	0xaaaaaaab
 80040bc:	08009988 	.word	0x08009988

080040c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d11f      	bne.n	800411a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d856      	bhi.n	800418e <DMA_CheckFifoParam+0xce>
 80040e0:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <DMA_CheckFifoParam+0x28>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	0800410b 	.word	0x0800410b
 80040f0:	080040f9 	.word	0x080040f9
 80040f4:	0800418f 	.word	0x0800418f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d046      	beq.n	8004192 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004108:	e043      	b.n	8004192 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004112:	d140      	bne.n	8004196 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004118:	e03d      	b.n	8004196 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004122:	d121      	bne.n	8004168 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b03      	cmp	r3, #3
 8004128:	d837      	bhi.n	800419a <DMA_CheckFifoParam+0xda>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <DMA_CheckFifoParam+0x70>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004141 	.word	0x08004141
 8004134:	08004147 	.word	0x08004147
 8004138:	08004141 	.word	0x08004141
 800413c:	08004159 	.word	0x08004159
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
      break;
 8004144:	e030      	b.n	80041a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d025      	beq.n	800419e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004156:	e022      	b.n	800419e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004160:	d11f      	bne.n	80041a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004166:	e01c      	b.n	80041a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d903      	bls.n	8004176 <DMA_CheckFifoParam+0xb6>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d003      	beq.n	800417c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004174:	e018      	b.n	80041a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
      break;
 800417a:	e015      	b.n	80041a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00e      	beq.n	80041a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
      break;
 800418c:	e00b      	b.n	80041a6 <DMA_CheckFifoParam+0xe6>
      break;
 800418e:	bf00      	nop
 8004190:	e00a      	b.n	80041a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004192:	bf00      	nop
 8004194:	e008      	b.n	80041a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004196:	bf00      	nop
 8004198:	e006      	b.n	80041a8 <DMA_CheckFifoParam+0xe8>
      break;
 800419a:	bf00      	nop
 800419c:	e004      	b.n	80041a8 <DMA_CheckFifoParam+0xe8>
      break;
 800419e:	bf00      	nop
 80041a0:	e002      	b.n	80041a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80041a2:	bf00      	nop
 80041a4:	e000      	b.n	80041a8 <DMA_CheckFifoParam+0xe8>
      break;
 80041a6:	bf00      	nop
    }
  } 
  
  return status; 
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop

080041b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	; 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	e159      	b.n	8004488 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041d4:	2201      	movs	r2, #1
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4013      	ands	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	f040 8148 	bne.w	8004482 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d005      	beq.n	800420a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004206:	2b02      	cmp	r3, #2
 8004208:	d130      	bne.n	800426c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	2203      	movs	r2, #3
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4013      	ands	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004240:	2201      	movs	r2, #1
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 0201 	and.w	r2, r3, #1
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	2b03      	cmp	r3, #3
 8004276:	d017      	beq.n	80042a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	2203      	movs	r2, #3
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d123      	bne.n	80042fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	08da      	lsrs	r2, r3, #3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3208      	adds	r2, #8
 80042bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	220f      	movs	r2, #15
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	08da      	lsrs	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3208      	adds	r2, #8
 80042f6:	69b9      	ldr	r1, [r7, #24]
 80042f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	2203      	movs	r2, #3
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 0203 	and.w	r2, r3, #3
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80a2 	beq.w	8004482 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	4b57      	ldr	r3, [pc, #348]	; (80044a0 <HAL_GPIO_Init+0x2e8>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	4a56      	ldr	r2, [pc, #344]	; (80044a0 <HAL_GPIO_Init+0x2e8>)
 8004348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800434c:	6453      	str	r3, [r2, #68]	; 0x44
 800434e:	4b54      	ldr	r3, [pc, #336]	; (80044a0 <HAL_GPIO_Init+0x2e8>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800435a:	4a52      	ldr	r2, [pc, #328]	; (80044a4 <HAL_GPIO_Init+0x2ec>)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	089b      	lsrs	r3, r3, #2
 8004360:	3302      	adds	r3, #2
 8004362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	220f      	movs	r2, #15
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a49      	ldr	r2, [pc, #292]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d019      	beq.n	80043ba <HAL_GPIO_Init+0x202>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a48      	ldr	r2, [pc, #288]	; (80044ac <HAL_GPIO_Init+0x2f4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_GPIO_Init+0x1fe>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a47      	ldr	r2, [pc, #284]	; (80044b0 <HAL_GPIO_Init+0x2f8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00d      	beq.n	80043b2 <HAL_GPIO_Init+0x1fa>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a46      	ldr	r2, [pc, #280]	; (80044b4 <HAL_GPIO_Init+0x2fc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d007      	beq.n	80043ae <HAL_GPIO_Init+0x1f6>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a45      	ldr	r2, [pc, #276]	; (80044b8 <HAL_GPIO_Init+0x300>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_GPIO_Init+0x1f2>
 80043a6:	2304      	movs	r3, #4
 80043a8:	e008      	b.n	80043bc <HAL_GPIO_Init+0x204>
 80043aa:	2307      	movs	r3, #7
 80043ac:	e006      	b.n	80043bc <HAL_GPIO_Init+0x204>
 80043ae:	2303      	movs	r3, #3
 80043b0:	e004      	b.n	80043bc <HAL_GPIO_Init+0x204>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e002      	b.n	80043bc <HAL_GPIO_Init+0x204>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <HAL_GPIO_Init+0x204>
 80043ba:	2300      	movs	r3, #0
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	f002 0203 	and.w	r2, r2, #3
 80043c2:	0092      	lsls	r2, r2, #2
 80043c4:	4093      	lsls	r3, r2
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043cc:	4935      	ldr	r1, [pc, #212]	; (80044a4 <HAL_GPIO_Init+0x2ec>)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	089b      	lsrs	r3, r3, #2
 80043d2:	3302      	adds	r3, #2
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043da:	4b38      	ldr	r3, [pc, #224]	; (80044bc <HAL_GPIO_Init+0x304>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043fe:	4a2f      	ldr	r2, [pc, #188]	; (80044bc <HAL_GPIO_Init+0x304>)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004404:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <HAL_GPIO_Init+0x304>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004428:	4a24      	ldr	r2, [pc, #144]	; (80044bc <HAL_GPIO_Init+0x304>)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800442e:	4b23      	ldr	r3, [pc, #140]	; (80044bc <HAL_GPIO_Init+0x304>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	43db      	mvns	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004452:	4a1a      	ldr	r2, [pc, #104]	; (80044bc <HAL_GPIO_Init+0x304>)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004458:	4b18      	ldr	r3, [pc, #96]	; (80044bc <HAL_GPIO_Init+0x304>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800447c:	4a0f      	ldr	r2, [pc, #60]	; (80044bc <HAL_GPIO_Init+0x304>)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3301      	adds	r3, #1
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b0f      	cmp	r3, #15
 800448c:	f67f aea2 	bls.w	80041d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	3724      	adds	r7, #36	; 0x24
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40013800 	.word	0x40013800
 80044a8:	40020000 	.word	0x40020000
 80044ac:	40020400 	.word	0x40020400
 80044b0:	40020800 	.word	0x40020800
 80044b4:	40020c00 	.word	0x40020c00
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40013c00 	.word	0x40013c00

080044c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	807b      	strh	r3, [r7, #2]
 80044cc:	4613      	mov	r3, r2
 80044ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044d0:	787b      	ldrb	r3, [r7, #1]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044d6:	887a      	ldrh	r2, [r7, #2]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044dc:	e003      	b.n	80044e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044de:	887b      	ldrh	r3, [r7, #2]
 80044e0:	041a      	lsls	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	619a      	str	r2, [r3, #24]
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004504:	887a      	ldrh	r2, [r7, #2]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4013      	ands	r3, r2
 800450a:	041a      	lsls	r2, r3, #16
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	43d9      	mvns	r1, r3
 8004510:	887b      	ldrh	r3, [r7, #2]
 8004512:	400b      	ands	r3, r1
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	619a      	str	r2, [r3, #24]
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d006      	beq.n	800454c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800453e:	4a05      	ldr	r2, [pc, #20]	; (8004554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004540:	88fb      	ldrh	r3, [r7, #6]
 8004542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc fd4a 	bl	8000fe0 <HAL_GPIO_EXTI_Callback>
  }
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40013c00 	.word	0x40013c00

08004558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e267      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d075      	beq.n	8004662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004576:	4b88      	ldr	r3, [pc, #544]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b04      	cmp	r3, #4
 8004580:	d00c      	beq.n	800459c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004582:	4b85      	ldr	r3, [pc, #532]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800458a:	2b08      	cmp	r3, #8
 800458c:	d112      	bne.n	80045b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b82      	ldr	r3, [pc, #520]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800459a:	d10b      	bne.n	80045b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	4b7e      	ldr	r3, [pc, #504]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d05b      	beq.n	8004660 <HAL_RCC_OscConfig+0x108>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d157      	bne.n	8004660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e242      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d106      	bne.n	80045cc <HAL_RCC_OscConfig+0x74>
 80045be:	4b76      	ldr	r3, [pc, #472]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a75      	ldr	r2, [pc, #468]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e01d      	b.n	8004608 <HAL_RCC_OscConfig+0xb0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x98>
 80045d6:	4b70      	ldr	r3, [pc, #448]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a6f      	ldr	r2, [pc, #444]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b6d      	ldr	r3, [pc, #436]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6c      	ldr	r2, [pc, #432]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_OscConfig+0xb0>
 80045f0:	4b69      	ldr	r3, [pc, #420]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a68      	ldr	r2, [pc, #416]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b66      	ldr	r3, [pc, #408]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a65      	ldr	r2, [pc, #404]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d013      	beq.n	8004638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004610:	f7ff f8b2 	bl	8003778 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004618:	f7ff f8ae 	bl	8003778 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	; 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e207      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	4b5b      	ldr	r3, [pc, #364]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0xc0>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7ff f89e 	bl	8003778 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004640:	f7ff f89a 	bl	8003778 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	; 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e1f3      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004652:	4b51      	ldr	r3, [pc, #324]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0xe8>
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d063      	beq.n	8004736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466e:	4b4a      	ldr	r3, [pc, #296]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467a:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004682:	2b08      	cmp	r3, #8
 8004684:	d11c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004686:	4b44      	ldr	r3, [pc, #272]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d116      	bne.n	80046c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004692:	4b41      	ldr	r3, [pc, #260]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_RCC_OscConfig+0x152>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e1c7      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046aa:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4937      	ldr	r1, [pc, #220]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	e03a      	b.n	8004736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d020      	beq.n	800470a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c8:	4b34      	ldr	r3, [pc, #208]	; (800479c <HAL_RCC_OscConfig+0x244>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7ff f853 	bl	8003778 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d6:	f7ff f84f 	bl	8003778 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e1a8      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e8:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f4:	4b28      	ldr	r3, [pc, #160]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4925      	ldr	r1, [pc, #148]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004704:	4313      	orrs	r3, r2
 8004706:	600b      	str	r3, [r1, #0]
 8004708:	e015      	b.n	8004736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x244>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7ff f832 	bl	8003778 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004718:	f7ff f82e 	bl	8003778 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e187      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472a:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d036      	beq.n	80047b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d016      	beq.n	8004778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <HAL_RCC_OscConfig+0x248>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7ff f812 	bl	8003778 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004758:	f7ff f80e 	bl	8003778 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e167      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800476c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x200>
 8004776:	e01b      	b.n	80047b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_RCC_OscConfig+0x248>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477e:	f7fe fffb 	bl	8003778 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004784:	e00e      	b.n	80047a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004786:	f7fe fff7 	bl	8003778 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d907      	bls.n	80047a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e150      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
 8004798:	40023800 	.word	0x40023800
 800479c:	42470000 	.word	0x42470000
 80047a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a4:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1ea      	bne.n	8004786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8097 	beq.w	80048ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047be:	2300      	movs	r3, #0
 80047c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c2:	4b81      	ldr	r3, [pc, #516]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	4b7d      	ldr	r3, [pc, #500]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4a7c      	ldr	r2, [pc, #496]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
 80047de:	4b7a      	ldr	r3, [pc, #488]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ee:	4b77      	ldr	r3, [pc, #476]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d118      	bne.n	800482c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047fa:	4b74      	ldr	r3, [pc, #464]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a73      	ldr	r2, [pc, #460]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 8004800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004806:	f7fe ffb7 	bl	8003778 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480e:	f7fe ffb3 	bl	8003778 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e10c      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004820:	4b6a      	ldr	r3, [pc, #424]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d106      	bne.n	8004842 <HAL_RCC_OscConfig+0x2ea>
 8004834:	4b64      	ldr	r3, [pc, #400]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4a63      	ldr	r2, [pc, #396]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6713      	str	r3, [r2, #112]	; 0x70
 8004840:	e01c      	b.n	800487c <HAL_RCC_OscConfig+0x324>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b05      	cmp	r3, #5
 8004848:	d10c      	bne.n	8004864 <HAL_RCC_OscConfig+0x30c>
 800484a:	4b5f      	ldr	r3, [pc, #380]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4a5e      	ldr	r2, [pc, #376]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004850:	f043 0304 	orr.w	r3, r3, #4
 8004854:	6713      	str	r3, [r2, #112]	; 0x70
 8004856:	4b5c      	ldr	r3, [pc, #368]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a5b      	ldr	r2, [pc, #364]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
 8004862:	e00b      	b.n	800487c <HAL_RCC_OscConfig+0x324>
 8004864:	4b58      	ldr	r3, [pc, #352]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	4a57      	ldr	r2, [pc, #348]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	6713      	str	r3, [r2, #112]	; 0x70
 8004870:	4b55      	ldr	r3, [pc, #340]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	4a54      	ldr	r2, [pc, #336]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004876:	f023 0304 	bic.w	r3, r3, #4
 800487a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d015      	beq.n	80048b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fe ff78 	bl	8003778 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488c:	f7fe ff74 	bl	8003778 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e0cb      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a2:	4b49      	ldr	r3, [pc, #292]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0ee      	beq.n	800488c <HAL_RCC_OscConfig+0x334>
 80048ae:	e014      	b.n	80048da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b0:	f7fe ff62 	bl	8003778 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fe ff5e 	bl	8003778 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e0b5      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ce:	4b3e      	ldr	r3, [pc, #248]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ee      	bne.n	80048b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e0:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	4a38      	ldr	r2, [pc, #224]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80a1 	beq.w	8004a38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f6:	4b34      	ldr	r3, [pc, #208]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d05c      	beq.n	80049bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d141      	bne.n	800498e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490a:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <HAL_RCC_OscConfig+0x478>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fe ff32 	bl	8003778 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004918:	f7fe ff2e 	bl	8003778 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e087      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	019b      	lsls	r3, r3, #6
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	3b01      	subs	r3, #1
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	061b      	lsls	r3, r3, #24
 800495a:	491b      	ldr	r1, [pc, #108]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800495c:	4313      	orrs	r3, r2
 800495e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004960:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x478>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004966:	f7fe ff07 	bl	8003778 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496e:	f7fe ff03 	bl	8003778 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e05c      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004980:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x416>
 800498c:	e054      	b.n	8004a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_RCC_OscConfig+0x478>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fe fef0 	bl	8003778 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499c:	f7fe feec 	bl	8003778 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e045      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x444>
 80049ba:	e03d      	b.n	8004a38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d107      	bne.n	80049d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e038      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40007000 	.word	0x40007000
 80049d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049d4:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <HAL_RCC_OscConfig+0x4ec>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d028      	beq.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d121      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d11a      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a04:	4013      	ands	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d111      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023800 	.word	0x40023800

08004a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0cc      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d90c      	bls.n	8004a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b65      	ldr	r3, [pc, #404]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b63      	ldr	r3, [pc, #396]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0b8      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d020      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a9c:	4b59      	ldr	r3, [pc, #356]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	4a58      	ldr	r2, [pc, #352]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ab4:	4b53      	ldr	r3, [pc, #332]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4a52      	ldr	r2, [pc, #328]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac0:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	494d      	ldr	r1, [pc, #308]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d044      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d119      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e07f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d003      	beq.n	8004b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b06:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e06f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b16:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e067      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b26:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f023 0203 	bic.w	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4934      	ldr	r1, [pc, #208]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b38:	f7fe fe1e 	bl	8003778 <HAL_GetTick>
 8004b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b40:	f7fe fe1a 	bl	8003778 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e04f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 020c 	and.w	r2, r3, #12
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d1eb      	bne.n	8004b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b68:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d20c      	bcs.n	8004b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e032      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b9c:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4916      	ldr	r1, [pc, #88]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	490e      	ldr	r1, [pc, #56]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bce:	f000 f821 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	490a      	ldr	r1, [pc, #40]	; (8004c08 <HAL_RCC_ClockConfig+0x1c0>)
 8004be0:	5ccb      	ldrb	r3, [r1, r3]
 8004be2:	fa22 f303 	lsr.w	r3, r2, r3
 8004be6:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe fd7e 	bl	80036f0 <HAL_InitTick>

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023c00 	.word	0x40023c00
 8004c04:	40023800 	.word	0x40023800
 8004c08:	08009970 	.word	0x08009970
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	20000004 	.word	0x20000004

08004c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c18:	b094      	sub	sp, #80	; 0x50
 8004c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c20:	2300      	movs	r3, #0
 8004c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c24:	2300      	movs	r3, #0
 8004c26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c2c:	4b79      	ldr	r3, [pc, #484]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d00d      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x40>
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	f200 80e1 	bhi.w	8004e00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x34>
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d003      	beq.n	8004c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c46:	e0db      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c48:	4b73      	ldr	r3, [pc, #460]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c4c:	e0db      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c4e:	4b73      	ldr	r3, [pc, #460]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x208>)
 8004c50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c52:	e0d8      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c54:	4b6f      	ldr	r3, [pc, #444]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c5e:	4b6d      	ldr	r3, [pc, #436]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d063      	beq.n	8004d32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6a:	4b6a      	ldr	r3, [pc, #424]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	099b      	lsrs	r3, r3, #6
 8004c70:	2200      	movs	r2, #0
 8004c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c7e:	2300      	movs	r3, #0
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
 8004c82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	f04f 0000 	mov.w	r0, #0
 8004c8e:	f04f 0100 	mov.w	r1, #0
 8004c92:	0159      	lsls	r1, r3, #5
 8004c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c98:	0150      	lsls	r0, r2, #5
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	1a51      	subs	r1, r2, r1
 8004ca2:	6139      	str	r1, [r7, #16]
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb8:	4659      	mov	r1, fp
 8004cba:	018b      	lsls	r3, r1, #6
 8004cbc:	4651      	mov	r1, sl
 8004cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cc2:	4651      	mov	r1, sl
 8004cc4:	018a      	lsls	r2, r1, #6
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	ebb2 0801 	subs.w	r8, r2, r1
 8004ccc:	4659      	mov	r1, fp
 8004cce:	eb63 0901 	sbc.w	r9, r3, r1
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ce6:	4690      	mov	r8, r2
 8004ce8:	4699      	mov	r9, r3
 8004cea:	4623      	mov	r3, r4
 8004cec:	eb18 0303 	adds.w	r3, r8, r3
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	462b      	mov	r3, r5
 8004cf4:	eb49 0303 	adc.w	r3, r9, r3
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d06:	4629      	mov	r1, r5
 8004d08:	024b      	lsls	r3, r1, #9
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d10:	4621      	mov	r1, r4
 8004d12:	024a      	lsls	r2, r1, #9
 8004d14:	4610      	mov	r0, r2
 8004d16:	4619      	mov	r1, r3
 8004d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d24:	f7fb ff70 	bl	8000c08 <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d30:	e058      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d32:	4b38      	ldr	r3, [pc, #224]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d42:	623b      	str	r3, [r7, #32]
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
 8004d48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	f04f 0000 	mov.w	r0, #0
 8004d54:	f04f 0100 	mov.w	r1, #0
 8004d58:	0159      	lsls	r1, r3, #5
 8004d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d5e:	0150      	lsls	r0, r2, #5
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4641      	mov	r1, r8
 8004d66:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d84:	ebb2 040a 	subs.w	r4, r2, sl
 8004d88:	eb63 050b 	sbc.w	r5, r3, fp
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	00eb      	lsls	r3, r5, #3
 8004d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d9a:	00e2      	lsls	r2, r4, #3
 8004d9c:	4614      	mov	r4, r2
 8004d9e:	461d      	mov	r5, r3
 8004da0:	4643      	mov	r3, r8
 8004da2:	18e3      	adds	r3, r4, r3
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	464b      	mov	r3, r9
 8004da8:	eb45 0303 	adc.w	r3, r5, r3
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dba:	4629      	mov	r1, r5
 8004dbc:	028b      	lsls	r3, r1, #10
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	028a      	lsls	r2, r1, #10
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dce:	2200      	movs	r2, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	61fa      	str	r2, [r7, #28]
 8004dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd8:	f7fb ff16 	bl	8000c08 <__aeabi_uldivmod>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4613      	mov	r3, r2
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	3301      	adds	r3, #1
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004df4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dfe:	e002      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3750      	adds	r7, #80	; 0x50
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800
 8004e18:	00f42400 	.word	0x00f42400
 8004e1c:	007a1200 	.word	0x007a1200

08004e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e24:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e26:	681b      	ldr	r3, [r3, #0]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000000 	.word	0x20000000

08004e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e3c:	f7ff fff0 	bl	8004e20 <HAL_RCC_GetHCLKFreq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	0a9b      	lsrs	r3, r3, #10
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4903      	ldr	r1, [pc, #12]	; (8004e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	08009980 	.word	0x08009980

08004e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e64:	f7ff ffdc 	bl	8004e20 <HAL_RCC_GetHCLKFreq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	0b5b      	lsrs	r3, r3, #13
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4903      	ldr	r1, [pc, #12]	; (8004e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40023800 	.word	0x40023800
 8004e84:	08009980 	.word	0x08009980

08004e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d001      	beq.n	8004ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e044      	b.n	8004f2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eca:	d013      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1a      	ldr	r2, [pc, #104]	; (8004f3c <HAL_TIM_Base_Start_IT+0xb4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_TIM_Base_Start_IT+0xb8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <HAL_TIM_Base_Start_IT+0xbc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d111      	bne.n	8004f18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b06      	cmp	r3, #6
 8004f04:	d010      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f16:	e007      	b.n	8004f28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40000c00 	.word	0x40000c00
 8004f48:	40014000 	.word	0x40014000

08004f4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e097      	b.n	8005090 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fe f91b 	bl	80031b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f90:	f023 0307 	bic.w	r3, r3, #7
 8004f94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	f000 f9b3 	bl	800530c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004fec:	f023 030c 	bic.w	r3, r3, #12
 8004ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ff8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	4313      	orrs	r3, r2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	011a      	lsls	r2, r3, #4
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	031b      	lsls	r3, r3, #12
 800501c:	4313      	orrs	r3, r2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005032:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	4313      	orrs	r3, r2
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d122      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d11b      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0202 	mvn.w	r2, #2
 80050c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f8f8 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 80050e0:	e005      	b.n	80050ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8ea 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f8fb 	bl	80052e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d122      	bne.n	8005148 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b04      	cmp	r3, #4
 800510e:	d11b      	bne.n	8005148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0204 	mvn.w	r2, #4
 8005118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8ce 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8c0 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f8d1 	bl	80052e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b08      	cmp	r3, #8
 8005154:	d122      	bne.n	800519c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b08      	cmp	r3, #8
 8005162:	d11b      	bne.n	800519c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0208 	mvn.w	r2, #8
 800516c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2204      	movs	r2, #4
 8005172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f8a4 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 8005188:	e005      	b.n	8005196 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f896 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8a7 	bl	80052e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b10      	cmp	r3, #16
 80051a8:	d122      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d11b      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0210 	mvn.w	r2, #16
 80051c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2208      	movs	r2, #8
 80051c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f87a 	bl	80052d0 <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f86c 	bl	80052bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f87d 	bl	80052e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d10e      	bne.n	800521c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d107      	bne.n	800521c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0201 	mvn.w	r2, #1
 8005214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f846 	bl	80052a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d10e      	bne.n	8005248 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005234:	2b80      	cmp	r3, #128	; 0x80
 8005236:	d107      	bne.n	8005248 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f95a 	bl	80054fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d10e      	bne.n	8005274 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d107      	bne.n	8005274 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800526c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f842 	bl	80052f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b20      	cmp	r3, #32
 8005280:	d10e      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b20      	cmp	r3, #32
 800528e:	d107      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0220 	mvn.w	r2, #32
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f924 	bl	80054e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a34      	ldr	r2, [pc, #208]	; (80053f0 <TIM_Base_SetConfig+0xe4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00f      	beq.n	8005344 <TIM_Base_SetConfig+0x38>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532a:	d00b      	beq.n	8005344 <TIM_Base_SetConfig+0x38>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a31      	ldr	r2, [pc, #196]	; (80053f4 <TIM_Base_SetConfig+0xe8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d007      	beq.n	8005344 <TIM_Base_SetConfig+0x38>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a30      	ldr	r2, [pc, #192]	; (80053f8 <TIM_Base_SetConfig+0xec>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_Base_SetConfig+0x38>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a2f      	ldr	r2, [pc, #188]	; (80053fc <TIM_Base_SetConfig+0xf0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d108      	bne.n	8005356 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <TIM_Base_SetConfig+0xe4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01b      	beq.n	8005396 <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005364:	d017      	beq.n	8005396 <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <TIM_Base_SetConfig+0xe8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <TIM_Base_SetConfig+0x8a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a21      	ldr	r2, [pc, #132]	; (80053f8 <TIM_Base_SetConfig+0xec>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00f      	beq.n	8005396 <TIM_Base_SetConfig+0x8a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a20      	ldr	r2, [pc, #128]	; (80053fc <TIM_Base_SetConfig+0xf0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_Base_SetConfig+0x8a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <TIM_Base_SetConfig+0xf4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d007      	beq.n	8005396 <TIM_Base_SetConfig+0x8a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <TIM_Base_SetConfig+0xf8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_Base_SetConfig+0x8a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <TIM_Base_SetConfig+0xfc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d108      	bne.n	80053a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <TIM_Base_SetConfig+0xe4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d103      	bne.n	80053dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	615a      	str	r2, [r3, #20]
}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40010000 	.word	0x40010000
 80053f4:	40000400 	.word	0x40000400
 80053f8:	40000800 	.word	0x40000800
 80053fc:	40000c00 	.word	0x40000c00
 8005400:	40014000 	.word	0x40014000
 8005404:	40014400 	.word	0x40014400
 8005408:	40014800 	.word	0x40014800

0800540c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005420:	2302      	movs	r3, #2
 8005422:	e050      	b.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d013      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a16      	ldr	r2, [pc, #88]	; (80054dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a15      	ldr	r2, [pc, #84]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a13      	ldr	r2, [pc, #76]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d10c      	bne.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40014000 	.word	0x40014000

080054e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e03f      	b.n	80055a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fd fec8 	bl	80032cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2224      	movs	r2, #36	; 0x24
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fe69 	bl	800622c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	4613      	mov	r3, r2
 80055b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d11d      	bne.n	8005600 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_UART_Receive_DMA+0x26>
 80055ca:	88fb      	ldrh	r3, [r7, #6]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e016      	b.n	8005602 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_UART_Receive_DMA+0x38>
 80055de:	2302      	movs	r3, #2
 80055e0:	e00f      	b.n	8005602 <HAL_UART_Receive_DMA+0x58>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	461a      	mov	r2, r3
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 fbb8 	bl	8005d6c <UART_Start_Receive_DMA>
 80055fc:	4603      	mov	r3, r0
 80055fe:	e000      	b.n	8005602 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005600:	2302      	movs	r3, #2
  }
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b0ba      	sub	sp, #232	; 0xe8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005632:	2300      	movs	r3, #0
 8005634:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005638:	2300      	movs	r3, #0
 800563a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800564a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10f      	bne.n	8005672 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_UART_IRQHandler+0x66>
 800565e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fd23 	bl	80060b6 <UART_Receive_IT>
      return;
 8005670:	e256      	b.n	8005b20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 80de 	beq.w	8005838 <HAL_UART_IRQHandler+0x22c>
 800567c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80d1 	beq.w	8005838 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00b      	beq.n	80056ba <HAL_UART_IRQHandler+0xae>
 80056a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f043 0201 	orr.w	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <HAL_UART_IRQHandler+0xd2>
 80056c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f043 0202 	orr.w	r2, r3, #2
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <HAL_UART_IRQHandler+0xf6>
 80056ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f043 0204 	orr.w	r2, r3, #4
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d011      	beq.n	8005732 <HAL_UART_IRQHandler+0x126>
 800570e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d105      	bne.n	8005726 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800571a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f043 0208 	orr.w	r2, r3, #8
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 81ed 	beq.w	8005b16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800573c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <HAL_UART_IRQHandler+0x14e>
 8005748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fcae 	bl	80060b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005764:	2b40      	cmp	r3, #64	; 0x40
 8005766:	bf0c      	ite	eq
 8005768:	2301      	moveq	r3, #1
 800576a:	2300      	movne	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d103      	bne.n	8005786 <HAL_UART_IRQHandler+0x17a>
 800577e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005782:	2b00      	cmp	r3, #0
 8005784:	d04f      	beq.n	8005826 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fbb6 	bl	8005ef8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d141      	bne.n	800581e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3314      	adds	r3, #20
 80057a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3314      	adds	r3, #20
 80057c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1d9      	bne.n	800579a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d013      	beq.n	8005816 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	4a7d      	ldr	r2, [pc, #500]	; (80059e8 <HAL_UART_IRQHandler+0x3dc>)
 80057f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fa50 	bl	8003ca0 <HAL_DMA_Abort_IT>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d016      	beq.n	8005834 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005810:	4610      	mov	r0, r2
 8005812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005814:	e00e      	b.n	8005834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f99a 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800581c:	e00a      	b.n	8005834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f996 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005824:	e006      	b.n	8005834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f992 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005832:	e170      	b.n	8005b16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005834:	bf00      	nop
    return;
 8005836:	e16e      	b.n	8005b16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	2b01      	cmp	r3, #1
 800583e:	f040 814a 	bne.w	8005ad6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8143 	beq.w	8005ad6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 813c 	beq.w	8005ad6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b40      	cmp	r3, #64	; 0x40
 8005880:	f040 80b4 	bne.w	80059ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005890:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8140 	beq.w	8005b1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800589e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058a2:	429a      	cmp	r2, r3
 80058a4:	f080 8139 	bcs.w	8005b1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ba:	f000 8088 	beq.w	80059ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	330c      	adds	r3, #12
 80058e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1d9      	bne.n	80058be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3314      	adds	r3, #20
 8005910:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800591a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3314      	adds	r3, #20
 800592a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800592e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005932:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005936:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e1      	bne.n	800590a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3314      	adds	r3, #20
 800594c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800595c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3314      	adds	r3, #20
 8005966:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800596a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800596c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005970:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e3      	bne.n	8005946 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800599c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800599e:	f023 0310 	bic.w	r3, r3, #16
 80059a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	330c      	adds	r3, #12
 80059ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80059b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e3      	bne.n	800598c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe f8f9 	bl	8003bc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	b29b      	uxth	r3, r3
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8c0 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059e4:	e099      	b.n	8005b1a <HAL_UART_IRQHandler+0x50e>
 80059e6:	bf00      	nop
 80059e8:	08005fbf 	.word	0x08005fbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 808b 	beq.w	8005b1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8086 	beq.w	8005b1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	330c      	adds	r3, #12
 8005a18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a36:	647a      	str	r2, [r7, #68]	; 0x44
 8005a38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e3      	bne.n	8005a12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3314      	adds	r3, #20
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	623b      	str	r3, [r7, #32]
   return(result);
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3314      	adds	r3, #20
 8005a6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a6e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e3      	bne.n	8005a4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0310 	bic.w	r3, r3, #16
 8005aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ab4:	61fa      	str	r2, [r7, #28]
 8005ab6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	69b9      	ldr	r1, [r7, #24]
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e3      	bne.n	8005a90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f848 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ad4:	e023      	b.n	8005b1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <HAL_UART_IRQHandler+0x4ea>
 8005ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa79 	bl	8005fe6 <UART_Transmit_IT>
    return;
 8005af4:	e014      	b.n	8005b20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00e      	beq.n	8005b20 <HAL_UART_IRQHandler+0x514>
 8005b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fab9 	bl	8006086 <UART_EndTransmit_IT>
    return;
 8005b14:	e004      	b.n	8005b20 <HAL_UART_IRQHandler+0x514>
    return;
 8005b16:	bf00      	nop
 8005b18:	e002      	b.n	8005b20 <HAL_UART_IRQHandler+0x514>
      return;
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <HAL_UART_IRQHandler+0x514>
      return;
 8005b1e:	bf00      	nop
  }
}
 8005b20:	37e8      	adds	r7, #232	; 0xe8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop

08005b28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b09c      	sub	sp, #112	; 0x70
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d172      	bne.n	8005c7e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	330c      	adds	r3, #12
 8005bbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bc0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e5      	bne.n	8005b9e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	667b      	str	r3, [r7, #100]	; 0x64
 8005bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3314      	adds	r3, #20
 8005bf0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005bf2:	647a      	str	r2, [r7, #68]	; 0x44
 8005bf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e5      	bne.n	8005bd2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3314      	adds	r3, #20
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	623b      	str	r3, [r7, #32]
   return(result);
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3314      	adds	r3, #20
 8005c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c26:	633a      	str	r2, [r7, #48]	; 0x30
 8005c28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d119      	bne.n	8005c7e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f023 0310 	bic.w	r3, r3, #16
 8005c60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c6a:	61fa      	str	r2, [r7, #28]
 8005c6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	69b9      	ldr	r1, [r7, #24]
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	617b      	str	r3, [r7, #20]
   return(result);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e5      	bne.n	8005c4a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d106      	bne.n	8005c94 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c8e:	f7ff ff69 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c92:	e002      	b.n	8005c9a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005c94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c96:	f7fb f939 	bl	8000f0c <HAL_UART_RxCpltCallback>
}
 8005c9a:	bf00      	nop
 8005c9c:	3770      	adds	r7, #112	; 0x70
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d108      	bne.n	8005cca <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f7ff ff4e 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cc8:	e002      	b.n	8005cd0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7ff ff36 	bl	8005b3c <HAL_UART_RxHalfCpltCallback>
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf4:	2b80      	cmp	r3, #128	; 0x80
 8005cf6:	bf0c      	ite	eq
 8005cf8:	2301      	moveq	r3, #1
 8005cfa:	2300      	movne	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b21      	cmp	r3, #33	; 0x21
 8005d0a:	d108      	bne.n	8005d1e <UART_DMAError+0x46>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2200      	movs	r2, #0
 8005d16:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d18:	68b8      	ldr	r0, [r7, #8]
 8005d1a:	f000 f8c5 	bl	8005ea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2301      	moveq	r3, #1
 8005d2e:	2300      	movne	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b22      	cmp	r3, #34	; 0x22
 8005d3e:	d108      	bne.n	8005d52 <UART_DMAError+0x7a>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d4c:	68b8      	ldr	r0, [r7, #8]
 8005d4e:	f000 f8d3 	bl	8005ef8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	f043 0210 	orr.w	r2, r3, #16
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d5e:	68b8      	ldr	r0, [r7, #8]
 8005d60:	f7ff fef6 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b098      	sub	sp, #96	; 0x60
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	4613      	mov	r3, r2
 8005d78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	88fa      	ldrh	r2, [r7, #6]
 8005d84:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2222      	movs	r2, #34	; 0x22
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	4a40      	ldr	r2, [pc, #256]	; (8005e9c <UART_Start_Receive_DMA+0x130>)
 8005d9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	4a3f      	ldr	r2, [pc, #252]	; (8005ea0 <UART_Start_Receive_DMA+0x134>)
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	4a3e      	ldr	r2, [pc, #248]	; (8005ea4 <UART_Start_Receive_DMA+0x138>)
 8005daa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	2200      	movs	r2, #0
 8005db2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005db4:	f107 0308 	add.w	r3, r7, #8
 8005db8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	f7fd fea0 	bl	8003b10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d019      	beq.n	8005e2a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e16:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005e18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e5      	bne.n	8005df6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3314      	adds	r3, #20
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	f043 0301 	orr.w	r3, r3, #1
 8005e40:	657b      	str	r3, [r7, #84]	; 0x54
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3314      	adds	r3, #20
 8005e48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e4a:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e5      	bne.n	8005e2a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e74:	653b      	str	r3, [r7, #80]	; 0x50
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3314      	adds	r3, #20
 8005e7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e7e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6a39      	ldr	r1, [r7, #32]
 8005e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e5      	bne.n	8005e5e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3760      	adds	r7, #96	; 0x60
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	08005b7d 	.word	0x08005b7d
 8005ea0:	08005ca3 	.word	0x08005ca3
 8005ea4:	08005cd9 	.word	0x08005cd9

08005ea8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b089      	sub	sp, #36	; 0x24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	61ba      	str	r2, [r7, #24]
 8005ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6979      	ldr	r1, [r7, #20]
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e5      	bne.n	8005eb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005eec:	bf00      	nop
 8005eee:	3724      	adds	r7, #36	; 0x24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b095      	sub	sp, #84	; 0x54
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f20:	643a      	str	r2, [r7, #64]	; 0x40
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3314      	adds	r3, #20
 8005f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3314      	adds	r3, #20
 8005f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e5      	bne.n	8005f34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d119      	bne.n	8005fa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0310 	bic.w	r3, r3, #16
 8005f86:	647b      	str	r3, [r7, #68]	; 0x44
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f90:	61ba      	str	r2, [r7, #24]
 8005f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6979      	ldr	r1, [r7, #20]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e5      	bne.n	8005f70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fb2:	bf00      	nop
 8005fb4:	3754      	adds	r7, #84	; 0x54
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7ff fdb9 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b21      	cmp	r3, #33	; 0x21
 8005ff8:	d13e      	bne.n	8006078 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006002:	d114      	bne.n	800602e <UART_Transmit_IT+0x48>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d110      	bne.n	800602e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006020:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	1c9a      	adds	r2, r3, #2
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]
 800602c:	e008      	b.n	8006040 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	1c59      	adds	r1, r3, #1
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6211      	str	r1, [r2, #32]
 8006038:	781a      	ldrb	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29b      	uxth	r3, r3
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	4619      	mov	r1, r3
 800604e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10f      	bne.n	8006074 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006062:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006072:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	e000      	b.n	800607a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006078:	2302      	movs	r3, #2
  }
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fd3e 	bl	8005b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b08c      	sub	sp, #48	; 0x30
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b22      	cmp	r3, #34	; 0x22
 80060c8:	f040 80ab 	bne.w	8006222 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d4:	d117      	bne.n	8006106 <UART_Receive_IT+0x50>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d113      	bne.n	8006106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	1c9a      	adds	r2, r3, #2
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	629a      	str	r2, [r3, #40]	; 0x28
 8006104:	e026      	b.n	8006154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	d007      	beq.n	800612a <UART_Receive_IT+0x74>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <UART_Receive_IT+0x82>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e008      	b.n	800614a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006144:	b2da      	uxtb	r2, r3
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29b      	uxth	r3, r3
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4619      	mov	r1, r3
 8006162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006164:	2b00      	cmp	r3, #0
 8006166:	d15a      	bne.n	800621e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0220 	bic.w	r2, r2, #32
 8006176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695a      	ldr	r2, [r3, #20]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d135      	bne.n	8006214 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	613b      	str	r3, [r7, #16]
   return(result);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f023 0310 	bic.w	r3, r3, #16
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ce:	623a      	str	r2, [r7, #32]
 80061d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	61bb      	str	r3, [r7, #24]
   return(result);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d10a      	bne.n	8006206 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff fca9 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
 8006212:	e002      	b.n	800621a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7fa fe79 	bl	8000f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e002      	b.n	8006224 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	e000      	b.n	8006224 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006222:	2302      	movs	r3, #2
  }
}
 8006224:	4618      	mov	r0, r3
 8006226:	3730      	adds	r7, #48	; 0x30
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800622c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006230:	b0c0      	sub	sp, #256	; 0x100
 8006232:	af00      	add	r7, sp, #0
 8006234:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	68d9      	ldr	r1, [r3, #12]
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	ea40 0301 	orr.w	r3, r0, r1
 8006254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	431a      	orrs	r2, r3
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	431a      	orrs	r2, r3
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006284:	f021 010c 	bic.w	r1, r1, #12
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006292:	430b      	orrs	r3, r1
 8006294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a6:	6999      	ldr	r1, [r3, #24]
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	ea40 0301 	orr.w	r3, r0, r1
 80062b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b8f      	ldr	r3, [pc, #572]	; (80064f8 <UART_SetConfig+0x2cc>)
 80062bc:	429a      	cmp	r2, r3
 80062be:	d005      	beq.n	80062cc <UART_SetConfig+0xa0>
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b8d      	ldr	r3, [pc, #564]	; (80064fc <UART_SetConfig+0x2d0>)
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d104      	bne.n	80062d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062cc:	f7fe fdc8 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 80062d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062d4:	e003      	b.n	80062de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062d6:	f7fe fdaf 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 80062da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e8:	f040 810c 	bne.w	8006504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062fe:	4622      	mov	r2, r4
 8006300:	462b      	mov	r3, r5
 8006302:	1891      	adds	r1, r2, r2
 8006304:	65b9      	str	r1, [r7, #88]	; 0x58
 8006306:	415b      	adcs	r3, r3
 8006308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800630a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800630e:	4621      	mov	r1, r4
 8006310:	eb12 0801 	adds.w	r8, r2, r1
 8006314:	4629      	mov	r1, r5
 8006316:	eb43 0901 	adc.w	r9, r3, r1
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800632a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800632e:	4690      	mov	r8, r2
 8006330:	4699      	mov	r9, r3
 8006332:	4623      	mov	r3, r4
 8006334:	eb18 0303 	adds.w	r3, r8, r3
 8006338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800633c:	462b      	mov	r3, r5
 800633e:	eb49 0303 	adc.w	r3, r9, r3
 8006342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006352:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800635a:	460b      	mov	r3, r1
 800635c:	18db      	adds	r3, r3, r3
 800635e:	653b      	str	r3, [r7, #80]	; 0x50
 8006360:	4613      	mov	r3, r2
 8006362:	eb42 0303 	adc.w	r3, r2, r3
 8006366:	657b      	str	r3, [r7, #84]	; 0x54
 8006368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800636c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006370:	f7fa fc4a 	bl	8000c08 <__aeabi_uldivmod>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4b61      	ldr	r3, [pc, #388]	; (8006500 <UART_SetConfig+0x2d4>)
 800637a:	fba3 2302 	umull	r2, r3, r3, r2
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	011c      	lsls	r4, r3, #4
 8006382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006386:	2200      	movs	r2, #0
 8006388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800638c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006394:	4642      	mov	r2, r8
 8006396:	464b      	mov	r3, r9
 8006398:	1891      	adds	r1, r2, r2
 800639a:	64b9      	str	r1, [r7, #72]	; 0x48
 800639c:	415b      	adcs	r3, r3
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063a4:	4641      	mov	r1, r8
 80063a6:	eb12 0a01 	adds.w	sl, r2, r1
 80063aa:	4649      	mov	r1, r9
 80063ac:	eb43 0b01 	adc.w	fp, r3, r1
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063c4:	4692      	mov	sl, r2
 80063c6:	469b      	mov	fp, r3
 80063c8:	4643      	mov	r3, r8
 80063ca:	eb1a 0303 	adds.w	r3, sl, r3
 80063ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063d2:	464b      	mov	r3, r9
 80063d4:	eb4b 0303 	adc.w	r3, fp, r3
 80063d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063f0:	460b      	mov	r3, r1
 80063f2:	18db      	adds	r3, r3, r3
 80063f4:	643b      	str	r3, [r7, #64]	; 0x40
 80063f6:	4613      	mov	r3, r2
 80063f8:	eb42 0303 	adc.w	r3, r2, r3
 80063fc:	647b      	str	r3, [r7, #68]	; 0x44
 80063fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006406:	f7fa fbff 	bl	8000c08 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4611      	mov	r1, r2
 8006410:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <UART_SetConfig+0x2d4>)
 8006412:	fba3 2301 	umull	r2, r3, r3, r1
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	2264      	movs	r2, #100	; 0x64
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	1acb      	subs	r3, r1, r3
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006426:	4b36      	ldr	r3, [pc, #216]	; (8006500 <UART_SetConfig+0x2d4>)
 8006428:	fba3 2302 	umull	r2, r3, r3, r2
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006434:	441c      	add	r4, r3
 8006436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800643a:	2200      	movs	r2, #0
 800643c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006440:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	1891      	adds	r1, r2, r2
 800644e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006450:	415b      	adcs	r3, r3
 8006452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006458:	4641      	mov	r1, r8
 800645a:	1851      	adds	r1, r2, r1
 800645c:	6339      	str	r1, [r7, #48]	; 0x30
 800645e:	4649      	mov	r1, r9
 8006460:	414b      	adcs	r3, r1
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006470:	4659      	mov	r1, fp
 8006472:	00cb      	lsls	r3, r1, #3
 8006474:	4651      	mov	r1, sl
 8006476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800647a:	4651      	mov	r1, sl
 800647c:	00ca      	lsls	r2, r1, #3
 800647e:	4610      	mov	r0, r2
 8006480:	4619      	mov	r1, r3
 8006482:	4603      	mov	r3, r0
 8006484:	4642      	mov	r2, r8
 8006486:	189b      	adds	r3, r3, r2
 8006488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800648c:	464b      	mov	r3, r9
 800648e:	460a      	mov	r2, r1
 8006490:	eb42 0303 	adc.w	r3, r2, r3
 8006494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064ac:	460b      	mov	r3, r1
 80064ae:	18db      	adds	r3, r3, r3
 80064b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b2:	4613      	mov	r3, r2
 80064b4:	eb42 0303 	adc.w	r3, r2, r3
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064c2:	f7fa fba1 	bl	8000c08 <__aeabi_uldivmod>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <UART_SetConfig+0x2d4>)
 80064cc:	fba3 1302 	umull	r1, r3, r3, r2
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	2164      	movs	r1, #100	; 0x64
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	3332      	adds	r3, #50	; 0x32
 80064de:	4a08      	ldr	r2, [pc, #32]	; (8006500 <UART_SetConfig+0x2d4>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	f003 0207 	and.w	r2, r3, #7
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4422      	add	r2, r4
 80064f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064f4:	e105      	b.n	8006702 <UART_SetConfig+0x4d6>
 80064f6:	bf00      	nop
 80064f8:	40011000 	.word	0x40011000
 80064fc:	40011400 	.word	0x40011400
 8006500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006508:	2200      	movs	r2, #0
 800650a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800650e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006516:	4642      	mov	r2, r8
 8006518:	464b      	mov	r3, r9
 800651a:	1891      	adds	r1, r2, r2
 800651c:	6239      	str	r1, [r7, #32]
 800651e:	415b      	adcs	r3, r3
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
 8006522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006526:	4641      	mov	r1, r8
 8006528:	1854      	adds	r4, r2, r1
 800652a:	4649      	mov	r1, r9
 800652c:	eb43 0501 	adc.w	r5, r3, r1
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	00eb      	lsls	r3, r5, #3
 800653a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800653e:	00e2      	lsls	r2, r4, #3
 8006540:	4614      	mov	r4, r2
 8006542:	461d      	mov	r5, r3
 8006544:	4643      	mov	r3, r8
 8006546:	18e3      	adds	r3, r4, r3
 8006548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800654c:	464b      	mov	r3, r9
 800654e:	eb45 0303 	adc.w	r3, r5, r3
 8006552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006572:	4629      	mov	r1, r5
 8006574:	008b      	lsls	r3, r1, #2
 8006576:	4621      	mov	r1, r4
 8006578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800657c:	4621      	mov	r1, r4
 800657e:	008a      	lsls	r2, r1, #2
 8006580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006584:	f7fa fb40 	bl	8000c08 <__aeabi_uldivmod>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4b60      	ldr	r3, [pc, #384]	; (8006710 <UART_SetConfig+0x4e4>)
 800658e:	fba3 2302 	umull	r2, r3, r3, r2
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	011c      	lsls	r4, r3, #4
 8006596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659a:	2200      	movs	r2, #0
 800659c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	61b9      	str	r1, [r7, #24]
 80065b0:	415b      	adcs	r3, r3
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065b8:	4641      	mov	r1, r8
 80065ba:	1851      	adds	r1, r2, r1
 80065bc:	6139      	str	r1, [r7, #16]
 80065be:	4649      	mov	r1, r9
 80065c0:	414b      	adcs	r3, r1
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065d0:	4659      	mov	r1, fp
 80065d2:	00cb      	lsls	r3, r1, #3
 80065d4:	4651      	mov	r1, sl
 80065d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065da:	4651      	mov	r1, sl
 80065dc:	00ca      	lsls	r2, r1, #3
 80065de:	4610      	mov	r0, r2
 80065e0:	4619      	mov	r1, r3
 80065e2:	4603      	mov	r3, r0
 80065e4:	4642      	mov	r2, r8
 80065e6:	189b      	adds	r3, r3, r2
 80065e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065ec:	464b      	mov	r3, r9
 80065ee:	460a      	mov	r2, r1
 80065f0:	eb42 0303 	adc.w	r3, r2, r3
 80065f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	67bb      	str	r3, [r7, #120]	; 0x78
 8006602:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006610:	4649      	mov	r1, r9
 8006612:	008b      	lsls	r3, r1, #2
 8006614:	4641      	mov	r1, r8
 8006616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800661a:	4641      	mov	r1, r8
 800661c:	008a      	lsls	r2, r1, #2
 800661e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006622:	f7fa faf1 	bl	8000c08 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4b39      	ldr	r3, [pc, #228]	; (8006710 <UART_SetConfig+0x4e4>)
 800662c:	fba3 1302 	umull	r1, r3, r3, r2
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	2164      	movs	r1, #100	; 0x64
 8006634:	fb01 f303 	mul.w	r3, r1, r3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	3332      	adds	r3, #50	; 0x32
 800663e:	4a34      	ldr	r2, [pc, #208]	; (8006710 <UART_SetConfig+0x4e4>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800664a:	441c      	add	r4, r3
 800664c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006650:	2200      	movs	r2, #0
 8006652:	673b      	str	r3, [r7, #112]	; 0x70
 8006654:	677a      	str	r2, [r7, #116]	; 0x74
 8006656:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800665a:	4642      	mov	r2, r8
 800665c:	464b      	mov	r3, r9
 800665e:	1891      	adds	r1, r2, r2
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	415b      	adcs	r3, r3
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800666a:	4641      	mov	r1, r8
 800666c:	1851      	adds	r1, r2, r1
 800666e:	6039      	str	r1, [r7, #0]
 8006670:	4649      	mov	r1, r9
 8006672:	414b      	adcs	r3, r1
 8006674:	607b      	str	r3, [r7, #4]
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	f04f 0300 	mov.w	r3, #0
 800667e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006682:	4659      	mov	r1, fp
 8006684:	00cb      	lsls	r3, r1, #3
 8006686:	4651      	mov	r1, sl
 8006688:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668c:	4651      	mov	r1, sl
 800668e:	00ca      	lsls	r2, r1, #3
 8006690:	4610      	mov	r0, r2
 8006692:	4619      	mov	r1, r3
 8006694:	4603      	mov	r3, r0
 8006696:	4642      	mov	r2, r8
 8006698:	189b      	adds	r3, r3, r2
 800669a:	66bb      	str	r3, [r7, #104]	; 0x68
 800669c:	464b      	mov	r3, r9
 800669e:	460a      	mov	r2, r1
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	663b      	str	r3, [r7, #96]	; 0x60
 80066b0:	667a      	str	r2, [r7, #100]	; 0x64
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066be:	4649      	mov	r1, r9
 80066c0:	008b      	lsls	r3, r1, #2
 80066c2:	4641      	mov	r1, r8
 80066c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066c8:	4641      	mov	r1, r8
 80066ca:	008a      	lsls	r2, r1, #2
 80066cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066d0:	f7fa fa9a 	bl	8000c08 <__aeabi_uldivmod>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <UART_SetConfig+0x4e4>)
 80066da:	fba3 1302 	umull	r1, r3, r3, r2
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	2164      	movs	r1, #100	; 0x64
 80066e2:	fb01 f303 	mul.w	r3, r1, r3
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	3332      	adds	r3, #50	; 0x32
 80066ec:	4a08      	ldr	r2, [pc, #32]	; (8006710 <UART_SetConfig+0x4e4>)
 80066ee:	fba2 2303 	umull	r2, r3, r2, r3
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	f003 020f 	and.w	r2, r3, #15
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4422      	add	r2, r4
 8006700:	609a      	str	r2, [r3, #8]
}
 8006702:	bf00      	nop
 8006704:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006708:	46bd      	mov	sp, r7
 800670a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800670e:	bf00      	nop
 8006710:	51eb851f 	.word	0x51eb851f

08006714 <atoi>:
 8006714:	220a      	movs	r2, #10
 8006716:	2100      	movs	r1, #0
 8006718:	f000 b920 	b.w	800695c <strtol>

0800671c <__errno>:
 800671c:	4b01      	ldr	r3, [pc, #4]	; (8006724 <__errno+0x8>)
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	2000000c 	.word	0x2000000c

08006728 <__libc_init_array>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4d0d      	ldr	r5, [pc, #52]	; (8006760 <__libc_init_array+0x38>)
 800672c:	4c0d      	ldr	r4, [pc, #52]	; (8006764 <__libc_init_array+0x3c>)
 800672e:	1b64      	subs	r4, r4, r5
 8006730:	10a4      	asrs	r4, r4, #2
 8006732:	2600      	movs	r6, #0
 8006734:	42a6      	cmp	r6, r4
 8006736:	d109      	bne.n	800674c <__libc_init_array+0x24>
 8006738:	4d0b      	ldr	r5, [pc, #44]	; (8006768 <__libc_init_array+0x40>)
 800673a:	4c0c      	ldr	r4, [pc, #48]	; (800676c <__libc_init_array+0x44>)
 800673c:	f003 f8e2 	bl	8009904 <_init>
 8006740:	1b64      	subs	r4, r4, r5
 8006742:	10a4      	asrs	r4, r4, #2
 8006744:	2600      	movs	r6, #0
 8006746:	42a6      	cmp	r6, r4
 8006748:	d105      	bne.n	8006756 <__libc_init_array+0x2e>
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006750:	4798      	blx	r3
 8006752:	3601      	adds	r6, #1
 8006754:	e7ee      	b.n	8006734 <__libc_init_array+0xc>
 8006756:	f855 3b04 	ldr.w	r3, [r5], #4
 800675a:	4798      	blx	r3
 800675c:	3601      	adds	r6, #1
 800675e:	e7f2      	b.n	8006746 <__libc_init_array+0x1e>
 8006760:	08009de8 	.word	0x08009de8
 8006764:	08009de8 	.word	0x08009de8
 8006768:	08009de8 	.word	0x08009de8
 800676c:	08009dec 	.word	0x08009dec

08006770 <memset>:
 8006770:	4402      	add	r2, r0
 8006772:	4603      	mov	r3, r0
 8006774:	4293      	cmp	r3, r2
 8006776:	d100      	bne.n	800677a <memset+0xa>
 8006778:	4770      	bx	lr
 800677a:	f803 1b01 	strb.w	r1, [r3], #1
 800677e:	e7f9      	b.n	8006774 <memset+0x4>

08006780 <strcat>:
 8006780:	b510      	push	{r4, lr}
 8006782:	4602      	mov	r2, r0
 8006784:	7814      	ldrb	r4, [r2, #0]
 8006786:	4613      	mov	r3, r2
 8006788:	3201      	adds	r2, #1
 800678a:	2c00      	cmp	r4, #0
 800678c:	d1fa      	bne.n	8006784 <strcat+0x4>
 800678e:	3b01      	subs	r3, #1
 8006790:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006794:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006798:	2a00      	cmp	r2, #0
 800679a:	d1f9      	bne.n	8006790 <strcat+0x10>
 800679c:	bd10      	pop	{r4, pc}
	...

080067a0 <strtok>:
 80067a0:	4b16      	ldr	r3, [pc, #88]	; (80067fc <strtok+0x5c>)
 80067a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067a4:	681e      	ldr	r6, [r3, #0]
 80067a6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80067a8:	4605      	mov	r5, r0
 80067aa:	b9fc      	cbnz	r4, 80067ec <strtok+0x4c>
 80067ac:	2050      	movs	r0, #80	; 0x50
 80067ae:	9101      	str	r1, [sp, #4]
 80067b0:	f000 f9b0 	bl	8006b14 <malloc>
 80067b4:	9901      	ldr	r1, [sp, #4]
 80067b6:	65b0      	str	r0, [r6, #88]	; 0x58
 80067b8:	4602      	mov	r2, r0
 80067ba:	b920      	cbnz	r0, 80067c6 <strtok+0x26>
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <strtok+0x60>)
 80067be:	4811      	ldr	r0, [pc, #68]	; (8006804 <strtok+0x64>)
 80067c0:	2157      	movs	r1, #87	; 0x57
 80067c2:	f000 f977 	bl	8006ab4 <__assert_func>
 80067c6:	e9c0 4400 	strd	r4, r4, [r0]
 80067ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80067ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80067d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80067d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80067da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80067de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80067e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80067e6:	6184      	str	r4, [r0, #24]
 80067e8:	7704      	strb	r4, [r0, #28]
 80067ea:	6244      	str	r4, [r0, #36]	; 0x24
 80067ec:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80067ee:	2301      	movs	r3, #1
 80067f0:	4628      	mov	r0, r5
 80067f2:	b002      	add	sp, #8
 80067f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067f8:	f000 b806 	b.w	8006808 <__strtok_r>
 80067fc:	2000000c 	.word	0x2000000c
 8006800:	08009994 	.word	0x08009994
 8006804:	080099ab 	.word	0x080099ab

08006808 <__strtok_r>:
 8006808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800680a:	b908      	cbnz	r0, 8006810 <__strtok_r+0x8>
 800680c:	6810      	ldr	r0, [r2, #0]
 800680e:	b188      	cbz	r0, 8006834 <__strtok_r+0x2c>
 8006810:	4604      	mov	r4, r0
 8006812:	4620      	mov	r0, r4
 8006814:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006818:	460f      	mov	r7, r1
 800681a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800681e:	b91e      	cbnz	r6, 8006828 <__strtok_r+0x20>
 8006820:	b965      	cbnz	r5, 800683c <__strtok_r+0x34>
 8006822:	6015      	str	r5, [r2, #0]
 8006824:	4628      	mov	r0, r5
 8006826:	e005      	b.n	8006834 <__strtok_r+0x2c>
 8006828:	42b5      	cmp	r5, r6
 800682a:	d1f6      	bne.n	800681a <__strtok_r+0x12>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f0      	bne.n	8006812 <__strtok_r+0xa>
 8006830:	6014      	str	r4, [r2, #0]
 8006832:	7003      	strb	r3, [r0, #0]
 8006834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006836:	461c      	mov	r4, r3
 8006838:	e00c      	b.n	8006854 <__strtok_r+0x4c>
 800683a:	b915      	cbnz	r5, 8006842 <__strtok_r+0x3a>
 800683c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006840:	460e      	mov	r6, r1
 8006842:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006846:	42ab      	cmp	r3, r5
 8006848:	d1f7      	bne.n	800683a <__strtok_r+0x32>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0f3      	beq.n	8006836 <__strtok_r+0x2e>
 800684e:	2300      	movs	r3, #0
 8006850:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006854:	6014      	str	r4, [r2, #0]
 8006856:	e7ed      	b.n	8006834 <__strtok_r+0x2c>

08006858 <_strtol_l.constprop.0>:
 8006858:	2b01      	cmp	r3, #1
 800685a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800685e:	d001      	beq.n	8006864 <_strtol_l.constprop.0+0xc>
 8006860:	2b24      	cmp	r3, #36	; 0x24
 8006862:	d906      	bls.n	8006872 <_strtol_l.constprop.0+0x1a>
 8006864:	f7ff ff5a 	bl	800671c <__errno>
 8006868:	2316      	movs	r3, #22
 800686a:	6003      	str	r3, [r0, #0]
 800686c:	2000      	movs	r0, #0
 800686e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006872:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006958 <_strtol_l.constprop.0+0x100>
 8006876:	460d      	mov	r5, r1
 8006878:	462e      	mov	r6, r5
 800687a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800687e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006882:	f017 0708 	ands.w	r7, r7, #8
 8006886:	d1f7      	bne.n	8006878 <_strtol_l.constprop.0+0x20>
 8006888:	2c2d      	cmp	r4, #45	; 0x2d
 800688a:	d132      	bne.n	80068f2 <_strtol_l.constprop.0+0x9a>
 800688c:	782c      	ldrb	r4, [r5, #0]
 800688e:	2701      	movs	r7, #1
 8006890:	1cb5      	adds	r5, r6, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d05b      	beq.n	800694e <_strtol_l.constprop.0+0xf6>
 8006896:	2b10      	cmp	r3, #16
 8006898:	d109      	bne.n	80068ae <_strtol_l.constprop.0+0x56>
 800689a:	2c30      	cmp	r4, #48	; 0x30
 800689c:	d107      	bne.n	80068ae <_strtol_l.constprop.0+0x56>
 800689e:	782c      	ldrb	r4, [r5, #0]
 80068a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80068a4:	2c58      	cmp	r4, #88	; 0x58
 80068a6:	d14d      	bne.n	8006944 <_strtol_l.constprop.0+0xec>
 80068a8:	786c      	ldrb	r4, [r5, #1]
 80068aa:	2310      	movs	r3, #16
 80068ac:	3502      	adds	r5, #2
 80068ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80068b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80068b6:	f04f 0c00 	mov.w	ip, #0
 80068ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80068be:	4666      	mov	r6, ip
 80068c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80068c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80068c8:	f1be 0f09 	cmp.w	lr, #9
 80068cc:	d816      	bhi.n	80068fc <_strtol_l.constprop.0+0xa4>
 80068ce:	4674      	mov	r4, lr
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	dd24      	ble.n	800691e <_strtol_l.constprop.0+0xc6>
 80068d4:	f1bc 0f00 	cmp.w	ip, #0
 80068d8:	db1e      	blt.n	8006918 <_strtol_l.constprop.0+0xc0>
 80068da:	45b1      	cmp	r9, r6
 80068dc:	d31c      	bcc.n	8006918 <_strtol_l.constprop.0+0xc0>
 80068de:	d101      	bne.n	80068e4 <_strtol_l.constprop.0+0x8c>
 80068e0:	45a2      	cmp	sl, r4
 80068e2:	db19      	blt.n	8006918 <_strtol_l.constprop.0+0xc0>
 80068e4:	fb06 4603 	mla	r6, r6, r3, r4
 80068e8:	f04f 0c01 	mov.w	ip, #1
 80068ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068f0:	e7e8      	b.n	80068c4 <_strtol_l.constprop.0+0x6c>
 80068f2:	2c2b      	cmp	r4, #43	; 0x2b
 80068f4:	bf04      	itt	eq
 80068f6:	782c      	ldrbeq	r4, [r5, #0]
 80068f8:	1cb5      	addeq	r5, r6, #2
 80068fa:	e7ca      	b.n	8006892 <_strtol_l.constprop.0+0x3a>
 80068fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006900:	f1be 0f19 	cmp.w	lr, #25
 8006904:	d801      	bhi.n	800690a <_strtol_l.constprop.0+0xb2>
 8006906:	3c37      	subs	r4, #55	; 0x37
 8006908:	e7e2      	b.n	80068d0 <_strtol_l.constprop.0+0x78>
 800690a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800690e:	f1be 0f19 	cmp.w	lr, #25
 8006912:	d804      	bhi.n	800691e <_strtol_l.constprop.0+0xc6>
 8006914:	3c57      	subs	r4, #87	; 0x57
 8006916:	e7db      	b.n	80068d0 <_strtol_l.constprop.0+0x78>
 8006918:	f04f 3cff 	mov.w	ip, #4294967295
 800691c:	e7e6      	b.n	80068ec <_strtol_l.constprop.0+0x94>
 800691e:	f1bc 0f00 	cmp.w	ip, #0
 8006922:	da05      	bge.n	8006930 <_strtol_l.constprop.0+0xd8>
 8006924:	2322      	movs	r3, #34	; 0x22
 8006926:	6003      	str	r3, [r0, #0]
 8006928:	4646      	mov	r6, r8
 800692a:	b942      	cbnz	r2, 800693e <_strtol_l.constprop.0+0xe6>
 800692c:	4630      	mov	r0, r6
 800692e:	e79e      	b.n	800686e <_strtol_l.constprop.0+0x16>
 8006930:	b107      	cbz	r7, 8006934 <_strtol_l.constprop.0+0xdc>
 8006932:	4276      	negs	r6, r6
 8006934:	2a00      	cmp	r2, #0
 8006936:	d0f9      	beq.n	800692c <_strtol_l.constprop.0+0xd4>
 8006938:	f1bc 0f00 	cmp.w	ip, #0
 800693c:	d000      	beq.n	8006940 <_strtol_l.constprop.0+0xe8>
 800693e:	1e69      	subs	r1, r5, #1
 8006940:	6011      	str	r1, [r2, #0]
 8006942:	e7f3      	b.n	800692c <_strtol_l.constprop.0+0xd4>
 8006944:	2430      	movs	r4, #48	; 0x30
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1b1      	bne.n	80068ae <_strtol_l.constprop.0+0x56>
 800694a:	2308      	movs	r3, #8
 800694c:	e7af      	b.n	80068ae <_strtol_l.constprop.0+0x56>
 800694e:	2c30      	cmp	r4, #48	; 0x30
 8006950:	d0a5      	beq.n	800689e <_strtol_l.constprop.0+0x46>
 8006952:	230a      	movs	r3, #10
 8006954:	e7ab      	b.n	80068ae <_strtol_l.constprop.0+0x56>
 8006956:	bf00      	nop
 8006958:	08009a45 	.word	0x08009a45

0800695c <strtol>:
 800695c:	4613      	mov	r3, r2
 800695e:	460a      	mov	r2, r1
 8006960:	4601      	mov	r1, r0
 8006962:	4802      	ldr	r0, [pc, #8]	; (800696c <strtol+0x10>)
 8006964:	6800      	ldr	r0, [r0, #0]
 8006966:	f7ff bf77 	b.w	8006858 <_strtol_l.constprop.0>
 800696a:	bf00      	nop
 800696c:	2000000c 	.word	0x2000000c

08006970 <_strtoull_l.constprop.0>:
 8006970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006974:	4692      	mov	sl, r2
 8006976:	4a49      	ldr	r2, [pc, #292]	; (8006a9c <_strtoull_l.constprop.0+0x12c>)
 8006978:	9001      	str	r0, [sp, #4]
 800697a:	4689      	mov	r9, r1
 800697c:	461d      	mov	r5, r3
 800697e:	460e      	mov	r6, r1
 8006980:	4633      	mov	r3, r6
 8006982:	f816 4b01 	ldrb.w	r4, [r6], #1
 8006986:	5ca7      	ldrb	r7, [r4, r2]
 8006988:	f017 0708 	ands.w	r7, r7, #8
 800698c:	d1f8      	bne.n	8006980 <_strtoull_l.constprop.0+0x10>
 800698e:	2c2d      	cmp	r4, #45	; 0x2d
 8006990:	d14a      	bne.n	8006a28 <_strtoull_l.constprop.0+0xb8>
 8006992:	7834      	ldrb	r4, [r6, #0]
 8006994:	2701      	movs	r7, #1
 8006996:	1c9e      	adds	r6, r3, #2
 8006998:	2d00      	cmp	r5, #0
 800699a:	d07b      	beq.n	8006a94 <_strtoull_l.constprop.0+0x124>
 800699c:	2d10      	cmp	r5, #16
 800699e:	d109      	bne.n	80069b4 <_strtoull_l.constprop.0+0x44>
 80069a0:	2c30      	cmp	r4, #48	; 0x30
 80069a2:	d107      	bne.n	80069b4 <_strtoull_l.constprop.0+0x44>
 80069a4:	7833      	ldrb	r3, [r6, #0]
 80069a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069aa:	2b58      	cmp	r3, #88	; 0x58
 80069ac:	d16d      	bne.n	8006a8a <_strtoull_l.constprop.0+0x11a>
 80069ae:	7874      	ldrb	r4, [r6, #1]
 80069b0:	2510      	movs	r5, #16
 80069b2:	3602      	adds	r6, #2
 80069b4:	ea4f 7be5 	mov.w	fp, r5, asr #31
 80069b8:	462a      	mov	r2, r5
 80069ba:	465b      	mov	r3, fp
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295
 80069c0:	f04f 31ff 	mov.w	r1, #4294967295
 80069c4:	f7fa f920 	bl	8000c08 <__aeabi_uldivmod>
 80069c8:	462a      	mov	r2, r5
 80069ca:	9000      	str	r0, [sp, #0]
 80069cc:	4688      	mov	r8, r1
 80069ce:	465b      	mov	r3, fp
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	f04f 31ff 	mov.w	r1, #4294967295
 80069d8:	f7fa f916 	bl	8000c08 <__aeabi_uldivmod>
 80069dc:	2300      	movs	r3, #0
 80069de:	4618      	mov	r0, r3
 80069e0:	4619      	mov	r1, r3
 80069e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80069e6:	f1bc 0f09 	cmp.w	ip, #9
 80069ea:	d822      	bhi.n	8006a32 <_strtoull_l.constprop.0+0xc2>
 80069ec:	4664      	mov	r4, ip
 80069ee:	42a5      	cmp	r5, r4
 80069f0:	dd30      	ble.n	8006a54 <_strtoull_l.constprop.0+0xe4>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	db2b      	blt.n	8006a4e <_strtoull_l.constprop.0+0xde>
 80069f6:	9b00      	ldr	r3, [sp, #0]
 80069f8:	4283      	cmp	r3, r0
 80069fa:	eb78 0301 	sbcs.w	r3, r8, r1
 80069fe:	d326      	bcc.n	8006a4e <_strtoull_l.constprop.0+0xde>
 8006a00:	9b00      	ldr	r3, [sp, #0]
 8006a02:	4588      	cmp	r8, r1
 8006a04:	bf08      	it	eq
 8006a06:	4283      	cmpeq	r3, r0
 8006a08:	d101      	bne.n	8006a0e <_strtoull_l.constprop.0+0x9e>
 8006a0a:	42a2      	cmp	r2, r4
 8006a0c:	db1f      	blt.n	8006a4e <_strtoull_l.constprop.0+0xde>
 8006a0e:	4369      	muls	r1, r5
 8006a10:	fb00 110b 	mla	r1, r0, fp, r1
 8006a14:	fba5 0300 	umull	r0, r3, r5, r0
 8006a18:	4419      	add	r1, r3
 8006a1a:	1820      	adds	r0, r4, r0
 8006a1c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8006a20:	2301      	movs	r3, #1
 8006a22:	f816 4b01 	ldrb.w	r4, [r6], #1
 8006a26:	e7dc      	b.n	80069e2 <_strtoull_l.constprop.0+0x72>
 8006a28:	2c2b      	cmp	r4, #43	; 0x2b
 8006a2a:	bf04      	itt	eq
 8006a2c:	7834      	ldrbeq	r4, [r6, #0]
 8006a2e:	1c9e      	addeq	r6, r3, #2
 8006a30:	e7b2      	b.n	8006998 <_strtoull_l.constprop.0+0x28>
 8006a32:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006a36:	f1bc 0f19 	cmp.w	ip, #25
 8006a3a:	d801      	bhi.n	8006a40 <_strtoull_l.constprop.0+0xd0>
 8006a3c:	3c37      	subs	r4, #55	; 0x37
 8006a3e:	e7d6      	b.n	80069ee <_strtoull_l.constprop.0+0x7e>
 8006a40:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006a44:	f1bc 0f19 	cmp.w	ip, #25
 8006a48:	d804      	bhi.n	8006a54 <_strtoull_l.constprop.0+0xe4>
 8006a4a:	3c57      	subs	r4, #87	; 0x57
 8006a4c:	e7cf      	b.n	80069ee <_strtoull_l.constprop.0+0x7e>
 8006a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a52:	e7e6      	b.n	8006a22 <_strtoull_l.constprop.0+0xb2>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	da0b      	bge.n	8006a70 <_strtoull_l.constprop.0+0x100>
 8006a58:	9a01      	ldr	r2, [sp, #4]
 8006a5a:	2322      	movs	r3, #34	; 0x22
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	4601      	mov	r1, r0
 8006a64:	f1ba 0f00 	cmp.w	sl, #0
 8006a68:	d10a      	bne.n	8006a80 <_strtoull_l.constprop.0+0x110>
 8006a6a:	b003      	add	sp, #12
 8006a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a70:	b117      	cbz	r7, 8006a78 <_strtoull_l.constprop.0+0x108>
 8006a72:	4240      	negs	r0, r0
 8006a74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006a78:	f1ba 0f00 	cmp.w	sl, #0
 8006a7c:	d0f5      	beq.n	8006a6a <_strtoull_l.constprop.0+0xfa>
 8006a7e:	b10b      	cbz	r3, 8006a84 <_strtoull_l.constprop.0+0x114>
 8006a80:	f106 39ff 	add.w	r9, r6, #4294967295
 8006a84:	f8ca 9000 	str.w	r9, [sl]
 8006a88:	e7ef      	b.n	8006a6a <_strtoull_l.constprop.0+0xfa>
 8006a8a:	2430      	movs	r4, #48	; 0x30
 8006a8c:	2d00      	cmp	r5, #0
 8006a8e:	d191      	bne.n	80069b4 <_strtoull_l.constprop.0+0x44>
 8006a90:	2508      	movs	r5, #8
 8006a92:	e78f      	b.n	80069b4 <_strtoull_l.constprop.0+0x44>
 8006a94:	2c30      	cmp	r4, #48	; 0x30
 8006a96:	d085      	beq.n	80069a4 <_strtoull_l.constprop.0+0x34>
 8006a98:	250a      	movs	r5, #10
 8006a9a:	e78b      	b.n	80069b4 <_strtoull_l.constprop.0+0x44>
 8006a9c:	08009a45 	.word	0x08009a45

08006aa0 <strtoull>:
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	460a      	mov	r2, r1
 8006aa4:	4601      	mov	r1, r0
 8006aa6:	4802      	ldr	r0, [pc, #8]	; (8006ab0 <strtoull+0x10>)
 8006aa8:	6800      	ldr	r0, [r0, #0]
 8006aaa:	f7ff bf61 	b.w	8006970 <_strtoull_l.constprop.0>
 8006aae:	bf00      	nop
 8006ab0:	2000000c 	.word	0x2000000c

08006ab4 <__assert_func>:
 8006ab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ab6:	4614      	mov	r4, r2
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <__assert_func+0x2c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4605      	mov	r5, r0
 8006ac0:	68d8      	ldr	r0, [r3, #12]
 8006ac2:	b14c      	cbz	r4, 8006ad8 <__assert_func+0x24>
 8006ac4:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <__assert_func+0x30>)
 8006ac6:	9100      	str	r1, [sp, #0]
 8006ac8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006acc:	4906      	ldr	r1, [pc, #24]	; (8006ae8 <__assert_func+0x34>)
 8006ace:	462b      	mov	r3, r5
 8006ad0:	f000 f80e 	bl	8006af0 <fiprintf>
 8006ad4:	f000 fcc4 	bl	8007460 <abort>
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <__assert_func+0x38>)
 8006ada:	461c      	mov	r4, r3
 8006adc:	e7f3      	b.n	8006ac6 <__assert_func+0x12>
 8006ade:	bf00      	nop
 8006ae0:	2000000c 	.word	0x2000000c
 8006ae4:	08009a08 	.word	0x08009a08
 8006ae8:	08009a15 	.word	0x08009a15
 8006aec:	08009a43 	.word	0x08009a43

08006af0 <fiprintf>:
 8006af0:	b40e      	push	{r1, r2, r3}
 8006af2:	b503      	push	{r0, r1, lr}
 8006af4:	4601      	mov	r1, r0
 8006af6:	ab03      	add	r3, sp, #12
 8006af8:	4805      	ldr	r0, [pc, #20]	; (8006b10 <fiprintf+0x20>)
 8006afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006afe:	6800      	ldr	r0, [r0, #0]
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	f000 f919 	bl	8006d38 <_vfiprintf_r>
 8006b06:	b002      	add	sp, #8
 8006b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b0c:	b003      	add	sp, #12
 8006b0e:	4770      	bx	lr
 8006b10:	2000000c 	.word	0x2000000c

08006b14 <malloc>:
 8006b14:	4b02      	ldr	r3, [pc, #8]	; (8006b20 <malloc+0xc>)
 8006b16:	4601      	mov	r1, r0
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	f000 b86f 	b.w	8006bfc <_malloc_r>
 8006b1e:	bf00      	nop
 8006b20:	2000000c 	.word	0x2000000c

08006b24 <_free_r>:
 8006b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b26:	2900      	cmp	r1, #0
 8006b28:	d044      	beq.n	8006bb4 <_free_r+0x90>
 8006b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b2e:	9001      	str	r0, [sp, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f1a1 0404 	sub.w	r4, r1, #4
 8006b36:	bfb8      	it	lt
 8006b38:	18e4      	addlt	r4, r4, r3
 8006b3a:	f000 feb9 	bl	80078b0 <__malloc_lock>
 8006b3e:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <_free_r+0x94>)
 8006b40:	9801      	ldr	r0, [sp, #4]
 8006b42:	6813      	ldr	r3, [r2, #0]
 8006b44:	b933      	cbnz	r3, 8006b54 <_free_r+0x30>
 8006b46:	6063      	str	r3, [r4, #4]
 8006b48:	6014      	str	r4, [r2, #0]
 8006b4a:	b003      	add	sp, #12
 8006b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b50:	f000 beb4 	b.w	80078bc <__malloc_unlock>
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	d908      	bls.n	8006b6a <_free_r+0x46>
 8006b58:	6825      	ldr	r5, [r4, #0]
 8006b5a:	1961      	adds	r1, r4, r5
 8006b5c:	428b      	cmp	r3, r1
 8006b5e:	bf01      	itttt	eq
 8006b60:	6819      	ldreq	r1, [r3, #0]
 8006b62:	685b      	ldreq	r3, [r3, #4]
 8006b64:	1949      	addeq	r1, r1, r5
 8006b66:	6021      	streq	r1, [r4, #0]
 8006b68:	e7ed      	b.n	8006b46 <_free_r+0x22>
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	b10b      	cbz	r3, 8006b74 <_free_r+0x50>
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	d9fa      	bls.n	8006b6a <_free_r+0x46>
 8006b74:	6811      	ldr	r1, [r2, #0]
 8006b76:	1855      	adds	r5, r2, r1
 8006b78:	42a5      	cmp	r5, r4
 8006b7a:	d10b      	bne.n	8006b94 <_free_r+0x70>
 8006b7c:	6824      	ldr	r4, [r4, #0]
 8006b7e:	4421      	add	r1, r4
 8006b80:	1854      	adds	r4, r2, r1
 8006b82:	42a3      	cmp	r3, r4
 8006b84:	6011      	str	r1, [r2, #0]
 8006b86:	d1e0      	bne.n	8006b4a <_free_r+0x26>
 8006b88:	681c      	ldr	r4, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	6053      	str	r3, [r2, #4]
 8006b8e:	4421      	add	r1, r4
 8006b90:	6011      	str	r1, [r2, #0]
 8006b92:	e7da      	b.n	8006b4a <_free_r+0x26>
 8006b94:	d902      	bls.n	8006b9c <_free_r+0x78>
 8006b96:	230c      	movs	r3, #12
 8006b98:	6003      	str	r3, [r0, #0]
 8006b9a:	e7d6      	b.n	8006b4a <_free_r+0x26>
 8006b9c:	6825      	ldr	r5, [r4, #0]
 8006b9e:	1961      	adds	r1, r4, r5
 8006ba0:	428b      	cmp	r3, r1
 8006ba2:	bf04      	itt	eq
 8006ba4:	6819      	ldreq	r1, [r3, #0]
 8006ba6:	685b      	ldreq	r3, [r3, #4]
 8006ba8:	6063      	str	r3, [r4, #4]
 8006baa:	bf04      	itt	eq
 8006bac:	1949      	addeq	r1, r1, r5
 8006bae:	6021      	streq	r1, [r4, #0]
 8006bb0:	6054      	str	r4, [r2, #4]
 8006bb2:	e7ca      	b.n	8006b4a <_free_r+0x26>
 8006bb4:	b003      	add	sp, #12
 8006bb6:	bd30      	pop	{r4, r5, pc}
 8006bb8:	20000724 	.word	0x20000724

08006bbc <sbrk_aligned>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	4e0e      	ldr	r6, [pc, #56]	; (8006bf8 <sbrk_aligned+0x3c>)
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	6831      	ldr	r1, [r6, #0]
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	b911      	cbnz	r1, 8006bce <sbrk_aligned+0x12>
 8006bc8:	f000 fb7a 	bl	80072c0 <_sbrk_r>
 8006bcc:	6030      	str	r0, [r6, #0]
 8006bce:	4621      	mov	r1, r4
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f000 fb75 	bl	80072c0 <_sbrk_r>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d00a      	beq.n	8006bf0 <sbrk_aligned+0x34>
 8006bda:	1cc4      	adds	r4, r0, #3
 8006bdc:	f024 0403 	bic.w	r4, r4, #3
 8006be0:	42a0      	cmp	r0, r4
 8006be2:	d007      	beq.n	8006bf4 <sbrk_aligned+0x38>
 8006be4:	1a21      	subs	r1, r4, r0
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 fb6a 	bl	80072c0 <_sbrk_r>
 8006bec:	3001      	adds	r0, #1
 8006bee:	d101      	bne.n	8006bf4 <sbrk_aligned+0x38>
 8006bf0:	f04f 34ff 	mov.w	r4, #4294967295
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	20000728 	.word	0x20000728

08006bfc <_malloc_r>:
 8006bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c00:	1ccd      	adds	r5, r1, #3
 8006c02:	f025 0503 	bic.w	r5, r5, #3
 8006c06:	3508      	adds	r5, #8
 8006c08:	2d0c      	cmp	r5, #12
 8006c0a:	bf38      	it	cc
 8006c0c:	250c      	movcc	r5, #12
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	4607      	mov	r7, r0
 8006c12:	db01      	blt.n	8006c18 <_malloc_r+0x1c>
 8006c14:	42a9      	cmp	r1, r5
 8006c16:	d905      	bls.n	8006c24 <_malloc_r+0x28>
 8006c18:	230c      	movs	r3, #12
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	2600      	movs	r6, #0
 8006c1e:	4630      	mov	r0, r6
 8006c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c24:	4e2e      	ldr	r6, [pc, #184]	; (8006ce0 <_malloc_r+0xe4>)
 8006c26:	f000 fe43 	bl	80078b0 <__malloc_lock>
 8006c2a:	6833      	ldr	r3, [r6, #0]
 8006c2c:	461c      	mov	r4, r3
 8006c2e:	bb34      	cbnz	r4, 8006c7e <_malloc_r+0x82>
 8006c30:	4629      	mov	r1, r5
 8006c32:	4638      	mov	r0, r7
 8006c34:	f7ff ffc2 	bl	8006bbc <sbrk_aligned>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	d14d      	bne.n	8006cda <_malloc_r+0xde>
 8006c3e:	6834      	ldr	r4, [r6, #0]
 8006c40:	4626      	mov	r6, r4
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	d140      	bne.n	8006cc8 <_malloc_r+0xcc>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	eb04 0803 	add.w	r8, r4, r3
 8006c50:	f000 fb36 	bl	80072c0 <_sbrk_r>
 8006c54:	4580      	cmp	r8, r0
 8006c56:	d13a      	bne.n	8006cce <_malloc_r+0xd2>
 8006c58:	6821      	ldr	r1, [r4, #0]
 8006c5a:	3503      	adds	r5, #3
 8006c5c:	1a6d      	subs	r5, r5, r1
 8006c5e:	f025 0503 	bic.w	r5, r5, #3
 8006c62:	3508      	adds	r5, #8
 8006c64:	2d0c      	cmp	r5, #12
 8006c66:	bf38      	it	cc
 8006c68:	250c      	movcc	r5, #12
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	f7ff ffa5 	bl	8006bbc <sbrk_aligned>
 8006c72:	3001      	adds	r0, #1
 8006c74:	d02b      	beq.n	8006cce <_malloc_r+0xd2>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	442b      	add	r3, r5
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	e00e      	b.n	8006c9c <_malloc_r+0xa0>
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	1b52      	subs	r2, r2, r5
 8006c82:	d41e      	bmi.n	8006cc2 <_malloc_r+0xc6>
 8006c84:	2a0b      	cmp	r2, #11
 8006c86:	d916      	bls.n	8006cb6 <_malloc_r+0xba>
 8006c88:	1961      	adds	r1, r4, r5
 8006c8a:	42a3      	cmp	r3, r4
 8006c8c:	6025      	str	r5, [r4, #0]
 8006c8e:	bf18      	it	ne
 8006c90:	6059      	strne	r1, [r3, #4]
 8006c92:	6863      	ldr	r3, [r4, #4]
 8006c94:	bf08      	it	eq
 8006c96:	6031      	streq	r1, [r6, #0]
 8006c98:	5162      	str	r2, [r4, r5]
 8006c9a:	604b      	str	r3, [r1, #4]
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	f104 060b 	add.w	r6, r4, #11
 8006ca2:	f000 fe0b 	bl	80078bc <__malloc_unlock>
 8006ca6:	f026 0607 	bic.w	r6, r6, #7
 8006caa:	1d23      	adds	r3, r4, #4
 8006cac:	1af2      	subs	r2, r6, r3
 8006cae:	d0b6      	beq.n	8006c1e <_malloc_r+0x22>
 8006cb0:	1b9b      	subs	r3, r3, r6
 8006cb2:	50a3      	str	r3, [r4, r2]
 8006cb4:	e7b3      	b.n	8006c1e <_malloc_r+0x22>
 8006cb6:	6862      	ldr	r2, [r4, #4]
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	bf0c      	ite	eq
 8006cbc:	6032      	streq	r2, [r6, #0]
 8006cbe:	605a      	strne	r2, [r3, #4]
 8006cc0:	e7ec      	b.n	8006c9c <_malloc_r+0xa0>
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	6864      	ldr	r4, [r4, #4]
 8006cc6:	e7b2      	b.n	8006c2e <_malloc_r+0x32>
 8006cc8:	4634      	mov	r4, r6
 8006cca:	6876      	ldr	r6, [r6, #4]
 8006ccc:	e7b9      	b.n	8006c42 <_malloc_r+0x46>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	603b      	str	r3, [r7, #0]
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	f000 fdf2 	bl	80078bc <__malloc_unlock>
 8006cd8:	e7a1      	b.n	8006c1e <_malloc_r+0x22>
 8006cda:	6025      	str	r5, [r4, #0]
 8006cdc:	e7de      	b.n	8006c9c <_malloc_r+0xa0>
 8006cde:	bf00      	nop
 8006ce0:	20000724 	.word	0x20000724

08006ce4 <__sfputc_r>:
 8006ce4:	6893      	ldr	r3, [r2, #8]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	b410      	push	{r4}
 8006cec:	6093      	str	r3, [r2, #8]
 8006cee:	da08      	bge.n	8006d02 <__sfputc_r+0x1e>
 8006cf0:	6994      	ldr	r4, [r2, #24]
 8006cf2:	42a3      	cmp	r3, r4
 8006cf4:	db01      	blt.n	8006cfa <__sfputc_r+0x16>
 8006cf6:	290a      	cmp	r1, #10
 8006cf8:	d103      	bne.n	8006d02 <__sfputc_r+0x1e>
 8006cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cfe:	f000 baef 	b.w	80072e0 <__swbuf_r>
 8006d02:	6813      	ldr	r3, [r2, #0]
 8006d04:	1c58      	adds	r0, r3, #1
 8006d06:	6010      	str	r0, [r2, #0]
 8006d08:	7019      	strb	r1, [r3, #0]
 8006d0a:	4608      	mov	r0, r1
 8006d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <__sfputs_r>:
 8006d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d14:	4606      	mov	r6, r0
 8006d16:	460f      	mov	r7, r1
 8006d18:	4614      	mov	r4, r2
 8006d1a:	18d5      	adds	r5, r2, r3
 8006d1c:	42ac      	cmp	r4, r5
 8006d1e:	d101      	bne.n	8006d24 <__sfputs_r+0x12>
 8006d20:	2000      	movs	r0, #0
 8006d22:	e007      	b.n	8006d34 <__sfputs_r+0x22>
 8006d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d28:	463a      	mov	r2, r7
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff ffda 	bl	8006ce4 <__sfputc_r>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d1f3      	bne.n	8006d1c <__sfputs_r+0xa>
 8006d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d38 <_vfiprintf_r>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	460d      	mov	r5, r1
 8006d3e:	b09d      	sub	sp, #116	; 0x74
 8006d40:	4614      	mov	r4, r2
 8006d42:	4698      	mov	r8, r3
 8006d44:	4606      	mov	r6, r0
 8006d46:	b118      	cbz	r0, 8006d50 <_vfiprintf_r+0x18>
 8006d48:	6983      	ldr	r3, [r0, #24]
 8006d4a:	b90b      	cbnz	r3, 8006d50 <_vfiprintf_r+0x18>
 8006d4c:	f000 fcaa 	bl	80076a4 <__sinit>
 8006d50:	4b89      	ldr	r3, [pc, #548]	; (8006f78 <_vfiprintf_r+0x240>)
 8006d52:	429d      	cmp	r5, r3
 8006d54:	d11b      	bne.n	8006d8e <_vfiprintf_r+0x56>
 8006d56:	6875      	ldr	r5, [r6, #4]
 8006d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d5a:	07d9      	lsls	r1, r3, #31
 8006d5c:	d405      	bmi.n	8006d6a <_vfiprintf_r+0x32>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	059a      	lsls	r2, r3, #22
 8006d62:	d402      	bmi.n	8006d6a <_vfiprintf_r+0x32>
 8006d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d66:	f000 fd3b 	bl	80077e0 <__retarget_lock_acquire_recursive>
 8006d6a:	89ab      	ldrh	r3, [r5, #12]
 8006d6c:	071b      	lsls	r3, r3, #28
 8006d6e:	d501      	bpl.n	8006d74 <_vfiprintf_r+0x3c>
 8006d70:	692b      	ldr	r3, [r5, #16]
 8006d72:	b9eb      	cbnz	r3, 8006db0 <_vfiprintf_r+0x78>
 8006d74:	4629      	mov	r1, r5
 8006d76:	4630      	mov	r0, r6
 8006d78:	f000 fb04 	bl	8007384 <__swsetup_r>
 8006d7c:	b1c0      	cbz	r0, 8006db0 <_vfiprintf_r+0x78>
 8006d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d80:	07dc      	lsls	r4, r3, #31
 8006d82:	d50e      	bpl.n	8006da2 <_vfiprintf_r+0x6a>
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	b01d      	add	sp, #116	; 0x74
 8006d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8e:	4b7b      	ldr	r3, [pc, #492]	; (8006f7c <_vfiprintf_r+0x244>)
 8006d90:	429d      	cmp	r5, r3
 8006d92:	d101      	bne.n	8006d98 <_vfiprintf_r+0x60>
 8006d94:	68b5      	ldr	r5, [r6, #8]
 8006d96:	e7df      	b.n	8006d58 <_vfiprintf_r+0x20>
 8006d98:	4b79      	ldr	r3, [pc, #484]	; (8006f80 <_vfiprintf_r+0x248>)
 8006d9a:	429d      	cmp	r5, r3
 8006d9c:	bf08      	it	eq
 8006d9e:	68f5      	ldreq	r5, [r6, #12]
 8006da0:	e7da      	b.n	8006d58 <_vfiprintf_r+0x20>
 8006da2:	89ab      	ldrh	r3, [r5, #12]
 8006da4:	0598      	lsls	r0, r3, #22
 8006da6:	d4ed      	bmi.n	8006d84 <_vfiprintf_r+0x4c>
 8006da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006daa:	f000 fd1a 	bl	80077e2 <__retarget_lock_release_recursive>
 8006dae:	e7e9      	b.n	8006d84 <_vfiprintf_r+0x4c>
 8006db0:	2300      	movs	r3, #0
 8006db2:	9309      	str	r3, [sp, #36]	; 0x24
 8006db4:	2320      	movs	r3, #32
 8006db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dbe:	2330      	movs	r3, #48	; 0x30
 8006dc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f84 <_vfiprintf_r+0x24c>
 8006dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dc8:	f04f 0901 	mov.w	r9, #1
 8006dcc:	4623      	mov	r3, r4
 8006dce:	469a      	mov	sl, r3
 8006dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dd4:	b10a      	cbz	r2, 8006dda <_vfiprintf_r+0xa2>
 8006dd6:	2a25      	cmp	r2, #37	; 0x25
 8006dd8:	d1f9      	bne.n	8006dce <_vfiprintf_r+0x96>
 8006dda:	ebba 0b04 	subs.w	fp, sl, r4
 8006dde:	d00b      	beq.n	8006df8 <_vfiprintf_r+0xc0>
 8006de0:	465b      	mov	r3, fp
 8006de2:	4622      	mov	r2, r4
 8006de4:	4629      	mov	r1, r5
 8006de6:	4630      	mov	r0, r6
 8006de8:	f7ff ff93 	bl	8006d12 <__sfputs_r>
 8006dec:	3001      	adds	r0, #1
 8006dee:	f000 80aa 	beq.w	8006f46 <_vfiprintf_r+0x20e>
 8006df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006df4:	445a      	add	r2, fp
 8006df6:	9209      	str	r2, [sp, #36]	; 0x24
 8006df8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80a2 	beq.w	8006f46 <_vfiprintf_r+0x20e>
 8006e02:	2300      	movs	r3, #0
 8006e04:	f04f 32ff 	mov.w	r2, #4294967295
 8006e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e0c:	f10a 0a01 	add.w	sl, sl, #1
 8006e10:	9304      	str	r3, [sp, #16]
 8006e12:	9307      	str	r3, [sp, #28]
 8006e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e18:	931a      	str	r3, [sp, #104]	; 0x68
 8006e1a:	4654      	mov	r4, sl
 8006e1c:	2205      	movs	r2, #5
 8006e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e22:	4858      	ldr	r0, [pc, #352]	; (8006f84 <_vfiprintf_r+0x24c>)
 8006e24:	f7f9 f9ec 	bl	8000200 <memchr>
 8006e28:	9a04      	ldr	r2, [sp, #16]
 8006e2a:	b9d8      	cbnz	r0, 8006e64 <_vfiprintf_r+0x12c>
 8006e2c:	06d1      	lsls	r1, r2, #27
 8006e2e:	bf44      	itt	mi
 8006e30:	2320      	movmi	r3, #32
 8006e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e36:	0713      	lsls	r3, r2, #28
 8006e38:	bf44      	itt	mi
 8006e3a:	232b      	movmi	r3, #43	; 0x2b
 8006e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e40:	f89a 3000 	ldrb.w	r3, [sl]
 8006e44:	2b2a      	cmp	r3, #42	; 0x2a
 8006e46:	d015      	beq.n	8006e74 <_vfiprintf_r+0x13c>
 8006e48:	9a07      	ldr	r2, [sp, #28]
 8006e4a:	4654      	mov	r4, sl
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	f04f 0c0a 	mov.w	ip, #10
 8006e52:	4621      	mov	r1, r4
 8006e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e58:	3b30      	subs	r3, #48	; 0x30
 8006e5a:	2b09      	cmp	r3, #9
 8006e5c:	d94e      	bls.n	8006efc <_vfiprintf_r+0x1c4>
 8006e5e:	b1b0      	cbz	r0, 8006e8e <_vfiprintf_r+0x156>
 8006e60:	9207      	str	r2, [sp, #28]
 8006e62:	e014      	b.n	8006e8e <_vfiprintf_r+0x156>
 8006e64:	eba0 0308 	sub.w	r3, r0, r8
 8006e68:	fa09 f303 	lsl.w	r3, r9, r3
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	9304      	str	r3, [sp, #16]
 8006e70:	46a2      	mov	sl, r4
 8006e72:	e7d2      	b.n	8006e1a <_vfiprintf_r+0xe2>
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	1d19      	adds	r1, r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	9103      	str	r1, [sp, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bfbb      	ittet	lt
 8006e80:	425b      	neglt	r3, r3
 8006e82:	f042 0202 	orrlt.w	r2, r2, #2
 8006e86:	9307      	strge	r3, [sp, #28]
 8006e88:	9307      	strlt	r3, [sp, #28]
 8006e8a:	bfb8      	it	lt
 8006e8c:	9204      	strlt	r2, [sp, #16]
 8006e8e:	7823      	ldrb	r3, [r4, #0]
 8006e90:	2b2e      	cmp	r3, #46	; 0x2e
 8006e92:	d10c      	bne.n	8006eae <_vfiprintf_r+0x176>
 8006e94:	7863      	ldrb	r3, [r4, #1]
 8006e96:	2b2a      	cmp	r3, #42	; 0x2a
 8006e98:	d135      	bne.n	8006f06 <_vfiprintf_r+0x1ce>
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	1d1a      	adds	r2, r3, #4
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	9203      	str	r2, [sp, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bfb8      	it	lt
 8006ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eaa:	3402      	adds	r4, #2
 8006eac:	9305      	str	r3, [sp, #20]
 8006eae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f94 <_vfiprintf_r+0x25c>
 8006eb2:	7821      	ldrb	r1, [r4, #0]
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	4650      	mov	r0, sl
 8006eb8:	f7f9 f9a2 	bl	8000200 <memchr>
 8006ebc:	b140      	cbz	r0, 8006ed0 <_vfiprintf_r+0x198>
 8006ebe:	2340      	movs	r3, #64	; 0x40
 8006ec0:	eba0 000a 	sub.w	r0, r0, sl
 8006ec4:	fa03 f000 	lsl.w	r0, r3, r0
 8006ec8:	9b04      	ldr	r3, [sp, #16]
 8006eca:	4303      	orrs	r3, r0
 8006ecc:	3401      	adds	r4, #1
 8006ece:	9304      	str	r3, [sp, #16]
 8006ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed4:	482c      	ldr	r0, [pc, #176]	; (8006f88 <_vfiprintf_r+0x250>)
 8006ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006eda:	2206      	movs	r2, #6
 8006edc:	f7f9 f990 	bl	8000200 <memchr>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d03f      	beq.n	8006f64 <_vfiprintf_r+0x22c>
 8006ee4:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <_vfiprintf_r+0x254>)
 8006ee6:	bb1b      	cbnz	r3, 8006f30 <_vfiprintf_r+0x1f8>
 8006ee8:	9b03      	ldr	r3, [sp, #12]
 8006eea:	3307      	adds	r3, #7
 8006eec:	f023 0307 	bic.w	r3, r3, #7
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	9303      	str	r3, [sp, #12]
 8006ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef6:	443b      	add	r3, r7
 8006ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8006efa:	e767      	b.n	8006dcc <_vfiprintf_r+0x94>
 8006efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f00:	460c      	mov	r4, r1
 8006f02:	2001      	movs	r0, #1
 8006f04:	e7a5      	b.n	8006e52 <_vfiprintf_r+0x11a>
 8006f06:	2300      	movs	r3, #0
 8006f08:	3401      	adds	r4, #1
 8006f0a:	9305      	str	r3, [sp, #20]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	f04f 0c0a 	mov.w	ip, #10
 8006f12:	4620      	mov	r0, r4
 8006f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f18:	3a30      	subs	r2, #48	; 0x30
 8006f1a:	2a09      	cmp	r2, #9
 8006f1c:	d903      	bls.n	8006f26 <_vfiprintf_r+0x1ee>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0c5      	beq.n	8006eae <_vfiprintf_r+0x176>
 8006f22:	9105      	str	r1, [sp, #20]
 8006f24:	e7c3      	b.n	8006eae <_vfiprintf_r+0x176>
 8006f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e7f0      	b.n	8006f12 <_vfiprintf_r+0x1da>
 8006f30:	ab03      	add	r3, sp, #12
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	462a      	mov	r2, r5
 8006f36:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <_vfiprintf_r+0x258>)
 8006f38:	a904      	add	r1, sp, #16
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f3af 8000 	nop.w
 8006f40:	4607      	mov	r7, r0
 8006f42:	1c78      	adds	r0, r7, #1
 8006f44:	d1d6      	bne.n	8006ef4 <_vfiprintf_r+0x1bc>
 8006f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f48:	07d9      	lsls	r1, r3, #31
 8006f4a:	d405      	bmi.n	8006f58 <_vfiprintf_r+0x220>
 8006f4c:	89ab      	ldrh	r3, [r5, #12]
 8006f4e:	059a      	lsls	r2, r3, #22
 8006f50:	d402      	bmi.n	8006f58 <_vfiprintf_r+0x220>
 8006f52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f54:	f000 fc45 	bl	80077e2 <__retarget_lock_release_recursive>
 8006f58:	89ab      	ldrh	r3, [r5, #12]
 8006f5a:	065b      	lsls	r3, r3, #25
 8006f5c:	f53f af12 	bmi.w	8006d84 <_vfiprintf_r+0x4c>
 8006f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f62:	e711      	b.n	8006d88 <_vfiprintf_r+0x50>
 8006f64:	ab03      	add	r3, sp, #12
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	462a      	mov	r2, r5
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <_vfiprintf_r+0x258>)
 8006f6c:	a904      	add	r1, sp, #16
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f000 f880 	bl	8007074 <_printf_i>
 8006f74:	e7e4      	b.n	8006f40 <_vfiprintf_r+0x208>
 8006f76:	bf00      	nop
 8006f78:	08009b98 	.word	0x08009b98
 8006f7c:	08009bb8 	.word	0x08009bb8
 8006f80:	08009b78 	.word	0x08009b78
 8006f84:	08009b45 	.word	0x08009b45
 8006f88:	08009b4f 	.word	0x08009b4f
 8006f8c:	00000000 	.word	0x00000000
 8006f90:	08006d13 	.word	0x08006d13
 8006f94:	08009b4b 	.word	0x08009b4b

08006f98 <_printf_common>:
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	4699      	mov	r9, r3
 8006fa0:	688a      	ldr	r2, [r1, #8]
 8006fa2:	690b      	ldr	r3, [r1, #16]
 8006fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	bfb8      	it	lt
 8006fac:	4613      	movlt	r3, r2
 8006fae:	6033      	str	r3, [r6, #0]
 8006fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	b10a      	cbz	r2, 8006fbe <_printf_common+0x26>
 8006fba:	3301      	adds	r3, #1
 8006fbc:	6033      	str	r3, [r6, #0]
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	0699      	lsls	r1, r3, #26
 8006fc2:	bf42      	ittt	mi
 8006fc4:	6833      	ldrmi	r3, [r6, #0]
 8006fc6:	3302      	addmi	r3, #2
 8006fc8:	6033      	strmi	r3, [r6, #0]
 8006fca:	6825      	ldr	r5, [r4, #0]
 8006fcc:	f015 0506 	ands.w	r5, r5, #6
 8006fd0:	d106      	bne.n	8006fe0 <_printf_common+0x48>
 8006fd2:	f104 0a19 	add.w	sl, r4, #25
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	6832      	ldr	r2, [r6, #0]
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	42ab      	cmp	r3, r5
 8006fde:	dc26      	bgt.n	800702e <_printf_common+0x96>
 8006fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fe4:	1e13      	subs	r3, r2, #0
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	bf18      	it	ne
 8006fea:	2301      	movne	r3, #1
 8006fec:	0692      	lsls	r2, r2, #26
 8006fee:	d42b      	bmi.n	8007048 <_printf_common+0xb0>
 8006ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	47c0      	blx	r8
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d01e      	beq.n	800703c <_printf_common+0xa4>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	68e5      	ldr	r5, [r4, #12]
 8007002:	6832      	ldr	r2, [r6, #0]
 8007004:	f003 0306 	and.w	r3, r3, #6
 8007008:	2b04      	cmp	r3, #4
 800700a:	bf08      	it	eq
 800700c:	1aad      	subeq	r5, r5, r2
 800700e:	68a3      	ldr	r3, [r4, #8]
 8007010:	6922      	ldr	r2, [r4, #16]
 8007012:	bf0c      	ite	eq
 8007014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007018:	2500      	movne	r5, #0
 800701a:	4293      	cmp	r3, r2
 800701c:	bfc4      	itt	gt
 800701e:	1a9b      	subgt	r3, r3, r2
 8007020:	18ed      	addgt	r5, r5, r3
 8007022:	2600      	movs	r6, #0
 8007024:	341a      	adds	r4, #26
 8007026:	42b5      	cmp	r5, r6
 8007028:	d11a      	bne.n	8007060 <_printf_common+0xc8>
 800702a:	2000      	movs	r0, #0
 800702c:	e008      	b.n	8007040 <_printf_common+0xa8>
 800702e:	2301      	movs	r3, #1
 8007030:	4652      	mov	r2, sl
 8007032:	4649      	mov	r1, r9
 8007034:	4638      	mov	r0, r7
 8007036:	47c0      	blx	r8
 8007038:	3001      	adds	r0, #1
 800703a:	d103      	bne.n	8007044 <_printf_common+0xac>
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007044:	3501      	adds	r5, #1
 8007046:	e7c6      	b.n	8006fd6 <_printf_common+0x3e>
 8007048:	18e1      	adds	r1, r4, r3
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	2030      	movs	r0, #48	; 0x30
 800704e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007052:	4422      	add	r2, r4
 8007054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800705c:	3302      	adds	r3, #2
 800705e:	e7c7      	b.n	8006ff0 <_printf_common+0x58>
 8007060:	2301      	movs	r3, #1
 8007062:	4622      	mov	r2, r4
 8007064:	4649      	mov	r1, r9
 8007066:	4638      	mov	r0, r7
 8007068:	47c0      	blx	r8
 800706a:	3001      	adds	r0, #1
 800706c:	d0e6      	beq.n	800703c <_printf_common+0xa4>
 800706e:	3601      	adds	r6, #1
 8007070:	e7d9      	b.n	8007026 <_printf_common+0x8e>
	...

08007074 <_printf_i>:
 8007074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	7e0f      	ldrb	r7, [r1, #24]
 800707a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800707c:	2f78      	cmp	r7, #120	; 0x78
 800707e:	4691      	mov	r9, r2
 8007080:	4680      	mov	r8, r0
 8007082:	460c      	mov	r4, r1
 8007084:	469a      	mov	sl, r3
 8007086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800708a:	d807      	bhi.n	800709c <_printf_i+0x28>
 800708c:	2f62      	cmp	r7, #98	; 0x62
 800708e:	d80a      	bhi.n	80070a6 <_printf_i+0x32>
 8007090:	2f00      	cmp	r7, #0
 8007092:	f000 80d8 	beq.w	8007246 <_printf_i+0x1d2>
 8007096:	2f58      	cmp	r7, #88	; 0x58
 8007098:	f000 80a3 	beq.w	80071e2 <_printf_i+0x16e>
 800709c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070a4:	e03a      	b.n	800711c <_printf_i+0xa8>
 80070a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070aa:	2b15      	cmp	r3, #21
 80070ac:	d8f6      	bhi.n	800709c <_printf_i+0x28>
 80070ae:	a101      	add	r1, pc, #4	; (adr r1, 80070b4 <_printf_i+0x40>)
 80070b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070b4:	0800710d 	.word	0x0800710d
 80070b8:	08007121 	.word	0x08007121
 80070bc:	0800709d 	.word	0x0800709d
 80070c0:	0800709d 	.word	0x0800709d
 80070c4:	0800709d 	.word	0x0800709d
 80070c8:	0800709d 	.word	0x0800709d
 80070cc:	08007121 	.word	0x08007121
 80070d0:	0800709d 	.word	0x0800709d
 80070d4:	0800709d 	.word	0x0800709d
 80070d8:	0800709d 	.word	0x0800709d
 80070dc:	0800709d 	.word	0x0800709d
 80070e0:	0800722d 	.word	0x0800722d
 80070e4:	08007151 	.word	0x08007151
 80070e8:	0800720f 	.word	0x0800720f
 80070ec:	0800709d 	.word	0x0800709d
 80070f0:	0800709d 	.word	0x0800709d
 80070f4:	0800724f 	.word	0x0800724f
 80070f8:	0800709d 	.word	0x0800709d
 80070fc:	08007151 	.word	0x08007151
 8007100:	0800709d 	.word	0x0800709d
 8007104:	0800709d 	.word	0x0800709d
 8007108:	08007217 	.word	0x08007217
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	602a      	str	r2, [r5, #0]
 8007114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800711c:	2301      	movs	r3, #1
 800711e:	e0a3      	b.n	8007268 <_printf_i+0x1f4>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	6829      	ldr	r1, [r5, #0]
 8007124:	0606      	lsls	r6, r0, #24
 8007126:	f101 0304 	add.w	r3, r1, #4
 800712a:	d50a      	bpl.n	8007142 <_printf_i+0xce>
 800712c:	680e      	ldr	r6, [r1, #0]
 800712e:	602b      	str	r3, [r5, #0]
 8007130:	2e00      	cmp	r6, #0
 8007132:	da03      	bge.n	800713c <_printf_i+0xc8>
 8007134:	232d      	movs	r3, #45	; 0x2d
 8007136:	4276      	negs	r6, r6
 8007138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800713c:	485e      	ldr	r0, [pc, #376]	; (80072b8 <_printf_i+0x244>)
 800713e:	230a      	movs	r3, #10
 8007140:	e019      	b.n	8007176 <_printf_i+0x102>
 8007142:	680e      	ldr	r6, [r1, #0]
 8007144:	602b      	str	r3, [r5, #0]
 8007146:	f010 0f40 	tst.w	r0, #64	; 0x40
 800714a:	bf18      	it	ne
 800714c:	b236      	sxthne	r6, r6
 800714e:	e7ef      	b.n	8007130 <_printf_i+0xbc>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	6820      	ldr	r0, [r4, #0]
 8007154:	1d19      	adds	r1, r3, #4
 8007156:	6029      	str	r1, [r5, #0]
 8007158:	0601      	lsls	r1, r0, #24
 800715a:	d501      	bpl.n	8007160 <_printf_i+0xec>
 800715c:	681e      	ldr	r6, [r3, #0]
 800715e:	e002      	b.n	8007166 <_printf_i+0xf2>
 8007160:	0646      	lsls	r6, r0, #25
 8007162:	d5fb      	bpl.n	800715c <_printf_i+0xe8>
 8007164:	881e      	ldrh	r6, [r3, #0]
 8007166:	4854      	ldr	r0, [pc, #336]	; (80072b8 <_printf_i+0x244>)
 8007168:	2f6f      	cmp	r7, #111	; 0x6f
 800716a:	bf0c      	ite	eq
 800716c:	2308      	moveq	r3, #8
 800716e:	230a      	movne	r3, #10
 8007170:	2100      	movs	r1, #0
 8007172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007176:	6865      	ldr	r5, [r4, #4]
 8007178:	60a5      	str	r5, [r4, #8]
 800717a:	2d00      	cmp	r5, #0
 800717c:	bfa2      	ittt	ge
 800717e:	6821      	ldrge	r1, [r4, #0]
 8007180:	f021 0104 	bicge.w	r1, r1, #4
 8007184:	6021      	strge	r1, [r4, #0]
 8007186:	b90e      	cbnz	r6, 800718c <_printf_i+0x118>
 8007188:	2d00      	cmp	r5, #0
 800718a:	d04d      	beq.n	8007228 <_printf_i+0x1b4>
 800718c:	4615      	mov	r5, r2
 800718e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007192:	fb03 6711 	mls	r7, r3, r1, r6
 8007196:	5dc7      	ldrb	r7, [r0, r7]
 8007198:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800719c:	4637      	mov	r7, r6
 800719e:	42bb      	cmp	r3, r7
 80071a0:	460e      	mov	r6, r1
 80071a2:	d9f4      	bls.n	800718e <_printf_i+0x11a>
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d10b      	bne.n	80071c0 <_printf_i+0x14c>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	07de      	lsls	r6, r3, #31
 80071ac:	d508      	bpl.n	80071c0 <_printf_i+0x14c>
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	6861      	ldr	r1, [r4, #4]
 80071b2:	4299      	cmp	r1, r3
 80071b4:	bfde      	ittt	le
 80071b6:	2330      	movle	r3, #48	; 0x30
 80071b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071c0:	1b52      	subs	r2, r2, r5
 80071c2:	6122      	str	r2, [r4, #16]
 80071c4:	f8cd a000 	str.w	sl, [sp]
 80071c8:	464b      	mov	r3, r9
 80071ca:	aa03      	add	r2, sp, #12
 80071cc:	4621      	mov	r1, r4
 80071ce:	4640      	mov	r0, r8
 80071d0:	f7ff fee2 	bl	8006f98 <_printf_common>
 80071d4:	3001      	adds	r0, #1
 80071d6:	d14c      	bne.n	8007272 <_printf_i+0x1fe>
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	b004      	add	sp, #16
 80071de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e2:	4835      	ldr	r0, [pc, #212]	; (80072b8 <_printf_i+0x244>)
 80071e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071e8:	6829      	ldr	r1, [r5, #0]
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80071f0:	6029      	str	r1, [r5, #0]
 80071f2:	061d      	lsls	r5, r3, #24
 80071f4:	d514      	bpl.n	8007220 <_printf_i+0x1ac>
 80071f6:	07df      	lsls	r7, r3, #31
 80071f8:	bf44      	itt	mi
 80071fa:	f043 0320 	orrmi.w	r3, r3, #32
 80071fe:	6023      	strmi	r3, [r4, #0]
 8007200:	b91e      	cbnz	r6, 800720a <_printf_i+0x196>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	f023 0320 	bic.w	r3, r3, #32
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	2310      	movs	r3, #16
 800720c:	e7b0      	b.n	8007170 <_printf_i+0xfc>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	f043 0320 	orr.w	r3, r3, #32
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	2378      	movs	r3, #120	; 0x78
 8007218:	4828      	ldr	r0, [pc, #160]	; (80072bc <_printf_i+0x248>)
 800721a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800721e:	e7e3      	b.n	80071e8 <_printf_i+0x174>
 8007220:	0659      	lsls	r1, r3, #25
 8007222:	bf48      	it	mi
 8007224:	b2b6      	uxthmi	r6, r6
 8007226:	e7e6      	b.n	80071f6 <_printf_i+0x182>
 8007228:	4615      	mov	r5, r2
 800722a:	e7bb      	b.n	80071a4 <_printf_i+0x130>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	6826      	ldr	r6, [r4, #0]
 8007230:	6961      	ldr	r1, [r4, #20]
 8007232:	1d18      	adds	r0, r3, #4
 8007234:	6028      	str	r0, [r5, #0]
 8007236:	0635      	lsls	r5, r6, #24
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	d501      	bpl.n	8007240 <_printf_i+0x1cc>
 800723c:	6019      	str	r1, [r3, #0]
 800723e:	e002      	b.n	8007246 <_printf_i+0x1d2>
 8007240:	0670      	lsls	r0, r6, #25
 8007242:	d5fb      	bpl.n	800723c <_printf_i+0x1c8>
 8007244:	8019      	strh	r1, [r3, #0]
 8007246:	2300      	movs	r3, #0
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	4615      	mov	r5, r2
 800724c:	e7ba      	b.n	80071c4 <_printf_i+0x150>
 800724e:	682b      	ldr	r3, [r5, #0]
 8007250:	1d1a      	adds	r2, r3, #4
 8007252:	602a      	str	r2, [r5, #0]
 8007254:	681d      	ldr	r5, [r3, #0]
 8007256:	6862      	ldr	r2, [r4, #4]
 8007258:	2100      	movs	r1, #0
 800725a:	4628      	mov	r0, r5
 800725c:	f7f8 ffd0 	bl	8000200 <memchr>
 8007260:	b108      	cbz	r0, 8007266 <_printf_i+0x1f2>
 8007262:	1b40      	subs	r0, r0, r5
 8007264:	6060      	str	r0, [r4, #4]
 8007266:	6863      	ldr	r3, [r4, #4]
 8007268:	6123      	str	r3, [r4, #16]
 800726a:	2300      	movs	r3, #0
 800726c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007270:	e7a8      	b.n	80071c4 <_printf_i+0x150>
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	462a      	mov	r2, r5
 8007276:	4649      	mov	r1, r9
 8007278:	4640      	mov	r0, r8
 800727a:	47d0      	blx	sl
 800727c:	3001      	adds	r0, #1
 800727e:	d0ab      	beq.n	80071d8 <_printf_i+0x164>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	079b      	lsls	r3, r3, #30
 8007284:	d413      	bmi.n	80072ae <_printf_i+0x23a>
 8007286:	68e0      	ldr	r0, [r4, #12]
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	4298      	cmp	r0, r3
 800728c:	bfb8      	it	lt
 800728e:	4618      	movlt	r0, r3
 8007290:	e7a4      	b.n	80071dc <_printf_i+0x168>
 8007292:	2301      	movs	r3, #1
 8007294:	4632      	mov	r2, r6
 8007296:	4649      	mov	r1, r9
 8007298:	4640      	mov	r0, r8
 800729a:	47d0      	blx	sl
 800729c:	3001      	adds	r0, #1
 800729e:	d09b      	beq.n	80071d8 <_printf_i+0x164>
 80072a0:	3501      	adds	r5, #1
 80072a2:	68e3      	ldr	r3, [r4, #12]
 80072a4:	9903      	ldr	r1, [sp, #12]
 80072a6:	1a5b      	subs	r3, r3, r1
 80072a8:	42ab      	cmp	r3, r5
 80072aa:	dcf2      	bgt.n	8007292 <_printf_i+0x21e>
 80072ac:	e7eb      	b.n	8007286 <_printf_i+0x212>
 80072ae:	2500      	movs	r5, #0
 80072b0:	f104 0619 	add.w	r6, r4, #25
 80072b4:	e7f5      	b.n	80072a2 <_printf_i+0x22e>
 80072b6:	bf00      	nop
 80072b8:	08009b56 	.word	0x08009b56
 80072bc:	08009b67 	.word	0x08009b67

080072c0 <_sbrk_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4d06      	ldr	r5, [pc, #24]	; (80072dc <_sbrk_r+0x1c>)
 80072c4:	2300      	movs	r3, #0
 80072c6:	4604      	mov	r4, r0
 80072c8:	4608      	mov	r0, r1
 80072ca:	602b      	str	r3, [r5, #0]
 80072cc:	f7fc f97c 	bl	80035c8 <_sbrk>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_sbrk_r+0x1a>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_sbrk_r+0x1a>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	20000730 	.word	0x20000730

080072e0 <__swbuf_r>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	460e      	mov	r6, r1
 80072e4:	4614      	mov	r4, r2
 80072e6:	4605      	mov	r5, r0
 80072e8:	b118      	cbz	r0, 80072f2 <__swbuf_r+0x12>
 80072ea:	6983      	ldr	r3, [r0, #24]
 80072ec:	b90b      	cbnz	r3, 80072f2 <__swbuf_r+0x12>
 80072ee:	f000 f9d9 	bl	80076a4 <__sinit>
 80072f2:	4b21      	ldr	r3, [pc, #132]	; (8007378 <__swbuf_r+0x98>)
 80072f4:	429c      	cmp	r4, r3
 80072f6:	d12b      	bne.n	8007350 <__swbuf_r+0x70>
 80072f8:	686c      	ldr	r4, [r5, #4]
 80072fa:	69a3      	ldr	r3, [r4, #24]
 80072fc:	60a3      	str	r3, [r4, #8]
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	071a      	lsls	r2, r3, #28
 8007302:	d52f      	bpl.n	8007364 <__swbuf_r+0x84>
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	b36b      	cbz	r3, 8007364 <__swbuf_r+0x84>
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	6820      	ldr	r0, [r4, #0]
 800730c:	1ac0      	subs	r0, r0, r3
 800730e:	6963      	ldr	r3, [r4, #20]
 8007310:	b2f6      	uxtb	r6, r6
 8007312:	4283      	cmp	r3, r0
 8007314:	4637      	mov	r7, r6
 8007316:	dc04      	bgt.n	8007322 <__swbuf_r+0x42>
 8007318:	4621      	mov	r1, r4
 800731a:	4628      	mov	r0, r5
 800731c:	f000 f92e 	bl	800757c <_fflush_r>
 8007320:	bb30      	cbnz	r0, 8007370 <__swbuf_r+0x90>
 8007322:	68a3      	ldr	r3, [r4, #8]
 8007324:	3b01      	subs	r3, #1
 8007326:	60a3      	str	r3, [r4, #8]
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	6022      	str	r2, [r4, #0]
 800732e:	701e      	strb	r6, [r3, #0]
 8007330:	6963      	ldr	r3, [r4, #20]
 8007332:	3001      	adds	r0, #1
 8007334:	4283      	cmp	r3, r0
 8007336:	d004      	beq.n	8007342 <__swbuf_r+0x62>
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	07db      	lsls	r3, r3, #31
 800733c:	d506      	bpl.n	800734c <__swbuf_r+0x6c>
 800733e:	2e0a      	cmp	r6, #10
 8007340:	d104      	bne.n	800734c <__swbuf_r+0x6c>
 8007342:	4621      	mov	r1, r4
 8007344:	4628      	mov	r0, r5
 8007346:	f000 f919 	bl	800757c <_fflush_r>
 800734a:	b988      	cbnz	r0, 8007370 <__swbuf_r+0x90>
 800734c:	4638      	mov	r0, r7
 800734e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <__swbuf_r+0x9c>)
 8007352:	429c      	cmp	r4, r3
 8007354:	d101      	bne.n	800735a <__swbuf_r+0x7a>
 8007356:	68ac      	ldr	r4, [r5, #8]
 8007358:	e7cf      	b.n	80072fa <__swbuf_r+0x1a>
 800735a:	4b09      	ldr	r3, [pc, #36]	; (8007380 <__swbuf_r+0xa0>)
 800735c:	429c      	cmp	r4, r3
 800735e:	bf08      	it	eq
 8007360:	68ec      	ldreq	r4, [r5, #12]
 8007362:	e7ca      	b.n	80072fa <__swbuf_r+0x1a>
 8007364:	4621      	mov	r1, r4
 8007366:	4628      	mov	r0, r5
 8007368:	f000 f80c 	bl	8007384 <__swsetup_r>
 800736c:	2800      	cmp	r0, #0
 800736e:	d0cb      	beq.n	8007308 <__swbuf_r+0x28>
 8007370:	f04f 37ff 	mov.w	r7, #4294967295
 8007374:	e7ea      	b.n	800734c <__swbuf_r+0x6c>
 8007376:	bf00      	nop
 8007378:	08009b98 	.word	0x08009b98
 800737c:	08009bb8 	.word	0x08009bb8
 8007380:	08009b78 	.word	0x08009b78

08007384 <__swsetup_r>:
 8007384:	4b32      	ldr	r3, [pc, #200]	; (8007450 <__swsetup_r+0xcc>)
 8007386:	b570      	push	{r4, r5, r6, lr}
 8007388:	681d      	ldr	r5, [r3, #0]
 800738a:	4606      	mov	r6, r0
 800738c:	460c      	mov	r4, r1
 800738e:	b125      	cbz	r5, 800739a <__swsetup_r+0x16>
 8007390:	69ab      	ldr	r3, [r5, #24]
 8007392:	b913      	cbnz	r3, 800739a <__swsetup_r+0x16>
 8007394:	4628      	mov	r0, r5
 8007396:	f000 f985 	bl	80076a4 <__sinit>
 800739a:	4b2e      	ldr	r3, [pc, #184]	; (8007454 <__swsetup_r+0xd0>)
 800739c:	429c      	cmp	r4, r3
 800739e:	d10f      	bne.n	80073c0 <__swsetup_r+0x3c>
 80073a0:	686c      	ldr	r4, [r5, #4]
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073a8:	0719      	lsls	r1, r3, #28
 80073aa:	d42c      	bmi.n	8007406 <__swsetup_r+0x82>
 80073ac:	06dd      	lsls	r5, r3, #27
 80073ae:	d411      	bmi.n	80073d4 <__swsetup_r+0x50>
 80073b0:	2309      	movs	r3, #9
 80073b2:	6033      	str	r3, [r6, #0]
 80073b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	f04f 30ff 	mov.w	r0, #4294967295
 80073be:	e03e      	b.n	800743e <__swsetup_r+0xba>
 80073c0:	4b25      	ldr	r3, [pc, #148]	; (8007458 <__swsetup_r+0xd4>)
 80073c2:	429c      	cmp	r4, r3
 80073c4:	d101      	bne.n	80073ca <__swsetup_r+0x46>
 80073c6:	68ac      	ldr	r4, [r5, #8]
 80073c8:	e7eb      	b.n	80073a2 <__swsetup_r+0x1e>
 80073ca:	4b24      	ldr	r3, [pc, #144]	; (800745c <__swsetup_r+0xd8>)
 80073cc:	429c      	cmp	r4, r3
 80073ce:	bf08      	it	eq
 80073d0:	68ec      	ldreq	r4, [r5, #12]
 80073d2:	e7e6      	b.n	80073a2 <__swsetup_r+0x1e>
 80073d4:	0758      	lsls	r0, r3, #29
 80073d6:	d512      	bpl.n	80073fe <__swsetup_r+0x7a>
 80073d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073da:	b141      	cbz	r1, 80073ee <__swsetup_r+0x6a>
 80073dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073e0:	4299      	cmp	r1, r3
 80073e2:	d002      	beq.n	80073ea <__swsetup_r+0x66>
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7ff fb9d 	bl	8006b24 <_free_r>
 80073ea:	2300      	movs	r3, #0
 80073ec:	6363      	str	r3, [r4, #52]	; 0x34
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	2300      	movs	r3, #0
 80073f8:	6063      	str	r3, [r4, #4]
 80073fa:	6923      	ldr	r3, [r4, #16]
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	f043 0308 	orr.w	r3, r3, #8
 8007404:	81a3      	strh	r3, [r4, #12]
 8007406:	6923      	ldr	r3, [r4, #16]
 8007408:	b94b      	cbnz	r3, 800741e <__swsetup_r+0x9a>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007414:	d003      	beq.n	800741e <__swsetup_r+0x9a>
 8007416:	4621      	mov	r1, r4
 8007418:	4630      	mov	r0, r6
 800741a:	f000 fa09 	bl	8007830 <__smakebuf_r>
 800741e:	89a0      	ldrh	r0, [r4, #12]
 8007420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007424:	f010 0301 	ands.w	r3, r0, #1
 8007428:	d00a      	beq.n	8007440 <__swsetup_r+0xbc>
 800742a:	2300      	movs	r3, #0
 800742c:	60a3      	str	r3, [r4, #8]
 800742e:	6963      	ldr	r3, [r4, #20]
 8007430:	425b      	negs	r3, r3
 8007432:	61a3      	str	r3, [r4, #24]
 8007434:	6923      	ldr	r3, [r4, #16]
 8007436:	b943      	cbnz	r3, 800744a <__swsetup_r+0xc6>
 8007438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800743c:	d1ba      	bne.n	80073b4 <__swsetup_r+0x30>
 800743e:	bd70      	pop	{r4, r5, r6, pc}
 8007440:	0781      	lsls	r1, r0, #30
 8007442:	bf58      	it	pl
 8007444:	6963      	ldrpl	r3, [r4, #20]
 8007446:	60a3      	str	r3, [r4, #8]
 8007448:	e7f4      	b.n	8007434 <__swsetup_r+0xb0>
 800744a:	2000      	movs	r0, #0
 800744c:	e7f7      	b.n	800743e <__swsetup_r+0xba>
 800744e:	bf00      	nop
 8007450:	2000000c 	.word	0x2000000c
 8007454:	08009b98 	.word	0x08009b98
 8007458:	08009bb8 	.word	0x08009bb8
 800745c:	08009b78 	.word	0x08009b78

08007460 <abort>:
 8007460:	b508      	push	{r3, lr}
 8007462:	2006      	movs	r0, #6
 8007464:	f000 fa58 	bl	8007918 <raise>
 8007468:	2001      	movs	r0, #1
 800746a:	f7fc f835 	bl	80034d8 <_exit>
	...

08007470 <__sflush_r>:
 8007470:	898a      	ldrh	r2, [r1, #12]
 8007472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007476:	4605      	mov	r5, r0
 8007478:	0710      	lsls	r0, r2, #28
 800747a:	460c      	mov	r4, r1
 800747c:	d458      	bmi.n	8007530 <__sflush_r+0xc0>
 800747e:	684b      	ldr	r3, [r1, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	dc05      	bgt.n	8007490 <__sflush_r+0x20>
 8007484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	dc02      	bgt.n	8007490 <__sflush_r+0x20>
 800748a:	2000      	movs	r0, #0
 800748c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007492:	2e00      	cmp	r6, #0
 8007494:	d0f9      	beq.n	800748a <__sflush_r+0x1a>
 8007496:	2300      	movs	r3, #0
 8007498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800749c:	682f      	ldr	r7, [r5, #0]
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	d032      	beq.n	8007508 <__sflush_r+0x98>
 80074a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	075a      	lsls	r2, r3, #29
 80074a8:	d505      	bpl.n	80074b6 <__sflush_r+0x46>
 80074aa:	6863      	ldr	r3, [r4, #4]
 80074ac:	1ac0      	subs	r0, r0, r3
 80074ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074b0:	b10b      	cbz	r3, 80074b6 <__sflush_r+0x46>
 80074b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074b4:	1ac0      	subs	r0, r0, r3
 80074b6:	2300      	movs	r3, #0
 80074b8:	4602      	mov	r2, r0
 80074ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074bc:	6a21      	ldr	r1, [r4, #32]
 80074be:	4628      	mov	r0, r5
 80074c0:	47b0      	blx	r6
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	d106      	bne.n	80074d6 <__sflush_r+0x66>
 80074c8:	6829      	ldr	r1, [r5, #0]
 80074ca:	291d      	cmp	r1, #29
 80074cc:	d82c      	bhi.n	8007528 <__sflush_r+0xb8>
 80074ce:	4a2a      	ldr	r2, [pc, #168]	; (8007578 <__sflush_r+0x108>)
 80074d0:	40ca      	lsrs	r2, r1
 80074d2:	07d6      	lsls	r6, r2, #31
 80074d4:	d528      	bpl.n	8007528 <__sflush_r+0xb8>
 80074d6:	2200      	movs	r2, #0
 80074d8:	6062      	str	r2, [r4, #4]
 80074da:	04d9      	lsls	r1, r3, #19
 80074dc:	6922      	ldr	r2, [r4, #16]
 80074de:	6022      	str	r2, [r4, #0]
 80074e0:	d504      	bpl.n	80074ec <__sflush_r+0x7c>
 80074e2:	1c42      	adds	r2, r0, #1
 80074e4:	d101      	bne.n	80074ea <__sflush_r+0x7a>
 80074e6:	682b      	ldr	r3, [r5, #0]
 80074e8:	b903      	cbnz	r3, 80074ec <__sflush_r+0x7c>
 80074ea:	6560      	str	r0, [r4, #84]	; 0x54
 80074ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074ee:	602f      	str	r7, [r5, #0]
 80074f0:	2900      	cmp	r1, #0
 80074f2:	d0ca      	beq.n	800748a <__sflush_r+0x1a>
 80074f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074f8:	4299      	cmp	r1, r3
 80074fa:	d002      	beq.n	8007502 <__sflush_r+0x92>
 80074fc:	4628      	mov	r0, r5
 80074fe:	f7ff fb11 	bl	8006b24 <_free_r>
 8007502:	2000      	movs	r0, #0
 8007504:	6360      	str	r0, [r4, #52]	; 0x34
 8007506:	e7c1      	b.n	800748c <__sflush_r+0x1c>
 8007508:	6a21      	ldr	r1, [r4, #32]
 800750a:	2301      	movs	r3, #1
 800750c:	4628      	mov	r0, r5
 800750e:	47b0      	blx	r6
 8007510:	1c41      	adds	r1, r0, #1
 8007512:	d1c7      	bne.n	80074a4 <__sflush_r+0x34>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0c4      	beq.n	80074a4 <__sflush_r+0x34>
 800751a:	2b1d      	cmp	r3, #29
 800751c:	d001      	beq.n	8007522 <__sflush_r+0xb2>
 800751e:	2b16      	cmp	r3, #22
 8007520:	d101      	bne.n	8007526 <__sflush_r+0xb6>
 8007522:	602f      	str	r7, [r5, #0]
 8007524:	e7b1      	b.n	800748a <__sflush_r+0x1a>
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800752c:	81a3      	strh	r3, [r4, #12]
 800752e:	e7ad      	b.n	800748c <__sflush_r+0x1c>
 8007530:	690f      	ldr	r7, [r1, #16]
 8007532:	2f00      	cmp	r7, #0
 8007534:	d0a9      	beq.n	800748a <__sflush_r+0x1a>
 8007536:	0793      	lsls	r3, r2, #30
 8007538:	680e      	ldr	r6, [r1, #0]
 800753a:	bf08      	it	eq
 800753c:	694b      	ldreq	r3, [r1, #20]
 800753e:	600f      	str	r7, [r1, #0]
 8007540:	bf18      	it	ne
 8007542:	2300      	movne	r3, #0
 8007544:	eba6 0807 	sub.w	r8, r6, r7
 8007548:	608b      	str	r3, [r1, #8]
 800754a:	f1b8 0f00 	cmp.w	r8, #0
 800754e:	dd9c      	ble.n	800748a <__sflush_r+0x1a>
 8007550:	6a21      	ldr	r1, [r4, #32]
 8007552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007554:	4643      	mov	r3, r8
 8007556:	463a      	mov	r2, r7
 8007558:	4628      	mov	r0, r5
 800755a:	47b0      	blx	r6
 800755c:	2800      	cmp	r0, #0
 800755e:	dc06      	bgt.n	800756e <__sflush_r+0xfe>
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	e78e      	b.n	800748c <__sflush_r+0x1c>
 800756e:	4407      	add	r7, r0
 8007570:	eba8 0800 	sub.w	r8, r8, r0
 8007574:	e7e9      	b.n	800754a <__sflush_r+0xda>
 8007576:	bf00      	nop
 8007578:	20400001 	.word	0x20400001

0800757c <_fflush_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	690b      	ldr	r3, [r1, #16]
 8007580:	4605      	mov	r5, r0
 8007582:	460c      	mov	r4, r1
 8007584:	b913      	cbnz	r3, 800758c <_fflush_r+0x10>
 8007586:	2500      	movs	r5, #0
 8007588:	4628      	mov	r0, r5
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	b118      	cbz	r0, 8007596 <_fflush_r+0x1a>
 800758e:	6983      	ldr	r3, [r0, #24]
 8007590:	b90b      	cbnz	r3, 8007596 <_fflush_r+0x1a>
 8007592:	f000 f887 	bl	80076a4 <__sinit>
 8007596:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <_fflush_r+0x6c>)
 8007598:	429c      	cmp	r4, r3
 800759a:	d11b      	bne.n	80075d4 <_fflush_r+0x58>
 800759c:	686c      	ldr	r4, [r5, #4]
 800759e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0ef      	beq.n	8007586 <_fflush_r+0xa>
 80075a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075a8:	07d0      	lsls	r0, r2, #31
 80075aa:	d404      	bmi.n	80075b6 <_fflush_r+0x3a>
 80075ac:	0599      	lsls	r1, r3, #22
 80075ae:	d402      	bmi.n	80075b6 <_fflush_r+0x3a>
 80075b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075b2:	f000 f915 	bl	80077e0 <__retarget_lock_acquire_recursive>
 80075b6:	4628      	mov	r0, r5
 80075b8:	4621      	mov	r1, r4
 80075ba:	f7ff ff59 	bl	8007470 <__sflush_r>
 80075be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075c0:	07da      	lsls	r2, r3, #31
 80075c2:	4605      	mov	r5, r0
 80075c4:	d4e0      	bmi.n	8007588 <_fflush_r+0xc>
 80075c6:	89a3      	ldrh	r3, [r4, #12]
 80075c8:	059b      	lsls	r3, r3, #22
 80075ca:	d4dd      	bmi.n	8007588 <_fflush_r+0xc>
 80075cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ce:	f000 f908 	bl	80077e2 <__retarget_lock_release_recursive>
 80075d2:	e7d9      	b.n	8007588 <_fflush_r+0xc>
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <_fflush_r+0x70>)
 80075d6:	429c      	cmp	r4, r3
 80075d8:	d101      	bne.n	80075de <_fflush_r+0x62>
 80075da:	68ac      	ldr	r4, [r5, #8]
 80075dc:	e7df      	b.n	800759e <_fflush_r+0x22>
 80075de:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <_fflush_r+0x74>)
 80075e0:	429c      	cmp	r4, r3
 80075e2:	bf08      	it	eq
 80075e4:	68ec      	ldreq	r4, [r5, #12]
 80075e6:	e7da      	b.n	800759e <_fflush_r+0x22>
 80075e8:	08009b98 	.word	0x08009b98
 80075ec:	08009bb8 	.word	0x08009bb8
 80075f0:	08009b78 	.word	0x08009b78

080075f4 <std>:
 80075f4:	2300      	movs	r3, #0
 80075f6:	b510      	push	{r4, lr}
 80075f8:	4604      	mov	r4, r0
 80075fa:	e9c0 3300 	strd	r3, r3, [r0]
 80075fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007602:	6083      	str	r3, [r0, #8]
 8007604:	8181      	strh	r1, [r0, #12]
 8007606:	6643      	str	r3, [r0, #100]	; 0x64
 8007608:	81c2      	strh	r2, [r0, #14]
 800760a:	6183      	str	r3, [r0, #24]
 800760c:	4619      	mov	r1, r3
 800760e:	2208      	movs	r2, #8
 8007610:	305c      	adds	r0, #92	; 0x5c
 8007612:	f7ff f8ad 	bl	8006770 <memset>
 8007616:	4b05      	ldr	r3, [pc, #20]	; (800762c <std+0x38>)
 8007618:	6263      	str	r3, [r4, #36]	; 0x24
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <std+0x3c>)
 800761c:	62a3      	str	r3, [r4, #40]	; 0x28
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <std+0x40>)
 8007620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007622:	4b05      	ldr	r3, [pc, #20]	; (8007638 <std+0x44>)
 8007624:	6224      	str	r4, [r4, #32]
 8007626:	6323      	str	r3, [r4, #48]	; 0x30
 8007628:	bd10      	pop	{r4, pc}
 800762a:	bf00      	nop
 800762c:	08007951 	.word	0x08007951
 8007630:	08007973 	.word	0x08007973
 8007634:	080079ab 	.word	0x080079ab
 8007638:	080079cf 	.word	0x080079cf

0800763c <_cleanup_r>:
 800763c:	4901      	ldr	r1, [pc, #4]	; (8007644 <_cleanup_r+0x8>)
 800763e:	f000 b8af 	b.w	80077a0 <_fwalk_reent>
 8007642:	bf00      	nop
 8007644:	0800757d 	.word	0x0800757d

08007648 <__sfmoreglue>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	2268      	movs	r2, #104	; 0x68
 800764c:	1e4d      	subs	r5, r1, #1
 800764e:	4355      	muls	r5, r2
 8007650:	460e      	mov	r6, r1
 8007652:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007656:	f7ff fad1 	bl	8006bfc <_malloc_r>
 800765a:	4604      	mov	r4, r0
 800765c:	b140      	cbz	r0, 8007670 <__sfmoreglue+0x28>
 800765e:	2100      	movs	r1, #0
 8007660:	e9c0 1600 	strd	r1, r6, [r0]
 8007664:	300c      	adds	r0, #12
 8007666:	60a0      	str	r0, [r4, #8]
 8007668:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800766c:	f7ff f880 	bl	8006770 <memset>
 8007670:	4620      	mov	r0, r4
 8007672:	bd70      	pop	{r4, r5, r6, pc}

08007674 <__sfp_lock_acquire>:
 8007674:	4801      	ldr	r0, [pc, #4]	; (800767c <__sfp_lock_acquire+0x8>)
 8007676:	f000 b8b3 	b.w	80077e0 <__retarget_lock_acquire_recursive>
 800767a:	bf00      	nop
 800767c:	2000072d 	.word	0x2000072d

08007680 <__sfp_lock_release>:
 8007680:	4801      	ldr	r0, [pc, #4]	; (8007688 <__sfp_lock_release+0x8>)
 8007682:	f000 b8ae 	b.w	80077e2 <__retarget_lock_release_recursive>
 8007686:	bf00      	nop
 8007688:	2000072d 	.word	0x2000072d

0800768c <__sinit_lock_acquire>:
 800768c:	4801      	ldr	r0, [pc, #4]	; (8007694 <__sinit_lock_acquire+0x8>)
 800768e:	f000 b8a7 	b.w	80077e0 <__retarget_lock_acquire_recursive>
 8007692:	bf00      	nop
 8007694:	2000072e 	.word	0x2000072e

08007698 <__sinit_lock_release>:
 8007698:	4801      	ldr	r0, [pc, #4]	; (80076a0 <__sinit_lock_release+0x8>)
 800769a:	f000 b8a2 	b.w	80077e2 <__retarget_lock_release_recursive>
 800769e:	bf00      	nop
 80076a0:	2000072e 	.word	0x2000072e

080076a4 <__sinit>:
 80076a4:	b510      	push	{r4, lr}
 80076a6:	4604      	mov	r4, r0
 80076a8:	f7ff fff0 	bl	800768c <__sinit_lock_acquire>
 80076ac:	69a3      	ldr	r3, [r4, #24]
 80076ae:	b11b      	cbz	r3, 80076b8 <__sinit+0x14>
 80076b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076b4:	f7ff bff0 	b.w	8007698 <__sinit_lock_release>
 80076b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076bc:	6523      	str	r3, [r4, #80]	; 0x50
 80076be:	4b13      	ldr	r3, [pc, #76]	; (800770c <__sinit+0x68>)
 80076c0:	4a13      	ldr	r2, [pc, #76]	; (8007710 <__sinit+0x6c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	bf04      	itt	eq
 80076ca:	2301      	moveq	r3, #1
 80076cc:	61a3      	streq	r3, [r4, #24]
 80076ce:	4620      	mov	r0, r4
 80076d0:	f000 f820 	bl	8007714 <__sfp>
 80076d4:	6060      	str	r0, [r4, #4]
 80076d6:	4620      	mov	r0, r4
 80076d8:	f000 f81c 	bl	8007714 <__sfp>
 80076dc:	60a0      	str	r0, [r4, #8]
 80076de:	4620      	mov	r0, r4
 80076e0:	f000 f818 	bl	8007714 <__sfp>
 80076e4:	2200      	movs	r2, #0
 80076e6:	60e0      	str	r0, [r4, #12]
 80076e8:	2104      	movs	r1, #4
 80076ea:	6860      	ldr	r0, [r4, #4]
 80076ec:	f7ff ff82 	bl	80075f4 <std>
 80076f0:	68a0      	ldr	r0, [r4, #8]
 80076f2:	2201      	movs	r2, #1
 80076f4:	2109      	movs	r1, #9
 80076f6:	f7ff ff7d 	bl	80075f4 <std>
 80076fa:	68e0      	ldr	r0, [r4, #12]
 80076fc:	2202      	movs	r2, #2
 80076fe:	2112      	movs	r1, #18
 8007700:	f7ff ff78 	bl	80075f4 <std>
 8007704:	2301      	movs	r3, #1
 8007706:	61a3      	str	r3, [r4, #24]
 8007708:	e7d2      	b.n	80076b0 <__sinit+0xc>
 800770a:	bf00      	nop
 800770c:	08009990 	.word	0x08009990
 8007710:	0800763d 	.word	0x0800763d

08007714 <__sfp>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	4607      	mov	r7, r0
 8007718:	f7ff ffac 	bl	8007674 <__sfp_lock_acquire>
 800771c:	4b1e      	ldr	r3, [pc, #120]	; (8007798 <__sfp+0x84>)
 800771e:	681e      	ldr	r6, [r3, #0]
 8007720:	69b3      	ldr	r3, [r6, #24]
 8007722:	b913      	cbnz	r3, 800772a <__sfp+0x16>
 8007724:	4630      	mov	r0, r6
 8007726:	f7ff ffbd 	bl	80076a4 <__sinit>
 800772a:	3648      	adds	r6, #72	; 0x48
 800772c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007730:	3b01      	subs	r3, #1
 8007732:	d503      	bpl.n	800773c <__sfp+0x28>
 8007734:	6833      	ldr	r3, [r6, #0]
 8007736:	b30b      	cbz	r3, 800777c <__sfp+0x68>
 8007738:	6836      	ldr	r6, [r6, #0]
 800773a:	e7f7      	b.n	800772c <__sfp+0x18>
 800773c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007740:	b9d5      	cbnz	r5, 8007778 <__sfp+0x64>
 8007742:	4b16      	ldr	r3, [pc, #88]	; (800779c <__sfp+0x88>)
 8007744:	60e3      	str	r3, [r4, #12]
 8007746:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800774a:	6665      	str	r5, [r4, #100]	; 0x64
 800774c:	f000 f847 	bl	80077de <__retarget_lock_init_recursive>
 8007750:	f7ff ff96 	bl	8007680 <__sfp_lock_release>
 8007754:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007758:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800775c:	6025      	str	r5, [r4, #0]
 800775e:	61a5      	str	r5, [r4, #24]
 8007760:	2208      	movs	r2, #8
 8007762:	4629      	mov	r1, r5
 8007764:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007768:	f7ff f802 	bl	8006770 <memset>
 800776c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007770:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007774:	4620      	mov	r0, r4
 8007776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007778:	3468      	adds	r4, #104	; 0x68
 800777a:	e7d9      	b.n	8007730 <__sfp+0x1c>
 800777c:	2104      	movs	r1, #4
 800777e:	4638      	mov	r0, r7
 8007780:	f7ff ff62 	bl	8007648 <__sfmoreglue>
 8007784:	4604      	mov	r4, r0
 8007786:	6030      	str	r0, [r6, #0]
 8007788:	2800      	cmp	r0, #0
 800778a:	d1d5      	bne.n	8007738 <__sfp+0x24>
 800778c:	f7ff ff78 	bl	8007680 <__sfp_lock_release>
 8007790:	230c      	movs	r3, #12
 8007792:	603b      	str	r3, [r7, #0]
 8007794:	e7ee      	b.n	8007774 <__sfp+0x60>
 8007796:	bf00      	nop
 8007798:	08009990 	.word	0x08009990
 800779c:	ffff0001 	.word	0xffff0001

080077a0 <_fwalk_reent>:
 80077a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a4:	4606      	mov	r6, r0
 80077a6:	4688      	mov	r8, r1
 80077a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077ac:	2700      	movs	r7, #0
 80077ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077b2:	f1b9 0901 	subs.w	r9, r9, #1
 80077b6:	d505      	bpl.n	80077c4 <_fwalk_reent+0x24>
 80077b8:	6824      	ldr	r4, [r4, #0]
 80077ba:	2c00      	cmp	r4, #0
 80077bc:	d1f7      	bne.n	80077ae <_fwalk_reent+0xe>
 80077be:	4638      	mov	r0, r7
 80077c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077c4:	89ab      	ldrh	r3, [r5, #12]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d907      	bls.n	80077da <_fwalk_reent+0x3a>
 80077ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077ce:	3301      	adds	r3, #1
 80077d0:	d003      	beq.n	80077da <_fwalk_reent+0x3a>
 80077d2:	4629      	mov	r1, r5
 80077d4:	4630      	mov	r0, r6
 80077d6:	47c0      	blx	r8
 80077d8:	4307      	orrs	r7, r0
 80077da:	3568      	adds	r5, #104	; 0x68
 80077dc:	e7e9      	b.n	80077b2 <_fwalk_reent+0x12>

080077de <__retarget_lock_init_recursive>:
 80077de:	4770      	bx	lr

080077e0 <__retarget_lock_acquire_recursive>:
 80077e0:	4770      	bx	lr

080077e2 <__retarget_lock_release_recursive>:
 80077e2:	4770      	bx	lr

080077e4 <__swhatbuf_r>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	460e      	mov	r6, r1
 80077e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ec:	2900      	cmp	r1, #0
 80077ee:	b096      	sub	sp, #88	; 0x58
 80077f0:	4614      	mov	r4, r2
 80077f2:	461d      	mov	r5, r3
 80077f4:	da08      	bge.n	8007808 <__swhatbuf_r+0x24>
 80077f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	602a      	str	r2, [r5, #0]
 80077fe:	061a      	lsls	r2, r3, #24
 8007800:	d410      	bmi.n	8007824 <__swhatbuf_r+0x40>
 8007802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007806:	e00e      	b.n	8007826 <__swhatbuf_r+0x42>
 8007808:	466a      	mov	r2, sp
 800780a:	f000 f907 	bl	8007a1c <_fstat_r>
 800780e:	2800      	cmp	r0, #0
 8007810:	dbf1      	blt.n	80077f6 <__swhatbuf_r+0x12>
 8007812:	9a01      	ldr	r2, [sp, #4]
 8007814:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007818:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800781c:	425a      	negs	r2, r3
 800781e:	415a      	adcs	r2, r3
 8007820:	602a      	str	r2, [r5, #0]
 8007822:	e7ee      	b.n	8007802 <__swhatbuf_r+0x1e>
 8007824:	2340      	movs	r3, #64	; 0x40
 8007826:	2000      	movs	r0, #0
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	b016      	add	sp, #88	; 0x58
 800782c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007830 <__smakebuf_r>:
 8007830:	898b      	ldrh	r3, [r1, #12]
 8007832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007834:	079d      	lsls	r5, r3, #30
 8007836:	4606      	mov	r6, r0
 8007838:	460c      	mov	r4, r1
 800783a:	d507      	bpl.n	800784c <__smakebuf_r+0x1c>
 800783c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	6123      	str	r3, [r4, #16]
 8007844:	2301      	movs	r3, #1
 8007846:	6163      	str	r3, [r4, #20]
 8007848:	b002      	add	sp, #8
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	ab01      	add	r3, sp, #4
 800784e:	466a      	mov	r2, sp
 8007850:	f7ff ffc8 	bl	80077e4 <__swhatbuf_r>
 8007854:	9900      	ldr	r1, [sp, #0]
 8007856:	4605      	mov	r5, r0
 8007858:	4630      	mov	r0, r6
 800785a:	f7ff f9cf 	bl	8006bfc <_malloc_r>
 800785e:	b948      	cbnz	r0, 8007874 <__smakebuf_r+0x44>
 8007860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007864:	059a      	lsls	r2, r3, #22
 8007866:	d4ef      	bmi.n	8007848 <__smakebuf_r+0x18>
 8007868:	f023 0303 	bic.w	r3, r3, #3
 800786c:	f043 0302 	orr.w	r3, r3, #2
 8007870:	81a3      	strh	r3, [r4, #12]
 8007872:	e7e3      	b.n	800783c <__smakebuf_r+0xc>
 8007874:	4b0d      	ldr	r3, [pc, #52]	; (80078ac <__smakebuf_r+0x7c>)
 8007876:	62b3      	str	r3, [r6, #40]	; 0x28
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	6020      	str	r0, [r4, #0]
 800787c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007880:	81a3      	strh	r3, [r4, #12]
 8007882:	9b00      	ldr	r3, [sp, #0]
 8007884:	6163      	str	r3, [r4, #20]
 8007886:	9b01      	ldr	r3, [sp, #4]
 8007888:	6120      	str	r0, [r4, #16]
 800788a:	b15b      	cbz	r3, 80078a4 <__smakebuf_r+0x74>
 800788c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007890:	4630      	mov	r0, r6
 8007892:	f000 f8d5 	bl	8007a40 <_isatty_r>
 8007896:	b128      	cbz	r0, 80078a4 <__smakebuf_r+0x74>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	f023 0303 	bic.w	r3, r3, #3
 800789e:	f043 0301 	orr.w	r3, r3, #1
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	89a0      	ldrh	r0, [r4, #12]
 80078a6:	4305      	orrs	r5, r0
 80078a8:	81a5      	strh	r5, [r4, #12]
 80078aa:	e7cd      	b.n	8007848 <__smakebuf_r+0x18>
 80078ac:	0800763d 	.word	0x0800763d

080078b0 <__malloc_lock>:
 80078b0:	4801      	ldr	r0, [pc, #4]	; (80078b8 <__malloc_lock+0x8>)
 80078b2:	f7ff bf95 	b.w	80077e0 <__retarget_lock_acquire_recursive>
 80078b6:	bf00      	nop
 80078b8:	2000072c 	.word	0x2000072c

080078bc <__malloc_unlock>:
 80078bc:	4801      	ldr	r0, [pc, #4]	; (80078c4 <__malloc_unlock+0x8>)
 80078be:	f7ff bf90 	b.w	80077e2 <__retarget_lock_release_recursive>
 80078c2:	bf00      	nop
 80078c4:	2000072c 	.word	0x2000072c

080078c8 <_raise_r>:
 80078c8:	291f      	cmp	r1, #31
 80078ca:	b538      	push	{r3, r4, r5, lr}
 80078cc:	4604      	mov	r4, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	d904      	bls.n	80078dc <_raise_r+0x14>
 80078d2:	2316      	movs	r3, #22
 80078d4:	6003      	str	r3, [r0, #0]
 80078d6:	f04f 30ff 	mov.w	r0, #4294967295
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078de:	b112      	cbz	r2, 80078e6 <_raise_r+0x1e>
 80078e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078e4:	b94b      	cbnz	r3, 80078fa <_raise_r+0x32>
 80078e6:	4620      	mov	r0, r4
 80078e8:	f000 f830 	bl	800794c <_getpid_r>
 80078ec:	462a      	mov	r2, r5
 80078ee:	4601      	mov	r1, r0
 80078f0:	4620      	mov	r0, r4
 80078f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078f6:	f000 b817 	b.w	8007928 <_kill_r>
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d00a      	beq.n	8007914 <_raise_r+0x4c>
 80078fe:	1c59      	adds	r1, r3, #1
 8007900:	d103      	bne.n	800790a <_raise_r+0x42>
 8007902:	2316      	movs	r3, #22
 8007904:	6003      	str	r3, [r0, #0]
 8007906:	2001      	movs	r0, #1
 8007908:	e7e7      	b.n	80078da <_raise_r+0x12>
 800790a:	2400      	movs	r4, #0
 800790c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007910:	4628      	mov	r0, r5
 8007912:	4798      	blx	r3
 8007914:	2000      	movs	r0, #0
 8007916:	e7e0      	b.n	80078da <_raise_r+0x12>

08007918 <raise>:
 8007918:	4b02      	ldr	r3, [pc, #8]	; (8007924 <raise+0xc>)
 800791a:	4601      	mov	r1, r0
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	f7ff bfd3 	b.w	80078c8 <_raise_r>
 8007922:	bf00      	nop
 8007924:	2000000c 	.word	0x2000000c

08007928 <_kill_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4d07      	ldr	r5, [pc, #28]	; (8007948 <_kill_r+0x20>)
 800792c:	2300      	movs	r3, #0
 800792e:	4604      	mov	r4, r0
 8007930:	4608      	mov	r0, r1
 8007932:	4611      	mov	r1, r2
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	f7fb fdbf 	bl	80034b8 <_kill>
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	d102      	bne.n	8007944 <_kill_r+0x1c>
 800793e:	682b      	ldr	r3, [r5, #0]
 8007940:	b103      	cbz	r3, 8007944 <_kill_r+0x1c>
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	bd38      	pop	{r3, r4, r5, pc}
 8007946:	bf00      	nop
 8007948:	20000730 	.word	0x20000730

0800794c <_getpid_r>:
 800794c:	f7fb bdac 	b.w	80034a8 <_getpid>

08007950 <__sread>:
 8007950:	b510      	push	{r4, lr}
 8007952:	460c      	mov	r4, r1
 8007954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007958:	f000 f894 	bl	8007a84 <_read_r>
 800795c:	2800      	cmp	r0, #0
 800795e:	bfab      	itete	ge
 8007960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007962:	89a3      	ldrhlt	r3, [r4, #12]
 8007964:	181b      	addge	r3, r3, r0
 8007966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800796a:	bfac      	ite	ge
 800796c:	6563      	strge	r3, [r4, #84]	; 0x54
 800796e:	81a3      	strhlt	r3, [r4, #12]
 8007970:	bd10      	pop	{r4, pc}

08007972 <__swrite>:
 8007972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007976:	461f      	mov	r7, r3
 8007978:	898b      	ldrh	r3, [r1, #12]
 800797a:	05db      	lsls	r3, r3, #23
 800797c:	4605      	mov	r5, r0
 800797e:	460c      	mov	r4, r1
 8007980:	4616      	mov	r6, r2
 8007982:	d505      	bpl.n	8007990 <__swrite+0x1e>
 8007984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007988:	2302      	movs	r3, #2
 800798a:	2200      	movs	r2, #0
 800798c:	f000 f868 	bl	8007a60 <_lseek_r>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800799a:	81a3      	strh	r3, [r4, #12]
 800799c:	4632      	mov	r2, r6
 800799e:	463b      	mov	r3, r7
 80079a0:	4628      	mov	r0, r5
 80079a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079a6:	f000 b817 	b.w	80079d8 <_write_r>

080079aa <__sseek>:
 80079aa:	b510      	push	{r4, lr}
 80079ac:	460c      	mov	r4, r1
 80079ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b2:	f000 f855 	bl	8007a60 <_lseek_r>
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	bf15      	itete	ne
 80079bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80079be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079c6:	81a3      	strheq	r3, [r4, #12]
 80079c8:	bf18      	it	ne
 80079ca:	81a3      	strhne	r3, [r4, #12]
 80079cc:	bd10      	pop	{r4, pc}

080079ce <__sclose>:
 80079ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d2:	f000 b813 	b.w	80079fc <_close_r>
	...

080079d8 <_write_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4d07      	ldr	r5, [pc, #28]	; (80079f8 <_write_r+0x20>)
 80079dc:	4604      	mov	r4, r0
 80079de:	4608      	mov	r0, r1
 80079e0:	4611      	mov	r1, r2
 80079e2:	2200      	movs	r2, #0
 80079e4:	602a      	str	r2, [r5, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f7fb fd9d 	bl	8003526 <_write>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d102      	bne.n	80079f6 <_write_r+0x1e>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	b103      	cbz	r3, 80079f6 <_write_r+0x1e>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	20000730 	.word	0x20000730

080079fc <_close_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4d06      	ldr	r5, [pc, #24]	; (8007a18 <_close_r+0x1c>)
 8007a00:	2300      	movs	r3, #0
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	f7fb fda9 	bl	800355e <_close>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_close_r+0x1a>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_close_r+0x1a>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	20000730 	.word	0x20000730

08007a1c <_fstat_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4d07      	ldr	r5, [pc, #28]	; (8007a3c <_fstat_r+0x20>)
 8007a20:	2300      	movs	r3, #0
 8007a22:	4604      	mov	r4, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	4611      	mov	r1, r2
 8007a28:	602b      	str	r3, [r5, #0]
 8007a2a:	f7fb fda4 	bl	8003576 <_fstat>
 8007a2e:	1c43      	adds	r3, r0, #1
 8007a30:	d102      	bne.n	8007a38 <_fstat_r+0x1c>
 8007a32:	682b      	ldr	r3, [r5, #0]
 8007a34:	b103      	cbz	r3, 8007a38 <_fstat_r+0x1c>
 8007a36:	6023      	str	r3, [r4, #0]
 8007a38:	bd38      	pop	{r3, r4, r5, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000730 	.word	0x20000730

08007a40 <_isatty_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d06      	ldr	r5, [pc, #24]	; (8007a5c <_isatty_r+0x1c>)
 8007a44:	2300      	movs	r3, #0
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f7fb fda3 	bl	8003596 <_isatty>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_isatty_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_isatty_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	20000730 	.word	0x20000730

08007a60 <_lseek_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d07      	ldr	r5, [pc, #28]	; (8007a80 <_lseek_r+0x20>)
 8007a64:	4604      	mov	r4, r0
 8007a66:	4608      	mov	r0, r1
 8007a68:	4611      	mov	r1, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	602a      	str	r2, [r5, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f7fb fd9c 	bl	80035ac <_lseek>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d102      	bne.n	8007a7e <_lseek_r+0x1e>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	b103      	cbz	r3, 8007a7e <_lseek_r+0x1e>
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	bd38      	pop	{r3, r4, r5, pc}
 8007a80:	20000730 	.word	0x20000730

08007a84 <_read_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4d07      	ldr	r5, [pc, #28]	; (8007aa4 <_read_r+0x20>)
 8007a88:	4604      	mov	r4, r0
 8007a8a:	4608      	mov	r0, r1
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	2200      	movs	r2, #0
 8007a90:	602a      	str	r2, [r5, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	f7fb fd2a 	bl	80034ec <_read>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_read_r+0x1e>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_read_r+0x1e>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	20000730 	.word	0x20000730

08007aa8 <cos>:
 8007aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007aaa:	ec53 2b10 	vmov	r2, r3, d0
 8007aae:	4826      	ldr	r0, [pc, #152]	; (8007b48 <cos+0xa0>)
 8007ab0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ab4:	4281      	cmp	r1, r0
 8007ab6:	dc06      	bgt.n	8007ac6 <cos+0x1e>
 8007ab8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007b40 <cos+0x98>
 8007abc:	b005      	add	sp, #20
 8007abe:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ac2:	f001 b8fd 	b.w	8008cc0 <__kernel_cos>
 8007ac6:	4821      	ldr	r0, [pc, #132]	; (8007b4c <cos+0xa4>)
 8007ac8:	4281      	cmp	r1, r0
 8007aca:	dd09      	ble.n	8007ae0 <cos+0x38>
 8007acc:	ee10 0a10 	vmov	r0, s0
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	f7f8 fbe9 	bl	80002a8 <__aeabi_dsub>
 8007ad6:	ec41 0b10 	vmov	d0, r0, r1
 8007ada:	b005      	add	sp, #20
 8007adc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ae0:	4668      	mov	r0, sp
 8007ae2:	f000 fe2d 	bl	8008740 <__ieee754_rem_pio2>
 8007ae6:	f000 0003 	and.w	r0, r0, #3
 8007aea:	2801      	cmp	r0, #1
 8007aec:	d00b      	beq.n	8007b06 <cos+0x5e>
 8007aee:	2802      	cmp	r0, #2
 8007af0:	d016      	beq.n	8007b20 <cos+0x78>
 8007af2:	b9e0      	cbnz	r0, 8007b2e <cos+0x86>
 8007af4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007af8:	ed9d 0b00 	vldr	d0, [sp]
 8007afc:	f001 f8e0 	bl	8008cc0 <__kernel_cos>
 8007b00:	ec51 0b10 	vmov	r0, r1, d0
 8007b04:	e7e7      	b.n	8007ad6 <cos+0x2e>
 8007b06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b0a:	ed9d 0b00 	vldr	d0, [sp]
 8007b0e:	f001 fcef 	bl	80094f0 <__kernel_sin>
 8007b12:	ec53 2b10 	vmov	r2, r3, d0
 8007b16:	ee10 0a10 	vmov	r0, s0
 8007b1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007b1e:	e7da      	b.n	8007ad6 <cos+0x2e>
 8007b20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b24:	ed9d 0b00 	vldr	d0, [sp]
 8007b28:	f001 f8ca 	bl	8008cc0 <__kernel_cos>
 8007b2c:	e7f1      	b.n	8007b12 <cos+0x6a>
 8007b2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b32:	ed9d 0b00 	vldr	d0, [sp]
 8007b36:	2001      	movs	r0, #1
 8007b38:	f001 fcda 	bl	80094f0 <__kernel_sin>
 8007b3c:	e7e0      	b.n	8007b00 <cos+0x58>
 8007b3e:	bf00      	nop
	...
 8007b48:	3fe921fb 	.word	0x3fe921fb
 8007b4c:	7fefffff 	.word	0x7fefffff

08007b50 <sin>:
 8007b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b52:	ec53 2b10 	vmov	r2, r3, d0
 8007b56:	4828      	ldr	r0, [pc, #160]	; (8007bf8 <sin+0xa8>)
 8007b58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b5c:	4281      	cmp	r1, r0
 8007b5e:	dc07      	bgt.n	8007b70 <sin+0x20>
 8007b60:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007bf0 <sin+0xa0>
 8007b64:	2000      	movs	r0, #0
 8007b66:	b005      	add	sp, #20
 8007b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b6c:	f001 bcc0 	b.w	80094f0 <__kernel_sin>
 8007b70:	4822      	ldr	r0, [pc, #136]	; (8007bfc <sin+0xac>)
 8007b72:	4281      	cmp	r1, r0
 8007b74:	dd09      	ble.n	8007b8a <sin+0x3a>
 8007b76:	ee10 0a10 	vmov	r0, s0
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	f7f8 fb94 	bl	80002a8 <__aeabi_dsub>
 8007b80:	ec41 0b10 	vmov	d0, r0, r1
 8007b84:	b005      	add	sp, #20
 8007b86:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b8a:	4668      	mov	r0, sp
 8007b8c:	f000 fdd8 	bl	8008740 <__ieee754_rem_pio2>
 8007b90:	f000 0003 	and.w	r0, r0, #3
 8007b94:	2801      	cmp	r0, #1
 8007b96:	d00c      	beq.n	8007bb2 <sin+0x62>
 8007b98:	2802      	cmp	r0, #2
 8007b9a:	d011      	beq.n	8007bc0 <sin+0x70>
 8007b9c:	b9f0      	cbnz	r0, 8007bdc <sin+0x8c>
 8007b9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ba2:	ed9d 0b00 	vldr	d0, [sp]
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	f001 fca2 	bl	80094f0 <__kernel_sin>
 8007bac:	ec51 0b10 	vmov	r0, r1, d0
 8007bb0:	e7e6      	b.n	8007b80 <sin+0x30>
 8007bb2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bb6:	ed9d 0b00 	vldr	d0, [sp]
 8007bba:	f001 f881 	bl	8008cc0 <__kernel_cos>
 8007bbe:	e7f5      	b.n	8007bac <sin+0x5c>
 8007bc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bc4:	ed9d 0b00 	vldr	d0, [sp]
 8007bc8:	2001      	movs	r0, #1
 8007bca:	f001 fc91 	bl	80094f0 <__kernel_sin>
 8007bce:	ec53 2b10 	vmov	r2, r3, d0
 8007bd2:	ee10 0a10 	vmov	r0, s0
 8007bd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007bda:	e7d1      	b.n	8007b80 <sin+0x30>
 8007bdc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007be0:	ed9d 0b00 	vldr	d0, [sp]
 8007be4:	f001 f86c 	bl	8008cc0 <__kernel_cos>
 8007be8:	e7f1      	b.n	8007bce <sin+0x7e>
 8007bea:	bf00      	nop
 8007bec:	f3af 8000 	nop.w
	...
 8007bf8:	3fe921fb 	.word	0x3fe921fb
 8007bfc:	7fefffff 	.word	0x7fefffff

08007c00 <pow>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	ed2d 8b02 	vpush	{d8}
 8007c06:	eeb0 8a40 	vmov.f32	s16, s0
 8007c0a:	eef0 8a60 	vmov.f32	s17, s1
 8007c0e:	ec55 4b11 	vmov	r4, r5, d1
 8007c12:	f000 f865 	bl	8007ce0 <__ieee754_pow>
 8007c16:	4622      	mov	r2, r4
 8007c18:	462b      	mov	r3, r5
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	ec57 6b10 	vmov	r6, r7, d0
 8007c22:	f7f8 ff93 	bl	8000b4c <__aeabi_dcmpun>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d13b      	bne.n	8007ca2 <pow+0xa2>
 8007c2a:	ec51 0b18 	vmov	r0, r1, d8
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2300      	movs	r3, #0
 8007c32:	f7f8 ff59 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c36:	b1b8      	cbz	r0, 8007c68 <pow+0x68>
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	4629      	mov	r1, r5
 8007c40:	f7f8 ff52 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d146      	bne.n	8007cd6 <pow+0xd6>
 8007c48:	ec45 4b10 	vmov	d0, r4, r5
 8007c4c:	f001 fd47 	bl	80096de <finite>
 8007c50:	b338      	cbz	r0, 8007ca2 <pow+0xa2>
 8007c52:	2200      	movs	r2, #0
 8007c54:	2300      	movs	r3, #0
 8007c56:	4620      	mov	r0, r4
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7f8 ff4f 	bl	8000afc <__aeabi_dcmplt>
 8007c5e:	b300      	cbz	r0, 8007ca2 <pow+0xa2>
 8007c60:	f7fe fd5c 	bl	800671c <__errno>
 8007c64:	2322      	movs	r3, #34	; 0x22
 8007c66:	e01b      	b.n	8007ca0 <pow+0xa0>
 8007c68:	ec47 6b10 	vmov	d0, r6, r7
 8007c6c:	f001 fd37 	bl	80096de <finite>
 8007c70:	b9e0      	cbnz	r0, 8007cac <pow+0xac>
 8007c72:	eeb0 0a48 	vmov.f32	s0, s16
 8007c76:	eef0 0a68 	vmov.f32	s1, s17
 8007c7a:	f001 fd30 	bl	80096de <finite>
 8007c7e:	b1a8      	cbz	r0, 8007cac <pow+0xac>
 8007c80:	ec45 4b10 	vmov	d0, r4, r5
 8007c84:	f001 fd2b 	bl	80096de <finite>
 8007c88:	b180      	cbz	r0, 8007cac <pow+0xac>
 8007c8a:	4632      	mov	r2, r6
 8007c8c:	463b      	mov	r3, r7
 8007c8e:	4630      	mov	r0, r6
 8007c90:	4639      	mov	r1, r7
 8007c92:	f7f8 ff5b 	bl	8000b4c <__aeabi_dcmpun>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d0e2      	beq.n	8007c60 <pow+0x60>
 8007c9a:	f7fe fd3f 	bl	800671c <__errno>
 8007c9e:	2321      	movs	r3, #33	; 0x21
 8007ca0:	6003      	str	r3, [r0, #0]
 8007ca2:	ecbd 8b02 	vpop	{d8}
 8007ca6:	ec47 6b10 	vmov	d0, r6, r7
 8007caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cac:	2200      	movs	r2, #0
 8007cae:	2300      	movs	r3, #0
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	f7f8 ff18 	bl	8000ae8 <__aeabi_dcmpeq>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d0f2      	beq.n	8007ca2 <pow+0xa2>
 8007cbc:	eeb0 0a48 	vmov.f32	s0, s16
 8007cc0:	eef0 0a68 	vmov.f32	s1, s17
 8007cc4:	f001 fd0b 	bl	80096de <finite>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d0ea      	beq.n	8007ca2 <pow+0xa2>
 8007ccc:	ec45 4b10 	vmov	d0, r4, r5
 8007cd0:	f001 fd05 	bl	80096de <finite>
 8007cd4:	e7c3      	b.n	8007c5e <pow+0x5e>
 8007cd6:	4f01      	ldr	r7, [pc, #4]	; (8007cdc <pow+0xdc>)
 8007cd8:	2600      	movs	r6, #0
 8007cda:	e7e2      	b.n	8007ca2 <pow+0xa2>
 8007cdc:	3ff00000 	.word	0x3ff00000

08007ce0 <__ieee754_pow>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	ed2d 8b06 	vpush	{d8-d10}
 8007ce8:	b089      	sub	sp, #36	; 0x24
 8007cea:	ed8d 1b00 	vstr	d1, [sp]
 8007cee:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007cf2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007cf6:	ea58 0102 	orrs.w	r1, r8, r2
 8007cfa:	ec57 6b10 	vmov	r6, r7, d0
 8007cfe:	d115      	bne.n	8007d2c <__ieee754_pow+0x4c>
 8007d00:	19b3      	adds	r3, r6, r6
 8007d02:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007d06:	4152      	adcs	r2, r2
 8007d08:	4299      	cmp	r1, r3
 8007d0a:	4b89      	ldr	r3, [pc, #548]	; (8007f30 <__ieee754_pow+0x250>)
 8007d0c:	4193      	sbcs	r3, r2
 8007d0e:	f080 84d2 	bcs.w	80086b6 <__ieee754_pow+0x9d6>
 8007d12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d16:	4630      	mov	r0, r6
 8007d18:	4639      	mov	r1, r7
 8007d1a:	f7f8 fac7 	bl	80002ac <__adddf3>
 8007d1e:	ec41 0b10 	vmov	d0, r0, r1
 8007d22:	b009      	add	sp, #36	; 0x24
 8007d24:	ecbd 8b06 	vpop	{d8-d10}
 8007d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2c:	4b81      	ldr	r3, [pc, #516]	; (8007f34 <__ieee754_pow+0x254>)
 8007d2e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007d32:	429c      	cmp	r4, r3
 8007d34:	ee10 aa10 	vmov	sl, s0
 8007d38:	463d      	mov	r5, r7
 8007d3a:	dc06      	bgt.n	8007d4a <__ieee754_pow+0x6a>
 8007d3c:	d101      	bne.n	8007d42 <__ieee754_pow+0x62>
 8007d3e:	2e00      	cmp	r6, #0
 8007d40:	d1e7      	bne.n	8007d12 <__ieee754_pow+0x32>
 8007d42:	4598      	cmp	r8, r3
 8007d44:	dc01      	bgt.n	8007d4a <__ieee754_pow+0x6a>
 8007d46:	d10f      	bne.n	8007d68 <__ieee754_pow+0x88>
 8007d48:	b172      	cbz	r2, 8007d68 <__ieee754_pow+0x88>
 8007d4a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007d4e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007d52:	ea55 050a 	orrs.w	r5, r5, sl
 8007d56:	d1dc      	bne.n	8007d12 <__ieee754_pow+0x32>
 8007d58:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d5c:	18db      	adds	r3, r3, r3
 8007d5e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007d62:	4152      	adcs	r2, r2
 8007d64:	429d      	cmp	r5, r3
 8007d66:	e7d0      	b.n	8007d0a <__ieee754_pow+0x2a>
 8007d68:	2d00      	cmp	r5, #0
 8007d6a:	da3b      	bge.n	8007de4 <__ieee754_pow+0x104>
 8007d6c:	4b72      	ldr	r3, [pc, #456]	; (8007f38 <__ieee754_pow+0x258>)
 8007d6e:	4598      	cmp	r8, r3
 8007d70:	dc51      	bgt.n	8007e16 <__ieee754_pow+0x136>
 8007d72:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007d76:	4598      	cmp	r8, r3
 8007d78:	f340 84ac 	ble.w	80086d4 <__ieee754_pow+0x9f4>
 8007d7c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007d80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007d84:	2b14      	cmp	r3, #20
 8007d86:	dd0f      	ble.n	8007da8 <__ieee754_pow+0xc8>
 8007d88:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007d8c:	fa22 f103 	lsr.w	r1, r2, r3
 8007d90:	fa01 f303 	lsl.w	r3, r1, r3
 8007d94:	4293      	cmp	r3, r2
 8007d96:	f040 849d 	bne.w	80086d4 <__ieee754_pow+0x9f4>
 8007d9a:	f001 0101 	and.w	r1, r1, #1
 8007d9e:	f1c1 0302 	rsb	r3, r1, #2
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	b182      	cbz	r2, 8007dc8 <__ieee754_pow+0xe8>
 8007da6:	e05f      	b.n	8007e68 <__ieee754_pow+0x188>
 8007da8:	2a00      	cmp	r2, #0
 8007daa:	d15b      	bne.n	8007e64 <__ieee754_pow+0x184>
 8007dac:	f1c3 0314 	rsb	r3, r3, #20
 8007db0:	fa48 f103 	asr.w	r1, r8, r3
 8007db4:	fa01 f303 	lsl.w	r3, r1, r3
 8007db8:	4543      	cmp	r3, r8
 8007dba:	f040 8488 	bne.w	80086ce <__ieee754_pow+0x9ee>
 8007dbe:	f001 0101 	and.w	r1, r1, #1
 8007dc2:	f1c1 0302 	rsb	r3, r1, #2
 8007dc6:	9304      	str	r3, [sp, #16]
 8007dc8:	4b5c      	ldr	r3, [pc, #368]	; (8007f3c <__ieee754_pow+0x25c>)
 8007dca:	4598      	cmp	r8, r3
 8007dcc:	d132      	bne.n	8007e34 <__ieee754_pow+0x154>
 8007dce:	f1b9 0f00 	cmp.w	r9, #0
 8007dd2:	f280 8478 	bge.w	80086c6 <__ieee754_pow+0x9e6>
 8007dd6:	4959      	ldr	r1, [pc, #356]	; (8007f3c <__ieee754_pow+0x25c>)
 8007dd8:	4632      	mov	r2, r6
 8007dda:	463b      	mov	r3, r7
 8007ddc:	2000      	movs	r0, #0
 8007dde:	f7f8 fd45 	bl	800086c <__aeabi_ddiv>
 8007de2:	e79c      	b.n	8007d1e <__ieee754_pow+0x3e>
 8007de4:	2300      	movs	r3, #0
 8007de6:	9304      	str	r3, [sp, #16]
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	d13d      	bne.n	8007e68 <__ieee754_pow+0x188>
 8007dec:	4b51      	ldr	r3, [pc, #324]	; (8007f34 <__ieee754_pow+0x254>)
 8007dee:	4598      	cmp	r8, r3
 8007df0:	d1ea      	bne.n	8007dc8 <__ieee754_pow+0xe8>
 8007df2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007df6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007dfa:	ea53 030a 	orrs.w	r3, r3, sl
 8007dfe:	f000 845a 	beq.w	80086b6 <__ieee754_pow+0x9d6>
 8007e02:	4b4f      	ldr	r3, [pc, #316]	; (8007f40 <__ieee754_pow+0x260>)
 8007e04:	429c      	cmp	r4, r3
 8007e06:	dd08      	ble.n	8007e1a <__ieee754_pow+0x13a>
 8007e08:	f1b9 0f00 	cmp.w	r9, #0
 8007e0c:	f2c0 8457 	blt.w	80086be <__ieee754_pow+0x9de>
 8007e10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e14:	e783      	b.n	8007d1e <__ieee754_pow+0x3e>
 8007e16:	2302      	movs	r3, #2
 8007e18:	e7e5      	b.n	8007de6 <__ieee754_pow+0x106>
 8007e1a:	f1b9 0f00 	cmp.w	r9, #0
 8007e1e:	f04f 0000 	mov.w	r0, #0
 8007e22:	f04f 0100 	mov.w	r1, #0
 8007e26:	f6bf af7a 	bge.w	8007d1e <__ieee754_pow+0x3e>
 8007e2a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007e2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007e32:	e774      	b.n	8007d1e <__ieee754_pow+0x3e>
 8007e34:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007e38:	d106      	bne.n	8007e48 <__ieee754_pow+0x168>
 8007e3a:	4632      	mov	r2, r6
 8007e3c:	463b      	mov	r3, r7
 8007e3e:	4630      	mov	r0, r6
 8007e40:	4639      	mov	r1, r7
 8007e42:	f7f8 fbe9 	bl	8000618 <__aeabi_dmul>
 8007e46:	e76a      	b.n	8007d1e <__ieee754_pow+0x3e>
 8007e48:	4b3e      	ldr	r3, [pc, #248]	; (8007f44 <__ieee754_pow+0x264>)
 8007e4a:	4599      	cmp	r9, r3
 8007e4c:	d10c      	bne.n	8007e68 <__ieee754_pow+0x188>
 8007e4e:	2d00      	cmp	r5, #0
 8007e50:	db0a      	blt.n	8007e68 <__ieee754_pow+0x188>
 8007e52:	ec47 6b10 	vmov	d0, r6, r7
 8007e56:	b009      	add	sp, #36	; 0x24
 8007e58:	ecbd 8b06 	vpop	{d8-d10}
 8007e5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	f000 be7a 	b.w	8008b58 <__ieee754_sqrt>
 8007e64:	2300      	movs	r3, #0
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	ec47 6b10 	vmov	d0, r6, r7
 8007e6c:	f001 fc2e 	bl	80096cc <fabs>
 8007e70:	ec51 0b10 	vmov	r0, r1, d0
 8007e74:	f1ba 0f00 	cmp.w	sl, #0
 8007e78:	d129      	bne.n	8007ece <__ieee754_pow+0x1ee>
 8007e7a:	b124      	cbz	r4, 8007e86 <__ieee754_pow+0x1a6>
 8007e7c:	4b2f      	ldr	r3, [pc, #188]	; (8007f3c <__ieee754_pow+0x25c>)
 8007e7e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d123      	bne.n	8007ece <__ieee754_pow+0x1ee>
 8007e86:	f1b9 0f00 	cmp.w	r9, #0
 8007e8a:	da05      	bge.n	8007e98 <__ieee754_pow+0x1b8>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	2000      	movs	r0, #0
 8007e92:	492a      	ldr	r1, [pc, #168]	; (8007f3c <__ieee754_pow+0x25c>)
 8007e94:	f7f8 fcea 	bl	800086c <__aeabi_ddiv>
 8007e98:	2d00      	cmp	r5, #0
 8007e9a:	f6bf af40 	bge.w	8007d1e <__ieee754_pow+0x3e>
 8007e9e:	9b04      	ldr	r3, [sp, #16]
 8007ea0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007ea4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007ea8:	4323      	orrs	r3, r4
 8007eaa:	d108      	bne.n	8007ebe <__ieee754_pow+0x1de>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	f7f8 f9f8 	bl	80002a8 <__aeabi_dsub>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	e78f      	b.n	8007dde <__ieee754_pow+0xfe>
 8007ebe:	9b04      	ldr	r3, [sp, #16]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	f47f af2c 	bne.w	8007d1e <__ieee754_pow+0x3e>
 8007ec6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007eca:	4619      	mov	r1, r3
 8007ecc:	e727      	b.n	8007d1e <__ieee754_pow+0x3e>
 8007ece:	0feb      	lsrs	r3, r5, #31
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	9306      	str	r3, [sp, #24]
 8007ed4:	9a06      	ldr	r2, [sp, #24]
 8007ed6:	9b04      	ldr	r3, [sp, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	d102      	bne.n	8007ee2 <__ieee754_pow+0x202>
 8007edc:	4632      	mov	r2, r6
 8007ede:	463b      	mov	r3, r7
 8007ee0:	e7e6      	b.n	8007eb0 <__ieee754_pow+0x1d0>
 8007ee2:	4b19      	ldr	r3, [pc, #100]	; (8007f48 <__ieee754_pow+0x268>)
 8007ee4:	4598      	cmp	r8, r3
 8007ee6:	f340 80fb 	ble.w	80080e0 <__ieee754_pow+0x400>
 8007eea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007eee:	4598      	cmp	r8, r3
 8007ef0:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <__ieee754_pow+0x260>)
 8007ef2:	dd0c      	ble.n	8007f0e <__ieee754_pow+0x22e>
 8007ef4:	429c      	cmp	r4, r3
 8007ef6:	dc0f      	bgt.n	8007f18 <__ieee754_pow+0x238>
 8007ef8:	f1b9 0f00 	cmp.w	r9, #0
 8007efc:	da0f      	bge.n	8007f1e <__ieee754_pow+0x23e>
 8007efe:	2000      	movs	r0, #0
 8007f00:	b009      	add	sp, #36	; 0x24
 8007f02:	ecbd 8b06 	vpop	{d8-d10}
 8007f06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0a:	f001 bbd6 	b.w	80096ba <__math_oflow>
 8007f0e:	429c      	cmp	r4, r3
 8007f10:	dbf2      	blt.n	8007ef8 <__ieee754_pow+0x218>
 8007f12:	4b0a      	ldr	r3, [pc, #40]	; (8007f3c <__ieee754_pow+0x25c>)
 8007f14:	429c      	cmp	r4, r3
 8007f16:	dd19      	ble.n	8007f4c <__ieee754_pow+0x26c>
 8007f18:	f1b9 0f00 	cmp.w	r9, #0
 8007f1c:	dcef      	bgt.n	8007efe <__ieee754_pow+0x21e>
 8007f1e:	2000      	movs	r0, #0
 8007f20:	b009      	add	sp, #36	; 0x24
 8007f22:	ecbd 8b06 	vpop	{d8-d10}
 8007f26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2a:	f001 bbbd 	b.w	80096a8 <__math_uflow>
 8007f2e:	bf00      	nop
 8007f30:	fff00000 	.word	0xfff00000
 8007f34:	7ff00000 	.word	0x7ff00000
 8007f38:	433fffff 	.word	0x433fffff
 8007f3c:	3ff00000 	.word	0x3ff00000
 8007f40:	3fefffff 	.word	0x3fefffff
 8007f44:	3fe00000 	.word	0x3fe00000
 8007f48:	41e00000 	.word	0x41e00000
 8007f4c:	4b60      	ldr	r3, [pc, #384]	; (80080d0 <__ieee754_pow+0x3f0>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f7f8 f9aa 	bl	80002a8 <__aeabi_dsub>
 8007f54:	a354      	add	r3, pc, #336	; (adr r3, 80080a8 <__ieee754_pow+0x3c8>)
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	460d      	mov	r5, r1
 8007f5e:	f7f8 fb5b 	bl	8000618 <__aeabi_dmul>
 8007f62:	a353      	add	r3, pc, #332	; (adr r3, 80080b0 <__ieee754_pow+0x3d0>)
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	4606      	mov	r6, r0
 8007f6a:	460f      	mov	r7, r1
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	4629      	mov	r1, r5
 8007f70:	f7f8 fb52 	bl	8000618 <__aeabi_dmul>
 8007f74:	4b57      	ldr	r3, [pc, #348]	; (80080d4 <__ieee754_pow+0x3f4>)
 8007f76:	4682      	mov	sl, r0
 8007f78:	468b      	mov	fp, r1
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	4629      	mov	r1, r5
 8007f80:	f7f8 fb4a 	bl	8000618 <__aeabi_dmul>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	a14b      	add	r1, pc, #300	; (adr r1, 80080b8 <__ieee754_pow+0x3d8>)
 8007f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f8e:	f7f8 f98b 	bl	80002a8 <__aeabi_dsub>
 8007f92:	4622      	mov	r2, r4
 8007f94:	462b      	mov	r3, r5
 8007f96:	f7f8 fb3f 	bl	8000618 <__aeabi_dmul>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	494d      	ldr	r1, [pc, #308]	; (80080d8 <__ieee754_pow+0x3f8>)
 8007fa2:	f7f8 f981 	bl	80002a8 <__aeabi_dsub>
 8007fa6:	4622      	mov	r2, r4
 8007fa8:	4680      	mov	r8, r0
 8007faa:	4689      	mov	r9, r1
 8007fac:	462b      	mov	r3, r5
 8007fae:	4620      	mov	r0, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	f7f8 fb31 	bl	8000618 <__aeabi_dmul>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4640      	mov	r0, r8
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	f7f8 fb2b 	bl	8000618 <__aeabi_dmul>
 8007fc2:	a33f      	add	r3, pc, #252	; (adr r3, 80080c0 <__ieee754_pow+0x3e0>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	f7f8 fb26 	bl	8000618 <__aeabi_dmul>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	4659      	mov	r1, fp
 8007fd4:	f7f8 f968 	bl	80002a8 <__aeabi_dsub>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4680      	mov	r8, r0
 8007fde:	4689      	mov	r9, r1
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	f7f8 f962 	bl	80002ac <__adddf3>
 8007fe8:	2000      	movs	r0, #0
 8007fea:	4632      	mov	r2, r6
 8007fec:	463b      	mov	r3, r7
 8007fee:	4604      	mov	r4, r0
 8007ff0:	460d      	mov	r5, r1
 8007ff2:	f7f8 f959 	bl	80002a8 <__aeabi_dsub>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	f7f8 f953 	bl	80002a8 <__aeabi_dsub>
 8008002:	9b04      	ldr	r3, [sp, #16]
 8008004:	9a06      	ldr	r2, [sp, #24]
 8008006:	3b01      	subs	r3, #1
 8008008:	4313      	orrs	r3, r2
 800800a:	4682      	mov	sl, r0
 800800c:	468b      	mov	fp, r1
 800800e:	f040 81e7 	bne.w	80083e0 <__ieee754_pow+0x700>
 8008012:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80080c8 <__ieee754_pow+0x3e8>
 8008016:	eeb0 8a47 	vmov.f32	s16, s14
 800801a:	eef0 8a67 	vmov.f32	s17, s15
 800801e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008022:	2600      	movs	r6, #0
 8008024:	4632      	mov	r2, r6
 8008026:	463b      	mov	r3, r7
 8008028:	e9dd 0100 	ldrd	r0, r1, [sp]
 800802c:	f7f8 f93c 	bl	80002a8 <__aeabi_dsub>
 8008030:	4622      	mov	r2, r4
 8008032:	462b      	mov	r3, r5
 8008034:	f7f8 faf0 	bl	8000618 <__aeabi_dmul>
 8008038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800803c:	4680      	mov	r8, r0
 800803e:	4689      	mov	r9, r1
 8008040:	4650      	mov	r0, sl
 8008042:	4659      	mov	r1, fp
 8008044:	f7f8 fae8 	bl	8000618 <__aeabi_dmul>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4640      	mov	r0, r8
 800804e:	4649      	mov	r1, r9
 8008050:	f7f8 f92c 	bl	80002ac <__adddf3>
 8008054:	4632      	mov	r2, r6
 8008056:	463b      	mov	r3, r7
 8008058:	4680      	mov	r8, r0
 800805a:	4689      	mov	r9, r1
 800805c:	4620      	mov	r0, r4
 800805e:	4629      	mov	r1, r5
 8008060:	f7f8 fada 	bl	8000618 <__aeabi_dmul>
 8008064:	460b      	mov	r3, r1
 8008066:	4604      	mov	r4, r0
 8008068:	460d      	mov	r5, r1
 800806a:	4602      	mov	r2, r0
 800806c:	4649      	mov	r1, r9
 800806e:	4640      	mov	r0, r8
 8008070:	f7f8 f91c 	bl	80002ac <__adddf3>
 8008074:	4b19      	ldr	r3, [pc, #100]	; (80080dc <__ieee754_pow+0x3fc>)
 8008076:	4299      	cmp	r1, r3
 8008078:	ec45 4b19 	vmov	d9, r4, r5
 800807c:	4606      	mov	r6, r0
 800807e:	460f      	mov	r7, r1
 8008080:	468b      	mov	fp, r1
 8008082:	f340 82f1 	ble.w	8008668 <__ieee754_pow+0x988>
 8008086:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800808a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800808e:	4303      	orrs	r3, r0
 8008090:	f000 81e4 	beq.w	800845c <__ieee754_pow+0x77c>
 8008094:	ec51 0b18 	vmov	r0, r1, d8
 8008098:	2200      	movs	r2, #0
 800809a:	2300      	movs	r3, #0
 800809c:	f7f8 fd2e 	bl	8000afc <__aeabi_dcmplt>
 80080a0:	3800      	subs	r0, #0
 80080a2:	bf18      	it	ne
 80080a4:	2001      	movne	r0, #1
 80080a6:	e72b      	b.n	8007f00 <__ieee754_pow+0x220>
 80080a8:	60000000 	.word	0x60000000
 80080ac:	3ff71547 	.word	0x3ff71547
 80080b0:	f85ddf44 	.word	0xf85ddf44
 80080b4:	3e54ae0b 	.word	0x3e54ae0b
 80080b8:	55555555 	.word	0x55555555
 80080bc:	3fd55555 	.word	0x3fd55555
 80080c0:	652b82fe 	.word	0x652b82fe
 80080c4:	3ff71547 	.word	0x3ff71547
 80080c8:	00000000 	.word	0x00000000
 80080cc:	bff00000 	.word	0xbff00000
 80080d0:	3ff00000 	.word	0x3ff00000
 80080d4:	3fd00000 	.word	0x3fd00000
 80080d8:	3fe00000 	.word	0x3fe00000
 80080dc:	408fffff 	.word	0x408fffff
 80080e0:	4bd5      	ldr	r3, [pc, #852]	; (8008438 <__ieee754_pow+0x758>)
 80080e2:	402b      	ands	r3, r5
 80080e4:	2200      	movs	r2, #0
 80080e6:	b92b      	cbnz	r3, 80080f4 <__ieee754_pow+0x414>
 80080e8:	4bd4      	ldr	r3, [pc, #848]	; (800843c <__ieee754_pow+0x75c>)
 80080ea:	f7f8 fa95 	bl	8000618 <__aeabi_dmul>
 80080ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80080f2:	460c      	mov	r4, r1
 80080f4:	1523      	asrs	r3, r4, #20
 80080f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080fa:	4413      	add	r3, r2
 80080fc:	9305      	str	r3, [sp, #20]
 80080fe:	4bd0      	ldr	r3, [pc, #832]	; (8008440 <__ieee754_pow+0x760>)
 8008100:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008104:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008108:	429c      	cmp	r4, r3
 800810a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800810e:	dd08      	ble.n	8008122 <__ieee754_pow+0x442>
 8008110:	4bcc      	ldr	r3, [pc, #816]	; (8008444 <__ieee754_pow+0x764>)
 8008112:	429c      	cmp	r4, r3
 8008114:	f340 8162 	ble.w	80083dc <__ieee754_pow+0x6fc>
 8008118:	9b05      	ldr	r3, [sp, #20]
 800811a:	3301      	adds	r3, #1
 800811c:	9305      	str	r3, [sp, #20]
 800811e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008122:	2400      	movs	r4, #0
 8008124:	00e3      	lsls	r3, r4, #3
 8008126:	9307      	str	r3, [sp, #28]
 8008128:	4bc7      	ldr	r3, [pc, #796]	; (8008448 <__ieee754_pow+0x768>)
 800812a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800812e:	ed93 7b00 	vldr	d7, [r3]
 8008132:	4629      	mov	r1, r5
 8008134:	ec53 2b17 	vmov	r2, r3, d7
 8008138:	eeb0 9a47 	vmov.f32	s18, s14
 800813c:	eef0 9a67 	vmov.f32	s19, s15
 8008140:	4682      	mov	sl, r0
 8008142:	f7f8 f8b1 	bl	80002a8 <__aeabi_dsub>
 8008146:	4652      	mov	r2, sl
 8008148:	4606      	mov	r6, r0
 800814a:	460f      	mov	r7, r1
 800814c:	462b      	mov	r3, r5
 800814e:	ec51 0b19 	vmov	r0, r1, d9
 8008152:	f7f8 f8ab 	bl	80002ac <__adddf3>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	2000      	movs	r0, #0
 800815c:	49bb      	ldr	r1, [pc, #748]	; (800844c <__ieee754_pow+0x76c>)
 800815e:	f7f8 fb85 	bl	800086c <__aeabi_ddiv>
 8008162:	ec41 0b1a 	vmov	d10, r0, r1
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4630      	mov	r0, r6
 800816c:	4639      	mov	r1, r7
 800816e:	f7f8 fa53 	bl	8000618 <__aeabi_dmul>
 8008172:	2300      	movs	r3, #0
 8008174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008178:	9302      	str	r3, [sp, #8]
 800817a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800817e:	46ab      	mov	fp, r5
 8008180:	106d      	asrs	r5, r5, #1
 8008182:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008186:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800818a:	ec41 0b18 	vmov	d8, r0, r1
 800818e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008192:	2200      	movs	r2, #0
 8008194:	4640      	mov	r0, r8
 8008196:	4649      	mov	r1, r9
 8008198:	4614      	mov	r4, r2
 800819a:	461d      	mov	r5, r3
 800819c:	f7f8 fa3c 	bl	8000618 <__aeabi_dmul>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4630      	mov	r0, r6
 80081a6:	4639      	mov	r1, r7
 80081a8:	f7f8 f87e 	bl	80002a8 <__aeabi_dsub>
 80081ac:	ec53 2b19 	vmov	r2, r3, d9
 80081b0:	4606      	mov	r6, r0
 80081b2:	460f      	mov	r7, r1
 80081b4:	4620      	mov	r0, r4
 80081b6:	4629      	mov	r1, r5
 80081b8:	f7f8 f876 	bl	80002a8 <__aeabi_dsub>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4650      	mov	r0, sl
 80081c2:	4659      	mov	r1, fp
 80081c4:	f7f8 f870 	bl	80002a8 <__aeabi_dsub>
 80081c8:	4642      	mov	r2, r8
 80081ca:	464b      	mov	r3, r9
 80081cc:	f7f8 fa24 	bl	8000618 <__aeabi_dmul>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	4630      	mov	r0, r6
 80081d6:	4639      	mov	r1, r7
 80081d8:	f7f8 f866 	bl	80002a8 <__aeabi_dsub>
 80081dc:	ec53 2b1a 	vmov	r2, r3, d10
 80081e0:	f7f8 fa1a 	bl	8000618 <__aeabi_dmul>
 80081e4:	ec53 2b18 	vmov	r2, r3, d8
 80081e8:	ec41 0b19 	vmov	d9, r0, r1
 80081ec:	ec51 0b18 	vmov	r0, r1, d8
 80081f0:	f7f8 fa12 	bl	8000618 <__aeabi_dmul>
 80081f4:	a37c      	add	r3, pc, #496	; (adr r3, 80083e8 <__ieee754_pow+0x708>)
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	4604      	mov	r4, r0
 80081fc:	460d      	mov	r5, r1
 80081fe:	f7f8 fa0b 	bl	8000618 <__aeabi_dmul>
 8008202:	a37b      	add	r3, pc, #492	; (adr r3, 80083f0 <__ieee754_pow+0x710>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 f850 	bl	80002ac <__adddf3>
 800820c:	4622      	mov	r2, r4
 800820e:	462b      	mov	r3, r5
 8008210:	f7f8 fa02 	bl	8000618 <__aeabi_dmul>
 8008214:	a378      	add	r3, pc, #480	; (adr r3, 80083f8 <__ieee754_pow+0x718>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f7f8 f847 	bl	80002ac <__adddf3>
 800821e:	4622      	mov	r2, r4
 8008220:	462b      	mov	r3, r5
 8008222:	f7f8 f9f9 	bl	8000618 <__aeabi_dmul>
 8008226:	a376      	add	r3, pc, #472	; (adr r3, 8008400 <__ieee754_pow+0x720>)
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	f7f8 f83e 	bl	80002ac <__adddf3>
 8008230:	4622      	mov	r2, r4
 8008232:	462b      	mov	r3, r5
 8008234:	f7f8 f9f0 	bl	8000618 <__aeabi_dmul>
 8008238:	a373      	add	r3, pc, #460	; (adr r3, 8008408 <__ieee754_pow+0x728>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f8 f835 	bl	80002ac <__adddf3>
 8008242:	4622      	mov	r2, r4
 8008244:	462b      	mov	r3, r5
 8008246:	f7f8 f9e7 	bl	8000618 <__aeabi_dmul>
 800824a:	a371      	add	r3, pc, #452	; (adr r3, 8008410 <__ieee754_pow+0x730>)
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f7f8 f82c 	bl	80002ac <__adddf3>
 8008254:	4622      	mov	r2, r4
 8008256:	4606      	mov	r6, r0
 8008258:	460f      	mov	r7, r1
 800825a:	462b      	mov	r3, r5
 800825c:	4620      	mov	r0, r4
 800825e:	4629      	mov	r1, r5
 8008260:	f7f8 f9da 	bl	8000618 <__aeabi_dmul>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4630      	mov	r0, r6
 800826a:	4639      	mov	r1, r7
 800826c:	f7f8 f9d4 	bl	8000618 <__aeabi_dmul>
 8008270:	4642      	mov	r2, r8
 8008272:	4604      	mov	r4, r0
 8008274:	460d      	mov	r5, r1
 8008276:	464b      	mov	r3, r9
 8008278:	ec51 0b18 	vmov	r0, r1, d8
 800827c:	f7f8 f816 	bl	80002ac <__adddf3>
 8008280:	ec53 2b19 	vmov	r2, r3, d9
 8008284:	f7f8 f9c8 	bl	8000618 <__aeabi_dmul>
 8008288:	4622      	mov	r2, r4
 800828a:	462b      	mov	r3, r5
 800828c:	f7f8 f80e 	bl	80002ac <__adddf3>
 8008290:	4642      	mov	r2, r8
 8008292:	4682      	mov	sl, r0
 8008294:	468b      	mov	fp, r1
 8008296:	464b      	mov	r3, r9
 8008298:	4640      	mov	r0, r8
 800829a:	4649      	mov	r1, r9
 800829c:	f7f8 f9bc 	bl	8000618 <__aeabi_dmul>
 80082a0:	4b6b      	ldr	r3, [pc, #428]	; (8008450 <__ieee754_pow+0x770>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	4606      	mov	r6, r0
 80082a6:	460f      	mov	r7, r1
 80082a8:	f7f8 f800 	bl	80002ac <__adddf3>
 80082ac:	4652      	mov	r2, sl
 80082ae:	465b      	mov	r3, fp
 80082b0:	f7f7 fffc 	bl	80002ac <__adddf3>
 80082b4:	2000      	movs	r0, #0
 80082b6:	4604      	mov	r4, r0
 80082b8:	460d      	mov	r5, r1
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4640      	mov	r0, r8
 80082c0:	4649      	mov	r1, r9
 80082c2:	f7f8 f9a9 	bl	8000618 <__aeabi_dmul>
 80082c6:	4b62      	ldr	r3, [pc, #392]	; (8008450 <__ieee754_pow+0x770>)
 80082c8:	4680      	mov	r8, r0
 80082ca:	4689      	mov	r9, r1
 80082cc:	2200      	movs	r2, #0
 80082ce:	4620      	mov	r0, r4
 80082d0:	4629      	mov	r1, r5
 80082d2:	f7f7 ffe9 	bl	80002a8 <__aeabi_dsub>
 80082d6:	4632      	mov	r2, r6
 80082d8:	463b      	mov	r3, r7
 80082da:	f7f7 ffe5 	bl	80002a8 <__aeabi_dsub>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4650      	mov	r0, sl
 80082e4:	4659      	mov	r1, fp
 80082e6:	f7f7 ffdf 	bl	80002a8 <__aeabi_dsub>
 80082ea:	ec53 2b18 	vmov	r2, r3, d8
 80082ee:	f7f8 f993 	bl	8000618 <__aeabi_dmul>
 80082f2:	4622      	mov	r2, r4
 80082f4:	4606      	mov	r6, r0
 80082f6:	460f      	mov	r7, r1
 80082f8:	462b      	mov	r3, r5
 80082fa:	ec51 0b19 	vmov	r0, r1, d9
 80082fe:	f7f8 f98b 	bl	8000618 <__aeabi_dmul>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4630      	mov	r0, r6
 8008308:	4639      	mov	r1, r7
 800830a:	f7f7 ffcf 	bl	80002ac <__adddf3>
 800830e:	4606      	mov	r6, r0
 8008310:	460f      	mov	r7, r1
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4640      	mov	r0, r8
 8008318:	4649      	mov	r1, r9
 800831a:	f7f7 ffc7 	bl	80002ac <__adddf3>
 800831e:	a33e      	add	r3, pc, #248	; (adr r3, 8008418 <__ieee754_pow+0x738>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	2000      	movs	r0, #0
 8008326:	4604      	mov	r4, r0
 8008328:	460d      	mov	r5, r1
 800832a:	f7f8 f975 	bl	8000618 <__aeabi_dmul>
 800832e:	4642      	mov	r2, r8
 8008330:	ec41 0b18 	vmov	d8, r0, r1
 8008334:	464b      	mov	r3, r9
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	f7f7 ffb5 	bl	80002a8 <__aeabi_dsub>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4630      	mov	r0, r6
 8008344:	4639      	mov	r1, r7
 8008346:	f7f7 ffaf 	bl	80002a8 <__aeabi_dsub>
 800834a:	a335      	add	r3, pc, #212	; (adr r3, 8008420 <__ieee754_pow+0x740>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f8 f962 	bl	8000618 <__aeabi_dmul>
 8008354:	a334      	add	r3, pc, #208	; (adr r3, 8008428 <__ieee754_pow+0x748>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	4606      	mov	r6, r0
 800835c:	460f      	mov	r7, r1
 800835e:	4620      	mov	r0, r4
 8008360:	4629      	mov	r1, r5
 8008362:	f7f8 f959 	bl	8000618 <__aeabi_dmul>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4630      	mov	r0, r6
 800836c:	4639      	mov	r1, r7
 800836e:	f7f7 ff9d 	bl	80002ac <__adddf3>
 8008372:	9a07      	ldr	r2, [sp, #28]
 8008374:	4b37      	ldr	r3, [pc, #220]	; (8008454 <__ieee754_pow+0x774>)
 8008376:	4413      	add	r3, r2
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f7f7 ff96 	bl	80002ac <__adddf3>
 8008380:	4682      	mov	sl, r0
 8008382:	9805      	ldr	r0, [sp, #20]
 8008384:	468b      	mov	fp, r1
 8008386:	f7f8 f8dd 	bl	8000544 <__aeabi_i2d>
 800838a:	9a07      	ldr	r2, [sp, #28]
 800838c:	4b32      	ldr	r3, [pc, #200]	; (8008458 <__ieee754_pow+0x778>)
 800838e:	4413      	add	r3, r2
 8008390:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008394:	4606      	mov	r6, r0
 8008396:	460f      	mov	r7, r1
 8008398:	4652      	mov	r2, sl
 800839a:	465b      	mov	r3, fp
 800839c:	ec51 0b18 	vmov	r0, r1, d8
 80083a0:	f7f7 ff84 	bl	80002ac <__adddf3>
 80083a4:	4642      	mov	r2, r8
 80083a6:	464b      	mov	r3, r9
 80083a8:	f7f7 ff80 	bl	80002ac <__adddf3>
 80083ac:	4632      	mov	r2, r6
 80083ae:	463b      	mov	r3, r7
 80083b0:	f7f7 ff7c 	bl	80002ac <__adddf3>
 80083b4:	2000      	movs	r0, #0
 80083b6:	4632      	mov	r2, r6
 80083b8:	463b      	mov	r3, r7
 80083ba:	4604      	mov	r4, r0
 80083bc:	460d      	mov	r5, r1
 80083be:	f7f7 ff73 	bl	80002a8 <__aeabi_dsub>
 80083c2:	4642      	mov	r2, r8
 80083c4:	464b      	mov	r3, r9
 80083c6:	f7f7 ff6f 	bl	80002a8 <__aeabi_dsub>
 80083ca:	ec53 2b18 	vmov	r2, r3, d8
 80083ce:	f7f7 ff6b 	bl	80002a8 <__aeabi_dsub>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	4650      	mov	r0, sl
 80083d8:	4659      	mov	r1, fp
 80083da:	e610      	b.n	8007ffe <__ieee754_pow+0x31e>
 80083dc:	2401      	movs	r4, #1
 80083de:	e6a1      	b.n	8008124 <__ieee754_pow+0x444>
 80083e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008430 <__ieee754_pow+0x750>
 80083e4:	e617      	b.n	8008016 <__ieee754_pow+0x336>
 80083e6:	bf00      	nop
 80083e8:	4a454eef 	.word	0x4a454eef
 80083ec:	3fca7e28 	.word	0x3fca7e28
 80083f0:	93c9db65 	.word	0x93c9db65
 80083f4:	3fcd864a 	.word	0x3fcd864a
 80083f8:	a91d4101 	.word	0xa91d4101
 80083fc:	3fd17460 	.word	0x3fd17460
 8008400:	518f264d 	.word	0x518f264d
 8008404:	3fd55555 	.word	0x3fd55555
 8008408:	db6fabff 	.word	0xdb6fabff
 800840c:	3fdb6db6 	.word	0x3fdb6db6
 8008410:	33333303 	.word	0x33333303
 8008414:	3fe33333 	.word	0x3fe33333
 8008418:	e0000000 	.word	0xe0000000
 800841c:	3feec709 	.word	0x3feec709
 8008420:	dc3a03fd 	.word	0xdc3a03fd
 8008424:	3feec709 	.word	0x3feec709
 8008428:	145b01f5 	.word	0x145b01f5
 800842c:	be3e2fe0 	.word	0xbe3e2fe0
 8008430:	00000000 	.word	0x00000000
 8008434:	3ff00000 	.word	0x3ff00000
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	43400000 	.word	0x43400000
 8008440:	0003988e 	.word	0x0003988e
 8008444:	000bb679 	.word	0x000bb679
 8008448:	08009bd8 	.word	0x08009bd8
 800844c:	3ff00000 	.word	0x3ff00000
 8008450:	40080000 	.word	0x40080000
 8008454:	08009bf8 	.word	0x08009bf8
 8008458:	08009be8 	.word	0x08009be8
 800845c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008734 <__ieee754_pow+0xa54>)
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	4640      	mov	r0, r8
 8008464:	4649      	mov	r1, r9
 8008466:	f7f7 ff21 	bl	80002ac <__adddf3>
 800846a:	4622      	mov	r2, r4
 800846c:	ec41 0b1a 	vmov	d10, r0, r1
 8008470:	462b      	mov	r3, r5
 8008472:	4630      	mov	r0, r6
 8008474:	4639      	mov	r1, r7
 8008476:	f7f7 ff17 	bl	80002a8 <__aeabi_dsub>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	ec51 0b1a 	vmov	r0, r1, d10
 8008482:	f7f8 fb59 	bl	8000b38 <__aeabi_dcmpgt>
 8008486:	2800      	cmp	r0, #0
 8008488:	f47f ae04 	bne.w	8008094 <__ieee754_pow+0x3b4>
 800848c:	4aa4      	ldr	r2, [pc, #656]	; (8008720 <__ieee754_pow+0xa40>)
 800848e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008492:	4293      	cmp	r3, r2
 8008494:	f340 8108 	ble.w	80086a8 <__ieee754_pow+0x9c8>
 8008498:	151b      	asrs	r3, r3, #20
 800849a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800849e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80084a2:	fa4a f303 	asr.w	r3, sl, r3
 80084a6:	445b      	add	r3, fp
 80084a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80084ac:	4e9d      	ldr	r6, [pc, #628]	; (8008724 <__ieee754_pow+0xa44>)
 80084ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80084b2:	4116      	asrs	r6, r2
 80084b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80084b8:	2000      	movs	r0, #0
 80084ba:	ea23 0106 	bic.w	r1, r3, r6
 80084be:	f1c2 0214 	rsb	r2, r2, #20
 80084c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80084c6:	fa4a fa02 	asr.w	sl, sl, r2
 80084ca:	f1bb 0f00 	cmp.w	fp, #0
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4620      	mov	r0, r4
 80084d4:	4629      	mov	r1, r5
 80084d6:	bfb8      	it	lt
 80084d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80084dc:	f7f7 fee4 	bl	80002a8 <__aeabi_dsub>
 80084e0:	ec41 0b19 	vmov	d9, r0, r1
 80084e4:	4642      	mov	r2, r8
 80084e6:	464b      	mov	r3, r9
 80084e8:	ec51 0b19 	vmov	r0, r1, d9
 80084ec:	f7f7 fede 	bl	80002ac <__adddf3>
 80084f0:	a37b      	add	r3, pc, #492	; (adr r3, 80086e0 <__ieee754_pow+0xa00>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	2000      	movs	r0, #0
 80084f8:	4604      	mov	r4, r0
 80084fa:	460d      	mov	r5, r1
 80084fc:	f7f8 f88c 	bl	8000618 <__aeabi_dmul>
 8008500:	ec53 2b19 	vmov	r2, r3, d9
 8008504:	4606      	mov	r6, r0
 8008506:	460f      	mov	r7, r1
 8008508:	4620      	mov	r0, r4
 800850a:	4629      	mov	r1, r5
 800850c:	f7f7 fecc 	bl	80002a8 <__aeabi_dsub>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4640      	mov	r0, r8
 8008516:	4649      	mov	r1, r9
 8008518:	f7f7 fec6 	bl	80002a8 <__aeabi_dsub>
 800851c:	a372      	add	r3, pc, #456	; (adr r3, 80086e8 <__ieee754_pow+0xa08>)
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f7f8 f879 	bl	8000618 <__aeabi_dmul>
 8008526:	a372      	add	r3, pc, #456	; (adr r3, 80086f0 <__ieee754_pow+0xa10>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	4680      	mov	r8, r0
 800852e:	4689      	mov	r9, r1
 8008530:	4620      	mov	r0, r4
 8008532:	4629      	mov	r1, r5
 8008534:	f7f8 f870 	bl	8000618 <__aeabi_dmul>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4640      	mov	r0, r8
 800853e:	4649      	mov	r1, r9
 8008540:	f7f7 feb4 	bl	80002ac <__adddf3>
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4630      	mov	r0, r6
 800854e:	4639      	mov	r1, r7
 8008550:	f7f7 feac 	bl	80002ac <__adddf3>
 8008554:	4632      	mov	r2, r6
 8008556:	463b      	mov	r3, r7
 8008558:	4680      	mov	r8, r0
 800855a:	4689      	mov	r9, r1
 800855c:	f7f7 fea4 	bl	80002a8 <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4620      	mov	r0, r4
 8008566:	4629      	mov	r1, r5
 8008568:	f7f7 fe9e 	bl	80002a8 <__aeabi_dsub>
 800856c:	4642      	mov	r2, r8
 800856e:	4606      	mov	r6, r0
 8008570:	460f      	mov	r7, r1
 8008572:	464b      	mov	r3, r9
 8008574:	4640      	mov	r0, r8
 8008576:	4649      	mov	r1, r9
 8008578:	f7f8 f84e 	bl	8000618 <__aeabi_dmul>
 800857c:	a35e      	add	r3, pc, #376	; (adr r3, 80086f8 <__ieee754_pow+0xa18>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	4604      	mov	r4, r0
 8008584:	460d      	mov	r5, r1
 8008586:	f7f8 f847 	bl	8000618 <__aeabi_dmul>
 800858a:	a35d      	add	r3, pc, #372	; (adr r3, 8008700 <__ieee754_pow+0xa20>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f7f7 fe8a 	bl	80002a8 <__aeabi_dsub>
 8008594:	4622      	mov	r2, r4
 8008596:	462b      	mov	r3, r5
 8008598:	f7f8 f83e 	bl	8000618 <__aeabi_dmul>
 800859c:	a35a      	add	r3, pc, #360	; (adr r3, 8008708 <__ieee754_pow+0xa28>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	f7f7 fe83 	bl	80002ac <__adddf3>
 80085a6:	4622      	mov	r2, r4
 80085a8:	462b      	mov	r3, r5
 80085aa:	f7f8 f835 	bl	8000618 <__aeabi_dmul>
 80085ae:	a358      	add	r3, pc, #352	; (adr r3, 8008710 <__ieee754_pow+0xa30>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f7f7 fe78 	bl	80002a8 <__aeabi_dsub>
 80085b8:	4622      	mov	r2, r4
 80085ba:	462b      	mov	r3, r5
 80085bc:	f7f8 f82c 	bl	8000618 <__aeabi_dmul>
 80085c0:	a355      	add	r3, pc, #340	; (adr r3, 8008718 <__ieee754_pow+0xa38>)
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	f7f7 fe71 	bl	80002ac <__adddf3>
 80085ca:	4622      	mov	r2, r4
 80085cc:	462b      	mov	r3, r5
 80085ce:	f7f8 f823 	bl	8000618 <__aeabi_dmul>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	4640      	mov	r0, r8
 80085d8:	4649      	mov	r1, r9
 80085da:	f7f7 fe65 	bl	80002a8 <__aeabi_dsub>
 80085de:	4604      	mov	r4, r0
 80085e0:	460d      	mov	r5, r1
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4640      	mov	r0, r8
 80085e8:	4649      	mov	r1, r9
 80085ea:	f7f8 f815 	bl	8000618 <__aeabi_dmul>
 80085ee:	2200      	movs	r2, #0
 80085f0:	ec41 0b19 	vmov	d9, r0, r1
 80085f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085f8:	4620      	mov	r0, r4
 80085fa:	4629      	mov	r1, r5
 80085fc:	f7f7 fe54 	bl	80002a8 <__aeabi_dsub>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	ec51 0b19 	vmov	r0, r1, d9
 8008608:	f7f8 f930 	bl	800086c <__aeabi_ddiv>
 800860c:	4632      	mov	r2, r6
 800860e:	4604      	mov	r4, r0
 8008610:	460d      	mov	r5, r1
 8008612:	463b      	mov	r3, r7
 8008614:	4640      	mov	r0, r8
 8008616:	4649      	mov	r1, r9
 8008618:	f7f7 fffe 	bl	8000618 <__aeabi_dmul>
 800861c:	4632      	mov	r2, r6
 800861e:	463b      	mov	r3, r7
 8008620:	f7f7 fe44 	bl	80002ac <__adddf3>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4620      	mov	r0, r4
 800862a:	4629      	mov	r1, r5
 800862c:	f7f7 fe3c 	bl	80002a8 <__aeabi_dsub>
 8008630:	4642      	mov	r2, r8
 8008632:	464b      	mov	r3, r9
 8008634:	f7f7 fe38 	bl	80002a8 <__aeabi_dsub>
 8008638:	460b      	mov	r3, r1
 800863a:	4602      	mov	r2, r0
 800863c:	493a      	ldr	r1, [pc, #232]	; (8008728 <__ieee754_pow+0xa48>)
 800863e:	2000      	movs	r0, #0
 8008640:	f7f7 fe32 	bl	80002a8 <__aeabi_dsub>
 8008644:	ec41 0b10 	vmov	d0, r0, r1
 8008648:	ee10 3a90 	vmov	r3, s1
 800864c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008654:	da2b      	bge.n	80086ae <__ieee754_pow+0x9ce>
 8008656:	4650      	mov	r0, sl
 8008658:	f001 f8ce 	bl	80097f8 <scalbn>
 800865c:	ec51 0b10 	vmov	r0, r1, d0
 8008660:	ec53 2b18 	vmov	r2, r3, d8
 8008664:	f7ff bbed 	b.w	8007e42 <__ieee754_pow+0x162>
 8008668:	4b30      	ldr	r3, [pc, #192]	; (800872c <__ieee754_pow+0xa4c>)
 800866a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800866e:	429e      	cmp	r6, r3
 8008670:	f77f af0c 	ble.w	800848c <__ieee754_pow+0x7ac>
 8008674:	4b2e      	ldr	r3, [pc, #184]	; (8008730 <__ieee754_pow+0xa50>)
 8008676:	440b      	add	r3, r1
 8008678:	4303      	orrs	r3, r0
 800867a:	d009      	beq.n	8008690 <__ieee754_pow+0x9b0>
 800867c:	ec51 0b18 	vmov	r0, r1, d8
 8008680:	2200      	movs	r2, #0
 8008682:	2300      	movs	r3, #0
 8008684:	f7f8 fa3a 	bl	8000afc <__aeabi_dcmplt>
 8008688:	3800      	subs	r0, #0
 800868a:	bf18      	it	ne
 800868c:	2001      	movne	r0, #1
 800868e:	e447      	b.n	8007f20 <__ieee754_pow+0x240>
 8008690:	4622      	mov	r2, r4
 8008692:	462b      	mov	r3, r5
 8008694:	f7f7 fe08 	bl	80002a8 <__aeabi_dsub>
 8008698:	4642      	mov	r2, r8
 800869a:	464b      	mov	r3, r9
 800869c:	f7f8 fa42 	bl	8000b24 <__aeabi_dcmpge>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	f43f aef3 	beq.w	800848c <__ieee754_pow+0x7ac>
 80086a6:	e7e9      	b.n	800867c <__ieee754_pow+0x99c>
 80086a8:	f04f 0a00 	mov.w	sl, #0
 80086ac:	e71a      	b.n	80084e4 <__ieee754_pow+0x804>
 80086ae:	ec51 0b10 	vmov	r0, r1, d0
 80086b2:	4619      	mov	r1, r3
 80086b4:	e7d4      	b.n	8008660 <__ieee754_pow+0x980>
 80086b6:	491c      	ldr	r1, [pc, #112]	; (8008728 <__ieee754_pow+0xa48>)
 80086b8:	2000      	movs	r0, #0
 80086ba:	f7ff bb30 	b.w	8007d1e <__ieee754_pow+0x3e>
 80086be:	2000      	movs	r0, #0
 80086c0:	2100      	movs	r1, #0
 80086c2:	f7ff bb2c 	b.w	8007d1e <__ieee754_pow+0x3e>
 80086c6:	4630      	mov	r0, r6
 80086c8:	4639      	mov	r1, r7
 80086ca:	f7ff bb28 	b.w	8007d1e <__ieee754_pow+0x3e>
 80086ce:	9204      	str	r2, [sp, #16]
 80086d0:	f7ff bb7a 	b.w	8007dc8 <__ieee754_pow+0xe8>
 80086d4:	2300      	movs	r3, #0
 80086d6:	f7ff bb64 	b.w	8007da2 <__ieee754_pow+0xc2>
 80086da:	bf00      	nop
 80086dc:	f3af 8000 	nop.w
 80086e0:	00000000 	.word	0x00000000
 80086e4:	3fe62e43 	.word	0x3fe62e43
 80086e8:	fefa39ef 	.word	0xfefa39ef
 80086ec:	3fe62e42 	.word	0x3fe62e42
 80086f0:	0ca86c39 	.word	0x0ca86c39
 80086f4:	be205c61 	.word	0xbe205c61
 80086f8:	72bea4d0 	.word	0x72bea4d0
 80086fc:	3e663769 	.word	0x3e663769
 8008700:	c5d26bf1 	.word	0xc5d26bf1
 8008704:	3ebbbd41 	.word	0x3ebbbd41
 8008708:	af25de2c 	.word	0xaf25de2c
 800870c:	3f11566a 	.word	0x3f11566a
 8008710:	16bebd93 	.word	0x16bebd93
 8008714:	3f66c16c 	.word	0x3f66c16c
 8008718:	5555553e 	.word	0x5555553e
 800871c:	3fc55555 	.word	0x3fc55555
 8008720:	3fe00000 	.word	0x3fe00000
 8008724:	000fffff 	.word	0x000fffff
 8008728:	3ff00000 	.word	0x3ff00000
 800872c:	4090cbff 	.word	0x4090cbff
 8008730:	3f6f3400 	.word	0x3f6f3400
 8008734:	652b82fe 	.word	0x652b82fe
 8008738:	3c971547 	.word	0x3c971547
 800873c:	00000000 	.word	0x00000000

08008740 <__ieee754_rem_pio2>:
 8008740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008744:	ed2d 8b02 	vpush	{d8}
 8008748:	ec55 4b10 	vmov	r4, r5, d0
 800874c:	4bca      	ldr	r3, [pc, #808]	; (8008a78 <__ieee754_rem_pio2+0x338>)
 800874e:	b08b      	sub	sp, #44	; 0x2c
 8008750:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008754:	4598      	cmp	r8, r3
 8008756:	4682      	mov	sl, r0
 8008758:	9502      	str	r5, [sp, #8]
 800875a:	dc08      	bgt.n	800876e <__ieee754_rem_pio2+0x2e>
 800875c:	2200      	movs	r2, #0
 800875e:	2300      	movs	r3, #0
 8008760:	ed80 0b00 	vstr	d0, [r0]
 8008764:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008768:	f04f 0b00 	mov.w	fp, #0
 800876c:	e028      	b.n	80087c0 <__ieee754_rem_pio2+0x80>
 800876e:	4bc3      	ldr	r3, [pc, #780]	; (8008a7c <__ieee754_rem_pio2+0x33c>)
 8008770:	4598      	cmp	r8, r3
 8008772:	dc78      	bgt.n	8008866 <__ieee754_rem_pio2+0x126>
 8008774:	9b02      	ldr	r3, [sp, #8]
 8008776:	4ec2      	ldr	r6, [pc, #776]	; (8008a80 <__ieee754_rem_pio2+0x340>)
 8008778:	2b00      	cmp	r3, #0
 800877a:	ee10 0a10 	vmov	r0, s0
 800877e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008a40 <__ieee754_rem_pio2+0x300>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	4629      	mov	r1, r5
 8008786:	dd39      	ble.n	80087fc <__ieee754_rem_pio2+0xbc>
 8008788:	f7f7 fd8e 	bl	80002a8 <__aeabi_dsub>
 800878c:	45b0      	cmp	r8, r6
 800878e:	4604      	mov	r4, r0
 8008790:	460d      	mov	r5, r1
 8008792:	d01b      	beq.n	80087cc <__ieee754_rem_pio2+0x8c>
 8008794:	a3ac      	add	r3, pc, #688	; (adr r3, 8008a48 <__ieee754_rem_pio2+0x308>)
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	f7f7 fd85 	bl	80002a8 <__aeabi_dsub>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	e9ca 2300 	strd	r2, r3, [sl]
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f7 fd7d 	bl	80002a8 <__aeabi_dsub>
 80087ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8008a48 <__ieee754_rem_pio2+0x308>)
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	f7f7 fd78 	bl	80002a8 <__aeabi_dsub>
 80087b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80087bc:	f04f 0b01 	mov.w	fp, #1
 80087c0:	4658      	mov	r0, fp
 80087c2:	b00b      	add	sp, #44	; 0x2c
 80087c4:	ecbd 8b02 	vpop	{d8}
 80087c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8008a50 <__ieee754_rem_pio2+0x310>)
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	f7f7 fd69 	bl	80002a8 <__aeabi_dsub>
 80087d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008a58 <__ieee754_rem_pio2+0x318>)
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	4604      	mov	r4, r0
 80087de:	460d      	mov	r5, r1
 80087e0:	f7f7 fd62 	bl	80002a8 <__aeabi_dsub>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	e9ca 2300 	strd	r2, r3, [sl]
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	f7f7 fd5a 	bl	80002a8 <__aeabi_dsub>
 80087f4:	a398      	add	r3, pc, #608	; (adr r3, 8008a58 <__ieee754_rem_pio2+0x318>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	e7db      	b.n	80087b4 <__ieee754_rem_pio2+0x74>
 80087fc:	f7f7 fd56 	bl	80002ac <__adddf3>
 8008800:	45b0      	cmp	r8, r6
 8008802:	4604      	mov	r4, r0
 8008804:	460d      	mov	r5, r1
 8008806:	d016      	beq.n	8008836 <__ieee754_rem_pio2+0xf6>
 8008808:	a38f      	add	r3, pc, #572	; (adr r3, 8008a48 <__ieee754_rem_pio2+0x308>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	f7f7 fd4d 	bl	80002ac <__adddf3>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	e9ca 2300 	strd	r2, r3, [sl]
 800881a:	4620      	mov	r0, r4
 800881c:	4629      	mov	r1, r5
 800881e:	f7f7 fd43 	bl	80002a8 <__aeabi_dsub>
 8008822:	a389      	add	r3, pc, #548	; (adr r3, 8008a48 <__ieee754_rem_pio2+0x308>)
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f7f7 fd40 	bl	80002ac <__adddf3>
 800882c:	f04f 3bff 	mov.w	fp, #4294967295
 8008830:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008834:	e7c4      	b.n	80087c0 <__ieee754_rem_pio2+0x80>
 8008836:	a386      	add	r3, pc, #536	; (adr r3, 8008a50 <__ieee754_rem_pio2+0x310>)
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	f7f7 fd36 	bl	80002ac <__adddf3>
 8008840:	a385      	add	r3, pc, #532	; (adr r3, 8008a58 <__ieee754_rem_pio2+0x318>)
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	4604      	mov	r4, r0
 8008848:	460d      	mov	r5, r1
 800884a:	f7f7 fd2f 	bl	80002ac <__adddf3>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	e9ca 2300 	strd	r2, r3, [sl]
 8008856:	4620      	mov	r0, r4
 8008858:	4629      	mov	r1, r5
 800885a:	f7f7 fd25 	bl	80002a8 <__aeabi_dsub>
 800885e:	a37e      	add	r3, pc, #504	; (adr r3, 8008a58 <__ieee754_rem_pio2+0x318>)
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	e7e0      	b.n	8008828 <__ieee754_rem_pio2+0xe8>
 8008866:	4b87      	ldr	r3, [pc, #540]	; (8008a84 <__ieee754_rem_pio2+0x344>)
 8008868:	4598      	cmp	r8, r3
 800886a:	f300 80d9 	bgt.w	8008a20 <__ieee754_rem_pio2+0x2e0>
 800886e:	f000 ff2d 	bl	80096cc <fabs>
 8008872:	ec55 4b10 	vmov	r4, r5, d0
 8008876:	ee10 0a10 	vmov	r0, s0
 800887a:	a379      	add	r3, pc, #484	; (adr r3, 8008a60 <__ieee754_rem_pio2+0x320>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	4629      	mov	r1, r5
 8008882:	f7f7 fec9 	bl	8000618 <__aeabi_dmul>
 8008886:	4b80      	ldr	r3, [pc, #512]	; (8008a88 <__ieee754_rem_pio2+0x348>)
 8008888:	2200      	movs	r2, #0
 800888a:	f7f7 fd0f 	bl	80002ac <__adddf3>
 800888e:	f7f8 f973 	bl	8000b78 <__aeabi_d2iz>
 8008892:	4683      	mov	fp, r0
 8008894:	f7f7 fe56 	bl	8000544 <__aeabi_i2d>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	ec43 2b18 	vmov	d8, r2, r3
 80088a0:	a367      	add	r3, pc, #412	; (adr r3, 8008a40 <__ieee754_rem_pio2+0x300>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 feb7 	bl	8000618 <__aeabi_dmul>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4620      	mov	r0, r4
 80088b0:	4629      	mov	r1, r5
 80088b2:	f7f7 fcf9 	bl	80002a8 <__aeabi_dsub>
 80088b6:	a364      	add	r3, pc, #400	; (adr r3, 8008a48 <__ieee754_rem_pio2+0x308>)
 80088b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088bc:	4606      	mov	r6, r0
 80088be:	460f      	mov	r7, r1
 80088c0:	ec51 0b18 	vmov	r0, r1, d8
 80088c4:	f7f7 fea8 	bl	8000618 <__aeabi_dmul>
 80088c8:	f1bb 0f1f 	cmp.w	fp, #31
 80088cc:	4604      	mov	r4, r0
 80088ce:	460d      	mov	r5, r1
 80088d0:	dc0d      	bgt.n	80088ee <__ieee754_rem_pio2+0x1ae>
 80088d2:	4b6e      	ldr	r3, [pc, #440]	; (8008a8c <__ieee754_rem_pio2+0x34c>)
 80088d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80088d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088dc:	4543      	cmp	r3, r8
 80088de:	d006      	beq.n	80088ee <__ieee754_rem_pio2+0x1ae>
 80088e0:	4622      	mov	r2, r4
 80088e2:	462b      	mov	r3, r5
 80088e4:	4630      	mov	r0, r6
 80088e6:	4639      	mov	r1, r7
 80088e8:	f7f7 fcde 	bl	80002a8 <__aeabi_dsub>
 80088ec:	e00f      	b.n	800890e <__ieee754_rem_pio2+0x1ce>
 80088ee:	462b      	mov	r3, r5
 80088f0:	4622      	mov	r2, r4
 80088f2:	4630      	mov	r0, r6
 80088f4:	4639      	mov	r1, r7
 80088f6:	f7f7 fcd7 	bl	80002a8 <__aeabi_dsub>
 80088fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80088fe:	9303      	str	r3, [sp, #12]
 8008900:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008904:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008908:	f1b8 0f10 	cmp.w	r8, #16
 800890c:	dc02      	bgt.n	8008914 <__ieee754_rem_pio2+0x1d4>
 800890e:	e9ca 0100 	strd	r0, r1, [sl]
 8008912:	e039      	b.n	8008988 <__ieee754_rem_pio2+0x248>
 8008914:	a34e      	add	r3, pc, #312	; (adr r3, 8008a50 <__ieee754_rem_pio2+0x310>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	ec51 0b18 	vmov	r0, r1, d8
 800891e:	f7f7 fe7b 	bl	8000618 <__aeabi_dmul>
 8008922:	4604      	mov	r4, r0
 8008924:	460d      	mov	r5, r1
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4630      	mov	r0, r6
 800892c:	4639      	mov	r1, r7
 800892e:	f7f7 fcbb 	bl	80002a8 <__aeabi_dsub>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4680      	mov	r8, r0
 8008938:	4689      	mov	r9, r1
 800893a:	4630      	mov	r0, r6
 800893c:	4639      	mov	r1, r7
 800893e:	f7f7 fcb3 	bl	80002a8 <__aeabi_dsub>
 8008942:	4622      	mov	r2, r4
 8008944:	462b      	mov	r3, r5
 8008946:	f7f7 fcaf 	bl	80002a8 <__aeabi_dsub>
 800894a:	a343      	add	r3, pc, #268	; (adr r3, 8008a58 <__ieee754_rem_pio2+0x318>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	4604      	mov	r4, r0
 8008952:	460d      	mov	r5, r1
 8008954:	ec51 0b18 	vmov	r0, r1, d8
 8008958:	f7f7 fe5e 	bl	8000618 <__aeabi_dmul>
 800895c:	4622      	mov	r2, r4
 800895e:	462b      	mov	r3, r5
 8008960:	f7f7 fca2 	bl	80002a8 <__aeabi_dsub>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4604      	mov	r4, r0
 800896a:	460d      	mov	r5, r1
 800896c:	4640      	mov	r0, r8
 800896e:	4649      	mov	r1, r9
 8008970:	f7f7 fc9a 	bl	80002a8 <__aeabi_dsub>
 8008974:	9a03      	ldr	r2, [sp, #12]
 8008976:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	2b31      	cmp	r3, #49	; 0x31
 800897e:	dc24      	bgt.n	80089ca <__ieee754_rem_pio2+0x28a>
 8008980:	e9ca 0100 	strd	r0, r1, [sl]
 8008984:	4646      	mov	r6, r8
 8008986:	464f      	mov	r7, r9
 8008988:	e9da 8900 	ldrd	r8, r9, [sl]
 800898c:	4630      	mov	r0, r6
 800898e:	4642      	mov	r2, r8
 8008990:	464b      	mov	r3, r9
 8008992:	4639      	mov	r1, r7
 8008994:	f7f7 fc88 	bl	80002a8 <__aeabi_dsub>
 8008998:	462b      	mov	r3, r5
 800899a:	4622      	mov	r2, r4
 800899c:	f7f7 fc84 	bl	80002a8 <__aeabi_dsub>
 80089a0:	9b02      	ldr	r3, [sp, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80089a8:	f6bf af0a 	bge.w	80087c0 <__ieee754_rem_pio2+0x80>
 80089ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80089b0:	f8ca 3004 	str.w	r3, [sl, #4]
 80089b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089b8:	f8ca 8000 	str.w	r8, [sl]
 80089bc:	f8ca 0008 	str.w	r0, [sl, #8]
 80089c0:	f8ca 300c 	str.w	r3, [sl, #12]
 80089c4:	f1cb 0b00 	rsb	fp, fp, #0
 80089c8:	e6fa      	b.n	80087c0 <__ieee754_rem_pio2+0x80>
 80089ca:	a327      	add	r3, pc, #156	; (adr r3, 8008a68 <__ieee754_rem_pio2+0x328>)
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	ec51 0b18 	vmov	r0, r1, d8
 80089d4:	f7f7 fe20 	bl	8000618 <__aeabi_dmul>
 80089d8:	4604      	mov	r4, r0
 80089da:	460d      	mov	r5, r1
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4640      	mov	r0, r8
 80089e2:	4649      	mov	r1, r9
 80089e4:	f7f7 fc60 	bl	80002a8 <__aeabi_dsub>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4606      	mov	r6, r0
 80089ee:	460f      	mov	r7, r1
 80089f0:	4640      	mov	r0, r8
 80089f2:	4649      	mov	r1, r9
 80089f4:	f7f7 fc58 	bl	80002a8 <__aeabi_dsub>
 80089f8:	4622      	mov	r2, r4
 80089fa:	462b      	mov	r3, r5
 80089fc:	f7f7 fc54 	bl	80002a8 <__aeabi_dsub>
 8008a00:	a31b      	add	r3, pc, #108	; (adr r3, 8008a70 <__ieee754_rem_pio2+0x330>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	4604      	mov	r4, r0
 8008a08:	460d      	mov	r5, r1
 8008a0a:	ec51 0b18 	vmov	r0, r1, d8
 8008a0e:	f7f7 fe03 	bl	8000618 <__aeabi_dmul>
 8008a12:	4622      	mov	r2, r4
 8008a14:	462b      	mov	r3, r5
 8008a16:	f7f7 fc47 	bl	80002a8 <__aeabi_dsub>
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	460d      	mov	r5, r1
 8008a1e:	e75f      	b.n	80088e0 <__ieee754_rem_pio2+0x1a0>
 8008a20:	4b1b      	ldr	r3, [pc, #108]	; (8008a90 <__ieee754_rem_pio2+0x350>)
 8008a22:	4598      	cmp	r8, r3
 8008a24:	dd36      	ble.n	8008a94 <__ieee754_rem_pio2+0x354>
 8008a26:	ee10 2a10 	vmov	r2, s0
 8008a2a:	462b      	mov	r3, r5
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fc3a 	bl	80002a8 <__aeabi_dsub>
 8008a34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a38:	e9ca 0100 	strd	r0, r1, [sl]
 8008a3c:	e694      	b.n	8008768 <__ieee754_rem_pio2+0x28>
 8008a3e:	bf00      	nop
 8008a40:	54400000 	.word	0x54400000
 8008a44:	3ff921fb 	.word	0x3ff921fb
 8008a48:	1a626331 	.word	0x1a626331
 8008a4c:	3dd0b461 	.word	0x3dd0b461
 8008a50:	1a600000 	.word	0x1a600000
 8008a54:	3dd0b461 	.word	0x3dd0b461
 8008a58:	2e037073 	.word	0x2e037073
 8008a5c:	3ba3198a 	.word	0x3ba3198a
 8008a60:	6dc9c883 	.word	0x6dc9c883
 8008a64:	3fe45f30 	.word	0x3fe45f30
 8008a68:	2e000000 	.word	0x2e000000
 8008a6c:	3ba3198a 	.word	0x3ba3198a
 8008a70:	252049c1 	.word	0x252049c1
 8008a74:	397b839a 	.word	0x397b839a
 8008a78:	3fe921fb 	.word	0x3fe921fb
 8008a7c:	4002d97b 	.word	0x4002d97b
 8008a80:	3ff921fb 	.word	0x3ff921fb
 8008a84:	413921fb 	.word	0x413921fb
 8008a88:	3fe00000 	.word	0x3fe00000
 8008a8c:	08009c08 	.word	0x08009c08
 8008a90:	7fefffff 	.word	0x7fefffff
 8008a94:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008a98:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008a9c:	ee10 0a10 	vmov	r0, s0
 8008aa0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008aa4:	ee10 6a10 	vmov	r6, s0
 8008aa8:	460f      	mov	r7, r1
 8008aaa:	f7f8 f865 	bl	8000b78 <__aeabi_d2iz>
 8008aae:	f7f7 fd49 	bl	8000544 <__aeabi_i2d>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	4639      	mov	r1, r7
 8008aba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008abe:	f7f7 fbf3 	bl	80002a8 <__aeabi_dsub>
 8008ac2:	4b23      	ldr	r3, [pc, #140]	; (8008b50 <__ieee754_rem_pio2+0x410>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f7f7 fda7 	bl	8000618 <__aeabi_dmul>
 8008aca:	460f      	mov	r7, r1
 8008acc:	4606      	mov	r6, r0
 8008ace:	f7f8 f853 	bl	8000b78 <__aeabi_d2iz>
 8008ad2:	f7f7 fd37 	bl	8000544 <__aeabi_i2d>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4630      	mov	r0, r6
 8008adc:	4639      	mov	r1, r7
 8008ade:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ae2:	f7f7 fbe1 	bl	80002a8 <__aeabi_dsub>
 8008ae6:	4b1a      	ldr	r3, [pc, #104]	; (8008b50 <__ieee754_rem_pio2+0x410>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f7f7 fd95 	bl	8000618 <__aeabi_dmul>
 8008aee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008af2:	ad04      	add	r5, sp, #16
 8008af4:	f04f 0803 	mov.w	r8, #3
 8008af8:	46a9      	mov	r9, r5
 8008afa:	2600      	movs	r6, #0
 8008afc:	2700      	movs	r7, #0
 8008afe:	4632      	mov	r2, r6
 8008b00:	463b      	mov	r3, r7
 8008b02:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008b06:	46c3      	mov	fp, r8
 8008b08:	3d08      	subs	r5, #8
 8008b0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b0e:	f7f7 ffeb 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d1f3      	bne.n	8008afe <__ieee754_rem_pio2+0x3be>
 8008b16:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <__ieee754_rem_pio2+0x414>)
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	4622      	mov	r2, r4
 8008b20:	465b      	mov	r3, fp
 8008b22:	4651      	mov	r1, sl
 8008b24:	4648      	mov	r0, r9
 8008b26:	f000 f993 	bl	8008e50 <__kernel_rem_pio2>
 8008b2a:	9b02      	ldr	r3, [sp, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	4683      	mov	fp, r0
 8008b30:	f6bf ae46 	bge.w	80087c0 <__ieee754_rem_pio2+0x80>
 8008b34:	e9da 2100 	ldrd	r2, r1, [sl]
 8008b38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b3c:	e9ca 2300 	strd	r2, r3, [sl]
 8008b40:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008b44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b48:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008b4c:	e73a      	b.n	80089c4 <__ieee754_rem_pio2+0x284>
 8008b4e:	bf00      	nop
 8008b50:	41700000 	.word	0x41700000
 8008b54:	08009c88 	.word	0x08009c88

08008b58 <__ieee754_sqrt>:
 8008b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5c:	ec55 4b10 	vmov	r4, r5, d0
 8008b60:	4e55      	ldr	r6, [pc, #340]	; (8008cb8 <__ieee754_sqrt+0x160>)
 8008b62:	43ae      	bics	r6, r5
 8008b64:	ee10 0a10 	vmov	r0, s0
 8008b68:	ee10 3a10 	vmov	r3, s0
 8008b6c:	462a      	mov	r2, r5
 8008b6e:	4629      	mov	r1, r5
 8008b70:	d110      	bne.n	8008b94 <__ieee754_sqrt+0x3c>
 8008b72:	ee10 2a10 	vmov	r2, s0
 8008b76:	462b      	mov	r3, r5
 8008b78:	f7f7 fd4e 	bl	8000618 <__aeabi_dmul>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4620      	mov	r0, r4
 8008b82:	4629      	mov	r1, r5
 8008b84:	f7f7 fb92 	bl	80002ac <__adddf3>
 8008b88:	4604      	mov	r4, r0
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	ec45 4b10 	vmov	d0, r4, r5
 8008b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b94:	2d00      	cmp	r5, #0
 8008b96:	dc10      	bgt.n	8008bba <__ieee754_sqrt+0x62>
 8008b98:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008b9c:	4330      	orrs	r0, r6
 8008b9e:	d0f5      	beq.n	8008b8c <__ieee754_sqrt+0x34>
 8008ba0:	b15d      	cbz	r5, 8008bba <__ieee754_sqrt+0x62>
 8008ba2:	ee10 2a10 	vmov	r2, s0
 8008ba6:	462b      	mov	r3, r5
 8008ba8:	ee10 0a10 	vmov	r0, s0
 8008bac:	f7f7 fb7c 	bl	80002a8 <__aeabi_dsub>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	f7f7 fe5a 	bl	800086c <__aeabi_ddiv>
 8008bb8:	e7e6      	b.n	8008b88 <__ieee754_sqrt+0x30>
 8008bba:	1512      	asrs	r2, r2, #20
 8008bbc:	d074      	beq.n	8008ca8 <__ieee754_sqrt+0x150>
 8008bbe:	07d4      	lsls	r4, r2, #31
 8008bc0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008bc4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008bc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008bcc:	bf5e      	ittt	pl
 8008bce:	0fda      	lsrpl	r2, r3, #31
 8008bd0:	005b      	lslpl	r3, r3, #1
 8008bd2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008bd6:	2400      	movs	r4, #0
 8008bd8:	0fda      	lsrs	r2, r3, #31
 8008bda:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008bde:	107f      	asrs	r7, r7, #1
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	2516      	movs	r5, #22
 8008be4:	4620      	mov	r0, r4
 8008be6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008bea:	1886      	adds	r6, r0, r2
 8008bec:	428e      	cmp	r6, r1
 8008bee:	bfde      	ittt	le
 8008bf0:	1b89      	suble	r1, r1, r6
 8008bf2:	18b0      	addle	r0, r6, r2
 8008bf4:	18a4      	addle	r4, r4, r2
 8008bf6:	0049      	lsls	r1, r1, #1
 8008bf8:	3d01      	subs	r5, #1
 8008bfa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008bfe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008c02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c06:	d1f0      	bne.n	8008bea <__ieee754_sqrt+0x92>
 8008c08:	462a      	mov	r2, r5
 8008c0a:	f04f 0e20 	mov.w	lr, #32
 8008c0e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008c12:	4281      	cmp	r1, r0
 8008c14:	eb06 0c05 	add.w	ip, r6, r5
 8008c18:	dc02      	bgt.n	8008c20 <__ieee754_sqrt+0xc8>
 8008c1a:	d113      	bne.n	8008c44 <__ieee754_sqrt+0xec>
 8008c1c:	459c      	cmp	ip, r3
 8008c1e:	d811      	bhi.n	8008c44 <__ieee754_sqrt+0xec>
 8008c20:	f1bc 0f00 	cmp.w	ip, #0
 8008c24:	eb0c 0506 	add.w	r5, ip, r6
 8008c28:	da43      	bge.n	8008cb2 <__ieee754_sqrt+0x15a>
 8008c2a:	2d00      	cmp	r5, #0
 8008c2c:	db41      	blt.n	8008cb2 <__ieee754_sqrt+0x15a>
 8008c2e:	f100 0801 	add.w	r8, r0, #1
 8008c32:	1a09      	subs	r1, r1, r0
 8008c34:	459c      	cmp	ip, r3
 8008c36:	bf88      	it	hi
 8008c38:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008c3c:	eba3 030c 	sub.w	r3, r3, ip
 8008c40:	4432      	add	r2, r6
 8008c42:	4640      	mov	r0, r8
 8008c44:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008c48:	f1be 0e01 	subs.w	lr, lr, #1
 8008c4c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c54:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008c58:	d1db      	bne.n	8008c12 <__ieee754_sqrt+0xba>
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	d006      	beq.n	8008c6c <__ieee754_sqrt+0x114>
 8008c5e:	1c50      	adds	r0, r2, #1
 8008c60:	bf13      	iteet	ne
 8008c62:	3201      	addne	r2, #1
 8008c64:	3401      	addeq	r4, #1
 8008c66:	4672      	moveq	r2, lr
 8008c68:	f022 0201 	bicne.w	r2, r2, #1
 8008c6c:	1063      	asrs	r3, r4, #1
 8008c6e:	0852      	lsrs	r2, r2, #1
 8008c70:	07e1      	lsls	r1, r4, #31
 8008c72:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008c76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008c7a:	bf48      	it	mi
 8008c7c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008c80:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008c84:	4614      	mov	r4, r2
 8008c86:	e781      	b.n	8008b8c <__ieee754_sqrt+0x34>
 8008c88:	0ad9      	lsrs	r1, r3, #11
 8008c8a:	3815      	subs	r0, #21
 8008c8c:	055b      	lsls	r3, r3, #21
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	d0fa      	beq.n	8008c88 <__ieee754_sqrt+0x130>
 8008c92:	02cd      	lsls	r5, r1, #11
 8008c94:	d50a      	bpl.n	8008cac <__ieee754_sqrt+0x154>
 8008c96:	f1c2 0420 	rsb	r4, r2, #32
 8008c9a:	fa23 f404 	lsr.w	r4, r3, r4
 8008c9e:	1e55      	subs	r5, r2, #1
 8008ca0:	4093      	lsls	r3, r2
 8008ca2:	4321      	orrs	r1, r4
 8008ca4:	1b42      	subs	r2, r0, r5
 8008ca6:	e78a      	b.n	8008bbe <__ieee754_sqrt+0x66>
 8008ca8:	4610      	mov	r0, r2
 8008caa:	e7f0      	b.n	8008c8e <__ieee754_sqrt+0x136>
 8008cac:	0049      	lsls	r1, r1, #1
 8008cae:	3201      	adds	r2, #1
 8008cb0:	e7ef      	b.n	8008c92 <__ieee754_sqrt+0x13a>
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	e7bd      	b.n	8008c32 <__ieee754_sqrt+0xda>
 8008cb6:	bf00      	nop
 8008cb8:	7ff00000 	.word	0x7ff00000
 8008cbc:	00000000 	.word	0x00000000

08008cc0 <__kernel_cos>:
 8008cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	ec57 6b10 	vmov	r6, r7, d0
 8008cc8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008ccc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008cd0:	ed8d 1b00 	vstr	d1, [sp]
 8008cd4:	da07      	bge.n	8008ce6 <__kernel_cos+0x26>
 8008cd6:	ee10 0a10 	vmov	r0, s0
 8008cda:	4639      	mov	r1, r7
 8008cdc:	f7f7 ff4c 	bl	8000b78 <__aeabi_d2iz>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	f000 8088 	beq.w	8008df6 <__kernel_cos+0x136>
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	463b      	mov	r3, r7
 8008cea:	4630      	mov	r0, r6
 8008cec:	4639      	mov	r1, r7
 8008cee:	f7f7 fc93 	bl	8000618 <__aeabi_dmul>
 8008cf2:	4b51      	ldr	r3, [pc, #324]	; (8008e38 <__kernel_cos+0x178>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	460d      	mov	r5, r1
 8008cfa:	f7f7 fc8d 	bl	8000618 <__aeabi_dmul>
 8008cfe:	a340      	add	r3, pc, #256	; (adr r3, 8008e00 <__kernel_cos+0x140>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	4682      	mov	sl, r0
 8008d06:	468b      	mov	fp, r1
 8008d08:	4620      	mov	r0, r4
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	f7f7 fc84 	bl	8000618 <__aeabi_dmul>
 8008d10:	a33d      	add	r3, pc, #244	; (adr r3, 8008e08 <__kernel_cos+0x148>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f7f7 fac9 	bl	80002ac <__adddf3>
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	f7f7 fc7b 	bl	8000618 <__aeabi_dmul>
 8008d22:	a33b      	add	r3, pc, #236	; (adr r3, 8008e10 <__kernel_cos+0x150>)
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	f7f7 fabe 	bl	80002a8 <__aeabi_dsub>
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	462b      	mov	r3, r5
 8008d30:	f7f7 fc72 	bl	8000618 <__aeabi_dmul>
 8008d34:	a338      	add	r3, pc, #224	; (adr r3, 8008e18 <__kernel_cos+0x158>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f7f7 fab7 	bl	80002ac <__adddf3>
 8008d3e:	4622      	mov	r2, r4
 8008d40:	462b      	mov	r3, r5
 8008d42:	f7f7 fc69 	bl	8000618 <__aeabi_dmul>
 8008d46:	a336      	add	r3, pc, #216	; (adr r3, 8008e20 <__kernel_cos+0x160>)
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	f7f7 faac 	bl	80002a8 <__aeabi_dsub>
 8008d50:	4622      	mov	r2, r4
 8008d52:	462b      	mov	r3, r5
 8008d54:	f7f7 fc60 	bl	8000618 <__aeabi_dmul>
 8008d58:	a333      	add	r3, pc, #204	; (adr r3, 8008e28 <__kernel_cos+0x168>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 faa5 	bl	80002ac <__adddf3>
 8008d62:	4622      	mov	r2, r4
 8008d64:	462b      	mov	r3, r5
 8008d66:	f7f7 fc57 	bl	8000618 <__aeabi_dmul>
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	462b      	mov	r3, r5
 8008d6e:	f7f7 fc53 	bl	8000618 <__aeabi_dmul>
 8008d72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d76:	4604      	mov	r4, r0
 8008d78:	460d      	mov	r5, r1
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	f7f7 fc4b 	bl	8000618 <__aeabi_dmul>
 8008d82:	460b      	mov	r3, r1
 8008d84:	4602      	mov	r2, r0
 8008d86:	4629      	mov	r1, r5
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7f7 fa8d 	bl	80002a8 <__aeabi_dsub>
 8008d8e:	4b2b      	ldr	r3, [pc, #172]	; (8008e3c <__kernel_cos+0x17c>)
 8008d90:	4598      	cmp	r8, r3
 8008d92:	4606      	mov	r6, r0
 8008d94:	460f      	mov	r7, r1
 8008d96:	dc10      	bgt.n	8008dba <__kernel_cos+0xfa>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	4659      	mov	r1, fp
 8008da0:	f7f7 fa82 	bl	80002a8 <__aeabi_dsub>
 8008da4:	460b      	mov	r3, r1
 8008da6:	4926      	ldr	r1, [pc, #152]	; (8008e40 <__kernel_cos+0x180>)
 8008da8:	4602      	mov	r2, r0
 8008daa:	2000      	movs	r0, #0
 8008dac:	f7f7 fa7c 	bl	80002a8 <__aeabi_dsub>
 8008db0:	ec41 0b10 	vmov	d0, r0, r1
 8008db4:	b003      	add	sp, #12
 8008db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dba:	4b22      	ldr	r3, [pc, #136]	; (8008e44 <__kernel_cos+0x184>)
 8008dbc:	4920      	ldr	r1, [pc, #128]	; (8008e40 <__kernel_cos+0x180>)
 8008dbe:	4598      	cmp	r8, r3
 8008dc0:	bfcc      	ite	gt
 8008dc2:	4d21      	ldrgt	r5, [pc, #132]	; (8008e48 <__kernel_cos+0x188>)
 8008dc4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008dc8:	2400      	movs	r4, #0
 8008dca:	4622      	mov	r2, r4
 8008dcc:	462b      	mov	r3, r5
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f7f7 fa6a 	bl	80002a8 <__aeabi_dsub>
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	4680      	mov	r8, r0
 8008dd8:	4689      	mov	r9, r1
 8008dda:	462b      	mov	r3, r5
 8008ddc:	4650      	mov	r0, sl
 8008dde:	4659      	mov	r1, fp
 8008de0:	f7f7 fa62 	bl	80002a8 <__aeabi_dsub>
 8008de4:	4632      	mov	r2, r6
 8008de6:	463b      	mov	r3, r7
 8008de8:	f7f7 fa5e 	bl	80002a8 <__aeabi_dsub>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4640      	mov	r0, r8
 8008df2:	4649      	mov	r1, r9
 8008df4:	e7da      	b.n	8008dac <__kernel_cos+0xec>
 8008df6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008e30 <__kernel_cos+0x170>
 8008dfa:	e7db      	b.n	8008db4 <__kernel_cos+0xf4>
 8008dfc:	f3af 8000 	nop.w
 8008e00:	be8838d4 	.word	0xbe8838d4
 8008e04:	bda8fae9 	.word	0xbda8fae9
 8008e08:	bdb4b1c4 	.word	0xbdb4b1c4
 8008e0c:	3e21ee9e 	.word	0x3e21ee9e
 8008e10:	809c52ad 	.word	0x809c52ad
 8008e14:	3e927e4f 	.word	0x3e927e4f
 8008e18:	19cb1590 	.word	0x19cb1590
 8008e1c:	3efa01a0 	.word	0x3efa01a0
 8008e20:	16c15177 	.word	0x16c15177
 8008e24:	3f56c16c 	.word	0x3f56c16c
 8008e28:	5555554c 	.word	0x5555554c
 8008e2c:	3fa55555 	.word	0x3fa55555
 8008e30:	00000000 	.word	0x00000000
 8008e34:	3ff00000 	.word	0x3ff00000
 8008e38:	3fe00000 	.word	0x3fe00000
 8008e3c:	3fd33332 	.word	0x3fd33332
 8008e40:	3ff00000 	.word	0x3ff00000
 8008e44:	3fe90000 	.word	0x3fe90000
 8008e48:	3fd20000 	.word	0x3fd20000
 8008e4c:	00000000 	.word	0x00000000

08008e50 <__kernel_rem_pio2>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	ed2d 8b02 	vpush	{d8}
 8008e58:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008e5c:	f112 0f14 	cmn.w	r2, #20
 8008e60:	9308      	str	r3, [sp, #32]
 8008e62:	9101      	str	r1, [sp, #4]
 8008e64:	4bc4      	ldr	r3, [pc, #784]	; (8009178 <__kernel_rem_pio2+0x328>)
 8008e66:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008e68:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e6e:	9302      	str	r3, [sp, #8]
 8008e70:	9b08      	ldr	r3, [sp, #32]
 8008e72:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e76:	bfa8      	it	ge
 8008e78:	1ed4      	subge	r4, r2, #3
 8008e7a:	9306      	str	r3, [sp, #24]
 8008e7c:	bfb2      	itee	lt
 8008e7e:	2400      	movlt	r4, #0
 8008e80:	2318      	movge	r3, #24
 8008e82:	fb94 f4f3 	sdivge	r4, r4, r3
 8008e86:	f06f 0317 	mvn.w	r3, #23
 8008e8a:	fb04 3303 	mla	r3, r4, r3, r3
 8008e8e:	eb03 0a02 	add.w	sl, r3, r2
 8008e92:	9b02      	ldr	r3, [sp, #8]
 8008e94:	9a06      	ldr	r2, [sp, #24]
 8008e96:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009168 <__kernel_rem_pio2+0x318>
 8008e9a:	eb03 0802 	add.w	r8, r3, r2
 8008e9e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008ea0:	1aa7      	subs	r7, r4, r2
 8008ea2:	ae22      	add	r6, sp, #136	; 0x88
 8008ea4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008ea8:	2500      	movs	r5, #0
 8008eaa:	4545      	cmp	r5, r8
 8008eac:	dd13      	ble.n	8008ed6 <__kernel_rem_pio2+0x86>
 8008eae:	9b08      	ldr	r3, [sp, #32]
 8008eb0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009168 <__kernel_rem_pio2+0x318>
 8008eb4:	aa22      	add	r2, sp, #136	; 0x88
 8008eb6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008eba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008ebe:	f04f 0800 	mov.w	r8, #0
 8008ec2:	9b02      	ldr	r3, [sp, #8]
 8008ec4:	4598      	cmp	r8, r3
 8008ec6:	dc2f      	bgt.n	8008f28 <__kernel_rem_pio2+0xd8>
 8008ec8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008ecc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008ed0:	462f      	mov	r7, r5
 8008ed2:	2600      	movs	r6, #0
 8008ed4:	e01b      	b.n	8008f0e <__kernel_rem_pio2+0xbe>
 8008ed6:	42ef      	cmn	r7, r5
 8008ed8:	d407      	bmi.n	8008eea <__kernel_rem_pio2+0x9a>
 8008eda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008ede:	f7f7 fb31 	bl	8000544 <__aeabi_i2d>
 8008ee2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008ee6:	3501      	adds	r5, #1
 8008ee8:	e7df      	b.n	8008eaa <__kernel_rem_pio2+0x5a>
 8008eea:	ec51 0b18 	vmov	r0, r1, d8
 8008eee:	e7f8      	b.n	8008ee2 <__kernel_rem_pio2+0x92>
 8008ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008ef8:	f7f7 fb8e 	bl	8000618 <__aeabi_dmul>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f04:	f7f7 f9d2 	bl	80002ac <__adddf3>
 8008f08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f0c:	3601      	adds	r6, #1
 8008f0e:	9b06      	ldr	r3, [sp, #24]
 8008f10:	429e      	cmp	r6, r3
 8008f12:	f1a7 0708 	sub.w	r7, r7, #8
 8008f16:	ddeb      	ble.n	8008ef0 <__kernel_rem_pio2+0xa0>
 8008f18:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008f1c:	f108 0801 	add.w	r8, r8, #1
 8008f20:	ecab 7b02 	vstmia	fp!, {d7}
 8008f24:	3508      	adds	r5, #8
 8008f26:	e7cc      	b.n	8008ec2 <__kernel_rem_pio2+0x72>
 8008f28:	9b02      	ldr	r3, [sp, #8]
 8008f2a:	aa0e      	add	r2, sp, #56	; 0x38
 8008f2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f30:	930d      	str	r3, [sp, #52]	; 0x34
 8008f32:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008f34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f38:	9c02      	ldr	r4, [sp, #8]
 8008f3a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f3c:	00e3      	lsls	r3, r4, #3
 8008f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f40:	ab9a      	add	r3, sp, #616	; 0x268
 8008f42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f46:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008f4a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008f4e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008f50:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008f54:	46c3      	mov	fp, r8
 8008f56:	46a1      	mov	r9, r4
 8008f58:	f1b9 0f00 	cmp.w	r9, #0
 8008f5c:	f1a5 0508 	sub.w	r5, r5, #8
 8008f60:	dc77      	bgt.n	8009052 <__kernel_rem_pio2+0x202>
 8008f62:	ec47 6b10 	vmov	d0, r6, r7
 8008f66:	4650      	mov	r0, sl
 8008f68:	f000 fc46 	bl	80097f8 <scalbn>
 8008f6c:	ec57 6b10 	vmov	r6, r7, d0
 8008f70:	2200      	movs	r2, #0
 8008f72:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008f76:	ee10 0a10 	vmov	r0, s0
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	f7f7 fb4c 	bl	8000618 <__aeabi_dmul>
 8008f80:	ec41 0b10 	vmov	d0, r0, r1
 8008f84:	f000 fbb8 	bl	80096f8 <floor>
 8008f88:	4b7c      	ldr	r3, [pc, #496]	; (800917c <__kernel_rem_pio2+0x32c>)
 8008f8a:	ec51 0b10 	vmov	r0, r1, d0
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f7f7 fb42 	bl	8000618 <__aeabi_dmul>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 f984 	bl	80002a8 <__aeabi_dsub>
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	f7f7 fde8 	bl	8000b78 <__aeabi_d2iz>
 8008fa8:	9004      	str	r0, [sp, #16]
 8008faa:	f7f7 facb 	bl	8000544 <__aeabi_i2d>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	f7f7 f977 	bl	80002a8 <__aeabi_dsub>
 8008fba:	f1ba 0f00 	cmp.w	sl, #0
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	460f      	mov	r7, r1
 8008fc2:	dd6d      	ble.n	80090a0 <__kernel_rem_pio2+0x250>
 8008fc4:	1e62      	subs	r2, r4, #1
 8008fc6:	ab0e      	add	r3, sp, #56	; 0x38
 8008fc8:	9d04      	ldr	r5, [sp, #16]
 8008fca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008fce:	f1ca 0118 	rsb	r1, sl, #24
 8008fd2:	fa40 f301 	asr.w	r3, r0, r1
 8008fd6:	441d      	add	r5, r3
 8008fd8:	408b      	lsls	r3, r1
 8008fda:	1ac0      	subs	r0, r0, r3
 8008fdc:	ab0e      	add	r3, sp, #56	; 0x38
 8008fde:	9504      	str	r5, [sp, #16]
 8008fe0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008fe4:	f1ca 0317 	rsb	r3, sl, #23
 8008fe8:	fa40 fb03 	asr.w	fp, r0, r3
 8008fec:	f1bb 0f00 	cmp.w	fp, #0
 8008ff0:	dd65      	ble.n	80090be <__kernel_rem_pio2+0x26e>
 8008ff2:	9b04      	ldr	r3, [sp, #16]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	9304      	str	r3, [sp, #16]
 8008ffa:	4615      	mov	r5, r2
 8008ffc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009000:	4294      	cmp	r4, r2
 8009002:	f300 809c 	bgt.w	800913e <__kernel_rem_pio2+0x2ee>
 8009006:	f1ba 0f00 	cmp.w	sl, #0
 800900a:	dd07      	ble.n	800901c <__kernel_rem_pio2+0x1cc>
 800900c:	f1ba 0f01 	cmp.w	sl, #1
 8009010:	f000 80c0 	beq.w	8009194 <__kernel_rem_pio2+0x344>
 8009014:	f1ba 0f02 	cmp.w	sl, #2
 8009018:	f000 80c6 	beq.w	80091a8 <__kernel_rem_pio2+0x358>
 800901c:	f1bb 0f02 	cmp.w	fp, #2
 8009020:	d14d      	bne.n	80090be <__kernel_rem_pio2+0x26e>
 8009022:	4632      	mov	r2, r6
 8009024:	463b      	mov	r3, r7
 8009026:	4956      	ldr	r1, [pc, #344]	; (8009180 <__kernel_rem_pio2+0x330>)
 8009028:	2000      	movs	r0, #0
 800902a:	f7f7 f93d 	bl	80002a8 <__aeabi_dsub>
 800902e:	4606      	mov	r6, r0
 8009030:	460f      	mov	r7, r1
 8009032:	2d00      	cmp	r5, #0
 8009034:	d043      	beq.n	80090be <__kernel_rem_pio2+0x26e>
 8009036:	4650      	mov	r0, sl
 8009038:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009170 <__kernel_rem_pio2+0x320>
 800903c:	f000 fbdc 	bl	80097f8 <scalbn>
 8009040:	4630      	mov	r0, r6
 8009042:	4639      	mov	r1, r7
 8009044:	ec53 2b10 	vmov	r2, r3, d0
 8009048:	f7f7 f92e 	bl	80002a8 <__aeabi_dsub>
 800904c:	4606      	mov	r6, r0
 800904e:	460f      	mov	r7, r1
 8009050:	e035      	b.n	80090be <__kernel_rem_pio2+0x26e>
 8009052:	4b4c      	ldr	r3, [pc, #304]	; (8009184 <__kernel_rem_pio2+0x334>)
 8009054:	2200      	movs	r2, #0
 8009056:	4630      	mov	r0, r6
 8009058:	4639      	mov	r1, r7
 800905a:	f7f7 fadd 	bl	8000618 <__aeabi_dmul>
 800905e:	f7f7 fd8b 	bl	8000b78 <__aeabi_d2iz>
 8009062:	f7f7 fa6f 	bl	8000544 <__aeabi_i2d>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	ec43 2b18 	vmov	d8, r2, r3
 800906e:	4b46      	ldr	r3, [pc, #280]	; (8009188 <__kernel_rem_pio2+0x338>)
 8009070:	2200      	movs	r2, #0
 8009072:	f7f7 fad1 	bl	8000618 <__aeabi_dmul>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	4630      	mov	r0, r6
 800907c:	4639      	mov	r1, r7
 800907e:	f7f7 f913 	bl	80002a8 <__aeabi_dsub>
 8009082:	f7f7 fd79 	bl	8000b78 <__aeabi_d2iz>
 8009086:	e9d5 2300 	ldrd	r2, r3, [r5]
 800908a:	f84b 0b04 	str.w	r0, [fp], #4
 800908e:	ec51 0b18 	vmov	r0, r1, d8
 8009092:	f7f7 f90b 	bl	80002ac <__adddf3>
 8009096:	f109 39ff 	add.w	r9, r9, #4294967295
 800909a:	4606      	mov	r6, r0
 800909c:	460f      	mov	r7, r1
 800909e:	e75b      	b.n	8008f58 <__kernel_rem_pio2+0x108>
 80090a0:	d106      	bne.n	80090b0 <__kernel_rem_pio2+0x260>
 80090a2:	1e63      	subs	r3, r4, #1
 80090a4:	aa0e      	add	r2, sp, #56	; 0x38
 80090a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80090aa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80090ae:	e79d      	b.n	8008fec <__kernel_rem_pio2+0x19c>
 80090b0:	4b36      	ldr	r3, [pc, #216]	; (800918c <__kernel_rem_pio2+0x33c>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	f7f7 fd36 	bl	8000b24 <__aeabi_dcmpge>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d13d      	bne.n	8009138 <__kernel_rem_pio2+0x2e8>
 80090bc:	4683      	mov	fp, r0
 80090be:	2200      	movs	r2, #0
 80090c0:	2300      	movs	r3, #0
 80090c2:	4630      	mov	r0, r6
 80090c4:	4639      	mov	r1, r7
 80090c6:	f7f7 fd0f 	bl	8000ae8 <__aeabi_dcmpeq>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f000 80c0 	beq.w	8009250 <__kernel_rem_pio2+0x400>
 80090d0:	1e65      	subs	r5, r4, #1
 80090d2:	462b      	mov	r3, r5
 80090d4:	2200      	movs	r2, #0
 80090d6:	9902      	ldr	r1, [sp, #8]
 80090d8:	428b      	cmp	r3, r1
 80090da:	da6c      	bge.n	80091b6 <__kernel_rem_pio2+0x366>
 80090dc:	2a00      	cmp	r2, #0
 80090de:	f000 8089 	beq.w	80091f4 <__kernel_rem_pio2+0x3a4>
 80090e2:	ab0e      	add	r3, sp, #56	; 0x38
 80090e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80090e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 80ad 	beq.w	800924c <__kernel_rem_pio2+0x3fc>
 80090f2:	4650      	mov	r0, sl
 80090f4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009170 <__kernel_rem_pio2+0x320>
 80090f8:	f000 fb7e 	bl	80097f8 <scalbn>
 80090fc:	ab9a      	add	r3, sp, #616	; 0x268
 80090fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009102:	ec57 6b10 	vmov	r6, r7, d0
 8009106:	00ec      	lsls	r4, r5, #3
 8009108:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800910c:	46aa      	mov	sl, r5
 800910e:	f1ba 0f00 	cmp.w	sl, #0
 8009112:	f280 80d6 	bge.w	80092c2 <__kernel_rem_pio2+0x472>
 8009116:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009168 <__kernel_rem_pio2+0x318>
 800911a:	462e      	mov	r6, r5
 800911c:	2e00      	cmp	r6, #0
 800911e:	f2c0 8104 	blt.w	800932a <__kernel_rem_pio2+0x4da>
 8009122:	ab72      	add	r3, sp, #456	; 0x1c8
 8009124:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009128:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009190 <__kernel_rem_pio2+0x340>
 800912c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009130:	f04f 0800 	mov.w	r8, #0
 8009134:	1baf      	subs	r7, r5, r6
 8009136:	e0ea      	b.n	800930e <__kernel_rem_pio2+0x4be>
 8009138:	f04f 0b02 	mov.w	fp, #2
 800913c:	e759      	b.n	8008ff2 <__kernel_rem_pio2+0x1a2>
 800913e:	f8d8 3000 	ldr.w	r3, [r8]
 8009142:	b955      	cbnz	r5, 800915a <__kernel_rem_pio2+0x30a>
 8009144:	b123      	cbz	r3, 8009150 <__kernel_rem_pio2+0x300>
 8009146:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800914a:	f8c8 3000 	str.w	r3, [r8]
 800914e:	2301      	movs	r3, #1
 8009150:	3201      	adds	r2, #1
 8009152:	f108 0804 	add.w	r8, r8, #4
 8009156:	461d      	mov	r5, r3
 8009158:	e752      	b.n	8009000 <__kernel_rem_pio2+0x1b0>
 800915a:	1acb      	subs	r3, r1, r3
 800915c:	f8c8 3000 	str.w	r3, [r8]
 8009160:	462b      	mov	r3, r5
 8009162:	e7f5      	b.n	8009150 <__kernel_rem_pio2+0x300>
 8009164:	f3af 8000 	nop.w
	...
 8009174:	3ff00000 	.word	0x3ff00000
 8009178:	08009dd0 	.word	0x08009dd0
 800917c:	40200000 	.word	0x40200000
 8009180:	3ff00000 	.word	0x3ff00000
 8009184:	3e700000 	.word	0x3e700000
 8009188:	41700000 	.word	0x41700000
 800918c:	3fe00000 	.word	0x3fe00000
 8009190:	08009d90 	.word	0x08009d90
 8009194:	1e62      	subs	r2, r4, #1
 8009196:	ab0e      	add	r3, sp, #56	; 0x38
 8009198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80091a0:	a90e      	add	r1, sp, #56	; 0x38
 80091a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80091a6:	e739      	b.n	800901c <__kernel_rem_pio2+0x1cc>
 80091a8:	1e62      	subs	r2, r4, #1
 80091aa:	ab0e      	add	r3, sp, #56	; 0x38
 80091ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80091b4:	e7f4      	b.n	80091a0 <__kernel_rem_pio2+0x350>
 80091b6:	a90e      	add	r1, sp, #56	; 0x38
 80091b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80091bc:	3b01      	subs	r3, #1
 80091be:	430a      	orrs	r2, r1
 80091c0:	e789      	b.n	80090d6 <__kernel_rem_pio2+0x286>
 80091c2:	3301      	adds	r3, #1
 80091c4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80091c8:	2900      	cmp	r1, #0
 80091ca:	d0fa      	beq.n	80091c2 <__kernel_rem_pio2+0x372>
 80091cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ce:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80091d2:	446a      	add	r2, sp
 80091d4:	3a98      	subs	r2, #152	; 0x98
 80091d6:	920a      	str	r2, [sp, #40]	; 0x28
 80091d8:	9a08      	ldr	r2, [sp, #32]
 80091da:	18e3      	adds	r3, r4, r3
 80091dc:	18a5      	adds	r5, r4, r2
 80091de:	aa22      	add	r2, sp, #136	; 0x88
 80091e0:	f104 0801 	add.w	r8, r4, #1
 80091e4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80091e8:	9304      	str	r3, [sp, #16]
 80091ea:	9b04      	ldr	r3, [sp, #16]
 80091ec:	4543      	cmp	r3, r8
 80091ee:	da04      	bge.n	80091fa <__kernel_rem_pio2+0x3aa>
 80091f0:	461c      	mov	r4, r3
 80091f2:	e6a3      	b.n	8008f3c <__kernel_rem_pio2+0xec>
 80091f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091f6:	2301      	movs	r3, #1
 80091f8:	e7e4      	b.n	80091c4 <__kernel_rem_pio2+0x374>
 80091fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091fc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009200:	f7f7 f9a0 	bl	8000544 <__aeabi_i2d>
 8009204:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800920a:	46ab      	mov	fp, r5
 800920c:	461c      	mov	r4, r3
 800920e:	f04f 0900 	mov.w	r9, #0
 8009212:	2600      	movs	r6, #0
 8009214:	2700      	movs	r7, #0
 8009216:	9b06      	ldr	r3, [sp, #24]
 8009218:	4599      	cmp	r9, r3
 800921a:	dd06      	ble.n	800922a <__kernel_rem_pio2+0x3da>
 800921c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009222:	f108 0801 	add.w	r8, r8, #1
 8009226:	930a      	str	r3, [sp, #40]	; 0x28
 8009228:	e7df      	b.n	80091ea <__kernel_rem_pio2+0x39a>
 800922a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800922e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009232:	f7f7 f9f1 	bl	8000618 <__aeabi_dmul>
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	4630      	mov	r0, r6
 800923c:	4639      	mov	r1, r7
 800923e:	f7f7 f835 	bl	80002ac <__adddf3>
 8009242:	f109 0901 	add.w	r9, r9, #1
 8009246:	4606      	mov	r6, r0
 8009248:	460f      	mov	r7, r1
 800924a:	e7e4      	b.n	8009216 <__kernel_rem_pio2+0x3c6>
 800924c:	3d01      	subs	r5, #1
 800924e:	e748      	b.n	80090e2 <__kernel_rem_pio2+0x292>
 8009250:	ec47 6b10 	vmov	d0, r6, r7
 8009254:	f1ca 0000 	rsb	r0, sl, #0
 8009258:	f000 face 	bl	80097f8 <scalbn>
 800925c:	ec57 6b10 	vmov	r6, r7, d0
 8009260:	4ba0      	ldr	r3, [pc, #640]	; (80094e4 <__kernel_rem_pio2+0x694>)
 8009262:	ee10 0a10 	vmov	r0, s0
 8009266:	2200      	movs	r2, #0
 8009268:	4639      	mov	r1, r7
 800926a:	f7f7 fc5b 	bl	8000b24 <__aeabi_dcmpge>
 800926e:	b1f8      	cbz	r0, 80092b0 <__kernel_rem_pio2+0x460>
 8009270:	4b9d      	ldr	r3, [pc, #628]	; (80094e8 <__kernel_rem_pio2+0x698>)
 8009272:	2200      	movs	r2, #0
 8009274:	4630      	mov	r0, r6
 8009276:	4639      	mov	r1, r7
 8009278:	f7f7 f9ce 	bl	8000618 <__aeabi_dmul>
 800927c:	f7f7 fc7c 	bl	8000b78 <__aeabi_d2iz>
 8009280:	4680      	mov	r8, r0
 8009282:	f7f7 f95f 	bl	8000544 <__aeabi_i2d>
 8009286:	4b97      	ldr	r3, [pc, #604]	; (80094e4 <__kernel_rem_pio2+0x694>)
 8009288:	2200      	movs	r2, #0
 800928a:	f7f7 f9c5 	bl	8000618 <__aeabi_dmul>
 800928e:	460b      	mov	r3, r1
 8009290:	4602      	mov	r2, r0
 8009292:	4639      	mov	r1, r7
 8009294:	4630      	mov	r0, r6
 8009296:	f7f7 f807 	bl	80002a8 <__aeabi_dsub>
 800929a:	f7f7 fc6d 	bl	8000b78 <__aeabi_d2iz>
 800929e:	1c65      	adds	r5, r4, #1
 80092a0:	ab0e      	add	r3, sp, #56	; 0x38
 80092a2:	f10a 0a18 	add.w	sl, sl, #24
 80092a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80092aa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80092ae:	e720      	b.n	80090f2 <__kernel_rem_pio2+0x2a2>
 80092b0:	4630      	mov	r0, r6
 80092b2:	4639      	mov	r1, r7
 80092b4:	f7f7 fc60 	bl	8000b78 <__aeabi_d2iz>
 80092b8:	ab0e      	add	r3, sp, #56	; 0x38
 80092ba:	4625      	mov	r5, r4
 80092bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80092c0:	e717      	b.n	80090f2 <__kernel_rem_pio2+0x2a2>
 80092c2:	ab0e      	add	r3, sp, #56	; 0x38
 80092c4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80092c8:	f7f7 f93c 	bl	8000544 <__aeabi_i2d>
 80092cc:	4632      	mov	r2, r6
 80092ce:	463b      	mov	r3, r7
 80092d0:	f7f7 f9a2 	bl	8000618 <__aeabi_dmul>
 80092d4:	4b84      	ldr	r3, [pc, #528]	; (80094e8 <__kernel_rem_pio2+0x698>)
 80092d6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80092da:	2200      	movs	r2, #0
 80092dc:	4630      	mov	r0, r6
 80092de:	4639      	mov	r1, r7
 80092e0:	f7f7 f99a 	bl	8000618 <__aeabi_dmul>
 80092e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092e8:	4606      	mov	r6, r0
 80092ea:	460f      	mov	r7, r1
 80092ec:	e70f      	b.n	800910e <__kernel_rem_pio2+0x2be>
 80092ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80092f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80092f6:	f7f7 f98f 	bl	8000618 <__aeabi_dmul>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009302:	f7f6 ffd3 	bl	80002ac <__adddf3>
 8009306:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800930a:	f108 0801 	add.w	r8, r8, #1
 800930e:	9b02      	ldr	r3, [sp, #8]
 8009310:	4598      	cmp	r8, r3
 8009312:	dc01      	bgt.n	8009318 <__kernel_rem_pio2+0x4c8>
 8009314:	45b8      	cmp	r8, r7
 8009316:	ddea      	ble.n	80092ee <__kernel_rem_pio2+0x49e>
 8009318:	ed9d 7b06 	vldr	d7, [sp, #24]
 800931c:	ab4a      	add	r3, sp, #296	; 0x128
 800931e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009322:	ed87 7b00 	vstr	d7, [r7]
 8009326:	3e01      	subs	r6, #1
 8009328:	e6f8      	b.n	800911c <__kernel_rem_pio2+0x2cc>
 800932a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800932c:	2b02      	cmp	r3, #2
 800932e:	dc0b      	bgt.n	8009348 <__kernel_rem_pio2+0x4f8>
 8009330:	2b00      	cmp	r3, #0
 8009332:	dc35      	bgt.n	80093a0 <__kernel_rem_pio2+0x550>
 8009334:	d059      	beq.n	80093ea <__kernel_rem_pio2+0x59a>
 8009336:	9b04      	ldr	r3, [sp, #16]
 8009338:	f003 0007 	and.w	r0, r3, #7
 800933c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009340:	ecbd 8b02 	vpop	{d8}
 8009344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009348:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800934a:	2b03      	cmp	r3, #3
 800934c:	d1f3      	bne.n	8009336 <__kernel_rem_pio2+0x4e6>
 800934e:	ab4a      	add	r3, sp, #296	; 0x128
 8009350:	4423      	add	r3, r4
 8009352:	9306      	str	r3, [sp, #24]
 8009354:	461c      	mov	r4, r3
 8009356:	469a      	mov	sl, r3
 8009358:	9502      	str	r5, [sp, #8]
 800935a:	9b02      	ldr	r3, [sp, #8]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f1aa 0a08 	sub.w	sl, sl, #8
 8009362:	dc6b      	bgt.n	800943c <__kernel_rem_pio2+0x5ec>
 8009364:	46aa      	mov	sl, r5
 8009366:	f1ba 0f01 	cmp.w	sl, #1
 800936a:	f1a4 0408 	sub.w	r4, r4, #8
 800936e:	f300 8085 	bgt.w	800947c <__kernel_rem_pio2+0x62c>
 8009372:	9c06      	ldr	r4, [sp, #24]
 8009374:	2000      	movs	r0, #0
 8009376:	3408      	adds	r4, #8
 8009378:	2100      	movs	r1, #0
 800937a:	2d01      	cmp	r5, #1
 800937c:	f300 809d 	bgt.w	80094ba <__kernel_rem_pio2+0x66a>
 8009380:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009384:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009388:	f1bb 0f00 	cmp.w	fp, #0
 800938c:	f040 809b 	bne.w	80094c6 <__kernel_rem_pio2+0x676>
 8009390:	9b01      	ldr	r3, [sp, #4]
 8009392:	e9c3 5600 	strd	r5, r6, [r3]
 8009396:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800939a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800939e:	e7ca      	b.n	8009336 <__kernel_rem_pio2+0x4e6>
 80093a0:	3408      	adds	r4, #8
 80093a2:	ab4a      	add	r3, sp, #296	; 0x128
 80093a4:	441c      	add	r4, r3
 80093a6:	462e      	mov	r6, r5
 80093a8:	2000      	movs	r0, #0
 80093aa:	2100      	movs	r1, #0
 80093ac:	2e00      	cmp	r6, #0
 80093ae:	da36      	bge.n	800941e <__kernel_rem_pio2+0x5ce>
 80093b0:	f1bb 0f00 	cmp.w	fp, #0
 80093b4:	d039      	beq.n	800942a <__kernel_rem_pio2+0x5da>
 80093b6:	4602      	mov	r2, r0
 80093b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093bc:	9c01      	ldr	r4, [sp, #4]
 80093be:	e9c4 2300 	strd	r2, r3, [r4]
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80093ca:	f7f6 ff6d 	bl	80002a8 <__aeabi_dsub>
 80093ce:	ae4c      	add	r6, sp, #304	; 0x130
 80093d0:	2401      	movs	r4, #1
 80093d2:	42a5      	cmp	r5, r4
 80093d4:	da2c      	bge.n	8009430 <__kernel_rem_pio2+0x5e0>
 80093d6:	f1bb 0f00 	cmp.w	fp, #0
 80093da:	d002      	beq.n	80093e2 <__kernel_rem_pio2+0x592>
 80093dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093e0:	4619      	mov	r1, r3
 80093e2:	9b01      	ldr	r3, [sp, #4]
 80093e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80093e8:	e7a5      	b.n	8009336 <__kernel_rem_pio2+0x4e6>
 80093ea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80093ee:	eb0d 0403 	add.w	r4, sp, r3
 80093f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80093f6:	2000      	movs	r0, #0
 80093f8:	2100      	movs	r1, #0
 80093fa:	2d00      	cmp	r5, #0
 80093fc:	da09      	bge.n	8009412 <__kernel_rem_pio2+0x5c2>
 80093fe:	f1bb 0f00 	cmp.w	fp, #0
 8009402:	d002      	beq.n	800940a <__kernel_rem_pio2+0x5ba>
 8009404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009408:	4619      	mov	r1, r3
 800940a:	9b01      	ldr	r3, [sp, #4]
 800940c:	e9c3 0100 	strd	r0, r1, [r3]
 8009410:	e791      	b.n	8009336 <__kernel_rem_pio2+0x4e6>
 8009412:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009416:	f7f6 ff49 	bl	80002ac <__adddf3>
 800941a:	3d01      	subs	r5, #1
 800941c:	e7ed      	b.n	80093fa <__kernel_rem_pio2+0x5aa>
 800941e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009422:	f7f6 ff43 	bl	80002ac <__adddf3>
 8009426:	3e01      	subs	r6, #1
 8009428:	e7c0      	b.n	80093ac <__kernel_rem_pio2+0x55c>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	e7c5      	b.n	80093bc <__kernel_rem_pio2+0x56c>
 8009430:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009434:	f7f6 ff3a 	bl	80002ac <__adddf3>
 8009438:	3401      	adds	r4, #1
 800943a:	e7ca      	b.n	80093d2 <__kernel_rem_pio2+0x582>
 800943c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009440:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009444:	9b02      	ldr	r3, [sp, #8]
 8009446:	3b01      	subs	r3, #1
 8009448:	9302      	str	r3, [sp, #8]
 800944a:	4632      	mov	r2, r6
 800944c:	463b      	mov	r3, r7
 800944e:	4640      	mov	r0, r8
 8009450:	4649      	mov	r1, r9
 8009452:	f7f6 ff2b 	bl	80002ac <__adddf3>
 8009456:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	4640      	mov	r0, r8
 8009460:	4649      	mov	r1, r9
 8009462:	f7f6 ff21 	bl	80002a8 <__aeabi_dsub>
 8009466:	4632      	mov	r2, r6
 8009468:	463b      	mov	r3, r7
 800946a:	f7f6 ff1f 	bl	80002ac <__adddf3>
 800946e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009472:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009476:	ed8a 7b00 	vstr	d7, [sl]
 800947a:	e76e      	b.n	800935a <__kernel_rem_pio2+0x50a>
 800947c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009480:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009484:	4640      	mov	r0, r8
 8009486:	4632      	mov	r2, r6
 8009488:	463b      	mov	r3, r7
 800948a:	4649      	mov	r1, r9
 800948c:	f7f6 ff0e 	bl	80002ac <__adddf3>
 8009490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4640      	mov	r0, r8
 800949a:	4649      	mov	r1, r9
 800949c:	f7f6 ff04 	bl	80002a8 <__aeabi_dsub>
 80094a0:	4632      	mov	r2, r6
 80094a2:	463b      	mov	r3, r7
 80094a4:	f7f6 ff02 	bl	80002ac <__adddf3>
 80094a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80094b0:	ed84 7b00 	vstr	d7, [r4]
 80094b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094b8:	e755      	b.n	8009366 <__kernel_rem_pio2+0x516>
 80094ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094be:	f7f6 fef5 	bl	80002ac <__adddf3>
 80094c2:	3d01      	subs	r5, #1
 80094c4:	e759      	b.n	800937a <__kernel_rem_pio2+0x52a>
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	9a01      	ldr	r2, [sp, #4]
 80094ca:	601d      	str	r5, [r3, #0]
 80094cc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80094d0:	605c      	str	r4, [r3, #4]
 80094d2:	609f      	str	r7, [r3, #8]
 80094d4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80094d8:	60d3      	str	r3, [r2, #12]
 80094da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094de:	6110      	str	r0, [r2, #16]
 80094e0:	6153      	str	r3, [r2, #20]
 80094e2:	e728      	b.n	8009336 <__kernel_rem_pio2+0x4e6>
 80094e4:	41700000 	.word	0x41700000
 80094e8:	3e700000 	.word	0x3e700000
 80094ec:	00000000 	.word	0x00000000

080094f0 <__kernel_sin>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	ed2d 8b04 	vpush	{d8-d9}
 80094f8:	eeb0 8a41 	vmov.f32	s16, s2
 80094fc:	eef0 8a61 	vmov.f32	s17, s3
 8009500:	ec55 4b10 	vmov	r4, r5, d0
 8009504:	b083      	sub	sp, #12
 8009506:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800950a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800950e:	9001      	str	r0, [sp, #4]
 8009510:	da06      	bge.n	8009520 <__kernel_sin+0x30>
 8009512:	ee10 0a10 	vmov	r0, s0
 8009516:	4629      	mov	r1, r5
 8009518:	f7f7 fb2e 	bl	8000b78 <__aeabi_d2iz>
 800951c:	2800      	cmp	r0, #0
 800951e:	d051      	beq.n	80095c4 <__kernel_sin+0xd4>
 8009520:	4622      	mov	r2, r4
 8009522:	462b      	mov	r3, r5
 8009524:	4620      	mov	r0, r4
 8009526:	4629      	mov	r1, r5
 8009528:	f7f7 f876 	bl	8000618 <__aeabi_dmul>
 800952c:	4682      	mov	sl, r0
 800952e:	468b      	mov	fp, r1
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4620      	mov	r0, r4
 8009536:	4629      	mov	r1, r5
 8009538:	f7f7 f86e 	bl	8000618 <__aeabi_dmul>
 800953c:	a341      	add	r3, pc, #260	; (adr r3, 8009644 <__kernel_sin+0x154>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	4680      	mov	r8, r0
 8009544:	4689      	mov	r9, r1
 8009546:	4650      	mov	r0, sl
 8009548:	4659      	mov	r1, fp
 800954a:	f7f7 f865 	bl	8000618 <__aeabi_dmul>
 800954e:	a33f      	add	r3, pc, #252	; (adr r3, 800964c <__kernel_sin+0x15c>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f7f6 fea8 	bl	80002a8 <__aeabi_dsub>
 8009558:	4652      	mov	r2, sl
 800955a:	465b      	mov	r3, fp
 800955c:	f7f7 f85c 	bl	8000618 <__aeabi_dmul>
 8009560:	a33c      	add	r3, pc, #240	; (adr r3, 8009654 <__kernel_sin+0x164>)
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	f7f6 fea1 	bl	80002ac <__adddf3>
 800956a:	4652      	mov	r2, sl
 800956c:	465b      	mov	r3, fp
 800956e:	f7f7 f853 	bl	8000618 <__aeabi_dmul>
 8009572:	a33a      	add	r3, pc, #232	; (adr r3, 800965c <__kernel_sin+0x16c>)
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f7f6 fe96 	bl	80002a8 <__aeabi_dsub>
 800957c:	4652      	mov	r2, sl
 800957e:	465b      	mov	r3, fp
 8009580:	f7f7 f84a 	bl	8000618 <__aeabi_dmul>
 8009584:	a337      	add	r3, pc, #220	; (adr r3, 8009664 <__kernel_sin+0x174>)
 8009586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958a:	f7f6 fe8f 	bl	80002ac <__adddf3>
 800958e:	9b01      	ldr	r3, [sp, #4]
 8009590:	4606      	mov	r6, r0
 8009592:	460f      	mov	r7, r1
 8009594:	b9eb      	cbnz	r3, 80095d2 <__kernel_sin+0xe2>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4650      	mov	r0, sl
 800959c:	4659      	mov	r1, fp
 800959e:	f7f7 f83b 	bl	8000618 <__aeabi_dmul>
 80095a2:	a325      	add	r3, pc, #148	; (adr r3, 8009638 <__kernel_sin+0x148>)
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f7f6 fe7e 	bl	80002a8 <__aeabi_dsub>
 80095ac:	4642      	mov	r2, r8
 80095ae:	464b      	mov	r3, r9
 80095b0:	f7f7 f832 	bl	8000618 <__aeabi_dmul>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4620      	mov	r0, r4
 80095ba:	4629      	mov	r1, r5
 80095bc:	f7f6 fe76 	bl	80002ac <__adddf3>
 80095c0:	4604      	mov	r4, r0
 80095c2:	460d      	mov	r5, r1
 80095c4:	ec45 4b10 	vmov	d0, r4, r5
 80095c8:	b003      	add	sp, #12
 80095ca:	ecbd 8b04 	vpop	{d8-d9}
 80095ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d2:	4b1b      	ldr	r3, [pc, #108]	; (8009640 <__kernel_sin+0x150>)
 80095d4:	ec51 0b18 	vmov	r0, r1, d8
 80095d8:	2200      	movs	r2, #0
 80095da:	f7f7 f81d 	bl	8000618 <__aeabi_dmul>
 80095de:	4632      	mov	r2, r6
 80095e0:	ec41 0b19 	vmov	d9, r0, r1
 80095e4:	463b      	mov	r3, r7
 80095e6:	4640      	mov	r0, r8
 80095e8:	4649      	mov	r1, r9
 80095ea:	f7f7 f815 	bl	8000618 <__aeabi_dmul>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	ec51 0b19 	vmov	r0, r1, d9
 80095f6:	f7f6 fe57 	bl	80002a8 <__aeabi_dsub>
 80095fa:	4652      	mov	r2, sl
 80095fc:	465b      	mov	r3, fp
 80095fe:	f7f7 f80b 	bl	8000618 <__aeabi_dmul>
 8009602:	ec53 2b18 	vmov	r2, r3, d8
 8009606:	f7f6 fe4f 	bl	80002a8 <__aeabi_dsub>
 800960a:	a30b      	add	r3, pc, #44	; (adr r3, 8009638 <__kernel_sin+0x148>)
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	4606      	mov	r6, r0
 8009612:	460f      	mov	r7, r1
 8009614:	4640      	mov	r0, r8
 8009616:	4649      	mov	r1, r9
 8009618:	f7f6 fffe 	bl	8000618 <__aeabi_dmul>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4630      	mov	r0, r6
 8009622:	4639      	mov	r1, r7
 8009624:	f7f6 fe42 	bl	80002ac <__adddf3>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4620      	mov	r0, r4
 800962e:	4629      	mov	r1, r5
 8009630:	f7f6 fe3a 	bl	80002a8 <__aeabi_dsub>
 8009634:	e7c4      	b.n	80095c0 <__kernel_sin+0xd0>
 8009636:	bf00      	nop
 8009638:	55555549 	.word	0x55555549
 800963c:	3fc55555 	.word	0x3fc55555
 8009640:	3fe00000 	.word	0x3fe00000
 8009644:	5acfd57c 	.word	0x5acfd57c
 8009648:	3de5d93a 	.word	0x3de5d93a
 800964c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009650:	3e5ae5e6 	.word	0x3e5ae5e6
 8009654:	57b1fe7d 	.word	0x57b1fe7d
 8009658:	3ec71de3 	.word	0x3ec71de3
 800965c:	19c161d5 	.word	0x19c161d5
 8009660:	3f2a01a0 	.word	0x3f2a01a0
 8009664:	1110f8a6 	.word	0x1110f8a6
 8009668:	3f811111 	.word	0x3f811111

0800966c <with_errno>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	4604      	mov	r4, r0
 8009670:	460d      	mov	r5, r1
 8009672:	4616      	mov	r6, r2
 8009674:	f7fd f852 	bl	800671c <__errno>
 8009678:	4629      	mov	r1, r5
 800967a:	6006      	str	r6, [r0, #0]
 800967c:	4620      	mov	r0, r4
 800967e:	bd70      	pop	{r4, r5, r6, pc}

08009680 <xflow>:
 8009680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009682:	4614      	mov	r4, r2
 8009684:	461d      	mov	r5, r3
 8009686:	b108      	cbz	r0, 800968c <xflow+0xc>
 8009688:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800968c:	e9cd 2300 	strd	r2, r3, [sp]
 8009690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009694:	4620      	mov	r0, r4
 8009696:	4629      	mov	r1, r5
 8009698:	f7f6 ffbe 	bl	8000618 <__aeabi_dmul>
 800969c:	2222      	movs	r2, #34	; 0x22
 800969e:	b003      	add	sp, #12
 80096a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096a4:	f7ff bfe2 	b.w	800966c <with_errno>

080096a8 <__math_uflow>:
 80096a8:	b508      	push	{r3, lr}
 80096aa:	2200      	movs	r2, #0
 80096ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096b0:	f7ff ffe6 	bl	8009680 <xflow>
 80096b4:	ec41 0b10 	vmov	d0, r0, r1
 80096b8:	bd08      	pop	{r3, pc}

080096ba <__math_oflow>:
 80096ba:	b508      	push	{r3, lr}
 80096bc:	2200      	movs	r2, #0
 80096be:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80096c2:	f7ff ffdd 	bl	8009680 <xflow>
 80096c6:	ec41 0b10 	vmov	d0, r0, r1
 80096ca:	bd08      	pop	{r3, pc}

080096cc <fabs>:
 80096cc:	ec51 0b10 	vmov	r0, r1, d0
 80096d0:	ee10 2a10 	vmov	r2, s0
 80096d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096d8:	ec43 2b10 	vmov	d0, r2, r3
 80096dc:	4770      	bx	lr

080096de <finite>:
 80096de:	b082      	sub	sp, #8
 80096e0:	ed8d 0b00 	vstr	d0, [sp]
 80096e4:	9801      	ldr	r0, [sp, #4]
 80096e6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80096ea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80096ee:	0fc0      	lsrs	r0, r0, #31
 80096f0:	b002      	add	sp, #8
 80096f2:	4770      	bx	lr
 80096f4:	0000      	movs	r0, r0
	...

080096f8 <floor>:
 80096f8:	ec51 0b10 	vmov	r0, r1, d0
 80096fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009700:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009704:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009708:	2e13      	cmp	r6, #19
 800970a:	ee10 5a10 	vmov	r5, s0
 800970e:	ee10 8a10 	vmov	r8, s0
 8009712:	460c      	mov	r4, r1
 8009714:	dc32      	bgt.n	800977c <floor+0x84>
 8009716:	2e00      	cmp	r6, #0
 8009718:	da14      	bge.n	8009744 <floor+0x4c>
 800971a:	a333      	add	r3, pc, #204	; (adr r3, 80097e8 <floor+0xf0>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 fdc4 	bl	80002ac <__adddf3>
 8009724:	2200      	movs	r2, #0
 8009726:	2300      	movs	r3, #0
 8009728:	f7f7 fa06 	bl	8000b38 <__aeabi_dcmpgt>
 800972c:	b138      	cbz	r0, 800973e <floor+0x46>
 800972e:	2c00      	cmp	r4, #0
 8009730:	da57      	bge.n	80097e2 <floor+0xea>
 8009732:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009736:	431d      	orrs	r5, r3
 8009738:	d001      	beq.n	800973e <floor+0x46>
 800973a:	4c2d      	ldr	r4, [pc, #180]	; (80097f0 <floor+0xf8>)
 800973c:	2500      	movs	r5, #0
 800973e:	4621      	mov	r1, r4
 8009740:	4628      	mov	r0, r5
 8009742:	e025      	b.n	8009790 <floor+0x98>
 8009744:	4f2b      	ldr	r7, [pc, #172]	; (80097f4 <floor+0xfc>)
 8009746:	4137      	asrs	r7, r6
 8009748:	ea01 0307 	and.w	r3, r1, r7
 800974c:	4303      	orrs	r3, r0
 800974e:	d01f      	beq.n	8009790 <floor+0x98>
 8009750:	a325      	add	r3, pc, #148	; (adr r3, 80097e8 <floor+0xf0>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	f7f6 fda9 	bl	80002ac <__adddf3>
 800975a:	2200      	movs	r2, #0
 800975c:	2300      	movs	r3, #0
 800975e:	f7f7 f9eb 	bl	8000b38 <__aeabi_dcmpgt>
 8009762:	2800      	cmp	r0, #0
 8009764:	d0eb      	beq.n	800973e <floor+0x46>
 8009766:	2c00      	cmp	r4, #0
 8009768:	bfbe      	ittt	lt
 800976a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800976e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009772:	19a4      	addlt	r4, r4, r6
 8009774:	ea24 0407 	bic.w	r4, r4, r7
 8009778:	2500      	movs	r5, #0
 800977a:	e7e0      	b.n	800973e <floor+0x46>
 800977c:	2e33      	cmp	r6, #51	; 0x33
 800977e:	dd0b      	ble.n	8009798 <floor+0xa0>
 8009780:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009784:	d104      	bne.n	8009790 <floor+0x98>
 8009786:	ee10 2a10 	vmov	r2, s0
 800978a:	460b      	mov	r3, r1
 800978c:	f7f6 fd8e 	bl	80002ac <__adddf3>
 8009790:	ec41 0b10 	vmov	d0, r0, r1
 8009794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009798:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800979c:	f04f 33ff 	mov.w	r3, #4294967295
 80097a0:	fa23 f707 	lsr.w	r7, r3, r7
 80097a4:	4207      	tst	r7, r0
 80097a6:	d0f3      	beq.n	8009790 <floor+0x98>
 80097a8:	a30f      	add	r3, pc, #60	; (adr r3, 80097e8 <floor+0xf0>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f6 fd7d 	bl	80002ac <__adddf3>
 80097b2:	2200      	movs	r2, #0
 80097b4:	2300      	movs	r3, #0
 80097b6:	f7f7 f9bf 	bl	8000b38 <__aeabi_dcmpgt>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d0bf      	beq.n	800973e <floor+0x46>
 80097be:	2c00      	cmp	r4, #0
 80097c0:	da02      	bge.n	80097c8 <floor+0xd0>
 80097c2:	2e14      	cmp	r6, #20
 80097c4:	d103      	bne.n	80097ce <floor+0xd6>
 80097c6:	3401      	adds	r4, #1
 80097c8:	ea25 0507 	bic.w	r5, r5, r7
 80097cc:	e7b7      	b.n	800973e <floor+0x46>
 80097ce:	2301      	movs	r3, #1
 80097d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80097d4:	fa03 f606 	lsl.w	r6, r3, r6
 80097d8:	4435      	add	r5, r6
 80097da:	4545      	cmp	r5, r8
 80097dc:	bf38      	it	cc
 80097de:	18e4      	addcc	r4, r4, r3
 80097e0:	e7f2      	b.n	80097c8 <floor+0xd0>
 80097e2:	2500      	movs	r5, #0
 80097e4:	462c      	mov	r4, r5
 80097e6:	e7aa      	b.n	800973e <floor+0x46>
 80097e8:	8800759c 	.word	0x8800759c
 80097ec:	7e37e43c 	.word	0x7e37e43c
 80097f0:	bff00000 	.word	0xbff00000
 80097f4:	000fffff 	.word	0x000fffff

080097f8 <scalbn>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	ec55 4b10 	vmov	r4, r5, d0
 80097fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009802:	4606      	mov	r6, r0
 8009804:	462b      	mov	r3, r5
 8009806:	b99a      	cbnz	r2, 8009830 <scalbn+0x38>
 8009808:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800980c:	4323      	orrs	r3, r4
 800980e:	d036      	beq.n	800987e <scalbn+0x86>
 8009810:	4b39      	ldr	r3, [pc, #228]	; (80098f8 <scalbn+0x100>)
 8009812:	4629      	mov	r1, r5
 8009814:	ee10 0a10 	vmov	r0, s0
 8009818:	2200      	movs	r2, #0
 800981a:	f7f6 fefd 	bl	8000618 <__aeabi_dmul>
 800981e:	4b37      	ldr	r3, [pc, #220]	; (80098fc <scalbn+0x104>)
 8009820:	429e      	cmp	r6, r3
 8009822:	4604      	mov	r4, r0
 8009824:	460d      	mov	r5, r1
 8009826:	da10      	bge.n	800984a <scalbn+0x52>
 8009828:	a32b      	add	r3, pc, #172	; (adr r3, 80098d8 <scalbn+0xe0>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	e03a      	b.n	80098a6 <scalbn+0xae>
 8009830:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009834:	428a      	cmp	r2, r1
 8009836:	d10c      	bne.n	8009852 <scalbn+0x5a>
 8009838:	ee10 2a10 	vmov	r2, s0
 800983c:	4620      	mov	r0, r4
 800983e:	4629      	mov	r1, r5
 8009840:	f7f6 fd34 	bl	80002ac <__adddf3>
 8009844:	4604      	mov	r4, r0
 8009846:	460d      	mov	r5, r1
 8009848:	e019      	b.n	800987e <scalbn+0x86>
 800984a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800984e:	460b      	mov	r3, r1
 8009850:	3a36      	subs	r2, #54	; 0x36
 8009852:	4432      	add	r2, r6
 8009854:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009858:	428a      	cmp	r2, r1
 800985a:	dd08      	ble.n	800986e <scalbn+0x76>
 800985c:	2d00      	cmp	r5, #0
 800985e:	a120      	add	r1, pc, #128	; (adr r1, 80098e0 <scalbn+0xe8>)
 8009860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009864:	da1c      	bge.n	80098a0 <scalbn+0xa8>
 8009866:	a120      	add	r1, pc, #128	; (adr r1, 80098e8 <scalbn+0xf0>)
 8009868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800986c:	e018      	b.n	80098a0 <scalbn+0xa8>
 800986e:	2a00      	cmp	r2, #0
 8009870:	dd08      	ble.n	8009884 <scalbn+0x8c>
 8009872:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009876:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800987a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800987e:	ec45 4b10 	vmov	d0, r4, r5
 8009882:	bd70      	pop	{r4, r5, r6, pc}
 8009884:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009888:	da19      	bge.n	80098be <scalbn+0xc6>
 800988a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800988e:	429e      	cmp	r6, r3
 8009890:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009894:	dd0a      	ble.n	80098ac <scalbn+0xb4>
 8009896:	a112      	add	r1, pc, #72	; (adr r1, 80098e0 <scalbn+0xe8>)
 8009898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e2      	bne.n	8009866 <scalbn+0x6e>
 80098a0:	a30f      	add	r3, pc, #60	; (adr r3, 80098e0 <scalbn+0xe8>)
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	f7f6 feb7 	bl	8000618 <__aeabi_dmul>
 80098aa:	e7cb      	b.n	8009844 <scalbn+0x4c>
 80098ac:	a10a      	add	r1, pc, #40	; (adr r1, 80098d8 <scalbn+0xe0>)
 80098ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0b8      	beq.n	8009828 <scalbn+0x30>
 80098b6:	a10e      	add	r1, pc, #56	; (adr r1, 80098f0 <scalbn+0xf8>)
 80098b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098bc:	e7b4      	b.n	8009828 <scalbn+0x30>
 80098be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098c2:	3236      	adds	r2, #54	; 0x36
 80098c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80098cc:	4620      	mov	r0, r4
 80098ce:	4b0c      	ldr	r3, [pc, #48]	; (8009900 <scalbn+0x108>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	e7e8      	b.n	80098a6 <scalbn+0xae>
 80098d4:	f3af 8000 	nop.w
 80098d8:	c2f8f359 	.word	0xc2f8f359
 80098dc:	01a56e1f 	.word	0x01a56e1f
 80098e0:	8800759c 	.word	0x8800759c
 80098e4:	7e37e43c 	.word	0x7e37e43c
 80098e8:	8800759c 	.word	0x8800759c
 80098ec:	fe37e43c 	.word	0xfe37e43c
 80098f0:	c2f8f359 	.word	0xc2f8f359
 80098f4:	81a56e1f 	.word	0x81a56e1f
 80098f8:	43500000 	.word	0x43500000
 80098fc:	ffff3cb0 	.word	0xffff3cb0
 8009900:	3c900000 	.word	0x3c900000

08009904 <_init>:
 8009904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009906:	bf00      	nop
 8009908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800990a:	bc08      	pop	{r3}
 800990c:	469e      	mov	lr, r3
 800990e:	4770      	bx	lr

08009910 <_fini>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	bf00      	nop
 8009914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009916:	bc08      	pop	{r3}
 8009918:	469e      	mov	lr, r3
 800991a:	4770      	bx	lr
