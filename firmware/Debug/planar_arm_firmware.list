
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009918  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009ab8  08009ab8  00019ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ee4  08009ee4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009ee4  08009ee4  00019ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eec  08009eec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eec  08009eec  00019eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ef0  08009ef0  00019ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  200001e0  0800a0d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  0800a0d4  0002083c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fa8  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002509  00000000  00000000  000311b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  000336c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00034588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178fe  00000000  00000000  00035360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b61  00000000  00000000  0004cc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090801  00000000  00000000  0005d7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edfc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b4  00000000  00000000  000ee010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009aa0 	.word	0x08009aa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009aa0 	.word	0x08009aa0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <HAL_UART_RxCpltCallback>:
float ui[2]= {0.0 , 0.0};

float pos_prec[2]={0.f ,0.f};


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b0ab      	sub	sp, #172	; 0xac
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]



    double value;
    unsigned long long encoding;
    uint8_t i = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    /* read the first characters */

    memcpy(str,rx_data,sizeof str);
 8000fca:	4a3f      	ldr	r2, [pc, #252]	; (80010c8 <HAL_UART_RxCpltCallback+0x10c>)
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	2278      	movs	r2, #120	; 0x78
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f005 fdf5 	bl	8006bc4 <memcpy>

    char  *save_ptr;

    cmd = strtok_r((char*) str, ":", &save_ptr);
 8000fda:	f107 020c 	add.w	r2, r7, #12
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	493a      	ldr	r1, [pc, #232]	; (80010cc <HAL_UART_RxCpltCallback+0x110>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f006 faad 	bl	8007544 <strtok_r>
 8000fea:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

   // printf("%s %d \n",cmd,!strcmp(cmd, "TRJ"));
    //fflush(stdout);

    if(!strcmp(cmd, "TRJ")){
 8000fee:	4938      	ldr	r1, [pc, #224]	; (80010d0 <HAL_UART_RxCpltCallback+0x114>)
 8000ff0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000ff4:	f7ff f8f4 	bl	80001e0 <strcmp>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d156      	bne.n	80010ac <HAL_UART_RxCpltCallback+0xf0>
    	   count++;
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <HAL_UART_RxCpltCallback+0x118>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <HAL_UART_RxCpltCallback+0x118>)
 8001006:	6013      	str	r3, [r2, #0]

    	/* trj case*/
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        //data = strtok(cmd+sizeof cmd, ":");
	   data = strtok_r(cmd+sizeof cmd, ":",  &save_ptr);
 8001008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800100c:	3304      	adds	r3, #4
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	492e      	ldr	r1, [pc, #184]	; (80010cc <HAL_UART_RxCpltCallback+0x110>)
 8001014:	4618      	mov	r0, r3
 8001016:	f006 fa95 	bl	8007544 <strtok_r>
 800101a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        while(data != NULL){
 800101e:	e032      	b.n	8001086 <HAL_UART_RxCpltCallback+0xca>
            if(i == 6) break; /* reading penup */
 8001020:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001024:	2b06      	cmp	r3, #6
 8001026:	d033      	beq.n	8001090 <HAL_UART_RxCpltCallback+0xd4>
            // value = "0x"; /* will contain the value extracted from the received string */
            encoding = strtoull(data, NULL, 16);
 8001028:	2210      	movs	r2, #16
 800102a:	2100      	movs	r1, #0
 800102c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001030:	f006 fbb0 	bl	8007794 <strtoull>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800103c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
            memcpy(&value, &encoding, sizeof value);
 8001040:	e9c7 2306 	strd	r2, r3, [r7, #24]

            // value = strcat(value, data); /* string concatenation REF: https://www.programiz.com/c-programming/library-function/string.h/strcat */
            rbpush((((ringbuffer_t *) &manip)+i), (float) value); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 8001044:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001048:	222c      	movs	r2, #44	; 0x2c
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	4a22      	ldr	r2, [pc, #136]	; (80010d8 <HAL_UART_RxCpltCallback+0x11c>)
 8001050:	189c      	adds	r4, r3, r2
 8001052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fddd 	bl	8000c18 <__aeabi_d2f>
 800105e:	4603      	mov	r3, r0
 8001060:	ee00 3a10 	vmov	s0, r3
 8001064:	4620      	mov	r0, r4
 8001066:	f001 fce3 	bl	8002a30 <rbpush>
            data = strtok_r(NULL, ":", &save_ptr);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	461a      	mov	r2, r3
 8001070:	4916      	ldr	r1, [pc, #88]	; (80010cc <HAL_UART_RxCpltCallback+0x110>)
 8001072:	2000      	movs	r0, #0
 8001074:	f006 fa66 	bl	8007544 <strtok_r>
 8001078:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
            i++;
 800107c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001080:	3301      	adds	r3, #1
 8001082:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        while(data != NULL){
 8001086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1c8      	bne.n	8001020 <HAL_UART_RxCpltCallback+0x64>
 800108e:	e000      	b.n	8001092 <HAL_UART_RxCpltCallback+0xd6>
            if(i == 6) break; /* reading penup */
 8001090:	bf00      	nop
        }
        rbpush(&manip.penup, (float) atoi(data));
 8001092:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001096:	f005 fd67 	bl	8006b68 <atoi>
 800109a:	ee07 0a90 	vmov	s15, r0
 800109e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <HAL_UART_RxCpltCallback+0x120>)
 80010a8:	f001 fcc2 	bl	8002a30 <rbpush>
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(huart, rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 80010ac:	2278      	movs	r2, #120	; 0x78
 80010ae:	4906      	ldr	r1, [pc, #24]	; (80010c8 <HAL_UART_RxCpltCallback+0x10c>)
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f004 fca4 	bl	80059fe <HAL_UART_Receive_DMA>


    //__enable_irq();

       return
	   count++;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <HAL_UART_RxCpltCallback+0x118>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <HAL_UART_RxCpltCallback+0x118>)
 80010be:	6013      	str	r3, [r2, #0]

		  //HAL_UART_Receive_DMA(huart, rx_data, 121);



}
 80010c0:	37ac      	adds	r7, #172	; 0xac
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001fc 	.word	0x200001fc
 80010cc:	08009ab8 	.word	0x08009ab8
 80010d0:	08009abc 	.word	0x08009abc
 80010d4:	200005b4 	.word	0x200005b4
 80010d8:	20000274 	.word	0x20000274
 80010dc:	2000037c 	.word	0x2000037c

080010e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
    // TODO: Implement limit switch handling
    uint32_t now;
    now = HAL_GetTick();
 80010ea:	f002 f991 	bl	8003410 <HAL_GetTick>
 80010ee:	60f8      	str	r0, [r7, #12]
    if((now - previous_trigger) > DEBOUNCE_DELAY){
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_GPIO_EXTI_Callback+0x54>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b32      	cmp	r3, #50	; 0x32
 80010fa:	d916      	bls.n	800112a <HAL_GPIO_EXTI_Callback+0x4a>
        if(!triggered){
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_GPIO_EXTI_Callback+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d108      	bne.n	8001116 <HAL_GPIO_EXTI_Callback+0x36>
          limit_switch *= -1;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	425b      	negs	r3, r3
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <HAL_GPIO_EXTI_Callback+0x5c>)
 800110c:	6013      	str	r3, [r2, #0]
            // SECTION - DEBUG
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800110e:	2120      	movs	r1, #32
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <HAL_GPIO_EXTI_Callback+0x60>)
 8001112:	f003 f85e 	bl	80041d2 <HAL_GPIO_TogglePin>
            // !SECTION - DEBUG
        }
        triggered = 1-triggered;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_GPIO_EXTI_Callback+0x58>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f1c3 0301 	rsb	r3, r3, #1
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_GPIO_EXTI_Callback+0x58>)
 8001122:	701a      	strb	r2, [r3, #0]
        previous_trigger = now;
 8001124:	4a03      	ldr	r2, [pc, #12]	; (8001134 <HAL_GPIO_EXTI_Callback+0x54>)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6013      	str	r3, [r2, #0]
    }
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000056c 	.word	0x2000056c
 8001138:	20000570 	.word	0x20000570
 800113c:	20000000 	.word	0x20000000
 8001140:	40020000 	.word	0x40020000

08001144 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d102      	bne.n	800115c <HAL_TIM_PeriodElapsedCallback+0x18>
		/* check if it is the proper instance */
		read_encoders(&manip);
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001158:	f000 fa4e 	bl	80015f8 <read_encoders>

	}
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40014400 	.word	0x40014400
 8001168:	20000274 	.word	0x20000274

0800116c <ITM_Sendchar>:

#define DEMCR               *((volatile uint32_t*) 0xE000EDFCU)
#define ITM_STIMULUS_PORT0  *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN        *((volatile uint32_t*) 0xE0000E00)

void ITM_Sendchar(uint8_t ch){
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <ITM_Sendchar+0x48>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <ITM_Sendchar+0x48>)
 800117c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001180:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <ITM_Sendchar+0x4c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <ITM_Sendchar+0x4c>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(! (ITM_STIMULUS_PORT0 & 1));
 800118e:	bf00      	nop
 8001190:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f8      	beq.n	8001190 <ITM_Sendchar+0x24>

	// Write to IT Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 800119e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	6013      	str	r3, [r2, #0]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000edfc 	.word	0xe000edfc
 80011b8:	e0000e00 	.word	0xe0000e00

080011bc <_write>:

int _write(int file,char *ptr, int len){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]

	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e009      	b.n	80011e2 <_write+0x26>
	{
		ITM_Sendchar(*ptr++);
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	60ba      	str	r2, [r7, #8]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ffc8 	bl	800116c <ITM_Sendchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbf1      	blt.n	80011ce <_write+0x12>
	}
	return len;
 80011ea:	687b      	ldr	r3, [r7, #4]

}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <init_man>:
- TIM_HandleTypeDef *htim2: pointer to the timer used to decode the output of the second encode;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip, TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 8001200:	2300      	movs	r3, #0
 8001202:	75fb      	strb	r3, [r7, #23]
 8001204:	e00b      	b.n	800121e <init_man+0x2a>
        rbclear((((ringbuffer_t *) manip)+i));
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	222c      	movs	r2, #44	; 0x2c
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fcea 	bl	8002bec <rbclear>
    for(i = 0; i < 14; i++){
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	3301      	adds	r3, #1
 800121c:	75fb      	strb	r3, [r7, #23]
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	2b0d      	cmp	r3, #13
 8001222:	d9f0      	bls.n	8001206 <init_man+0x12>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 8001224:	2300      	movs	r3, #0
 8001226:	75fb      	strb	r3, [r7, #23]
 8001228:	e012      	b.n	8001250 <init_man+0x5c>
        manip->B[i] = (float) 0;
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	339a      	adds	r3, #154	; 0x9a
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
        manip->C[i] = (float) 0;
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	339e      	adds	r3, #158	; 0x9e
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 4; i++){
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	3301      	adds	r3, #1
 800124e:	75fb      	strb	r3, [r7, #23]
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d9e9      	bls.n	800122a <init_man+0x36>
    }
    manip->htim_encoder1 = htim1;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    manip->htim_encoder2 = htim2;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <speed_estimation>:
- float *a_est: pointer to the variable that will hold the acceleration estimation;
@outputs: 
- void;
@#
*/
void speed_estimation(ringbuffer_t *q_actual, ringbuffer_t *dq_actual, ringbuffer_t *ddq_actual, float reduction, float *v_est, float *a_est){
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b0d6      	sub	sp, #344	; 0x158
 8001274:	af00      	add	r7, sp, #0
 8001276:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 800127a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
 800127e:	6020      	str	r0, [r4, #0]
 8001280:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8001284:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
 8001288:	6001      	str	r1, [r0, #0]
 800128a:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800128e:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8001292:	600a      	str	r2, [r1, #0]
 8001294:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001298:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800129c:	ed82 0a00 	vstr	s0, [r2]
 80012a0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80012a4:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80012a8:	6013      	str	r3, [r2, #0]
	*a_est = (a[3]-a[2])/T_S;
    return;
    */

    float prev, succ, vel,acc, a, b;
    succ=0;
 80012aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
    prev=0;
 80012b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 5; i++){
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 80012cc:	e023      	b.n	8001316 <speed_estimation+0xa6>
    	rbget(q_actual, i, &a);
 80012ce:	f997 1157 	ldrsb.w	r1, [r7, #343]	; 0x157
 80012d2:	f107 021c 	add.w	r2, r7, #28
 80012d6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	f001 fc44 	bl	8002b6c <rbget>
    	prev+=a;
 80012e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001300:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001304:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001308:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < 5; i++){
 800130c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001310:	3301      	adds	r3, #1
 8001312:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001316:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800131a:	2b04      	cmp	r3, #4
 800131c:	d9d7      	bls.n	80012ce <speed_estimation+0x5e>
    }
    for(i = 0; i < 5; i++){
 800131e:	2300      	movs	r3, #0
 8001320:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001324:	e026      	b.n	8001374 <speed_estimation+0x104>
    	rbget(q_actual, 5+i, &a);
 8001326:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800132a:	3305      	adds	r3, #5
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b259      	sxtb	r1, r3
 8001330:	f107 021c 	add.w	r2, r7, #28
 8001334:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001338:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	f001 fc15 	bl	8002b6c <rbget>
    	succ+=a;
 8001342:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001352:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001366:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < 5; i++){
 800136a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800136e:	3301      	adds	r3, #1
 8001370:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001374:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001378:	2b04      	cmp	r3, #4
 800137a:	d9d4      	bls.n	8001326 <speed_estimation+0xb6>
    }
    prev /=5;
 800137c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001380:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001384:	ed93 7a00 	vldr	s14, [r3]
 8001388:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800138c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001390:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001398:	edc3 7a00 	vstr	s15, [r3]
    succ /=5;
 800139c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013a4:	ed93 7a00 	vldr	s14, [r3]
 80013a8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80013ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013b8:	edc3 7a00 	vstr	s15, [r3]



    //rbget(q_actual,RBUF_SZ-1, &pos_succ);
    //rbget(q_actual,RBUF_SZ-2, &pos_prev);
    rblast(dq_actual,&vel);
 80013bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80013c0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80013c8:	4611      	mov	r1, r2
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	f001 fb9e 	bl	8002b0c <rblast>


    *v_est=0.8546*vel+((1-0.8546)*(succ-prev)/(T_C*5) );
 80013d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8cc 	bl	8000578 <__aeabi_f2d>
 80013e0:	a34f      	add	r3, pc, #316	; (adr r3, 8001520 <speed_estimation+0x2b0>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff f91f 	bl	8000628 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	461d      	mov	r5, r3
 80013f2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013fa:	ed93 7a00 	vldr	s14, [r3]
 80013fe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001402:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001406:	edd3 7a00 	vldr	s15, [r3]
 800140a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140e:	ee17 0a90 	vmov	r0, s15
 8001412:	f7ff f8b1 	bl	8000578 <__aeabi_f2d>
 8001416:	a344      	add	r3, pc, #272	; (adr r3, 8001528 <speed_estimation+0x2b8>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f904 	bl	8000628 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	a341      	add	r3, pc, #260	; (adr r3, 8001530 <speed_estimation+0x2c0>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff fa25 	bl	800087c <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7fe ff3f 	bl	80002bc <__adddf3>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fbe7 	bl	8000c18 <__aeabi_d2f>
 800144a:	4602      	mov	r2, r0
 800144c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001450:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	601a      	str	r2, [r3, #0]


    rbget(dq_actual, RBUF_SZ-1, &succ);
 8001458:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800145c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001460:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001464:	2109      	movs	r1, #9
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	f001 fb80 	bl	8002b6c <rbget>
    rbget(dq_actual, RBUF_SZ-2, &prev);
 800146c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001470:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001474:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001478:	2108      	movs	r1, #8
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	f001 fb76 	bl	8002b6c <rbget>
    //*a_est = (succ-prev)/T_C;
    rblast(ddq_actual,&acc);
 8001480:	f107 0220 	add.w	r2, r7, #32
 8001484:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001488:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800148c:	4611      	mov	r1, r2
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	f001 fb3c 	bl	8002b0c <rblast>
    *a_est= 0.9245*acc+((1- 0.9245)*(succ-prev)/(T_C) );
 8001494:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001498:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f86a 	bl	8000578 <__aeabi_f2d>
 80014a4:	a324      	add	r3, pc, #144	; (adr r3, 8001538 <speed_estimation+0x2c8>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff f8bd 	bl	8000628 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4614      	mov	r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80014ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80014c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d2:	ee17 0a90 	vmov	r0, s15
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a319      	add	r3, pc, #100	; (adr r3, 8001540 <speed_estimation+0x2d0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	a316      	add	r3, pc, #88	; (adr r3, 8001548 <speed_estimation+0x2d8>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f9c3 	bl	800087c <__aeabi_ddiv>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4620      	mov	r0, r4
 80014fc:	4629      	mov	r1, r5
 80014fe:	f7fe fedd 	bl	80002bc <__adddf3>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb85 	bl	8000c18 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001514:	601a      	str	r2, [r3, #0]


}
 8001516:	bf00      	nop
 8001518:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800151c:	46bd      	mov	sp, r7
 800151e:	bdb0      	pop	{r4, r5, r7, pc}
 8001520:	19652bd4 	.word	0x19652bd4
 8001524:	3feb58e2 	.word	0x3feb58e2
 8001528:	9a6b50b0 	.word	0x9a6b50b0
 800152c:	3fc29c77 	.word	0x3fc29c77
 8001530:	9999999a 	.word	0x9999999a
 8001534:	3fa99999 	.word	0x3fa99999
 8001538:	0624dd2f 	.word	0x0624dd2f
 800153c:	3fed9581 	.word	0x3fed9581
 8001540:	ced91688 	.word	0xced91688
 8001544:	3fb353f7 	.word	0x3fb353f7
 8001548:	47ae147b 	.word	0x47ae147b
 800154c:	3f847ae1 	.word	0x3f847ae1

08001550 <init_rate>:
- uint32_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint32_t ms){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
    rate->last_time = HAL_GetTick();
 800155a:	f001 ff59 	bl	8003410 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	601a      	str	r2, [r3, #0]
    rate->delta_time = ms;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	605a      	str	r2, [r3, #4]
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <rate_sleep>:
- rate_t *rate: pointer to the rate struct;
@outputs: 
- void;
@#
*/
void rate_sleep(rate_t *rate){
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
    float now, interval;
    now = HAL_GetTick();
 800157a:	f001 ff49 	bl	8003410 <HAL_GetTick>
 800157e:	ee07 0a90 	vmov	s15, r0
 8001582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001586:	edc7 7a03 	vstr	s15, [r7, #12]
    interval = (uint32_t) (now - rate->last_time); /* time passed from the last rate_sleep call */
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001596:	ed97 7a03 	vldr	s14, [r7, #12]
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a6:	edc7 7a02 	vstr	s15, [r7, #8]
    /* wait until enough time has passed from the last rate_sleep call */
    if(interval < rate->delta_time){
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80015ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	d50f      	bpl.n	80015e4 <rate_sleep+0x72>
        HAL_Delay(rate->delta_time-interval);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015dc:	ee17 0a90 	vmov	r0, s15
 80015e0:	f001 ff22 	bl	8003428 <HAL_Delay>
    }
    /* if enough time has passed, save the time stamp and go on with the process */
    rate->last_time = HAL_GetTick();
 80015e4:	f001 ff14 	bl	8003410 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	601a      	str	r2, [r3, #0]
    return;
 80015ee:	bf00      	nop
}
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <read_encoders>:
@inputs: 
- man_t *manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void read_encoders(man_t *manip){
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    uint16_t counter; 
    float displacement1, displacement2;
    // float v_est, a_est; /* used to hold temporarily the estimations of speed and acceleration */
    TIM_HandleTypeDef *htim1, *htim2;

    htim1 = manip->htim_encoder1; /* pointer to the timer struct that decodes the first encoder output */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8001606:	613b      	str	r3, [r7, #16]
    htim2 = manip->htim_encoder2; /* pointer to the timer struct that decodes the first encoder output */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800160e:	60fb      	str	r3, [r7, #12]

    /* first encoder */
    counter = (htim1->Instance->CNT);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim1->Instance->ARR){
 8001618:	8bfa      	ldrh	r2, [r7, #30]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	429a      	cmp	r2, r3
 8001622:	d309      	bcc.n	8001638 <read_encoders+0x40>
        counter = (htim1->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	b29b      	uxth	r3, r3
 800162c:	3b01      	subs	r3, #1
 800162e:	83fb      	strh	r3, [r7, #30]
        htim1->Instance->CNT = counter; /* correct cnt value */
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	8bfa      	ldrh	r2, [r7, #30]
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
    }

    displacement1 = (float) (2*M_PI*counter/(htim1->Instance->ARR));
 8001638:	8bfb      	ldrh	r3, [r7, #30]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff8a 	bl	8000554 <__aeabi_i2d>
 8001640:	a35f      	add	r3, pc, #380	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffef 	bl	8000628 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4614      	mov	r4, r2
 8001650:	461d      	mov	r5, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff6b 	bl	8000534 <__aeabi_ui2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	f7ff f909 	bl	800087c <__aeabi_ddiv>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff fad1 	bl	8000c18 <__aeabi_d2f>
 8001676:	4603      	mov	r3, r0
 8001678:	61bb      	str	r3, [r7, #24]

    /* second encoder */
    counter = (htim2->Instance->CNT);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim2->Instance->ARR){
 8001682:	8bfa      	ldrh	r2, [r7, #30]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	429a      	cmp	r2, r3
 800168c:	d309      	bcc.n	80016a2 <read_encoders+0xaa>
        counter = (htim2->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	b29b      	uxth	r3, r3
 8001696:	3b01      	subs	r3, #1
 8001698:	83fb      	strh	r3, [r7, #30]
        htim2->Instance->CNT = counter;  /* correct cnt value */
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	8bfa      	ldrh	r2, [r7, #30]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
    }
    displacement2 = (float) (2*M_PI) - (2*M_PI*counter/(htim2->Instance->ARR)); /* the motor is upside down */
 80016a2:	8bfb      	ldrh	r3, [r7, #30]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff55 	bl	8000554 <__aeabi_i2d>
 80016aa:	a345      	add	r3, pc, #276	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7fe ffba 	bl	8000628 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4614      	mov	r4, r2
 80016ba:	461d      	mov	r5, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff36 	bl	8000534 <__aeabi_ui2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7ff f8d4 	bl	800087c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	a13e      	add	r1, pc, #248	; (adr r1, 80017d4 <read_encoders+0x1dc>)
 80016da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016de:	f7fe fdeb 	bl	80002b8 <__aeabi_dsub>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fa95 	bl	8000c18 <__aeabi_d2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	617b      	str	r3, [r7, #20]

    // SECTION DEBUG
    // rbpush(&timestamps, (float) HAL_GetTick()/1000.0);
    // !SECTION DEBUG

    if(displacement1 > 2*M_PI){
 80016f2:	69b8      	ldr	r0, [r7, #24]
 80016f4:	f7fe ff40 	bl	8000578 <__aeabi_f2d>
 80016f8:	a331      	add	r3, pc, #196	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7ff fa23 	bl	8000b48 <__aeabi_dcmpgt>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <read_encoders+0x114>
    	displacement1 = 2*M_PI; /* clamping */
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <read_encoders+0x1d8>)
 800170a:	61bb      	str	r3, [r7, #24]
	}
	if(displacement2 > 2*M_PI){
 800170c:	6978      	ldr	r0, [r7, #20]
 800170e:	f7fe ff33 	bl	8000578 <__aeabi_f2d>
 8001712:	a32b      	add	r3, pc, #172	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7ff fa16 	bl	8000b48 <__aeabi_dcmpgt>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <read_encoders+0x12e>
		displacement2 = 2*M_PI; /* clamping */
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <read_encoders+0x1d8>)
 8001724:	617b      	str	r3, [r7, #20]
	}
    if(displacement1 > M_PI){
 8001726:	69b8      	ldr	r0, [r7, #24]
 8001728:	f7fe ff26 	bl	8000578 <__aeabi_f2d>
 800172c:	a326      	add	r3, pc, #152	; (adr r3, 80017c8 <read_encoders+0x1d0>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7ff fa09 	bl	8000b48 <__aeabi_dcmpgt>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00f      	beq.n	800175c <read_encoders+0x164>
    	displacement1 = displacement1 - (2*M_PI); /* redefining the domain between -PI and +PI */
 800173c:	69b8      	ldr	r0, [r7, #24]
 800173e:	f7fe ff1b 	bl	8000578 <__aeabi_f2d>
 8001742:	a31f      	add	r3, pc, #124	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe fdb6 	bl	80002b8 <__aeabi_dsub>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f7ff fa60 	bl	8000c18 <__aeabi_d2f>
 8001758:	4603      	mov	r3, r0
 800175a:	61bb      	str	r3, [r7, #24]
    }
    if(displacement2 > M_PI){
 800175c:	6978      	ldr	r0, [r7, #20]
 800175e:	f7fe ff0b 	bl	8000578 <__aeabi_f2d>
 8001762:	a319      	add	r3, pc, #100	; (adr r3, 80017c8 <read_encoders+0x1d0>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f9ee 	bl	8000b48 <__aeabi_dcmpgt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00f      	beq.n	8001792 <read_encoders+0x19a>
    	displacement2 = displacement2 - (2*M_PI); /* redefining the domain between -PI and +PI */
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7fe ff00 	bl	8000578 <__aeabi_f2d>
 8001778:	a311      	add	r3, pc, #68	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe fd9b 	bl	80002b8 <__aeabi_dsub>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff fa45 	bl	8000c18 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	617b      	str	r3, [r7, #20]
    /*
    uint8_t dir1 = (uint8_t) (htim1->Instance->CR1 >> 4) & 1;
    uint8_t dir2 = (uint8_t) (htim2->Instance->CR1 >> 4) & 1;
    */
    // SECTION DEBUG
    rbpush(&manip->q0_actual, displacement1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001798:	ed97 0a06 	vldr	s0, [r7, #24]
 800179c:	4618      	mov	r0, r3
 800179e:	f001 f947 	bl	8002a30 <rbpush>
    rbpush(&manip->q1_actual, displacement2);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80017a8:	ed97 0a05 	vldr	s0, [r7, #20]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 f93f 	bl	8002a30 <rbpush>

	rbpush(&manip->dq1_actual, v_est);
	rbpush(&manip->ddq1_actual, a_est);
    // !SECTION DEBUG
	*/
}
 80017b2:	bf00      	nop
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	54442d18 	.word	0x54442d18
 80017c4:	401921fb 	.word	0x401921fb
 80017c8:	54442d18 	.word	0x54442d18
 80017cc:	400921fb 	.word	0x400921fb
 80017d0:	40c90fdb 	.word	0x40c90fdb
 80017d4:	60000000 	.word	0x60000000
 80017d8:	401921fb 	.word	0x401921fb

080017dc <update_speeds>:

void update_speeds(man_t *manip){
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b087      	sub	sp, #28
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	6078      	str	r0, [r7, #4]
	float v_est, a_est;
	speed_estimation(&manip->q0_actual, &manip->dq0_actual,&manip->ddq0_actual, reduction1, &v_est, &a_est);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f503 709a 	add.w	r0, r3, #308	; 0x134
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f503 71c6 	add.w	r1, r3, #396	; 0x18c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 80017f6:	eddf 7a28 	vldr	s15, [pc, #160]	; 8001898 <update_speeds+0xbc>
 80017fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017fe:	f107 040c 	add.w	r4, r7, #12
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4623      	mov	r3, r4
 800180a:	eeb0 0a67 	vmov.f32	s0, s15
 800180e:	f7ff fd2f 	bl	8001270 <speed_estimation>
	//disp1 = v_est;
	rbpush(&manip->dq0_actual, v_est);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001818:	edd7 7a03 	vldr	s15, [r7, #12]
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	4618      	mov	r0, r3
 8001822:	f001 f905 	bl	8002a30 <rbpush>
	rbpush(&manip->ddq0_actual, a_est);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800182c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001830:	eeb0 0a67 	vmov.f32	s0, s15
 8001834:	4618      	mov	r0, r3
 8001836:	f001 f8fb 	bl	8002a30 <rbpush>

	speed_estimation(&manip->q1_actual, &manip->dq1_actual,&manip->ddq1_actual, reduction2, &v_est, &a_est);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800184c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800189c <update_speeds+0xc0>
 8001850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001854:	f107 040c 	add.w	r4, r7, #12
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	4623      	mov	r3, r4
 8001860:	eeb0 0a67 	vmov.f32	s0, s15
 8001864:	f7ff fd04 	bl	8001270 <speed_estimation>
	//disp2 = v_est;
	rbpush(&manip->dq1_actual, v_est);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800186e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	4618      	mov	r0, r3
 8001878:	f001 f8da 	bl	8002a30 <rbpush>
	rbpush(&manip->ddq1_actual, a_est);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001882:	edd7 7a02 	vldr	s15, [r7, #8]
 8001886:	eeb0 0a67 	vmov.f32	s0, s15
 800188a:	4618      	mov	r0, r3
 800188c:	f001 f8d0 	bl	8002a30 <rbpush>
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	0000000a 	.word	0x0000000a
 800189c:	00000005 	.word	0x00000005

080018a0 <apply_position_input>:
    // __HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
    // htim2->Instance->EGR = TIM_EGR_UG;
}


void apply_position_input(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, float *u , float *pos){
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b08e      	sub	sp, #56	; 0x38
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
    __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
    htim1->Instance->EGR = TIM_EGR_UG;
    */
    // rad2stepdir(u[0], RESOLUTION, (float) 1/T_C, &steps, &dir);

    if (ABS(u[0]-pos[0])<0.01){
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	ed93 7a00 	vldr	s14, [r3]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	bfac      	ite	ge
 80018c8:	2301      	movge	r3, #1
 80018ca:	2300      	movlt	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	ed93 7a00 	vldr	s14, [r3]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	bf94      	ite	ls
 80018ea:	2301      	movls	r3, #1
 80018ec:	2300      	movhi	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001912:	ee17 0a90 	vmov	r0, s15
 8001916:	f7fe fe2f 	bl	8000578 <__aeabi_f2d>
 800191a:	a3c3      	add	r3, pc, #780	; (adr r3, 8001c28 <apply_position_input+0x388>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7ff f8f4 	bl	8000b0c <__aeabi_dcmplt>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <apply_position_input+0x90>
    	tc0= 1000000;
 800192a:	4bc3      	ldr	r3, [pc, #780]	; (8001c38 <apply_position_input+0x398>)
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	e055      	b.n	80019dc <apply_position_input+0x13c>
    }else{
    tc0 = sqrt(2*M_PI*ABS(u[0]-pos[0])/1.05);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	ed93 7a00 	vldr	s14, [r3]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001940:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	bfac      	ite	ge
 800194a:	2301      	movge	r3, #1
 800194c:	2300      	movlt	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	ed93 7a00 	vldr	s14, [r3]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001962:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	bf94      	ite	ls
 800196c:	2301      	movls	r3, #1
 800196e:	2300      	movhi	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	b25b      	sxtb	r3, r3
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001994:	ee17 0a90 	vmov	r0, s15
 8001998:	f7fe fdee 	bl	8000578 <__aeabi_f2d>
 800199c:	a39e      	add	r3, pc, #632	; (adr r3, 8001c18 <apply_position_input+0x378>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fe41 	bl	8000628 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	a39c      	add	r3, pc, #624	; (adr r3, 8001c20 <apply_position_input+0x380>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	f7fe ff62 	bl	800087c <__aeabi_ddiv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	ec43 2b17 	vmov	d7, r2, r3
 80019c0:	eeb0 0a47 	vmov.f32	s0, s14
 80019c4:	eef0 0a67 	vmov.f32	s1, s15
 80019c8:	f007 ff8c 	bl	80098e4 <sqrt>
 80019cc:	ec53 2b10 	vmov	r2, r3, d0
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f920 	bl	8000c18 <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	613b      	str	r3, [r7, #16]
    }

    if (ABS(u[1]-pos[1])<0.01){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3304      	adds	r3, #4
 80019e0:	ed93 7a00 	vldr	s14, [r3]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	3304      	adds	r3, #4
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	bfac      	ite	ge
 80019fa:	2301      	movge	r3, #1
 80019fc:	2300      	movlt	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3304      	adds	r3, #4
 8001a06:	ed93 7a00 	vldr	s14, [r3]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	bf94      	ite	ls
 8001a20:	2301      	movls	r3, #1
 8001a22:	2300      	movhi	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3304      	adds	r3, #4
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	3304      	adds	r3, #4
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4c:	ee17 0a90 	vmov	r0, s15
 8001a50:	f7fe fd92 	bl	8000578 <__aeabi_f2d>
 8001a54:	a374      	add	r3, pc, #464	; (adr r3, 8001c28 <apply_position_input+0x388>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7ff f857 	bl	8000b0c <__aeabi_dcmplt>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <apply_position_input+0x1ca>
        	tc1= 1000000;
 8001a64:	4b74      	ldr	r3, [pc, #464]	; (8001c38 <apply_position_input+0x398>)
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a68:	e05b      	b.n	8001b22 <apply_position_input+0x282>
        }else{
        tc1 = sqrt(2*M_PI*ABS(u[1]-pos[1])/0.85);   //1.5 ----> come se fosse un jerk
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	3304      	adds	r3, #4
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a86:	bfac      	ite	ge
 8001a88:	2301      	movge	r3, #1
 8001a8a:	2300      	movlt	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3304      	adds	r3, #4
 8001a94:	ed93 7a00 	vldr	s14, [r3]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	bf94      	ite	ls
 8001aae:	2301      	movls	r3, #1
 8001ab0:	2300      	movhi	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	edd3 7a00 	vldr	s15, [r3]
 8001ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ada:	ee17 0a90 	vmov	r0, s15
 8001ade:	f7fe fd4b 	bl	8000578 <__aeabi_f2d>
 8001ae2:	a34d      	add	r3, pc, #308	; (adr r3, 8001c18 <apply_position_input+0x378>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fd9e 	bl	8000628 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	a34e      	add	r3, pc, #312	; (adr r3, 8001c30 <apply_position_input+0x390>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe febf 	bl	800087c <__aeabi_ddiv>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	ec43 2b17 	vmov	d7, r2, r3
 8001b06:	eeb0 0a47 	vmov.f32	s0, s14
 8001b0a:	eef0 0a67 	vmov.f32	s1, s15
 8001b0e:	f007 fee9 	bl	80098e4 <sqrt>
 8001b12:	ec53 2b10 	vmov	r2, r3, d0
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f87d 	bl	8000c18 <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
        }


    u0=(u[0]-pos[0])/tc0;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b32:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b3a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    u1=(u[1]-pos[1])/tc1;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b5a:	edc7 7a08 	vstr	s15, [r7, #32]

    //printf("%d ;%f ; %f \n",count ,u1, tc1 );
    //fflush(stdout);

        dir1 = u0 < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 8001b5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6a:	bf4c      	ite	mi
 8001b6c:	2301      	movmi	r3, #1
 8001b6e:	2300      	movpl	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
       // dir1 = 1; // DEBUG
       HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, dir1);
 8001b76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b80:	482e      	ldr	r0, [pc, #184]	; (8001c3c <apply_position_input+0x39c>)
 8001b82:	f002 fb0d 	bl	80041a0 <HAL_GPIO_WritePin>

       dir2 = u1 > 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 8001b86:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	bfcc      	ite	gt
 8001b94:	2301      	movgt	r3, #1
 8001b96:	2300      	movle	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	77fb      	strb	r3, [r7, #31]
       // dir2 = 1; // DEBUG
       HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, dir2);
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4827      	ldr	r0, [pc, #156]	; (8001c40 <apply_position_input+0x3a0>)
 8001ba4:	f002 fafc 	bl	80041a0 <HAL_GPIO_WritePin>




       prescaler1= (uint16_t) 8400;//12000 ;//8400;
 8001ba8:	f242 03d0 	movw	r3, #8400	; 0x20d0
 8001bac:	83bb      	strh	r3, [r7, #28]
       f=HAL_RCC_GetPCLK1Freq()*2;
 8001bae:	f002 ffb3 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	61bb      	str	r3, [r7, #24]
       ARR= ABS(u0) < 0.01 ? 0:(uint32_t)  (RESOLUTION*f/(ABS(u0)*reduction1*16*prescaler1));
 8001bb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	bfac      	ite	ge
 8001bc6:	2301      	movge	r3, #1
 8001bc8:	2300      	movlt	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	bf94      	ite	ls
 8001bdc:	2301      	movls	r3, #1
 8001bde:	2300      	movhi	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf8:	ee17 0a90 	vmov	r0, s15
 8001bfc:	f7fe fcbc 	bl	8000578 <__aeabi_f2d>
 8001c00:	a309      	add	r3, pc, #36	; (adr r3, 8001c28 <apply_position_input+0x388>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe ff81 	bl	8000b0c <__aeabi_dcmplt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d019      	beq.n	8001c44 <apply_position_input+0x3a4>
 8001c10:	2300      	movs	r3, #0
 8001c12:	e066      	b.n	8001ce2 <apply_position_input+0x442>
 8001c14:	f3af 8000 	nop.w
 8001c18:	54442d18 	.word	0x54442d18
 8001c1c:	401921fb 	.word	0x401921fb
 8001c20:	cccccccd 	.word	0xcccccccd
 8001c24:	3ff0cccc 	.word	0x3ff0cccc
 8001c28:	47ae147b 	.word	0x47ae147b
 8001c2c:	3f847ae1 	.word	0x3f847ae1
 8001c30:	33333333 	.word	0x33333333
 8001c34:	3feb3333 	.word	0x3feb3333
 8001c38:	49742400 	.word	0x49742400
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	69b8      	ldr	r0, [r7, #24]
 8001c46:	f7fe fc75 	bl	8000534 <__aeabi_ui2d>
 8001c4a:	a387      	add	r3, pc, #540	; (adr r3, 8001e68 <apply_position_input+0x5c8>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fcea 	bl	8000628 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	bfac      	ite	ge
 8001c6a:	2301      	movge	r3, #1
 8001c6c:	2300      	movlt	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7e:	bf94      	ite	ls
 8001c80:	2301      	movls	r3, #1
 8001c82:	2300      	movhi	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001cae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cb2:	8bbb      	ldrh	r3, [r7, #28]
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc0:	ee17 0a90 	vmov	r0, s15
 8001cc4:	f7fe fc58 	bl	8000578 <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f7fe fdd4 	bl	800087c <__aeabi_ddiv>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f7fe ff7c 	bl	8000bd8 <__aeabi_d2uiz>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
       CCR= ARR /2;
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	085b      	lsrs	r3, r3, #1
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
       __HAL_TIM_SET_PRESCALER(htim1, prescaler1);//2625
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	8bba      	ldrh	r2, [r7, #28]
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
      	__HAL_TIM_SET_AUTORELOAD(htim1, ARR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cfe:	60da      	str	r2, [r3, #12]
   	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34
   	htim1->Instance->EGR = TIM_EGR_UG;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	615a      	str	r2, [r3, #20]

   	prescaler2= (uint16_t) 8400;//12000 ;//8400;
 8001d10:	f242 03d0 	movw	r3, #8400	; 0x20d0
 8001d14:	82fb      	strh	r3, [r7, #22]
   	f=HAL_RCC_GetPCLK1Freq()*2;
 8001d16:	f002 feff 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
   	ARR=  ABS(u1) < 0.01 ? 0:(uint32_t)  (RESOLUTION*f/(ABS(u1)*reduction2*16*prescaler2));
 8001d20:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	bfac      	ite	ge
 8001d2e:	2301      	movge	r3, #1
 8001d30:	2300      	movlt	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	bf94      	ite	ls
 8001d44:	2301      	movls	r3, #1
 8001d46:	2300      	movhi	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d58:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d60:	ee17 0a90 	vmov	r0, s15
 8001d64:	f7fe fc08 	bl	8000578 <__aeabi_f2d>
 8001d68:	a341      	add	r3, pc, #260	; (adr r3, 8001e70 <apply_position_input+0x5d0>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fecd 	bl	8000b0c <__aeabi_dcmplt>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <apply_position_input+0x4dc>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e04e      	b.n	8001e1a <apply_position_input+0x57a>
 8001d7c:	69b8      	ldr	r0, [r7, #24]
 8001d7e:	f7fe fbd9 	bl	8000534 <__aeabi_ui2d>
 8001d82:	a339      	add	r3, pc, #228	; (adr r3, 8001e68 <apply_position_input+0x5c8>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fc4e 	bl	8000628 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4614      	mov	r4, r2
 8001d92:	461d      	mov	r5, r3
 8001d94:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	bfac      	ite	ge
 8001da2:	2301      	movge	r3, #1
 8001da4:	2300      	movlt	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	bf94      	ite	ls
 8001db8:	2301      	movls	r3, #1
 8001dba:	2300      	movhi	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dcc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd4:	2305      	movs	r3, #5
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001de6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dea:	8afb      	ldrh	r3, [r7, #22]
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df8:	ee17 0a90 	vmov	r0, s15
 8001dfc:	f7fe fbbc 	bl	8000578 <__aeabi_f2d>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4620      	mov	r0, r4
 8001e06:	4629      	mov	r1, r5
 8001e08:	f7fe fd38 	bl	800087c <__aeabi_ddiv>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fee0 	bl	8000bd8 <__aeabi_d2uiz>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
   	CCR= ARR /2;
 8001e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   	__HAL_TIM_SET_PRESCALER(htim2, prescaler2);//2625
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	8afa      	ldrh	r2, [r7, #22]
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
   	__HAL_TIM_SET_AUTORELOAD(htim2, ARR);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e36:	60da      	str	r2, [r3, #12]
   	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34
   	htim2->Instance->EGR = TIM_EGR_UG;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2201      	movs	r2, #1
 8001e46:	615a      	str	r2, [r3, #20]



    return

    dir1 = u[0] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	bf4c      	ite	mi
 8001e58:	2301      	movmi	r3, #1
 8001e5a:	2300      	movpl	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
	htim2->Instance->EGR = TIM_EGR_UG;



}
 8001e62:	3738      	adds	r7, #56	; 0x38
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bdb0      	pop	{r4, r5, r7, pc}
 8001e68:	ae261898 	.word	0xae261898
 8001e6c:	3fa015be 	.word	0x3fa015be
 8001e70:	47ae147b 	.word	0x47ae147b
 8001e74:	3f847ae1 	.word	0x3f847ae1

08001e78 <start_timers>:



void start_timers(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, TIM_HandleTypeDef *htim4){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
    HAL_TIM_Base_Start_IT(htim1);
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f002 febe 	bl	8004c08 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim2);
 8001e8c:	68b8      	ldr	r0, [r7, #8]
 8001e8e:	f002 febb 	bl	8004c08 <HAL_TIM_Base_Start_IT>
    /* start motor PWM */
    HAL_TIM_Base_Start_IT(htim3);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f002 feb8 	bl	8004c08 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim4);
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f002 feb5 	bl	8004c08 <HAL_TIM_Base_Start_IT>
    /* start PWM */
    if(HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1) != HAL_OK){
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f002 ff63 	bl	8004d6c <HAL_TIM_PWM_Start>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <start_timers+0x38>
        HardFault_Handler();
 8001eac:	f001 f8f1 	bl	8003092 <HardFault_Handler>
    }
    if(HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_1) != HAL_OK){
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	6838      	ldr	r0, [r7, #0]
 8001eb4:	f002 ff5a 	bl	8004d6c <HAL_TIM_PWM_Start>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <start_timers+0x4a>
        HardFault_Handler();
 8001ebe:	f001 f8e8 	bl	8003092 <HardFault_Handler>
    }
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	0000      	movs	r0, r0
 8001ecc:	0000      	movs	r0, r0
	...

08001ed0 <setup_encoders>:
    sprintf(tx_data, "%X:%X:%X:%X:%X\n", (unsigned long long int) timestamp, encoding_q0, encoding_q1, encoding_q0_d, encoding_q1_d); /*Timestamp:q0:q1*/
    HAL_UART_Transmit_DMA(huart, (uint8_t *) tx_data, sizeof tx_data); /* send encoder data for logging purposes */
}


void setup_encoders(TIM_HandleTypeDef *htim){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	const uint32_t clock_freq = 84000000;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <setup_encoders+0x78>)
 8001eda:	60fb      	str	r3, [r7, #12]
	uint16_t ARR;
	ARR = (T_S*clock_freq)/PRESCALER_ENCODER;
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7fe fb29 	bl	8000534 <__aeabi_ui2d>
 8001ee2:	a317      	add	r3, pc, #92	; (adr r3, 8001f40 <setup_encoders+0x70>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	f7fe fb9e 	bl	8000628 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <setup_encoders+0x7c>)
 8001efa:	f7fe fcbf 	bl	800087c <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	f7fe fe67 	bl	8000bd8 <__aeabi_d2uiz>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_PRESCALER(htim, PRESCALER_ENCODER);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2210      	movs	r2, #16
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	897a      	ldrh	r2, [r7, #10]
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f1e:	897a      	ldrh	r2, [r7, #10]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60da      	str	r2, [r3, #12]
	htim->Instance->EGR = TIM_EGR_UG;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f002 fe6b 	bl	8004c08 <HAL_TIM_Base_Start_IT>
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	f3af 8000 	nop.w
 8001f40:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f44:	3f60624d 	.word	0x3f60624d
 8001f48:	0501bd00 	.word	0x0501bd00
 8001f4c:	40300000 	.word	0x40300000

08001f50 <PID_controller>:




void PID_controller(man_t *manip, pid_controller_t *pid1,pid_controller_t *pid2, float *u , float setpoint){
 8001f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f54:	b08f      	sub	sp, #60	; 0x3c
 8001f56:	af04      	add	r7, sp, #16
 8001f58:	6178      	str	r0, [r7, #20]
 8001f5a:	6139      	str	r1, [r7, #16]
 8001f5c:	60fa      	str	r2, [r7, #12]
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	ed87 0a01 	vstr	s0, [r7, #4]

	float set_point1,set_point2,measure1, measure2;

	rbpeek(&manip->q0,&set_point1);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fda9 	bl	8002ac4 <rbpeek>
	rbpeek(&manip->q1,&set_point2);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	332c      	adds	r3, #44	; 0x2c
 8001f76:	f107 0220 	add.w	r2, r7, #32
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fda1 	bl	8002ac4 <rbpeek>

	//set_point1 = 0;
	//set_point2 = setpoint;

	dq_actual0=set_point1;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	4a33      	ldr	r2, [pc, #204]	; (8002054 <PID_controller+0x104>)
 8001f86:	6013      	str	r3, [r2, #0]





	rblast(&manip->q0_actual,&measure1);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001f8e:	f107 021c 	add.w	r2, r7, #28
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fdb9 	bl	8002b0c <rblast>
	rblast(&manip->q1_actual,&measure2);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001fa0:	f107 0218 	add.w	r2, r7, #24
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fdb0 	bl	8002b0c <rblast>

	disp1=measure1;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	4a2a      	ldr	r2, [pc, #168]	; (8002058 <PID_controller+0x108>)
 8001fb0:	6013      	str	r3, [r2, #0]
	disp2=measure2;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4a29      	ldr	r2, [pc, #164]	; (800205c <PID_controller+0x10c>)
 8001fb6:	6013      	str	r3, [r2, #0]




	PID_update(pid1,set_point1, measure1,T_C);
 8001fb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fbc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fc0:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8002060 <PID_controller+0x110>
 8001fc4:	eef0 0a47 	vmov.f32	s1, s14
 8001fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fcc:	6938      	ldr	r0, [r7, #16]
 8001fce:	f000 fc52 	bl	8002876 <PID_update>
	PID_update(pid2,set_point2, measure2,T_C);
 8001fd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fda:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8002060 <PID_controller+0x110>
 8001fde:	eef0 0a47 	vmov.f32	s1, s14
 8001fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fc45 	bl	8002876 <PID_update>

	ddq_actual0=pid1->out;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	; (8002064 <PID_controller+0x114>)
 8001ff2:	6013      	str	r3, [r2, #0]
	ddq_actual1=pid2->out;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <PID_controller+0x118>)
 8001ffa:	6013      	str	r3, [r2, #0]


	printf("%d ;%f ; %f ; %f \n",count ,setpoint ,measure2 ,pid1->out );
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <PID_controller+0x11c>)
 8001ffe:	681e      	ldr	r6, [r3, #0]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7fe fab9 	bl	8000578 <__aeabi_f2d>
 8002006:	4680      	mov	r8, r0
 8002008:	4689      	mov	r9, r1
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fab3 	bl	8000578 <__aeabi_f2d>
 8002012:	4604      	mov	r4, r0
 8002014:	460d      	mov	r5, r1
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe faac 	bl	8000578 <__aeabi_f2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002028:	e9cd 4500 	strd	r4, r5, [sp]
 800202c:	4642      	mov	r2, r8
 800202e:	464b      	mov	r3, r9
 8002030:	4631      	mov	r1, r6
 8002032:	480f      	ldr	r0, [pc, #60]	; (8002070 <PID_controller+0x120>)
 8002034:	f005 fa46 	bl	80074c4 <iprintf>

	*u=pid1->out;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	601a      	str	r2, [r3, #0]
	*(u+1)=pid2->out;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	3304      	adds	r3, #4
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002048:	601a      	str	r2, [r3, #0]
	//*(u)=0;


}
 800204a:	bf00      	nop
 800204c:	372c      	adds	r7, #44	; 0x2c
 800204e:	46bd      	mov	sp, r7
 8002050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002054:	200005a8 	.word	0x200005a8
 8002058:	200005a0 	.word	0x200005a0
 800205c:	200005a4 	.word	0x200005a4
 8002060:	3c23d70a 	.word	0x3c23d70a
 8002064:	200005ac 	.word	0x200005ac
 8002068:	200005b0 	.word	0x200005b0
 800206c:	200005b4 	.word	0x200005b4
 8002070:	08009ad0 	.word	0x08009ad0

08002074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  rate_t rate;
  float v[2], v_est, a_est;
  char *data = "\n";
 800207a:	4b46      	ldr	r3, [pc, #280]	; (8002194 <main+0x120>)
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  float i = 1*T_C;
 800207e:	4b46      	ldr	r3, [pc, #280]	; (8002198 <main+0x124>)
 8002080:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002082:	f001 f95f 	bl	8003344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002086:	f000 f8bf 	bl	8002208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800208a:	f000 faf7 	bl	800267c <MX_GPIO_Init>
  MX_DMA_Init();
 800208e:	f000 facd 	bl	800262c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002092:	f000 faa1 	bl	80025d8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002096:	f000 f979 	bl	800238c <MX_TIM3_Init>
  MX_TIM4_Init();
 800209a:	f000 f9cb 	bl	8002434 <MX_TIM4_Init>
  MX_TIM2_Init();
 800209e:	f000 f91d 	bl	80022dc <MX_TIM2_Init>
  MX_TIM5_Init();
 80020a2:	f000 fa1b 	bl	80024dc <MX_TIM5_Init>
  MX_TIM10_Init();
 80020a6:	f000 fa73 	bl	8002590 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip, &htim3, &htim4); /* initialize the manipulator struct */
 80020aa:	4a3c      	ldr	r2, [pc, #240]	; (800219c <main+0x128>)
 80020ac:	493c      	ldr	r1, [pc, #240]	; (80021a0 <main+0x12c>)
 80020ae:	483d      	ldr	r0, [pc, #244]	; (80021a4 <main+0x130>)
 80020b0:	f7ff f8a0 	bl	80011f4 <init_man>

  PID_init(&pid1,KP1,TI1,TD1,N1); /*initialize the pid controllers*/
 80020b4:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80020b8:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 80021a8 <main+0x134>
 80020bc:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80021ac <main+0x138>
 80020c0:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80021b0 <main+0x13c>
 80020c4:	483b      	ldr	r0, [pc, #236]	; (80021b4 <main+0x140>)
 80020c6:	f000 fb78 	bl	80027ba <PID_init>
  PID_init(&pid2,KP2,TI2,TD2,N2);
 80020ca:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80020ce:	ed9f 1a36 	vldr	s2, [pc, #216]	; 80021a8 <main+0x134>
 80020d2:	eddf 0a39 	vldr	s1, [pc, #228]	; 80021b8 <main+0x144>
 80020d6:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80021bc <main+0x148>
 80020da:	4839      	ldr	r0, [pc, #228]	; (80021c0 <main+0x14c>)
 80020dc:	f000 fb6d 	bl	80027ba <PID_init>

  set_limit(&pid1,-4*M_PI,4*M_PI,-M_PI/2,M_PI/2);/*initialize the pid controllers output limits*/
 80020e0:	eddf 1a38 	vldr	s3, [pc, #224]	; 80021c4 <main+0x150>
 80020e4:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80021c8 <main+0x154>
 80020e8:	eddf 0a38 	vldr	s1, [pc, #224]	; 80021cc <main+0x158>
 80020ec:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80021d0 <main+0x15c>
 80020f0:	4830      	ldr	r0, [pc, #192]	; (80021b4 <main+0x140>)
 80020f2:	f000 fba1 	bl	8002838 <set_limit>
  set_limit(&pid2,-8*M_PI,8*M_PI,-6*(M_PI/2),6*(M_PI/2));
 80020f6:	eddf 1a37 	vldr	s3, [pc, #220]	; 80021d4 <main+0x160>
 80020fa:	ed9f 1a37 	vldr	s2, [pc, #220]	; 80021d8 <main+0x164>
 80020fe:	eddf 0a37 	vldr	s1, [pc, #220]	; 80021dc <main+0x168>
 8002102:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80021e0 <main+0x16c>
 8002106:	482e      	ldr	r0, [pc, #184]	; (80021c0 <main+0x14c>)
 8002108:	f000 fb96 	bl	8002838 <set_limit>



  init_rate(&rate, (uint32_t) (T_C*1000)); /* initialize the rate struct */
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	210a      	movs	r1, #10
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fa1c 	bl	8001550 <init_rate>
  rbclear(&timestamps);
 8002118:	4832      	ldr	r0, [pc, #200]	; (80021e4 <main+0x170>)
 800211a:	f000 fd67 	bl	8002bec <rbclear>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 800211e:	2278      	movs	r2, #120	; 0x78
 8002120:	4931      	ldr	r1, [pc, #196]	; (80021e8 <main+0x174>)
 8002122:	4832      	ldr	r0, [pc, #200]	; (80021ec <main+0x178>)
 8002124:	f003 fc6b 	bl	80059fe <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* start timers */
  start_timers(&htim3, &htim4, &htim2, &htim5);
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <main+0x17c>)
 800212a:	4a32      	ldr	r2, [pc, #200]	; (80021f4 <main+0x180>)
 800212c:	491b      	ldr	r1, [pc, #108]	; (800219c <main+0x128>)
 800212e:	481c      	ldr	r0, [pc, #112]	; (80021a0 <main+0x12c>)
 8002130:	f7ff fea2 	bl	8001e78 <start_timers>
  setup_encoders(&htim10);
 8002134:	4830      	ldr	r0, [pc, #192]	; (80021f8 <main+0x184>)
 8002136:	f7ff fecb 	bl	8001ed0 <setup_encoders>

  while (1)
  {
    // read_encoders(&htim3, &htim4, &manip);
    update_speeds(&manip);
 800213a:	481a      	ldr	r0, [pc, #104]	; (80021a4 <main+0x130>)
 800213c:	f7ff fb4e 	bl	80017dc <update_speeds>

    	//setpoint= 0.5;


    //}else{
    	setpoint=0;
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
    //}
    // ! debug NB ricorda di togliere il setpoint dal valore passato a pid e prenderlo direttamente da manip

     PID_controller( &manip, &pid1, &pid2, v ,setpoint);
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	ed97 0a07 	vldr	s0, [r7, #28]
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <main+0x14c>)
 8002150:	4918      	ldr	r1, [pc, #96]	; (80021b4 <main+0x140>)
 8002152:	4814      	ldr	r0, [pc, #80]	; (80021a4 <main+0x130>)
 8002154:	f7ff fefc 	bl	8001f50 <PID_controller>
    // *((float *) tx_data+1) = v[1];
    // tx_data[16] = '\n';
    // HAL_UART_Transmit_DMA(&huart2, &tx_data, 17);
    // !SECTION DEBUG

    rblast(&manip.q0_actual,&pos[0]);
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4827      	ldr	r0, [pc, #156]	; (80021fc <main+0x188>)
 800215e:	f000 fcd5 	bl	8002b0c <rblast>
    rblast(&manip.q1_actual,&pos[1]);
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	3304      	adds	r3, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4825      	ldr	r0, [pc, #148]	; (8002200 <main+0x18c>)
 800216a:	f000 fccf 	bl	8002b0c <rblast>

    apply_position_input(&htim2, &htim5, v, pos);
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	f107 020c 	add.w	r2, r7, #12
 8002174:	491e      	ldr	r1, [pc, #120]	; (80021f0 <main+0x17c>)
 8002176:	481f      	ldr	r0, [pc, #124]	; (80021f4 <main+0x180>)
 8002178:	f7ff fb92 	bl	80018a0 <apply_position_input>
    //disp1=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15);
    //disp2=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    rate_sleep(&rate); /* wait with a fixed frequency */
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f9f6 	bl	8001572 <rate_sleep>
    //HAL_Delay((uint32_t) (T_C*1000));
    count++;
 8002186:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <main+0x190>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3301      	adds	r3, #1
 800218c:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <main+0x190>)
 800218e:	6013      	str	r3, [r2, #0]
    update_speeds(&manip);
 8002190:	e7d3      	b.n	800213a <main+0xc6>
 8002192:	bf00      	nop
 8002194:	08009ae4 	.word	0x08009ae4
 8002198:	3c23d70a 	.word	0x3c23d70a
 800219c:	20000648 	.word	0x20000648
 80021a0:	20000600 	.word	0x20000600
 80021a4:	20000274 	.word	0x20000274
 80021a8:	3bf5c28f 	.word	0x3bf5c28f
 80021ac:	3d072b02 	.word	0x3d072b02
 80021b0:	4019999a 	.word	0x4019999a
 80021b4:	20000504 	.word	0x20000504
 80021b8:	3d3020c5 	.word	0x3d3020c5
 80021bc:	400acd9f 	.word	0x400acd9f
 80021c0:	20000538 	.word	0x20000538
 80021c4:	3fc90fdb 	.word	0x3fc90fdb
 80021c8:	bfc90fdb 	.word	0xbfc90fdb
 80021cc:	41490fdb 	.word	0x41490fdb
 80021d0:	c1490fdb 	.word	0xc1490fdb
 80021d4:	4116cbe4 	.word	0x4116cbe4
 80021d8:	c116cbe4 	.word	0xc116cbe4
 80021dc:	41c90fdb 	.word	0x41c90fdb
 80021e0:	c1c90fdb 	.word	0xc1c90fdb
 80021e4:	20000574 	.word	0x20000574
 80021e8:	200001fc 	.word	0x200001fc
 80021ec:	20000720 	.word	0x20000720
 80021f0:	20000690 	.word	0x20000690
 80021f4:	200005b8 	.word	0x200005b8
 80021f8:	200006d8 	.word	0x200006d8
 80021fc:	200003a8 	.word	0x200003a8
 8002200:	200003d4 	.word	0x200003d4
 8002204:	200005b4 	.word	0x200005b4

08002208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b094      	sub	sp, #80	; 0x50
 800220c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220e:	f107 0320 	add.w	r3, r7, #32
 8002212:	2230      	movs	r2, #48	; 0x30
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f004 fce2 	bl	8006be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <SystemClock_Config+0xcc>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <SystemClock_Config+0xcc>)
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <SystemClock_Config+0xcc>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <SystemClock_Config+0xd0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <SystemClock_Config+0xd0>)
 8002252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <SystemClock_Config+0xd0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002264:	2302      	movs	r3, #2
 8002266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002268:	2301      	movs	r3, #1
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800226c:	2310      	movs	r3, #16
 800226e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002270:	2302      	movs	r3, #2
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002274:	2300      	movs	r3, #0
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002278:	2310      	movs	r3, #16
 800227a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800227c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002280:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002282:	2304      	movs	r3, #4
 8002284:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002286:	2304      	movs	r3, #4
 8002288:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800228a:	f107 0320 	add.w	r3, r7, #32
 800228e:	4618      	mov	r0, r3
 8002290:	f001 ffd2 	bl	8004238 <HAL_RCC_OscConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800229a:	f000 fa89 	bl	80027b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800229e:	230f      	movs	r3, #15
 80022a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022a2:	2302      	movs	r3, #2
 80022a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	2102      	movs	r1, #2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 fa34 	bl	8004728 <HAL_RCC_ClockConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022c6:	f000 fa73 	bl	80027b0 <Error_Handler>
  }
}
 80022ca:	bf00      	nop
 80022cc:	3750      	adds	r7, #80	; 0x50
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40007000 	.word	0x40007000

080022dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e2:	f107 0320 	add.w	r3, r7, #32
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]
 80022fa:	615a      	str	r2, [r3, #20]
 80022fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <MX_TIM2_Init+0xac>)
 8002300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002304:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <MX_TIM2_Init+0xac>)
 8002308:	2200      	movs	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230c:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <MX_TIM2_Init+0xac>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <MX_TIM2_Init+0xac>)
 8002314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002318:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <MX_TIM2_Init+0xac>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <MX_TIM2_Init+0xac>)
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002326:	4818      	ldr	r0, [pc, #96]	; (8002388 <MX_TIM2_Init+0xac>)
 8002328:	f002 fcd0 	bl	8004ccc <HAL_TIM_PWM_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002332:	f000 fa3d 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800233e:	f107 0320 	add.w	r3, r7, #32
 8002342:	4619      	mov	r1, r3
 8002344:	4810      	ldr	r0, [pc, #64]	; (8002388 <MX_TIM2_Init+0xac>)
 8002346:	f003 fa8b 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002350:	f000 fa2e 	bl	80027b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002354:	2360      	movs	r3, #96	; 0x60
 8002356:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2200      	movs	r2, #0
 8002368:	4619      	mov	r1, r3
 800236a:	4807      	ldr	r0, [pc, #28]	; (8002388 <MX_TIM2_Init+0xac>)
 800236c:	f002 ff5c 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002376:	f000 fa1b 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800237a:	4803      	ldr	r0, [pc, #12]	; (8002388 <MX_TIM2_Init+0xac>)
 800237c:	f000 fd70 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 8002380:	bf00      	nop
 8002382:	3728      	adds	r7, #40	; 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200005b8 	.word	0x200005b8

0800238c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08c      	sub	sp, #48	; 0x30
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	2224      	movs	r2, #36	; 0x24
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f004 fc20 	bl	8006be0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023a8:	4b20      	ldr	r3, [pc, #128]	; (800242c <MX_TIM3_Init+0xa0>)
 80023aa:	4a21      	ldr	r2, [pc, #132]	; (8002430 <MX_TIM3_Init+0xa4>)
 80023ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023ae:	4b1f      	ldr	r3, [pc, #124]	; (800242c <MX_TIM3_Init+0xa0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <MX_TIM3_Init+0xa0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <MX_TIM3_Init+0xa0>)
 80023bc:	f649 4240 	movw	r2, #40000	; 0x9c40
 80023c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <MX_TIM3_Init+0xa0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <MX_TIM3_Init+0xa0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023ce:	2303      	movs	r3, #3
 80023d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023d6:	2301      	movs	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023e6:	2301      	movs	r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	4619      	mov	r1, r3
 80023f8:	480c      	ldr	r0, [pc, #48]	; (800242c <MX_TIM3_Init+0xa0>)
 80023fa:	f002 fd67 	bl	8004ecc <HAL_TIM_Encoder_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002404:	f000 f9d4 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	4619      	mov	r1, r3
 8002414:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_TIM3_Init+0xa0>)
 8002416:	f003 fa23 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002420:	f000 f9c6 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	3730      	adds	r7, #48	; 0x30
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000600 	.word	0x20000600
 8002430:	40000400 	.word	0x40000400

08002434 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	2224      	movs	r2, #36	; 0x24
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f004 fbcc 	bl	8006be0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002450:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <MX_TIM4_Init+0xa0>)
 8002452:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <MX_TIM4_Init+0xa4>)
 8002454:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002456:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <MX_TIM4_Init+0xa0>)
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <MX_TIM4_Init+0xa0>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <MX_TIM4_Init+0xa0>)
 8002464:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002468:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <MX_TIM4_Init+0xa0>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <MX_TIM4_Init+0xa0>)
 8002472:	2200      	movs	r2, #0
 8002474:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002476:	2303      	movs	r3, #3
 8002478:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800247e:	2301      	movs	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800248e:	2301      	movs	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002492:	2300      	movs	r3, #0
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	4619      	mov	r1, r3
 80024a0:	480c      	ldr	r0, [pc, #48]	; (80024d4 <MX_TIM4_Init+0xa0>)
 80024a2:	f002 fd13 	bl	8004ecc <HAL_TIM_Encoder_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80024ac:	f000 f980 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_TIM4_Init+0xa0>)
 80024be:	f003 f9cf 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80024c8:	f000 f972 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	3730      	adds	r7, #48	; 0x30
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000648 	.word	0x20000648
 80024d8:	40000800 	.word	0x40000800

080024dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e2:	f107 0320 	add.w	r3, r7, #32
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	615a      	str	r2, [r3, #20]
 80024fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <MX_TIM5_Init+0xac>)
 8002500:	4a22      	ldr	r2, [pc, #136]	; (800258c <MX_TIM5_Init+0xb0>)
 8002502:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <MX_TIM5_Init+0xac>)
 8002506:	2200      	movs	r2, #0
 8002508:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250a:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <MX_TIM5_Init+0xac>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <MX_TIM5_Init+0xac>)
 8002512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002516:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <MX_TIM5_Init+0xac>)
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <MX_TIM5_Init+0xac>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002524:	4818      	ldr	r0, [pc, #96]	; (8002588 <MX_TIM5_Init+0xac>)
 8002526:	f002 fbd1 	bl	8004ccc <HAL_TIM_PWM_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002530:	f000 f93e 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002534:	2300      	movs	r3, #0
 8002536:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800253c:	f107 0320 	add.w	r3, r7, #32
 8002540:	4619      	mov	r1, r3
 8002542:	4811      	ldr	r0, [pc, #68]	; (8002588 <MX_TIM5_Init+0xac>)
 8002544:	f003 f98c 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800254e:	f000 f92f 	bl	80027b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002552:	2360      	movs	r3, #96	; 0x60
 8002554:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	2200      	movs	r2, #0
 8002566:	4619      	mov	r1, r3
 8002568:	4807      	ldr	r0, [pc, #28]	; (8002588 <MX_TIM5_Init+0xac>)
 800256a:	f002 fe5d 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002574:	f000 f91c 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002578:	4803      	ldr	r0, [pc, #12]	; (8002588 <MX_TIM5_Init+0xac>)
 800257a:	f000 fc71 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 800257e:	bf00      	nop
 8002580:	3728      	adds	r7, #40	; 0x28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000690 	.word	0x20000690
 800258c:	40000c00 	.word	0x40000c00

08002590 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <MX_TIM10_Init+0x40>)
 8002596:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <MX_TIM10_Init+0x44>)
 8002598:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16;
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <MX_TIM10_Init+0x40>)
 800259c:	2210      	movs	r2, #16
 800259e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <MX_TIM10_Init+0x40>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 52500;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <MX_TIM10_Init+0x40>)
 80025a8:	f64c 5214 	movw	r2, #52500	; 0xcd14
 80025ac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <MX_TIM10_Init+0x40>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <MX_TIM10_Init+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_TIM10_Init+0x40>)
 80025bc:	f002 fad4 	bl	8004b68 <HAL_TIM_Base_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80025c6:	f000 f8f3 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200006d8 	.word	0x200006d8
 80025d4:	40014400 	.word	0x40014400

080025d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_USART2_UART_Init+0x4c>)
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <MX_USART2_UART_Init+0x50>)
 80025e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <MX_USART2_UART_Init+0x4c>)
 80025e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_USART2_UART_Init+0x4c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <MX_USART2_UART_Init+0x4c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <MX_USART2_UART_Init+0x4c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_USART2_UART_Init+0x4c>)
 80025fe:	220c      	movs	r2, #12
 8002600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <MX_USART2_UART_Init+0x4c>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_USART2_UART_Init+0x4c>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_USART2_UART_Init+0x4c>)
 8002610:	f003 f9a8 	bl	8005964 <HAL_UART_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800261a:	f000 f8c9 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000720 	.word	0x20000720
 8002628:	40004400 	.word	0x40004400

0800262c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <MX_DMA_Init+0x4c>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <MX_DMA_Init+0x4c>)
 800263c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <MX_DMA_Init+0x4c>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	2010      	movs	r0, #16
 8002654:	f000 ffe7 	bl	8003626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002658:	2010      	movs	r0, #16
 800265a:	f001 f800 	bl	800365e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	2011      	movs	r0, #17
 8002664:	f000 ffdf 	bl	8003626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002668:	2011      	movs	r0, #17
 800266a:	f000 fff8 	bl	800365e <HAL_NVIC_EnableIRQ>

}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800

0800267c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <MX_GPIO_Init+0x128>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a42      	ldr	r2, [pc, #264]	; (80027a4 <MX_GPIO_Init+0x128>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b40      	ldr	r3, [pc, #256]	; (80027a4 <MX_GPIO_Init+0x128>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <MX_GPIO_Init+0x128>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a3b      	ldr	r2, [pc, #236]	; (80027a4 <MX_GPIO_Init+0x128>)
 80026b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <MX_GPIO_Init+0x128>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <MX_GPIO_Init+0x128>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a34      	ldr	r2, [pc, #208]	; (80027a4 <MX_GPIO_Init+0x128>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b32      	ldr	r3, [pc, #200]	; (80027a4 <MX_GPIO_Init+0x128>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <MX_GPIO_Init+0x128>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a2d      	ldr	r2, [pc, #180]	; (80027a4 <MX_GPIO_Init+0x128>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <MX_GPIO_Init+0x128>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002702:	2200      	movs	r2, #0
 8002704:	2122      	movs	r1, #34	; 0x22
 8002706:	4828      	ldr	r0, [pc, #160]	; (80027a8 <MX_GPIO_Init+0x12c>)
 8002708:	f001 fd4a 	bl	80041a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002712:	4826      	ldr	r0, [pc, #152]	; (80027ac <MX_GPIO_Init+0x130>)
 8002714:	f001 fd44 	bl	80041a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800271c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800271e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4619      	mov	r1, r3
 800272e:	481f      	ldr	r0, [pc, #124]	; (80027ac <MX_GPIO_Init+0x130>)
 8002730:	f001 fbb2 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|LD2_Pin;
 8002734:	2322      	movs	r3, #34	; 0x22
 8002736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002738:	2301      	movs	r3, #1
 800273a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	4619      	mov	r1, r3
 800274a:	4817      	ldr	r0, [pc, #92]	; (80027a8 <MX_GPIO_Init+0x12c>)
 800274c:	f001 fba4 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|LIMIT_SWITCH_2_Pin;
 8002750:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002756:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800275a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800275c:	2301      	movs	r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4619      	mov	r1, r3
 8002766:	4810      	ldr	r0, [pc, #64]	; (80027a8 <MX_GPIO_Init+0x12c>)
 8002768:	f001 fb96 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_1_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin;
 800276c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	2301      	movs	r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	4809      	ldr	r0, [pc, #36]	; (80027ac <MX_GPIO_Init+0x130>)
 8002786:	f001 fb87 	bl	8003e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	2028      	movs	r0, #40	; 0x28
 8002790:	f000 ff49 	bl	8003626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002794:	2028      	movs	r0, #40	; 0x28
 8002796:	f000 ff62 	bl	800365e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800279a:	bf00      	nop
 800279c:	3728      	adds	r7, #40	; 0x28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020800 	.word	0x40020800

080027b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b4:	b672      	cpsid	i
}
 80027b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <Error_Handler+0x8>

080027ba <PID_init>:

*/



int PID_init(pid_controller_t *pid, float KP,float TI, float TD, float N){
 80027ba:	b480      	push	{r7}
 80027bc:	b087      	sub	sp, #28
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6178      	str	r0, [r7, #20]
 80027c2:	ed87 0a04 	vstr	s0, [r7, #16]
 80027c6:	edc7 0a03 	vstr	s1, [r7, #12]
 80027ca:	ed87 1a02 	vstr	s2, [r7, #8]
 80027ce:	edc7 1a01 	vstr	s3, [r7, #4]

	pid->Kp= KP;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	601a      	str	r2, [r3, #0]
	pid->Ti=TI;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	605a      	str	r2, [r3, #4]
	pid->Td=TD;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	609a      	str	r2, [r3, #8]
	pid->N=N;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	60da      	str	r2, [r3, #12]

	pid->integrator=0.f;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	619a      	str	r2, [r3, #24]
	pid->derivative=0.f;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
	pid->prev_err=0.f;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	611a      	str	r2, [r3, #16]

	pid->out=0.f;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	631a      	str	r2, [r3, #48]	; 0x30


	/*NB the limit must be set using the proper method */
	pid->lim_out_min=0.f;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	621a      	str	r2, [r3, #32]
	pid->lim_out_max=0.f;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	625a      	str	r2, [r3, #36]	; 0x24

	pid->lim_integ_min=0.f;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
	pid->lim_integ_max=0.f;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c




	return 0;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <set_limit>:
- float lim_out_max;
- float lim_integ_min;
- float lim_integ_max ;

*/
int set_limit(pid_controller_t *pid, float lim_out_min, float lim_out_max, float lim_integ_min,float lim_integ_max ){
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6178      	str	r0, [r7, #20]
 8002840:	ed87 0a04 	vstr	s0, [r7, #16]
 8002844:	edc7 0a03 	vstr	s1, [r7, #12]
 8002848:	ed87 1a02 	vstr	s2, [r7, #8]
 800284c:	edc7 1a01 	vstr	s3, [r7, #4]

	pid->lim_out_min=lim_out_min;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	621a      	str	r2, [r3, #32]
	pid->lim_out_max=lim_out_max;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

	pid->lim_integ_min=lim_integ_min;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
	pid->lim_integ_max=lim_integ_max;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c


	return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <PID_update>:
@outputs:
pid->out: contain the value calculated by the controller

*/

int PID_update(pid_controller_t *pid, float set_point , float measure, float T_C){
 8002876:	b480      	push	{r7}
 8002878:	b089      	sub	sp, #36	; 0x24
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002882:	edc7 0a01 	vstr	s1, [r7, #4]
 8002886:	ed87 1a00 	vstr	s2, [r7]

	float u=0.f;
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
	float error=0.f;
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
	float proportional=0.f;
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
	float alpha= pid->Td/T_C;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	edd3 6a02 	vldr	s13, [r3, #8]
 80028a2:	ed97 7a00 	vldr	s14, [r7]
 80028a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028aa:	edc7 7a04 	vstr	s15, [r7, #16]


    /* calculate the error*/
	error=set_point-measure;
 80028ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80028b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ba:	edc7 7a06 	vstr	s15, [r7, #24]



	/* proportional contribute*/

	proportional= pid->Kp*error;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	edd3 7a00 	vldr	s15, [r3]
 80028c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80028c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028cc:	edc7 7a05 	vstr	s15, [r7, #20]

	/*integral contribute*/

	pid->integrator+=(pid->Kp/pid->Ti)*0.5f*T_C*(error-pid->prev_err);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	ed93 7a06 	vldr	s14, [r3, #24]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	ed93 6a00 	vldr	s12, [r3]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	edd3 6a01 	vldr	s13, [r3, #4]
 80028e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80028e6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80028ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80028ee:	edd7 7a00 	vldr	s15, [r7]
 80028f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80028fc:	ed97 6a06 	vldr	s12, [r7, #24]
 8002900:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	edc3 7a06 	vstr	s15, [r3, #24]

	/* try of anti wind-up*/

	if(pid->integrator > pid->lim_integ_max){
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	ed93 7a06 	vldr	s14, [r3, #24]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800291e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002926:	dd04      	ble.n	8002932 <PID_update+0xbc>

		pid->integrator=pid->lim_integ_max;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	619a      	str	r2, [r3, #24]
 8002930:	e00e      	b.n	8002950 <PID_update+0xda>

	}else if(pid->integrator < pid->lim_integ_min)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	ed93 7a06 	vldr	s14, [r3, #24]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800293e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002946:	d503      	bpl.n	8002950 <PID_update+0xda>
	{
		pid->integrator=pid->lim_integ_min;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	619a      	str	r2, [r3, #24]
	}


	/*derivative contribute*/
	pid->derivative= (2*(pid->Kp)*alpha*error - pid->derivative*(1-(2*alpha)/pid->N))/(1+(2*alpha)/pid->N);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800295a:	edd7 7a04 	vldr	s15, [r7, #16]
 800295e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002962:	edd7 7a06 	vldr	s15, [r7, #24]
 8002966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	edd3 6a07 	vldr	s13, [r3, #28]
 8002970:	edd7 7a04 	vldr	s15, [r7, #16]
 8002974:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	ed93 6a03 	vldr	s12, [r3, #12]
 800297e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002982:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002986:	ee76 7a67 	vsub.f32	s15, s12, s15
 800298a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800298e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002992:	edd7 7a04 	vldr	s15, [r7, #16]
 8002996:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	ed93 7a03 	vldr	s14, [r3, #12]
 80029a0:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80029a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	edc3 7a07 	vstr	s15, [r3, #28]

	/* output  */

	u=proportional+pid->integrator+pid->derivative;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	ed93 7a06 	vldr	s14, [r3, #24]
 80029bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80029c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80029ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ce:	edc7 7a07 	vstr	s15, [r7, #28]


	if(u>pid->lim_out_max)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80029dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e4:	dd04      	ble.n	80029f0 <PID_update+0x17a>
	{
		pid->out=pid->lim_out_max;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
 80029ee:	e011      	b.n	8002a14 <PID_update+0x19e>
	}else if(u<pid->lim_out_min){
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80029f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80029fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	d504      	bpl.n	8002a0e <PID_update+0x198>

		pid->out=pid->lim_out_min;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1a      	ldr	r2, [r3, #32]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a0c:	e002      	b.n	8002a14 <PID_update+0x19e>

	}else{
		pid->out=u;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
	}


	pid->prev_err=error;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	611a      	str	r2, [r3, #16]
	pid->prev_meas=measure;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	615a      	str	r2, [r3, #20]

	return 0;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	3304      	adds	r3, #4
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <rbpush+0x90>)
 8002a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a62:	08d9      	lsrs	r1, r3, #3
 8002a64:	460b      	mov	r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	789b      	ldrb	r3, [r3, #2]
 8002a78:	2b0a      	cmp	r3, #10
 8002a7a:	d114      	bne.n	8002aa6 <rbpush+0x76>
        /* overwriting data: also move head forward */
        buffer->head++;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	3301      	adds	r3, #1
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	785a      	ldrb	r2, [r3, #1]
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <rbpush+0x90>)
 8002a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a92:	08d9      	lsrs	r1, r3, #3
 8002a94:	460b      	mov	r3, r1
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	705a      	strb	r2, [r3, #1]
 8002aa4:	e005      	b.n	8002ab2 <rbpush+0x82>
    }else{
        buffer->length++;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	789b      	ldrb	r3, [r3, #2]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 8002ab2:	2301      	movs	r3, #1
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	cccccccd 	.word	0xcccccccd

08002ac4 <rbpeek>:
- rbelement_t *data: pointer to the variable that will hold the value;
@outputs: 
- rberror_t: whether the operation was concluded successfully or not;
@#
*/
rberror_t rbpeek(ringbuffer_t *buffer, rbelement_t *data){
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	789b      	ldrb	r3, [r3, #2]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <rbpeek+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	785b      	ldrb	r3, [r3, #1]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	601a      	str	r2, [r3, #0]
        return 0; /* peek operation could not be completed because the buffer is empty */
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e009      	b.n	8002b00 <rbpeek+0x3c>
    }
    *data = buffer->buffer[buffer->head];
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	785b      	ldrb	r3, [r3, #1]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	3304      	adds	r3, #4
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	601a      	str	r2, [r3, #0]
    return 1;
 8002afe:	2301      	movs	r3, #1
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <rblast>:
- rbelement_t *data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	789b      	ldrb	r3, [r3, #2]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <rblast+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	601a      	str	r2, [r3, #0]
        return 0; // operation failed
 8002b30:	2300      	movs	r3, #0
 8002b32:	e015      	b.n	8002b60 <rblast+0x54>
    }
    // uint8_t index = (uint8_t) ((buffer->tail-1+RBUF_SZ)%RBUF_SZ);
    int8_t index = buffer->tail-1;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
 8002b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	da03      	bge.n	8002b4e <rblast+0x42>
    	index += RBUF_SZ;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	330a      	adds	r3, #10
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	73fb      	strb	r3, [r7, #15]
    }
    *data = buffer->buffer[(uint8_t) index];
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	601a      	str	r2, [r3, #0]
    return 1;
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <rbget>:


rberror_t rbget(ringbuffer_t *buffer, int8_t i, rbelement_t *data){
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	460b      	mov	r3, r1
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 8002b7a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db05      	blt.n	8002b8e <rbget+0x22>
 8002b82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	7892      	ldrb	r2, [r2, #2]
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	db0a      	blt.n	8002ba4 <rbget+0x38>
        /* out of bounds */
    	*data =  buffer->buffer[buffer->head];
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	3304      	adds	r3, #4
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	601a      	str	r2, [r3, #0]
        return 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e01b      	b.n	8002bdc <rbget+0x70>
    }
    uint8_t index = (uint8_t) ((buffer->head+i) % RBUF_SZ);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002bae:	441a      	add	r2, r3
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <rbget+0x7c>)
 8002bb2:	fb83 1302 	smull	r1, r3, r3, r2
 8002bb6:	1099      	asrs	r1, r3, #2
 8002bb8:	17d3      	asrs	r3, r2, #31
 8002bba:	1ac9      	subs	r1, r1, r3
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	1ad1      	subs	r1, r2, r3
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    *data = buffer->buffer[index];
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]
    return 1;
 8002bda:	2301      	movs	r3, #1
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	66666667 	.word	0x66666667

08002bec <rbclear>:
- ringbuffer_t *buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	e00a      	b.n	8002c14 <rbclear+0x28>
        buffer->buffer[i] = 0;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	3304      	adds	r3, #4
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	3301      	adds	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b09      	cmp	r3, #9
 8002c18:	d9f1      	bls.n	8002bfe <rbclear+0x12>
    }
    buffer->length = 0;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a08      	ldr	r2, [pc, #32]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_MspInit+0x4c>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c76:	2007      	movs	r0, #7
 8002c78:	f000 fcca 	bl	8003610 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800

08002c88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d10e      	bne.n	8002cb8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b13      	ldr	r3, [pc, #76]	; (8002cec <HAL_TIM_PWM_MspInit+0x64>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	4a12      	ldr	r2, [pc, #72]	; (8002cec <HAL_TIM_PWM_MspInit+0x64>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_TIM_PWM_MspInit+0x64>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002cb6:	e012      	b.n	8002cde <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <HAL_TIM_PWM_MspInit+0x68>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d10d      	bne.n	8002cde <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_TIM_PWM_MspInit+0x64>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a08      	ldr	r2, [pc, #32]	; (8002cec <HAL_TIM_PWM_MspInit+0x64>)
 8002ccc:	f043 0308 	orr.w	r3, r3, #8
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_TIM_PWM_MspInit+0x64>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40000c00 	.word	0x40000c00

08002cf4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08c      	sub	sp, #48	; 0x30
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a3a      	ldr	r2, [pc, #232]	; (8002dfc <HAL_TIM_Encoder_MspInit+0x108>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d134      	bne.n	8002d80 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a38      	ldr	r2, [pc, #224]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	4b32      	ldr	r3, [pc, #200]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a31      	ldr	r2, [pc, #196]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d4e:	23c0      	movs	r3, #192	; 0xc0
 8002d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d62:	f107 031c 	add.w	r3, r7, #28
 8002d66:	4619      	mov	r1, r3
 8002d68:	4826      	ldr	r0, [pc, #152]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x110>)
 8002d6a:	f001 f895 	bl	8003e98 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	201d      	movs	r0, #29
 8002d74:	f000 fc57 	bl	8003626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d78:	201d      	movs	r0, #29
 8002d7a:	f000 fc70 	bl	800365e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d7e:	e038      	b.n	8002df2 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <HAL_TIM_Encoder_MspInit+0x114>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d133      	bne.n	8002df2 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002db0:	f043 0302 	orr.w	r3, r3, #2
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dc2:	23c0      	movs	r3, #192	; 0xc0
 8002dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd6:	f107 031c 	add.w	r3, r7, #28
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480b      	ldr	r0, [pc, #44]	; (8002e0c <HAL_TIM_Encoder_MspInit+0x118>)
 8002dde:	f001 f85b 	bl	8003e98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	201e      	movs	r0, #30
 8002de8:	f000 fc1d 	bl	8003626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002dec:	201e      	movs	r0, #30
 8002dee:	f000 fc36 	bl	800365e <HAL_NVIC_EnableIRQ>
}
 8002df2:	bf00      	nop
 8002df4:	3730      	adds	r7, #48	; 0x30
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40000800 	.word	0x40000800
 8002e0c:	40020400 	.word	0x40020400

08002e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <HAL_TIM_Base_MspInit+0x48>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d115      	bne.n	8002e4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <HAL_TIM_Base_MspInit+0x4c>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <HAL_TIM_Base_MspInit+0x4c>)
 8002e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e30:	6453      	str	r3, [r2, #68]	; 0x44
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_TIM_Base_MspInit+0x4c>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	2019      	movs	r0, #25
 8002e44:	f000 fbef 	bl	8003626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e48:	2019      	movs	r0, #25
 8002e4a:	f000 fc08 	bl	800365e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40023800 	.word	0x40023800

08002e60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e80:	d11f      	bne.n	8002ec2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_TIM_MspPostInit+0xb0>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a21      	ldr	r2, [pc, #132]	; (8002f10 <HAL_TIM_MspPostInit+0xb0>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <HAL_TIM_MspPostInit+0xb0>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	2300      	movs	r3, #0
 8002eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4816      	ldr	r0, [pc, #88]	; (8002f14 <HAL_TIM_MspPostInit+0xb4>)
 8002ebc:	f000 ffec 	bl	8003e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002ec0:	e022      	b.n	8002f08 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <HAL_TIM_MspPostInit+0xb8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d11d      	bne.n	8002f08 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <HAL_TIM_MspPostInit+0xb0>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <HAL_TIM_MspPostInit+0xb0>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6313      	str	r3, [r2, #48]	; 0x30
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <HAL_TIM_MspPostInit+0xb0>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4619      	mov	r1, r3
 8002f02:	4804      	ldr	r0, [pc, #16]	; (8002f14 <HAL_TIM_MspPostInit+0xb4>)
 8002f04:	f000 ffc8 	bl	8003e98 <HAL_GPIO_Init>
}
 8002f08:	bf00      	nop
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020000 	.word	0x40020000
 8002f18:	40000c00 	.word	0x40000c00

08002f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a4d      	ldr	r2, [pc, #308]	; (8003070 <HAL_UART_MspInit+0x154>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	f040 8094 	bne.w	8003068 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	4a4a      	ldr	r2, [pc, #296]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	4b44      	ldr	r3, [pc, #272]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	4a43      	ldr	r2, [pc, #268]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6c:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f78:	230c      	movs	r3, #12
 8002f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f84:	2303      	movs	r3, #3
 8002f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f88:	2307      	movs	r3, #7
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	4619      	mov	r1, r3
 8002f92:	4839      	ldr	r0, [pc, #228]	; (8003078 <HAL_UART_MspInit+0x15c>)
 8002f94:	f000 ff80 	bl	8003e98 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002f98:	4b38      	ldr	r3, [pc, #224]	; (800307c <HAL_UART_MspInit+0x160>)
 8002f9a:	4a39      	ldr	r2, [pc, #228]	; (8003080 <HAL_UART_MspInit+0x164>)
 8002f9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_UART_MspInit+0x160>)
 8002fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fa4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fa6:	4b35      	ldr	r3, [pc, #212]	; (800307c <HAL_UART_MspInit+0x160>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fac:	4b33      	ldr	r3, [pc, #204]	; (800307c <HAL_UART_MspInit+0x160>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb2:	4b32      	ldr	r3, [pc, #200]	; (800307c <HAL_UART_MspInit+0x160>)
 8002fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fba:	4b30      	ldr	r3, [pc, #192]	; (800307c <HAL_UART_MspInit+0x160>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc0:	4b2e      	ldr	r3, [pc, #184]	; (800307c <HAL_UART_MspInit+0x160>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002fc6:	4b2d      	ldr	r3, [pc, #180]	; (800307c <HAL_UART_MspInit+0x160>)
 8002fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fcc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002fce:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_UART_MspInit+0x160>)
 8002fd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fd4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fd6:	4b29      	ldr	r3, [pc, #164]	; (800307c <HAL_UART_MspInit+0x160>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fdc:	4827      	ldr	r0, [pc, #156]	; (800307c <HAL_UART_MspInit+0x160>)
 8002fde:	f000 fb59 	bl	8003694 <HAL_DMA_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002fe8:	f7ff fbe2 	bl	80027b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <HAL_UART_MspInit+0x160>)
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ff2:	4a22      	ldr	r2, [pc, #136]	; (800307c <HAL_UART_MspInit+0x160>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002ff8:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HAL_UART_MspInit+0x168>)
 8002ffa:	4a23      	ldr	r2, [pc, #140]	; (8003088 <HAL_UART_MspInit+0x16c>)
 8002ffc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_UART_MspInit+0x168>)
 8003000:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003004:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003006:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HAL_UART_MspInit+0x168>)
 8003008:	2240      	movs	r2, #64	; 0x40
 800300a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_UART_MspInit+0x168>)
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_UART_MspInit+0x168>)
 8003014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003018:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_UART_MspInit+0x168>)
 800301c:	2200      	movs	r2, #0
 800301e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_UART_MspInit+0x168>)
 8003022:	2200      	movs	r2, #0
 8003024:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <HAL_UART_MspInit+0x168>)
 8003028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800302c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_UART_MspInit+0x168>)
 8003030:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003034:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_UART_MspInit+0x168>)
 8003038:	2200      	movs	r2, #0
 800303a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800303c:	4811      	ldr	r0, [pc, #68]	; (8003084 <HAL_UART_MspInit+0x168>)
 800303e:	f000 fb29 	bl	8003694 <HAL_DMA_Init>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8003048:	f7ff fbb2 	bl	80027b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <HAL_UART_MspInit+0x168>)
 8003050:	635a      	str	r2, [r3, #52]	; 0x34
 8003052:	4a0c      	ldr	r2, [pc, #48]	; (8003084 <HAL_UART_MspInit+0x168>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	2100      	movs	r1, #0
 800305c:	2026      	movs	r0, #38	; 0x26
 800305e:	f000 fae2 	bl	8003626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003062:	2026      	movs	r0, #38	; 0x26
 8003064:	f000 fafb 	bl	800365e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003068:	bf00      	nop
 800306a:	3728      	adds	r7, #40	; 0x28
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40004400 	.word	0x40004400
 8003074:	40023800 	.word	0x40023800
 8003078:	40020000 	.word	0x40020000
 800307c:	20000764 	.word	0x20000764
 8003080:	40026088 	.word	0x40026088
 8003084:	200007c4 	.word	0x200007c4
 8003088:	400260a0 	.word	0x400260a0

0800308c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <NMI_Handler+0x4>

08003092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003096:	e7fe      	b.n	8003096 <HardFault_Handler+0x4>

08003098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800309c:	e7fe      	b.n	800309c <MemManage_Handler+0x4>

0800309e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030a2:	e7fe      	b.n	80030a2 <BusFault_Handler+0x4>

080030a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030a8:	e7fe      	b.n	80030a8 <UsageFault_Handler+0x4>

080030aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d8:	f000 f986 	bl	80033e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}

080030e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <DMA1_Stream5_IRQHandler+0x10>)
 80030e6:	f000 fc6d 	bl	80039c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000764 	.word	0x20000764

080030f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <DMA1_Stream6_IRQHandler+0x10>)
 80030fa:	f000 fc63 	bl	80039c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200007c4 	.word	0x200007c4

08003108 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800310e:	f001 ff83 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200006d8 	.word	0x200006d8

0800311c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <TIM3_IRQHandler+0x10>)
 8003122:	f001 ff79 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000600 	.word	0x20000600

08003130 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <TIM4_IRQHandler+0x10>)
 8003136:	f001 ff6f 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000648 	.word	0x20000648

08003144 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <USART2_IRQHandler+0x10>)
 800314a:	f002 fc89 	bl	8005a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000720 	.word	0x20000720

08003158 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_1_Pin);
 800315c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003160:	f001 f852 	bl	8004208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_2_Pin);
 8003164:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003168:	f001 f84e 	bl	8004208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800316c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003170:	f001 f84a 	bl	8004208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}

08003178 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
	return 1;
 800317c:	2301      	movs	r3, #1
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <_kill>:

int _kill(int pid, int sig)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003192:	f003 fced 	bl	8006b70 <__errno>
 8003196:	4603      	mov	r3, r0
 8003198:	2216      	movs	r2, #22
 800319a:	601a      	str	r2, [r3, #0]
	return -1;
 800319c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <_exit>:

void _exit (int status)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ffe7 	bl	8003188 <_kill>
	while (1) {}		/* Make sure we hang here */
 80031ba:	e7fe      	b.n	80031ba <_exit+0x12>

080031bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	e00a      	b.n	80031e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031ce:	f3af 8000 	nop.w
 80031d2:	4601      	mov	r1, r0
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	60ba      	str	r2, [r7, #8]
 80031da:	b2ca      	uxtb	r2, r1
 80031dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	dbf0      	blt.n	80031ce <_read+0x12>
	}

return len;
 80031ec:	687b      	ldr	r3, [r7, #4]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
	return -1;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800321e:	605a      	str	r2, [r3, #4]
	return 0;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <_isatty>:

int _isatty(int file)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
	return 1;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
	return 0;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <_sbrk+0x5c>)
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <_sbrk+0x60>)
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003274:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <_sbrk+0x64>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <_sbrk+0x64>)
 800327e:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <_sbrk+0x68>)
 8003280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <_sbrk+0x64>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	429a      	cmp	r2, r3
 800328e:	d207      	bcs.n	80032a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003290:	f003 fc6e 	bl	8006b70 <__errno>
 8003294:	4603      	mov	r3, r0
 8003296:	220c      	movs	r2, #12
 8003298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800329a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800329e:	e009      	b.n	80032b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <_sbrk+0x64>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <_sbrk+0x64>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <_sbrk+0x64>)
 80032b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032b2:	68fb      	ldr	r3, [r7, #12]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20020000 	.word	0x20020000
 80032c0:	00000400 	.word	0x00000400
 80032c4:	20000824 	.word	0x20000824
 80032c8:	20000840 	.word	0x20000840

080032cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <SystemInit+0x20>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	4a05      	ldr	r2, [pc, #20]	; (80032ec <SystemInit+0x20>)
 80032d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <Reset_Handler>:
 80032f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003328 <LoopFillZerobss+0x12>
 80032f4:	480d      	ldr	r0, [pc, #52]	; (800332c <LoopFillZerobss+0x16>)
 80032f6:	490e      	ldr	r1, [pc, #56]	; (8003330 <LoopFillZerobss+0x1a>)
 80032f8:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <LoopFillZerobss+0x1e>)
 80032fa:	2300      	movs	r3, #0
 80032fc:	e002      	b.n	8003304 <LoopCopyDataInit>

080032fe <CopyDataInit>:
 80032fe:	58d4      	ldr	r4, [r2, r3]
 8003300:	50c4      	str	r4, [r0, r3]
 8003302:	3304      	adds	r3, #4

08003304 <LoopCopyDataInit>:
 8003304:	18c4      	adds	r4, r0, r3
 8003306:	428c      	cmp	r4, r1
 8003308:	d3f9      	bcc.n	80032fe <CopyDataInit>
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <LoopFillZerobss+0x22>)
 800330c:	4c0b      	ldr	r4, [pc, #44]	; (800333c <LoopFillZerobss+0x26>)
 800330e:	2300      	movs	r3, #0
 8003310:	e001      	b.n	8003316 <LoopFillZerobss>

08003312 <FillZerobss>:
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	3204      	adds	r2, #4

08003316 <LoopFillZerobss>:
 8003316:	42a2      	cmp	r2, r4
 8003318:	d3fb      	bcc.n	8003312 <FillZerobss>
 800331a:	f7ff ffd7 	bl	80032cc <SystemInit>
 800331e:	f003 fc2d 	bl	8006b7c <__libc_init_array>
 8003322:	f7fe fea7 	bl	8002074 <main>
 8003326:	4770      	bx	lr
 8003328:	20020000 	.word	0x20020000
 800332c:	20000000 	.word	0x20000000
 8003330:	200001e0 	.word	0x200001e0
 8003334:	08009ef4 	.word	0x08009ef4
 8003338:	200001e0 	.word	0x200001e0
 800333c:	2000083c 	.word	0x2000083c

08003340 <ADC_IRQHandler>:
 8003340:	e7fe      	b.n	8003340 <ADC_IRQHandler>
	...

08003344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003348:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <HAL_Init+0x40>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0d      	ldr	r2, [pc, #52]	; (8003384 <HAL_Init+0x40>)
 800334e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_Init+0x40>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <HAL_Init+0x40>)
 800335a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800335e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_Init+0x40>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a07      	ldr	r2, [pc, #28]	; (8003384 <HAL_Init+0x40>)
 8003366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800336c:	2003      	movs	r0, #3
 800336e:	f000 f94f 	bl	8003610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003372:	2000      	movs	r0, #0
 8003374:	f000 f808 	bl	8003388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003378:	f7ff fc5e 	bl	8002c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023c00 	.word	0x40023c00

08003388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003390:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_InitTick+0x54>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_InitTick+0x58>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800339e:	fbb3 f3f1 	udiv	r3, r3, r1
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f967 	bl	800367a <HAL_SYSTICK_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e00e      	b.n	80033d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b0f      	cmp	r3, #15
 80033ba:	d80a      	bhi.n	80033d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033bc:	2200      	movs	r2, #0
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c4:	f000 f92f 	bl	8003626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033c8:	4a06      	ldr	r2, [pc, #24]	; (80033e4 <HAL_InitTick+0x5c>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000004 	.word	0x20000004
 80033e0:	2000000c 	.word	0x2000000c
 80033e4:	20000008 	.word	0x20000008

080033e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_IncTick+0x20>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_IncTick+0x24>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_IncTick+0x24>)
 80033fa:	6013      	str	r3, [r2, #0]
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	2000000c 	.word	0x2000000c
 800340c:	20000828 	.word	0x20000828

08003410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return uwTick;
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HAL_GetTick+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000828 	.word	0x20000828

08003428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003430:	f7ff ffee 	bl	8003410 <HAL_GetTick>
 8003434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003440:	d005      	beq.n	800344e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_Delay+0x44>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  }

 while((HAL_GetTick() - tickstart) < wait)
 800344e:	bf00      	nop
 8003450:	f7ff ffde 	bl	8003410 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	429a      	cmp	r2, r3
 800345e:	d8f7      	bhi.n	8003450 <HAL_Delay+0x28>
  {
  }
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000000c 	.word	0x2000000c

08003470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800348c:	4013      	ands	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800349c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a2:	4a04      	ldr	r2, [pc, #16]	; (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	60d3      	str	r3, [r2, #12]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <__NVIC_GetPriorityGrouping+0x18>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 0307 	and.w	r3, r3, #7
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	db0b      	blt.n	80034fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <__NVIC_EnableIRQ+0x38>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	2001      	movs	r0, #1
 80034f6:	fa00 f202 	lsl.w	r2, r0, r2
 80034fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000e100 	.word	0xe000e100

08003510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	2b00      	cmp	r3, #0
 8003522:	db0a      	blt.n	800353a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	490c      	ldr	r1, [pc, #48]	; (800355c <__NVIC_SetPriority+0x4c>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	440b      	add	r3, r1
 8003534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003538:	e00a      	b.n	8003550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4908      	ldr	r1, [pc, #32]	; (8003560 <__NVIC_SetPriority+0x50>)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	3b04      	subs	r3, #4
 8003548:	0112      	lsls	r2, r2, #4
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	440b      	add	r3, r1
 800354e:	761a      	strb	r2, [r3, #24]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000e100 	.word	0xe000e100
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f1c3 0307 	rsb	r3, r3, #7
 800357e:	2b04      	cmp	r3, #4
 8003580:	bf28      	it	cs
 8003582:	2304      	movcs	r3, #4
 8003584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3304      	adds	r3, #4
 800358a:	2b06      	cmp	r3, #6
 800358c:	d902      	bls.n	8003594 <NVIC_EncodePriority+0x30>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3b03      	subs	r3, #3
 8003592:	e000      	b.n	8003596 <NVIC_EncodePriority+0x32>
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	401a      	ands	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	43d9      	mvns	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	4313      	orrs	r3, r2
         );
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3724      	adds	r7, #36	; 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035dc:	d301      	bcc.n	80035e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035de:	2301      	movs	r3, #1
 80035e0:	e00f      	b.n	8003602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <SysTick_Config+0x40>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ea:	210f      	movs	r1, #15
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035f0:	f7ff ff8e 	bl	8003510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <SysTick_Config+0x40>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fa:	4b04      	ldr	r3, [pc, #16]	; (800360c <SysTick_Config+0x40>)
 80035fc:	2207      	movs	r2, #7
 80035fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	e000e010 	.word	0xe000e010

08003610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ff29 	bl	8003470 <__NVIC_SetPriorityGrouping>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003626:	b580      	push	{r7, lr}
 8003628:	b086      	sub	sp, #24
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003638:	f7ff ff3e 	bl	80034b8 <__NVIC_GetPriorityGrouping>
 800363c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	6978      	ldr	r0, [r7, #20]
 8003644:	f7ff ff8e 	bl	8003564 <NVIC_EncodePriority>
 8003648:	4602      	mov	r2, r0
 800364a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff5d 	bl	8003510 <__NVIC_SetPriority>
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff31 	bl	80034d4 <__NVIC_EnableIRQ>
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ffa2 	bl	80035cc <SysTick_Config>
 8003688:	4603      	mov	r3, r0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036a0:	f7ff feb6 	bl	8003410 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e099      	b.n	80037e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d0:	e00f      	b.n	80036f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036d2:	f7ff fe9d 	bl	8003410 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b05      	cmp	r3, #5
 80036de:	d908      	bls.n	80036f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2203      	movs	r2, #3
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e078      	b.n	80037e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e8      	bne.n	80036d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4b38      	ldr	r3, [pc, #224]	; (80037ec <HAL_DMA_Init+0x158>)
 800370c:	4013      	ands	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800371e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	2b04      	cmp	r3, #4
 800374a:	d107      	bne.n	800375c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	4313      	orrs	r3, r2
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 0307 	bic.w	r3, r3, #7
 8003772:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2b04      	cmp	r3, #4
 8003784:	d117      	bne.n	80037b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00e      	beq.n	80037b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fb01 	bl	8003da0 <DMA_CheckFifoParam>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2240      	movs	r2, #64	; 0x40
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037b2:	2301      	movs	r3, #1
 80037b4:	e016      	b.n	80037e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fab8 	bl	8003d34 <DMA_CalcBaseAndBitshift>
 80037c4:	4603      	mov	r3, r0
 80037c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	223f      	movs	r2, #63	; 0x3f
 80037ce:	409a      	lsls	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	f010803f 	.word	0xf010803f

080037f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_DMA_Start_IT+0x26>
 8003812:	2302      	movs	r3, #2
 8003814:	e040      	b.n	8003898 <HAL_DMA_Start_IT+0xa8>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d12f      	bne.n	800388a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fa4a 	bl	8003cd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003848:	223f      	movs	r2, #63	; 0x3f
 800384a:	409a      	lsls	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0216 	orr.w	r2, r2, #22
 800385e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0208 	orr.w	r2, r2, #8
 8003876:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e005      	b.n	8003896 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003892:	2302      	movs	r3, #2
 8003894:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003896:	7dfb      	ldrb	r3, [r7, #23]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038ae:	f7ff fdaf 	bl	8003410 <HAL_GetTick>
 80038b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d008      	beq.n	80038d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2280      	movs	r2, #128	; 0x80
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e052      	b.n	8003978 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0216 	bic.w	r2, r2, #22
 80038e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d103      	bne.n	8003902 <HAL_DMA_Abort+0x62>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0208 	bic.w	r2, r2, #8
 8003910:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003922:	e013      	b.n	800394c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003924:	f7ff fd74 	bl	8003410 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b05      	cmp	r3, #5
 8003930:	d90c      	bls.n	800394c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2203      	movs	r2, #3
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e015      	b.n	8003978 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e4      	bne.n	8003924 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	223f      	movs	r2, #63	; 0x3f
 8003960:	409a      	lsls	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d004      	beq.n	800399e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2280      	movs	r2, #128	; 0x80
 8003998:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e00c      	b.n	80039b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2205      	movs	r2, #5
 80039a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039d0:	4b8e      	ldr	r3, [pc, #568]	; (8003c0c <HAL_DMA_IRQHandler+0x248>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a8e      	ldr	r2, [pc, #568]	; (8003c10 <HAL_DMA_IRQHandler+0x24c>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	0a9b      	lsrs	r3, r3, #10
 80039dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ee:	2208      	movs	r2, #8
 80039f0:	409a      	lsls	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01a      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0204 	bic.w	r2, r2, #4
 8003a16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	2201      	movs	r2, #1
 8003a36:	409a      	lsls	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d012      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	2201      	movs	r2, #1
 8003a54:	409a      	lsls	r2, r3
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	f043 0202 	orr.w	r2, r3, #2
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d012      	beq.n	8003a9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	2204      	movs	r2, #4
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	f043 0204 	orr.w	r2, r3, #4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d043      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d03c      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	2210      	movs	r2, #16
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d018      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d024      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
 8003af2:	e01f      	b.n	8003b34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01b      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
 8003b04:	e016      	b.n	8003b34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d107      	bne.n	8003b24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0208 	bic.w	r2, r2, #8
 8003b22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	2220      	movs	r2, #32
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 808f 	beq.w	8003c64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8087 	beq.w	8003c64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d136      	bne.n	8003bdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0216 	bic.w	r2, r2, #22
 8003b7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d103      	bne.n	8003b9e <HAL_DMA_IRQHandler+0x1da>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0208 	bic.w	r2, r2, #8
 8003bac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	223f      	movs	r2, #63	; 0x3f
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d07e      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4798      	blx	r3
        }
        return;
 8003bda:	e079      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01d      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10d      	bne.n	8003c14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d031      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
 8003c08:	e02c      	b.n	8003c64 <HAL_DMA_IRQHandler+0x2a0>
 8003c0a:	bf00      	nop
 8003c0c:	20000004 	.word	0x20000004
 8003c10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d023      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
 8003c24:	e01e      	b.n	8003c64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10f      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0210 	bic.w	r2, r2, #16
 8003c42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d032      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d022      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2205      	movs	r2, #5
 8003c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	3301      	adds	r3, #1
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d307      	bcc.n	8003cac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f2      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x2cc>
 8003caa:	e000      	b.n	8003cae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
 8003cce:	e000      	b.n	8003cd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cd0:	bf00      	nop
    }
  }
}
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d108      	bne.n	8003d18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d16:	e007      	b.n	8003d28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	3b10      	subs	r3, #16
 8003d44:	4a14      	ldr	r2, [pc, #80]	; (8003d98 <DMA_CalcBaseAndBitshift+0x64>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d4e:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <DMA_CalcBaseAndBitshift+0x68>)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d909      	bls.n	8003d76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	1d1a      	adds	r2, r3, #4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	659a      	str	r2, [r3, #88]	; 0x58
 8003d74:	e007      	b.n	8003d86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	aaaaaaab 	.word	0xaaaaaaab
 8003d9c:	08009b00 	.word	0x08009b00

08003da0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11f      	bne.n	8003dfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d856      	bhi.n	8003e6e <DMA_CheckFifoParam+0xce>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <DMA_CheckFifoParam+0x28>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003deb 	.word	0x08003deb
 8003dd0:	08003dd9 	.word	0x08003dd9
 8003dd4:	08003e6f 	.word	0x08003e6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d046      	beq.n	8003e72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de8:	e043      	b.n	8003e72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003df2:	d140      	bne.n	8003e76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df8:	e03d      	b.n	8003e76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e02:	d121      	bne.n	8003e48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d837      	bhi.n	8003e7a <DMA_CheckFifoParam+0xda>
 8003e0a:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <DMA_CheckFifoParam+0x70>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e21 	.word	0x08003e21
 8003e14:	08003e27 	.word	0x08003e27
 8003e18:	08003e21 	.word	0x08003e21
 8003e1c:	08003e39 	.word	0x08003e39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      break;
 8003e24:	e030      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d025      	beq.n	8003e7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e36:	e022      	b.n	8003e7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e40:	d11f      	bne.n	8003e82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e46:	e01c      	b.n	8003e82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d903      	bls.n	8003e56 <DMA_CheckFifoParam+0xb6>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d003      	beq.n	8003e5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e54:	e018      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5a:	e015      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00e      	beq.n	8003e86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6c:	e00b      	b.n	8003e86 <DMA_CheckFifoParam+0xe6>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e00a      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e72:	bf00      	nop
 8003e74:	e008      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e76:	bf00      	nop
 8003e78:	e006      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e004      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e002      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e82:	bf00      	nop
 8003e84:	e000      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e86:	bf00      	nop
    }
  } 
  
  return status; 
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop

08003e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	; 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	e159      	b.n	8004168 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	f040 8148 	bne.w	8004162 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d005      	beq.n	8003eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d130      	bne.n	8003f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f20:	2201      	movs	r2, #1
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 0201 	and.w	r2, r3, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d017      	beq.n	8003f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d123      	bne.n	8003fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	08da      	lsrs	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3208      	adds	r2, #8
 8003f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	220f      	movs	r2, #15
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	08da      	lsrs	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3208      	adds	r2, #8
 8003fd6:	69b9      	ldr	r1, [r7, #24]
 8003fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0203 	and.w	r2, r3, #3
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a2 	beq.w	8004162 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	4b57      	ldr	r3, [pc, #348]	; (8004180 <HAL_GPIO_Init+0x2e8>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4a56      	ldr	r2, [pc, #344]	; (8004180 <HAL_GPIO_Init+0x2e8>)
 8004028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	4b54      	ldr	r3, [pc, #336]	; (8004180 <HAL_GPIO_Init+0x2e8>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800403a:	4a52      	ldr	r2, [pc, #328]	; (8004184 <HAL_GPIO_Init+0x2ec>)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	3302      	adds	r3, #2
 8004042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	220f      	movs	r2, #15
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a49      	ldr	r2, [pc, #292]	; (8004188 <HAL_GPIO_Init+0x2f0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d019      	beq.n	800409a <HAL_GPIO_Init+0x202>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a48      	ldr	r2, [pc, #288]	; (800418c <HAL_GPIO_Init+0x2f4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_GPIO_Init+0x1fe>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a47      	ldr	r2, [pc, #284]	; (8004190 <HAL_GPIO_Init+0x2f8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00d      	beq.n	8004092 <HAL_GPIO_Init+0x1fa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a46      	ldr	r2, [pc, #280]	; (8004194 <HAL_GPIO_Init+0x2fc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <HAL_GPIO_Init+0x1f6>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a45      	ldr	r2, [pc, #276]	; (8004198 <HAL_GPIO_Init+0x300>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_GPIO_Init+0x1f2>
 8004086:	2304      	movs	r3, #4
 8004088:	e008      	b.n	800409c <HAL_GPIO_Init+0x204>
 800408a:	2307      	movs	r3, #7
 800408c:	e006      	b.n	800409c <HAL_GPIO_Init+0x204>
 800408e:	2303      	movs	r3, #3
 8004090:	e004      	b.n	800409c <HAL_GPIO_Init+0x204>
 8004092:	2302      	movs	r3, #2
 8004094:	e002      	b.n	800409c <HAL_GPIO_Init+0x204>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_GPIO_Init+0x204>
 800409a:	2300      	movs	r3, #0
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	f002 0203 	and.w	r2, r2, #3
 80040a2:	0092      	lsls	r2, r2, #2
 80040a4:	4093      	lsls	r3, r2
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040ac:	4935      	ldr	r1, [pc, #212]	; (8004184 <HAL_GPIO_Init+0x2ec>)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	3302      	adds	r3, #2
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ba:	4b38      	ldr	r3, [pc, #224]	; (800419c <HAL_GPIO_Init+0x304>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040de:	4a2f      	ldr	r2, [pc, #188]	; (800419c <HAL_GPIO_Init+0x304>)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040e4:	4b2d      	ldr	r3, [pc, #180]	; (800419c <HAL_GPIO_Init+0x304>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004108:	4a24      	ldr	r2, [pc, #144]	; (800419c <HAL_GPIO_Init+0x304>)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <HAL_GPIO_Init+0x304>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004132:	4a1a      	ldr	r2, [pc, #104]	; (800419c <HAL_GPIO_Init+0x304>)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <HAL_GPIO_Init+0x304>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800415c:	4a0f      	ldr	r2, [pc, #60]	; (800419c <HAL_GPIO_Init+0x304>)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3301      	adds	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b0f      	cmp	r3, #15
 800416c:	f67f aea2 	bls.w	8003eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	3724      	adds	r7, #36	; 0x24
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	40013800 	.word	0x40013800
 8004188:	40020000 	.word	0x40020000
 800418c:	40020400 	.word	0x40020400
 8004190:	40020800 	.word	0x40020800
 8004194:	40020c00 	.word	0x40020c00
 8004198:	40021000 	.word	0x40021000
 800419c:	40013c00 	.word	0x40013c00

080041a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	807b      	strh	r3, [r7, #2]
 80041ac:	4613      	mov	r3, r2
 80041ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041b0:	787b      	ldrb	r3, [r7, #1]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041b6:	887a      	ldrh	r2, [r7, #2]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041bc:	e003      	b.n	80041c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041be:	887b      	ldrh	r3, [r7, #2]
 80041c0:	041a      	lsls	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	619a      	str	r2, [r3, #24]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041e4:	887a      	ldrh	r2, [r7, #2]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4013      	ands	r3, r2
 80041ea:	041a      	lsls	r2, r3, #16
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	43d9      	mvns	r1, r3
 80041f0:	887b      	ldrh	r3, [r7, #2]
 80041f2:	400b      	ands	r3, r1
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	619a      	str	r2, [r3, #24]
}
 80041fa:	bf00      	nop
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004212:	4b08      	ldr	r3, [pc, #32]	; (8004234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800421e:	4a05      	ldr	r2, [pc, #20]	; (8004234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fc ff5a 	bl	80010e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40013c00 	.word	0x40013c00

08004238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e267      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d075      	beq.n	8004342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004256:	4b88      	ldr	r3, [pc, #544]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b04      	cmp	r3, #4
 8004260:	d00c      	beq.n	800427c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004262:	4b85      	ldr	r3, [pc, #532]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800426a:	2b08      	cmp	r3, #8
 800426c:	d112      	bne.n	8004294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426e:	4b82      	ldr	r3, [pc, #520]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427a:	d10b      	bne.n	8004294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	4b7e      	ldr	r3, [pc, #504]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d05b      	beq.n	8004340 <HAL_RCC_OscConfig+0x108>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d157      	bne.n	8004340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e242      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d106      	bne.n	80042ac <HAL_RCC_OscConfig+0x74>
 800429e:	4b76      	ldr	r3, [pc, #472]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a75      	ldr	r2, [pc, #468]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e01d      	b.n	80042e8 <HAL_RCC_OscConfig+0xb0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x98>
 80042b6:	4b70      	ldr	r3, [pc, #448]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a6f      	ldr	r2, [pc, #444]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80042bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b6d      	ldr	r3, [pc, #436]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a6c      	ldr	r2, [pc, #432]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e00b      	b.n	80042e8 <HAL_RCC_OscConfig+0xb0>
 80042d0:	4b69      	ldr	r3, [pc, #420]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a68      	ldr	r2, [pc, #416]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b66      	ldr	r3, [pc, #408]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a65      	ldr	r2, [pc, #404]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80042e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7ff f88e 	bl	8003410 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f8:	f7ff f88a 	bl	8003410 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e207      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b5b      	ldr	r3, [pc, #364]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0xc0>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7ff f87a 	bl	8003410 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004320:	f7ff f876 	bl	8003410 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	; 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e1f3      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004332:	4b51      	ldr	r3, [pc, #324]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0xe8>
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d063      	beq.n	8004416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800434e:	4b4a      	ldr	r3, [pc, #296]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435a:	4b47      	ldr	r3, [pc, #284]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004362:	2b08      	cmp	r3, #8
 8004364:	d11c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004366:	4b44      	ldr	r3, [pc, #272]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d116      	bne.n	80043a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	4b41      	ldr	r3, [pc, #260]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x152>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d001      	beq.n	800438a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e1c7      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438a:	4b3b      	ldr	r3, [pc, #236]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4937      	ldr	r1, [pc, #220]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	e03a      	b.n	8004416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a8:	4b34      	ldr	r3, [pc, #208]	; (800447c <HAL_RCC_OscConfig+0x244>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7ff f82f 	bl	8003410 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043b6:	f7ff f82b 	bl	8003410 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e1a8      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	4b2b      	ldr	r3, [pc, #172]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b28      	ldr	r3, [pc, #160]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4925      	ldr	r1, [pc, #148]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]
 80043e8:	e015      	b.n	8004416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ea:	4b24      	ldr	r3, [pc, #144]	; (800447c <HAL_RCC_OscConfig+0x244>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7ff f80e 	bl	8003410 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f8:	f7ff f80a 	bl	8003410 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e187      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d036      	beq.n	8004490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442a:	4b15      	ldr	r3, [pc, #84]	; (8004480 <HAL_RCC_OscConfig+0x248>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fe ffee 	bl	8003410 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004438:	f7fe ffea 	bl	8003410 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e167      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_RCC_OscConfig+0x240>)
 800444c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x200>
 8004456:	e01b      	b.n	8004490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_RCC_OscConfig+0x248>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445e:	f7fe ffd7 	bl	8003410 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004464:	e00e      	b.n	8004484 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004466:	f7fe ffd3 	bl	8003410 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d907      	bls.n	8004484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e150      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
 8004478:	40023800 	.word	0x40023800
 800447c:	42470000 	.word	0x42470000
 8004480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004484:	4b88      	ldr	r3, [pc, #544]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 8004486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ea      	bne.n	8004466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8097 	beq.w	80045cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a2:	4b81      	ldr	r3, [pc, #516]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10f      	bne.n	80044ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	4b7d      	ldr	r3, [pc, #500]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	4a7c      	ldr	r2, [pc, #496]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 80044b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044bc:	6413      	str	r3, [r2, #64]	; 0x40
 80044be:	4b7a      	ldr	r3, [pc, #488]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ca:	2301      	movs	r3, #1
 80044cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ce:	4b77      	ldr	r3, [pc, #476]	; (80046ac <HAL_RCC_OscConfig+0x474>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d118      	bne.n	800450c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044da:	4b74      	ldr	r3, [pc, #464]	; (80046ac <HAL_RCC_OscConfig+0x474>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a73      	ldr	r2, [pc, #460]	; (80046ac <HAL_RCC_OscConfig+0x474>)
 80044e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e6:	f7fe ff93 	bl	8003410 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ee:	f7fe ff8f 	bl	8003410 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e10c      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004500:	4b6a      	ldr	r3, [pc, #424]	; (80046ac <HAL_RCC_OscConfig+0x474>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d106      	bne.n	8004522 <HAL_RCC_OscConfig+0x2ea>
 8004514:	4b64      	ldr	r3, [pc, #400]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004518:	4a63      	ldr	r2, [pc, #396]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	6713      	str	r3, [r2, #112]	; 0x70
 8004520:	e01c      	b.n	800455c <HAL_RCC_OscConfig+0x324>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b05      	cmp	r3, #5
 8004528:	d10c      	bne.n	8004544 <HAL_RCC_OscConfig+0x30c>
 800452a:	4b5f      	ldr	r3, [pc, #380]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4a5e      	ldr	r2, [pc, #376]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 8004530:	f043 0304 	orr.w	r3, r3, #4
 8004534:	6713      	str	r3, [r2, #112]	; 0x70
 8004536:	4b5c      	ldr	r3, [pc, #368]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4a5b      	ldr	r2, [pc, #364]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6713      	str	r3, [r2, #112]	; 0x70
 8004542:	e00b      	b.n	800455c <HAL_RCC_OscConfig+0x324>
 8004544:	4b58      	ldr	r3, [pc, #352]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	4a57      	ldr	r2, [pc, #348]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	6713      	str	r3, [r2, #112]	; 0x70
 8004550:	4b55      	ldr	r3, [pc, #340]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	4a54      	ldr	r2, [pc, #336]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 8004556:	f023 0304 	bic.w	r3, r3, #4
 800455a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d015      	beq.n	8004590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fe ff54 	bl	8003410 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fe ff50 	bl	8003410 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	; 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0cb      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004582:	4b49      	ldr	r3, [pc, #292]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ee      	beq.n	800456c <HAL_RCC_OscConfig+0x334>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004590:	f7fe ff3e 	bl	8003410 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004596:	e00a      	b.n	80045ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004598:	f7fe ff3a 	bl	8003410 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0b5      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ae:	4b3e      	ldr	r3, [pc, #248]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1ee      	bne.n	8004598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d105      	bne.n	80045cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c0:	4b39      	ldr	r3, [pc, #228]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	4a38      	ldr	r2, [pc, #224]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 80045c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80a1 	beq.w	8004718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045d6:	4b34      	ldr	r3, [pc, #208]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d05c      	beq.n	800469c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d141      	bne.n	800466e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ea:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <HAL_RCC_OscConfig+0x478>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f0:	f7fe ff0e 	bl	8003410 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fe ff0a 	bl	8003410 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e087      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460a:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	019b      	lsls	r3, r3, #6
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	3b01      	subs	r3, #1
 8004630:	041b      	lsls	r3, r3, #16
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	491b      	ldr	r1, [pc, #108]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004640:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <HAL_RCC_OscConfig+0x478>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fe fee3 	bl	8003410 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464e:	f7fe fedf 	bl	8003410 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e05c      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x416>
 800466c:	e054      	b.n	8004718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <HAL_RCC_OscConfig+0x478>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fe fecc 	bl	8003410 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467c:	f7fe fec8 	bl	8003410 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e045      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_RCC_OscConfig+0x470>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x444>
 800469a:	e03d      	b.n	8004718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e038      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
 80046a8:	40023800 	.word	0x40023800
 80046ac:	40007000 	.word	0x40007000
 80046b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046b4:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <HAL_RCC_OscConfig+0x4ec>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d028      	beq.n	8004714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d121      	bne.n	8004714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d11a      	bne.n	8004714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046e4:	4013      	ands	r3, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d111      	bne.n	8004714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	085b      	lsrs	r3, r3, #1
 80046fc:	3b01      	subs	r3, #1
 80046fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004700:	429a      	cmp	r2, r3
 8004702:	d107      	bne.n	8004714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40023800 	.word	0x40023800

08004728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0cc      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800473c:	4b68      	ldr	r3, [pc, #416]	; (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d90c      	bls.n	8004764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474a:	4b65      	ldr	r3, [pc, #404]	; (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0b8      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d020      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800477c:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a58      	ldr	r2, [pc, #352]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004794:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a52      	ldr	r2, [pc, #328]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800479e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a0:	4b50      	ldr	r3, [pc, #320]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	494d      	ldr	r1, [pc, #308]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d044      	beq.n	8004848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b47      	ldr	r3, [pc, #284]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d119      	bne.n	8004806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e07f      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d003      	beq.n	80047e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e6:	4b3f      	ldr	r3, [pc, #252]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e06f      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f6:	4b3b      	ldr	r3, [pc, #236]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e067      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004806:	4b37      	ldr	r3, [pc, #220]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 0203 	bic.w	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	4934      	ldr	r1, [pc, #208]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	4313      	orrs	r3, r2
 8004816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004818:	f7fe fdfa 	bl	8003410 <HAL_GetTick>
 800481c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	e00a      	b.n	8004836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004820:	f7fe fdf6 	bl	8003410 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e04f      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 020c 	and.w	r2, r3, #12
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	429a      	cmp	r2, r3
 8004846:	d1eb      	bne.n	8004820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004848:	4b25      	ldr	r3, [pc, #148]	; (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d20c      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004856:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e032      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4916      	ldr	r1, [pc, #88]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	490e      	ldr	r1, [pc, #56]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048ae:	f000 f821 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	490a      	ldr	r1, [pc, #40]	; (80048e8 <HAL_RCC_ClockConfig+0x1c0>)
 80048c0:	5ccb      	ldrb	r3, [r1, r3]
 80048c2:	fa22 f303 	lsr.w	r3, r2, r3
 80048c6:	4a09      	ldr	r2, [pc, #36]	; (80048ec <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fd5a 	bl	8003388 <HAL_InitTick>

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023c00 	.word	0x40023c00
 80048e4:	40023800 	.word	0x40023800
 80048e8:	08009ae8 	.word	0x08009ae8
 80048ec:	20000004 	.word	0x20000004
 80048f0:	20000008 	.word	0x20000008

080048f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f8:	b094      	sub	sp, #80	; 0x50
 80048fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004900:	2300      	movs	r3, #0
 8004902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004904:	2300      	movs	r3, #0
 8004906:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490c:	4b79      	ldr	r3, [pc, #484]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 030c 	and.w	r3, r3, #12
 8004914:	2b08      	cmp	r3, #8
 8004916:	d00d      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x40>
 8004918:	2b08      	cmp	r3, #8
 800491a:	f200 80e1 	bhi.w	8004ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0x34>
 8004922:	2b04      	cmp	r3, #4
 8004924:	d003      	beq.n	800492e <HAL_RCC_GetSysClockFreq+0x3a>
 8004926:	e0db      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004928:	4b73      	ldr	r3, [pc, #460]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800492c:	e0db      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800492e:	4b73      	ldr	r3, [pc, #460]	; (8004afc <HAL_RCC_GetSysClockFreq+0x208>)
 8004930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004932:	e0d8      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004934:	4b6f      	ldr	r3, [pc, #444]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800493c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800493e:	4b6d      	ldr	r3, [pc, #436]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d063      	beq.n	8004a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494a:	4b6a      	ldr	r3, [pc, #424]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	099b      	lsrs	r3, r3, #6
 8004950:	2200      	movs	r2, #0
 8004952:	63bb      	str	r3, [r7, #56]	; 0x38
 8004954:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495c:	633b      	str	r3, [r7, #48]	; 0x30
 800495e:	2300      	movs	r3, #0
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
 8004962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004966:	4622      	mov	r2, r4
 8004968:	462b      	mov	r3, r5
 800496a:	f04f 0000 	mov.w	r0, #0
 800496e:	f04f 0100 	mov.w	r1, #0
 8004972:	0159      	lsls	r1, r3, #5
 8004974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004978:	0150      	lsls	r0, r2, #5
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4621      	mov	r1, r4
 8004980:	1a51      	subs	r1, r2, r1
 8004982:	6139      	str	r1, [r7, #16]
 8004984:	4629      	mov	r1, r5
 8004986:	eb63 0301 	sbc.w	r3, r3, r1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004998:	4659      	mov	r1, fp
 800499a:	018b      	lsls	r3, r1, #6
 800499c:	4651      	mov	r1, sl
 800499e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049a2:	4651      	mov	r1, sl
 80049a4:	018a      	lsls	r2, r1, #6
 80049a6:	4651      	mov	r1, sl
 80049a8:	ebb2 0801 	subs.w	r8, r2, r1
 80049ac:	4659      	mov	r1, fp
 80049ae:	eb63 0901 	sbc.w	r9, r3, r1
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049c6:	4690      	mov	r8, r2
 80049c8:	4699      	mov	r9, r3
 80049ca:	4623      	mov	r3, r4
 80049cc:	eb18 0303 	adds.w	r3, r8, r3
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	462b      	mov	r3, r5
 80049d4:	eb49 0303 	adc.w	r3, r9, r3
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049e6:	4629      	mov	r1, r5
 80049e8:	024b      	lsls	r3, r1, #9
 80049ea:	4621      	mov	r1, r4
 80049ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049f0:	4621      	mov	r1, r4
 80049f2:	024a      	lsls	r2, r1, #9
 80049f4:	4610      	mov	r0, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fa:	2200      	movs	r2, #0
 80049fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a04:	f7fc f958 	bl	8000cb8 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a10:	e058      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a12:	4b38      	ldr	r3, [pc, #224]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a22:	623b      	str	r3, [r7, #32]
 8004a24:	2300      	movs	r3, #0
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
 8004a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	464b      	mov	r3, r9
 8004a30:	f04f 0000 	mov.w	r0, #0
 8004a34:	f04f 0100 	mov.w	r1, #0
 8004a38:	0159      	lsls	r1, r3, #5
 8004a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a3e:	0150      	lsls	r0, r2, #5
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4641      	mov	r1, r8
 8004a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a64:	ebb2 040a 	subs.w	r4, r2, sl
 8004a68:	eb63 050b 	sbc.w	r5, r3, fp
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	00eb      	lsls	r3, r5, #3
 8004a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a7a:	00e2      	lsls	r2, r4, #3
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	461d      	mov	r5, r3
 8004a80:	4643      	mov	r3, r8
 8004a82:	18e3      	adds	r3, r4, r3
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	464b      	mov	r3, r9
 8004a88:	eb45 0303 	adc.w	r3, r5, r3
 8004a8c:	607b      	str	r3, [r7, #4]
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	028b      	lsls	r3, r1, #10
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	028a      	lsls	r2, r1, #10
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aae:	2200      	movs	r2, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	61fa      	str	r2, [r7, #28]
 8004ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ab8:	f7fc f8fe 	bl	8000cb8 <__aeabi_uldivmod>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	0c1b      	lsrs	r3, r3, #16
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ade:	e002      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ae2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3750      	adds	r7, #80	; 0x50
 8004aec:	46bd      	mov	sp, r7
 8004aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	007a1200 	.word	0x007a1200

08004b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000004 	.word	0x20000004

08004b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b1c:	f7ff fff0 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0a9b      	lsrs	r3, r3, #10
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4903      	ldr	r1, [pc, #12]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	08009af8 	.word	0x08009af8

08004b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b44:	f7ff ffdc 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0b5b      	lsrs	r3, r3, #13
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40023800 	.word	0x40023800
 8004b64:	08009af8 	.word	0x08009af8

08004b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e041      	b.n	8004bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fe f93e 	bl	8002e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f000 fc28 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d001      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e044      	b.n	8004caa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d018      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x6c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4a:	d013      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x6c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1a      	ldr	r2, [pc, #104]	; (8004cbc <HAL_TIM_Base_Start_IT+0xb4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00e      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x6c>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a19      	ldr	r2, [pc, #100]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x6c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x6c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a16      	ldr	r2, [pc, #88]	; (8004cc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d111      	bne.n	8004c98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d010      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0201 	orr.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c96:	e007      	b.n	8004ca8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40014000 	.word	0x40014000

08004ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e041      	b.n	8004d62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fd ffc8 	bl	8002c88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f000 fb76 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <HAL_TIM_PWM_Start+0x24>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	e022      	b.n	8004dd6 <HAL_TIM_PWM_Start+0x6a>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d109      	bne.n	8004daa <HAL_TIM_PWM_Start+0x3e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e015      	b.n	8004dd6 <HAL_TIM_PWM_Start+0x6a>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d109      	bne.n	8004dc4 <HAL_TIM_PWM_Start+0x58>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	e008      	b.n	8004dd6 <HAL_TIM_PWM_Start+0x6a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e068      	b.n	8004eb0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_PWM_Start+0x82>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dec:	e013      	b.n	8004e16 <HAL_TIM_PWM_Start+0xaa>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d104      	bne.n	8004dfe <HAL_TIM_PWM_Start+0x92>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dfc:	e00b      	b.n	8004e16 <HAL_TIM_PWM_Start+0xaa>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d104      	bne.n	8004e0e <HAL_TIM_PWM_Start+0xa2>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e0c:	e003      	b.n	8004e16 <HAL_TIM_PWM_Start+0xaa>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fcf8 	bl	8005814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a23      	ldr	r2, [pc, #140]	; (8004eb8 <HAL_TIM_PWM_Start+0x14c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d107      	bne.n	8004e3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1d      	ldr	r2, [pc, #116]	; (8004eb8 <HAL_TIM_PWM_Start+0x14c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d018      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x10e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d013      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x10e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <HAL_TIM_PWM_Start+0x150>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x10e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <HAL_TIM_PWM_Start+0x154>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x10e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a16      	ldr	r2, [pc, #88]	; (8004ec4 <HAL_TIM_PWM_Start+0x158>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x10e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <HAL_TIM_PWM_Start+0x15c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d111      	bne.n	8004e9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b06      	cmp	r3, #6
 8004e8a:	d010      	beq.n	8004eae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9c:	e007      	b.n	8004eae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0201 	orr.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40014000 	.word	0x40014000

08004ecc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e097      	b.n	8005010 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fd fefd 	bl	8002cf4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f10:	f023 0307 	bic.w	r3, r3, #7
 8004f14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f000 fa6b 	bl	80053fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f6c:	f023 030c 	bic.w	r3, r3, #12
 8004f70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	011a      	lsls	r2, r3, #4
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	031b      	lsls	r3, r3, #12
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d122      	bne.n	8005074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b02      	cmp	r3, #2
 800503a:	d11b      	bne.n	8005074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0202 	mvn.w	r2, #2
 8005044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f9b0 	bl	80053c0 <HAL_TIM_IC_CaptureCallback>
 8005060:	e005      	b.n	800506e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f9a2 	bl	80053ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f9b3 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b04      	cmp	r3, #4
 8005080:	d122      	bne.n	80050c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b04      	cmp	r3, #4
 800508e:	d11b      	bne.n	80050c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0204 	mvn.w	r2, #4
 8005098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f986 	bl	80053c0 <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f978 	bl	80053ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f989 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d122      	bne.n	800511c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d11b      	bne.n	800511c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0208 	mvn.w	r2, #8
 80050ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2204      	movs	r2, #4
 80050f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f95c 	bl	80053c0 <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f94e 	bl	80053ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f95f 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b10      	cmp	r3, #16
 8005128:	d122      	bne.n	8005170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b10      	cmp	r3, #16
 8005136:	d11b      	bne.n	8005170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0210 	mvn.w	r2, #16
 8005140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2208      	movs	r2, #8
 8005146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f932 	bl	80053c0 <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f924 	bl	80053ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f935 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b01      	cmp	r3, #1
 800517c:	d10e      	bne.n	800519c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	d107      	bne.n	800519c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0201 	mvn.w	r2, #1
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fb ffd4 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b80      	cmp	r3, #128	; 0x80
 80051a8:	d10e      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b80      	cmp	r3, #128	; 0x80
 80051b6:	d107      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fbc4 	bl	8005950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d10e      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d107      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f8fa 	bl	80053e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d10e      	bne.n	8005220 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b20      	cmp	r3, #32
 800520e:	d107      	bne.n	8005220 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0220 	mvn.w	r2, #32
 8005218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fb8e 	bl	800593c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005242:	2302      	movs	r3, #2
 8005244:	e0ae      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b0c      	cmp	r3, #12
 8005252:	f200 809f 	bhi.w	8005394 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005291 	.word	0x08005291
 8005260:	08005395 	.word	0x08005395
 8005264:	08005395 	.word	0x08005395
 8005268:	08005395 	.word	0x08005395
 800526c:	080052d1 	.word	0x080052d1
 8005270:	08005395 	.word	0x08005395
 8005274:	08005395 	.word	0x08005395
 8005278:	08005395 	.word	0x08005395
 800527c:	08005313 	.word	0x08005313
 8005280:	08005395 	.word	0x08005395
 8005284:	08005395 	.word	0x08005395
 8005288:	08005395 	.word	0x08005395
 800528c:	08005353 	.word	0x08005353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f930 	bl	80054fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0208 	orr.w	r2, r2, #8
 80052aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0204 	bic.w	r2, r2, #4
 80052ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6999      	ldr	r1, [r3, #24]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	619a      	str	r2, [r3, #24]
      break;
 80052ce:	e064      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f976 	bl	80055c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6999      	ldr	r1, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	021a      	lsls	r2, r3, #8
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	619a      	str	r2, [r3, #24]
      break;
 8005310:	e043      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f9c1 	bl	80056a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0208 	orr.w	r2, r2, #8
 800532c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0204 	bic.w	r2, r2, #4
 800533c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69d9      	ldr	r1, [r3, #28]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	61da      	str	r2, [r3, #28]
      break;
 8005350:	e023      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fa0b 	bl	8005774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69d9      	ldr	r1, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	021a      	lsls	r2, r3, #8
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	61da      	str	r2, [r3, #28]
      break;
 8005392:	e002      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
      break;
 8005398:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a34      	ldr	r2, [pc, #208]	; (80054e0 <TIM_Base_SetConfig+0xe4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00f      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541a:	d00b      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a31      	ldr	r2, [pc, #196]	; (80054e4 <TIM_Base_SetConfig+0xe8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a30      	ldr	r2, [pc, #192]	; (80054e8 <TIM_Base_SetConfig+0xec>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a2f      	ldr	r2, [pc, #188]	; (80054ec <TIM_Base_SetConfig+0xf0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d108      	bne.n	8005446 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a25      	ldr	r2, [pc, #148]	; (80054e0 <TIM_Base_SetConfig+0xe4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01b      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d017      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <TIM_Base_SetConfig+0xe8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d013      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <TIM_Base_SetConfig+0xec>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00f      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a20      	ldr	r2, [pc, #128]	; (80054ec <TIM_Base_SetConfig+0xf0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00b      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <TIM_Base_SetConfig+0xf4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <TIM_Base_SetConfig+0xf8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <TIM_Base_SetConfig+0xfc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d108      	bne.n	8005498 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <TIM_Base_SetConfig+0xe4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d103      	bne.n	80054cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	615a      	str	r2, [r3, #20]
}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800

080054fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0201 	bic.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 0302 	bic.w	r3, r3, #2
 8005544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a1c      	ldr	r2, [pc, #112]	; (80055c4 <TIM_OC1_SetConfig+0xc8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d10c      	bne.n	8005572 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0308 	bic.w	r3, r3, #8
 800555e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f023 0304 	bic.w	r3, r3, #4
 8005570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <TIM_OC1_SetConfig+0xc8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d111      	bne.n	800559e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	621a      	str	r2, [r3, #32]
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40010000 	.word	0x40010000

080055c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f023 0210 	bic.w	r2, r3, #16
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 0320 	bic.w	r3, r3, #32
 8005612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a1e      	ldr	r2, [pc, #120]	; (800569c <TIM_OC2_SetConfig+0xd4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d10d      	bne.n	8005644 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a15      	ldr	r2, [pc, #84]	; (800569c <TIM_OC2_SetConfig+0xd4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d113      	bne.n	8005674 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800565a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000

080056a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <TIM_OC3_SetConfig+0xd0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d10d      	bne.n	800571a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a14      	ldr	r2, [pc, #80]	; (8005770 <TIM_OC3_SetConfig+0xd0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d113      	bne.n	800574a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	621a      	str	r2, [r3, #32]
}
 8005764:	bf00      	nop
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	40010000 	.word	0x40010000

08005774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	031b      	lsls	r3, r3, #12
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a10      	ldr	r2, [pc, #64]	; (8005810 <TIM_OC4_SetConfig+0x9c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d109      	bne.n	80057e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	019b      	lsls	r3, r3, #6
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	621a      	str	r2, [r3, #32]
}
 8005802:	bf00      	nop
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40010000 	.word	0x40010000

08005814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	2201      	movs	r2, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1a      	ldr	r2, [r3, #32]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	43db      	mvns	r3, r3
 8005836:	401a      	ands	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	fa01 f303 	lsl.w	r3, r1, r3
 800584c:	431a      	orrs	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005874:	2302      	movs	r3, #2
 8005876:	e050      	b.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1c      	ldr	r2, [pc, #112]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c4:	d013      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a18      	ldr	r2, [pc, #96]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a16      	ldr	r2, [pc, #88]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a15      	ldr	r2, [pc, #84]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a13      	ldr	r2, [pc, #76]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10c      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40014000 	.word	0x40014000

0800593c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e03f      	b.n	80059f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fd fac6 	bl	8002f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2224      	movs	r2, #36	; 0x24
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fe69 	bl	8006680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d11d      	bne.n	8005a54 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <HAL_UART_Receive_DMA+0x26>
 8005a1e:	88fb      	ldrh	r3, [r7, #6]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e016      	b.n	8005a56 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_UART_Receive_DMA+0x38>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e00f      	b.n	8005a56 <HAL_UART_Receive_DMA+0x58>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	461a      	mov	r2, r3
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fbb8 	bl	80061c0 <UART_Start_Receive_DMA>
 8005a50:	4603      	mov	r3, r0
 8005a52:	e000      	b.n	8005a56 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a54:	2302      	movs	r3, #2
  }
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b0ba      	sub	sp, #232	; 0xe8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10f      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x66>
 8005ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fd23 	bl	800650a <UART_Receive_IT>
      return;
 8005ac4:	e256      	b.n	8005f74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 80de 	beq.w	8005c8c <HAL_UART_IRQHandler+0x22c>
 8005ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80d1 	beq.w	8005c8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <HAL_UART_IRQHandler+0xae>
 8005af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f043 0201 	orr.w	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00b      	beq.n	8005b32 <HAL_UART_IRQHandler+0xd2>
 8005b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f043 0202 	orr.w	r2, r3, #2
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <HAL_UART_IRQHandler+0xf6>
 8005b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	f043 0204 	orr.w	r2, r3, #4
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d011      	beq.n	8005b86 <HAL_UART_IRQHandler+0x126>
 8005b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d105      	bne.n	8005b7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d005      	beq.n	8005b86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f043 0208 	orr.w	r2, r3, #8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 81ed 	beq.w	8005f6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_UART_IRQHandler+0x14e>
 8005b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fcae 	bl	800650a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	bf0c      	ite	eq
 8005bbc:	2301      	moveq	r3, #1
 8005bbe:	2300      	movne	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d103      	bne.n	8005bda <HAL_UART_IRQHandler+0x17a>
 8005bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d04f      	beq.n	8005c7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fbb6 	bl	800634c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b40      	cmp	r3, #64	; 0x40
 8005bec:	d141      	bne.n	8005c72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3314      	adds	r3, #20
 8005bf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3314      	adds	r3, #20
 8005c16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1d9      	bne.n	8005bee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d013      	beq.n	8005c6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	4a7d      	ldr	r2, [pc, #500]	; (8005e3c <HAL_UART_IRQHandler+0x3dc>)
 8005c48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fd fe96 	bl	8003980 <HAL_DMA_Abort_IT>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d016      	beq.n	8005c88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c64:	4610      	mov	r0, r2
 8005c66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c68:	e00e      	b.n	8005c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f99a 	bl	8005fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	e00a      	b.n	8005c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f996 	bl	8005fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c78:	e006      	b.n	8005c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f992 	bl	8005fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c86:	e170      	b.n	8005f6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c88:	bf00      	nop
    return;
 8005c8a:	e16e      	b.n	8005f6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	f040 814a 	bne.w	8005f2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8143 	beq.w	8005f2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 813c 	beq.w	8005f2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60bb      	str	r3, [r7, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	f040 80b4 	bne.w	8005e40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ce4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8140 	beq.w	8005f6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	f080 8139 	bcs.w	8005f6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d0e:	f000 8088 	beq.w	8005e22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	330c      	adds	r3, #12
 8005d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1d9      	bne.n	8005d12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3314      	adds	r3, #20
 8005d64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d70:	f023 0301 	bic.w	r3, r3, #1
 8005d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3314      	adds	r3, #20
 8005d7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e1      	bne.n	8005d5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3314      	adds	r3, #20
 8005da0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3314      	adds	r3, #20
 8005dba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005dbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005dc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005dc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e3      	bne.n	8005d9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	330c      	adds	r3, #12
 8005de6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df2:	f023 0310 	bic.w	r3, r3, #16
 8005df6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	330c      	adds	r3, #12
 8005e00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e04:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e3      	bne.n	8005de0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fd fd3f 	bl	80038a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f8c0 	bl	8005fb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e38:	e099      	b.n	8005f6e <HAL_UART_IRQHandler+0x50e>
 8005e3a:	bf00      	nop
 8005e3c:	08006413 	.word	0x08006413
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 808b 	beq.w	8005f72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8086 	beq.w	8005f72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e8a:	647a      	str	r2, [r7, #68]	; 0x44
 8005e8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e3      	bne.n	8005e66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3314      	adds	r3, #20
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	623b      	str	r3, [r7, #32]
   return(result);
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	f023 0301 	bic.w	r3, r3, #1
 8005eb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3314      	adds	r3, #20
 8005ebe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ec2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e3      	bne.n	8005e9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0310 	bic.w	r3, r3, #16
 8005efa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f08:	61fa      	str	r2, [r7, #28]
 8005f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	69b9      	ldr	r1, [r7, #24]
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	617b      	str	r3, [r7, #20]
   return(result);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e3      	bne.n	8005ee4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f848 	bl	8005fb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f28:	e023      	b.n	8005f72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <HAL_UART_IRQHandler+0x4ea>
 8005f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa79 	bl	800643a <UART_Transmit_IT>
    return;
 8005f48:	e014      	b.n	8005f74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00e      	beq.n	8005f74 <HAL_UART_IRQHandler+0x514>
 8005f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d008      	beq.n	8005f74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fab9 	bl	80064da <UART_EndTransmit_IT>
    return;
 8005f68:	e004      	b.n	8005f74 <HAL_UART_IRQHandler+0x514>
    return;
 8005f6a:	bf00      	nop
 8005f6c:	e002      	b.n	8005f74 <HAL_UART_IRQHandler+0x514>
      return;
 8005f6e:	bf00      	nop
 8005f70:	e000      	b.n	8005f74 <HAL_UART_IRQHandler+0x514>
      return;
 8005f72:	bf00      	nop
  }
}
 8005f74:	37e8      	adds	r7, #232	; 0xe8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop

08005f7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b09c      	sub	sp, #112	; 0x70
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d172      	bne.n	80060d2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fee:	2200      	movs	r2, #0
 8005ff0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006008:	66bb      	str	r3, [r7, #104]	; 0x68
 800600a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006012:	65ba      	str	r2, [r7, #88]	; 0x58
 8006014:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006018:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e5      	bne.n	8005ff2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3314      	adds	r3, #20
 800602c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	667b      	str	r3, [r7, #100]	; 0x64
 800603e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3314      	adds	r3, #20
 8006044:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006046:	647a      	str	r2, [r7, #68]	; 0x44
 8006048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800604c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e5      	bne.n	8006026 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3314      	adds	r3, #20
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	623b      	str	r3, [r7, #32]
   return(result);
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006070:	663b      	str	r3, [r7, #96]	; 0x60
 8006072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3314      	adds	r3, #20
 8006078:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800607a:	633a      	str	r2, [r7, #48]	; 0x30
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e5      	bne.n	800605a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800608e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006090:	2220      	movs	r2, #32
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	2b01      	cmp	r3, #1
 800609c:	d119      	bne.n	80060d2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800609e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	330c      	adds	r3, #12
 80060a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f023 0310 	bic.w	r3, r3, #16
 80060b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	330c      	adds	r3, #12
 80060bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060be:	61fa      	str	r2, [r7, #28]
 80060c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	69b9      	ldr	r1, [r7, #24]
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	617b      	str	r3, [r7, #20]
   return(result);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e5      	bne.n	800609e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d106      	bne.n	80060e8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060de:	4619      	mov	r1, r3
 80060e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060e2:	f7ff ff69 	bl	8005fb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060e6:	e002      	b.n	80060ee <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80060e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060ea:	f7fa ff67 	bl	8000fbc <HAL_UART_RxCpltCallback>
}
 80060ee:	bf00      	nop
 80060f0:	3770      	adds	r7, #112	; 0x70
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	2b01      	cmp	r3, #1
 800610a:	d108      	bne.n	800611e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	b29b      	uxth	r3, r3
 8006114:	4619      	mov	r1, r3
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff ff4e 	bl	8005fb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800611c:	e002      	b.n	8006124 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff ff36 	bl	8005f90 <HAL_UART_RxHalfCpltCallback>
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006148:	2b80      	cmp	r3, #128	; 0x80
 800614a:	bf0c      	ite	eq
 800614c:	2301      	moveq	r3, #1
 800614e:	2300      	movne	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b21      	cmp	r3, #33	; 0x21
 800615e:	d108      	bne.n	8006172 <UART_DMAError+0x46>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2200      	movs	r2, #0
 800616a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800616c:	68b8      	ldr	r0, [r7, #8]
 800616e:	f000 f8c5 	bl	80062fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b22      	cmp	r3, #34	; 0x22
 8006192:	d108      	bne.n	80061a6 <UART_DMAError+0x7a>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80061a0:	68b8      	ldr	r0, [r7, #8]
 80061a2:	f000 f8d3 	bl	800634c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f043 0210 	orr.w	r2, r3, #16
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061b2:	68b8      	ldr	r0, [r7, #8]
 80061b4:	f7ff fef6 	bl	8005fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b098      	sub	sp, #96	; 0x60
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	4613      	mov	r3, r2
 80061cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	88fa      	ldrh	r2, [r7, #6]
 80061d8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2222      	movs	r2, #34	; 0x22
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	4a40      	ldr	r2, [pc, #256]	; (80062f0 <UART_Start_Receive_DMA+0x130>)
 80061ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	4a3f      	ldr	r2, [pc, #252]	; (80062f4 <UART_Start_Receive_DMA+0x134>)
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	4a3e      	ldr	r2, [pc, #248]	; (80062f8 <UART_Start_Receive_DMA+0x138>)
 80061fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	2200      	movs	r2, #0
 8006206:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006208:	f107 0308 	add.w	r3, r7, #8
 800620c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	f7fd fae6 	bl	80037f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006224:	2300      	movs	r3, #0
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d019      	beq.n	800627e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800625a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006260:	65bb      	str	r3, [r7, #88]	; 0x58
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	330c      	adds	r3, #12
 8006268:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800626a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800626c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e5      	bne.n	800624a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3314      	adds	r3, #20
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	f043 0301 	orr.w	r3, r3, #1
 8006294:	657b      	str	r3, [r7, #84]	; 0x54
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3314      	adds	r3, #20
 800629c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800629e:	63ba      	str	r2, [r7, #56]	; 0x38
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80062a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e5      	bne.n	800627e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3314      	adds	r3, #20
 80062b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	617b      	str	r3, [r7, #20]
   return(result);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c8:	653b      	str	r3, [r7, #80]	; 0x50
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3314      	adds	r3, #20
 80062d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062d2:	627a      	str	r2, [r7, #36]	; 0x24
 80062d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6a39      	ldr	r1, [r7, #32]
 80062d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e5      	bne.n	80062b2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3760      	adds	r7, #96	; 0x60
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	08005fd1 	.word	0x08005fd1
 80062f4:	080060f7 	.word	0x080060f7
 80062f8:	0800612d 	.word	0x0800612d

080062fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b089      	sub	sp, #36	; 0x24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	60bb      	str	r3, [r7, #8]
   return(result);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	61ba      	str	r2, [r7, #24]
 8006326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6979      	ldr	r1, [r7, #20]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	613b      	str	r3, [r7, #16]
   return(result);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e5      	bne.n	8006304 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006340:	bf00      	nop
 8006342:	3724      	adds	r7, #36	; 0x24
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b095      	sub	sp, #84	; 0x54
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	330c      	adds	r3, #12
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800636a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	330c      	adds	r3, #12
 8006372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006374:	643a      	str	r2, [r7, #64]	; 0x40
 8006376:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800637a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e5      	bne.n	8006354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3314      	adds	r3, #20
 800638e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	61fb      	str	r3, [r7, #28]
   return(result);
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f023 0301 	bic.w	r3, r3, #1
 800639e:	64bb      	str	r3, [r7, #72]	; 0x48
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3314      	adds	r3, #20
 80063a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e5      	bne.n	8006388 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d119      	bne.n	80063f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	330c      	adds	r3, #12
 80063ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	e853 3f00 	ldrex	r3, [r3]
 80063d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f023 0310 	bic.w	r3, r3, #16
 80063da:	647b      	str	r3, [r7, #68]	; 0x44
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330c      	adds	r3, #12
 80063e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e4:	61ba      	str	r2, [r7, #24]
 80063e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	6979      	ldr	r1, [r7, #20]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	e841 2300 	strex	r3, r2, [r1]
 80063f0:	613b      	str	r3, [r7, #16]
   return(result);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e5      	bne.n	80063c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006406:	bf00      	nop
 8006408:	3754      	adds	r7, #84	; 0x54
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff fdb9 	bl	8005fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b21      	cmp	r3, #33	; 0x21
 800644c:	d13e      	bne.n	80064cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006456:	d114      	bne.n	8006482 <UART_Transmit_IT+0x48>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d110      	bne.n	8006482 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006474:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	1c9a      	adds	r2, r3, #2
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	621a      	str	r2, [r3, #32]
 8006480:	e008      	b.n	8006494 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	1c59      	adds	r1, r3, #1
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6211      	str	r1, [r2, #32]
 800648c:	781a      	ldrb	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29b      	uxth	r3, r3
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4619      	mov	r1, r3
 80064a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10f      	bne.n	80064c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	e000      	b.n	80064ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064cc:	2302      	movs	r3, #2
  }
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7ff fd3e 	bl	8005f7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b08c      	sub	sp, #48	; 0x30
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b22      	cmp	r3, #34	; 0x22
 800651c:	f040 80ab 	bne.w	8006676 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006528:	d117      	bne.n	800655a <UART_Receive_IT+0x50>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d113      	bne.n	800655a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	b29b      	uxth	r3, r3
 8006544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006548:	b29a      	uxth	r2, r3
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	1c9a      	adds	r2, r3, #2
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	629a      	str	r2, [r3, #40]	; 0x28
 8006558:	e026      	b.n	80065a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006560:	2300      	movs	r3, #0
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656c:	d007      	beq.n	800657e <UART_Receive_IT+0x74>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <UART_Receive_IT+0x82>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	b2da      	uxtb	r2, r3
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e008      	b.n	800659e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006598:	b2da      	uxtb	r2, r3
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	4619      	mov	r1, r3
 80065b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d15a      	bne.n	8006672 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0220 	bic.w	r2, r2, #32
 80065ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0201 	bic.w	r2, r2, #1
 80065ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d135      	bne.n	8006668 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	330c      	adds	r3, #12
 8006608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	613b      	str	r3, [r7, #16]
   return(result);
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f023 0310 	bic.w	r3, r3, #16
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006622:	623a      	str	r2, [r7, #32]
 8006624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	69f9      	ldr	r1, [r7, #28]
 8006628:	6a3a      	ldr	r2, [r7, #32]
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e5      	bne.n	8006602 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0310 	and.w	r3, r3, #16
 8006640:	2b10      	cmp	r3, #16
 8006642:	d10a      	bne.n	800665a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006644:	2300      	movs	r3, #0
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff fca9 	bl	8005fb8 <HAL_UARTEx_RxEventCallback>
 8006666:	e002      	b.n	800666e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7fa fca7 	bl	8000fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	e002      	b.n	8006678 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e000      	b.n	8006678 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006676:	2302      	movs	r3, #2
  }
}
 8006678:	4618      	mov	r0, r3
 800667a:	3730      	adds	r7, #48	; 0x30
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006684:	b0c0      	sub	sp, #256	; 0x100
 8006686:	af00      	add	r7, sp, #0
 8006688:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669c:	68d9      	ldr	r1, [r3, #12]
 800669e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	ea40 0301 	orr.w	r3, r0, r1
 80066a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	431a      	orrs	r2, r3
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066d8:	f021 010c 	bic.w	r1, r1, #12
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066e6:	430b      	orrs	r3, r1
 80066e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fa:	6999      	ldr	r1, [r3, #24]
 80066fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	ea40 0301 	orr.w	r3, r0, r1
 8006706:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	4b8f      	ldr	r3, [pc, #572]	; (800694c <UART_SetConfig+0x2cc>)
 8006710:	429a      	cmp	r2, r3
 8006712:	d005      	beq.n	8006720 <UART_SetConfig+0xa0>
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4b8d      	ldr	r3, [pc, #564]	; (8006950 <UART_SetConfig+0x2d0>)
 800671c:	429a      	cmp	r2, r3
 800671e:	d104      	bne.n	800672a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006720:	f7fe fa0e 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8006724:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006728:	e003      	b.n	8006732 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800672a:	f7fe f9f5 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 800672e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800673c:	f040 810c 	bne.w	8006958 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006744:	2200      	movs	r2, #0
 8006746:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800674a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800674e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006752:	4622      	mov	r2, r4
 8006754:	462b      	mov	r3, r5
 8006756:	1891      	adds	r1, r2, r2
 8006758:	65b9      	str	r1, [r7, #88]	; 0x58
 800675a:	415b      	adcs	r3, r3
 800675c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800675e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006762:	4621      	mov	r1, r4
 8006764:	eb12 0801 	adds.w	r8, r2, r1
 8006768:	4629      	mov	r1, r5
 800676a:	eb43 0901 	adc.w	r9, r3, r1
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800677a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800677e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006782:	4690      	mov	r8, r2
 8006784:	4699      	mov	r9, r3
 8006786:	4623      	mov	r3, r4
 8006788:	eb18 0303 	adds.w	r3, r8, r3
 800678c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006790:	462b      	mov	r3, r5
 8006792:	eb49 0303 	adc.w	r3, r9, r3
 8006796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067ae:	460b      	mov	r3, r1
 80067b0:	18db      	adds	r3, r3, r3
 80067b2:	653b      	str	r3, [r7, #80]	; 0x50
 80067b4:	4613      	mov	r3, r2
 80067b6:	eb42 0303 	adc.w	r3, r2, r3
 80067ba:	657b      	str	r3, [r7, #84]	; 0x54
 80067bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067c4:	f7fa fa78 	bl	8000cb8 <__aeabi_uldivmod>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4b61      	ldr	r3, [pc, #388]	; (8006954 <UART_SetConfig+0x2d4>)
 80067ce:	fba3 2302 	umull	r2, r3, r3, r2
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	011c      	lsls	r4, r3, #4
 80067d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067e8:	4642      	mov	r2, r8
 80067ea:	464b      	mov	r3, r9
 80067ec:	1891      	adds	r1, r2, r2
 80067ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80067f0:	415b      	adcs	r3, r3
 80067f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067f8:	4641      	mov	r1, r8
 80067fa:	eb12 0a01 	adds.w	sl, r2, r1
 80067fe:	4649      	mov	r1, r9
 8006800:	eb43 0b01 	adc.w	fp, r3, r1
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006810:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006818:	4692      	mov	sl, r2
 800681a:	469b      	mov	fp, r3
 800681c:	4643      	mov	r3, r8
 800681e:	eb1a 0303 	adds.w	r3, sl, r3
 8006822:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006826:	464b      	mov	r3, r9
 8006828:	eb4b 0303 	adc.w	r3, fp, r3
 800682c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800683c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006840:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006844:	460b      	mov	r3, r1
 8006846:	18db      	adds	r3, r3, r3
 8006848:	643b      	str	r3, [r7, #64]	; 0x40
 800684a:	4613      	mov	r3, r2
 800684c:	eb42 0303 	adc.w	r3, r2, r3
 8006850:	647b      	str	r3, [r7, #68]	; 0x44
 8006852:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006856:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800685a:	f7fa fa2d 	bl	8000cb8 <__aeabi_uldivmod>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4611      	mov	r1, r2
 8006864:	4b3b      	ldr	r3, [pc, #236]	; (8006954 <UART_SetConfig+0x2d4>)
 8006866:	fba3 2301 	umull	r2, r3, r3, r1
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	2264      	movs	r2, #100	; 0x64
 800686e:	fb02 f303 	mul.w	r3, r2, r3
 8006872:	1acb      	subs	r3, r1, r3
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800687a:	4b36      	ldr	r3, [pc, #216]	; (8006954 <UART_SetConfig+0x2d4>)
 800687c:	fba3 2302 	umull	r2, r3, r3, r2
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006888:	441c      	add	r4, r3
 800688a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800688e:	2200      	movs	r2, #0
 8006890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006894:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006898:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800689c:	4642      	mov	r2, r8
 800689e:	464b      	mov	r3, r9
 80068a0:	1891      	adds	r1, r2, r2
 80068a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80068a4:	415b      	adcs	r3, r3
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068ac:	4641      	mov	r1, r8
 80068ae:	1851      	adds	r1, r2, r1
 80068b0:	6339      	str	r1, [r7, #48]	; 0x30
 80068b2:	4649      	mov	r1, r9
 80068b4:	414b      	adcs	r3, r1
 80068b6:	637b      	str	r3, [r7, #52]	; 0x34
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068c4:	4659      	mov	r1, fp
 80068c6:	00cb      	lsls	r3, r1, #3
 80068c8:	4651      	mov	r1, sl
 80068ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ce:	4651      	mov	r1, sl
 80068d0:	00ca      	lsls	r2, r1, #3
 80068d2:	4610      	mov	r0, r2
 80068d4:	4619      	mov	r1, r3
 80068d6:	4603      	mov	r3, r0
 80068d8:	4642      	mov	r2, r8
 80068da:	189b      	adds	r3, r3, r2
 80068dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068e0:	464b      	mov	r3, r9
 80068e2:	460a      	mov	r2, r1
 80068e4:	eb42 0303 	adc.w	r3, r2, r3
 80068e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006900:	460b      	mov	r3, r1
 8006902:	18db      	adds	r3, r3, r3
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
 8006906:	4613      	mov	r3, r2
 8006908:	eb42 0303 	adc.w	r3, r2, r3
 800690c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800690e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006912:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006916:	f7fa f9cf 	bl	8000cb8 <__aeabi_uldivmod>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <UART_SetConfig+0x2d4>)
 8006920:	fba3 1302 	umull	r1, r3, r3, r2
 8006924:	095b      	lsrs	r3, r3, #5
 8006926:	2164      	movs	r1, #100	; 0x64
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	3332      	adds	r3, #50	; 0x32
 8006932:	4a08      	ldr	r2, [pc, #32]	; (8006954 <UART_SetConfig+0x2d4>)
 8006934:	fba2 2303 	umull	r2, r3, r2, r3
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	f003 0207 	and.w	r2, r3, #7
 800693e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4422      	add	r2, r4
 8006946:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006948:	e105      	b.n	8006b56 <UART_SetConfig+0x4d6>
 800694a:	bf00      	nop
 800694c:	40011000 	.word	0x40011000
 8006950:	40011400 	.word	0x40011400
 8006954:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800695c:	2200      	movs	r2, #0
 800695e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006962:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006966:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800696a:	4642      	mov	r2, r8
 800696c:	464b      	mov	r3, r9
 800696e:	1891      	adds	r1, r2, r2
 8006970:	6239      	str	r1, [r7, #32]
 8006972:	415b      	adcs	r3, r3
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
 8006976:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800697a:	4641      	mov	r1, r8
 800697c:	1854      	adds	r4, r2, r1
 800697e:	4649      	mov	r1, r9
 8006980:	eb43 0501 	adc.w	r5, r3, r1
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	00eb      	lsls	r3, r5, #3
 800698e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006992:	00e2      	lsls	r2, r4, #3
 8006994:	4614      	mov	r4, r2
 8006996:	461d      	mov	r5, r3
 8006998:	4643      	mov	r3, r8
 800699a:	18e3      	adds	r3, r4, r3
 800699c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069a0:	464b      	mov	r3, r9
 80069a2:	eb45 0303 	adc.w	r3, r5, r3
 80069a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069c6:	4629      	mov	r1, r5
 80069c8:	008b      	lsls	r3, r1, #2
 80069ca:	4621      	mov	r1, r4
 80069cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069d0:	4621      	mov	r1, r4
 80069d2:	008a      	lsls	r2, r1, #2
 80069d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069d8:	f7fa f96e 	bl	8000cb8 <__aeabi_uldivmod>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4b60      	ldr	r3, [pc, #384]	; (8006b64 <UART_SetConfig+0x4e4>)
 80069e2:	fba3 2302 	umull	r2, r3, r3, r2
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	011c      	lsls	r4, r3, #4
 80069ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069fc:	4642      	mov	r2, r8
 80069fe:	464b      	mov	r3, r9
 8006a00:	1891      	adds	r1, r2, r2
 8006a02:	61b9      	str	r1, [r7, #24]
 8006a04:	415b      	adcs	r3, r3
 8006a06:	61fb      	str	r3, [r7, #28]
 8006a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	1851      	adds	r1, r2, r1
 8006a10:	6139      	str	r1, [r7, #16]
 8006a12:	4649      	mov	r1, r9
 8006a14:	414b      	adcs	r3, r1
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a24:	4659      	mov	r1, fp
 8006a26:	00cb      	lsls	r3, r1, #3
 8006a28:	4651      	mov	r1, sl
 8006a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a2e:	4651      	mov	r1, sl
 8006a30:	00ca      	lsls	r2, r1, #3
 8006a32:	4610      	mov	r0, r2
 8006a34:	4619      	mov	r1, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	4642      	mov	r2, r8
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a40:	464b      	mov	r3, r9
 8006a42:	460a      	mov	r2, r1
 8006a44:	eb42 0303 	adc.w	r3, r2, r3
 8006a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	f04f 0300 	mov.w	r3, #0
 8006a60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a64:	4649      	mov	r1, r9
 8006a66:	008b      	lsls	r3, r1, #2
 8006a68:	4641      	mov	r1, r8
 8006a6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a6e:	4641      	mov	r1, r8
 8006a70:	008a      	lsls	r2, r1, #2
 8006a72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a76:	f7fa f91f 	bl	8000cb8 <__aeabi_uldivmod>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4b39      	ldr	r3, [pc, #228]	; (8006b64 <UART_SetConfig+0x4e4>)
 8006a80:	fba3 1302 	umull	r1, r3, r3, r2
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	2164      	movs	r1, #100	; 0x64
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	3332      	adds	r3, #50	; 0x32
 8006a92:	4a34      	ldr	r2, [pc, #208]	; (8006b64 <UART_SetConfig+0x4e4>)
 8006a94:	fba2 2303 	umull	r2, r3, r2, r3
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a9e:	441c      	add	r4, r3
 8006aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8006aa8:	677a      	str	r2, [r7, #116]	; 0x74
 8006aaa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006aae:	4642      	mov	r2, r8
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	1891      	adds	r1, r2, r2
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	415b      	adcs	r3, r3
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006abe:	4641      	mov	r1, r8
 8006ac0:	1851      	adds	r1, r2, r1
 8006ac2:	6039      	str	r1, [r7, #0]
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	414b      	adcs	r3, r1
 8006ac8:	607b      	str	r3, [r7, #4]
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ad6:	4659      	mov	r1, fp
 8006ad8:	00cb      	lsls	r3, r1, #3
 8006ada:	4651      	mov	r1, sl
 8006adc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ae0:	4651      	mov	r1, sl
 8006ae2:	00ca      	lsls	r2, r1, #3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4603      	mov	r3, r0
 8006aea:	4642      	mov	r2, r8
 8006aec:	189b      	adds	r3, r3, r2
 8006aee:	66bb      	str	r3, [r7, #104]	; 0x68
 8006af0:	464b      	mov	r3, r9
 8006af2:	460a      	mov	r2, r1
 8006af4:	eb42 0303 	adc.w	r3, r2, r3
 8006af8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	663b      	str	r3, [r7, #96]	; 0x60
 8006b04:	667a      	str	r2, [r7, #100]	; 0x64
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	f04f 0300 	mov.w	r3, #0
 8006b0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b12:	4649      	mov	r1, r9
 8006b14:	008b      	lsls	r3, r1, #2
 8006b16:	4641      	mov	r1, r8
 8006b18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	008a      	lsls	r2, r1, #2
 8006b20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b24:	f7fa f8c8 	bl	8000cb8 <__aeabi_uldivmod>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4b0d      	ldr	r3, [pc, #52]	; (8006b64 <UART_SetConfig+0x4e4>)
 8006b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	2164      	movs	r1, #100	; 0x64
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	3332      	adds	r3, #50	; 0x32
 8006b40:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <UART_SetConfig+0x4e4>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	f003 020f 	and.w	r2, r3, #15
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4422      	add	r2, r4
 8006b54:	609a      	str	r2, [r3, #8]
}
 8006b56:	bf00      	nop
 8006b58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b62:	bf00      	nop
 8006b64:	51eb851f 	.word	0x51eb851f

08006b68 <atoi>:
 8006b68:	220a      	movs	r2, #10
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	f000 bd70 	b.w	8007650 <strtol>

08006b70 <__errno>:
 8006b70:	4b01      	ldr	r3, [pc, #4]	; (8006b78 <__errno+0x8>)
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	20000010 	.word	0x20000010

08006b7c <__libc_init_array>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	4d0d      	ldr	r5, [pc, #52]	; (8006bb4 <__libc_init_array+0x38>)
 8006b80:	4c0d      	ldr	r4, [pc, #52]	; (8006bb8 <__libc_init_array+0x3c>)
 8006b82:	1b64      	subs	r4, r4, r5
 8006b84:	10a4      	asrs	r4, r4, #2
 8006b86:	2600      	movs	r6, #0
 8006b88:	42a6      	cmp	r6, r4
 8006b8a:	d109      	bne.n	8006ba0 <__libc_init_array+0x24>
 8006b8c:	4d0b      	ldr	r5, [pc, #44]	; (8006bbc <__libc_init_array+0x40>)
 8006b8e:	4c0c      	ldr	r4, [pc, #48]	; (8006bc0 <__libc_init_array+0x44>)
 8006b90:	f002 ff86 	bl	8009aa0 <_init>
 8006b94:	1b64      	subs	r4, r4, r5
 8006b96:	10a4      	asrs	r4, r4, #2
 8006b98:	2600      	movs	r6, #0
 8006b9a:	42a6      	cmp	r6, r4
 8006b9c:	d105      	bne.n	8006baa <__libc_init_array+0x2e>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba4:	4798      	blx	r3
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	e7ee      	b.n	8006b88 <__libc_init_array+0xc>
 8006baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bae:	4798      	blx	r3
 8006bb0:	3601      	adds	r6, #1
 8006bb2:	e7f2      	b.n	8006b9a <__libc_init_array+0x1e>
 8006bb4:	08009eec 	.word	0x08009eec
 8006bb8:	08009eec 	.word	0x08009eec
 8006bbc:	08009eec 	.word	0x08009eec
 8006bc0:	08009ef0 	.word	0x08009ef0

08006bc4 <memcpy>:
 8006bc4:	440a      	add	r2, r1
 8006bc6:	4291      	cmp	r1, r2
 8006bc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006bcc:	d100      	bne.n	8006bd0 <memcpy+0xc>
 8006bce:	4770      	bx	lr
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bda:	4291      	cmp	r1, r2
 8006bdc:	d1f9      	bne.n	8006bd2 <memcpy+0xe>
 8006bde:	bd10      	pop	{r4, pc}

08006be0 <memset>:
 8006be0:	4402      	add	r2, r0
 8006be2:	4603      	mov	r3, r0
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d100      	bne.n	8006bea <memset+0xa>
 8006be8:	4770      	bx	lr
 8006bea:	f803 1b01 	strb.w	r1, [r3], #1
 8006bee:	e7f9      	b.n	8006be4 <memset+0x4>

08006bf0 <__cvt>:
 8006bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	ec55 4b10 	vmov	r4, r5, d0
 8006bf8:	2d00      	cmp	r5, #0
 8006bfa:	460e      	mov	r6, r1
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	462b      	mov	r3, r5
 8006c00:	bfbb      	ittet	lt
 8006c02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c06:	461d      	movlt	r5, r3
 8006c08:	2300      	movge	r3, #0
 8006c0a:	232d      	movlt	r3, #45	; 0x2d
 8006c0c:	700b      	strb	r3, [r1, #0]
 8006c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c14:	4691      	mov	r9, r2
 8006c16:	f023 0820 	bic.w	r8, r3, #32
 8006c1a:	bfbc      	itt	lt
 8006c1c:	4622      	movlt	r2, r4
 8006c1e:	4614      	movlt	r4, r2
 8006c20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c24:	d005      	beq.n	8006c32 <__cvt+0x42>
 8006c26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c2a:	d100      	bne.n	8006c2e <__cvt+0x3e>
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	2102      	movs	r1, #2
 8006c30:	e000      	b.n	8006c34 <__cvt+0x44>
 8006c32:	2103      	movs	r1, #3
 8006c34:	ab03      	add	r3, sp, #12
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	ab02      	add	r3, sp, #8
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	ec45 4b10 	vmov	d0, r4, r5
 8006c40:	4653      	mov	r3, sl
 8006c42:	4632      	mov	r2, r6
 8006c44:	f000 fe3c 	bl	80078c0 <_dtoa_r>
 8006c48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c4c:	4607      	mov	r7, r0
 8006c4e:	d102      	bne.n	8006c56 <__cvt+0x66>
 8006c50:	f019 0f01 	tst.w	r9, #1
 8006c54:	d022      	beq.n	8006c9c <__cvt+0xac>
 8006c56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c5a:	eb07 0906 	add.w	r9, r7, r6
 8006c5e:	d110      	bne.n	8006c82 <__cvt+0x92>
 8006c60:	783b      	ldrb	r3, [r7, #0]
 8006c62:	2b30      	cmp	r3, #48	; 0x30
 8006c64:	d10a      	bne.n	8006c7c <__cvt+0x8c>
 8006c66:	2200      	movs	r2, #0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	f7f9 ff43 	bl	8000af8 <__aeabi_dcmpeq>
 8006c72:	b918      	cbnz	r0, 8006c7c <__cvt+0x8c>
 8006c74:	f1c6 0601 	rsb	r6, r6, #1
 8006c78:	f8ca 6000 	str.w	r6, [sl]
 8006c7c:	f8da 3000 	ldr.w	r3, [sl]
 8006c80:	4499      	add	r9, r3
 8006c82:	2200      	movs	r2, #0
 8006c84:	2300      	movs	r3, #0
 8006c86:	4620      	mov	r0, r4
 8006c88:	4629      	mov	r1, r5
 8006c8a:	f7f9 ff35 	bl	8000af8 <__aeabi_dcmpeq>
 8006c8e:	b108      	cbz	r0, 8006c94 <__cvt+0xa4>
 8006c90:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c94:	2230      	movs	r2, #48	; 0x30
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	454b      	cmp	r3, r9
 8006c9a:	d307      	bcc.n	8006cac <__cvt+0xbc>
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ca0:	1bdb      	subs	r3, r3, r7
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	b004      	add	sp, #16
 8006ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cac:	1c59      	adds	r1, r3, #1
 8006cae:	9103      	str	r1, [sp, #12]
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	e7f0      	b.n	8006c96 <__cvt+0xa6>

08006cb4 <__exponent>:
 8006cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	bfb8      	it	lt
 8006cbc:	4249      	neglt	r1, r1
 8006cbe:	f803 2b02 	strb.w	r2, [r3], #2
 8006cc2:	bfb4      	ite	lt
 8006cc4:	222d      	movlt	r2, #45	; 0x2d
 8006cc6:	222b      	movge	r2, #43	; 0x2b
 8006cc8:	2909      	cmp	r1, #9
 8006cca:	7042      	strb	r2, [r0, #1]
 8006ccc:	dd2a      	ble.n	8006d24 <__exponent+0x70>
 8006cce:	f10d 0407 	add.w	r4, sp, #7
 8006cd2:	46a4      	mov	ip, r4
 8006cd4:	270a      	movs	r7, #10
 8006cd6:	46a6      	mov	lr, r4
 8006cd8:	460a      	mov	r2, r1
 8006cda:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cde:	fb07 1516 	mls	r5, r7, r6, r1
 8006ce2:	3530      	adds	r5, #48	; 0x30
 8006ce4:	2a63      	cmp	r2, #99	; 0x63
 8006ce6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006cea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006cee:	4631      	mov	r1, r6
 8006cf0:	dcf1      	bgt.n	8006cd6 <__exponent+0x22>
 8006cf2:	3130      	adds	r1, #48	; 0x30
 8006cf4:	f1ae 0502 	sub.w	r5, lr, #2
 8006cf8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cfc:	1c44      	adds	r4, r0, #1
 8006cfe:	4629      	mov	r1, r5
 8006d00:	4561      	cmp	r1, ip
 8006d02:	d30a      	bcc.n	8006d1a <__exponent+0x66>
 8006d04:	f10d 0209 	add.w	r2, sp, #9
 8006d08:	eba2 020e 	sub.w	r2, r2, lr
 8006d0c:	4565      	cmp	r5, ip
 8006d0e:	bf88      	it	hi
 8006d10:	2200      	movhi	r2, #0
 8006d12:	4413      	add	r3, r2
 8006d14:	1a18      	subs	r0, r3, r0
 8006d16:	b003      	add	sp, #12
 8006d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d22:	e7ed      	b.n	8006d00 <__exponent+0x4c>
 8006d24:	2330      	movs	r3, #48	; 0x30
 8006d26:	3130      	adds	r1, #48	; 0x30
 8006d28:	7083      	strb	r3, [r0, #2]
 8006d2a:	70c1      	strb	r1, [r0, #3]
 8006d2c:	1d03      	adds	r3, r0, #4
 8006d2e:	e7f1      	b.n	8006d14 <__exponent+0x60>

08006d30 <_printf_float>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	ed2d 8b02 	vpush	{d8}
 8006d38:	b08d      	sub	sp, #52	; 0x34
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d40:	4616      	mov	r6, r2
 8006d42:	461f      	mov	r7, r3
 8006d44:	4605      	mov	r5, r0
 8006d46:	f001 fc9f 	bl	8008688 <_localeconv_r>
 8006d4a:	f8d0 a000 	ldr.w	sl, [r0]
 8006d4e:	4650      	mov	r0, sl
 8006d50:	f7f9 fa50 	bl	80001f4 <strlen>
 8006d54:	2300      	movs	r3, #0
 8006d56:	930a      	str	r3, [sp, #40]	; 0x28
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	9305      	str	r3, [sp, #20]
 8006d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d64:	3307      	adds	r3, #7
 8006d66:	f023 0307 	bic.w	r3, r3, #7
 8006d6a:	f103 0208 	add.w	r2, r3, #8
 8006d6e:	f8c8 2000 	str.w	r2, [r8]
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d82:	9307      	str	r3, [sp, #28]
 8006d84:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d88:	ee08 0a10 	vmov	s16, r0
 8006d8c:	4b9f      	ldr	r3, [pc, #636]	; (800700c <_printf_float+0x2dc>)
 8006d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d96:	f7f9 fee1 	bl	8000b5c <__aeabi_dcmpun>
 8006d9a:	bb88      	cbnz	r0, 8006e00 <_printf_float+0xd0>
 8006d9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006da0:	4b9a      	ldr	r3, [pc, #616]	; (800700c <_printf_float+0x2dc>)
 8006da2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006da6:	f7f9 febb 	bl	8000b20 <__aeabi_dcmple>
 8006daa:	bb48      	cbnz	r0, 8006e00 <_printf_float+0xd0>
 8006dac:	2200      	movs	r2, #0
 8006dae:	2300      	movs	r3, #0
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	f7f9 feaa 	bl	8000b0c <__aeabi_dcmplt>
 8006db8:	b110      	cbz	r0, 8006dc0 <_printf_float+0x90>
 8006dba:	232d      	movs	r3, #45	; 0x2d
 8006dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc0:	4b93      	ldr	r3, [pc, #588]	; (8007010 <_printf_float+0x2e0>)
 8006dc2:	4894      	ldr	r0, [pc, #592]	; (8007014 <_printf_float+0x2e4>)
 8006dc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006dc8:	bf94      	ite	ls
 8006dca:	4698      	movls	r8, r3
 8006dcc:	4680      	movhi	r8, r0
 8006dce:	2303      	movs	r3, #3
 8006dd0:	6123      	str	r3, [r4, #16]
 8006dd2:	9b05      	ldr	r3, [sp, #20]
 8006dd4:	f023 0204 	bic.w	r2, r3, #4
 8006dd8:	6022      	str	r2, [r4, #0]
 8006dda:	f04f 0900 	mov.w	r9, #0
 8006dde:	9700      	str	r7, [sp, #0]
 8006de0:	4633      	mov	r3, r6
 8006de2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006de4:	4621      	mov	r1, r4
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 f9d8 	bl	800719c <_printf_common>
 8006dec:	3001      	adds	r0, #1
 8006dee:	f040 8090 	bne.w	8006f12 <_printf_float+0x1e2>
 8006df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006df6:	b00d      	add	sp, #52	; 0x34
 8006df8:	ecbd 8b02 	vpop	{d8}
 8006dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	4640      	mov	r0, r8
 8006e06:	4649      	mov	r1, r9
 8006e08:	f7f9 fea8 	bl	8000b5c <__aeabi_dcmpun>
 8006e0c:	b140      	cbz	r0, 8006e20 <_printf_float+0xf0>
 8006e0e:	464b      	mov	r3, r9
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	bfbc      	itt	lt
 8006e14:	232d      	movlt	r3, #45	; 0x2d
 8006e16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e1a:	487f      	ldr	r0, [pc, #508]	; (8007018 <_printf_float+0x2e8>)
 8006e1c:	4b7f      	ldr	r3, [pc, #508]	; (800701c <_printf_float+0x2ec>)
 8006e1e:	e7d1      	b.n	8006dc4 <_printf_float+0x94>
 8006e20:	6863      	ldr	r3, [r4, #4]
 8006e22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e26:	9206      	str	r2, [sp, #24]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	d13f      	bne.n	8006eac <_printf_float+0x17c>
 8006e2c:	2306      	movs	r3, #6
 8006e2e:	6063      	str	r3, [r4, #4]
 8006e30:	9b05      	ldr	r3, [sp, #20]
 8006e32:	6861      	ldr	r1, [r4, #4]
 8006e34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9303      	str	r3, [sp, #12]
 8006e3c:	ab0a      	add	r3, sp, #40	; 0x28
 8006e3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e42:	ab09      	add	r3, sp, #36	; 0x24
 8006e44:	ec49 8b10 	vmov	d0, r8, r9
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	6022      	str	r2, [r4, #0]
 8006e4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e50:	4628      	mov	r0, r5
 8006e52:	f7ff fecd 	bl	8006bf0 <__cvt>
 8006e56:	9b06      	ldr	r3, [sp, #24]
 8006e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e5a:	2b47      	cmp	r3, #71	; 0x47
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	d108      	bne.n	8006e72 <_printf_float+0x142>
 8006e60:	1cc8      	adds	r0, r1, #3
 8006e62:	db02      	blt.n	8006e6a <_printf_float+0x13a>
 8006e64:	6863      	ldr	r3, [r4, #4]
 8006e66:	4299      	cmp	r1, r3
 8006e68:	dd41      	ble.n	8006eee <_printf_float+0x1be>
 8006e6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e6e:	fa5f fb8b 	uxtb.w	fp, fp
 8006e72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e76:	d820      	bhi.n	8006eba <_printf_float+0x18a>
 8006e78:	3901      	subs	r1, #1
 8006e7a:	465a      	mov	r2, fp
 8006e7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e80:	9109      	str	r1, [sp, #36]	; 0x24
 8006e82:	f7ff ff17 	bl	8006cb4 <__exponent>
 8006e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e88:	1813      	adds	r3, r2, r0
 8006e8a:	2a01      	cmp	r2, #1
 8006e8c:	4681      	mov	r9, r0
 8006e8e:	6123      	str	r3, [r4, #16]
 8006e90:	dc02      	bgt.n	8006e98 <_printf_float+0x168>
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	07d2      	lsls	r2, r2, #31
 8006e96:	d501      	bpl.n	8006e9c <_printf_float+0x16c>
 8006e98:	3301      	adds	r3, #1
 8006e9a:	6123      	str	r3, [r4, #16]
 8006e9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d09c      	beq.n	8006dde <_printf_float+0xae>
 8006ea4:	232d      	movs	r3, #45	; 0x2d
 8006ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eaa:	e798      	b.n	8006dde <_printf_float+0xae>
 8006eac:	9a06      	ldr	r2, [sp, #24]
 8006eae:	2a47      	cmp	r2, #71	; 0x47
 8006eb0:	d1be      	bne.n	8006e30 <_printf_float+0x100>
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1bc      	bne.n	8006e30 <_printf_float+0x100>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e7b9      	b.n	8006e2e <_printf_float+0xfe>
 8006eba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ebe:	d118      	bne.n	8006ef2 <_printf_float+0x1c2>
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	6863      	ldr	r3, [r4, #4]
 8006ec4:	dd0b      	ble.n	8006ede <_printf_float+0x1ae>
 8006ec6:	6121      	str	r1, [r4, #16]
 8006ec8:	b913      	cbnz	r3, 8006ed0 <_printf_float+0x1a0>
 8006eca:	6822      	ldr	r2, [r4, #0]
 8006ecc:	07d0      	lsls	r0, r2, #31
 8006ece:	d502      	bpl.n	8006ed6 <_printf_float+0x1a6>
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	440b      	add	r3, r1
 8006ed4:	6123      	str	r3, [r4, #16]
 8006ed6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ed8:	f04f 0900 	mov.w	r9, #0
 8006edc:	e7de      	b.n	8006e9c <_printf_float+0x16c>
 8006ede:	b913      	cbnz	r3, 8006ee6 <_printf_float+0x1b6>
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	07d2      	lsls	r2, r2, #31
 8006ee4:	d501      	bpl.n	8006eea <_printf_float+0x1ba>
 8006ee6:	3302      	adds	r3, #2
 8006ee8:	e7f4      	b.n	8006ed4 <_printf_float+0x1a4>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e7f2      	b.n	8006ed4 <_printf_float+0x1a4>
 8006eee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef4:	4299      	cmp	r1, r3
 8006ef6:	db05      	blt.n	8006f04 <_printf_float+0x1d4>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	6121      	str	r1, [r4, #16]
 8006efc:	07d8      	lsls	r0, r3, #31
 8006efe:	d5ea      	bpl.n	8006ed6 <_printf_float+0x1a6>
 8006f00:	1c4b      	adds	r3, r1, #1
 8006f02:	e7e7      	b.n	8006ed4 <_printf_float+0x1a4>
 8006f04:	2900      	cmp	r1, #0
 8006f06:	bfd4      	ite	le
 8006f08:	f1c1 0202 	rsble	r2, r1, #2
 8006f0c:	2201      	movgt	r2, #1
 8006f0e:	4413      	add	r3, r2
 8006f10:	e7e0      	b.n	8006ed4 <_printf_float+0x1a4>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	055a      	lsls	r2, r3, #21
 8006f16:	d407      	bmi.n	8006f28 <_printf_float+0x1f8>
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	4642      	mov	r2, r8
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b8      	blx	r7
 8006f22:	3001      	adds	r0, #1
 8006f24:	d12c      	bne.n	8006f80 <_printf_float+0x250>
 8006f26:	e764      	b.n	8006df2 <_printf_float+0xc2>
 8006f28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f2c:	f240 80e0 	bls.w	80070f0 <_printf_float+0x3c0>
 8006f30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f34:	2200      	movs	r2, #0
 8006f36:	2300      	movs	r3, #0
 8006f38:	f7f9 fdde 	bl	8000af8 <__aeabi_dcmpeq>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d034      	beq.n	8006faa <_printf_float+0x27a>
 8006f40:	4a37      	ldr	r2, [pc, #220]	; (8007020 <_printf_float+0x2f0>)
 8006f42:	2301      	movs	r3, #1
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f af51 	beq.w	8006df2 <_printf_float+0xc2>
 8006f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f54:	429a      	cmp	r2, r3
 8006f56:	db02      	blt.n	8006f5e <_printf_float+0x22e>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	07d8      	lsls	r0, r3, #31
 8006f5c:	d510      	bpl.n	8006f80 <_printf_float+0x250>
 8006f5e:	ee18 3a10 	vmov	r3, s16
 8006f62:	4652      	mov	r2, sl
 8006f64:	4631      	mov	r1, r6
 8006f66:	4628      	mov	r0, r5
 8006f68:	47b8      	blx	r7
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f43f af41 	beq.w	8006df2 <_printf_float+0xc2>
 8006f70:	f04f 0800 	mov.w	r8, #0
 8006f74:	f104 091a 	add.w	r9, r4, #26
 8006f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	4543      	cmp	r3, r8
 8006f7e:	dc09      	bgt.n	8006f94 <_printf_float+0x264>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	079b      	lsls	r3, r3, #30
 8006f84:	f100 8105 	bmi.w	8007192 <_printf_float+0x462>
 8006f88:	68e0      	ldr	r0, [r4, #12]
 8006f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8c:	4298      	cmp	r0, r3
 8006f8e:	bfb8      	it	lt
 8006f90:	4618      	movlt	r0, r3
 8006f92:	e730      	b.n	8006df6 <_printf_float+0xc6>
 8006f94:	2301      	movs	r3, #1
 8006f96:	464a      	mov	r2, r9
 8006f98:	4631      	mov	r1, r6
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	47b8      	blx	r7
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	f43f af27 	beq.w	8006df2 <_printf_float+0xc2>
 8006fa4:	f108 0801 	add.w	r8, r8, #1
 8006fa8:	e7e6      	b.n	8006f78 <_printf_float+0x248>
 8006faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dc39      	bgt.n	8007024 <_printf_float+0x2f4>
 8006fb0:	4a1b      	ldr	r2, [pc, #108]	; (8007020 <_printf_float+0x2f0>)
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b8      	blx	r7
 8006fba:	3001      	adds	r0, #1
 8006fbc:	f43f af19 	beq.w	8006df2 <_printf_float+0xc2>
 8006fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	d102      	bne.n	8006fce <_printf_float+0x29e>
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	07d9      	lsls	r1, r3, #31
 8006fcc:	d5d8      	bpl.n	8006f80 <_printf_float+0x250>
 8006fce:	ee18 3a10 	vmov	r3, s16
 8006fd2:	4652      	mov	r2, sl
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b8      	blx	r7
 8006fda:	3001      	adds	r0, #1
 8006fdc:	f43f af09 	beq.w	8006df2 <_printf_float+0xc2>
 8006fe0:	f04f 0900 	mov.w	r9, #0
 8006fe4:	f104 0a1a 	add.w	sl, r4, #26
 8006fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fea:	425b      	negs	r3, r3
 8006fec:	454b      	cmp	r3, r9
 8006fee:	dc01      	bgt.n	8006ff4 <_printf_float+0x2c4>
 8006ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff2:	e792      	b.n	8006f1a <_printf_float+0x1ea>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	4652      	mov	r2, sl
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	47b8      	blx	r7
 8006ffe:	3001      	adds	r0, #1
 8007000:	f43f aef7 	beq.w	8006df2 <_printf_float+0xc2>
 8007004:	f109 0901 	add.w	r9, r9, #1
 8007008:	e7ee      	b.n	8006fe8 <_printf_float+0x2b8>
 800700a:	bf00      	nop
 800700c:	7fefffff 	.word	0x7fefffff
 8007010:	08009b0c 	.word	0x08009b0c
 8007014:	08009b10 	.word	0x08009b10
 8007018:	08009b18 	.word	0x08009b18
 800701c:	08009b14 	.word	0x08009b14
 8007020:	08009b1c 	.word	0x08009b1c
 8007024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007026:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007028:	429a      	cmp	r2, r3
 800702a:	bfa8      	it	ge
 800702c:	461a      	movge	r2, r3
 800702e:	2a00      	cmp	r2, #0
 8007030:	4691      	mov	r9, r2
 8007032:	dc37      	bgt.n	80070a4 <_printf_float+0x374>
 8007034:	f04f 0b00 	mov.w	fp, #0
 8007038:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800703c:	f104 021a 	add.w	r2, r4, #26
 8007040:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007042:	9305      	str	r3, [sp, #20]
 8007044:	eba3 0309 	sub.w	r3, r3, r9
 8007048:	455b      	cmp	r3, fp
 800704a:	dc33      	bgt.n	80070b4 <_printf_float+0x384>
 800704c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007050:	429a      	cmp	r2, r3
 8007052:	db3b      	blt.n	80070cc <_printf_float+0x39c>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	07da      	lsls	r2, r3, #31
 8007058:	d438      	bmi.n	80070cc <_printf_float+0x39c>
 800705a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800705c:	9a05      	ldr	r2, [sp, #20]
 800705e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007060:	1a9a      	subs	r2, r3, r2
 8007062:	eba3 0901 	sub.w	r9, r3, r1
 8007066:	4591      	cmp	r9, r2
 8007068:	bfa8      	it	ge
 800706a:	4691      	movge	r9, r2
 800706c:	f1b9 0f00 	cmp.w	r9, #0
 8007070:	dc35      	bgt.n	80070de <_printf_float+0x3ae>
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800707a:	f104 0a1a 	add.w	sl, r4, #26
 800707e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007082:	1a9b      	subs	r3, r3, r2
 8007084:	eba3 0309 	sub.w	r3, r3, r9
 8007088:	4543      	cmp	r3, r8
 800708a:	f77f af79 	ble.w	8006f80 <_printf_float+0x250>
 800708e:	2301      	movs	r3, #1
 8007090:	4652      	mov	r2, sl
 8007092:	4631      	mov	r1, r6
 8007094:	4628      	mov	r0, r5
 8007096:	47b8      	blx	r7
 8007098:	3001      	adds	r0, #1
 800709a:	f43f aeaa 	beq.w	8006df2 <_printf_float+0xc2>
 800709e:	f108 0801 	add.w	r8, r8, #1
 80070a2:	e7ec      	b.n	800707e <_printf_float+0x34e>
 80070a4:	4613      	mov	r3, r2
 80070a6:	4631      	mov	r1, r6
 80070a8:	4642      	mov	r2, r8
 80070aa:	4628      	mov	r0, r5
 80070ac:	47b8      	blx	r7
 80070ae:	3001      	adds	r0, #1
 80070b0:	d1c0      	bne.n	8007034 <_printf_float+0x304>
 80070b2:	e69e      	b.n	8006df2 <_printf_float+0xc2>
 80070b4:	2301      	movs	r3, #1
 80070b6:	4631      	mov	r1, r6
 80070b8:	4628      	mov	r0, r5
 80070ba:	9205      	str	r2, [sp, #20]
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	f43f ae97 	beq.w	8006df2 <_printf_float+0xc2>
 80070c4:	9a05      	ldr	r2, [sp, #20]
 80070c6:	f10b 0b01 	add.w	fp, fp, #1
 80070ca:	e7b9      	b.n	8007040 <_printf_float+0x310>
 80070cc:	ee18 3a10 	vmov	r3, s16
 80070d0:	4652      	mov	r2, sl
 80070d2:	4631      	mov	r1, r6
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	d1be      	bne.n	800705a <_printf_float+0x32a>
 80070dc:	e689      	b.n	8006df2 <_printf_float+0xc2>
 80070de:	9a05      	ldr	r2, [sp, #20]
 80070e0:	464b      	mov	r3, r9
 80070e2:	4442      	add	r2, r8
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	d1c1      	bne.n	8007072 <_printf_float+0x342>
 80070ee:	e680      	b.n	8006df2 <_printf_float+0xc2>
 80070f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070f2:	2a01      	cmp	r2, #1
 80070f4:	dc01      	bgt.n	80070fa <_printf_float+0x3ca>
 80070f6:	07db      	lsls	r3, r3, #31
 80070f8:	d538      	bpl.n	800716c <_printf_float+0x43c>
 80070fa:	2301      	movs	r3, #1
 80070fc:	4642      	mov	r2, r8
 80070fe:	4631      	mov	r1, r6
 8007100:	4628      	mov	r0, r5
 8007102:	47b8      	blx	r7
 8007104:	3001      	adds	r0, #1
 8007106:	f43f ae74 	beq.w	8006df2 <_printf_float+0xc2>
 800710a:	ee18 3a10 	vmov	r3, s16
 800710e:	4652      	mov	r2, sl
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f ae6b 	beq.w	8006df2 <_printf_float+0xc2>
 800711c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	f7f9 fce8 	bl	8000af8 <__aeabi_dcmpeq>
 8007128:	b9d8      	cbnz	r0, 8007162 <_printf_float+0x432>
 800712a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712c:	f108 0201 	add.w	r2, r8, #1
 8007130:	3b01      	subs	r3, #1
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	d10e      	bne.n	800715a <_printf_float+0x42a>
 800713c:	e659      	b.n	8006df2 <_printf_float+0xc2>
 800713e:	2301      	movs	r3, #1
 8007140:	4652      	mov	r2, sl
 8007142:	4631      	mov	r1, r6
 8007144:	4628      	mov	r0, r5
 8007146:	47b8      	blx	r7
 8007148:	3001      	adds	r0, #1
 800714a:	f43f ae52 	beq.w	8006df2 <_printf_float+0xc2>
 800714e:	f108 0801 	add.w	r8, r8, #1
 8007152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007154:	3b01      	subs	r3, #1
 8007156:	4543      	cmp	r3, r8
 8007158:	dcf1      	bgt.n	800713e <_printf_float+0x40e>
 800715a:	464b      	mov	r3, r9
 800715c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007160:	e6dc      	b.n	8006f1c <_printf_float+0x1ec>
 8007162:	f04f 0800 	mov.w	r8, #0
 8007166:	f104 0a1a 	add.w	sl, r4, #26
 800716a:	e7f2      	b.n	8007152 <_printf_float+0x422>
 800716c:	2301      	movs	r3, #1
 800716e:	4642      	mov	r2, r8
 8007170:	e7df      	b.n	8007132 <_printf_float+0x402>
 8007172:	2301      	movs	r3, #1
 8007174:	464a      	mov	r2, r9
 8007176:	4631      	mov	r1, r6
 8007178:	4628      	mov	r0, r5
 800717a:	47b8      	blx	r7
 800717c:	3001      	adds	r0, #1
 800717e:	f43f ae38 	beq.w	8006df2 <_printf_float+0xc2>
 8007182:	f108 0801 	add.w	r8, r8, #1
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800718a:	1a5b      	subs	r3, r3, r1
 800718c:	4543      	cmp	r3, r8
 800718e:	dcf0      	bgt.n	8007172 <_printf_float+0x442>
 8007190:	e6fa      	b.n	8006f88 <_printf_float+0x258>
 8007192:	f04f 0800 	mov.w	r8, #0
 8007196:	f104 0919 	add.w	r9, r4, #25
 800719a:	e7f4      	b.n	8007186 <_printf_float+0x456>

0800719c <_printf_common>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	4616      	mov	r6, r2
 80071a2:	4699      	mov	r9, r3
 80071a4:	688a      	ldr	r2, [r1, #8]
 80071a6:	690b      	ldr	r3, [r1, #16]
 80071a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071ac:	4293      	cmp	r3, r2
 80071ae:	bfb8      	it	lt
 80071b0:	4613      	movlt	r3, r2
 80071b2:	6033      	str	r3, [r6, #0]
 80071b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071b8:	4607      	mov	r7, r0
 80071ba:	460c      	mov	r4, r1
 80071bc:	b10a      	cbz	r2, 80071c2 <_printf_common+0x26>
 80071be:	3301      	adds	r3, #1
 80071c0:	6033      	str	r3, [r6, #0]
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	0699      	lsls	r1, r3, #26
 80071c6:	bf42      	ittt	mi
 80071c8:	6833      	ldrmi	r3, [r6, #0]
 80071ca:	3302      	addmi	r3, #2
 80071cc:	6033      	strmi	r3, [r6, #0]
 80071ce:	6825      	ldr	r5, [r4, #0]
 80071d0:	f015 0506 	ands.w	r5, r5, #6
 80071d4:	d106      	bne.n	80071e4 <_printf_common+0x48>
 80071d6:	f104 0a19 	add.w	sl, r4, #25
 80071da:	68e3      	ldr	r3, [r4, #12]
 80071dc:	6832      	ldr	r2, [r6, #0]
 80071de:	1a9b      	subs	r3, r3, r2
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	dc26      	bgt.n	8007232 <_printf_common+0x96>
 80071e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071e8:	1e13      	subs	r3, r2, #0
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	bf18      	it	ne
 80071ee:	2301      	movne	r3, #1
 80071f0:	0692      	lsls	r2, r2, #26
 80071f2:	d42b      	bmi.n	800724c <_printf_common+0xb0>
 80071f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071f8:	4649      	mov	r1, r9
 80071fa:	4638      	mov	r0, r7
 80071fc:	47c0      	blx	r8
 80071fe:	3001      	adds	r0, #1
 8007200:	d01e      	beq.n	8007240 <_printf_common+0xa4>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	68e5      	ldr	r5, [r4, #12]
 8007206:	6832      	ldr	r2, [r6, #0]
 8007208:	f003 0306 	and.w	r3, r3, #6
 800720c:	2b04      	cmp	r3, #4
 800720e:	bf08      	it	eq
 8007210:	1aad      	subeq	r5, r5, r2
 8007212:	68a3      	ldr	r3, [r4, #8]
 8007214:	6922      	ldr	r2, [r4, #16]
 8007216:	bf0c      	ite	eq
 8007218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800721c:	2500      	movne	r5, #0
 800721e:	4293      	cmp	r3, r2
 8007220:	bfc4      	itt	gt
 8007222:	1a9b      	subgt	r3, r3, r2
 8007224:	18ed      	addgt	r5, r5, r3
 8007226:	2600      	movs	r6, #0
 8007228:	341a      	adds	r4, #26
 800722a:	42b5      	cmp	r5, r6
 800722c:	d11a      	bne.n	8007264 <_printf_common+0xc8>
 800722e:	2000      	movs	r0, #0
 8007230:	e008      	b.n	8007244 <_printf_common+0xa8>
 8007232:	2301      	movs	r3, #1
 8007234:	4652      	mov	r2, sl
 8007236:	4649      	mov	r1, r9
 8007238:	4638      	mov	r0, r7
 800723a:	47c0      	blx	r8
 800723c:	3001      	adds	r0, #1
 800723e:	d103      	bne.n	8007248 <_printf_common+0xac>
 8007240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007248:	3501      	adds	r5, #1
 800724a:	e7c6      	b.n	80071da <_printf_common+0x3e>
 800724c:	18e1      	adds	r1, r4, r3
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	2030      	movs	r0, #48	; 0x30
 8007252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007256:	4422      	add	r2, r4
 8007258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800725c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007260:	3302      	adds	r3, #2
 8007262:	e7c7      	b.n	80071f4 <_printf_common+0x58>
 8007264:	2301      	movs	r3, #1
 8007266:	4622      	mov	r2, r4
 8007268:	4649      	mov	r1, r9
 800726a:	4638      	mov	r0, r7
 800726c:	47c0      	blx	r8
 800726e:	3001      	adds	r0, #1
 8007270:	d0e6      	beq.n	8007240 <_printf_common+0xa4>
 8007272:	3601      	adds	r6, #1
 8007274:	e7d9      	b.n	800722a <_printf_common+0x8e>
	...

08007278 <_printf_i>:
 8007278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	7e0f      	ldrb	r7, [r1, #24]
 800727e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007280:	2f78      	cmp	r7, #120	; 0x78
 8007282:	4691      	mov	r9, r2
 8007284:	4680      	mov	r8, r0
 8007286:	460c      	mov	r4, r1
 8007288:	469a      	mov	sl, r3
 800728a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800728e:	d807      	bhi.n	80072a0 <_printf_i+0x28>
 8007290:	2f62      	cmp	r7, #98	; 0x62
 8007292:	d80a      	bhi.n	80072aa <_printf_i+0x32>
 8007294:	2f00      	cmp	r7, #0
 8007296:	f000 80d8 	beq.w	800744a <_printf_i+0x1d2>
 800729a:	2f58      	cmp	r7, #88	; 0x58
 800729c:	f000 80a3 	beq.w	80073e6 <_printf_i+0x16e>
 80072a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072a8:	e03a      	b.n	8007320 <_printf_i+0xa8>
 80072aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072ae:	2b15      	cmp	r3, #21
 80072b0:	d8f6      	bhi.n	80072a0 <_printf_i+0x28>
 80072b2:	a101      	add	r1, pc, #4	; (adr r1, 80072b8 <_printf_i+0x40>)
 80072b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072b8:	08007311 	.word	0x08007311
 80072bc:	08007325 	.word	0x08007325
 80072c0:	080072a1 	.word	0x080072a1
 80072c4:	080072a1 	.word	0x080072a1
 80072c8:	080072a1 	.word	0x080072a1
 80072cc:	080072a1 	.word	0x080072a1
 80072d0:	08007325 	.word	0x08007325
 80072d4:	080072a1 	.word	0x080072a1
 80072d8:	080072a1 	.word	0x080072a1
 80072dc:	080072a1 	.word	0x080072a1
 80072e0:	080072a1 	.word	0x080072a1
 80072e4:	08007431 	.word	0x08007431
 80072e8:	08007355 	.word	0x08007355
 80072ec:	08007413 	.word	0x08007413
 80072f0:	080072a1 	.word	0x080072a1
 80072f4:	080072a1 	.word	0x080072a1
 80072f8:	08007453 	.word	0x08007453
 80072fc:	080072a1 	.word	0x080072a1
 8007300:	08007355 	.word	0x08007355
 8007304:	080072a1 	.word	0x080072a1
 8007308:	080072a1 	.word	0x080072a1
 800730c:	0800741b 	.word	0x0800741b
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	1d1a      	adds	r2, r3, #4
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	602a      	str	r2, [r5, #0]
 8007318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800731c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007320:	2301      	movs	r3, #1
 8007322:	e0a3      	b.n	800746c <_printf_i+0x1f4>
 8007324:	6820      	ldr	r0, [r4, #0]
 8007326:	6829      	ldr	r1, [r5, #0]
 8007328:	0606      	lsls	r6, r0, #24
 800732a:	f101 0304 	add.w	r3, r1, #4
 800732e:	d50a      	bpl.n	8007346 <_printf_i+0xce>
 8007330:	680e      	ldr	r6, [r1, #0]
 8007332:	602b      	str	r3, [r5, #0]
 8007334:	2e00      	cmp	r6, #0
 8007336:	da03      	bge.n	8007340 <_printf_i+0xc8>
 8007338:	232d      	movs	r3, #45	; 0x2d
 800733a:	4276      	negs	r6, r6
 800733c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007340:	485e      	ldr	r0, [pc, #376]	; (80074bc <_printf_i+0x244>)
 8007342:	230a      	movs	r3, #10
 8007344:	e019      	b.n	800737a <_printf_i+0x102>
 8007346:	680e      	ldr	r6, [r1, #0]
 8007348:	602b      	str	r3, [r5, #0]
 800734a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800734e:	bf18      	it	ne
 8007350:	b236      	sxthne	r6, r6
 8007352:	e7ef      	b.n	8007334 <_printf_i+0xbc>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	6820      	ldr	r0, [r4, #0]
 8007358:	1d19      	adds	r1, r3, #4
 800735a:	6029      	str	r1, [r5, #0]
 800735c:	0601      	lsls	r1, r0, #24
 800735e:	d501      	bpl.n	8007364 <_printf_i+0xec>
 8007360:	681e      	ldr	r6, [r3, #0]
 8007362:	e002      	b.n	800736a <_printf_i+0xf2>
 8007364:	0646      	lsls	r6, r0, #25
 8007366:	d5fb      	bpl.n	8007360 <_printf_i+0xe8>
 8007368:	881e      	ldrh	r6, [r3, #0]
 800736a:	4854      	ldr	r0, [pc, #336]	; (80074bc <_printf_i+0x244>)
 800736c:	2f6f      	cmp	r7, #111	; 0x6f
 800736e:	bf0c      	ite	eq
 8007370:	2308      	moveq	r3, #8
 8007372:	230a      	movne	r3, #10
 8007374:	2100      	movs	r1, #0
 8007376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800737a:	6865      	ldr	r5, [r4, #4]
 800737c:	60a5      	str	r5, [r4, #8]
 800737e:	2d00      	cmp	r5, #0
 8007380:	bfa2      	ittt	ge
 8007382:	6821      	ldrge	r1, [r4, #0]
 8007384:	f021 0104 	bicge.w	r1, r1, #4
 8007388:	6021      	strge	r1, [r4, #0]
 800738a:	b90e      	cbnz	r6, 8007390 <_printf_i+0x118>
 800738c:	2d00      	cmp	r5, #0
 800738e:	d04d      	beq.n	800742c <_printf_i+0x1b4>
 8007390:	4615      	mov	r5, r2
 8007392:	fbb6 f1f3 	udiv	r1, r6, r3
 8007396:	fb03 6711 	mls	r7, r3, r1, r6
 800739a:	5dc7      	ldrb	r7, [r0, r7]
 800739c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073a0:	4637      	mov	r7, r6
 80073a2:	42bb      	cmp	r3, r7
 80073a4:	460e      	mov	r6, r1
 80073a6:	d9f4      	bls.n	8007392 <_printf_i+0x11a>
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d10b      	bne.n	80073c4 <_printf_i+0x14c>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	07de      	lsls	r6, r3, #31
 80073b0:	d508      	bpl.n	80073c4 <_printf_i+0x14c>
 80073b2:	6923      	ldr	r3, [r4, #16]
 80073b4:	6861      	ldr	r1, [r4, #4]
 80073b6:	4299      	cmp	r1, r3
 80073b8:	bfde      	ittt	le
 80073ba:	2330      	movle	r3, #48	; 0x30
 80073bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80073c4:	1b52      	subs	r2, r2, r5
 80073c6:	6122      	str	r2, [r4, #16]
 80073c8:	f8cd a000 	str.w	sl, [sp]
 80073cc:	464b      	mov	r3, r9
 80073ce:	aa03      	add	r2, sp, #12
 80073d0:	4621      	mov	r1, r4
 80073d2:	4640      	mov	r0, r8
 80073d4:	f7ff fee2 	bl	800719c <_printf_common>
 80073d8:	3001      	adds	r0, #1
 80073da:	d14c      	bne.n	8007476 <_printf_i+0x1fe>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073e0:	b004      	add	sp, #16
 80073e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e6:	4835      	ldr	r0, [pc, #212]	; (80074bc <_printf_i+0x244>)
 80073e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073ec:	6829      	ldr	r1, [r5, #0]
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80073f4:	6029      	str	r1, [r5, #0]
 80073f6:	061d      	lsls	r5, r3, #24
 80073f8:	d514      	bpl.n	8007424 <_printf_i+0x1ac>
 80073fa:	07df      	lsls	r7, r3, #31
 80073fc:	bf44      	itt	mi
 80073fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007402:	6023      	strmi	r3, [r4, #0]
 8007404:	b91e      	cbnz	r6, 800740e <_printf_i+0x196>
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	f023 0320 	bic.w	r3, r3, #32
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	2310      	movs	r3, #16
 8007410:	e7b0      	b.n	8007374 <_printf_i+0xfc>
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	f043 0320 	orr.w	r3, r3, #32
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	2378      	movs	r3, #120	; 0x78
 800741c:	4828      	ldr	r0, [pc, #160]	; (80074c0 <_printf_i+0x248>)
 800741e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007422:	e7e3      	b.n	80073ec <_printf_i+0x174>
 8007424:	0659      	lsls	r1, r3, #25
 8007426:	bf48      	it	mi
 8007428:	b2b6      	uxthmi	r6, r6
 800742a:	e7e6      	b.n	80073fa <_printf_i+0x182>
 800742c:	4615      	mov	r5, r2
 800742e:	e7bb      	b.n	80073a8 <_printf_i+0x130>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	6826      	ldr	r6, [r4, #0]
 8007434:	6961      	ldr	r1, [r4, #20]
 8007436:	1d18      	adds	r0, r3, #4
 8007438:	6028      	str	r0, [r5, #0]
 800743a:	0635      	lsls	r5, r6, #24
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	d501      	bpl.n	8007444 <_printf_i+0x1cc>
 8007440:	6019      	str	r1, [r3, #0]
 8007442:	e002      	b.n	800744a <_printf_i+0x1d2>
 8007444:	0670      	lsls	r0, r6, #25
 8007446:	d5fb      	bpl.n	8007440 <_printf_i+0x1c8>
 8007448:	8019      	strh	r1, [r3, #0]
 800744a:	2300      	movs	r3, #0
 800744c:	6123      	str	r3, [r4, #16]
 800744e:	4615      	mov	r5, r2
 8007450:	e7ba      	b.n	80073c8 <_printf_i+0x150>
 8007452:	682b      	ldr	r3, [r5, #0]
 8007454:	1d1a      	adds	r2, r3, #4
 8007456:	602a      	str	r2, [r5, #0]
 8007458:	681d      	ldr	r5, [r3, #0]
 800745a:	6862      	ldr	r2, [r4, #4]
 800745c:	2100      	movs	r1, #0
 800745e:	4628      	mov	r0, r5
 8007460:	f7f8 fed6 	bl	8000210 <memchr>
 8007464:	b108      	cbz	r0, 800746a <_printf_i+0x1f2>
 8007466:	1b40      	subs	r0, r0, r5
 8007468:	6060      	str	r0, [r4, #4]
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	6123      	str	r3, [r4, #16]
 800746e:	2300      	movs	r3, #0
 8007470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007474:	e7a8      	b.n	80073c8 <_printf_i+0x150>
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	462a      	mov	r2, r5
 800747a:	4649      	mov	r1, r9
 800747c:	4640      	mov	r0, r8
 800747e:	47d0      	blx	sl
 8007480:	3001      	adds	r0, #1
 8007482:	d0ab      	beq.n	80073dc <_printf_i+0x164>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	079b      	lsls	r3, r3, #30
 8007488:	d413      	bmi.n	80074b2 <_printf_i+0x23a>
 800748a:	68e0      	ldr	r0, [r4, #12]
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	4298      	cmp	r0, r3
 8007490:	bfb8      	it	lt
 8007492:	4618      	movlt	r0, r3
 8007494:	e7a4      	b.n	80073e0 <_printf_i+0x168>
 8007496:	2301      	movs	r3, #1
 8007498:	4632      	mov	r2, r6
 800749a:	4649      	mov	r1, r9
 800749c:	4640      	mov	r0, r8
 800749e:	47d0      	blx	sl
 80074a0:	3001      	adds	r0, #1
 80074a2:	d09b      	beq.n	80073dc <_printf_i+0x164>
 80074a4:	3501      	adds	r5, #1
 80074a6:	68e3      	ldr	r3, [r4, #12]
 80074a8:	9903      	ldr	r1, [sp, #12]
 80074aa:	1a5b      	subs	r3, r3, r1
 80074ac:	42ab      	cmp	r3, r5
 80074ae:	dcf2      	bgt.n	8007496 <_printf_i+0x21e>
 80074b0:	e7eb      	b.n	800748a <_printf_i+0x212>
 80074b2:	2500      	movs	r5, #0
 80074b4:	f104 0619 	add.w	r6, r4, #25
 80074b8:	e7f5      	b.n	80074a6 <_printf_i+0x22e>
 80074ba:	bf00      	nop
 80074bc:	08009b1e 	.word	0x08009b1e
 80074c0:	08009b2f 	.word	0x08009b2f

080074c4 <iprintf>:
 80074c4:	b40f      	push	{r0, r1, r2, r3}
 80074c6:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <iprintf+0x2c>)
 80074c8:	b513      	push	{r0, r1, r4, lr}
 80074ca:	681c      	ldr	r4, [r3, #0]
 80074cc:	b124      	cbz	r4, 80074d8 <iprintf+0x14>
 80074ce:	69a3      	ldr	r3, [r4, #24]
 80074d0:	b913      	cbnz	r3, 80074d8 <iprintf+0x14>
 80074d2:	4620      	mov	r0, r4
 80074d4:	f001 f83a 	bl	800854c <__sinit>
 80074d8:	ab05      	add	r3, sp, #20
 80074da:	9a04      	ldr	r2, [sp, #16]
 80074dc:	68a1      	ldr	r1, [r4, #8]
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	4620      	mov	r0, r4
 80074e2:	f001 fd85 	bl	8008ff0 <_vfiprintf_r>
 80074e6:	b002      	add	sp, #8
 80074e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ec:	b004      	add	sp, #16
 80074ee:	4770      	bx	lr
 80074f0:	20000010 	.word	0x20000010

080074f4 <__strtok_r>:
 80074f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f6:	b908      	cbnz	r0, 80074fc <__strtok_r+0x8>
 80074f8:	6810      	ldr	r0, [r2, #0]
 80074fa:	b188      	cbz	r0, 8007520 <__strtok_r+0x2c>
 80074fc:	4604      	mov	r4, r0
 80074fe:	4620      	mov	r0, r4
 8007500:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007504:	460f      	mov	r7, r1
 8007506:	f817 6b01 	ldrb.w	r6, [r7], #1
 800750a:	b91e      	cbnz	r6, 8007514 <__strtok_r+0x20>
 800750c:	b965      	cbnz	r5, 8007528 <__strtok_r+0x34>
 800750e:	6015      	str	r5, [r2, #0]
 8007510:	4628      	mov	r0, r5
 8007512:	e005      	b.n	8007520 <__strtok_r+0x2c>
 8007514:	42b5      	cmp	r5, r6
 8007516:	d1f6      	bne.n	8007506 <__strtok_r+0x12>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f0      	bne.n	80074fe <__strtok_r+0xa>
 800751c:	6014      	str	r4, [r2, #0]
 800751e:	7003      	strb	r3, [r0, #0]
 8007520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007522:	461c      	mov	r4, r3
 8007524:	e00c      	b.n	8007540 <__strtok_r+0x4c>
 8007526:	b915      	cbnz	r5, 800752e <__strtok_r+0x3a>
 8007528:	f814 3b01 	ldrb.w	r3, [r4], #1
 800752c:	460e      	mov	r6, r1
 800752e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007532:	42ab      	cmp	r3, r5
 8007534:	d1f7      	bne.n	8007526 <__strtok_r+0x32>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0f3      	beq.n	8007522 <__strtok_r+0x2e>
 800753a:	2300      	movs	r3, #0
 800753c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007540:	6014      	str	r4, [r2, #0]
 8007542:	e7ed      	b.n	8007520 <__strtok_r+0x2c>

08007544 <strtok_r>:
 8007544:	2301      	movs	r3, #1
 8007546:	f7ff bfd5 	b.w	80074f4 <__strtok_r>
	...

0800754c <_strtol_l.constprop.0>:
 800754c:	2b01      	cmp	r3, #1
 800754e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007552:	d001      	beq.n	8007558 <_strtol_l.constprop.0+0xc>
 8007554:	2b24      	cmp	r3, #36	; 0x24
 8007556:	d906      	bls.n	8007566 <_strtol_l.constprop.0+0x1a>
 8007558:	f7ff fb0a 	bl	8006b70 <__errno>
 800755c:	2316      	movs	r3, #22
 800755e:	6003      	str	r3, [r0, #0]
 8007560:	2000      	movs	r0, #0
 8007562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007566:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800764c <_strtol_l.constprop.0+0x100>
 800756a:	460d      	mov	r5, r1
 800756c:	462e      	mov	r6, r5
 800756e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007572:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007576:	f017 0708 	ands.w	r7, r7, #8
 800757a:	d1f7      	bne.n	800756c <_strtol_l.constprop.0+0x20>
 800757c:	2c2d      	cmp	r4, #45	; 0x2d
 800757e:	d132      	bne.n	80075e6 <_strtol_l.constprop.0+0x9a>
 8007580:	782c      	ldrb	r4, [r5, #0]
 8007582:	2701      	movs	r7, #1
 8007584:	1cb5      	adds	r5, r6, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d05b      	beq.n	8007642 <_strtol_l.constprop.0+0xf6>
 800758a:	2b10      	cmp	r3, #16
 800758c:	d109      	bne.n	80075a2 <_strtol_l.constprop.0+0x56>
 800758e:	2c30      	cmp	r4, #48	; 0x30
 8007590:	d107      	bne.n	80075a2 <_strtol_l.constprop.0+0x56>
 8007592:	782c      	ldrb	r4, [r5, #0]
 8007594:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007598:	2c58      	cmp	r4, #88	; 0x58
 800759a:	d14d      	bne.n	8007638 <_strtol_l.constprop.0+0xec>
 800759c:	786c      	ldrb	r4, [r5, #1]
 800759e:	2310      	movs	r3, #16
 80075a0:	3502      	adds	r5, #2
 80075a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80075a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80075aa:	f04f 0c00 	mov.w	ip, #0
 80075ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80075b2:	4666      	mov	r6, ip
 80075b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80075b8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80075bc:	f1be 0f09 	cmp.w	lr, #9
 80075c0:	d816      	bhi.n	80075f0 <_strtol_l.constprop.0+0xa4>
 80075c2:	4674      	mov	r4, lr
 80075c4:	42a3      	cmp	r3, r4
 80075c6:	dd24      	ble.n	8007612 <_strtol_l.constprop.0+0xc6>
 80075c8:	f1bc 0f00 	cmp.w	ip, #0
 80075cc:	db1e      	blt.n	800760c <_strtol_l.constprop.0+0xc0>
 80075ce:	45b1      	cmp	r9, r6
 80075d0:	d31c      	bcc.n	800760c <_strtol_l.constprop.0+0xc0>
 80075d2:	d101      	bne.n	80075d8 <_strtol_l.constprop.0+0x8c>
 80075d4:	45a2      	cmp	sl, r4
 80075d6:	db19      	blt.n	800760c <_strtol_l.constprop.0+0xc0>
 80075d8:	fb06 4603 	mla	r6, r6, r3, r4
 80075dc:	f04f 0c01 	mov.w	ip, #1
 80075e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075e4:	e7e8      	b.n	80075b8 <_strtol_l.constprop.0+0x6c>
 80075e6:	2c2b      	cmp	r4, #43	; 0x2b
 80075e8:	bf04      	itt	eq
 80075ea:	782c      	ldrbeq	r4, [r5, #0]
 80075ec:	1cb5      	addeq	r5, r6, #2
 80075ee:	e7ca      	b.n	8007586 <_strtol_l.constprop.0+0x3a>
 80075f0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80075f4:	f1be 0f19 	cmp.w	lr, #25
 80075f8:	d801      	bhi.n	80075fe <_strtol_l.constprop.0+0xb2>
 80075fa:	3c37      	subs	r4, #55	; 0x37
 80075fc:	e7e2      	b.n	80075c4 <_strtol_l.constprop.0+0x78>
 80075fe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007602:	f1be 0f19 	cmp.w	lr, #25
 8007606:	d804      	bhi.n	8007612 <_strtol_l.constprop.0+0xc6>
 8007608:	3c57      	subs	r4, #87	; 0x57
 800760a:	e7db      	b.n	80075c4 <_strtol_l.constprop.0+0x78>
 800760c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007610:	e7e6      	b.n	80075e0 <_strtol_l.constprop.0+0x94>
 8007612:	f1bc 0f00 	cmp.w	ip, #0
 8007616:	da05      	bge.n	8007624 <_strtol_l.constprop.0+0xd8>
 8007618:	2322      	movs	r3, #34	; 0x22
 800761a:	6003      	str	r3, [r0, #0]
 800761c:	4646      	mov	r6, r8
 800761e:	b942      	cbnz	r2, 8007632 <_strtol_l.constprop.0+0xe6>
 8007620:	4630      	mov	r0, r6
 8007622:	e79e      	b.n	8007562 <_strtol_l.constprop.0+0x16>
 8007624:	b107      	cbz	r7, 8007628 <_strtol_l.constprop.0+0xdc>
 8007626:	4276      	negs	r6, r6
 8007628:	2a00      	cmp	r2, #0
 800762a:	d0f9      	beq.n	8007620 <_strtol_l.constprop.0+0xd4>
 800762c:	f1bc 0f00 	cmp.w	ip, #0
 8007630:	d000      	beq.n	8007634 <_strtol_l.constprop.0+0xe8>
 8007632:	1e69      	subs	r1, r5, #1
 8007634:	6011      	str	r1, [r2, #0]
 8007636:	e7f3      	b.n	8007620 <_strtol_l.constprop.0+0xd4>
 8007638:	2430      	movs	r4, #48	; 0x30
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1b1      	bne.n	80075a2 <_strtol_l.constprop.0+0x56>
 800763e:	2308      	movs	r3, #8
 8007640:	e7af      	b.n	80075a2 <_strtol_l.constprop.0+0x56>
 8007642:	2c30      	cmp	r4, #48	; 0x30
 8007644:	d0a5      	beq.n	8007592 <_strtol_l.constprop.0+0x46>
 8007646:	230a      	movs	r3, #10
 8007648:	e7ab      	b.n	80075a2 <_strtol_l.constprop.0+0x56>
 800764a:	bf00      	nop
 800764c:	08009b41 	.word	0x08009b41

08007650 <strtol>:
 8007650:	4613      	mov	r3, r2
 8007652:	460a      	mov	r2, r1
 8007654:	4601      	mov	r1, r0
 8007656:	4802      	ldr	r0, [pc, #8]	; (8007660 <strtol+0x10>)
 8007658:	6800      	ldr	r0, [r0, #0]
 800765a:	f7ff bf77 	b.w	800754c <_strtol_l.constprop.0>
 800765e:	bf00      	nop
 8007660:	20000010 	.word	0x20000010

08007664 <_strtoull_l.constprop.0>:
 8007664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007668:	4692      	mov	sl, r2
 800766a:	4a49      	ldr	r2, [pc, #292]	; (8007790 <_strtoull_l.constprop.0+0x12c>)
 800766c:	9001      	str	r0, [sp, #4]
 800766e:	4689      	mov	r9, r1
 8007670:	461d      	mov	r5, r3
 8007672:	460e      	mov	r6, r1
 8007674:	4633      	mov	r3, r6
 8007676:	f816 4b01 	ldrb.w	r4, [r6], #1
 800767a:	5ca7      	ldrb	r7, [r4, r2]
 800767c:	f017 0708 	ands.w	r7, r7, #8
 8007680:	d1f8      	bne.n	8007674 <_strtoull_l.constprop.0+0x10>
 8007682:	2c2d      	cmp	r4, #45	; 0x2d
 8007684:	d14a      	bne.n	800771c <_strtoull_l.constprop.0+0xb8>
 8007686:	7834      	ldrb	r4, [r6, #0]
 8007688:	2701      	movs	r7, #1
 800768a:	1c9e      	adds	r6, r3, #2
 800768c:	2d00      	cmp	r5, #0
 800768e:	d07b      	beq.n	8007788 <_strtoull_l.constprop.0+0x124>
 8007690:	2d10      	cmp	r5, #16
 8007692:	d109      	bne.n	80076a8 <_strtoull_l.constprop.0+0x44>
 8007694:	2c30      	cmp	r4, #48	; 0x30
 8007696:	d107      	bne.n	80076a8 <_strtoull_l.constprop.0+0x44>
 8007698:	7833      	ldrb	r3, [r6, #0]
 800769a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800769e:	2b58      	cmp	r3, #88	; 0x58
 80076a0:	d16d      	bne.n	800777e <_strtoull_l.constprop.0+0x11a>
 80076a2:	7874      	ldrb	r4, [r6, #1]
 80076a4:	2510      	movs	r5, #16
 80076a6:	3602      	adds	r6, #2
 80076a8:	ea4f 7be5 	mov.w	fp, r5, asr #31
 80076ac:	462a      	mov	r2, r5
 80076ae:	465b      	mov	r3, fp
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80076b8:	f7f9 fafe 	bl	8000cb8 <__aeabi_uldivmod>
 80076bc:	462a      	mov	r2, r5
 80076be:	9000      	str	r0, [sp, #0]
 80076c0:	4688      	mov	r8, r1
 80076c2:	465b      	mov	r3, fp
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80076cc:	f7f9 faf4 	bl	8000cb8 <__aeabi_uldivmod>
 80076d0:	2300      	movs	r3, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	4619      	mov	r1, r3
 80076d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80076da:	f1bc 0f09 	cmp.w	ip, #9
 80076de:	d822      	bhi.n	8007726 <_strtoull_l.constprop.0+0xc2>
 80076e0:	4664      	mov	r4, ip
 80076e2:	42a5      	cmp	r5, r4
 80076e4:	dd30      	ble.n	8007748 <_strtoull_l.constprop.0+0xe4>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	db2b      	blt.n	8007742 <_strtoull_l.constprop.0+0xde>
 80076ea:	9b00      	ldr	r3, [sp, #0]
 80076ec:	4283      	cmp	r3, r0
 80076ee:	eb78 0301 	sbcs.w	r3, r8, r1
 80076f2:	d326      	bcc.n	8007742 <_strtoull_l.constprop.0+0xde>
 80076f4:	9b00      	ldr	r3, [sp, #0]
 80076f6:	4588      	cmp	r8, r1
 80076f8:	bf08      	it	eq
 80076fa:	4283      	cmpeq	r3, r0
 80076fc:	d101      	bne.n	8007702 <_strtoull_l.constprop.0+0x9e>
 80076fe:	42a2      	cmp	r2, r4
 8007700:	db1f      	blt.n	8007742 <_strtoull_l.constprop.0+0xde>
 8007702:	4369      	muls	r1, r5
 8007704:	fb00 110b 	mla	r1, r0, fp, r1
 8007708:	fba5 0300 	umull	r0, r3, r5, r0
 800770c:	4419      	add	r1, r3
 800770e:	1820      	adds	r0, r4, r0
 8007710:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8007714:	2301      	movs	r3, #1
 8007716:	f816 4b01 	ldrb.w	r4, [r6], #1
 800771a:	e7dc      	b.n	80076d6 <_strtoull_l.constprop.0+0x72>
 800771c:	2c2b      	cmp	r4, #43	; 0x2b
 800771e:	bf04      	itt	eq
 8007720:	7834      	ldrbeq	r4, [r6, #0]
 8007722:	1c9e      	addeq	r6, r3, #2
 8007724:	e7b2      	b.n	800768c <_strtoull_l.constprop.0+0x28>
 8007726:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800772a:	f1bc 0f19 	cmp.w	ip, #25
 800772e:	d801      	bhi.n	8007734 <_strtoull_l.constprop.0+0xd0>
 8007730:	3c37      	subs	r4, #55	; 0x37
 8007732:	e7d6      	b.n	80076e2 <_strtoull_l.constprop.0+0x7e>
 8007734:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007738:	f1bc 0f19 	cmp.w	ip, #25
 800773c:	d804      	bhi.n	8007748 <_strtoull_l.constprop.0+0xe4>
 800773e:	3c57      	subs	r4, #87	; 0x57
 8007740:	e7cf      	b.n	80076e2 <_strtoull_l.constprop.0+0x7e>
 8007742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007746:	e7e6      	b.n	8007716 <_strtoull_l.constprop.0+0xb2>
 8007748:	2b00      	cmp	r3, #0
 800774a:	da0b      	bge.n	8007764 <_strtoull_l.constprop.0+0x100>
 800774c:	9a01      	ldr	r2, [sp, #4]
 800774e:	2322      	movs	r3, #34	; 0x22
 8007750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	4601      	mov	r1, r0
 8007758:	f1ba 0f00 	cmp.w	sl, #0
 800775c:	d10a      	bne.n	8007774 <_strtoull_l.constprop.0+0x110>
 800775e:	b003      	add	sp, #12
 8007760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007764:	b117      	cbz	r7, 800776c <_strtoull_l.constprop.0+0x108>
 8007766:	4240      	negs	r0, r0
 8007768:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800776c:	f1ba 0f00 	cmp.w	sl, #0
 8007770:	d0f5      	beq.n	800775e <_strtoull_l.constprop.0+0xfa>
 8007772:	b10b      	cbz	r3, 8007778 <_strtoull_l.constprop.0+0x114>
 8007774:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8007778:	f8ca 9000 	str.w	r9, [sl]
 800777c:	e7ef      	b.n	800775e <_strtoull_l.constprop.0+0xfa>
 800777e:	2430      	movs	r4, #48	; 0x30
 8007780:	2d00      	cmp	r5, #0
 8007782:	d191      	bne.n	80076a8 <_strtoull_l.constprop.0+0x44>
 8007784:	2508      	movs	r5, #8
 8007786:	e78f      	b.n	80076a8 <_strtoull_l.constprop.0+0x44>
 8007788:	2c30      	cmp	r4, #48	; 0x30
 800778a:	d085      	beq.n	8007698 <_strtoull_l.constprop.0+0x34>
 800778c:	250a      	movs	r5, #10
 800778e:	e78b      	b.n	80076a8 <_strtoull_l.constprop.0+0x44>
 8007790:	08009b41 	.word	0x08009b41

08007794 <strtoull>:
 8007794:	4613      	mov	r3, r2
 8007796:	460a      	mov	r2, r1
 8007798:	4601      	mov	r1, r0
 800779a:	4802      	ldr	r0, [pc, #8]	; (80077a4 <strtoull+0x10>)
 800779c:	6800      	ldr	r0, [r0, #0]
 800779e:	f7ff bf61 	b.w	8007664 <_strtoull_l.constprop.0>
 80077a2:	bf00      	nop
 80077a4:	20000010 	.word	0x20000010

080077a8 <quorem>:
 80077a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	6903      	ldr	r3, [r0, #16]
 80077ae:	690c      	ldr	r4, [r1, #16]
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	4607      	mov	r7, r0
 80077b4:	f2c0 8081 	blt.w	80078ba <quorem+0x112>
 80077b8:	3c01      	subs	r4, #1
 80077ba:	f101 0814 	add.w	r8, r1, #20
 80077be:	f100 0514 	add.w	r5, r0, #20
 80077c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077d0:	3301      	adds	r3, #1
 80077d2:	429a      	cmp	r2, r3
 80077d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80077e0:	d331      	bcc.n	8007846 <quorem+0x9e>
 80077e2:	f04f 0e00 	mov.w	lr, #0
 80077e6:	4640      	mov	r0, r8
 80077e8:	46ac      	mov	ip, r5
 80077ea:	46f2      	mov	sl, lr
 80077ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80077f0:	b293      	uxth	r3, r2
 80077f2:	fb06 e303 	mla	r3, r6, r3, lr
 80077f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	ebaa 0303 	sub.w	r3, sl, r3
 8007800:	f8dc a000 	ldr.w	sl, [ip]
 8007804:	0c12      	lsrs	r2, r2, #16
 8007806:	fa13 f38a 	uxtah	r3, r3, sl
 800780a:	fb06 e202 	mla	r2, r6, r2, lr
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	9b00      	ldr	r3, [sp, #0]
 8007812:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007816:	b292      	uxth	r2, r2
 8007818:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800781c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007820:	f8bd 3000 	ldrh.w	r3, [sp]
 8007824:	4581      	cmp	r9, r0
 8007826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800782a:	f84c 3b04 	str.w	r3, [ip], #4
 800782e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007832:	d2db      	bcs.n	80077ec <quorem+0x44>
 8007834:	f855 300b 	ldr.w	r3, [r5, fp]
 8007838:	b92b      	cbnz	r3, 8007846 <quorem+0x9e>
 800783a:	9b01      	ldr	r3, [sp, #4]
 800783c:	3b04      	subs	r3, #4
 800783e:	429d      	cmp	r5, r3
 8007840:	461a      	mov	r2, r3
 8007842:	d32e      	bcc.n	80078a2 <quorem+0xfa>
 8007844:	613c      	str	r4, [r7, #16]
 8007846:	4638      	mov	r0, r7
 8007848:	f001 f9b0 	bl	8008bac <__mcmp>
 800784c:	2800      	cmp	r0, #0
 800784e:	db24      	blt.n	800789a <quorem+0xf2>
 8007850:	3601      	adds	r6, #1
 8007852:	4628      	mov	r0, r5
 8007854:	f04f 0c00 	mov.w	ip, #0
 8007858:	f858 2b04 	ldr.w	r2, [r8], #4
 800785c:	f8d0 e000 	ldr.w	lr, [r0]
 8007860:	b293      	uxth	r3, r2
 8007862:	ebac 0303 	sub.w	r3, ip, r3
 8007866:	0c12      	lsrs	r2, r2, #16
 8007868:	fa13 f38e 	uxtah	r3, r3, lr
 800786c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007874:	b29b      	uxth	r3, r3
 8007876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800787a:	45c1      	cmp	r9, r8
 800787c:	f840 3b04 	str.w	r3, [r0], #4
 8007880:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007884:	d2e8      	bcs.n	8007858 <quorem+0xb0>
 8007886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800788a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800788e:	b922      	cbnz	r2, 800789a <quorem+0xf2>
 8007890:	3b04      	subs	r3, #4
 8007892:	429d      	cmp	r5, r3
 8007894:	461a      	mov	r2, r3
 8007896:	d30a      	bcc.n	80078ae <quorem+0x106>
 8007898:	613c      	str	r4, [r7, #16]
 800789a:	4630      	mov	r0, r6
 800789c:	b003      	add	sp, #12
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	6812      	ldr	r2, [r2, #0]
 80078a4:	3b04      	subs	r3, #4
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	d1cc      	bne.n	8007844 <quorem+0x9c>
 80078aa:	3c01      	subs	r4, #1
 80078ac:	e7c7      	b.n	800783e <quorem+0x96>
 80078ae:	6812      	ldr	r2, [r2, #0]
 80078b0:	3b04      	subs	r3, #4
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	d1f0      	bne.n	8007898 <quorem+0xf0>
 80078b6:	3c01      	subs	r4, #1
 80078b8:	e7eb      	b.n	8007892 <quorem+0xea>
 80078ba:	2000      	movs	r0, #0
 80078bc:	e7ee      	b.n	800789c <quorem+0xf4>
	...

080078c0 <_dtoa_r>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	ed2d 8b04 	vpush	{d8-d9}
 80078c8:	ec57 6b10 	vmov	r6, r7, d0
 80078cc:	b093      	sub	sp, #76	; 0x4c
 80078ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80078d4:	9106      	str	r1, [sp, #24]
 80078d6:	ee10 aa10 	vmov	sl, s0
 80078da:	4604      	mov	r4, r0
 80078dc:	9209      	str	r2, [sp, #36]	; 0x24
 80078de:	930c      	str	r3, [sp, #48]	; 0x30
 80078e0:	46bb      	mov	fp, r7
 80078e2:	b975      	cbnz	r5, 8007902 <_dtoa_r+0x42>
 80078e4:	2010      	movs	r0, #16
 80078e6:	f000 fed7 	bl	8008698 <malloc>
 80078ea:	4602      	mov	r2, r0
 80078ec:	6260      	str	r0, [r4, #36]	; 0x24
 80078ee:	b920      	cbnz	r0, 80078fa <_dtoa_r+0x3a>
 80078f0:	4ba7      	ldr	r3, [pc, #668]	; (8007b90 <_dtoa_r+0x2d0>)
 80078f2:	21ea      	movs	r1, #234	; 0xea
 80078f4:	48a7      	ldr	r0, [pc, #668]	; (8007b94 <_dtoa_r+0x2d4>)
 80078f6:	f001 fdd1 	bl	800949c <__assert_func>
 80078fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078fe:	6005      	str	r5, [r0, #0]
 8007900:	60c5      	str	r5, [r0, #12]
 8007902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007904:	6819      	ldr	r1, [r3, #0]
 8007906:	b151      	cbz	r1, 800791e <_dtoa_r+0x5e>
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	604a      	str	r2, [r1, #4]
 800790c:	2301      	movs	r3, #1
 800790e:	4093      	lsls	r3, r2
 8007910:	608b      	str	r3, [r1, #8]
 8007912:	4620      	mov	r0, r4
 8007914:	f000 ff08 	bl	8008728 <_Bfree>
 8007918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	1e3b      	subs	r3, r7, #0
 8007920:	bfaa      	itet	ge
 8007922:	2300      	movge	r3, #0
 8007924:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007928:	f8c8 3000 	strge.w	r3, [r8]
 800792c:	4b9a      	ldr	r3, [pc, #616]	; (8007b98 <_dtoa_r+0x2d8>)
 800792e:	bfbc      	itt	lt
 8007930:	2201      	movlt	r2, #1
 8007932:	f8c8 2000 	strlt.w	r2, [r8]
 8007936:	ea33 030b 	bics.w	r3, r3, fp
 800793a:	d11b      	bne.n	8007974 <_dtoa_r+0xb4>
 800793c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800793e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007948:	4333      	orrs	r3, r6
 800794a:	f000 8592 	beq.w	8008472 <_dtoa_r+0xbb2>
 800794e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007950:	b963      	cbnz	r3, 800796c <_dtoa_r+0xac>
 8007952:	4b92      	ldr	r3, [pc, #584]	; (8007b9c <_dtoa_r+0x2dc>)
 8007954:	e022      	b.n	800799c <_dtoa_r+0xdc>
 8007956:	4b92      	ldr	r3, [pc, #584]	; (8007ba0 <_dtoa_r+0x2e0>)
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	3308      	adds	r3, #8
 800795c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	9801      	ldr	r0, [sp, #4]
 8007962:	b013      	add	sp, #76	; 0x4c
 8007964:	ecbd 8b04 	vpop	{d8-d9}
 8007968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796c:	4b8b      	ldr	r3, [pc, #556]	; (8007b9c <_dtoa_r+0x2dc>)
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	3303      	adds	r3, #3
 8007972:	e7f3      	b.n	800795c <_dtoa_r+0x9c>
 8007974:	2200      	movs	r2, #0
 8007976:	2300      	movs	r3, #0
 8007978:	4650      	mov	r0, sl
 800797a:	4659      	mov	r1, fp
 800797c:	f7f9 f8bc 	bl	8000af8 <__aeabi_dcmpeq>
 8007980:	ec4b ab19 	vmov	d9, sl, fp
 8007984:	4680      	mov	r8, r0
 8007986:	b158      	cbz	r0, 80079a0 <_dtoa_r+0xe0>
 8007988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800798a:	2301      	movs	r3, #1
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 856b 	beq.w	800846c <_dtoa_r+0xbac>
 8007996:	4883      	ldr	r0, [pc, #524]	; (8007ba4 <_dtoa_r+0x2e4>)
 8007998:	6018      	str	r0, [r3, #0]
 800799a:	1e43      	subs	r3, r0, #1
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	e7df      	b.n	8007960 <_dtoa_r+0xa0>
 80079a0:	ec4b ab10 	vmov	d0, sl, fp
 80079a4:	aa10      	add	r2, sp, #64	; 0x40
 80079a6:	a911      	add	r1, sp, #68	; 0x44
 80079a8:	4620      	mov	r0, r4
 80079aa:	f001 f9a5 	bl	8008cf8 <__d2b>
 80079ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80079b2:	ee08 0a10 	vmov	s16, r0
 80079b6:	2d00      	cmp	r5, #0
 80079b8:	f000 8084 	beq.w	8007ac4 <_dtoa_r+0x204>
 80079bc:	ee19 3a90 	vmov	r3, s19
 80079c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80079c8:	4656      	mov	r6, sl
 80079ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80079ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80079d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80079d6:	4b74      	ldr	r3, [pc, #464]	; (8007ba8 <_dtoa_r+0x2e8>)
 80079d8:	2200      	movs	r2, #0
 80079da:	4630      	mov	r0, r6
 80079dc:	4639      	mov	r1, r7
 80079de:	f7f8 fc6b 	bl	80002b8 <__aeabi_dsub>
 80079e2:	a365      	add	r3, pc, #404	; (adr r3, 8007b78 <_dtoa_r+0x2b8>)
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f7f8 fe1e 	bl	8000628 <__aeabi_dmul>
 80079ec:	a364      	add	r3, pc, #400	; (adr r3, 8007b80 <_dtoa_r+0x2c0>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f7f8 fc63 	bl	80002bc <__adddf3>
 80079f6:	4606      	mov	r6, r0
 80079f8:	4628      	mov	r0, r5
 80079fa:	460f      	mov	r7, r1
 80079fc:	f7f8 fdaa 	bl	8000554 <__aeabi_i2d>
 8007a00:	a361      	add	r3, pc, #388	; (adr r3, 8007b88 <_dtoa_r+0x2c8>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	f7f8 fe0f 	bl	8000628 <__aeabi_dmul>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4630      	mov	r0, r6
 8007a10:	4639      	mov	r1, r7
 8007a12:	f7f8 fc53 	bl	80002bc <__adddf3>
 8007a16:	4606      	mov	r6, r0
 8007a18:	460f      	mov	r7, r1
 8007a1a:	f7f9 f8b5 	bl	8000b88 <__aeabi_d2iz>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	9000      	str	r0, [sp, #0]
 8007a22:	2300      	movs	r3, #0
 8007a24:	4630      	mov	r0, r6
 8007a26:	4639      	mov	r1, r7
 8007a28:	f7f9 f870 	bl	8000b0c <__aeabi_dcmplt>
 8007a2c:	b150      	cbz	r0, 8007a44 <_dtoa_r+0x184>
 8007a2e:	9800      	ldr	r0, [sp, #0]
 8007a30:	f7f8 fd90 	bl	8000554 <__aeabi_i2d>
 8007a34:	4632      	mov	r2, r6
 8007a36:	463b      	mov	r3, r7
 8007a38:	f7f9 f85e 	bl	8000af8 <__aeabi_dcmpeq>
 8007a3c:	b910      	cbnz	r0, 8007a44 <_dtoa_r+0x184>
 8007a3e:	9b00      	ldr	r3, [sp, #0]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	9b00      	ldr	r3, [sp, #0]
 8007a46:	2b16      	cmp	r3, #22
 8007a48:	d85a      	bhi.n	8007b00 <_dtoa_r+0x240>
 8007a4a:	9a00      	ldr	r2, [sp, #0]
 8007a4c:	4b57      	ldr	r3, [pc, #348]	; (8007bac <_dtoa_r+0x2ec>)
 8007a4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	ec51 0b19 	vmov	r0, r1, d9
 8007a5a:	f7f9 f857 	bl	8000b0c <__aeabi_dcmplt>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d050      	beq.n	8007b04 <_dtoa_r+0x244>
 8007a62:	9b00      	ldr	r3, [sp, #0]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a6e:	1b5d      	subs	r5, r3, r5
 8007a70:	1e6b      	subs	r3, r5, #1
 8007a72:	9305      	str	r3, [sp, #20]
 8007a74:	bf45      	ittet	mi
 8007a76:	f1c5 0301 	rsbmi	r3, r5, #1
 8007a7a:	9304      	strmi	r3, [sp, #16]
 8007a7c:	2300      	movpl	r3, #0
 8007a7e:	2300      	movmi	r3, #0
 8007a80:	bf4c      	ite	mi
 8007a82:	9305      	strmi	r3, [sp, #20]
 8007a84:	9304      	strpl	r3, [sp, #16]
 8007a86:	9b00      	ldr	r3, [sp, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	db3d      	blt.n	8007b08 <_dtoa_r+0x248>
 8007a8c:	9b05      	ldr	r3, [sp, #20]
 8007a8e:	9a00      	ldr	r2, [sp, #0]
 8007a90:	920a      	str	r2, [sp, #40]	; 0x28
 8007a92:	4413      	add	r3, r2
 8007a94:	9305      	str	r3, [sp, #20]
 8007a96:	2300      	movs	r3, #0
 8007a98:	9307      	str	r3, [sp, #28]
 8007a9a:	9b06      	ldr	r3, [sp, #24]
 8007a9c:	2b09      	cmp	r3, #9
 8007a9e:	f200 8089 	bhi.w	8007bb4 <_dtoa_r+0x2f4>
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	bfc4      	itt	gt
 8007aa6:	3b04      	subgt	r3, #4
 8007aa8:	9306      	strgt	r3, [sp, #24]
 8007aaa:	9b06      	ldr	r3, [sp, #24]
 8007aac:	f1a3 0302 	sub.w	r3, r3, #2
 8007ab0:	bfcc      	ite	gt
 8007ab2:	2500      	movgt	r5, #0
 8007ab4:	2501      	movle	r5, #1
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	f200 8087 	bhi.w	8007bca <_dtoa_r+0x30a>
 8007abc:	e8df f003 	tbb	[pc, r3]
 8007ac0:	59383a2d 	.word	0x59383a2d
 8007ac4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ac8:	441d      	add	r5, r3
 8007aca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	bfc1      	itttt	gt
 8007ad2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ad6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ada:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ade:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ae2:	bfda      	itte	le
 8007ae4:	f1c3 0320 	rsble	r3, r3, #32
 8007ae8:	fa06 f003 	lslle.w	r0, r6, r3
 8007aec:	4318      	orrgt	r0, r3
 8007aee:	f7f8 fd21 	bl	8000534 <__aeabi_ui2d>
 8007af2:	2301      	movs	r3, #1
 8007af4:	4606      	mov	r6, r0
 8007af6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007afa:	3d01      	subs	r5, #1
 8007afc:	930e      	str	r3, [sp, #56]	; 0x38
 8007afe:	e76a      	b.n	80079d6 <_dtoa_r+0x116>
 8007b00:	2301      	movs	r3, #1
 8007b02:	e7b2      	b.n	8007a6a <_dtoa_r+0x1aa>
 8007b04:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b06:	e7b1      	b.n	8007a6c <_dtoa_r+0x1ac>
 8007b08:	9b04      	ldr	r3, [sp, #16]
 8007b0a:	9a00      	ldr	r2, [sp, #0]
 8007b0c:	1a9b      	subs	r3, r3, r2
 8007b0e:	9304      	str	r3, [sp, #16]
 8007b10:	4253      	negs	r3, r2
 8007b12:	9307      	str	r3, [sp, #28]
 8007b14:	2300      	movs	r3, #0
 8007b16:	930a      	str	r3, [sp, #40]	; 0x28
 8007b18:	e7bf      	b.n	8007a9a <_dtoa_r+0x1da>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9308      	str	r3, [sp, #32]
 8007b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	dc55      	bgt.n	8007bd0 <_dtoa_r+0x310>
 8007b24:	2301      	movs	r3, #1
 8007b26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b2e:	e00c      	b.n	8007b4a <_dtoa_r+0x28a>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e7f3      	b.n	8007b1c <_dtoa_r+0x25c>
 8007b34:	2300      	movs	r3, #0
 8007b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b38:	9308      	str	r3, [sp, #32]
 8007b3a:	9b00      	ldr	r3, [sp, #0]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	9302      	str	r3, [sp, #8]
 8007b40:	3301      	adds	r3, #1
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	9303      	str	r3, [sp, #12]
 8007b46:	bfb8      	it	lt
 8007b48:	2301      	movlt	r3, #1
 8007b4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	6042      	str	r2, [r0, #4]
 8007b50:	2204      	movs	r2, #4
 8007b52:	f102 0614 	add.w	r6, r2, #20
 8007b56:	429e      	cmp	r6, r3
 8007b58:	6841      	ldr	r1, [r0, #4]
 8007b5a:	d93d      	bls.n	8007bd8 <_dtoa_r+0x318>
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 fda3 	bl	80086a8 <_Balloc>
 8007b62:	9001      	str	r0, [sp, #4]
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d13b      	bne.n	8007be0 <_dtoa_r+0x320>
 8007b68:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <_dtoa_r+0x2f0>)
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b70:	e6c0      	b.n	80078f4 <_dtoa_r+0x34>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e7df      	b.n	8007b36 <_dtoa_r+0x276>
 8007b76:	bf00      	nop
 8007b78:	636f4361 	.word	0x636f4361
 8007b7c:	3fd287a7 	.word	0x3fd287a7
 8007b80:	8b60c8b3 	.word	0x8b60c8b3
 8007b84:	3fc68a28 	.word	0x3fc68a28
 8007b88:	509f79fb 	.word	0x509f79fb
 8007b8c:	3fd34413 	.word	0x3fd34413
 8007b90:	08009c4e 	.word	0x08009c4e
 8007b94:	08009c65 	.word	0x08009c65
 8007b98:	7ff00000 	.word	0x7ff00000
 8007b9c:	08009c4a 	.word	0x08009c4a
 8007ba0:	08009c41 	.word	0x08009c41
 8007ba4:	08009b1d 	.word	0x08009b1d
 8007ba8:	3ff80000 	.word	0x3ff80000
 8007bac:	08009db8 	.word	0x08009db8
 8007bb0:	08009cc0 	.word	0x08009cc0
 8007bb4:	2501      	movs	r5, #1
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9306      	str	r3, [sp, #24]
 8007bba:	9508      	str	r5, [sp, #32]
 8007bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	2312      	movs	r3, #18
 8007bc8:	e7b0      	b.n	8007b2c <_dtoa_r+0x26c>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	9308      	str	r3, [sp, #32]
 8007bce:	e7f5      	b.n	8007bbc <_dtoa_r+0x2fc>
 8007bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bd6:	e7b8      	b.n	8007b4a <_dtoa_r+0x28a>
 8007bd8:	3101      	adds	r1, #1
 8007bda:	6041      	str	r1, [r0, #4]
 8007bdc:	0052      	lsls	r2, r2, #1
 8007bde:	e7b8      	b.n	8007b52 <_dtoa_r+0x292>
 8007be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007be2:	9a01      	ldr	r2, [sp, #4]
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	9b03      	ldr	r3, [sp, #12]
 8007be8:	2b0e      	cmp	r3, #14
 8007bea:	f200 809d 	bhi.w	8007d28 <_dtoa_r+0x468>
 8007bee:	2d00      	cmp	r5, #0
 8007bf0:	f000 809a 	beq.w	8007d28 <_dtoa_r+0x468>
 8007bf4:	9b00      	ldr	r3, [sp, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	dd32      	ble.n	8007c60 <_dtoa_r+0x3a0>
 8007bfa:	4ab7      	ldr	r2, [pc, #732]	; (8007ed8 <_dtoa_r+0x618>)
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c08:	9b00      	ldr	r3, [sp, #0]
 8007c0a:	05d8      	lsls	r0, r3, #23
 8007c0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007c10:	d516      	bpl.n	8007c40 <_dtoa_r+0x380>
 8007c12:	4bb2      	ldr	r3, [pc, #712]	; (8007edc <_dtoa_r+0x61c>)
 8007c14:	ec51 0b19 	vmov	r0, r1, d9
 8007c18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c1c:	f7f8 fe2e 	bl	800087c <__aeabi_ddiv>
 8007c20:	f007 070f 	and.w	r7, r7, #15
 8007c24:	4682      	mov	sl, r0
 8007c26:	468b      	mov	fp, r1
 8007c28:	2503      	movs	r5, #3
 8007c2a:	4eac      	ldr	r6, [pc, #688]	; (8007edc <_dtoa_r+0x61c>)
 8007c2c:	b957      	cbnz	r7, 8007c44 <_dtoa_r+0x384>
 8007c2e:	4642      	mov	r2, r8
 8007c30:	464b      	mov	r3, r9
 8007c32:	4650      	mov	r0, sl
 8007c34:	4659      	mov	r1, fp
 8007c36:	f7f8 fe21 	bl	800087c <__aeabi_ddiv>
 8007c3a:	4682      	mov	sl, r0
 8007c3c:	468b      	mov	fp, r1
 8007c3e:	e028      	b.n	8007c92 <_dtoa_r+0x3d2>
 8007c40:	2502      	movs	r5, #2
 8007c42:	e7f2      	b.n	8007c2a <_dtoa_r+0x36a>
 8007c44:	07f9      	lsls	r1, r7, #31
 8007c46:	d508      	bpl.n	8007c5a <_dtoa_r+0x39a>
 8007c48:	4640      	mov	r0, r8
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c50:	f7f8 fcea 	bl	8000628 <__aeabi_dmul>
 8007c54:	3501      	adds	r5, #1
 8007c56:	4680      	mov	r8, r0
 8007c58:	4689      	mov	r9, r1
 8007c5a:	107f      	asrs	r7, r7, #1
 8007c5c:	3608      	adds	r6, #8
 8007c5e:	e7e5      	b.n	8007c2c <_dtoa_r+0x36c>
 8007c60:	f000 809b 	beq.w	8007d9a <_dtoa_r+0x4da>
 8007c64:	9b00      	ldr	r3, [sp, #0]
 8007c66:	4f9d      	ldr	r7, [pc, #628]	; (8007edc <_dtoa_r+0x61c>)
 8007c68:	425e      	negs	r6, r3
 8007c6a:	4b9b      	ldr	r3, [pc, #620]	; (8007ed8 <_dtoa_r+0x618>)
 8007c6c:	f006 020f 	and.w	r2, r6, #15
 8007c70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	ec51 0b19 	vmov	r0, r1, d9
 8007c7c:	f7f8 fcd4 	bl	8000628 <__aeabi_dmul>
 8007c80:	1136      	asrs	r6, r6, #4
 8007c82:	4682      	mov	sl, r0
 8007c84:	468b      	mov	fp, r1
 8007c86:	2300      	movs	r3, #0
 8007c88:	2502      	movs	r5, #2
 8007c8a:	2e00      	cmp	r6, #0
 8007c8c:	d17a      	bne.n	8007d84 <_dtoa_r+0x4c4>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1d3      	bne.n	8007c3a <_dtoa_r+0x37a>
 8007c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 8082 	beq.w	8007d9e <_dtoa_r+0x4de>
 8007c9a:	4b91      	ldr	r3, [pc, #580]	; (8007ee0 <_dtoa_r+0x620>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4650      	mov	r0, sl
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	f7f8 ff33 	bl	8000b0c <__aeabi_dcmplt>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d079      	beq.n	8007d9e <_dtoa_r+0x4de>
 8007caa:	9b03      	ldr	r3, [sp, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d076      	beq.n	8007d9e <_dtoa_r+0x4de>
 8007cb0:	9b02      	ldr	r3, [sp, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dd36      	ble.n	8007d24 <_dtoa_r+0x464>
 8007cb6:	9b00      	ldr	r3, [sp, #0]
 8007cb8:	4650      	mov	r0, sl
 8007cba:	4659      	mov	r1, fp
 8007cbc:	1e5f      	subs	r7, r3, #1
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	4b88      	ldr	r3, [pc, #544]	; (8007ee4 <_dtoa_r+0x624>)
 8007cc2:	f7f8 fcb1 	bl	8000628 <__aeabi_dmul>
 8007cc6:	9e02      	ldr	r6, [sp, #8]
 8007cc8:	4682      	mov	sl, r0
 8007cca:	468b      	mov	fp, r1
 8007ccc:	3501      	adds	r5, #1
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f7f8 fc40 	bl	8000554 <__aeabi_i2d>
 8007cd4:	4652      	mov	r2, sl
 8007cd6:	465b      	mov	r3, fp
 8007cd8:	f7f8 fca6 	bl	8000628 <__aeabi_dmul>
 8007cdc:	4b82      	ldr	r3, [pc, #520]	; (8007ee8 <_dtoa_r+0x628>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f7f8 faec 	bl	80002bc <__adddf3>
 8007ce4:	46d0      	mov	r8, sl
 8007ce6:	46d9      	mov	r9, fp
 8007ce8:	4682      	mov	sl, r0
 8007cea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007cee:	2e00      	cmp	r6, #0
 8007cf0:	d158      	bne.n	8007da4 <_dtoa_r+0x4e4>
 8007cf2:	4b7e      	ldr	r3, [pc, #504]	; (8007eec <_dtoa_r+0x62c>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	f7f8 fadd 	bl	80002b8 <__aeabi_dsub>
 8007cfe:	4652      	mov	r2, sl
 8007d00:	465b      	mov	r3, fp
 8007d02:	4680      	mov	r8, r0
 8007d04:	4689      	mov	r9, r1
 8007d06:	f7f8 ff1f 	bl	8000b48 <__aeabi_dcmpgt>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	f040 8295 	bne.w	800823a <_dtoa_r+0x97a>
 8007d10:	4652      	mov	r2, sl
 8007d12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d16:	4640      	mov	r0, r8
 8007d18:	4649      	mov	r1, r9
 8007d1a:	f7f8 fef7 	bl	8000b0c <__aeabi_dcmplt>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	f040 8289 	bne.w	8008236 <_dtoa_r+0x976>
 8007d24:	ec5b ab19 	vmov	sl, fp, d9
 8007d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f2c0 8148 	blt.w	8007fc0 <_dtoa_r+0x700>
 8007d30:	9a00      	ldr	r2, [sp, #0]
 8007d32:	2a0e      	cmp	r2, #14
 8007d34:	f300 8144 	bgt.w	8007fc0 <_dtoa_r+0x700>
 8007d38:	4b67      	ldr	r3, [pc, #412]	; (8007ed8 <_dtoa_r+0x618>)
 8007d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f280 80d5 	bge.w	8007ef4 <_dtoa_r+0x634>
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f300 80d1 	bgt.w	8007ef4 <_dtoa_r+0x634>
 8007d52:	f040 826f 	bne.w	8008234 <_dtoa_r+0x974>
 8007d56:	4b65      	ldr	r3, [pc, #404]	; (8007eec <_dtoa_r+0x62c>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	f7f8 fc63 	bl	8000628 <__aeabi_dmul>
 8007d62:	4652      	mov	r2, sl
 8007d64:	465b      	mov	r3, fp
 8007d66:	f7f8 fee5 	bl	8000b34 <__aeabi_dcmpge>
 8007d6a:	9e03      	ldr	r6, [sp, #12]
 8007d6c:	4637      	mov	r7, r6
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f040 8245 	bne.w	80081fe <_dtoa_r+0x93e>
 8007d74:	9d01      	ldr	r5, [sp, #4]
 8007d76:	2331      	movs	r3, #49	; 0x31
 8007d78:	f805 3b01 	strb.w	r3, [r5], #1
 8007d7c:	9b00      	ldr	r3, [sp, #0]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	e240      	b.n	8008206 <_dtoa_r+0x946>
 8007d84:	07f2      	lsls	r2, r6, #31
 8007d86:	d505      	bpl.n	8007d94 <_dtoa_r+0x4d4>
 8007d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d8c:	f7f8 fc4c 	bl	8000628 <__aeabi_dmul>
 8007d90:	3501      	adds	r5, #1
 8007d92:	2301      	movs	r3, #1
 8007d94:	1076      	asrs	r6, r6, #1
 8007d96:	3708      	adds	r7, #8
 8007d98:	e777      	b.n	8007c8a <_dtoa_r+0x3ca>
 8007d9a:	2502      	movs	r5, #2
 8007d9c:	e779      	b.n	8007c92 <_dtoa_r+0x3d2>
 8007d9e:	9f00      	ldr	r7, [sp, #0]
 8007da0:	9e03      	ldr	r6, [sp, #12]
 8007da2:	e794      	b.n	8007cce <_dtoa_r+0x40e>
 8007da4:	9901      	ldr	r1, [sp, #4]
 8007da6:	4b4c      	ldr	r3, [pc, #304]	; (8007ed8 <_dtoa_r+0x618>)
 8007da8:	4431      	add	r1, r6
 8007daa:	910d      	str	r1, [sp, #52]	; 0x34
 8007dac:	9908      	ldr	r1, [sp, #32]
 8007dae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007db2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007db6:	2900      	cmp	r1, #0
 8007db8:	d043      	beq.n	8007e42 <_dtoa_r+0x582>
 8007dba:	494d      	ldr	r1, [pc, #308]	; (8007ef0 <_dtoa_r+0x630>)
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f7f8 fd5d 	bl	800087c <__aeabi_ddiv>
 8007dc2:	4652      	mov	r2, sl
 8007dc4:	465b      	mov	r3, fp
 8007dc6:	f7f8 fa77 	bl	80002b8 <__aeabi_dsub>
 8007dca:	9d01      	ldr	r5, [sp, #4]
 8007dcc:	4682      	mov	sl, r0
 8007dce:	468b      	mov	fp, r1
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	4640      	mov	r0, r8
 8007dd4:	f7f8 fed8 	bl	8000b88 <__aeabi_d2iz>
 8007dd8:	4606      	mov	r6, r0
 8007dda:	f7f8 fbbb 	bl	8000554 <__aeabi_i2d>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	4640      	mov	r0, r8
 8007de4:	4649      	mov	r1, r9
 8007de6:	f7f8 fa67 	bl	80002b8 <__aeabi_dsub>
 8007dea:	3630      	adds	r6, #48	; 0x30
 8007dec:	f805 6b01 	strb.w	r6, [r5], #1
 8007df0:	4652      	mov	r2, sl
 8007df2:	465b      	mov	r3, fp
 8007df4:	4680      	mov	r8, r0
 8007df6:	4689      	mov	r9, r1
 8007df8:	f7f8 fe88 	bl	8000b0c <__aeabi_dcmplt>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d163      	bne.n	8007ec8 <_dtoa_r+0x608>
 8007e00:	4642      	mov	r2, r8
 8007e02:	464b      	mov	r3, r9
 8007e04:	4936      	ldr	r1, [pc, #216]	; (8007ee0 <_dtoa_r+0x620>)
 8007e06:	2000      	movs	r0, #0
 8007e08:	f7f8 fa56 	bl	80002b8 <__aeabi_dsub>
 8007e0c:	4652      	mov	r2, sl
 8007e0e:	465b      	mov	r3, fp
 8007e10:	f7f8 fe7c 	bl	8000b0c <__aeabi_dcmplt>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	f040 80b5 	bne.w	8007f84 <_dtoa_r+0x6c4>
 8007e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e1c:	429d      	cmp	r5, r3
 8007e1e:	d081      	beq.n	8007d24 <_dtoa_r+0x464>
 8007e20:	4b30      	ldr	r3, [pc, #192]	; (8007ee4 <_dtoa_r+0x624>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	4650      	mov	r0, sl
 8007e26:	4659      	mov	r1, fp
 8007e28:	f7f8 fbfe 	bl	8000628 <__aeabi_dmul>
 8007e2c:	4b2d      	ldr	r3, [pc, #180]	; (8007ee4 <_dtoa_r+0x624>)
 8007e2e:	4682      	mov	sl, r0
 8007e30:	468b      	mov	fp, r1
 8007e32:	4640      	mov	r0, r8
 8007e34:	4649      	mov	r1, r9
 8007e36:	2200      	movs	r2, #0
 8007e38:	f7f8 fbf6 	bl	8000628 <__aeabi_dmul>
 8007e3c:	4680      	mov	r8, r0
 8007e3e:	4689      	mov	r9, r1
 8007e40:	e7c6      	b.n	8007dd0 <_dtoa_r+0x510>
 8007e42:	4650      	mov	r0, sl
 8007e44:	4659      	mov	r1, fp
 8007e46:	f7f8 fbef 	bl	8000628 <__aeabi_dmul>
 8007e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e4c:	9d01      	ldr	r5, [sp, #4]
 8007e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e50:	4682      	mov	sl, r0
 8007e52:	468b      	mov	fp, r1
 8007e54:	4649      	mov	r1, r9
 8007e56:	4640      	mov	r0, r8
 8007e58:	f7f8 fe96 	bl	8000b88 <__aeabi_d2iz>
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	f7f8 fb79 	bl	8000554 <__aeabi_i2d>
 8007e62:	3630      	adds	r6, #48	; 0x30
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4640      	mov	r0, r8
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	f7f8 fa24 	bl	80002b8 <__aeabi_dsub>
 8007e70:	f805 6b01 	strb.w	r6, [r5], #1
 8007e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e76:	429d      	cmp	r5, r3
 8007e78:	4680      	mov	r8, r0
 8007e7a:	4689      	mov	r9, r1
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	d124      	bne.n	8007ecc <_dtoa_r+0x60c>
 8007e82:	4b1b      	ldr	r3, [pc, #108]	; (8007ef0 <_dtoa_r+0x630>)
 8007e84:	4650      	mov	r0, sl
 8007e86:	4659      	mov	r1, fp
 8007e88:	f7f8 fa18 	bl	80002bc <__adddf3>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4640      	mov	r0, r8
 8007e92:	4649      	mov	r1, r9
 8007e94:	f7f8 fe58 	bl	8000b48 <__aeabi_dcmpgt>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d173      	bne.n	8007f84 <_dtoa_r+0x6c4>
 8007e9c:	4652      	mov	r2, sl
 8007e9e:	465b      	mov	r3, fp
 8007ea0:	4913      	ldr	r1, [pc, #76]	; (8007ef0 <_dtoa_r+0x630>)
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	f7f8 fa08 	bl	80002b8 <__aeabi_dsub>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4640      	mov	r0, r8
 8007eae:	4649      	mov	r1, r9
 8007eb0:	f7f8 fe2c 	bl	8000b0c <__aeabi_dcmplt>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f43f af35 	beq.w	8007d24 <_dtoa_r+0x464>
 8007eba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ebc:	1e6b      	subs	r3, r5, #1
 8007ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ec4:	2b30      	cmp	r3, #48	; 0x30
 8007ec6:	d0f8      	beq.n	8007eba <_dtoa_r+0x5fa>
 8007ec8:	9700      	str	r7, [sp, #0]
 8007eca:	e049      	b.n	8007f60 <_dtoa_r+0x6a0>
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <_dtoa_r+0x624>)
 8007ece:	f7f8 fbab 	bl	8000628 <__aeabi_dmul>
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	4689      	mov	r9, r1
 8007ed6:	e7bd      	b.n	8007e54 <_dtoa_r+0x594>
 8007ed8:	08009db8 	.word	0x08009db8
 8007edc:	08009d90 	.word	0x08009d90
 8007ee0:	3ff00000 	.word	0x3ff00000
 8007ee4:	40240000 	.word	0x40240000
 8007ee8:	401c0000 	.word	0x401c0000
 8007eec:	40140000 	.word	0x40140000
 8007ef0:	3fe00000 	.word	0x3fe00000
 8007ef4:	9d01      	ldr	r5, [sp, #4]
 8007ef6:	4656      	mov	r6, sl
 8007ef8:	465f      	mov	r7, fp
 8007efa:	4642      	mov	r2, r8
 8007efc:	464b      	mov	r3, r9
 8007efe:	4630      	mov	r0, r6
 8007f00:	4639      	mov	r1, r7
 8007f02:	f7f8 fcbb 	bl	800087c <__aeabi_ddiv>
 8007f06:	f7f8 fe3f 	bl	8000b88 <__aeabi_d2iz>
 8007f0a:	4682      	mov	sl, r0
 8007f0c:	f7f8 fb22 	bl	8000554 <__aeabi_i2d>
 8007f10:	4642      	mov	r2, r8
 8007f12:	464b      	mov	r3, r9
 8007f14:	f7f8 fb88 	bl	8000628 <__aeabi_dmul>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	4639      	mov	r1, r7
 8007f20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007f24:	f7f8 f9c8 	bl	80002b8 <__aeabi_dsub>
 8007f28:	f805 6b01 	strb.w	r6, [r5], #1
 8007f2c:	9e01      	ldr	r6, [sp, #4]
 8007f2e:	9f03      	ldr	r7, [sp, #12]
 8007f30:	1bae      	subs	r6, r5, r6
 8007f32:	42b7      	cmp	r7, r6
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	d135      	bne.n	8007fa6 <_dtoa_r+0x6e6>
 8007f3a:	f7f8 f9bf 	bl	80002bc <__adddf3>
 8007f3e:	4642      	mov	r2, r8
 8007f40:	464b      	mov	r3, r9
 8007f42:	4606      	mov	r6, r0
 8007f44:	460f      	mov	r7, r1
 8007f46:	f7f8 fdff 	bl	8000b48 <__aeabi_dcmpgt>
 8007f4a:	b9d0      	cbnz	r0, 8007f82 <_dtoa_r+0x6c2>
 8007f4c:	4642      	mov	r2, r8
 8007f4e:	464b      	mov	r3, r9
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 fdd0 	bl	8000af8 <__aeabi_dcmpeq>
 8007f58:	b110      	cbz	r0, 8007f60 <_dtoa_r+0x6a0>
 8007f5a:	f01a 0f01 	tst.w	sl, #1
 8007f5e:	d110      	bne.n	8007f82 <_dtoa_r+0x6c2>
 8007f60:	4620      	mov	r0, r4
 8007f62:	ee18 1a10 	vmov	r1, s16
 8007f66:	f000 fbdf 	bl	8008728 <_Bfree>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	9800      	ldr	r0, [sp, #0]
 8007f6e:	702b      	strb	r3, [r5, #0]
 8007f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f72:	3001      	adds	r0, #1
 8007f74:	6018      	str	r0, [r3, #0]
 8007f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f43f acf1 	beq.w	8007960 <_dtoa_r+0xa0>
 8007f7e:	601d      	str	r5, [r3, #0]
 8007f80:	e4ee      	b.n	8007960 <_dtoa_r+0xa0>
 8007f82:	9f00      	ldr	r7, [sp, #0]
 8007f84:	462b      	mov	r3, r5
 8007f86:	461d      	mov	r5, r3
 8007f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f8c:	2a39      	cmp	r2, #57	; 0x39
 8007f8e:	d106      	bne.n	8007f9e <_dtoa_r+0x6de>
 8007f90:	9a01      	ldr	r2, [sp, #4]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d1f7      	bne.n	8007f86 <_dtoa_r+0x6c6>
 8007f96:	9901      	ldr	r1, [sp, #4]
 8007f98:	2230      	movs	r2, #48	; 0x30
 8007f9a:	3701      	adds	r7, #1
 8007f9c:	700a      	strb	r2, [r1, #0]
 8007f9e:	781a      	ldrb	r2, [r3, #0]
 8007fa0:	3201      	adds	r2, #1
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	e790      	b.n	8007ec8 <_dtoa_r+0x608>
 8007fa6:	4ba6      	ldr	r3, [pc, #664]	; (8008240 <_dtoa_r+0x980>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f7f8 fb3d 	bl	8000628 <__aeabi_dmul>
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	f7f8 fd9f 	bl	8000af8 <__aeabi_dcmpeq>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d09d      	beq.n	8007efa <_dtoa_r+0x63a>
 8007fbe:	e7cf      	b.n	8007f60 <_dtoa_r+0x6a0>
 8007fc0:	9a08      	ldr	r2, [sp, #32]
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	f000 80d7 	beq.w	8008176 <_dtoa_r+0x8b6>
 8007fc8:	9a06      	ldr	r2, [sp, #24]
 8007fca:	2a01      	cmp	r2, #1
 8007fcc:	f300 80ba 	bgt.w	8008144 <_dtoa_r+0x884>
 8007fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	f000 80b2 	beq.w	800813c <_dtoa_r+0x87c>
 8007fd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fdc:	9e07      	ldr	r6, [sp, #28]
 8007fde:	9d04      	ldr	r5, [sp, #16]
 8007fe0:	9a04      	ldr	r2, [sp, #16]
 8007fe2:	441a      	add	r2, r3
 8007fe4:	9204      	str	r2, [sp, #16]
 8007fe6:	9a05      	ldr	r2, [sp, #20]
 8007fe8:	2101      	movs	r1, #1
 8007fea:	441a      	add	r2, r3
 8007fec:	4620      	mov	r0, r4
 8007fee:	9205      	str	r2, [sp, #20]
 8007ff0:	f000 fc52 	bl	8008898 <__i2b>
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	2d00      	cmp	r5, #0
 8007ff8:	dd0c      	ble.n	8008014 <_dtoa_r+0x754>
 8007ffa:	9b05      	ldr	r3, [sp, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dd09      	ble.n	8008014 <_dtoa_r+0x754>
 8008000:	42ab      	cmp	r3, r5
 8008002:	9a04      	ldr	r2, [sp, #16]
 8008004:	bfa8      	it	ge
 8008006:	462b      	movge	r3, r5
 8008008:	1ad2      	subs	r2, r2, r3
 800800a:	9204      	str	r2, [sp, #16]
 800800c:	9a05      	ldr	r2, [sp, #20]
 800800e:	1aed      	subs	r5, r5, r3
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	9b07      	ldr	r3, [sp, #28]
 8008016:	b31b      	cbz	r3, 8008060 <_dtoa_r+0x7a0>
 8008018:	9b08      	ldr	r3, [sp, #32]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 80af 	beq.w	800817e <_dtoa_r+0x8be>
 8008020:	2e00      	cmp	r6, #0
 8008022:	dd13      	ble.n	800804c <_dtoa_r+0x78c>
 8008024:	4639      	mov	r1, r7
 8008026:	4632      	mov	r2, r6
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fcf5 	bl	8008a18 <__pow5mult>
 800802e:	ee18 2a10 	vmov	r2, s16
 8008032:	4601      	mov	r1, r0
 8008034:	4607      	mov	r7, r0
 8008036:	4620      	mov	r0, r4
 8008038:	f000 fc44 	bl	80088c4 <__multiply>
 800803c:	ee18 1a10 	vmov	r1, s16
 8008040:	4680      	mov	r8, r0
 8008042:	4620      	mov	r0, r4
 8008044:	f000 fb70 	bl	8008728 <_Bfree>
 8008048:	ee08 8a10 	vmov	s16, r8
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	1b9a      	subs	r2, r3, r6
 8008050:	d006      	beq.n	8008060 <_dtoa_r+0x7a0>
 8008052:	ee18 1a10 	vmov	r1, s16
 8008056:	4620      	mov	r0, r4
 8008058:	f000 fcde 	bl	8008a18 <__pow5mult>
 800805c:	ee08 0a10 	vmov	s16, r0
 8008060:	2101      	movs	r1, #1
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fc18 	bl	8008898 <__i2b>
 8008068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	4606      	mov	r6, r0
 800806e:	f340 8088 	ble.w	8008182 <_dtoa_r+0x8c2>
 8008072:	461a      	mov	r2, r3
 8008074:	4601      	mov	r1, r0
 8008076:	4620      	mov	r0, r4
 8008078:	f000 fcce 	bl	8008a18 <__pow5mult>
 800807c:	9b06      	ldr	r3, [sp, #24]
 800807e:	2b01      	cmp	r3, #1
 8008080:	4606      	mov	r6, r0
 8008082:	f340 8081 	ble.w	8008188 <_dtoa_r+0x8c8>
 8008086:	f04f 0800 	mov.w	r8, #0
 800808a:	6933      	ldr	r3, [r6, #16]
 800808c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008090:	6918      	ldr	r0, [r3, #16]
 8008092:	f000 fbb1 	bl	80087f8 <__hi0bits>
 8008096:	f1c0 0020 	rsb	r0, r0, #32
 800809a:	9b05      	ldr	r3, [sp, #20]
 800809c:	4418      	add	r0, r3
 800809e:	f010 001f 	ands.w	r0, r0, #31
 80080a2:	f000 8092 	beq.w	80081ca <_dtoa_r+0x90a>
 80080a6:	f1c0 0320 	rsb	r3, r0, #32
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	f340 808a 	ble.w	80081c4 <_dtoa_r+0x904>
 80080b0:	f1c0 001c 	rsb	r0, r0, #28
 80080b4:	9b04      	ldr	r3, [sp, #16]
 80080b6:	4403      	add	r3, r0
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	9b05      	ldr	r3, [sp, #20]
 80080bc:	4403      	add	r3, r0
 80080be:	4405      	add	r5, r0
 80080c0:	9305      	str	r3, [sp, #20]
 80080c2:	9b04      	ldr	r3, [sp, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dd07      	ble.n	80080d8 <_dtoa_r+0x818>
 80080c8:	ee18 1a10 	vmov	r1, s16
 80080cc:	461a      	mov	r2, r3
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 fcfc 	bl	8008acc <__lshift>
 80080d4:	ee08 0a10 	vmov	s16, r0
 80080d8:	9b05      	ldr	r3, [sp, #20]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	dd05      	ble.n	80080ea <_dtoa_r+0x82a>
 80080de:	4631      	mov	r1, r6
 80080e0:	461a      	mov	r2, r3
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fcf2 	bl	8008acc <__lshift>
 80080e8:	4606      	mov	r6, r0
 80080ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d06e      	beq.n	80081ce <_dtoa_r+0x90e>
 80080f0:	ee18 0a10 	vmov	r0, s16
 80080f4:	4631      	mov	r1, r6
 80080f6:	f000 fd59 	bl	8008bac <__mcmp>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	da67      	bge.n	80081ce <_dtoa_r+0x90e>
 80080fe:	9b00      	ldr	r3, [sp, #0]
 8008100:	3b01      	subs	r3, #1
 8008102:	ee18 1a10 	vmov	r1, s16
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	220a      	movs	r2, #10
 800810a:	2300      	movs	r3, #0
 800810c:	4620      	mov	r0, r4
 800810e:	f000 fb2d 	bl	800876c <__multadd>
 8008112:	9b08      	ldr	r3, [sp, #32]
 8008114:	ee08 0a10 	vmov	s16, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 81b1 	beq.w	8008480 <_dtoa_r+0xbc0>
 800811e:	2300      	movs	r3, #0
 8008120:	4639      	mov	r1, r7
 8008122:	220a      	movs	r2, #10
 8008124:	4620      	mov	r0, r4
 8008126:	f000 fb21 	bl	800876c <__multadd>
 800812a:	9b02      	ldr	r3, [sp, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	4607      	mov	r7, r0
 8008130:	f300 808e 	bgt.w	8008250 <_dtoa_r+0x990>
 8008134:	9b06      	ldr	r3, [sp, #24]
 8008136:	2b02      	cmp	r3, #2
 8008138:	dc51      	bgt.n	80081de <_dtoa_r+0x91e>
 800813a:	e089      	b.n	8008250 <_dtoa_r+0x990>
 800813c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800813e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008142:	e74b      	b.n	8007fdc <_dtoa_r+0x71c>
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	1e5e      	subs	r6, r3, #1
 8008148:	9b07      	ldr	r3, [sp, #28]
 800814a:	42b3      	cmp	r3, r6
 800814c:	bfbf      	itttt	lt
 800814e:	9b07      	ldrlt	r3, [sp, #28]
 8008150:	9607      	strlt	r6, [sp, #28]
 8008152:	1af2      	sublt	r2, r6, r3
 8008154:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008156:	bfb6      	itet	lt
 8008158:	189b      	addlt	r3, r3, r2
 800815a:	1b9e      	subge	r6, r3, r6
 800815c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	bfb8      	it	lt
 8008162:	2600      	movlt	r6, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	bfb7      	itett	lt
 8008168:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800816c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008170:	1a9d      	sublt	r5, r3, r2
 8008172:	2300      	movlt	r3, #0
 8008174:	e734      	b.n	8007fe0 <_dtoa_r+0x720>
 8008176:	9e07      	ldr	r6, [sp, #28]
 8008178:	9d04      	ldr	r5, [sp, #16]
 800817a:	9f08      	ldr	r7, [sp, #32]
 800817c:	e73b      	b.n	8007ff6 <_dtoa_r+0x736>
 800817e:	9a07      	ldr	r2, [sp, #28]
 8008180:	e767      	b.n	8008052 <_dtoa_r+0x792>
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	2b01      	cmp	r3, #1
 8008186:	dc18      	bgt.n	80081ba <_dtoa_r+0x8fa>
 8008188:	f1ba 0f00 	cmp.w	sl, #0
 800818c:	d115      	bne.n	80081ba <_dtoa_r+0x8fa>
 800818e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008192:	b993      	cbnz	r3, 80081ba <_dtoa_r+0x8fa>
 8008194:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008198:	0d1b      	lsrs	r3, r3, #20
 800819a:	051b      	lsls	r3, r3, #20
 800819c:	b183      	cbz	r3, 80081c0 <_dtoa_r+0x900>
 800819e:	9b04      	ldr	r3, [sp, #16]
 80081a0:	3301      	adds	r3, #1
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	9b05      	ldr	r3, [sp, #20]
 80081a6:	3301      	adds	r3, #1
 80081a8:	9305      	str	r3, [sp, #20]
 80081aa:	f04f 0801 	mov.w	r8, #1
 80081ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f47f af6a 	bne.w	800808a <_dtoa_r+0x7ca>
 80081b6:	2001      	movs	r0, #1
 80081b8:	e76f      	b.n	800809a <_dtoa_r+0x7da>
 80081ba:	f04f 0800 	mov.w	r8, #0
 80081be:	e7f6      	b.n	80081ae <_dtoa_r+0x8ee>
 80081c0:	4698      	mov	r8, r3
 80081c2:	e7f4      	b.n	80081ae <_dtoa_r+0x8ee>
 80081c4:	f43f af7d 	beq.w	80080c2 <_dtoa_r+0x802>
 80081c8:	4618      	mov	r0, r3
 80081ca:	301c      	adds	r0, #28
 80081cc:	e772      	b.n	80080b4 <_dtoa_r+0x7f4>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dc37      	bgt.n	8008244 <_dtoa_r+0x984>
 80081d4:	9b06      	ldr	r3, [sp, #24]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	dd34      	ble.n	8008244 <_dtoa_r+0x984>
 80081da:	9b03      	ldr	r3, [sp, #12]
 80081dc:	9302      	str	r3, [sp, #8]
 80081de:	9b02      	ldr	r3, [sp, #8]
 80081e0:	b96b      	cbnz	r3, 80081fe <_dtoa_r+0x93e>
 80081e2:	4631      	mov	r1, r6
 80081e4:	2205      	movs	r2, #5
 80081e6:	4620      	mov	r0, r4
 80081e8:	f000 fac0 	bl	800876c <__multadd>
 80081ec:	4601      	mov	r1, r0
 80081ee:	4606      	mov	r6, r0
 80081f0:	ee18 0a10 	vmov	r0, s16
 80081f4:	f000 fcda 	bl	8008bac <__mcmp>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	f73f adbb 	bgt.w	8007d74 <_dtoa_r+0x4b4>
 80081fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008200:	9d01      	ldr	r5, [sp, #4]
 8008202:	43db      	mvns	r3, r3
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	f04f 0800 	mov.w	r8, #0
 800820a:	4631      	mov	r1, r6
 800820c:	4620      	mov	r0, r4
 800820e:	f000 fa8b 	bl	8008728 <_Bfree>
 8008212:	2f00      	cmp	r7, #0
 8008214:	f43f aea4 	beq.w	8007f60 <_dtoa_r+0x6a0>
 8008218:	f1b8 0f00 	cmp.w	r8, #0
 800821c:	d005      	beq.n	800822a <_dtoa_r+0x96a>
 800821e:	45b8      	cmp	r8, r7
 8008220:	d003      	beq.n	800822a <_dtoa_r+0x96a>
 8008222:	4641      	mov	r1, r8
 8008224:	4620      	mov	r0, r4
 8008226:	f000 fa7f 	bl	8008728 <_Bfree>
 800822a:	4639      	mov	r1, r7
 800822c:	4620      	mov	r0, r4
 800822e:	f000 fa7b 	bl	8008728 <_Bfree>
 8008232:	e695      	b.n	8007f60 <_dtoa_r+0x6a0>
 8008234:	2600      	movs	r6, #0
 8008236:	4637      	mov	r7, r6
 8008238:	e7e1      	b.n	80081fe <_dtoa_r+0x93e>
 800823a:	9700      	str	r7, [sp, #0]
 800823c:	4637      	mov	r7, r6
 800823e:	e599      	b.n	8007d74 <_dtoa_r+0x4b4>
 8008240:	40240000 	.word	0x40240000
 8008244:	9b08      	ldr	r3, [sp, #32]
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 80ca 	beq.w	80083e0 <_dtoa_r+0xb20>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	9302      	str	r3, [sp, #8]
 8008250:	2d00      	cmp	r5, #0
 8008252:	dd05      	ble.n	8008260 <_dtoa_r+0x9a0>
 8008254:	4639      	mov	r1, r7
 8008256:	462a      	mov	r2, r5
 8008258:	4620      	mov	r0, r4
 800825a:	f000 fc37 	bl	8008acc <__lshift>
 800825e:	4607      	mov	r7, r0
 8008260:	f1b8 0f00 	cmp.w	r8, #0
 8008264:	d05b      	beq.n	800831e <_dtoa_r+0xa5e>
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fa1d 	bl	80086a8 <_Balloc>
 800826e:	4605      	mov	r5, r0
 8008270:	b928      	cbnz	r0, 800827e <_dtoa_r+0x9be>
 8008272:	4b87      	ldr	r3, [pc, #540]	; (8008490 <_dtoa_r+0xbd0>)
 8008274:	4602      	mov	r2, r0
 8008276:	f240 21ea 	movw	r1, #746	; 0x2ea
 800827a:	f7ff bb3b 	b.w	80078f4 <_dtoa_r+0x34>
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	3202      	adds	r2, #2
 8008282:	0092      	lsls	r2, r2, #2
 8008284:	f107 010c 	add.w	r1, r7, #12
 8008288:	300c      	adds	r0, #12
 800828a:	f7fe fc9b 	bl	8006bc4 <memcpy>
 800828e:	2201      	movs	r2, #1
 8008290:	4629      	mov	r1, r5
 8008292:	4620      	mov	r0, r4
 8008294:	f000 fc1a 	bl	8008acc <__lshift>
 8008298:	9b01      	ldr	r3, [sp, #4]
 800829a:	f103 0901 	add.w	r9, r3, #1
 800829e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80082a2:	4413      	add	r3, r2
 80082a4:	9305      	str	r3, [sp, #20]
 80082a6:	f00a 0301 	and.w	r3, sl, #1
 80082aa:	46b8      	mov	r8, r7
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	4607      	mov	r7, r0
 80082b0:	4631      	mov	r1, r6
 80082b2:	ee18 0a10 	vmov	r0, s16
 80082b6:	f7ff fa77 	bl	80077a8 <quorem>
 80082ba:	4641      	mov	r1, r8
 80082bc:	9002      	str	r0, [sp, #8]
 80082be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80082c2:	ee18 0a10 	vmov	r0, s16
 80082c6:	f000 fc71 	bl	8008bac <__mcmp>
 80082ca:	463a      	mov	r2, r7
 80082cc:	9003      	str	r0, [sp, #12]
 80082ce:	4631      	mov	r1, r6
 80082d0:	4620      	mov	r0, r4
 80082d2:	f000 fc87 	bl	8008be4 <__mdiff>
 80082d6:	68c2      	ldr	r2, [r0, #12]
 80082d8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80082dc:	4605      	mov	r5, r0
 80082de:	bb02      	cbnz	r2, 8008322 <_dtoa_r+0xa62>
 80082e0:	4601      	mov	r1, r0
 80082e2:	ee18 0a10 	vmov	r0, s16
 80082e6:	f000 fc61 	bl	8008bac <__mcmp>
 80082ea:	4602      	mov	r2, r0
 80082ec:	4629      	mov	r1, r5
 80082ee:	4620      	mov	r0, r4
 80082f0:	9207      	str	r2, [sp, #28]
 80082f2:	f000 fa19 	bl	8008728 <_Bfree>
 80082f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80082fa:	ea43 0102 	orr.w	r1, r3, r2
 80082fe:	9b04      	ldr	r3, [sp, #16]
 8008300:	430b      	orrs	r3, r1
 8008302:	464d      	mov	r5, r9
 8008304:	d10f      	bne.n	8008326 <_dtoa_r+0xa66>
 8008306:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800830a:	d02a      	beq.n	8008362 <_dtoa_r+0xaa2>
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	dd02      	ble.n	8008318 <_dtoa_r+0xa58>
 8008312:	9b02      	ldr	r3, [sp, #8]
 8008314:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008318:	f88b a000 	strb.w	sl, [fp]
 800831c:	e775      	b.n	800820a <_dtoa_r+0x94a>
 800831e:	4638      	mov	r0, r7
 8008320:	e7ba      	b.n	8008298 <_dtoa_r+0x9d8>
 8008322:	2201      	movs	r2, #1
 8008324:	e7e2      	b.n	80082ec <_dtoa_r+0xa2c>
 8008326:	9b03      	ldr	r3, [sp, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	db04      	blt.n	8008336 <_dtoa_r+0xa76>
 800832c:	9906      	ldr	r1, [sp, #24]
 800832e:	430b      	orrs	r3, r1
 8008330:	9904      	ldr	r1, [sp, #16]
 8008332:	430b      	orrs	r3, r1
 8008334:	d122      	bne.n	800837c <_dtoa_r+0xabc>
 8008336:	2a00      	cmp	r2, #0
 8008338:	ddee      	ble.n	8008318 <_dtoa_r+0xa58>
 800833a:	ee18 1a10 	vmov	r1, s16
 800833e:	2201      	movs	r2, #1
 8008340:	4620      	mov	r0, r4
 8008342:	f000 fbc3 	bl	8008acc <__lshift>
 8008346:	4631      	mov	r1, r6
 8008348:	ee08 0a10 	vmov	s16, r0
 800834c:	f000 fc2e 	bl	8008bac <__mcmp>
 8008350:	2800      	cmp	r0, #0
 8008352:	dc03      	bgt.n	800835c <_dtoa_r+0xa9c>
 8008354:	d1e0      	bne.n	8008318 <_dtoa_r+0xa58>
 8008356:	f01a 0f01 	tst.w	sl, #1
 800835a:	d0dd      	beq.n	8008318 <_dtoa_r+0xa58>
 800835c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008360:	d1d7      	bne.n	8008312 <_dtoa_r+0xa52>
 8008362:	2339      	movs	r3, #57	; 0x39
 8008364:	f88b 3000 	strb.w	r3, [fp]
 8008368:	462b      	mov	r3, r5
 800836a:	461d      	mov	r5, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008372:	2a39      	cmp	r2, #57	; 0x39
 8008374:	d071      	beq.n	800845a <_dtoa_r+0xb9a>
 8008376:	3201      	adds	r2, #1
 8008378:	701a      	strb	r2, [r3, #0]
 800837a:	e746      	b.n	800820a <_dtoa_r+0x94a>
 800837c:	2a00      	cmp	r2, #0
 800837e:	dd07      	ble.n	8008390 <_dtoa_r+0xad0>
 8008380:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008384:	d0ed      	beq.n	8008362 <_dtoa_r+0xaa2>
 8008386:	f10a 0301 	add.w	r3, sl, #1
 800838a:	f88b 3000 	strb.w	r3, [fp]
 800838e:	e73c      	b.n	800820a <_dtoa_r+0x94a>
 8008390:	9b05      	ldr	r3, [sp, #20]
 8008392:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008396:	4599      	cmp	r9, r3
 8008398:	d047      	beq.n	800842a <_dtoa_r+0xb6a>
 800839a:	ee18 1a10 	vmov	r1, s16
 800839e:	2300      	movs	r3, #0
 80083a0:	220a      	movs	r2, #10
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f9e2 	bl	800876c <__multadd>
 80083a8:	45b8      	cmp	r8, r7
 80083aa:	ee08 0a10 	vmov	s16, r0
 80083ae:	f04f 0300 	mov.w	r3, #0
 80083b2:	f04f 020a 	mov.w	r2, #10
 80083b6:	4641      	mov	r1, r8
 80083b8:	4620      	mov	r0, r4
 80083ba:	d106      	bne.n	80083ca <_dtoa_r+0xb0a>
 80083bc:	f000 f9d6 	bl	800876c <__multadd>
 80083c0:	4680      	mov	r8, r0
 80083c2:	4607      	mov	r7, r0
 80083c4:	f109 0901 	add.w	r9, r9, #1
 80083c8:	e772      	b.n	80082b0 <_dtoa_r+0x9f0>
 80083ca:	f000 f9cf 	bl	800876c <__multadd>
 80083ce:	4639      	mov	r1, r7
 80083d0:	4680      	mov	r8, r0
 80083d2:	2300      	movs	r3, #0
 80083d4:	220a      	movs	r2, #10
 80083d6:	4620      	mov	r0, r4
 80083d8:	f000 f9c8 	bl	800876c <__multadd>
 80083dc:	4607      	mov	r7, r0
 80083de:	e7f1      	b.n	80083c4 <_dtoa_r+0xb04>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	9302      	str	r3, [sp, #8]
 80083e4:	9d01      	ldr	r5, [sp, #4]
 80083e6:	ee18 0a10 	vmov	r0, s16
 80083ea:	4631      	mov	r1, r6
 80083ec:	f7ff f9dc 	bl	80077a8 <quorem>
 80083f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	f805 ab01 	strb.w	sl, [r5], #1
 80083fa:	1aea      	subs	r2, r5, r3
 80083fc:	9b02      	ldr	r3, [sp, #8]
 80083fe:	4293      	cmp	r3, r2
 8008400:	dd09      	ble.n	8008416 <_dtoa_r+0xb56>
 8008402:	ee18 1a10 	vmov	r1, s16
 8008406:	2300      	movs	r3, #0
 8008408:	220a      	movs	r2, #10
 800840a:	4620      	mov	r0, r4
 800840c:	f000 f9ae 	bl	800876c <__multadd>
 8008410:	ee08 0a10 	vmov	s16, r0
 8008414:	e7e7      	b.n	80083e6 <_dtoa_r+0xb26>
 8008416:	9b02      	ldr	r3, [sp, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	bfc8      	it	gt
 800841c:	461d      	movgt	r5, r3
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	bfd8      	it	le
 8008422:	2501      	movle	r5, #1
 8008424:	441d      	add	r5, r3
 8008426:	f04f 0800 	mov.w	r8, #0
 800842a:	ee18 1a10 	vmov	r1, s16
 800842e:	2201      	movs	r2, #1
 8008430:	4620      	mov	r0, r4
 8008432:	f000 fb4b 	bl	8008acc <__lshift>
 8008436:	4631      	mov	r1, r6
 8008438:	ee08 0a10 	vmov	s16, r0
 800843c:	f000 fbb6 	bl	8008bac <__mcmp>
 8008440:	2800      	cmp	r0, #0
 8008442:	dc91      	bgt.n	8008368 <_dtoa_r+0xaa8>
 8008444:	d102      	bne.n	800844c <_dtoa_r+0xb8c>
 8008446:	f01a 0f01 	tst.w	sl, #1
 800844a:	d18d      	bne.n	8008368 <_dtoa_r+0xaa8>
 800844c:	462b      	mov	r3, r5
 800844e:	461d      	mov	r5, r3
 8008450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008454:	2a30      	cmp	r2, #48	; 0x30
 8008456:	d0fa      	beq.n	800844e <_dtoa_r+0xb8e>
 8008458:	e6d7      	b.n	800820a <_dtoa_r+0x94a>
 800845a:	9a01      	ldr	r2, [sp, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d184      	bne.n	800836a <_dtoa_r+0xaaa>
 8008460:	9b00      	ldr	r3, [sp, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	2331      	movs	r3, #49	; 0x31
 8008468:	7013      	strb	r3, [r2, #0]
 800846a:	e6ce      	b.n	800820a <_dtoa_r+0x94a>
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <_dtoa_r+0xbd4>)
 800846e:	f7ff ba95 	b.w	800799c <_dtoa_r+0xdc>
 8008472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008474:	2b00      	cmp	r3, #0
 8008476:	f47f aa6e 	bne.w	8007956 <_dtoa_r+0x96>
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <_dtoa_r+0xbd8>)
 800847c:	f7ff ba8e 	b.w	800799c <_dtoa_r+0xdc>
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	dcae      	bgt.n	80083e4 <_dtoa_r+0xb24>
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	2b02      	cmp	r3, #2
 800848a:	f73f aea8 	bgt.w	80081de <_dtoa_r+0x91e>
 800848e:	e7a9      	b.n	80083e4 <_dtoa_r+0xb24>
 8008490:	08009cc0 	.word	0x08009cc0
 8008494:	08009b1c 	.word	0x08009b1c
 8008498:	08009c41 	.word	0x08009c41

0800849c <std>:
 800849c:	2300      	movs	r3, #0
 800849e:	b510      	push	{r4, lr}
 80084a0:	4604      	mov	r4, r0
 80084a2:	e9c0 3300 	strd	r3, r3, [r0]
 80084a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084aa:	6083      	str	r3, [r0, #8]
 80084ac:	8181      	strh	r1, [r0, #12]
 80084ae:	6643      	str	r3, [r0, #100]	; 0x64
 80084b0:	81c2      	strh	r2, [r0, #14]
 80084b2:	6183      	str	r3, [r0, #24]
 80084b4:	4619      	mov	r1, r3
 80084b6:	2208      	movs	r2, #8
 80084b8:	305c      	adds	r0, #92	; 0x5c
 80084ba:	f7fe fb91 	bl	8006be0 <memset>
 80084be:	4b05      	ldr	r3, [pc, #20]	; (80084d4 <std+0x38>)
 80084c0:	6263      	str	r3, [r4, #36]	; 0x24
 80084c2:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <std+0x3c>)
 80084c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80084c6:	4b05      	ldr	r3, [pc, #20]	; (80084dc <std+0x40>)
 80084c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084ca:	4b05      	ldr	r3, [pc, #20]	; (80084e0 <std+0x44>)
 80084cc:	6224      	str	r4, [r4, #32]
 80084ce:	6323      	str	r3, [r4, #48]	; 0x30
 80084d0:	bd10      	pop	{r4, pc}
 80084d2:	bf00      	nop
 80084d4:	08009271 	.word	0x08009271
 80084d8:	08009293 	.word	0x08009293
 80084dc:	080092cb 	.word	0x080092cb
 80084e0:	080092ef 	.word	0x080092ef

080084e4 <_cleanup_r>:
 80084e4:	4901      	ldr	r1, [pc, #4]	; (80084ec <_cleanup_r+0x8>)
 80084e6:	f000 b8af 	b.w	8008648 <_fwalk_reent>
 80084ea:	bf00      	nop
 80084ec:	08009605 	.word	0x08009605

080084f0 <__sfmoreglue>:
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	2268      	movs	r2, #104	; 0x68
 80084f4:	1e4d      	subs	r5, r1, #1
 80084f6:	4355      	muls	r5, r2
 80084f8:	460e      	mov	r6, r1
 80084fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084fe:	f000 fcd9 	bl	8008eb4 <_malloc_r>
 8008502:	4604      	mov	r4, r0
 8008504:	b140      	cbz	r0, 8008518 <__sfmoreglue+0x28>
 8008506:	2100      	movs	r1, #0
 8008508:	e9c0 1600 	strd	r1, r6, [r0]
 800850c:	300c      	adds	r0, #12
 800850e:	60a0      	str	r0, [r4, #8]
 8008510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008514:	f7fe fb64 	bl	8006be0 <memset>
 8008518:	4620      	mov	r0, r4
 800851a:	bd70      	pop	{r4, r5, r6, pc}

0800851c <__sfp_lock_acquire>:
 800851c:	4801      	ldr	r0, [pc, #4]	; (8008524 <__sfp_lock_acquire+0x8>)
 800851e:	f000 b8b8 	b.w	8008692 <__retarget_lock_acquire_recursive>
 8008522:	bf00      	nop
 8008524:	2000082d 	.word	0x2000082d

08008528 <__sfp_lock_release>:
 8008528:	4801      	ldr	r0, [pc, #4]	; (8008530 <__sfp_lock_release+0x8>)
 800852a:	f000 b8b3 	b.w	8008694 <__retarget_lock_release_recursive>
 800852e:	bf00      	nop
 8008530:	2000082d 	.word	0x2000082d

08008534 <__sinit_lock_acquire>:
 8008534:	4801      	ldr	r0, [pc, #4]	; (800853c <__sinit_lock_acquire+0x8>)
 8008536:	f000 b8ac 	b.w	8008692 <__retarget_lock_acquire_recursive>
 800853a:	bf00      	nop
 800853c:	2000082e 	.word	0x2000082e

08008540 <__sinit_lock_release>:
 8008540:	4801      	ldr	r0, [pc, #4]	; (8008548 <__sinit_lock_release+0x8>)
 8008542:	f000 b8a7 	b.w	8008694 <__retarget_lock_release_recursive>
 8008546:	bf00      	nop
 8008548:	2000082e 	.word	0x2000082e

0800854c <__sinit>:
 800854c:	b510      	push	{r4, lr}
 800854e:	4604      	mov	r4, r0
 8008550:	f7ff fff0 	bl	8008534 <__sinit_lock_acquire>
 8008554:	69a3      	ldr	r3, [r4, #24]
 8008556:	b11b      	cbz	r3, 8008560 <__sinit+0x14>
 8008558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800855c:	f7ff bff0 	b.w	8008540 <__sinit_lock_release>
 8008560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008564:	6523      	str	r3, [r4, #80]	; 0x50
 8008566:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <__sinit+0x68>)
 8008568:	4a13      	ldr	r2, [pc, #76]	; (80085b8 <__sinit+0x6c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	62a2      	str	r2, [r4, #40]	; 0x28
 800856e:	42a3      	cmp	r3, r4
 8008570:	bf04      	itt	eq
 8008572:	2301      	moveq	r3, #1
 8008574:	61a3      	streq	r3, [r4, #24]
 8008576:	4620      	mov	r0, r4
 8008578:	f000 f820 	bl	80085bc <__sfp>
 800857c:	6060      	str	r0, [r4, #4]
 800857e:	4620      	mov	r0, r4
 8008580:	f000 f81c 	bl	80085bc <__sfp>
 8008584:	60a0      	str	r0, [r4, #8]
 8008586:	4620      	mov	r0, r4
 8008588:	f000 f818 	bl	80085bc <__sfp>
 800858c:	2200      	movs	r2, #0
 800858e:	60e0      	str	r0, [r4, #12]
 8008590:	2104      	movs	r1, #4
 8008592:	6860      	ldr	r0, [r4, #4]
 8008594:	f7ff ff82 	bl	800849c <std>
 8008598:	68a0      	ldr	r0, [r4, #8]
 800859a:	2201      	movs	r2, #1
 800859c:	2109      	movs	r1, #9
 800859e:	f7ff ff7d 	bl	800849c <std>
 80085a2:	68e0      	ldr	r0, [r4, #12]
 80085a4:	2202      	movs	r2, #2
 80085a6:	2112      	movs	r1, #18
 80085a8:	f7ff ff78 	bl	800849c <std>
 80085ac:	2301      	movs	r3, #1
 80085ae:	61a3      	str	r3, [r4, #24]
 80085b0:	e7d2      	b.n	8008558 <__sinit+0xc>
 80085b2:	bf00      	nop
 80085b4:	08009b08 	.word	0x08009b08
 80085b8:	080084e5 	.word	0x080084e5

080085bc <__sfp>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	4607      	mov	r7, r0
 80085c0:	f7ff ffac 	bl	800851c <__sfp_lock_acquire>
 80085c4:	4b1e      	ldr	r3, [pc, #120]	; (8008640 <__sfp+0x84>)
 80085c6:	681e      	ldr	r6, [r3, #0]
 80085c8:	69b3      	ldr	r3, [r6, #24]
 80085ca:	b913      	cbnz	r3, 80085d2 <__sfp+0x16>
 80085cc:	4630      	mov	r0, r6
 80085ce:	f7ff ffbd 	bl	800854c <__sinit>
 80085d2:	3648      	adds	r6, #72	; 0x48
 80085d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085d8:	3b01      	subs	r3, #1
 80085da:	d503      	bpl.n	80085e4 <__sfp+0x28>
 80085dc:	6833      	ldr	r3, [r6, #0]
 80085de:	b30b      	cbz	r3, 8008624 <__sfp+0x68>
 80085e0:	6836      	ldr	r6, [r6, #0]
 80085e2:	e7f7      	b.n	80085d4 <__sfp+0x18>
 80085e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085e8:	b9d5      	cbnz	r5, 8008620 <__sfp+0x64>
 80085ea:	4b16      	ldr	r3, [pc, #88]	; (8008644 <__sfp+0x88>)
 80085ec:	60e3      	str	r3, [r4, #12]
 80085ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085f2:	6665      	str	r5, [r4, #100]	; 0x64
 80085f4:	f000 f84c 	bl	8008690 <__retarget_lock_init_recursive>
 80085f8:	f7ff ff96 	bl	8008528 <__sfp_lock_release>
 80085fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008604:	6025      	str	r5, [r4, #0]
 8008606:	61a5      	str	r5, [r4, #24]
 8008608:	2208      	movs	r2, #8
 800860a:	4629      	mov	r1, r5
 800860c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008610:	f7fe fae6 	bl	8006be0 <memset>
 8008614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800861c:	4620      	mov	r0, r4
 800861e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008620:	3468      	adds	r4, #104	; 0x68
 8008622:	e7d9      	b.n	80085d8 <__sfp+0x1c>
 8008624:	2104      	movs	r1, #4
 8008626:	4638      	mov	r0, r7
 8008628:	f7ff ff62 	bl	80084f0 <__sfmoreglue>
 800862c:	4604      	mov	r4, r0
 800862e:	6030      	str	r0, [r6, #0]
 8008630:	2800      	cmp	r0, #0
 8008632:	d1d5      	bne.n	80085e0 <__sfp+0x24>
 8008634:	f7ff ff78 	bl	8008528 <__sfp_lock_release>
 8008638:	230c      	movs	r3, #12
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	e7ee      	b.n	800861c <__sfp+0x60>
 800863e:	bf00      	nop
 8008640:	08009b08 	.word	0x08009b08
 8008644:	ffff0001 	.word	0xffff0001

08008648 <_fwalk_reent>:
 8008648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800864c:	4606      	mov	r6, r0
 800864e:	4688      	mov	r8, r1
 8008650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008654:	2700      	movs	r7, #0
 8008656:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800865a:	f1b9 0901 	subs.w	r9, r9, #1
 800865e:	d505      	bpl.n	800866c <_fwalk_reent+0x24>
 8008660:	6824      	ldr	r4, [r4, #0]
 8008662:	2c00      	cmp	r4, #0
 8008664:	d1f7      	bne.n	8008656 <_fwalk_reent+0xe>
 8008666:	4638      	mov	r0, r7
 8008668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800866c:	89ab      	ldrh	r3, [r5, #12]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d907      	bls.n	8008682 <_fwalk_reent+0x3a>
 8008672:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008676:	3301      	adds	r3, #1
 8008678:	d003      	beq.n	8008682 <_fwalk_reent+0x3a>
 800867a:	4629      	mov	r1, r5
 800867c:	4630      	mov	r0, r6
 800867e:	47c0      	blx	r8
 8008680:	4307      	orrs	r7, r0
 8008682:	3568      	adds	r5, #104	; 0x68
 8008684:	e7e9      	b.n	800865a <_fwalk_reent+0x12>
	...

08008688 <_localeconv_r>:
 8008688:	4800      	ldr	r0, [pc, #0]	; (800868c <_localeconv_r+0x4>)
 800868a:	4770      	bx	lr
 800868c:	20000164 	.word	0x20000164

08008690 <__retarget_lock_init_recursive>:
 8008690:	4770      	bx	lr

08008692 <__retarget_lock_acquire_recursive>:
 8008692:	4770      	bx	lr

08008694 <__retarget_lock_release_recursive>:
 8008694:	4770      	bx	lr
	...

08008698 <malloc>:
 8008698:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <malloc+0xc>)
 800869a:	4601      	mov	r1, r0
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	f000 bc09 	b.w	8008eb4 <_malloc_r>
 80086a2:	bf00      	nop
 80086a4:	20000010 	.word	0x20000010

080086a8 <_Balloc>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086ac:	4604      	mov	r4, r0
 80086ae:	460d      	mov	r5, r1
 80086b0:	b976      	cbnz	r6, 80086d0 <_Balloc+0x28>
 80086b2:	2010      	movs	r0, #16
 80086b4:	f7ff fff0 	bl	8008698 <malloc>
 80086b8:	4602      	mov	r2, r0
 80086ba:	6260      	str	r0, [r4, #36]	; 0x24
 80086bc:	b920      	cbnz	r0, 80086c8 <_Balloc+0x20>
 80086be:	4b18      	ldr	r3, [pc, #96]	; (8008720 <_Balloc+0x78>)
 80086c0:	4818      	ldr	r0, [pc, #96]	; (8008724 <_Balloc+0x7c>)
 80086c2:	2166      	movs	r1, #102	; 0x66
 80086c4:	f000 feea 	bl	800949c <__assert_func>
 80086c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086cc:	6006      	str	r6, [r0, #0]
 80086ce:	60c6      	str	r6, [r0, #12]
 80086d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086d2:	68f3      	ldr	r3, [r6, #12]
 80086d4:	b183      	cbz	r3, 80086f8 <_Balloc+0x50>
 80086d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086de:	b9b8      	cbnz	r0, 8008710 <_Balloc+0x68>
 80086e0:	2101      	movs	r1, #1
 80086e2:	fa01 f605 	lsl.w	r6, r1, r5
 80086e6:	1d72      	adds	r2, r6, #5
 80086e8:	0092      	lsls	r2, r2, #2
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 fb60 	bl	8008db0 <_calloc_r>
 80086f0:	b160      	cbz	r0, 800870c <_Balloc+0x64>
 80086f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086f6:	e00e      	b.n	8008716 <_Balloc+0x6e>
 80086f8:	2221      	movs	r2, #33	; 0x21
 80086fa:	2104      	movs	r1, #4
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 fb57 	bl	8008db0 <_calloc_r>
 8008702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008704:	60f0      	str	r0, [r6, #12]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e4      	bne.n	80086d6 <_Balloc+0x2e>
 800870c:	2000      	movs	r0, #0
 800870e:	bd70      	pop	{r4, r5, r6, pc}
 8008710:	6802      	ldr	r2, [r0, #0]
 8008712:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008716:	2300      	movs	r3, #0
 8008718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800871c:	e7f7      	b.n	800870e <_Balloc+0x66>
 800871e:	bf00      	nop
 8008720:	08009c4e 	.word	0x08009c4e
 8008724:	08009d34 	.word	0x08009d34

08008728 <_Bfree>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800872c:	4605      	mov	r5, r0
 800872e:	460c      	mov	r4, r1
 8008730:	b976      	cbnz	r6, 8008750 <_Bfree+0x28>
 8008732:	2010      	movs	r0, #16
 8008734:	f7ff ffb0 	bl	8008698 <malloc>
 8008738:	4602      	mov	r2, r0
 800873a:	6268      	str	r0, [r5, #36]	; 0x24
 800873c:	b920      	cbnz	r0, 8008748 <_Bfree+0x20>
 800873e:	4b09      	ldr	r3, [pc, #36]	; (8008764 <_Bfree+0x3c>)
 8008740:	4809      	ldr	r0, [pc, #36]	; (8008768 <_Bfree+0x40>)
 8008742:	218a      	movs	r1, #138	; 0x8a
 8008744:	f000 feaa 	bl	800949c <__assert_func>
 8008748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800874c:	6006      	str	r6, [r0, #0]
 800874e:	60c6      	str	r6, [r0, #12]
 8008750:	b13c      	cbz	r4, 8008762 <_Bfree+0x3a>
 8008752:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008754:	6862      	ldr	r2, [r4, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800875c:	6021      	str	r1, [r4, #0]
 800875e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	08009c4e 	.word	0x08009c4e
 8008768:	08009d34 	.word	0x08009d34

0800876c <__multadd>:
 800876c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008770:	690d      	ldr	r5, [r1, #16]
 8008772:	4607      	mov	r7, r0
 8008774:	460c      	mov	r4, r1
 8008776:	461e      	mov	r6, r3
 8008778:	f101 0c14 	add.w	ip, r1, #20
 800877c:	2000      	movs	r0, #0
 800877e:	f8dc 3000 	ldr.w	r3, [ip]
 8008782:	b299      	uxth	r1, r3
 8008784:	fb02 6101 	mla	r1, r2, r1, r6
 8008788:	0c1e      	lsrs	r6, r3, #16
 800878a:	0c0b      	lsrs	r3, r1, #16
 800878c:	fb02 3306 	mla	r3, r2, r6, r3
 8008790:	b289      	uxth	r1, r1
 8008792:	3001      	adds	r0, #1
 8008794:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008798:	4285      	cmp	r5, r0
 800879a:	f84c 1b04 	str.w	r1, [ip], #4
 800879e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087a2:	dcec      	bgt.n	800877e <__multadd+0x12>
 80087a4:	b30e      	cbz	r6, 80087ea <__multadd+0x7e>
 80087a6:	68a3      	ldr	r3, [r4, #8]
 80087a8:	42ab      	cmp	r3, r5
 80087aa:	dc19      	bgt.n	80087e0 <__multadd+0x74>
 80087ac:	6861      	ldr	r1, [r4, #4]
 80087ae:	4638      	mov	r0, r7
 80087b0:	3101      	adds	r1, #1
 80087b2:	f7ff ff79 	bl	80086a8 <_Balloc>
 80087b6:	4680      	mov	r8, r0
 80087b8:	b928      	cbnz	r0, 80087c6 <__multadd+0x5a>
 80087ba:	4602      	mov	r2, r0
 80087bc:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <__multadd+0x84>)
 80087be:	480d      	ldr	r0, [pc, #52]	; (80087f4 <__multadd+0x88>)
 80087c0:	21b5      	movs	r1, #181	; 0xb5
 80087c2:	f000 fe6b 	bl	800949c <__assert_func>
 80087c6:	6922      	ldr	r2, [r4, #16]
 80087c8:	3202      	adds	r2, #2
 80087ca:	f104 010c 	add.w	r1, r4, #12
 80087ce:	0092      	lsls	r2, r2, #2
 80087d0:	300c      	adds	r0, #12
 80087d2:	f7fe f9f7 	bl	8006bc4 <memcpy>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4638      	mov	r0, r7
 80087da:	f7ff ffa5 	bl	8008728 <_Bfree>
 80087de:	4644      	mov	r4, r8
 80087e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087e4:	3501      	adds	r5, #1
 80087e6:	615e      	str	r6, [r3, #20]
 80087e8:	6125      	str	r5, [r4, #16]
 80087ea:	4620      	mov	r0, r4
 80087ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f0:	08009cc0 	.word	0x08009cc0
 80087f4:	08009d34 	.word	0x08009d34

080087f8 <__hi0bits>:
 80087f8:	0c03      	lsrs	r3, r0, #16
 80087fa:	041b      	lsls	r3, r3, #16
 80087fc:	b9d3      	cbnz	r3, 8008834 <__hi0bits+0x3c>
 80087fe:	0400      	lsls	r0, r0, #16
 8008800:	2310      	movs	r3, #16
 8008802:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008806:	bf04      	itt	eq
 8008808:	0200      	lsleq	r0, r0, #8
 800880a:	3308      	addeq	r3, #8
 800880c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008810:	bf04      	itt	eq
 8008812:	0100      	lsleq	r0, r0, #4
 8008814:	3304      	addeq	r3, #4
 8008816:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800881a:	bf04      	itt	eq
 800881c:	0080      	lsleq	r0, r0, #2
 800881e:	3302      	addeq	r3, #2
 8008820:	2800      	cmp	r0, #0
 8008822:	db05      	blt.n	8008830 <__hi0bits+0x38>
 8008824:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008828:	f103 0301 	add.w	r3, r3, #1
 800882c:	bf08      	it	eq
 800882e:	2320      	moveq	r3, #32
 8008830:	4618      	mov	r0, r3
 8008832:	4770      	bx	lr
 8008834:	2300      	movs	r3, #0
 8008836:	e7e4      	b.n	8008802 <__hi0bits+0xa>

08008838 <__lo0bits>:
 8008838:	6803      	ldr	r3, [r0, #0]
 800883a:	f013 0207 	ands.w	r2, r3, #7
 800883e:	4601      	mov	r1, r0
 8008840:	d00b      	beq.n	800885a <__lo0bits+0x22>
 8008842:	07da      	lsls	r2, r3, #31
 8008844:	d423      	bmi.n	800888e <__lo0bits+0x56>
 8008846:	0798      	lsls	r0, r3, #30
 8008848:	bf49      	itett	mi
 800884a:	085b      	lsrmi	r3, r3, #1
 800884c:	089b      	lsrpl	r3, r3, #2
 800884e:	2001      	movmi	r0, #1
 8008850:	600b      	strmi	r3, [r1, #0]
 8008852:	bf5c      	itt	pl
 8008854:	600b      	strpl	r3, [r1, #0]
 8008856:	2002      	movpl	r0, #2
 8008858:	4770      	bx	lr
 800885a:	b298      	uxth	r0, r3
 800885c:	b9a8      	cbnz	r0, 800888a <__lo0bits+0x52>
 800885e:	0c1b      	lsrs	r3, r3, #16
 8008860:	2010      	movs	r0, #16
 8008862:	b2da      	uxtb	r2, r3
 8008864:	b90a      	cbnz	r2, 800886a <__lo0bits+0x32>
 8008866:	3008      	adds	r0, #8
 8008868:	0a1b      	lsrs	r3, r3, #8
 800886a:	071a      	lsls	r2, r3, #28
 800886c:	bf04      	itt	eq
 800886e:	091b      	lsreq	r3, r3, #4
 8008870:	3004      	addeq	r0, #4
 8008872:	079a      	lsls	r2, r3, #30
 8008874:	bf04      	itt	eq
 8008876:	089b      	lsreq	r3, r3, #2
 8008878:	3002      	addeq	r0, #2
 800887a:	07da      	lsls	r2, r3, #31
 800887c:	d403      	bmi.n	8008886 <__lo0bits+0x4e>
 800887e:	085b      	lsrs	r3, r3, #1
 8008880:	f100 0001 	add.w	r0, r0, #1
 8008884:	d005      	beq.n	8008892 <__lo0bits+0x5a>
 8008886:	600b      	str	r3, [r1, #0]
 8008888:	4770      	bx	lr
 800888a:	4610      	mov	r0, r2
 800888c:	e7e9      	b.n	8008862 <__lo0bits+0x2a>
 800888e:	2000      	movs	r0, #0
 8008890:	4770      	bx	lr
 8008892:	2020      	movs	r0, #32
 8008894:	4770      	bx	lr
	...

08008898 <__i2b>:
 8008898:	b510      	push	{r4, lr}
 800889a:	460c      	mov	r4, r1
 800889c:	2101      	movs	r1, #1
 800889e:	f7ff ff03 	bl	80086a8 <_Balloc>
 80088a2:	4602      	mov	r2, r0
 80088a4:	b928      	cbnz	r0, 80088b2 <__i2b+0x1a>
 80088a6:	4b05      	ldr	r3, [pc, #20]	; (80088bc <__i2b+0x24>)
 80088a8:	4805      	ldr	r0, [pc, #20]	; (80088c0 <__i2b+0x28>)
 80088aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088ae:	f000 fdf5 	bl	800949c <__assert_func>
 80088b2:	2301      	movs	r3, #1
 80088b4:	6144      	str	r4, [r0, #20]
 80088b6:	6103      	str	r3, [r0, #16]
 80088b8:	bd10      	pop	{r4, pc}
 80088ba:	bf00      	nop
 80088bc:	08009cc0 	.word	0x08009cc0
 80088c0:	08009d34 	.word	0x08009d34

080088c4 <__multiply>:
 80088c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c8:	4691      	mov	r9, r2
 80088ca:	690a      	ldr	r2, [r1, #16]
 80088cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	bfb8      	it	lt
 80088d4:	460b      	movlt	r3, r1
 80088d6:	460c      	mov	r4, r1
 80088d8:	bfbc      	itt	lt
 80088da:	464c      	movlt	r4, r9
 80088dc:	4699      	movlt	r9, r3
 80088de:	6927      	ldr	r7, [r4, #16]
 80088e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088e4:	68a3      	ldr	r3, [r4, #8]
 80088e6:	6861      	ldr	r1, [r4, #4]
 80088e8:	eb07 060a 	add.w	r6, r7, sl
 80088ec:	42b3      	cmp	r3, r6
 80088ee:	b085      	sub	sp, #20
 80088f0:	bfb8      	it	lt
 80088f2:	3101      	addlt	r1, #1
 80088f4:	f7ff fed8 	bl	80086a8 <_Balloc>
 80088f8:	b930      	cbnz	r0, 8008908 <__multiply+0x44>
 80088fa:	4602      	mov	r2, r0
 80088fc:	4b44      	ldr	r3, [pc, #272]	; (8008a10 <__multiply+0x14c>)
 80088fe:	4845      	ldr	r0, [pc, #276]	; (8008a14 <__multiply+0x150>)
 8008900:	f240 115d 	movw	r1, #349	; 0x15d
 8008904:	f000 fdca 	bl	800949c <__assert_func>
 8008908:	f100 0514 	add.w	r5, r0, #20
 800890c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008910:	462b      	mov	r3, r5
 8008912:	2200      	movs	r2, #0
 8008914:	4543      	cmp	r3, r8
 8008916:	d321      	bcc.n	800895c <__multiply+0x98>
 8008918:	f104 0314 	add.w	r3, r4, #20
 800891c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008920:	f109 0314 	add.w	r3, r9, #20
 8008924:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008928:	9202      	str	r2, [sp, #8]
 800892a:	1b3a      	subs	r2, r7, r4
 800892c:	3a15      	subs	r2, #21
 800892e:	f022 0203 	bic.w	r2, r2, #3
 8008932:	3204      	adds	r2, #4
 8008934:	f104 0115 	add.w	r1, r4, #21
 8008938:	428f      	cmp	r7, r1
 800893a:	bf38      	it	cc
 800893c:	2204      	movcc	r2, #4
 800893e:	9201      	str	r2, [sp, #4]
 8008940:	9a02      	ldr	r2, [sp, #8]
 8008942:	9303      	str	r3, [sp, #12]
 8008944:	429a      	cmp	r2, r3
 8008946:	d80c      	bhi.n	8008962 <__multiply+0x9e>
 8008948:	2e00      	cmp	r6, #0
 800894a:	dd03      	ble.n	8008954 <__multiply+0x90>
 800894c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008950:	2b00      	cmp	r3, #0
 8008952:	d05a      	beq.n	8008a0a <__multiply+0x146>
 8008954:	6106      	str	r6, [r0, #16]
 8008956:	b005      	add	sp, #20
 8008958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895c:	f843 2b04 	str.w	r2, [r3], #4
 8008960:	e7d8      	b.n	8008914 <__multiply+0x50>
 8008962:	f8b3 a000 	ldrh.w	sl, [r3]
 8008966:	f1ba 0f00 	cmp.w	sl, #0
 800896a:	d024      	beq.n	80089b6 <__multiply+0xf2>
 800896c:	f104 0e14 	add.w	lr, r4, #20
 8008970:	46a9      	mov	r9, r5
 8008972:	f04f 0c00 	mov.w	ip, #0
 8008976:	f85e 2b04 	ldr.w	r2, [lr], #4
 800897a:	f8d9 1000 	ldr.w	r1, [r9]
 800897e:	fa1f fb82 	uxth.w	fp, r2
 8008982:	b289      	uxth	r1, r1
 8008984:	fb0a 110b 	mla	r1, sl, fp, r1
 8008988:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800898c:	f8d9 2000 	ldr.w	r2, [r9]
 8008990:	4461      	add	r1, ip
 8008992:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008996:	fb0a c20b 	mla	r2, sl, fp, ip
 800899a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800899e:	b289      	uxth	r1, r1
 80089a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089a4:	4577      	cmp	r7, lr
 80089a6:	f849 1b04 	str.w	r1, [r9], #4
 80089aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089ae:	d8e2      	bhi.n	8008976 <__multiply+0xb2>
 80089b0:	9a01      	ldr	r2, [sp, #4]
 80089b2:	f845 c002 	str.w	ip, [r5, r2]
 80089b6:	9a03      	ldr	r2, [sp, #12]
 80089b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089bc:	3304      	adds	r3, #4
 80089be:	f1b9 0f00 	cmp.w	r9, #0
 80089c2:	d020      	beq.n	8008a06 <__multiply+0x142>
 80089c4:	6829      	ldr	r1, [r5, #0]
 80089c6:	f104 0c14 	add.w	ip, r4, #20
 80089ca:	46ae      	mov	lr, r5
 80089cc:	f04f 0a00 	mov.w	sl, #0
 80089d0:	f8bc b000 	ldrh.w	fp, [ip]
 80089d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089d8:	fb09 220b 	mla	r2, r9, fp, r2
 80089dc:	4492      	add	sl, r2
 80089de:	b289      	uxth	r1, r1
 80089e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80089e4:	f84e 1b04 	str.w	r1, [lr], #4
 80089e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80089ec:	f8be 1000 	ldrh.w	r1, [lr]
 80089f0:	0c12      	lsrs	r2, r2, #16
 80089f2:	fb09 1102 	mla	r1, r9, r2, r1
 80089f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80089fa:	4567      	cmp	r7, ip
 80089fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a00:	d8e6      	bhi.n	80089d0 <__multiply+0x10c>
 8008a02:	9a01      	ldr	r2, [sp, #4]
 8008a04:	50a9      	str	r1, [r5, r2]
 8008a06:	3504      	adds	r5, #4
 8008a08:	e79a      	b.n	8008940 <__multiply+0x7c>
 8008a0a:	3e01      	subs	r6, #1
 8008a0c:	e79c      	b.n	8008948 <__multiply+0x84>
 8008a0e:	bf00      	nop
 8008a10:	08009cc0 	.word	0x08009cc0
 8008a14:	08009d34 	.word	0x08009d34

08008a18 <__pow5mult>:
 8008a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a1c:	4615      	mov	r5, r2
 8008a1e:	f012 0203 	ands.w	r2, r2, #3
 8008a22:	4606      	mov	r6, r0
 8008a24:	460f      	mov	r7, r1
 8008a26:	d007      	beq.n	8008a38 <__pow5mult+0x20>
 8008a28:	4c25      	ldr	r4, [pc, #148]	; (8008ac0 <__pow5mult+0xa8>)
 8008a2a:	3a01      	subs	r2, #1
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a32:	f7ff fe9b 	bl	800876c <__multadd>
 8008a36:	4607      	mov	r7, r0
 8008a38:	10ad      	asrs	r5, r5, #2
 8008a3a:	d03d      	beq.n	8008ab8 <__pow5mult+0xa0>
 8008a3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a3e:	b97c      	cbnz	r4, 8008a60 <__pow5mult+0x48>
 8008a40:	2010      	movs	r0, #16
 8008a42:	f7ff fe29 	bl	8008698 <malloc>
 8008a46:	4602      	mov	r2, r0
 8008a48:	6270      	str	r0, [r6, #36]	; 0x24
 8008a4a:	b928      	cbnz	r0, 8008a58 <__pow5mult+0x40>
 8008a4c:	4b1d      	ldr	r3, [pc, #116]	; (8008ac4 <__pow5mult+0xac>)
 8008a4e:	481e      	ldr	r0, [pc, #120]	; (8008ac8 <__pow5mult+0xb0>)
 8008a50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a54:	f000 fd22 	bl	800949c <__assert_func>
 8008a58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a5c:	6004      	str	r4, [r0, #0]
 8008a5e:	60c4      	str	r4, [r0, #12]
 8008a60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a68:	b94c      	cbnz	r4, 8008a7e <__pow5mult+0x66>
 8008a6a:	f240 2171 	movw	r1, #625	; 0x271
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f7ff ff12 	bl	8008898 <__i2b>
 8008a74:	2300      	movs	r3, #0
 8008a76:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	6003      	str	r3, [r0, #0]
 8008a7e:	f04f 0900 	mov.w	r9, #0
 8008a82:	07eb      	lsls	r3, r5, #31
 8008a84:	d50a      	bpl.n	8008a9c <__pow5mult+0x84>
 8008a86:	4639      	mov	r1, r7
 8008a88:	4622      	mov	r2, r4
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ff1a 	bl	80088c4 <__multiply>
 8008a90:	4639      	mov	r1, r7
 8008a92:	4680      	mov	r8, r0
 8008a94:	4630      	mov	r0, r6
 8008a96:	f7ff fe47 	bl	8008728 <_Bfree>
 8008a9a:	4647      	mov	r7, r8
 8008a9c:	106d      	asrs	r5, r5, #1
 8008a9e:	d00b      	beq.n	8008ab8 <__pow5mult+0xa0>
 8008aa0:	6820      	ldr	r0, [r4, #0]
 8008aa2:	b938      	cbnz	r0, 8008ab4 <__pow5mult+0x9c>
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff ff0b 	bl	80088c4 <__multiply>
 8008aae:	6020      	str	r0, [r4, #0]
 8008ab0:	f8c0 9000 	str.w	r9, [r0]
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	e7e4      	b.n	8008a82 <__pow5mult+0x6a>
 8008ab8:	4638      	mov	r0, r7
 8008aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008abe:	bf00      	nop
 8008ac0:	08009e80 	.word	0x08009e80
 8008ac4:	08009c4e 	.word	0x08009c4e
 8008ac8:	08009d34 	.word	0x08009d34

08008acc <__lshift>:
 8008acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	6849      	ldr	r1, [r1, #4]
 8008ad4:	6923      	ldr	r3, [r4, #16]
 8008ad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ada:	68a3      	ldr	r3, [r4, #8]
 8008adc:	4607      	mov	r7, r0
 8008ade:	4691      	mov	r9, r2
 8008ae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ae4:	f108 0601 	add.w	r6, r8, #1
 8008ae8:	42b3      	cmp	r3, r6
 8008aea:	db0b      	blt.n	8008b04 <__lshift+0x38>
 8008aec:	4638      	mov	r0, r7
 8008aee:	f7ff fddb 	bl	80086a8 <_Balloc>
 8008af2:	4605      	mov	r5, r0
 8008af4:	b948      	cbnz	r0, 8008b0a <__lshift+0x3e>
 8008af6:	4602      	mov	r2, r0
 8008af8:	4b2a      	ldr	r3, [pc, #168]	; (8008ba4 <__lshift+0xd8>)
 8008afa:	482b      	ldr	r0, [pc, #172]	; (8008ba8 <__lshift+0xdc>)
 8008afc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b00:	f000 fccc 	bl	800949c <__assert_func>
 8008b04:	3101      	adds	r1, #1
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	e7ee      	b.n	8008ae8 <__lshift+0x1c>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f100 0114 	add.w	r1, r0, #20
 8008b10:	f100 0210 	add.w	r2, r0, #16
 8008b14:	4618      	mov	r0, r3
 8008b16:	4553      	cmp	r3, sl
 8008b18:	db37      	blt.n	8008b8a <__lshift+0xbe>
 8008b1a:	6920      	ldr	r0, [r4, #16]
 8008b1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b20:	f104 0314 	add.w	r3, r4, #20
 8008b24:	f019 091f 	ands.w	r9, r9, #31
 8008b28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b30:	d02f      	beq.n	8008b92 <__lshift+0xc6>
 8008b32:	f1c9 0e20 	rsb	lr, r9, #32
 8008b36:	468a      	mov	sl, r1
 8008b38:	f04f 0c00 	mov.w	ip, #0
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	fa02 f209 	lsl.w	r2, r2, r9
 8008b42:	ea42 020c 	orr.w	r2, r2, ip
 8008b46:	f84a 2b04 	str.w	r2, [sl], #4
 8008b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b4e:	4298      	cmp	r0, r3
 8008b50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b54:	d8f2      	bhi.n	8008b3c <__lshift+0x70>
 8008b56:	1b03      	subs	r3, r0, r4
 8008b58:	3b15      	subs	r3, #21
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	3304      	adds	r3, #4
 8008b60:	f104 0215 	add.w	r2, r4, #21
 8008b64:	4290      	cmp	r0, r2
 8008b66:	bf38      	it	cc
 8008b68:	2304      	movcc	r3, #4
 8008b6a:	f841 c003 	str.w	ip, [r1, r3]
 8008b6e:	f1bc 0f00 	cmp.w	ip, #0
 8008b72:	d001      	beq.n	8008b78 <__lshift+0xac>
 8008b74:	f108 0602 	add.w	r6, r8, #2
 8008b78:	3e01      	subs	r6, #1
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	612e      	str	r6, [r5, #16]
 8008b7e:	4621      	mov	r1, r4
 8008b80:	f7ff fdd2 	bl	8008728 <_Bfree>
 8008b84:	4628      	mov	r0, r5
 8008b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b8e:	3301      	adds	r3, #1
 8008b90:	e7c1      	b.n	8008b16 <__lshift+0x4a>
 8008b92:	3904      	subs	r1, #4
 8008b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b98:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b9c:	4298      	cmp	r0, r3
 8008b9e:	d8f9      	bhi.n	8008b94 <__lshift+0xc8>
 8008ba0:	e7ea      	b.n	8008b78 <__lshift+0xac>
 8008ba2:	bf00      	nop
 8008ba4:	08009cc0 	.word	0x08009cc0
 8008ba8:	08009d34 	.word	0x08009d34

08008bac <__mcmp>:
 8008bac:	b530      	push	{r4, r5, lr}
 8008bae:	6902      	ldr	r2, [r0, #16]
 8008bb0:	690c      	ldr	r4, [r1, #16]
 8008bb2:	1b12      	subs	r2, r2, r4
 8008bb4:	d10e      	bne.n	8008bd4 <__mcmp+0x28>
 8008bb6:	f100 0314 	add.w	r3, r0, #20
 8008bba:	3114      	adds	r1, #20
 8008bbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008bc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008bc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008bc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008bcc:	42a5      	cmp	r5, r4
 8008bce:	d003      	beq.n	8008bd8 <__mcmp+0x2c>
 8008bd0:	d305      	bcc.n	8008bde <__mcmp+0x32>
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	bd30      	pop	{r4, r5, pc}
 8008bd8:	4283      	cmp	r3, r0
 8008bda:	d3f3      	bcc.n	8008bc4 <__mcmp+0x18>
 8008bdc:	e7fa      	b.n	8008bd4 <__mcmp+0x28>
 8008bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008be2:	e7f7      	b.n	8008bd4 <__mcmp+0x28>

08008be4 <__mdiff>:
 8008be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be8:	460c      	mov	r4, r1
 8008bea:	4606      	mov	r6, r0
 8008bec:	4611      	mov	r1, r2
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4690      	mov	r8, r2
 8008bf2:	f7ff ffdb 	bl	8008bac <__mcmp>
 8008bf6:	1e05      	subs	r5, r0, #0
 8008bf8:	d110      	bne.n	8008c1c <__mdiff+0x38>
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f7ff fd53 	bl	80086a8 <_Balloc>
 8008c02:	b930      	cbnz	r0, 8008c12 <__mdiff+0x2e>
 8008c04:	4b3a      	ldr	r3, [pc, #232]	; (8008cf0 <__mdiff+0x10c>)
 8008c06:	4602      	mov	r2, r0
 8008c08:	f240 2132 	movw	r1, #562	; 0x232
 8008c0c:	4839      	ldr	r0, [pc, #228]	; (8008cf4 <__mdiff+0x110>)
 8008c0e:	f000 fc45 	bl	800949c <__assert_func>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1c:	bfa4      	itt	ge
 8008c1e:	4643      	movge	r3, r8
 8008c20:	46a0      	movge	r8, r4
 8008c22:	4630      	mov	r0, r6
 8008c24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c28:	bfa6      	itte	ge
 8008c2a:	461c      	movge	r4, r3
 8008c2c:	2500      	movge	r5, #0
 8008c2e:	2501      	movlt	r5, #1
 8008c30:	f7ff fd3a 	bl	80086a8 <_Balloc>
 8008c34:	b920      	cbnz	r0, 8008c40 <__mdiff+0x5c>
 8008c36:	4b2e      	ldr	r3, [pc, #184]	; (8008cf0 <__mdiff+0x10c>)
 8008c38:	4602      	mov	r2, r0
 8008c3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c3e:	e7e5      	b.n	8008c0c <__mdiff+0x28>
 8008c40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c44:	6926      	ldr	r6, [r4, #16]
 8008c46:	60c5      	str	r5, [r0, #12]
 8008c48:	f104 0914 	add.w	r9, r4, #20
 8008c4c:	f108 0514 	add.w	r5, r8, #20
 8008c50:	f100 0e14 	add.w	lr, r0, #20
 8008c54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c5c:	f108 0210 	add.w	r2, r8, #16
 8008c60:	46f2      	mov	sl, lr
 8008c62:	2100      	movs	r1, #0
 8008c64:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c6c:	fa1f f883 	uxth.w	r8, r3
 8008c70:	fa11 f18b 	uxtah	r1, r1, fp
 8008c74:	0c1b      	lsrs	r3, r3, #16
 8008c76:	eba1 0808 	sub.w	r8, r1, r8
 8008c7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c82:	fa1f f888 	uxth.w	r8, r8
 8008c86:	1419      	asrs	r1, r3, #16
 8008c88:	454e      	cmp	r6, r9
 8008c8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c8e:	f84a 3b04 	str.w	r3, [sl], #4
 8008c92:	d8e7      	bhi.n	8008c64 <__mdiff+0x80>
 8008c94:	1b33      	subs	r3, r6, r4
 8008c96:	3b15      	subs	r3, #21
 8008c98:	f023 0303 	bic.w	r3, r3, #3
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	3415      	adds	r4, #21
 8008ca0:	42a6      	cmp	r6, r4
 8008ca2:	bf38      	it	cc
 8008ca4:	2304      	movcc	r3, #4
 8008ca6:	441d      	add	r5, r3
 8008ca8:	4473      	add	r3, lr
 8008caa:	469e      	mov	lr, r3
 8008cac:	462e      	mov	r6, r5
 8008cae:	4566      	cmp	r6, ip
 8008cb0:	d30e      	bcc.n	8008cd0 <__mdiff+0xec>
 8008cb2:	f10c 0203 	add.w	r2, ip, #3
 8008cb6:	1b52      	subs	r2, r2, r5
 8008cb8:	f022 0203 	bic.w	r2, r2, #3
 8008cbc:	3d03      	subs	r5, #3
 8008cbe:	45ac      	cmp	ip, r5
 8008cc0:	bf38      	it	cc
 8008cc2:	2200      	movcc	r2, #0
 8008cc4:	441a      	add	r2, r3
 8008cc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cca:	b17b      	cbz	r3, 8008cec <__mdiff+0x108>
 8008ccc:	6107      	str	r7, [r0, #16]
 8008cce:	e7a3      	b.n	8008c18 <__mdiff+0x34>
 8008cd0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008cd4:	fa11 f288 	uxtah	r2, r1, r8
 8008cd8:	1414      	asrs	r4, r2, #16
 8008cda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cde:	b292      	uxth	r2, r2
 8008ce0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ce4:	f84e 2b04 	str.w	r2, [lr], #4
 8008ce8:	1421      	asrs	r1, r4, #16
 8008cea:	e7e0      	b.n	8008cae <__mdiff+0xca>
 8008cec:	3f01      	subs	r7, #1
 8008cee:	e7ea      	b.n	8008cc6 <__mdiff+0xe2>
 8008cf0:	08009cc0 	.word	0x08009cc0
 8008cf4:	08009d34 	.word	0x08009d34

08008cf8 <__d2b>:
 8008cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cfc:	4689      	mov	r9, r1
 8008cfe:	2101      	movs	r1, #1
 8008d00:	ec57 6b10 	vmov	r6, r7, d0
 8008d04:	4690      	mov	r8, r2
 8008d06:	f7ff fccf 	bl	80086a8 <_Balloc>
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	b930      	cbnz	r0, 8008d1c <__d2b+0x24>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	4b25      	ldr	r3, [pc, #148]	; (8008da8 <__d2b+0xb0>)
 8008d12:	4826      	ldr	r0, [pc, #152]	; (8008dac <__d2b+0xb4>)
 8008d14:	f240 310a 	movw	r1, #778	; 0x30a
 8008d18:	f000 fbc0 	bl	800949c <__assert_func>
 8008d1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d24:	bb35      	cbnz	r5, 8008d74 <__d2b+0x7c>
 8008d26:	2e00      	cmp	r6, #0
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	d028      	beq.n	8008d7e <__d2b+0x86>
 8008d2c:	4668      	mov	r0, sp
 8008d2e:	9600      	str	r6, [sp, #0]
 8008d30:	f7ff fd82 	bl	8008838 <__lo0bits>
 8008d34:	9900      	ldr	r1, [sp, #0]
 8008d36:	b300      	cbz	r0, 8008d7a <__d2b+0x82>
 8008d38:	9a01      	ldr	r2, [sp, #4]
 8008d3a:	f1c0 0320 	rsb	r3, r0, #32
 8008d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d42:	430b      	orrs	r3, r1
 8008d44:	40c2      	lsrs	r2, r0
 8008d46:	6163      	str	r3, [r4, #20]
 8008d48:	9201      	str	r2, [sp, #4]
 8008d4a:	9b01      	ldr	r3, [sp, #4]
 8008d4c:	61a3      	str	r3, [r4, #24]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	bf14      	ite	ne
 8008d52:	2202      	movne	r2, #2
 8008d54:	2201      	moveq	r2, #1
 8008d56:	6122      	str	r2, [r4, #16]
 8008d58:	b1d5      	cbz	r5, 8008d90 <__d2b+0x98>
 8008d5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d5e:	4405      	add	r5, r0
 8008d60:	f8c9 5000 	str.w	r5, [r9]
 8008d64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d68:	f8c8 0000 	str.w	r0, [r8]
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	b003      	add	sp, #12
 8008d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d78:	e7d5      	b.n	8008d26 <__d2b+0x2e>
 8008d7a:	6161      	str	r1, [r4, #20]
 8008d7c:	e7e5      	b.n	8008d4a <__d2b+0x52>
 8008d7e:	a801      	add	r0, sp, #4
 8008d80:	f7ff fd5a 	bl	8008838 <__lo0bits>
 8008d84:	9b01      	ldr	r3, [sp, #4]
 8008d86:	6163      	str	r3, [r4, #20]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	6122      	str	r2, [r4, #16]
 8008d8c:	3020      	adds	r0, #32
 8008d8e:	e7e3      	b.n	8008d58 <__d2b+0x60>
 8008d90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d98:	f8c9 0000 	str.w	r0, [r9]
 8008d9c:	6918      	ldr	r0, [r3, #16]
 8008d9e:	f7ff fd2b 	bl	80087f8 <__hi0bits>
 8008da2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008da6:	e7df      	b.n	8008d68 <__d2b+0x70>
 8008da8:	08009cc0 	.word	0x08009cc0
 8008dac:	08009d34 	.word	0x08009d34

08008db0 <_calloc_r>:
 8008db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008db2:	fba1 2402 	umull	r2, r4, r1, r2
 8008db6:	b94c      	cbnz	r4, 8008dcc <_calloc_r+0x1c>
 8008db8:	4611      	mov	r1, r2
 8008dba:	9201      	str	r2, [sp, #4]
 8008dbc:	f000 f87a 	bl	8008eb4 <_malloc_r>
 8008dc0:	9a01      	ldr	r2, [sp, #4]
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	b930      	cbnz	r0, 8008dd4 <_calloc_r+0x24>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	b003      	add	sp, #12
 8008dca:	bd30      	pop	{r4, r5, pc}
 8008dcc:	220c      	movs	r2, #12
 8008dce:	6002      	str	r2, [r0, #0]
 8008dd0:	2500      	movs	r5, #0
 8008dd2:	e7f8      	b.n	8008dc6 <_calloc_r+0x16>
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f7fd ff03 	bl	8006be0 <memset>
 8008dda:	e7f4      	b.n	8008dc6 <_calloc_r+0x16>

08008ddc <_free_r>:
 8008ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dde:	2900      	cmp	r1, #0
 8008de0:	d044      	beq.n	8008e6c <_free_r+0x90>
 8008de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008de6:	9001      	str	r0, [sp, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f1a1 0404 	sub.w	r4, r1, #4
 8008dee:	bfb8      	it	lt
 8008df0:	18e4      	addlt	r4, r4, r3
 8008df2:	f000 fcdf 	bl	80097b4 <__malloc_lock>
 8008df6:	4a1e      	ldr	r2, [pc, #120]	; (8008e70 <_free_r+0x94>)
 8008df8:	9801      	ldr	r0, [sp, #4]
 8008dfa:	6813      	ldr	r3, [r2, #0]
 8008dfc:	b933      	cbnz	r3, 8008e0c <_free_r+0x30>
 8008dfe:	6063      	str	r3, [r4, #4]
 8008e00:	6014      	str	r4, [r2, #0]
 8008e02:	b003      	add	sp, #12
 8008e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e08:	f000 bcda 	b.w	80097c0 <__malloc_unlock>
 8008e0c:	42a3      	cmp	r3, r4
 8008e0e:	d908      	bls.n	8008e22 <_free_r+0x46>
 8008e10:	6825      	ldr	r5, [r4, #0]
 8008e12:	1961      	adds	r1, r4, r5
 8008e14:	428b      	cmp	r3, r1
 8008e16:	bf01      	itttt	eq
 8008e18:	6819      	ldreq	r1, [r3, #0]
 8008e1a:	685b      	ldreq	r3, [r3, #4]
 8008e1c:	1949      	addeq	r1, r1, r5
 8008e1e:	6021      	streq	r1, [r4, #0]
 8008e20:	e7ed      	b.n	8008dfe <_free_r+0x22>
 8008e22:	461a      	mov	r2, r3
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	b10b      	cbz	r3, 8008e2c <_free_r+0x50>
 8008e28:	42a3      	cmp	r3, r4
 8008e2a:	d9fa      	bls.n	8008e22 <_free_r+0x46>
 8008e2c:	6811      	ldr	r1, [r2, #0]
 8008e2e:	1855      	adds	r5, r2, r1
 8008e30:	42a5      	cmp	r5, r4
 8008e32:	d10b      	bne.n	8008e4c <_free_r+0x70>
 8008e34:	6824      	ldr	r4, [r4, #0]
 8008e36:	4421      	add	r1, r4
 8008e38:	1854      	adds	r4, r2, r1
 8008e3a:	42a3      	cmp	r3, r4
 8008e3c:	6011      	str	r1, [r2, #0]
 8008e3e:	d1e0      	bne.n	8008e02 <_free_r+0x26>
 8008e40:	681c      	ldr	r4, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	6053      	str	r3, [r2, #4]
 8008e46:	4421      	add	r1, r4
 8008e48:	6011      	str	r1, [r2, #0]
 8008e4a:	e7da      	b.n	8008e02 <_free_r+0x26>
 8008e4c:	d902      	bls.n	8008e54 <_free_r+0x78>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	6003      	str	r3, [r0, #0]
 8008e52:	e7d6      	b.n	8008e02 <_free_r+0x26>
 8008e54:	6825      	ldr	r5, [r4, #0]
 8008e56:	1961      	adds	r1, r4, r5
 8008e58:	428b      	cmp	r3, r1
 8008e5a:	bf04      	itt	eq
 8008e5c:	6819      	ldreq	r1, [r3, #0]
 8008e5e:	685b      	ldreq	r3, [r3, #4]
 8008e60:	6063      	str	r3, [r4, #4]
 8008e62:	bf04      	itt	eq
 8008e64:	1949      	addeq	r1, r1, r5
 8008e66:	6021      	streq	r1, [r4, #0]
 8008e68:	6054      	str	r4, [r2, #4]
 8008e6a:	e7ca      	b.n	8008e02 <_free_r+0x26>
 8008e6c:	b003      	add	sp, #12
 8008e6e:	bd30      	pop	{r4, r5, pc}
 8008e70:	20000830 	.word	0x20000830

08008e74 <sbrk_aligned>:
 8008e74:	b570      	push	{r4, r5, r6, lr}
 8008e76:	4e0e      	ldr	r6, [pc, #56]	; (8008eb0 <sbrk_aligned+0x3c>)
 8008e78:	460c      	mov	r4, r1
 8008e7a:	6831      	ldr	r1, [r6, #0]
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	b911      	cbnz	r1, 8008e86 <sbrk_aligned+0x12>
 8008e80:	f000 f9e6 	bl	8009250 <_sbrk_r>
 8008e84:	6030      	str	r0, [r6, #0]
 8008e86:	4621      	mov	r1, r4
 8008e88:	4628      	mov	r0, r5
 8008e8a:	f000 f9e1 	bl	8009250 <_sbrk_r>
 8008e8e:	1c43      	adds	r3, r0, #1
 8008e90:	d00a      	beq.n	8008ea8 <sbrk_aligned+0x34>
 8008e92:	1cc4      	adds	r4, r0, #3
 8008e94:	f024 0403 	bic.w	r4, r4, #3
 8008e98:	42a0      	cmp	r0, r4
 8008e9a:	d007      	beq.n	8008eac <sbrk_aligned+0x38>
 8008e9c:	1a21      	subs	r1, r4, r0
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f000 f9d6 	bl	8009250 <_sbrk_r>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d101      	bne.n	8008eac <sbrk_aligned+0x38>
 8008ea8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008eac:	4620      	mov	r0, r4
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	20000834 	.word	0x20000834

08008eb4 <_malloc_r>:
 8008eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb8:	1ccd      	adds	r5, r1, #3
 8008eba:	f025 0503 	bic.w	r5, r5, #3
 8008ebe:	3508      	adds	r5, #8
 8008ec0:	2d0c      	cmp	r5, #12
 8008ec2:	bf38      	it	cc
 8008ec4:	250c      	movcc	r5, #12
 8008ec6:	2d00      	cmp	r5, #0
 8008ec8:	4607      	mov	r7, r0
 8008eca:	db01      	blt.n	8008ed0 <_malloc_r+0x1c>
 8008ecc:	42a9      	cmp	r1, r5
 8008ece:	d905      	bls.n	8008edc <_malloc_r+0x28>
 8008ed0:	230c      	movs	r3, #12
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008edc:	4e2e      	ldr	r6, [pc, #184]	; (8008f98 <_malloc_r+0xe4>)
 8008ede:	f000 fc69 	bl	80097b4 <__malloc_lock>
 8008ee2:	6833      	ldr	r3, [r6, #0]
 8008ee4:	461c      	mov	r4, r3
 8008ee6:	bb34      	cbnz	r4, 8008f36 <_malloc_r+0x82>
 8008ee8:	4629      	mov	r1, r5
 8008eea:	4638      	mov	r0, r7
 8008eec:	f7ff ffc2 	bl	8008e74 <sbrk_aligned>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	d14d      	bne.n	8008f92 <_malloc_r+0xde>
 8008ef6:	6834      	ldr	r4, [r6, #0]
 8008ef8:	4626      	mov	r6, r4
 8008efa:	2e00      	cmp	r6, #0
 8008efc:	d140      	bne.n	8008f80 <_malloc_r+0xcc>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	4631      	mov	r1, r6
 8008f02:	4638      	mov	r0, r7
 8008f04:	eb04 0803 	add.w	r8, r4, r3
 8008f08:	f000 f9a2 	bl	8009250 <_sbrk_r>
 8008f0c:	4580      	cmp	r8, r0
 8008f0e:	d13a      	bne.n	8008f86 <_malloc_r+0xd2>
 8008f10:	6821      	ldr	r1, [r4, #0]
 8008f12:	3503      	adds	r5, #3
 8008f14:	1a6d      	subs	r5, r5, r1
 8008f16:	f025 0503 	bic.w	r5, r5, #3
 8008f1a:	3508      	adds	r5, #8
 8008f1c:	2d0c      	cmp	r5, #12
 8008f1e:	bf38      	it	cc
 8008f20:	250c      	movcc	r5, #12
 8008f22:	4629      	mov	r1, r5
 8008f24:	4638      	mov	r0, r7
 8008f26:	f7ff ffa5 	bl	8008e74 <sbrk_aligned>
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d02b      	beq.n	8008f86 <_malloc_r+0xd2>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	442b      	add	r3, r5
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	e00e      	b.n	8008f54 <_malloc_r+0xa0>
 8008f36:	6822      	ldr	r2, [r4, #0]
 8008f38:	1b52      	subs	r2, r2, r5
 8008f3a:	d41e      	bmi.n	8008f7a <_malloc_r+0xc6>
 8008f3c:	2a0b      	cmp	r2, #11
 8008f3e:	d916      	bls.n	8008f6e <_malloc_r+0xba>
 8008f40:	1961      	adds	r1, r4, r5
 8008f42:	42a3      	cmp	r3, r4
 8008f44:	6025      	str	r5, [r4, #0]
 8008f46:	bf18      	it	ne
 8008f48:	6059      	strne	r1, [r3, #4]
 8008f4a:	6863      	ldr	r3, [r4, #4]
 8008f4c:	bf08      	it	eq
 8008f4e:	6031      	streq	r1, [r6, #0]
 8008f50:	5162      	str	r2, [r4, r5]
 8008f52:	604b      	str	r3, [r1, #4]
 8008f54:	4638      	mov	r0, r7
 8008f56:	f104 060b 	add.w	r6, r4, #11
 8008f5a:	f000 fc31 	bl	80097c0 <__malloc_unlock>
 8008f5e:	f026 0607 	bic.w	r6, r6, #7
 8008f62:	1d23      	adds	r3, r4, #4
 8008f64:	1af2      	subs	r2, r6, r3
 8008f66:	d0b6      	beq.n	8008ed6 <_malloc_r+0x22>
 8008f68:	1b9b      	subs	r3, r3, r6
 8008f6a:	50a3      	str	r3, [r4, r2]
 8008f6c:	e7b3      	b.n	8008ed6 <_malloc_r+0x22>
 8008f6e:	6862      	ldr	r2, [r4, #4]
 8008f70:	42a3      	cmp	r3, r4
 8008f72:	bf0c      	ite	eq
 8008f74:	6032      	streq	r2, [r6, #0]
 8008f76:	605a      	strne	r2, [r3, #4]
 8008f78:	e7ec      	b.n	8008f54 <_malloc_r+0xa0>
 8008f7a:	4623      	mov	r3, r4
 8008f7c:	6864      	ldr	r4, [r4, #4]
 8008f7e:	e7b2      	b.n	8008ee6 <_malloc_r+0x32>
 8008f80:	4634      	mov	r4, r6
 8008f82:	6876      	ldr	r6, [r6, #4]
 8008f84:	e7b9      	b.n	8008efa <_malloc_r+0x46>
 8008f86:	230c      	movs	r3, #12
 8008f88:	603b      	str	r3, [r7, #0]
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	f000 fc18 	bl	80097c0 <__malloc_unlock>
 8008f90:	e7a1      	b.n	8008ed6 <_malloc_r+0x22>
 8008f92:	6025      	str	r5, [r4, #0]
 8008f94:	e7de      	b.n	8008f54 <_malloc_r+0xa0>
 8008f96:	bf00      	nop
 8008f98:	20000830 	.word	0x20000830

08008f9c <__sfputc_r>:
 8008f9c:	6893      	ldr	r3, [r2, #8]
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	b410      	push	{r4}
 8008fa4:	6093      	str	r3, [r2, #8]
 8008fa6:	da08      	bge.n	8008fba <__sfputc_r+0x1e>
 8008fa8:	6994      	ldr	r4, [r2, #24]
 8008faa:	42a3      	cmp	r3, r4
 8008fac:	db01      	blt.n	8008fb2 <__sfputc_r+0x16>
 8008fae:	290a      	cmp	r1, #10
 8008fb0:	d103      	bne.n	8008fba <__sfputc_r+0x1e>
 8008fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fb6:	f000 b99f 	b.w	80092f8 <__swbuf_r>
 8008fba:	6813      	ldr	r3, [r2, #0]
 8008fbc:	1c58      	adds	r0, r3, #1
 8008fbe:	6010      	str	r0, [r2, #0]
 8008fc0:	7019      	strb	r1, [r3, #0]
 8008fc2:	4608      	mov	r0, r1
 8008fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <__sfputs_r>:
 8008fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fcc:	4606      	mov	r6, r0
 8008fce:	460f      	mov	r7, r1
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	18d5      	adds	r5, r2, r3
 8008fd4:	42ac      	cmp	r4, r5
 8008fd6:	d101      	bne.n	8008fdc <__sfputs_r+0x12>
 8008fd8:	2000      	movs	r0, #0
 8008fda:	e007      	b.n	8008fec <__sfputs_r+0x22>
 8008fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe0:	463a      	mov	r2, r7
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f7ff ffda 	bl	8008f9c <__sfputc_r>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d1f3      	bne.n	8008fd4 <__sfputs_r+0xa>
 8008fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ff0 <_vfiprintf_r>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	b09d      	sub	sp, #116	; 0x74
 8008ff8:	4614      	mov	r4, r2
 8008ffa:	4698      	mov	r8, r3
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	b118      	cbz	r0, 8009008 <_vfiprintf_r+0x18>
 8009000:	6983      	ldr	r3, [r0, #24]
 8009002:	b90b      	cbnz	r3, 8009008 <_vfiprintf_r+0x18>
 8009004:	f7ff faa2 	bl	800854c <__sinit>
 8009008:	4b89      	ldr	r3, [pc, #548]	; (8009230 <_vfiprintf_r+0x240>)
 800900a:	429d      	cmp	r5, r3
 800900c:	d11b      	bne.n	8009046 <_vfiprintf_r+0x56>
 800900e:	6875      	ldr	r5, [r6, #4]
 8009010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009012:	07d9      	lsls	r1, r3, #31
 8009014:	d405      	bmi.n	8009022 <_vfiprintf_r+0x32>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	059a      	lsls	r2, r3, #22
 800901a:	d402      	bmi.n	8009022 <_vfiprintf_r+0x32>
 800901c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800901e:	f7ff fb38 	bl	8008692 <__retarget_lock_acquire_recursive>
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	071b      	lsls	r3, r3, #28
 8009026:	d501      	bpl.n	800902c <_vfiprintf_r+0x3c>
 8009028:	692b      	ldr	r3, [r5, #16]
 800902a:	b9eb      	cbnz	r3, 8009068 <_vfiprintf_r+0x78>
 800902c:	4629      	mov	r1, r5
 800902e:	4630      	mov	r0, r6
 8009030:	f000 f9c6 	bl	80093c0 <__swsetup_r>
 8009034:	b1c0      	cbz	r0, 8009068 <_vfiprintf_r+0x78>
 8009036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009038:	07dc      	lsls	r4, r3, #31
 800903a:	d50e      	bpl.n	800905a <_vfiprintf_r+0x6a>
 800903c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009040:	b01d      	add	sp, #116	; 0x74
 8009042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009046:	4b7b      	ldr	r3, [pc, #492]	; (8009234 <_vfiprintf_r+0x244>)
 8009048:	429d      	cmp	r5, r3
 800904a:	d101      	bne.n	8009050 <_vfiprintf_r+0x60>
 800904c:	68b5      	ldr	r5, [r6, #8]
 800904e:	e7df      	b.n	8009010 <_vfiprintf_r+0x20>
 8009050:	4b79      	ldr	r3, [pc, #484]	; (8009238 <_vfiprintf_r+0x248>)
 8009052:	429d      	cmp	r5, r3
 8009054:	bf08      	it	eq
 8009056:	68f5      	ldreq	r5, [r6, #12]
 8009058:	e7da      	b.n	8009010 <_vfiprintf_r+0x20>
 800905a:	89ab      	ldrh	r3, [r5, #12]
 800905c:	0598      	lsls	r0, r3, #22
 800905e:	d4ed      	bmi.n	800903c <_vfiprintf_r+0x4c>
 8009060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009062:	f7ff fb17 	bl	8008694 <__retarget_lock_release_recursive>
 8009066:	e7e9      	b.n	800903c <_vfiprintf_r+0x4c>
 8009068:	2300      	movs	r3, #0
 800906a:	9309      	str	r3, [sp, #36]	; 0x24
 800906c:	2320      	movs	r3, #32
 800906e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009072:	f8cd 800c 	str.w	r8, [sp, #12]
 8009076:	2330      	movs	r3, #48	; 0x30
 8009078:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800923c <_vfiprintf_r+0x24c>
 800907c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009080:	f04f 0901 	mov.w	r9, #1
 8009084:	4623      	mov	r3, r4
 8009086:	469a      	mov	sl, r3
 8009088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800908c:	b10a      	cbz	r2, 8009092 <_vfiprintf_r+0xa2>
 800908e:	2a25      	cmp	r2, #37	; 0x25
 8009090:	d1f9      	bne.n	8009086 <_vfiprintf_r+0x96>
 8009092:	ebba 0b04 	subs.w	fp, sl, r4
 8009096:	d00b      	beq.n	80090b0 <_vfiprintf_r+0xc0>
 8009098:	465b      	mov	r3, fp
 800909a:	4622      	mov	r2, r4
 800909c:	4629      	mov	r1, r5
 800909e:	4630      	mov	r0, r6
 80090a0:	f7ff ff93 	bl	8008fca <__sfputs_r>
 80090a4:	3001      	adds	r0, #1
 80090a6:	f000 80aa 	beq.w	80091fe <_vfiprintf_r+0x20e>
 80090aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ac:	445a      	add	r2, fp
 80090ae:	9209      	str	r2, [sp, #36]	; 0x24
 80090b0:	f89a 3000 	ldrb.w	r3, [sl]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 80a2 	beq.w	80091fe <_vfiprintf_r+0x20e>
 80090ba:	2300      	movs	r3, #0
 80090bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090c4:	f10a 0a01 	add.w	sl, sl, #1
 80090c8:	9304      	str	r3, [sp, #16]
 80090ca:	9307      	str	r3, [sp, #28]
 80090cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090d0:	931a      	str	r3, [sp, #104]	; 0x68
 80090d2:	4654      	mov	r4, sl
 80090d4:	2205      	movs	r2, #5
 80090d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090da:	4858      	ldr	r0, [pc, #352]	; (800923c <_vfiprintf_r+0x24c>)
 80090dc:	f7f7 f898 	bl	8000210 <memchr>
 80090e0:	9a04      	ldr	r2, [sp, #16]
 80090e2:	b9d8      	cbnz	r0, 800911c <_vfiprintf_r+0x12c>
 80090e4:	06d1      	lsls	r1, r2, #27
 80090e6:	bf44      	itt	mi
 80090e8:	2320      	movmi	r3, #32
 80090ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ee:	0713      	lsls	r3, r2, #28
 80090f0:	bf44      	itt	mi
 80090f2:	232b      	movmi	r3, #43	; 0x2b
 80090f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f8:	f89a 3000 	ldrb.w	r3, [sl]
 80090fc:	2b2a      	cmp	r3, #42	; 0x2a
 80090fe:	d015      	beq.n	800912c <_vfiprintf_r+0x13c>
 8009100:	9a07      	ldr	r2, [sp, #28]
 8009102:	4654      	mov	r4, sl
 8009104:	2000      	movs	r0, #0
 8009106:	f04f 0c0a 	mov.w	ip, #10
 800910a:	4621      	mov	r1, r4
 800910c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009110:	3b30      	subs	r3, #48	; 0x30
 8009112:	2b09      	cmp	r3, #9
 8009114:	d94e      	bls.n	80091b4 <_vfiprintf_r+0x1c4>
 8009116:	b1b0      	cbz	r0, 8009146 <_vfiprintf_r+0x156>
 8009118:	9207      	str	r2, [sp, #28]
 800911a:	e014      	b.n	8009146 <_vfiprintf_r+0x156>
 800911c:	eba0 0308 	sub.w	r3, r0, r8
 8009120:	fa09 f303 	lsl.w	r3, r9, r3
 8009124:	4313      	orrs	r3, r2
 8009126:	9304      	str	r3, [sp, #16]
 8009128:	46a2      	mov	sl, r4
 800912a:	e7d2      	b.n	80090d2 <_vfiprintf_r+0xe2>
 800912c:	9b03      	ldr	r3, [sp, #12]
 800912e:	1d19      	adds	r1, r3, #4
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	9103      	str	r1, [sp, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	bfbb      	ittet	lt
 8009138:	425b      	neglt	r3, r3
 800913a:	f042 0202 	orrlt.w	r2, r2, #2
 800913e:	9307      	strge	r3, [sp, #28]
 8009140:	9307      	strlt	r3, [sp, #28]
 8009142:	bfb8      	it	lt
 8009144:	9204      	strlt	r2, [sp, #16]
 8009146:	7823      	ldrb	r3, [r4, #0]
 8009148:	2b2e      	cmp	r3, #46	; 0x2e
 800914a:	d10c      	bne.n	8009166 <_vfiprintf_r+0x176>
 800914c:	7863      	ldrb	r3, [r4, #1]
 800914e:	2b2a      	cmp	r3, #42	; 0x2a
 8009150:	d135      	bne.n	80091be <_vfiprintf_r+0x1ce>
 8009152:	9b03      	ldr	r3, [sp, #12]
 8009154:	1d1a      	adds	r2, r3, #4
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	9203      	str	r2, [sp, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	bfb8      	it	lt
 800915e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009162:	3402      	adds	r4, #2
 8009164:	9305      	str	r3, [sp, #20]
 8009166:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800924c <_vfiprintf_r+0x25c>
 800916a:	7821      	ldrb	r1, [r4, #0]
 800916c:	2203      	movs	r2, #3
 800916e:	4650      	mov	r0, sl
 8009170:	f7f7 f84e 	bl	8000210 <memchr>
 8009174:	b140      	cbz	r0, 8009188 <_vfiprintf_r+0x198>
 8009176:	2340      	movs	r3, #64	; 0x40
 8009178:	eba0 000a 	sub.w	r0, r0, sl
 800917c:	fa03 f000 	lsl.w	r0, r3, r0
 8009180:	9b04      	ldr	r3, [sp, #16]
 8009182:	4303      	orrs	r3, r0
 8009184:	3401      	adds	r4, #1
 8009186:	9304      	str	r3, [sp, #16]
 8009188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800918c:	482c      	ldr	r0, [pc, #176]	; (8009240 <_vfiprintf_r+0x250>)
 800918e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009192:	2206      	movs	r2, #6
 8009194:	f7f7 f83c 	bl	8000210 <memchr>
 8009198:	2800      	cmp	r0, #0
 800919a:	d03f      	beq.n	800921c <_vfiprintf_r+0x22c>
 800919c:	4b29      	ldr	r3, [pc, #164]	; (8009244 <_vfiprintf_r+0x254>)
 800919e:	bb1b      	cbnz	r3, 80091e8 <_vfiprintf_r+0x1f8>
 80091a0:	9b03      	ldr	r3, [sp, #12]
 80091a2:	3307      	adds	r3, #7
 80091a4:	f023 0307 	bic.w	r3, r3, #7
 80091a8:	3308      	adds	r3, #8
 80091aa:	9303      	str	r3, [sp, #12]
 80091ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ae:	443b      	add	r3, r7
 80091b0:	9309      	str	r3, [sp, #36]	; 0x24
 80091b2:	e767      	b.n	8009084 <_vfiprintf_r+0x94>
 80091b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80091b8:	460c      	mov	r4, r1
 80091ba:	2001      	movs	r0, #1
 80091bc:	e7a5      	b.n	800910a <_vfiprintf_r+0x11a>
 80091be:	2300      	movs	r3, #0
 80091c0:	3401      	adds	r4, #1
 80091c2:	9305      	str	r3, [sp, #20]
 80091c4:	4619      	mov	r1, r3
 80091c6:	f04f 0c0a 	mov.w	ip, #10
 80091ca:	4620      	mov	r0, r4
 80091cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d0:	3a30      	subs	r2, #48	; 0x30
 80091d2:	2a09      	cmp	r2, #9
 80091d4:	d903      	bls.n	80091de <_vfiprintf_r+0x1ee>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0c5      	beq.n	8009166 <_vfiprintf_r+0x176>
 80091da:	9105      	str	r1, [sp, #20]
 80091dc:	e7c3      	b.n	8009166 <_vfiprintf_r+0x176>
 80091de:	fb0c 2101 	mla	r1, ip, r1, r2
 80091e2:	4604      	mov	r4, r0
 80091e4:	2301      	movs	r3, #1
 80091e6:	e7f0      	b.n	80091ca <_vfiprintf_r+0x1da>
 80091e8:	ab03      	add	r3, sp, #12
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	462a      	mov	r2, r5
 80091ee:	4b16      	ldr	r3, [pc, #88]	; (8009248 <_vfiprintf_r+0x258>)
 80091f0:	a904      	add	r1, sp, #16
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7fd fd9c 	bl	8006d30 <_printf_float>
 80091f8:	4607      	mov	r7, r0
 80091fa:	1c78      	adds	r0, r7, #1
 80091fc:	d1d6      	bne.n	80091ac <_vfiprintf_r+0x1bc>
 80091fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009200:	07d9      	lsls	r1, r3, #31
 8009202:	d405      	bmi.n	8009210 <_vfiprintf_r+0x220>
 8009204:	89ab      	ldrh	r3, [r5, #12]
 8009206:	059a      	lsls	r2, r3, #22
 8009208:	d402      	bmi.n	8009210 <_vfiprintf_r+0x220>
 800920a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800920c:	f7ff fa42 	bl	8008694 <__retarget_lock_release_recursive>
 8009210:	89ab      	ldrh	r3, [r5, #12]
 8009212:	065b      	lsls	r3, r3, #25
 8009214:	f53f af12 	bmi.w	800903c <_vfiprintf_r+0x4c>
 8009218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800921a:	e711      	b.n	8009040 <_vfiprintf_r+0x50>
 800921c:	ab03      	add	r3, sp, #12
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	462a      	mov	r2, r5
 8009222:	4b09      	ldr	r3, [pc, #36]	; (8009248 <_vfiprintf_r+0x258>)
 8009224:	a904      	add	r1, sp, #16
 8009226:	4630      	mov	r0, r6
 8009228:	f7fe f826 	bl	8007278 <_printf_i>
 800922c:	e7e4      	b.n	80091f8 <_vfiprintf_r+0x208>
 800922e:	bf00      	nop
 8009230:	08009cf4 	.word	0x08009cf4
 8009234:	08009d14 	.word	0x08009d14
 8009238:	08009cd4 	.word	0x08009cd4
 800923c:	08009e8c 	.word	0x08009e8c
 8009240:	08009e96 	.word	0x08009e96
 8009244:	08006d31 	.word	0x08006d31
 8009248:	08008fcb 	.word	0x08008fcb
 800924c:	08009e92 	.word	0x08009e92

08009250 <_sbrk_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d06      	ldr	r5, [pc, #24]	; (800926c <_sbrk_r+0x1c>)
 8009254:	2300      	movs	r3, #0
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	602b      	str	r3, [r5, #0]
 800925c:	f7fa f800 	bl	8003260 <_sbrk>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_sbrk_r+0x1a>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_sbrk_r+0x1a>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	20000838 	.word	0x20000838

08009270 <__sread>:
 8009270:	b510      	push	{r4, lr}
 8009272:	460c      	mov	r4, r1
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	f000 faa8 	bl	80097cc <_read_r>
 800927c:	2800      	cmp	r0, #0
 800927e:	bfab      	itete	ge
 8009280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009282:	89a3      	ldrhlt	r3, [r4, #12]
 8009284:	181b      	addge	r3, r3, r0
 8009286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800928a:	bfac      	ite	ge
 800928c:	6563      	strge	r3, [r4, #84]	; 0x54
 800928e:	81a3      	strhlt	r3, [r4, #12]
 8009290:	bd10      	pop	{r4, pc}

08009292 <__swrite>:
 8009292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009296:	461f      	mov	r7, r3
 8009298:	898b      	ldrh	r3, [r1, #12]
 800929a:	05db      	lsls	r3, r3, #23
 800929c:	4605      	mov	r5, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	4616      	mov	r6, r2
 80092a2:	d505      	bpl.n	80092b0 <__swrite+0x1e>
 80092a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a8:	2302      	movs	r3, #2
 80092aa:	2200      	movs	r2, #0
 80092ac:	f000 f9f8 	bl	80096a0 <_lseek_r>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	4632      	mov	r2, r6
 80092be:	463b      	mov	r3, r7
 80092c0:	4628      	mov	r0, r5
 80092c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092c6:	f000 b869 	b.w	800939c <_write_r>

080092ca <__sseek>:
 80092ca:	b510      	push	{r4, lr}
 80092cc:	460c      	mov	r4, r1
 80092ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d2:	f000 f9e5 	bl	80096a0 <_lseek_r>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	bf15      	itete	ne
 80092dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80092de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092e6:	81a3      	strheq	r3, [r4, #12]
 80092e8:	bf18      	it	ne
 80092ea:	81a3      	strhne	r3, [r4, #12]
 80092ec:	bd10      	pop	{r4, pc}

080092ee <__sclose>:
 80092ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f2:	f000 b8f1 	b.w	80094d8 <_close_r>
	...

080092f8 <__swbuf_r>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	460e      	mov	r6, r1
 80092fc:	4614      	mov	r4, r2
 80092fe:	4605      	mov	r5, r0
 8009300:	b118      	cbz	r0, 800930a <__swbuf_r+0x12>
 8009302:	6983      	ldr	r3, [r0, #24]
 8009304:	b90b      	cbnz	r3, 800930a <__swbuf_r+0x12>
 8009306:	f7ff f921 	bl	800854c <__sinit>
 800930a:	4b21      	ldr	r3, [pc, #132]	; (8009390 <__swbuf_r+0x98>)
 800930c:	429c      	cmp	r4, r3
 800930e:	d12b      	bne.n	8009368 <__swbuf_r+0x70>
 8009310:	686c      	ldr	r4, [r5, #4]
 8009312:	69a3      	ldr	r3, [r4, #24]
 8009314:	60a3      	str	r3, [r4, #8]
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	071a      	lsls	r2, r3, #28
 800931a:	d52f      	bpl.n	800937c <__swbuf_r+0x84>
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	b36b      	cbz	r3, 800937c <__swbuf_r+0x84>
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	6820      	ldr	r0, [r4, #0]
 8009324:	1ac0      	subs	r0, r0, r3
 8009326:	6963      	ldr	r3, [r4, #20]
 8009328:	b2f6      	uxtb	r6, r6
 800932a:	4283      	cmp	r3, r0
 800932c:	4637      	mov	r7, r6
 800932e:	dc04      	bgt.n	800933a <__swbuf_r+0x42>
 8009330:	4621      	mov	r1, r4
 8009332:	4628      	mov	r0, r5
 8009334:	f000 f966 	bl	8009604 <_fflush_r>
 8009338:	bb30      	cbnz	r0, 8009388 <__swbuf_r+0x90>
 800933a:	68a3      	ldr	r3, [r4, #8]
 800933c:	3b01      	subs	r3, #1
 800933e:	60a3      	str	r3, [r4, #8]
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	6022      	str	r2, [r4, #0]
 8009346:	701e      	strb	r6, [r3, #0]
 8009348:	6963      	ldr	r3, [r4, #20]
 800934a:	3001      	adds	r0, #1
 800934c:	4283      	cmp	r3, r0
 800934e:	d004      	beq.n	800935a <__swbuf_r+0x62>
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	07db      	lsls	r3, r3, #31
 8009354:	d506      	bpl.n	8009364 <__swbuf_r+0x6c>
 8009356:	2e0a      	cmp	r6, #10
 8009358:	d104      	bne.n	8009364 <__swbuf_r+0x6c>
 800935a:	4621      	mov	r1, r4
 800935c:	4628      	mov	r0, r5
 800935e:	f000 f951 	bl	8009604 <_fflush_r>
 8009362:	b988      	cbnz	r0, 8009388 <__swbuf_r+0x90>
 8009364:	4638      	mov	r0, r7
 8009366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009368:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <__swbuf_r+0x9c>)
 800936a:	429c      	cmp	r4, r3
 800936c:	d101      	bne.n	8009372 <__swbuf_r+0x7a>
 800936e:	68ac      	ldr	r4, [r5, #8]
 8009370:	e7cf      	b.n	8009312 <__swbuf_r+0x1a>
 8009372:	4b09      	ldr	r3, [pc, #36]	; (8009398 <__swbuf_r+0xa0>)
 8009374:	429c      	cmp	r4, r3
 8009376:	bf08      	it	eq
 8009378:	68ec      	ldreq	r4, [r5, #12]
 800937a:	e7ca      	b.n	8009312 <__swbuf_r+0x1a>
 800937c:	4621      	mov	r1, r4
 800937e:	4628      	mov	r0, r5
 8009380:	f000 f81e 	bl	80093c0 <__swsetup_r>
 8009384:	2800      	cmp	r0, #0
 8009386:	d0cb      	beq.n	8009320 <__swbuf_r+0x28>
 8009388:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800938c:	e7ea      	b.n	8009364 <__swbuf_r+0x6c>
 800938e:	bf00      	nop
 8009390:	08009cf4 	.word	0x08009cf4
 8009394:	08009d14 	.word	0x08009d14
 8009398:	08009cd4 	.word	0x08009cd4

0800939c <_write_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4d07      	ldr	r5, [pc, #28]	; (80093bc <_write_r+0x20>)
 80093a0:	4604      	mov	r4, r0
 80093a2:	4608      	mov	r0, r1
 80093a4:	4611      	mov	r1, r2
 80093a6:	2200      	movs	r2, #0
 80093a8:	602a      	str	r2, [r5, #0]
 80093aa:	461a      	mov	r2, r3
 80093ac:	f7f7 ff06 	bl	80011bc <_write>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d102      	bne.n	80093ba <_write_r+0x1e>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	b103      	cbz	r3, 80093ba <_write_r+0x1e>
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	20000838 	.word	0x20000838

080093c0 <__swsetup_r>:
 80093c0:	4b32      	ldr	r3, [pc, #200]	; (800948c <__swsetup_r+0xcc>)
 80093c2:	b570      	push	{r4, r5, r6, lr}
 80093c4:	681d      	ldr	r5, [r3, #0]
 80093c6:	4606      	mov	r6, r0
 80093c8:	460c      	mov	r4, r1
 80093ca:	b125      	cbz	r5, 80093d6 <__swsetup_r+0x16>
 80093cc:	69ab      	ldr	r3, [r5, #24]
 80093ce:	b913      	cbnz	r3, 80093d6 <__swsetup_r+0x16>
 80093d0:	4628      	mov	r0, r5
 80093d2:	f7ff f8bb 	bl	800854c <__sinit>
 80093d6:	4b2e      	ldr	r3, [pc, #184]	; (8009490 <__swsetup_r+0xd0>)
 80093d8:	429c      	cmp	r4, r3
 80093da:	d10f      	bne.n	80093fc <__swsetup_r+0x3c>
 80093dc:	686c      	ldr	r4, [r5, #4]
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093e4:	0719      	lsls	r1, r3, #28
 80093e6:	d42c      	bmi.n	8009442 <__swsetup_r+0x82>
 80093e8:	06dd      	lsls	r5, r3, #27
 80093ea:	d411      	bmi.n	8009410 <__swsetup_r+0x50>
 80093ec:	2309      	movs	r3, #9
 80093ee:	6033      	str	r3, [r6, #0]
 80093f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093f4:	81a3      	strh	r3, [r4, #12]
 80093f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093fa:	e03e      	b.n	800947a <__swsetup_r+0xba>
 80093fc:	4b25      	ldr	r3, [pc, #148]	; (8009494 <__swsetup_r+0xd4>)
 80093fe:	429c      	cmp	r4, r3
 8009400:	d101      	bne.n	8009406 <__swsetup_r+0x46>
 8009402:	68ac      	ldr	r4, [r5, #8]
 8009404:	e7eb      	b.n	80093de <__swsetup_r+0x1e>
 8009406:	4b24      	ldr	r3, [pc, #144]	; (8009498 <__swsetup_r+0xd8>)
 8009408:	429c      	cmp	r4, r3
 800940a:	bf08      	it	eq
 800940c:	68ec      	ldreq	r4, [r5, #12]
 800940e:	e7e6      	b.n	80093de <__swsetup_r+0x1e>
 8009410:	0758      	lsls	r0, r3, #29
 8009412:	d512      	bpl.n	800943a <__swsetup_r+0x7a>
 8009414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009416:	b141      	cbz	r1, 800942a <__swsetup_r+0x6a>
 8009418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800941c:	4299      	cmp	r1, r3
 800941e:	d002      	beq.n	8009426 <__swsetup_r+0x66>
 8009420:	4630      	mov	r0, r6
 8009422:	f7ff fcdb 	bl	8008ddc <_free_r>
 8009426:	2300      	movs	r3, #0
 8009428:	6363      	str	r3, [r4, #52]	; 0x34
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009430:	81a3      	strh	r3, [r4, #12]
 8009432:	2300      	movs	r3, #0
 8009434:	6063      	str	r3, [r4, #4]
 8009436:	6923      	ldr	r3, [r4, #16]
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	f043 0308 	orr.w	r3, r3, #8
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	b94b      	cbnz	r3, 800945a <__swsetup_r+0x9a>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800944c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009450:	d003      	beq.n	800945a <__swsetup_r+0x9a>
 8009452:	4621      	mov	r1, r4
 8009454:	4630      	mov	r0, r6
 8009456:	f000 f95b 	bl	8009710 <__smakebuf_r>
 800945a:	89a0      	ldrh	r0, [r4, #12]
 800945c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009460:	f010 0301 	ands.w	r3, r0, #1
 8009464:	d00a      	beq.n	800947c <__swsetup_r+0xbc>
 8009466:	2300      	movs	r3, #0
 8009468:	60a3      	str	r3, [r4, #8]
 800946a:	6963      	ldr	r3, [r4, #20]
 800946c:	425b      	negs	r3, r3
 800946e:	61a3      	str	r3, [r4, #24]
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	b943      	cbnz	r3, 8009486 <__swsetup_r+0xc6>
 8009474:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009478:	d1ba      	bne.n	80093f0 <__swsetup_r+0x30>
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	0781      	lsls	r1, r0, #30
 800947e:	bf58      	it	pl
 8009480:	6963      	ldrpl	r3, [r4, #20]
 8009482:	60a3      	str	r3, [r4, #8]
 8009484:	e7f4      	b.n	8009470 <__swsetup_r+0xb0>
 8009486:	2000      	movs	r0, #0
 8009488:	e7f7      	b.n	800947a <__swsetup_r+0xba>
 800948a:	bf00      	nop
 800948c:	20000010 	.word	0x20000010
 8009490:	08009cf4 	.word	0x08009cf4
 8009494:	08009d14 	.word	0x08009d14
 8009498:	08009cd4 	.word	0x08009cd4

0800949c <__assert_func>:
 800949c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800949e:	4614      	mov	r4, r2
 80094a0:	461a      	mov	r2, r3
 80094a2:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <__assert_func+0x2c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4605      	mov	r5, r0
 80094a8:	68d8      	ldr	r0, [r3, #12]
 80094aa:	b14c      	cbz	r4, 80094c0 <__assert_func+0x24>
 80094ac:	4b07      	ldr	r3, [pc, #28]	; (80094cc <__assert_func+0x30>)
 80094ae:	9100      	str	r1, [sp, #0]
 80094b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094b4:	4906      	ldr	r1, [pc, #24]	; (80094d0 <__assert_func+0x34>)
 80094b6:	462b      	mov	r3, r5
 80094b8:	f000 f8e0 	bl	800967c <fiprintf>
 80094bc:	f000 f9a5 	bl	800980a <abort>
 80094c0:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <__assert_func+0x38>)
 80094c2:	461c      	mov	r4, r3
 80094c4:	e7f3      	b.n	80094ae <__assert_func+0x12>
 80094c6:	bf00      	nop
 80094c8:	20000010 	.word	0x20000010
 80094cc:	08009e9d 	.word	0x08009e9d
 80094d0:	08009eaa 	.word	0x08009eaa
 80094d4:	08009ed8 	.word	0x08009ed8

080094d8 <_close_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4d06      	ldr	r5, [pc, #24]	; (80094f4 <_close_r+0x1c>)
 80094dc:	2300      	movs	r3, #0
 80094de:	4604      	mov	r4, r0
 80094e0:	4608      	mov	r0, r1
 80094e2:	602b      	str	r3, [r5, #0]
 80094e4:	f7f9 fe87 	bl	80031f6 <_close>
 80094e8:	1c43      	adds	r3, r0, #1
 80094ea:	d102      	bne.n	80094f2 <_close_r+0x1a>
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	b103      	cbz	r3, 80094f2 <_close_r+0x1a>
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
 80094f4:	20000838 	.word	0x20000838

080094f8 <__sflush_r>:
 80094f8:	898a      	ldrh	r2, [r1, #12]
 80094fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094fe:	4605      	mov	r5, r0
 8009500:	0710      	lsls	r0, r2, #28
 8009502:	460c      	mov	r4, r1
 8009504:	d458      	bmi.n	80095b8 <__sflush_r+0xc0>
 8009506:	684b      	ldr	r3, [r1, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	dc05      	bgt.n	8009518 <__sflush_r+0x20>
 800950c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	dc02      	bgt.n	8009518 <__sflush_r+0x20>
 8009512:	2000      	movs	r0, #0
 8009514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800951a:	2e00      	cmp	r6, #0
 800951c:	d0f9      	beq.n	8009512 <__sflush_r+0x1a>
 800951e:	2300      	movs	r3, #0
 8009520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009524:	682f      	ldr	r7, [r5, #0]
 8009526:	602b      	str	r3, [r5, #0]
 8009528:	d032      	beq.n	8009590 <__sflush_r+0x98>
 800952a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	075a      	lsls	r2, r3, #29
 8009530:	d505      	bpl.n	800953e <__sflush_r+0x46>
 8009532:	6863      	ldr	r3, [r4, #4]
 8009534:	1ac0      	subs	r0, r0, r3
 8009536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009538:	b10b      	cbz	r3, 800953e <__sflush_r+0x46>
 800953a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800953c:	1ac0      	subs	r0, r0, r3
 800953e:	2300      	movs	r3, #0
 8009540:	4602      	mov	r2, r0
 8009542:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009544:	6a21      	ldr	r1, [r4, #32]
 8009546:	4628      	mov	r0, r5
 8009548:	47b0      	blx	r6
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	d106      	bne.n	800955e <__sflush_r+0x66>
 8009550:	6829      	ldr	r1, [r5, #0]
 8009552:	291d      	cmp	r1, #29
 8009554:	d82c      	bhi.n	80095b0 <__sflush_r+0xb8>
 8009556:	4a2a      	ldr	r2, [pc, #168]	; (8009600 <__sflush_r+0x108>)
 8009558:	40ca      	lsrs	r2, r1
 800955a:	07d6      	lsls	r6, r2, #31
 800955c:	d528      	bpl.n	80095b0 <__sflush_r+0xb8>
 800955e:	2200      	movs	r2, #0
 8009560:	6062      	str	r2, [r4, #4]
 8009562:	04d9      	lsls	r1, r3, #19
 8009564:	6922      	ldr	r2, [r4, #16]
 8009566:	6022      	str	r2, [r4, #0]
 8009568:	d504      	bpl.n	8009574 <__sflush_r+0x7c>
 800956a:	1c42      	adds	r2, r0, #1
 800956c:	d101      	bne.n	8009572 <__sflush_r+0x7a>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	b903      	cbnz	r3, 8009574 <__sflush_r+0x7c>
 8009572:	6560      	str	r0, [r4, #84]	; 0x54
 8009574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009576:	602f      	str	r7, [r5, #0]
 8009578:	2900      	cmp	r1, #0
 800957a:	d0ca      	beq.n	8009512 <__sflush_r+0x1a>
 800957c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009580:	4299      	cmp	r1, r3
 8009582:	d002      	beq.n	800958a <__sflush_r+0x92>
 8009584:	4628      	mov	r0, r5
 8009586:	f7ff fc29 	bl	8008ddc <_free_r>
 800958a:	2000      	movs	r0, #0
 800958c:	6360      	str	r0, [r4, #52]	; 0x34
 800958e:	e7c1      	b.n	8009514 <__sflush_r+0x1c>
 8009590:	6a21      	ldr	r1, [r4, #32]
 8009592:	2301      	movs	r3, #1
 8009594:	4628      	mov	r0, r5
 8009596:	47b0      	blx	r6
 8009598:	1c41      	adds	r1, r0, #1
 800959a:	d1c7      	bne.n	800952c <__sflush_r+0x34>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d0c4      	beq.n	800952c <__sflush_r+0x34>
 80095a2:	2b1d      	cmp	r3, #29
 80095a4:	d001      	beq.n	80095aa <__sflush_r+0xb2>
 80095a6:	2b16      	cmp	r3, #22
 80095a8:	d101      	bne.n	80095ae <__sflush_r+0xb6>
 80095aa:	602f      	str	r7, [r5, #0]
 80095ac:	e7b1      	b.n	8009512 <__sflush_r+0x1a>
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095b4:	81a3      	strh	r3, [r4, #12]
 80095b6:	e7ad      	b.n	8009514 <__sflush_r+0x1c>
 80095b8:	690f      	ldr	r7, [r1, #16]
 80095ba:	2f00      	cmp	r7, #0
 80095bc:	d0a9      	beq.n	8009512 <__sflush_r+0x1a>
 80095be:	0793      	lsls	r3, r2, #30
 80095c0:	680e      	ldr	r6, [r1, #0]
 80095c2:	bf08      	it	eq
 80095c4:	694b      	ldreq	r3, [r1, #20]
 80095c6:	600f      	str	r7, [r1, #0]
 80095c8:	bf18      	it	ne
 80095ca:	2300      	movne	r3, #0
 80095cc:	eba6 0807 	sub.w	r8, r6, r7
 80095d0:	608b      	str	r3, [r1, #8]
 80095d2:	f1b8 0f00 	cmp.w	r8, #0
 80095d6:	dd9c      	ble.n	8009512 <__sflush_r+0x1a>
 80095d8:	6a21      	ldr	r1, [r4, #32]
 80095da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095dc:	4643      	mov	r3, r8
 80095de:	463a      	mov	r2, r7
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b0      	blx	r6
 80095e4:	2800      	cmp	r0, #0
 80095e6:	dc06      	bgt.n	80095f6 <__sflush_r+0xfe>
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ee:	81a3      	strh	r3, [r4, #12]
 80095f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095f4:	e78e      	b.n	8009514 <__sflush_r+0x1c>
 80095f6:	4407      	add	r7, r0
 80095f8:	eba8 0800 	sub.w	r8, r8, r0
 80095fc:	e7e9      	b.n	80095d2 <__sflush_r+0xda>
 80095fe:	bf00      	nop
 8009600:	20400001 	.word	0x20400001

08009604 <_fflush_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	690b      	ldr	r3, [r1, #16]
 8009608:	4605      	mov	r5, r0
 800960a:	460c      	mov	r4, r1
 800960c:	b913      	cbnz	r3, 8009614 <_fflush_r+0x10>
 800960e:	2500      	movs	r5, #0
 8009610:	4628      	mov	r0, r5
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	b118      	cbz	r0, 800961e <_fflush_r+0x1a>
 8009616:	6983      	ldr	r3, [r0, #24]
 8009618:	b90b      	cbnz	r3, 800961e <_fflush_r+0x1a>
 800961a:	f7fe ff97 	bl	800854c <__sinit>
 800961e:	4b14      	ldr	r3, [pc, #80]	; (8009670 <_fflush_r+0x6c>)
 8009620:	429c      	cmp	r4, r3
 8009622:	d11b      	bne.n	800965c <_fflush_r+0x58>
 8009624:	686c      	ldr	r4, [r5, #4]
 8009626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0ef      	beq.n	800960e <_fflush_r+0xa>
 800962e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009630:	07d0      	lsls	r0, r2, #31
 8009632:	d404      	bmi.n	800963e <_fflush_r+0x3a>
 8009634:	0599      	lsls	r1, r3, #22
 8009636:	d402      	bmi.n	800963e <_fflush_r+0x3a>
 8009638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800963a:	f7ff f82a 	bl	8008692 <__retarget_lock_acquire_recursive>
 800963e:	4628      	mov	r0, r5
 8009640:	4621      	mov	r1, r4
 8009642:	f7ff ff59 	bl	80094f8 <__sflush_r>
 8009646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009648:	07da      	lsls	r2, r3, #31
 800964a:	4605      	mov	r5, r0
 800964c:	d4e0      	bmi.n	8009610 <_fflush_r+0xc>
 800964e:	89a3      	ldrh	r3, [r4, #12]
 8009650:	059b      	lsls	r3, r3, #22
 8009652:	d4dd      	bmi.n	8009610 <_fflush_r+0xc>
 8009654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009656:	f7ff f81d 	bl	8008694 <__retarget_lock_release_recursive>
 800965a:	e7d9      	b.n	8009610 <_fflush_r+0xc>
 800965c:	4b05      	ldr	r3, [pc, #20]	; (8009674 <_fflush_r+0x70>)
 800965e:	429c      	cmp	r4, r3
 8009660:	d101      	bne.n	8009666 <_fflush_r+0x62>
 8009662:	68ac      	ldr	r4, [r5, #8]
 8009664:	e7df      	b.n	8009626 <_fflush_r+0x22>
 8009666:	4b04      	ldr	r3, [pc, #16]	; (8009678 <_fflush_r+0x74>)
 8009668:	429c      	cmp	r4, r3
 800966a:	bf08      	it	eq
 800966c:	68ec      	ldreq	r4, [r5, #12]
 800966e:	e7da      	b.n	8009626 <_fflush_r+0x22>
 8009670:	08009cf4 	.word	0x08009cf4
 8009674:	08009d14 	.word	0x08009d14
 8009678:	08009cd4 	.word	0x08009cd4

0800967c <fiprintf>:
 800967c:	b40e      	push	{r1, r2, r3}
 800967e:	b503      	push	{r0, r1, lr}
 8009680:	4601      	mov	r1, r0
 8009682:	ab03      	add	r3, sp, #12
 8009684:	4805      	ldr	r0, [pc, #20]	; (800969c <fiprintf+0x20>)
 8009686:	f853 2b04 	ldr.w	r2, [r3], #4
 800968a:	6800      	ldr	r0, [r0, #0]
 800968c:	9301      	str	r3, [sp, #4]
 800968e:	f7ff fcaf 	bl	8008ff0 <_vfiprintf_r>
 8009692:	b002      	add	sp, #8
 8009694:	f85d eb04 	ldr.w	lr, [sp], #4
 8009698:	b003      	add	sp, #12
 800969a:	4770      	bx	lr
 800969c:	20000010 	.word	0x20000010

080096a0 <_lseek_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4d07      	ldr	r5, [pc, #28]	; (80096c0 <_lseek_r+0x20>)
 80096a4:	4604      	mov	r4, r0
 80096a6:	4608      	mov	r0, r1
 80096a8:	4611      	mov	r1, r2
 80096aa:	2200      	movs	r2, #0
 80096ac:	602a      	str	r2, [r5, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f7f9 fdc8 	bl	8003244 <_lseek>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	d102      	bne.n	80096be <_lseek_r+0x1e>
 80096b8:	682b      	ldr	r3, [r5, #0]
 80096ba:	b103      	cbz	r3, 80096be <_lseek_r+0x1e>
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	bd38      	pop	{r3, r4, r5, pc}
 80096c0:	20000838 	.word	0x20000838

080096c4 <__swhatbuf_r>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	460e      	mov	r6, r1
 80096c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096cc:	2900      	cmp	r1, #0
 80096ce:	b096      	sub	sp, #88	; 0x58
 80096d0:	4614      	mov	r4, r2
 80096d2:	461d      	mov	r5, r3
 80096d4:	da08      	bge.n	80096e8 <__swhatbuf_r+0x24>
 80096d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	602a      	str	r2, [r5, #0]
 80096de:	061a      	lsls	r2, r3, #24
 80096e0:	d410      	bmi.n	8009704 <__swhatbuf_r+0x40>
 80096e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096e6:	e00e      	b.n	8009706 <__swhatbuf_r+0x42>
 80096e8:	466a      	mov	r2, sp
 80096ea:	f000 f895 	bl	8009818 <_fstat_r>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	dbf1      	blt.n	80096d6 <__swhatbuf_r+0x12>
 80096f2:	9a01      	ldr	r2, [sp, #4]
 80096f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096fc:	425a      	negs	r2, r3
 80096fe:	415a      	adcs	r2, r3
 8009700:	602a      	str	r2, [r5, #0]
 8009702:	e7ee      	b.n	80096e2 <__swhatbuf_r+0x1e>
 8009704:	2340      	movs	r3, #64	; 0x40
 8009706:	2000      	movs	r0, #0
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	b016      	add	sp, #88	; 0x58
 800970c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009710 <__smakebuf_r>:
 8009710:	898b      	ldrh	r3, [r1, #12]
 8009712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009714:	079d      	lsls	r5, r3, #30
 8009716:	4606      	mov	r6, r0
 8009718:	460c      	mov	r4, r1
 800971a:	d507      	bpl.n	800972c <__smakebuf_r+0x1c>
 800971c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	6123      	str	r3, [r4, #16]
 8009724:	2301      	movs	r3, #1
 8009726:	6163      	str	r3, [r4, #20]
 8009728:	b002      	add	sp, #8
 800972a:	bd70      	pop	{r4, r5, r6, pc}
 800972c:	ab01      	add	r3, sp, #4
 800972e:	466a      	mov	r2, sp
 8009730:	f7ff ffc8 	bl	80096c4 <__swhatbuf_r>
 8009734:	9900      	ldr	r1, [sp, #0]
 8009736:	4605      	mov	r5, r0
 8009738:	4630      	mov	r0, r6
 800973a:	f7ff fbbb 	bl	8008eb4 <_malloc_r>
 800973e:	b948      	cbnz	r0, 8009754 <__smakebuf_r+0x44>
 8009740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009744:	059a      	lsls	r2, r3, #22
 8009746:	d4ef      	bmi.n	8009728 <__smakebuf_r+0x18>
 8009748:	f023 0303 	bic.w	r3, r3, #3
 800974c:	f043 0302 	orr.w	r3, r3, #2
 8009750:	81a3      	strh	r3, [r4, #12]
 8009752:	e7e3      	b.n	800971c <__smakebuf_r+0xc>
 8009754:	4b0d      	ldr	r3, [pc, #52]	; (800978c <__smakebuf_r+0x7c>)
 8009756:	62b3      	str	r3, [r6, #40]	; 0x28
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	6020      	str	r0, [r4, #0]
 800975c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009760:	81a3      	strh	r3, [r4, #12]
 8009762:	9b00      	ldr	r3, [sp, #0]
 8009764:	6163      	str	r3, [r4, #20]
 8009766:	9b01      	ldr	r3, [sp, #4]
 8009768:	6120      	str	r0, [r4, #16]
 800976a:	b15b      	cbz	r3, 8009784 <__smakebuf_r+0x74>
 800976c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009770:	4630      	mov	r0, r6
 8009772:	f000 f863 	bl	800983c <_isatty_r>
 8009776:	b128      	cbz	r0, 8009784 <__smakebuf_r+0x74>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	f023 0303 	bic.w	r3, r3, #3
 800977e:	f043 0301 	orr.w	r3, r3, #1
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	89a0      	ldrh	r0, [r4, #12]
 8009786:	4305      	orrs	r5, r0
 8009788:	81a5      	strh	r5, [r4, #12]
 800978a:	e7cd      	b.n	8009728 <__smakebuf_r+0x18>
 800978c:	080084e5 	.word	0x080084e5

08009790 <__ascii_mbtowc>:
 8009790:	b082      	sub	sp, #8
 8009792:	b901      	cbnz	r1, 8009796 <__ascii_mbtowc+0x6>
 8009794:	a901      	add	r1, sp, #4
 8009796:	b142      	cbz	r2, 80097aa <__ascii_mbtowc+0x1a>
 8009798:	b14b      	cbz	r3, 80097ae <__ascii_mbtowc+0x1e>
 800979a:	7813      	ldrb	r3, [r2, #0]
 800979c:	600b      	str	r3, [r1, #0]
 800979e:	7812      	ldrb	r2, [r2, #0]
 80097a0:	1e10      	subs	r0, r2, #0
 80097a2:	bf18      	it	ne
 80097a4:	2001      	movne	r0, #1
 80097a6:	b002      	add	sp, #8
 80097a8:	4770      	bx	lr
 80097aa:	4610      	mov	r0, r2
 80097ac:	e7fb      	b.n	80097a6 <__ascii_mbtowc+0x16>
 80097ae:	f06f 0001 	mvn.w	r0, #1
 80097b2:	e7f8      	b.n	80097a6 <__ascii_mbtowc+0x16>

080097b4 <__malloc_lock>:
 80097b4:	4801      	ldr	r0, [pc, #4]	; (80097bc <__malloc_lock+0x8>)
 80097b6:	f7fe bf6c 	b.w	8008692 <__retarget_lock_acquire_recursive>
 80097ba:	bf00      	nop
 80097bc:	2000082c 	.word	0x2000082c

080097c0 <__malloc_unlock>:
 80097c0:	4801      	ldr	r0, [pc, #4]	; (80097c8 <__malloc_unlock+0x8>)
 80097c2:	f7fe bf67 	b.w	8008694 <__retarget_lock_release_recursive>
 80097c6:	bf00      	nop
 80097c8:	2000082c 	.word	0x2000082c

080097cc <_read_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4d07      	ldr	r5, [pc, #28]	; (80097ec <_read_r+0x20>)
 80097d0:	4604      	mov	r4, r0
 80097d2:	4608      	mov	r0, r1
 80097d4:	4611      	mov	r1, r2
 80097d6:	2200      	movs	r2, #0
 80097d8:	602a      	str	r2, [r5, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	f7f9 fcee 	bl	80031bc <_read>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_read_r+0x1e>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_read_r+0x1e>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	20000838 	.word	0x20000838

080097f0 <__ascii_wctomb>:
 80097f0:	b149      	cbz	r1, 8009806 <__ascii_wctomb+0x16>
 80097f2:	2aff      	cmp	r2, #255	; 0xff
 80097f4:	bf85      	ittet	hi
 80097f6:	238a      	movhi	r3, #138	; 0x8a
 80097f8:	6003      	strhi	r3, [r0, #0]
 80097fa:	700a      	strbls	r2, [r1, #0]
 80097fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009800:	bf98      	it	ls
 8009802:	2001      	movls	r0, #1
 8009804:	4770      	bx	lr
 8009806:	4608      	mov	r0, r1
 8009808:	4770      	bx	lr

0800980a <abort>:
 800980a:	b508      	push	{r3, lr}
 800980c:	2006      	movs	r0, #6
 800980e:	f000 f84d 	bl	80098ac <raise>
 8009812:	2001      	movs	r0, #1
 8009814:	f7f9 fcc8 	bl	80031a8 <_exit>

08009818 <_fstat_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d07      	ldr	r5, [pc, #28]	; (8009838 <_fstat_r+0x20>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	4611      	mov	r1, r2
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	f7f9 fcf2 	bl	800320e <_fstat>
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	d102      	bne.n	8009834 <_fstat_r+0x1c>
 800982e:	682b      	ldr	r3, [r5, #0]
 8009830:	b103      	cbz	r3, 8009834 <_fstat_r+0x1c>
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	bd38      	pop	{r3, r4, r5, pc}
 8009836:	bf00      	nop
 8009838:	20000838 	.word	0x20000838

0800983c <_isatty_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	4d06      	ldr	r5, [pc, #24]	; (8009858 <_isatty_r+0x1c>)
 8009840:	2300      	movs	r3, #0
 8009842:	4604      	mov	r4, r0
 8009844:	4608      	mov	r0, r1
 8009846:	602b      	str	r3, [r5, #0]
 8009848:	f7f9 fcf1 	bl	800322e <_isatty>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	d102      	bne.n	8009856 <_isatty_r+0x1a>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	b103      	cbz	r3, 8009856 <_isatty_r+0x1a>
 8009854:	6023      	str	r3, [r4, #0]
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	20000838 	.word	0x20000838

0800985c <_raise_r>:
 800985c:	291f      	cmp	r1, #31
 800985e:	b538      	push	{r3, r4, r5, lr}
 8009860:	4604      	mov	r4, r0
 8009862:	460d      	mov	r5, r1
 8009864:	d904      	bls.n	8009870 <_raise_r+0x14>
 8009866:	2316      	movs	r3, #22
 8009868:	6003      	str	r3, [r0, #0]
 800986a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800986e:	bd38      	pop	{r3, r4, r5, pc}
 8009870:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009872:	b112      	cbz	r2, 800987a <_raise_r+0x1e>
 8009874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009878:	b94b      	cbnz	r3, 800988e <_raise_r+0x32>
 800987a:	4620      	mov	r0, r4
 800987c:	f000 f830 	bl	80098e0 <_getpid_r>
 8009880:	462a      	mov	r2, r5
 8009882:	4601      	mov	r1, r0
 8009884:	4620      	mov	r0, r4
 8009886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800988a:	f000 b817 	b.w	80098bc <_kill_r>
 800988e:	2b01      	cmp	r3, #1
 8009890:	d00a      	beq.n	80098a8 <_raise_r+0x4c>
 8009892:	1c59      	adds	r1, r3, #1
 8009894:	d103      	bne.n	800989e <_raise_r+0x42>
 8009896:	2316      	movs	r3, #22
 8009898:	6003      	str	r3, [r0, #0]
 800989a:	2001      	movs	r0, #1
 800989c:	e7e7      	b.n	800986e <_raise_r+0x12>
 800989e:	2400      	movs	r4, #0
 80098a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098a4:	4628      	mov	r0, r5
 80098a6:	4798      	blx	r3
 80098a8:	2000      	movs	r0, #0
 80098aa:	e7e0      	b.n	800986e <_raise_r+0x12>

080098ac <raise>:
 80098ac:	4b02      	ldr	r3, [pc, #8]	; (80098b8 <raise+0xc>)
 80098ae:	4601      	mov	r1, r0
 80098b0:	6818      	ldr	r0, [r3, #0]
 80098b2:	f7ff bfd3 	b.w	800985c <_raise_r>
 80098b6:	bf00      	nop
 80098b8:	20000010 	.word	0x20000010

080098bc <_kill_r>:
 80098bc:	b538      	push	{r3, r4, r5, lr}
 80098be:	4d07      	ldr	r5, [pc, #28]	; (80098dc <_kill_r+0x20>)
 80098c0:	2300      	movs	r3, #0
 80098c2:	4604      	mov	r4, r0
 80098c4:	4608      	mov	r0, r1
 80098c6:	4611      	mov	r1, r2
 80098c8:	602b      	str	r3, [r5, #0]
 80098ca:	f7f9 fc5d 	bl	8003188 <_kill>
 80098ce:	1c43      	adds	r3, r0, #1
 80098d0:	d102      	bne.n	80098d8 <_kill_r+0x1c>
 80098d2:	682b      	ldr	r3, [r5, #0]
 80098d4:	b103      	cbz	r3, 80098d8 <_kill_r+0x1c>
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	bd38      	pop	{r3, r4, r5, pc}
 80098da:	bf00      	nop
 80098dc:	20000838 	.word	0x20000838

080098e0 <_getpid_r>:
 80098e0:	f7f9 bc4a 	b.w	8003178 <_getpid>

080098e4 <sqrt>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	ed2d 8b02 	vpush	{d8}
 80098ea:	ec55 4b10 	vmov	r4, r5, d0
 80098ee:	f000 f825 	bl	800993c <__ieee754_sqrt>
 80098f2:	4622      	mov	r2, r4
 80098f4:	462b      	mov	r3, r5
 80098f6:	4620      	mov	r0, r4
 80098f8:	4629      	mov	r1, r5
 80098fa:	eeb0 8a40 	vmov.f32	s16, s0
 80098fe:	eef0 8a60 	vmov.f32	s17, s1
 8009902:	f7f7 f92b 	bl	8000b5c <__aeabi_dcmpun>
 8009906:	b990      	cbnz	r0, 800992e <sqrt+0x4a>
 8009908:	2200      	movs	r2, #0
 800990a:	2300      	movs	r3, #0
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	f7f7 f8fc 	bl	8000b0c <__aeabi_dcmplt>
 8009914:	b158      	cbz	r0, 800992e <sqrt+0x4a>
 8009916:	f7fd f92b 	bl	8006b70 <__errno>
 800991a:	2321      	movs	r3, #33	; 0x21
 800991c:	6003      	str	r3, [r0, #0]
 800991e:	2200      	movs	r2, #0
 8009920:	2300      	movs	r3, #0
 8009922:	4610      	mov	r0, r2
 8009924:	4619      	mov	r1, r3
 8009926:	f7f6 ffa9 	bl	800087c <__aeabi_ddiv>
 800992a:	ec41 0b18 	vmov	d8, r0, r1
 800992e:	eeb0 0a48 	vmov.f32	s0, s16
 8009932:	eef0 0a68 	vmov.f32	s1, s17
 8009936:	ecbd 8b02 	vpop	{d8}
 800993a:	bd38      	pop	{r3, r4, r5, pc}

0800993c <__ieee754_sqrt>:
 800993c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009940:	ec55 4b10 	vmov	r4, r5, d0
 8009944:	4e55      	ldr	r6, [pc, #340]	; (8009a9c <__ieee754_sqrt+0x160>)
 8009946:	43ae      	bics	r6, r5
 8009948:	ee10 0a10 	vmov	r0, s0
 800994c:	ee10 3a10 	vmov	r3, s0
 8009950:	462a      	mov	r2, r5
 8009952:	4629      	mov	r1, r5
 8009954:	d110      	bne.n	8009978 <__ieee754_sqrt+0x3c>
 8009956:	ee10 2a10 	vmov	r2, s0
 800995a:	462b      	mov	r3, r5
 800995c:	f7f6 fe64 	bl	8000628 <__aeabi_dmul>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f6 fca8 	bl	80002bc <__adddf3>
 800996c:	4604      	mov	r4, r0
 800996e:	460d      	mov	r5, r1
 8009970:	ec45 4b10 	vmov	d0, r4, r5
 8009974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009978:	2d00      	cmp	r5, #0
 800997a:	dc10      	bgt.n	800999e <__ieee754_sqrt+0x62>
 800997c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009980:	4330      	orrs	r0, r6
 8009982:	d0f5      	beq.n	8009970 <__ieee754_sqrt+0x34>
 8009984:	b15d      	cbz	r5, 800999e <__ieee754_sqrt+0x62>
 8009986:	ee10 2a10 	vmov	r2, s0
 800998a:	462b      	mov	r3, r5
 800998c:	ee10 0a10 	vmov	r0, s0
 8009990:	f7f6 fc92 	bl	80002b8 <__aeabi_dsub>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	f7f6 ff70 	bl	800087c <__aeabi_ddiv>
 800999c:	e7e6      	b.n	800996c <__ieee754_sqrt+0x30>
 800999e:	1512      	asrs	r2, r2, #20
 80099a0:	d074      	beq.n	8009a8c <__ieee754_sqrt+0x150>
 80099a2:	07d4      	lsls	r4, r2, #31
 80099a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80099a8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80099ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80099b0:	bf5e      	ittt	pl
 80099b2:	0fda      	lsrpl	r2, r3, #31
 80099b4:	005b      	lslpl	r3, r3, #1
 80099b6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80099ba:	2400      	movs	r4, #0
 80099bc:	0fda      	lsrs	r2, r3, #31
 80099be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80099c2:	107f      	asrs	r7, r7, #1
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	2516      	movs	r5, #22
 80099c8:	4620      	mov	r0, r4
 80099ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80099ce:	1886      	adds	r6, r0, r2
 80099d0:	428e      	cmp	r6, r1
 80099d2:	bfde      	ittt	le
 80099d4:	1b89      	suble	r1, r1, r6
 80099d6:	18b0      	addle	r0, r6, r2
 80099d8:	18a4      	addle	r4, r4, r2
 80099da:	0049      	lsls	r1, r1, #1
 80099dc:	3d01      	subs	r5, #1
 80099de:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80099e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80099e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099ea:	d1f0      	bne.n	80099ce <__ieee754_sqrt+0x92>
 80099ec:	462a      	mov	r2, r5
 80099ee:	f04f 0e20 	mov.w	lr, #32
 80099f2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80099f6:	4281      	cmp	r1, r0
 80099f8:	eb06 0c05 	add.w	ip, r6, r5
 80099fc:	dc02      	bgt.n	8009a04 <__ieee754_sqrt+0xc8>
 80099fe:	d113      	bne.n	8009a28 <__ieee754_sqrt+0xec>
 8009a00:	459c      	cmp	ip, r3
 8009a02:	d811      	bhi.n	8009a28 <__ieee754_sqrt+0xec>
 8009a04:	f1bc 0f00 	cmp.w	ip, #0
 8009a08:	eb0c 0506 	add.w	r5, ip, r6
 8009a0c:	da43      	bge.n	8009a96 <__ieee754_sqrt+0x15a>
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	db41      	blt.n	8009a96 <__ieee754_sqrt+0x15a>
 8009a12:	f100 0801 	add.w	r8, r0, #1
 8009a16:	1a09      	subs	r1, r1, r0
 8009a18:	459c      	cmp	ip, r3
 8009a1a:	bf88      	it	hi
 8009a1c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009a20:	eba3 030c 	sub.w	r3, r3, ip
 8009a24:	4432      	add	r2, r6
 8009a26:	4640      	mov	r0, r8
 8009a28:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009a2c:	f1be 0e01 	subs.w	lr, lr, #1
 8009a30:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009a34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a3c:	d1db      	bne.n	80099f6 <__ieee754_sqrt+0xba>
 8009a3e:	430b      	orrs	r3, r1
 8009a40:	d006      	beq.n	8009a50 <__ieee754_sqrt+0x114>
 8009a42:	1c50      	adds	r0, r2, #1
 8009a44:	bf13      	iteet	ne
 8009a46:	3201      	addne	r2, #1
 8009a48:	3401      	addeq	r4, #1
 8009a4a:	4672      	moveq	r2, lr
 8009a4c:	f022 0201 	bicne.w	r2, r2, #1
 8009a50:	1063      	asrs	r3, r4, #1
 8009a52:	0852      	lsrs	r2, r2, #1
 8009a54:	07e1      	lsls	r1, r4, #31
 8009a56:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009a5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009a5e:	bf48      	it	mi
 8009a60:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009a64:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009a68:	4614      	mov	r4, r2
 8009a6a:	e781      	b.n	8009970 <__ieee754_sqrt+0x34>
 8009a6c:	0ad9      	lsrs	r1, r3, #11
 8009a6e:	3815      	subs	r0, #21
 8009a70:	055b      	lsls	r3, r3, #21
 8009a72:	2900      	cmp	r1, #0
 8009a74:	d0fa      	beq.n	8009a6c <__ieee754_sqrt+0x130>
 8009a76:	02cd      	lsls	r5, r1, #11
 8009a78:	d50a      	bpl.n	8009a90 <__ieee754_sqrt+0x154>
 8009a7a:	f1c2 0420 	rsb	r4, r2, #32
 8009a7e:	fa23 f404 	lsr.w	r4, r3, r4
 8009a82:	1e55      	subs	r5, r2, #1
 8009a84:	4093      	lsls	r3, r2
 8009a86:	4321      	orrs	r1, r4
 8009a88:	1b42      	subs	r2, r0, r5
 8009a8a:	e78a      	b.n	80099a2 <__ieee754_sqrt+0x66>
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	e7f0      	b.n	8009a72 <__ieee754_sqrt+0x136>
 8009a90:	0049      	lsls	r1, r1, #1
 8009a92:	3201      	adds	r2, #1
 8009a94:	e7ef      	b.n	8009a76 <__ieee754_sqrt+0x13a>
 8009a96:	4680      	mov	r8, r0
 8009a98:	e7bd      	b.n	8009a16 <__ieee754_sqrt+0xda>
 8009a9a:	bf00      	nop
 8009a9c:	7ff00000 	.word	0x7ff00000

08009aa0 <_init>:
 8009aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa2:	bf00      	nop
 8009aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa6:	bc08      	pop	{r3}
 8009aa8:	469e      	mov	lr, r3
 8009aaa:	4770      	bx	lr

08009aac <_fini>:
 8009aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aae:	bf00      	nop
 8009ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab2:	bc08      	pop	{r3}
 8009ab4:	469e      	mov	lr, r3
 8009ab6:	4770      	bx	lr
