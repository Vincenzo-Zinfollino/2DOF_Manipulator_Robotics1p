
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a310  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800a4b0  0800a4b0  0001a4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a97c  0800a97c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a97c  0800a97c  0001a97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a984  0800a984  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a984  0800a984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a988  0800a988  0001a988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a98c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  200001e0  0800ab6c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  0800ab6c  000208b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fab  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ce  00000000  00000000  000321bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00034790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00035660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017916  00000000  00000000  00036448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ad9  00000000  00000000  0004dd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090bef  00000000  00000000  0005e837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef426  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052a0  00000000  00000000  000ef478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a498 	.word	0x0800a498

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a498 	.word	0x0800a498

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <HAL_UART_RxCpltCallback>:
// uint32_t count = 0;




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b0a9      	sub	sp, #164	; 0xa4
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	char str[DATA_SZ];
    char *cmd, *data, *save_ptr;
    double value;
    unsigned long long encoding;
    uint8_t i = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

    memcpy(str, rx_data, sizeof str);
 8000fca:	4a44      	ldr	r2, [pc, #272]	; (80010dc <HAL_UART_RxCpltCallback+0x120>)
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	2278      	movs	r2, #120	; 0x78
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 fa6a 	bl	80074ae <memcpy>
    /* read the first characters */
    cmd = strtok_r((char*) str, ":", &save_ptr);
 8000fda:	f107 0218 	add.w	r2, r7, #24
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	493f      	ldr	r1, [pc, #252]	; (80010e0 <HAL_UART_RxCpltCallback+0x124>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f007 f8ec 	bl	80081c2 <strtok_r>
 8000fea:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    if(!strcmp(cmd, "TRJ")){
 8000fee:	493d      	ldr	r1, [pc, #244]	; (80010e4 <HAL_UART_RxCpltCallback+0x128>)
 8000ff0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000ff4:	f7ff f8f4 	bl	80001e0 <strcmp>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d152      	bne.n	80010a4 <HAL_UART_RxCpltCallback+0xe8>
        /* trj case*/
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        data = strtok_r(cmd+sizeof cmd, ":",  &save_ptr);
 8000ffe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001002:	3304      	adds	r3, #4
 8001004:	f107 0218 	add.w	r2, r7, #24
 8001008:	4935      	ldr	r1, [pc, #212]	; (80010e0 <HAL_UART_RxCpltCallback+0x124>)
 800100a:	4618      	mov	r0, r3
 800100c:	f007 f8d9 	bl	80081c2 <strtok_r>
 8001010:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        while(data != NULL){
 8001014:	e032      	b.n	800107c <HAL_UART_RxCpltCallback+0xc0>
            if(i == 6) break; /* reading penup */
 8001016:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800101a:	2b06      	cmp	r3, #6
 800101c:	d033      	beq.n	8001086 <HAL_UART_RxCpltCallback+0xca>
            encoding = strtoull(data, NULL, 16); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 800101e:	2210      	movs	r2, #16
 8001020:	2100      	movs	r1, #0
 8001022:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001026:	f007 f9f3 	bl	8008410 <strtoull>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001032:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
            memcpy(&value, &encoding, sizeof value); /* copy the IEEE754 double representation into a memory space for double */
 8001036:	e9c7 2304 	strd	r2, r3, [r7, #16]
            rbpush((((ringbuffer_t *) &manip)+i), (float) value); /* push the value inside the correct ringbuffer ringbuffer */
 800103a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800103e:	222c      	movs	r2, #44	; 0x2c
 8001040:	fb02 f303 	mul.w	r3, r2, r3
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <HAL_UART_RxCpltCallback+0x12c>)
 8001046:	189c      	adds	r4, r3, r2
 8001048:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fde2 	bl	8000c18 <__aeabi_d2f>
 8001054:	4603      	mov	r3, r0
 8001056:	ee00 3a10 	vmov	s0, r3
 800105a:	4620      	mov	r0, r4
 800105c:	f001 feac 	bl	8002db8 <rbpush>
            data = strtok_r(NULL, ":", &save_ptr);
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	461a      	mov	r2, r3
 8001066:	491e      	ldr	r1, [pc, #120]	; (80010e0 <HAL_UART_RxCpltCallback+0x124>)
 8001068:	2000      	movs	r0, #0
 800106a:	f007 f8aa 	bl	80081c2 <strtok_r>
 800106e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            i++;
 8001072:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001076:	3301      	adds	r3, #1
 8001078:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        while(data != NULL){
 800107c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1c8      	bne.n	8001016 <HAL_UART_RxCpltCallback+0x5a>
 8001084:	e000      	b.n	8001088 <HAL_UART_RxCpltCallback+0xcc>
            if(i == 6) break; /* reading penup */
 8001086:	bf00      	nop
        }
        rbpush(&manip.penup, (float) atoi(data));
 8001088:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800108c:	f006 f814 	bl	80070b8 <atoi>
 8001090:	ee07 0a90 	vmov	s15, r0
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001098:	eeb0 0a67 	vmov.f32	s0, s15
 800109c:	4813      	ldr	r0, [pc, #76]	; (80010ec <HAL_UART_RxCpltCallback+0x130>)
 800109e:	f001 fe8b 	bl	8002db8 <rbpush>
 80010a2:	e012      	b.n	80010ca <HAL_UART_RxCpltCallback+0x10e>
    }else if(!strcmp(cmd, "HOM")){
 80010a4:	4912      	ldr	r1, [pc, #72]	; (80010f0 <HAL_UART_RxCpltCallback+0x134>)
 80010a6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80010aa:	f7ff f899 	bl	80001e0 <strcmp>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00a      	beq.n	80010ca <HAL_UART_RxCpltCallback+0x10e>
    	/*
        printf(rx_data);
        fflush(stdout);
        homing_triggered=1;
        */
    }else if(!strcmp(cmd, "POS")){
 80010b4:	490f      	ldr	r1, [pc, #60]	; (80010f4 <HAL_UART_RxCpltCallback+0x138>)
 80010b6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80010ba:	f7ff f891 	bl	80001e0 <strcmp>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <HAL_UART_RxCpltCallback+0x10e>
    	/* Position command case */
        log_triggered = 1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_UART_RxCpltCallback+0x13c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(huart, rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 80010ca:	2278      	movs	r2, #120	; 0x78
 80010cc:	4903      	ldr	r1, [pc, #12]	; (80010dc <HAL_UART_RxCpltCallback+0x120>)
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f004 fed8 	bl	8005e84 <HAL_UART_Receive_DMA>
    return;
 80010d4:	bf00      	nop
}
 80010d6:	37a4      	adds	r7, #164	; 0xa4
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	200001fc 	.word	0x200001fc
 80010e0:	0800a4b0 	.word	0x0800a4b0
 80010e4:	0800a4b4 	.word	0x0800a4b4
 80010e8:	2000028c 	.word	0x2000028c
 80010ec:	20000394 	.word	0x20000394
 80010f0:	0800a4b8 	.word	0x0800a4b8
 80010f4:	0800a4bc 	.word	0x0800a4bc
 80010f8:	2000061f 	.word	0x2000061f

080010fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
    uint32_t now;
    now = HAL_GetTick();
 8001106:	f002 fb47 	bl	8003798 <HAL_GetTick>
 800110a:	60f8      	str	r0, [r7, #12]
    if((now - previous_trigger1) > DEBOUNCE_DELAY ){
 800110c:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_GPIO_EXTI_Callback+0x100>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b50      	cmp	r3, #80	; 0x50
 8001116:	d933      	bls.n	8001180 <HAL_GPIO_EXTI_Callback+0x84>
       if (GPIO_Pin==LIMIT_SWITCH_1_Pin){
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800111e:	d12f      	bne.n	8001180 <HAL_GPIO_EXTI_Callback+0x84>
			if(!triggered1){
 8001120:	4b37      	ldr	r3, [pc, #220]	; (8001200 <HAL_GPIO_EXTI_Callback+0x104>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d121      	bne.n	800116c <HAL_GPIO_EXTI_Callback+0x70>
				  limit_switch1 = 1;
 8001128:	4b36      	ldr	r3, [pc, #216]	; (8001204 <HAL_GPIO_EXTI_Callback+0x108>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]
				  if(is_home1){
 800112e:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <HAL_GPIO_EXTI_Callback+0x48>
					  rblast(&manip.q0_actual,&offset1);
 8001136:	4935      	ldr	r1, [pc, #212]	; (800120c <HAL_GPIO_EXTI_Callback+0x110>)
 8001138:	4835      	ldr	r0, [pc, #212]	; (8001210 <HAL_GPIO_EXTI_Callback+0x114>)
 800113a:	f001 feab 	bl	8002e94 <rblast>
					  /*
					  printf("CNT1: %x \n",manip.htim_encoder1->Instance->CNT);
					  fflush(stdout);
					  */
				  is_home1=0;
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
			  }
			  // SECTION - DEBUG
			  printf("trigger1 offset1: %f \n",offset1);
 8001144:	4b31      	ldr	r3, [pc, #196]	; (800120c <HAL_GPIO_EXTI_Callback+0x110>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4830      	ldr	r0, [pc, #192]	; (8001214 <HAL_GPIO_EXTI_Callback+0x118>)
 8001154:	f006 ff0c 	bl	8007f70 <iprintf>
			  fflush(stdout);
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <HAL_GPIO_EXTI_Callback+0x11c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	4618      	mov	r0, r3
 8001160:	f006 f876 	bl	8007250 <fflush>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001164:	2120      	movs	r1, #32
 8001166:	482d      	ldr	r0, [pc, #180]	; (800121c <HAL_GPIO_EXTI_Callback+0x120>)
 8001168:	f003 f9f7 	bl	800455a <HAL_GPIO_TogglePin>
			  // !SECTION - DEBUG
        }
        triggered1 = 1-triggered1;
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <HAL_GPIO_EXTI_Callback+0x104>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	f1c3 0301 	rsb	r3, r3, #1
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <HAL_GPIO_EXTI_Callback+0x104>)
 8001178:	701a      	strb	r2, [r3, #0]
        previous_trigger1 = now;
 800117a:	4a20      	ldr	r2, [pc, #128]	; (80011fc <HAL_GPIO_EXTI_Callback+0x100>)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6013      	str	r3, [r2, #0]
       }
     }

	 if((now - previous_trigger2) > DEBOUNCE_DELAY ){
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <HAL_GPIO_EXTI_Callback+0x124>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b50      	cmp	r3, #80	; 0x50
 800118a:	d933      	bls.n	80011f4 <HAL_GPIO_EXTI_Callback+0xf8>
		if(GPIO_Pin==LIMIT_SWITCH_2_Pin){
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001192:	d12f      	bne.n	80011f4 <HAL_GPIO_EXTI_Callback+0xf8>
			if(!triggered2){
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_GPIO_EXTI_Callback+0x128>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d121      	bne.n	80011e0 <HAL_GPIO_EXTI_Callback+0xe4>
				limit_switch2 = 1;
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_GPIO_EXTI_Callback+0x12c>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
				if(is_home2){
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <HAL_GPIO_EXTI_Callback+0x130>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <HAL_GPIO_EXTI_Callback+0xbc>
					rblast(&manip.q1_actual,&offset2);
 80011aa:	4921      	ldr	r1, [pc, #132]	; (8001230 <HAL_GPIO_EXTI_Callback+0x134>)
 80011ac:	4821      	ldr	r0, [pc, #132]	; (8001234 <HAL_GPIO_EXTI_Callback+0x138>)
 80011ae:	f001 fe71 	bl	8002e94 <rblast>
					/*
					printf("CNT2: %x \n",manip.htim_encoder2->Instance->CNT);
					fflush(stdout);
					*/
					is_home2=0;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_GPIO_EXTI_Callback+0x130>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
				}
				// SECTION - DEBUG
				printf("trigger2 offset2: %f \n",offset2);
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_GPIO_EXTI_Callback+0x134>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9db 	bl	8000578 <__aeabi_f2d>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	481c      	ldr	r0, [pc, #112]	; (8001238 <HAL_GPIO_EXTI_Callback+0x13c>)
 80011c8:	f006 fed2 	bl	8007f70 <iprintf>
				fflush(stdout);
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_GPIO_EXTI_Callback+0x11c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f006 f83c 	bl	8007250 <fflush>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011d8:	2120      	movs	r1, #32
 80011da:	4810      	ldr	r0, [pc, #64]	; (800121c <HAL_GPIO_EXTI_Callback+0x120>)
 80011dc:	f003 f9bd 	bl	800455a <HAL_GPIO_TogglePin>
				// !SECTION - DEBUG
			}
			triggered2 = 1-triggered2;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_GPIO_EXTI_Callback+0x128>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	f1c3 0301 	rsb	r3, r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_GPIO_EXTI_Callback+0x128>)
 80011ec:	701a      	strb	r2, [r3, #0]
			previous_trigger2 = now;
 80011ee:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <HAL_GPIO_EXTI_Callback+0x124>)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6013      	str	r3, [r2, #0]
		   }
	  }
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000604 	.word	0x20000604
 8001200:	2000060c 	.word	0x2000060c
 8001204:	20000618 	.word	0x20000618
 8001208:	2000061c 	.word	0x2000061c
 800120c:	20000610 	.word	0x20000610
 8001210:	200003c0 	.word	0x200003c0
 8001214:	0800a4c0 	.word	0x0800a4c0
 8001218:	20000010 	.word	0x20000010
 800121c:	40020000 	.word	0x40020000
 8001220:	20000608 	.word	0x20000608
 8001224:	2000060d 	.word	0x2000060d
 8001228:	20000000 	.word	0x20000000
 800122c:	2000061d 	.word	0x2000061d
 8001230:	20000614 	.word	0x20000614
 8001234:	200003ec 	.word	0x200003ec
 8001238:	0800a4d8 	.word	0x0800a4d8

0800123c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){ /* check if it is the proper instance */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d102      	bne.n	8001254 <HAL_TIM_PeriodElapsedCallback+0x18>
		read_encoders(&manip); /* read encoders with the correct timing */
 800124e:	4804      	ldr	r0, [pc, #16]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001250:	f000 f9e2 	bl	8001618 <read_encoders>
	}
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40014400 	.word	0x40014400
 8001260:	2000028c 	.word	0x2000028c

08001264 <ITM_Sendchar>:

#define DEMCR               *((volatile uint32_t*) 0xE000EDFCU)
#define ITM_STIMULUS_PORT0  *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN        *((volatile uint32_t*) 0xE0000E00)

void ITM_Sendchar(uint8_t ch){
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <ITM_Sendchar+0x48>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <ITM_Sendchar+0x48>)
 8001274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001278:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <ITM_Sendchar+0x4c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <ITM_Sendchar+0x4c>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(! (ITM_STIMULUS_PORT0 & 1));
 8001286:	bf00      	nop
 8001288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f8      	beq.n	8001288 <ITM_Sendchar+0x24>

	// Write to IT Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 8001296:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	6013      	str	r3, [r2, #0]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000edfc 	.word	0xe000edfc
 80012b0:	e0000e00 	.word	0xe0000e00

080012b4 <_write>:

int _write(int file,char *ptr, int len){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]

	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e009      	b.n	80012da <_write+0x26>
	{
		ITM_Sendchar(*ptr++);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	60ba      	str	r2, [r7, #8]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ffc8 	bl	8001264 <ITM_Sendchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dbf1      	blt.n	80012c6 <_write+0x12>
	}
	return len;
 80012e2:	687b      	ldr	r3, [r7, #4]

}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <init_man>:
- TIM_HandleTypeDef \*htim2: pointer to the timer used to decode the output of the second encode;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip, TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3,TIM_HandleTypeDef *htim4){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 80012fa:	2300      	movs	r3, #0
 80012fc:	75fb      	strb	r3, [r7, #23]
 80012fe:	e00b      	b.n	8001318 <init_man+0x2c>
        rbclear((((ringbuffer_t *) manip)+i));
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	222c      	movs	r2, #44	; 0x2c
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fe31 	bl	8002f74 <rbclear>
    for(i = 0; i < 14; i++){
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	3301      	adds	r3, #1
 8001316:	75fb      	strb	r3, [r7, #23]
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b0d      	cmp	r3, #13
 800131c:	d9f0      	bls.n	8001300 <init_man+0x14>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 800131e:	2300      	movs	r3, #0
 8001320:	75fb      	strb	r3, [r7, #23]
 8001322:	e012      	b.n	800134a <init_man+0x5e>
        manip->B[i] = (float) 0;
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	339a      	adds	r3, #154	; 0x9a
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
        manip->C[i] = (float) 0;
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	339e      	adds	r3, #158	; 0x9e
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 4; i++){
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	3301      	adds	r3, #1
 8001348:	75fb      	strb	r3, [r7, #23]
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	2b03      	cmp	r3, #3
 800134e:	d9e9      	bls.n	8001324 <init_man+0x38>
    }
    manip->htim_encoder1 = htim1;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    manip->htim_encoder2 = htim2;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    manip->htim_motor1 = htim3;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    manip->htim_motor2 = htim4;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6a3a      	ldr	r2, [r7, #32]
 800136c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <speed_estimation>:
- float \*a_est: pointer to the variable that will hold the acceleration estimation;
@outputs: 
- void;
@#
*/
void speed_estimation(ringbuffer_t *q_actual, ringbuffer_t *dq_actual, ringbuffer_t *ddq_actual, float reduction, float *v_est, float *a_est){
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
 800137e:	6178      	str	r0, [r7, #20]
 8001380:	6139      	str	r1, [r7, #16]
 8001382:	60fa      	str	r2, [r7, #12]
 8001384:	ed87 0a02 	vstr	s0, [r7, #8]
 8001388:	607b      	str	r3, [r7, #4]
    float adjM[ESTIMATION_STEPS*ESTIMATION_STEPS], subM[(ESTIMATION_STEPS-1)*(ESTIMATION_STEPS-1)];
    float invM[ESTIMATION_STEPS*ESTIMATION_STEPS], dotM[ESTIMATION_STEPS*ESTIMATION_STEPS];
    */
    uint8_t i;
    float prev, succ, vel,acc, a;
    succ=0;
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
    prev=0;
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
    for(i = 0; i < 5; i++){
 8001396:	2300      	movs	r3, #0
 8001398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800139c:	e014      	b.n	80013c8 <speed_estimation+0x50>
    	rbget(q_actual, i, &a);
 800139e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80013a2:	f107 0218 	add.w	r2, r7, #24
 80013a6:	4619      	mov	r1, r3
 80013a8:	6978      	ldr	r0, [r7, #20]
 80013aa:	f001 fda3 	bl	8002ef4 <rbget>
    	prev+=a;
 80013ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80013b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for(i = 0; i < 5; i++){
 80013be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013c2:	3301      	adds	r3, #1
 80013c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d9e6      	bls.n	800139e <speed_estimation+0x26>
    }
    for(i = 0; i < 5; i++){
 80013d0:	2300      	movs	r3, #0
 80013d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013d6:	e017      	b.n	8001408 <speed_estimation+0x90>
    	rbget(q_actual, 5+i, &a);
 80013d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013dc:	3305      	adds	r3, #5
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	f107 0218 	add.w	r2, r7, #24
 80013e6:	4619      	mov	r1, r3
 80013e8:	6978      	ldr	r0, [r7, #20]
 80013ea:	f001 fd83 	bl	8002ef4 <rbget>
    	succ+=a;
 80013ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i = 0; i < 5; i++){
 80013fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001402:	3301      	adds	r3, #1
 8001404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800140c:	2b04      	cmp	r3, #4
 800140e:	d9e3      	bls.n	80013d8 <speed_estimation+0x60>
    }
    prev /=5;
 8001410:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001414:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    succ /=5;
 8001420:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001424:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


    /* filtering velocity with a first order filter  */

    rblast(dq_actual,&vel);
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4619      	mov	r1, r3
 8001436:	6938      	ldr	r0, [r7, #16]
 8001438:	f001 fd2c 	bl	8002e94 <rblast>


    *v_est=0.8546*vel+((1-0.8546)*(succ-prev)/(T_C*5) );
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f89a 	bl	8000578 <__aeabi_f2d>
 8001444:	a33e      	add	r3, pc, #248	; (adr r3, 8001540 <speed_estimation+0x1c8>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f8ed 	bl	8000628 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4614      	mov	r4, r2
 8001454:	461d      	mov	r5, r3
 8001456:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800145a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800145e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001462:	ee17 0a90 	vmov	r0, s15
 8001466:	f7ff f887 	bl	8000578 <__aeabi_f2d>
 800146a:	a337      	add	r3, pc, #220	; (adr r3, 8001548 <speed_estimation+0x1d0>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8da 	bl	8000628 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	a334      	add	r3, pc, #208	; (adr r3, 8001550 <speed_estimation+0x1d8>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff f9fb 	bl	800087c <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4620      	mov	r0, r4
 800148c:	4629      	mov	r1, r5
 800148e:	f7fe ff15 	bl	80002bc <__adddf3>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff fbbd 	bl	8000c18 <__aeabi_d2f>
 800149e:	4602      	mov	r2, r0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	601a      	str	r2, [r3, #0]

    /* filtering acceleration  with a first order filter  */

    rbget(dq_actual, RBUF_SZ-1, &succ);
 80014a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a8:	461a      	mov	r2, r3
 80014aa:	2109      	movs	r1, #9
 80014ac:	6938      	ldr	r0, [r7, #16]
 80014ae:	f001 fd21 	bl	8002ef4 <rbget>
    rbget(dq_actual, RBUF_SZ-2, &prev);
 80014b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b6:	461a      	mov	r2, r3
 80014b8:	2108      	movs	r1, #8
 80014ba:	6938      	ldr	r0, [r7, #16]
 80014bc:	f001 fd1a 	bl	8002ef4 <rbget>
    //*a_est = (succ-prev)/T_C;
    rblast(ddq_actual,&acc);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f001 fce4 	bl	8002e94 <rblast>
    *a_est= 0.9245*acc+((1- 0.9245)*(succ-prev)/(T_C) );
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f852 	bl	8000578 <__aeabi_f2d>
 80014d4:	a320      	add	r3, pc, #128	; (adr r3, 8001558 <speed_estimation+0x1e0>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7ff f8a5 	bl	8000628 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4614      	mov	r4, r2
 80014e4:	461d      	mov	r5, r3
 80014e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80014ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f2:	ee17 0a90 	vmov	r0, s15
 80014f6:	f7ff f83f 	bl	8000578 <__aeabi_f2d>
 80014fa:	a319      	add	r3, pc, #100	; (adr r3, 8001560 <speed_estimation+0x1e8>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff f892 	bl	8000628 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	a316      	add	r3, pc, #88	; (adr r3, 8001568 <speed_estimation+0x1f0>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f9b3 	bl	800087c <__aeabi_ddiv>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe fecd 	bl	80002bc <__adddf3>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fb75 	bl	8000c18 <__aeabi_d2f>
 800152e:	4602      	mov	r2, r0
 8001530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001532:	601a      	str	r2, [r3, #0]


}
 8001534:	bf00      	nop
 8001536:	3730      	adds	r7, #48	; 0x30
 8001538:	46bd      	mov	sp, r7
 800153a:	bdb0      	pop	{r4, r5, r7, pc}
 800153c:	f3af 8000 	nop.w
 8001540:	19652bd4 	.word	0x19652bd4
 8001544:	3feb58e2 	.word	0x3feb58e2
 8001548:	9a6b50b0 	.word	0x9a6b50b0
 800154c:	3fc29c77 	.word	0x3fc29c77
 8001550:	9999999a 	.word	0x9999999a
 8001554:	3fa99999 	.word	0x3fa99999
 8001558:	0624dd2f 	.word	0x0624dd2f
 800155c:	3fed9581 	.word	0x3fed9581
 8001560:	ced91688 	.word	0xced91688
 8001564:	3fb353f7 	.word	0x3fb353f7
 8001568:	47ae147b 	.word	0x47ae147b
 800156c:	3f847ae1 	.word	0x3f847ae1

08001570 <init_rate>:
- uint32_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint32_t ms){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
    rate->last_time = HAL_GetTick();
 800157a:	f002 f90d 	bl	8003798 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	601a      	str	r2, [r3, #0]
    rate->delta_time = ms;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	605a      	str	r2, [r3, #4]
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <rate_sleep>:
- rate_t \*rate: pointer to the rate struct;
@outputs: 
- void;
@#
*/
void rate_sleep(rate_t *rate){
 8001592:	b580      	push	{r7, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
    float now, interval;
    now = HAL_GetTick();
 800159a:	f002 f8fd 	bl	8003798 <HAL_GetTick>
 800159e:	ee07 0a90 	vmov	s15, r0
 80015a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a6:	edc7 7a03 	vstr	s15, [r7, #12]
    interval = (uint32_t) (now - rate->last_time); /* time passed from the last rate_sleep call */
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80015ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c6:	edc7 7a02 	vstr	s15, [r7, #8]
    /* wait until enough time has passed from the last rate_sleep call */
    if(interval < rate->delta_time){
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80015da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	d50f      	bpl.n	8001604 <rate_sleep+0x72>
        HAL_Delay(rate->delta_time-interval);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fc:	ee17 0a90 	vmov	r0, s15
 8001600:	f002 f8d6 	bl	80037b0 <HAL_Delay>
    }
    /* if enough time has passed, save the time stamp and go on with the process */
    rate->last_time = HAL_GetTick();
 8001604:	f002 f8c8 	bl	8003798 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
    return;
 800160e:	bf00      	nop
}
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <read_encoders>:
@inputs: 
- man_t \*manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void read_encoders(man_t *manip){
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    uint16_t counter; 
    float displacement1, displacement2;
    // float v_est, a_est; /* used to hold temporarily the estimations of speed and acceleration */
    TIM_HandleTypeDef *htim1, *htim2;

    htim1 = manip->htim_encoder1; /* pointer to the timer struct that decodes the first encoder output */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8001626:	613b      	str	r3, [r7, #16]
    htim2 = manip->htim_encoder2; /* pointer to the timer struct that decodes the first encoder output */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800162e:	60fb      	str	r3, [r7, #12]

    /* first encoder */
    counter = (htim1->Instance->CNT);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim1->Instance->ARR){
 8001638:	8bfa      	ldrh	r2, [r7, #30]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	429a      	cmp	r2, r3
 8001642:	d309      	bcc.n	8001658 <read_encoders+0x40>
        counter = (htim1->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	b29b      	uxth	r3, r3
 800164c:	3b01      	subs	r3, #1
 800164e:	83fb      	strh	r3, [r7, #30]
        htim1->Instance->CNT = counter; /* correct cnt value */
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	8bfa      	ldrh	r2, [r7, #30]
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
    }

    displacement1 = (float) (2*M_PI*counter/(htim1->Instance->ARR)-offset1);
 8001658:	8bfb      	ldrh	r3, [r7, #30]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff7a 	bl	8000554 <__aeabi_i2d>
 8001660:	a389      	add	r3, pc, #548	; (adr r3, 8001888 <read_encoders+0x270>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ffdf 	bl	8000628 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4614      	mov	r4, r2
 8001670:	461d      	mov	r5, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff5b 	bl	8000534 <__aeabi_ui2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4620      	mov	r0, r4
 8001684:	4629      	mov	r1, r5
 8001686:	f7ff f8f9 	bl	800087c <__aeabi_ddiv>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4614      	mov	r4, r2
 8001690:	461d      	mov	r5, r3
 8001692:	4b83      	ldr	r3, [pc, #524]	; (80018a0 <read_encoders+0x288>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff6e 	bl	8000578 <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7fe fe08 	bl	80002b8 <__aeabi_dsub>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff fab2 	bl	8000c18 <__aeabi_d2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]
    /* offset1 corrects the initial offset error */

    /* second encoder */
    counter = (htim2->Instance->CNT);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim2->Instance->ARR){
 80016c0:	8bfa      	ldrh	r2, [r7, #30]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d309      	bcc.n	80016e0 <read_encoders+0xc8>
        counter = (htim2->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	3b01      	subs	r3, #1
 80016d6:	83fb      	strh	r3, [r7, #30]
        htim2->Instance->CNT = counter;  /* correct cnt value */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	8bfa      	ldrh	r2, [r7, #30]
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
    }
    displacement2 = (float) ((2*M_PI) -  (2*M_PI*counter/(htim2->Instance->ARR))); /* the motor is upside down */
 80016e0:	8bfb      	ldrh	r3, [r7, #30]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff36 	bl	8000554 <__aeabi_i2d>
 80016e8:	a367      	add	r3, pc, #412	; (adr r3, 8001888 <read_encoders+0x270>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe ff9b 	bl	8000628 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff17 	bl	8000534 <__aeabi_ui2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4620      	mov	r0, r4
 800170c:	4629      	mov	r1, r5
 800170e:	f7ff f8b5 	bl	800087c <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	a15c      	add	r1, pc, #368	; (adr r1, 8001888 <read_encoders+0x270>)
 8001718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800171c:	f7fe fdcc 	bl	80002b8 <__aeabi_dsub>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff fa76 	bl	8000c18 <__aeabi_d2f>
 800172c:	4603      	mov	r3, r0
 800172e:	617b      	str	r3, [r7, #20]
    //displacement2 = (float) (2*M_PI*counter/(htim2->Instance->ARR)-offset2);
    displacement2-=offset2;
 8001730:	4b5c      	ldr	r3, [pc, #368]	; (80018a4 <read_encoders+0x28c>)
 8001732:	edd3 7a00 	vldr	s15, [r3]
 8001736:	ed97 7a05 	vldr	s14, [r7, #20]
 800173a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173e:	edc7 7a05 	vstr	s15, [r7, #20]
    /* offset2 corrects the initial offset error */

    if(displacement1 > 2*M_PI){
 8001742:	69b8      	ldr	r0, [r7, #24]
 8001744:	f7fe ff18 	bl	8000578 <__aeabi_f2d>
 8001748:	a34f      	add	r3, pc, #316	; (adr r3, 8001888 <read_encoders+0x270>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7ff f9fb 	bl	8000b48 <__aeabi_dcmpgt>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <read_encoders+0x144>
    	displacement1 = 2*M_PI; /* clamping */
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <read_encoders+0x290>)
 800175a:	61bb      	str	r3, [r7, #24]
	}
	if(displacement2 > 2*M_PI){
 800175c:	6978      	ldr	r0, [r7, #20]
 800175e:	f7fe ff0b 	bl	8000578 <__aeabi_f2d>
 8001762:	a349      	add	r3, pc, #292	; (adr r3, 8001888 <read_encoders+0x270>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f9ee 	bl	8000b48 <__aeabi_dcmpgt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <read_encoders+0x15e>
		displacement2 = 2*M_PI; /* clamping */
 8001772:	4b4d      	ldr	r3, [pc, #308]	; (80018a8 <read_encoders+0x290>)
 8001774:	617b      	str	r3, [r7, #20]
	}
	if(!is_home1 && !is_home2){
 8001776:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <read_encoders+0x294>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d16f      	bne.n	800185e <read_encoders+0x246>
 800177e:	4b4c      	ldr	r3, [pc, #304]	; (80018b0 <read_encoders+0x298>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d16b      	bne.n	800185e <read_encoders+0x246>
		if(displacement1 < -M_PI){
 8001786:	69b8      	ldr	r0, [r7, #24]
 8001788:	f7fe fef6 	bl	8000578 <__aeabi_f2d>
 800178c:	a340      	add	r3, pc, #256	; (adr r3, 8001890 <read_encoders+0x278>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7ff f9bb 	bl	8000b0c <__aeabi_dcmplt>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00f      	beq.n	80017bc <read_encoders+0x1a4>
			displacement1 = 2*M_PI+displacement1;  /* redefining the domain between -PI and +PI */
 800179c:	69b8      	ldr	r0, [r7, #24]
 800179e:	f7fe feeb 	bl	8000578 <__aeabi_f2d>
 80017a2:	a339      	add	r3, pc, #228	; (adr r3, 8001888 <read_encoders+0x270>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7fe fd88 	bl	80002bc <__adddf3>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff fa30 	bl	8000c18 <__aeabi_d2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	61bb      	str	r3, [r7, #24]
		}

		if(displacement2 < -M_PI){
 80017bc:	6978      	ldr	r0, [r7, #20]
 80017be:	f7fe fedb 	bl	8000578 <__aeabi_f2d>
 80017c2:	a333      	add	r3, pc, #204	; (adr r3, 8001890 <read_encoders+0x278>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7ff f9a0 	bl	8000b0c <__aeabi_dcmplt>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00f      	beq.n	80017f2 <read_encoders+0x1da>
			displacement2 = 2*M_PI+displacement2; /* redefining the domain between -PI and +PI */
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7fe fed0 	bl	8000578 <__aeabi_f2d>
 80017d8:	a32b      	add	r3, pc, #172	; (adr r3, 8001888 <read_encoders+0x270>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe fd6d 	bl	80002bc <__adddf3>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff fa15 	bl	8000c18 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	617b      	str	r3, [r7, #20]
		}

		if(displacement1 > M_PI){
 80017f2:	69b8      	ldr	r0, [r7, #24]
 80017f4:	f7fe fec0 	bl	8000578 <__aeabi_f2d>
 80017f8:	a327      	add	r3, pc, #156	; (adr r3, 8001898 <read_encoders+0x280>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7ff f9a3 	bl	8000b48 <__aeabi_dcmpgt>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00f      	beq.n	8001828 <read_encoders+0x210>
			displacement1 = displacement1 - (2*M_PI); /* redefining the domain between -PI and +PI */
 8001808:	69b8      	ldr	r0, [r7, #24]
 800180a:	f7fe feb5 	bl	8000578 <__aeabi_f2d>
 800180e:	a31e      	add	r3, pc, #120	; (adr r3, 8001888 <read_encoders+0x270>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fd50 	bl	80002b8 <__aeabi_dsub>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f9fa 	bl	8000c18 <__aeabi_d2f>
 8001824:	4603      	mov	r3, r0
 8001826:	61bb      	str	r3, [r7, #24]
		}
		if(displacement2 > M_PI){
 8001828:	6978      	ldr	r0, [r7, #20]
 800182a:	f7fe fea5 	bl	8000578 <__aeabi_f2d>
 800182e:	a31a      	add	r3, pc, #104	; (adr r3, 8001898 <read_encoders+0x280>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f7ff f988 	bl	8000b48 <__aeabi_dcmpgt>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00f      	beq.n	800185e <read_encoders+0x246>
			displacement2 = displacement2 - (2*M_PI); /* redefining the domain between -PI and +PI */
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7fe fe9a 	bl	8000578 <__aeabi_f2d>
 8001844:	a310      	add	r3, pc, #64	; (adr r3, 8001888 <read_encoders+0x270>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fd35 	bl	80002b8 <__aeabi_dsub>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f7ff f9df 	bl	8000c18 <__aeabi_d2f>
 800185a:	4603      	mov	r3, r0
 800185c:	617b      	str	r3, [r7, #20]
		}
	}

	/* push the displacement values in the position ringbuffer */
    rbpush(&manip->q0_actual, displacement1);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001864:	ed97 0a06 	vldr	s0, [r7, #24]
 8001868:	4618      	mov	r0, r3
 800186a:	f001 faa5 	bl	8002db8 <rbpush>
    rbpush(&manip->q1_actual, displacement2);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001874:	ed97 0a05 	vldr	s0, [r7, #20]
 8001878:	4618      	mov	r0, r3
 800187a:	f001 fa9d 	bl	8002db8 <rbpush>
}
 800187e:	bf00      	nop
 8001880:	3720      	adds	r7, #32
 8001882:	46bd      	mov	sp, r7
 8001884:	bdb0      	pop	{r4, r5, r7, pc}
 8001886:	bf00      	nop
 8001888:	54442d18 	.word	0x54442d18
 800188c:	401921fb 	.word	0x401921fb
 8001890:	54442d18 	.word	0x54442d18
 8001894:	c00921fb 	.word	0xc00921fb
 8001898:	54442d18 	.word	0x54442d18
 800189c:	400921fb 	.word	0x400921fb
 80018a0:	20000610 	.word	0x20000610
 80018a4:	20000614 	.word	0x20000614
 80018a8:	40c90fdb 	.word	0x40c90fdb
 80018ac:	2000061c 	.word	0x2000061c
 80018b0:	2000061d 	.word	0x2000061d

080018b4 <update_speeds>:
@inputs:
- man_t \*manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void update_speeds(man_t *manip){
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	6078      	str	r0, [r7, #4]
	float v_est, a_est;
	speed_estimation(&manip->q0_actual, &manip->dq0_actual,&manip->ddq0_actual, reduction1, &v_est, &a_est);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f503 709a 	add.w	r0, r3, #308	; 0x134
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f503 71c6 	add.w	r1, r3, #396	; 0x18c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 80018ce:	eddf 7a28 	vldr	s15, [pc, #160]	; 8001970 <update_speeds+0xbc>
 80018d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d6:	f107 040c 	add.w	r4, r7, #12
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4623      	mov	r3, r4
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	f7ff fd47 	bl	8001378 <speed_estimation>
	//disp1 = v_est;
	rbpush(&manip->dq0_actual, v_est);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80018f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f4:	eeb0 0a67 	vmov.f32	s0, s15
 80018f8:	4618      	mov	r0, r3
 80018fa:	f001 fa5d 	bl	8002db8 <rbpush>
	rbpush(&manip->ddq0_actual, a_est);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001904:	edd7 7a02 	vldr	s15, [r7, #8]
 8001908:	eeb0 0a67 	vmov.f32	s0, s15
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fa53 	bl	8002db8 <rbpush>

	speed_estimation(&manip->q1_actual, &manip->dq1_actual,&manip->ddq1_actual, reduction2, &v_est, &a_est);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8001924:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001974 <update_speeds+0xc0>
 8001928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800192c:	f107 040c 	add.w	r4, r7, #12
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	4623      	mov	r3, r4
 8001938:	eeb0 0a67 	vmov.f32	s0, s15
 800193c:	f7ff fd1c 	bl	8001378 <speed_estimation>
	//disp2 = v_est;
	rbpush(&manip->dq1_actual, v_est);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001946:	edd7 7a03 	vldr	s15, [r7, #12]
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	4618      	mov	r0, r3
 8001950:	f001 fa32 	bl	8002db8 <rbpush>
	rbpush(&manip->ddq1_actual, a_est);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800195a:	edd7 7a02 	vldr	s15, [r7, #8]
 800195e:	eeb0 0a67 	vmov.f32	s0, s15
 8001962:	4618      	mov	r0, r3
 8001964:	f001 fa28 	bl	8002db8 <rbpush>
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bd90      	pop	{r4, r7, pc}
 8001970:	0000000a 	.word	0x0000000a
 8001974:	00000005 	.word	0x00000005

08001978 <apply_velocity_input>:
- float \*u: array of two floats containing the velocity inputs of the motors;
@outputs: 
- void;
@#
*/
void apply_velocity_input(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, float *u){
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
    int8_t dir1, dir2;
    uint32_t f;
    uint32_t ARR, CCR;
    uint32_t prescaler1, prescaler2;

    dir1 = u[0] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001992:	bf4c      	ite	mi
 8001994:	2301      	movmi	r3, #1
 8001996:	2300      	movpl	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, dir1);
 800199e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019a2:	461a      	mov	r2, r3
 80019a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a8:	4879      	ldr	r0, [pc, #484]	; (8001b90 <apply_velocity_input+0x218>)
 80019aa:	f002 fdbd 	bl	8004528 <HAL_GPIO_WritePin>

    dir2 = u[1] > 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET; /* the second motor is upside-down */
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3304      	adds	r3, #4
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	bfcc      	ite	gt
 80019c0:	2301      	movgt	r3, #1
 80019c2:	2300      	movle	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, dir2);
 80019ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019ce:	461a      	mov	r2, r3
 80019d0:	2102      	movs	r1, #2
 80019d2:	4870      	ldr	r0, [pc, #448]	; (8001b94 <apply_velocity_input+0x21c>)
 80019d4:	f002 fda8 	bl	8004528 <HAL_GPIO_WritePin>


	prescaler1 = (uint16_t)  5200; // 8400;//12000 ;//8400;
 80019d8:	f241 4350 	movw	r3, #5200	; 0x1450
 80019dc:	623b      	str	r3, [r7, #32]
	f = HAL_RCC_GetPCLK1Freq()*2;
 80019de:	f003 fa5f 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
 80019e2:	4603      	mov	r3, r0
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
	ARR = ABS(u[0]) < 0.001 ? 0:(uint32_t)  (RESOLUTION*f/(ABS(u[0])*reduction1*16*prescaler1));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	eef0 7ae7 	vabs.f32	s15, s15
 80019f2:	ee17 0a90 	vmov	r0, s15
 80019f6:	f7fe fdbf 	bl	8000578 <__aeabi_f2d>
 80019fa:	a361      	add	r3, pc, #388	; (adr r3, 8001b80 <apply_velocity_input+0x208>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7ff f884 	bl	8000b0c <__aeabi_dcmplt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <apply_velocity_input+0x96>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e033      	b.n	8001a76 <apply_velocity_input+0xfe>
 8001a0e:	69f8      	ldr	r0, [r7, #28]
 8001a10:	f7fe fd90 	bl	8000534 <__aeabi_ui2d>
 8001a14:	a35c      	add	r3, pc, #368	; (adr r3, 8001b88 <apply_velocity_input+0x210>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fe05 	bl	8000628 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4614      	mov	r4, r2
 8001a24:	461d      	mov	r5, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a30:	230a      	movs	r3, #10
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001a42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a54:	ee17 0a90 	vmov	r0, s15
 8001a58:	f7fe fd8e 	bl	8000578 <__aeabi_f2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe ff0a 	bl	800087c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7ff f8b2 	bl	8000bd8 <__aeabi_d2uiz>
 8001a74:	4603      	mov	r3, r0
 8001a76:	61bb      	str	r3, [r7, #24]
	CCR = ARR /2;
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_PRESCALER(htim1, prescaler1); //2625
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a3a      	ldr	r2, [r7, #32]
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_TIM_SET_AUTORELOAD(htim1, ARR);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
    htim1->Instance->EGR = TIM_EGR_UG;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	615a      	str	r2, [r3, #20]

   	prescaler2 = (uint16_t)  8400; //12000 ;//8400;
 8001aa4:	f242 03d0 	movw	r3, #8400	; 0x20d0
 8001aa8:	613b      	str	r3, [r7, #16]
    f = HAL_RCC_GetPCLK1Freq()*2;
 8001aaa:	f003 f9f9 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	61fb      	str	r3, [r7, #28]
    ARR =  ABS(u[1]) < 0.001 ? 0:(uint32_t)  (RESOLUTION*f/(ABS(u[1])*reduction2*16*prescaler2));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	eef0 7ae7 	vabs.f32	s15, s15
 8001ac0:	ee17 0a90 	vmov	r0, s15
 8001ac4:	f7fe fd58 	bl	8000578 <__aeabi_f2d>
 8001ac8:	a32d      	add	r3, pc, #180	; (adr r3, 8001b80 <apply_velocity_input+0x208>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	f7ff f81d 	bl	8000b0c <__aeabi_dcmplt>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <apply_velocity_input+0x164>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e034      	b.n	8001b46 <apply_velocity_input+0x1ce>
 8001adc:	69f8      	ldr	r0, [r7, #28]
 8001ade:	f7fe fd29 	bl	8000534 <__aeabi_ui2d>
 8001ae2:	a329      	add	r3, pc, #164	; (adr r3, 8001b88 <apply_velocity_input+0x210>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fd9e 	bl	8000628 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4614      	mov	r4, r2
 8001af2:	461d      	mov	r5, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3304      	adds	r3, #4
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b00:	2305      	movs	r3, #5
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001b12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b24:	ee17 0a90 	vmov	r0, s15
 8001b28:	f7fe fd26 	bl	8000578 <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4620      	mov	r0, r4
 8001b32:	4629      	mov	r1, r5
 8001b34:	f7fe fea2 	bl	800087c <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff f84a 	bl	8000bd8 <__aeabi_d2uiz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	61bb      	str	r3, [r7, #24]
    CCR = ARR /2;
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	085b      	lsrs	r3, r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
   	__HAL_TIM_SET_PRESCALER(htim2, prescaler2); //2625
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_TIM_SET_AUTORELOAD(htim2, ARR);
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34
    htim2->Instance->EGR = TIM_EGR_UG;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2201      	movs	r2, #1
 8001b72:	615a      	str	r2, [r3, #20]
    return;
 8001b74:	bf00      	nop
}
 8001b76:	3728      	adds	r7, #40	; 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7c:	f3af 8000 	nop.w
 8001b80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b84:	3f50624d 	.word	0x3f50624d
 8001b88:	ae261898 	.word	0xae261898
 8001b8c:	3fa015be 	.word	0x3fa015be
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020000 	.word	0x40020000

08001b98 <start_timers>:
- TIM_HandleTypeDef \*htim4: pointer to the fourth timer handler;
@outputs: 
- void;
@#
*/
void start_timers(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, TIM_HandleTypeDef *htim4){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
    HAL_TIM_Base_Start_IT(htim1);
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f003 f9f2 	bl	8004f90 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim2);
 8001bac:	68b8      	ldr	r0, [r7, #8]
 8001bae:	f003 f9ef 	bl	8004f90 <HAL_TIM_Base_Start_IT>
    /* start motor PWM */
    HAL_TIM_Base_Start_IT(htim3);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f003 f9ec 	bl	8004f90 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim4);
 8001bb8:	6838      	ldr	r0, [r7, #0]
 8001bba:	f003 f9e9 	bl	8004f90 <HAL_TIM_Base_Start_IT>
    /* start PWM */
    if(HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1) != HAL_OK){
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f003 fa97 	bl	80050f4 <HAL_TIM_PWM_Start>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <start_timers+0x38>
        HardFault_Handler();
 8001bcc:	f001 fc25 	bl	800341a <HardFault_Handler>
    }
    if(HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_1) != HAL_OK){
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f003 fa8e 	bl	80050f4 <HAL_TIM_PWM_Start>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <start_timers+0x4a>
        HardFault_Handler();
 8001bde:	f001 fc1c 	bl	800341a <HardFault_Handler>
    }
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <log_data>:
- man_t \*manip: pointer to the man_t structure that holds all the manipulator data;
@outputs: 
- void;
@#
*/
void log_data(UART_HandleTypeDef *huart, man_t *manip){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	uint32_t encoding_q0, encoding_q1;
    
    float q;
    rblast(&manip->q0_actual, &q);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001bfc:	f107 020c 	add.w	r2, r7, #12
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 f946 	bl	8002e94 <rblast>
 8001c08:	68fb      	ldr	r3, [r7, #12]
    memcpy(&encoding_q0, &q, sizeof q);
 8001c0a:	617b      	str	r3, [r7, #20]
    rblast(&manip->q1_actual, &q);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001c12:	f107 020c 	add.w	r2, r7, #12
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 f93b 	bl	8002e94 <rblast>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
    memcpy(&encoding_q1, &q, sizeof q);
 8001c20:	613b      	str	r3, [r7, #16]
    
    sprintf(tx_data, "0x%08x:0x%08x\n", encoding_q0  , encoding_q1);
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4906      	ldr	r1, [pc, #24]	; (8001c40 <log_data+0x54>)
 8001c28:	4806      	ldr	r0, [pc, #24]	; (8001c44 <log_data+0x58>)
 8001c2a:	f006 fa3f 	bl	80080ac <siprintf>
    
    HAL_UART_Transmit_DMA(huart, (uint8_t *) tx_data, sizeof tx_data); /* send encoder data for    purposes */
 8001c2e:	2216      	movs	r2, #22
 8001c30:	4904      	ldr	r1, [pc, #16]	; (8001c44 <log_data+0x58>)
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f004 f8a8 	bl	8005d88 <HAL_UART_Transmit_DMA>
}
 8001c38:	bf00      	nop
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	0800a4f0 	.word	0x0800a4f0
 8001c44:	20000274 	.word	0x20000274

08001c48 <setup_encoders>:
- TIM_HandleTypeDef \*htim: pointer to the sampling timer handler;
@outputs: 
- void;
@#
*/
void setup_encoders(TIM_HandleTypeDef *htim){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	const uint32_t clock_freq = 84000000;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <setup_encoders+0x78>)
 8001c52:	60fb      	str	r3, [r7, #12]
	uint16_t ARR;
	ARR = (T_S*clock_freq)/PRESCALER_ENCODER;
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7fe fc6d 	bl	8000534 <__aeabi_ui2d>
 8001c5a:	a317      	add	r3, pc, #92	; (adr r3, 8001cb8 <setup_encoders+0x70>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fce2 	bl	8000628 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <setup_encoders+0x7c>)
 8001c72:	f7fe fe03 	bl	800087c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ffab 	bl	8000bd8 <__aeabi_d2uiz>
 8001c82:	4603      	mov	r3, r0
 8001c84:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_PRESCALER(htim, PRESCALER_ENCODER);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	897a      	ldrh	r2, [r7, #10]
 8001c94:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c96:	897a      	ldrh	r2, [r7, #10]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]
	htim->Instance->EGR = TIM_EGR_UG;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f003 f973 	bl	8004f90 <HAL_TIM_Base_Start_IT>
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cbc:	3f60624d 	.word	0x3f60624d
 8001cc0:	0501bd00 	.word	0x0501bd00
 8001cc4:	40300000 	.word	0x40300000

08001cc8 <PID_controller_position>:
- float \*u: pointer to the velocity output;
@outputs:
- void;
@#
*/
void PID_controller_position(man_t *manip, pid_controller_t *pid1,pid_controller_t *pid2, float *u){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]

	float set_point1,set_point2,measure1, measure2,u0,u1,tc0,tc1;

	rbpeek(&manip->q0,&set_point1);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f107 021c 	add.w	r2, r7, #28
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f001 f8b4 	bl	8002e4c <rbpeek>
	rbpeek(&manip->q1,&set_point2);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	332c      	adds	r3, #44	; 0x2c
 8001ce8:	f107 0218 	add.w	r2, r7, #24
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f001 f8ac 	bl	8002e4c <rbpeek>
    /*
	dq_actual0=set_point1;
	//ddq_actual1=set_point2;
    */

	rblast(&manip->q0_actual,&measure1);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001cfa:	f107 0214 	add.w	r2, r7, #20
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f001 f8c7 	bl	8002e94 <rblast>
	rblast(&manip->q1_actual,&measure2);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001d0c:	f107 0210 	add.w	r2, r7, #16
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f001 f8be 	bl	8002e94 <rblast>

	disp1=measure1;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	4a77      	ldr	r2, [pc, #476]	; (8001ef8 <PID_controller_position+0x230>)
 8001d1c:	6013      	str	r3, [r2, #0]
	disp2=measure2;
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4a76      	ldr	r2, [pc, #472]	; (8001efc <PID_controller_position+0x234>)
 8001d22:	6013      	str	r3, [r2, #0]

	PID_update(pid1,set_point1, measure1,T_C);
 8001d24:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d28:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d2c:	ed9f 1a74 	vldr	s2, [pc, #464]	; 8001f00 <PID_controller_position+0x238>
 8001d30:	eef0 0a47 	vmov.f32	s1, s14
 8001d34:	eeb0 0a67 	vmov.f32	s0, s15
 8001d38:	68b8      	ldr	r0, [r7, #8]
 8001d3a:	f000 ff4d 	bl	8002bd8 <PID_update>
	PID_update(pid2,set_point2, measure2,T_C);
 8001d3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d42:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d46:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 8001f00 <PID_controller_position+0x238>
 8001d4a:	eef0 0a47 	vmov.f32	s1, s14
 8001d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 ff40 	bl	8002bd8 <PID_update>

	*u=pid1->out;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	601a      	str	r2, [r3, #0]
	*(u+1)=pid2->out;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	3304      	adds	r3, #4
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d68:	601a      	str	r2, [r3, #0]

    if (ABS(u[0]-measure1)<0.01){
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	ed93 7a00 	vldr	s14, [r3]
 8001d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	eef0 7ae7 	vabs.f32	s15, s15
 8001d7c:	ee17 0a90 	vmov	r0, s15
 8001d80:	f7fe fbfa 	bl	8000578 <__aeabi_f2d>
 8001d84:	a356      	add	r3, pc, #344	; (adr r3, 8001ee0 <PID_controller_position+0x218>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	f7fe febf 	bl	8000b0c <__aeabi_dcmplt>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <PID_controller_position+0xd2>
        tc0= 1000000;
 8001d94:	4b5b      	ldr	r3, [pc, #364]	; (8001f04 <PID_controller_position+0x23c>)
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d98:	e02c      	b.n	8001df4 <PID_controller_position+0x12c>
    }else{
    tc0 = sqrt(2*M_PI*ABS(u[0]-measure1)/0.4); //1.05
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	ed93 7a00 	vldr	s14, [r3]
 8001da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da8:	eef0 7ae7 	vabs.f32	s15, s15
 8001dac:	ee17 0a90 	vmov	r0, s15
 8001db0:	f7fe fbe2 	bl	8000578 <__aeabi_f2d>
 8001db4:	a34c      	add	r3, pc, #304	; (adr r3, 8001ee8 <PID_controller_position+0x220>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fc35 	bl	8000628 <__aeabi_dmul>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	a34a      	add	r3, pc, #296	; (adr r3, 8001ef0 <PID_controller_position+0x228>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fd56 	bl	800087c <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	ec43 2b17 	vmov	d7, r2, r3
 8001dd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ddc:	eef0 0a67 	vmov.f32	s1, s15
 8001de0:	f008 fa7c 	bl	800a2dc <sqrt>
 8001de4:	ec53 2b10 	vmov	r2, r3, d0
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe ff14 	bl	8000c18 <__aeabi_d2f>
 8001df0:	4603      	mov	r3, r0
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (ABS(u[1]- measure2)<0.01){
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	3304      	adds	r3, #4
 8001df8:	ed93 7a00 	vldr	s14, [r3]
 8001dfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e04:	eef0 7ae7 	vabs.f32	s15, s15
 8001e08:	ee17 0a90 	vmov	r0, s15
 8001e0c:	f7fe fbb4 	bl	8000578 <__aeabi_f2d>
 8001e10:	a333      	add	r3, pc, #204	; (adr r3, 8001ee0 <PID_controller_position+0x218>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fe79 	bl	8000b0c <__aeabi_dcmplt>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <PID_controller_position+0x15e>
        tc1= 1000000;
 8001e20:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <PID_controller_position+0x23c>)
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e24:	e02d      	b.n	8001e82 <PID_controller_position+0x1ba>
    }else{
        tc1 = sqrt(2*M_PI*ABS(u[1]-measure2)/0.4);   //1.5 ----> come se fosse un jerk
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	ed93 7a00 	vldr	s14, [r3]
 8001e2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e36:	eef0 7ae7 	vabs.f32	s15, s15
 8001e3a:	ee17 0a90 	vmov	r0, s15
 8001e3e:	f7fe fb9b 	bl	8000578 <__aeabi_f2d>
 8001e42:	a329      	add	r3, pc, #164	; (adr r3, 8001ee8 <PID_controller_position+0x220>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fbee 	bl	8000628 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	a326      	add	r3, pc, #152	; (adr r3, 8001ef0 <PID_controller_position+0x228>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fd0f 	bl	800087c <__aeabi_ddiv>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	ec43 2b17 	vmov	d7, r2, r3
 8001e66:	eeb0 0a47 	vmov.f32	s0, s14
 8001e6a:	eef0 0a67 	vmov.f32	s1, s15
 8001e6e:	f008 fa35 	bl	800a2dc <sqrt>
 8001e72:	ec53 2b10 	vmov	r2, r3, d0
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fecd 	bl	8000c18 <__aeabi_d2f>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
    }


    u0=(u[0]-measure1)/tc0;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	ed93 7a00 	vldr	s14, [r3]
 8001e88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e8c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e90:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    u1=(u[1]-measure2)/tc1;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	ed93 7a00 	vldr	s14, [r3]
 8001ea4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb4:	edc7 7a08 	vstr	s15, [r7, #32]

    *u=u0;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebc:	601a      	str	r2, [r3, #0]
    *(u+1)=u1;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	6a3a      	ldr	r2, [r7, #32]
 8001ec4:	601a      	str	r2, [r3, #0]

    /* SECTION DEBUG */
    ddq_actual0 = pid1->out;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <PID_controller_position+0x240>)
 8001ecc:	6013      	str	r3, [r2, #0]
    ddq_actual1 = pid2->out;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <PID_controller_position+0x244>)
 8001ed4:	6013      	str	r3, [r2, #0]
    /* !SECTION DEBUG */
}
 8001ed6:	bf00      	nop
 8001ed8:	3730      	adds	r7, #48	; 0x30
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	47ae147b 	.word	0x47ae147b
 8001ee4:	3f847ae1 	.word	0x3f847ae1
 8001ee8:	54442d18 	.word	0x54442d18
 8001eec:	401921fb 	.word	0x401921fb
 8001ef0:	9999999a 	.word	0x9999999a
 8001ef4:	3fd99999 	.word	0x3fd99999
 8001ef8:	20000620 	.word	0x20000620
 8001efc:	20000624 	.word	0x20000624
 8001f00:	3c23d70a 	.word	0x3c23d70a
 8001f04:	49742400 	.word	0x49742400
 8001f08:	20000628 	.word	0x20000628
 8001f0c:	2000062c 	.word	0x2000062c

08001f10 <PID_controller_velocity>:
- float u: velocity output
@outputs:
- void;
@#
*/
void PID_controller_velocity(man_t *manip, pid_controller_t *pid1,pid_controller_t *pid2, float *u){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]

	float set_point1,set_point2,measure1, measure2;

	rbpeek(&manip->dq0,&set_point1);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3358      	adds	r3, #88	; 0x58
 8001f22:	f107 021c 	add.w	r2, r7, #28
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 ff8f 	bl	8002e4c <rbpeek>
	rbpeek(&manip->dq1,&set_point2);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3384      	adds	r3, #132	; 0x84
 8001f32:	f107 0218 	add.w	r2, r7, #24
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 ff87 	bl	8002e4c <rbpeek>

	//dq_actual0=set_point1;
	//ddq_actual1=set_point2;
    */

	rblast(&manip->dq0_actual,&measure1);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f44:	f107 0214 	add.w	r2, r7, #20
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 ffa2 	bl	8002e94 <rblast>
	rblast(&manip->dq1_actual,&measure2);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f56:	f107 0210 	add.w	r2, r7, #16
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 ff99 	bl	8002e94 <rblast>

	rblast(&manip->q0_actual,&disp1);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001f68:	491c      	ldr	r1, [pc, #112]	; (8001fdc <PID_controller_velocity+0xcc>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 ff92 	bl	8002e94 <rblast>
	rblast(&manip->q1_actual,&disp2);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001f76:	491a      	ldr	r1, [pc, #104]	; (8001fe0 <PID_controller_velocity+0xd0>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 ff8b 	bl	8002e94 <rblast>


	PID_update(pid1, set_point1, measure1, T_C);
 8001f7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f82:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f86:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8001fe4 <PID_controller_velocity+0xd4>
 8001f8a:	eef0 0a47 	vmov.f32	s1, s14
 8001f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f92:	68b8      	ldr	r0, [r7, #8]
 8001f94:	f000 fe20 	bl	8002bd8 <PID_update>
	PID_update(pid2, set_point2, measure2, T_C);
 8001f98:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f9c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fa0:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8001fe4 <PID_controller_velocity+0xd4>
 8001fa4:	eef0 0a47 	vmov.f32	s1, s14
 8001fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 fe13 	bl	8002bd8 <PID_update>

    /* SECTION DEBUG */
	ddq_actual0=pid1->out;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb6:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <PID_controller_velocity+0xd8>)
 8001fb8:	6013      	str	r3, [r2, #0]
	ddq_actual1=pid2->out;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <PID_controller_velocity+0xdc>)
 8001fc0:	6013      	str	r3, [r2, #0]
    /* !SECTION DEBUG*/

	*u=pid1->out;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	601a      	str	r2, [r3, #0]
	*(u+1)=pid2->out;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fd2:	601a      	str	r2, [r3, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000620 	.word	0x20000620
 8001fe0:	20000624 	.word	0x20000624
 8001fe4:	3c23d70a 	.word	0x3c23d70a
 8001fe8:	20000628 	.word	0x20000628
 8001fec:	2000062c 	.word	0x2000062c

08001ff0 <homing>:
@outputs:
- void;
@#
*/

void homing(man_t *manip,TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, pid_controller_t *pid_v1,pid_controller_t *pid_v2, pid_controller_t *pid_p1, pid_controller_t *pid_p2){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]

    float u[2]={0, 0};
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    float pos[2]={0, 0};
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
    float pos_real[2]={-2.11350, 2.39353 };
 8002016:	4aae      	ldr	r2, [pc, #696]	; (80022d0 <homing+0x2e0>)
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002020:	e883 0003 	stmia.w	r3, {r0, r1}

    is_home1=1;
 8002024:	4bab      	ldr	r3, [pc, #684]	; (80022d4 <homing+0x2e4>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
    is_home2=1;
 800202a:	4bab      	ldr	r3, [pc, #684]	; (80022d8 <homing+0x2e8>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]

    limit_switch1=0;
 8002030:	4baa      	ldr	r3, [pc, #680]	; (80022dc <homing+0x2ec>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    limit_switch2=0;
 8002036:	4baa      	ldr	r3, [pc, #680]	; (80022e0 <homing+0x2f0>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

    offset1=0;
 800203c:	4ba9      	ldr	r3, [pc, #676]	; (80022e4 <homing+0x2f4>)
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
    offset2=0;
 8002044:	4ba8      	ldr	r3, [pc, #672]	; (80022e8 <homing+0x2f8>)
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

	/*apply velocity input*/
	while(!limit_switch1 ){
 800204c:	e01a      	b.n	8002084 <homing+0x94>

        rbpush(&manip->dq0,-0.7);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3358      	adds	r3, #88	; 0x58
 8002052:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 80022ec <homing+0x2fc>
 8002056:	4618      	mov	r0, r3
 8002058:	f000 feae 	bl	8002db8 <rbpush>

        update_speeds(manip);
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff fc29 	bl	80018b4 <update_speeds>
        PID_controller_velocity( manip, pid_v1, pid_v2, u);
 8002062:	f107 0320 	add.w	r3, r7, #32
 8002066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002068:	6839      	ldr	r1, [r7, #0]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff ff50 	bl	8001f10 <PID_controller_velocity>
        apply_velocity_input(htim1, htim2, u);
 8002070:	f107 0320 	add.w	r3, r7, #32
 8002074:	461a      	mov	r2, r3
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68b8      	ldr	r0, [r7, #8]
 800207a:	f7ff fc7d 	bl	8001978 <apply_velocity_input>

        HAL_Delay((uint32_t) (T_C*1000));
 800207e:	200a      	movs	r0, #10
 8002080:	f001 fb96 	bl	80037b0 <HAL_Delay>
	while(!limit_switch1 ){
 8002084:	4b95      	ldr	r3, [pc, #596]	; (80022dc <homing+0x2ec>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0e0      	beq.n	800204e <homing+0x5e>
	}



	u[0]=0;
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
	u[1]=0;
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
	apply_velocity_input(htim1, htim2, u);
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	461a      	mov	r2, r3
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	68b8      	ldr	r0, [r7, #8]
 80020a2:	f7ff fc69 	bl	8001978 <apply_velocity_input>

	while(!limit_switch2 ){
 80020a6:	e021      	b.n	80020ec <homing+0xfc>
        rbpush(&manip->dq0,0);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3358      	adds	r3, #88	; 0x58
 80020ac:	ed9f 0a90 	vldr	s0, [pc, #576]	; 80022f0 <homing+0x300>
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fe81 	bl	8002db8 <rbpush>
        rbpush(&manip->dq1,0.5);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3384      	adds	r3, #132	; 0x84
 80020ba:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fe7a 	bl	8002db8 <rbpush>

		update_speeds(manip);
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff fbf5 	bl	80018b4 <update_speeds>
		PID_controller_velocity( manip, pid_v1, pid_v2, u);
 80020ca:	f107 0320 	add.w	r3, r7, #32
 80020ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7ff ff1c 	bl	8001f10 <PID_controller_velocity>
		apply_velocity_input(htim1, htim2, u);
 80020d8:	f107 0320 	add.w	r3, r7, #32
 80020dc:	461a      	mov	r2, r3
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	68b8      	ldr	r0, [r7, #8]
 80020e2:	f7ff fc49 	bl	8001978 <apply_velocity_input>

		HAL_Delay((uint32_t) (T_C*1000));
 80020e6:	200a      	movs	r0, #10
 80020e8:	f001 fb62 	bl	80037b0 <HAL_Delay>
	while(!limit_switch2 ){
 80020ec:	4b7c      	ldr	r3, [pc, #496]	; (80022e0 <homing+0x2f0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0d9      	beq.n	80020a8 <homing+0xb8>
	}



	printf(" primo while \n");
 80020f4:	487f      	ldr	r0, [pc, #508]	; (80022f4 <homing+0x304>)
 80020f6:	f005 ffc1 	bl	800807c <puts>
	fflush(stdout);
 80020fa:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <homing+0x308>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4618      	mov	r0, r3
 8002102:	f005 f8a5 	bl	8007250 <fflush>

	limit_switch1=0;
 8002106:	4b75      	ldr	r3, [pc, #468]	; (80022dc <homing+0x2ec>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
	limit_switch2=0;
 800210c:	4b74      	ldr	r3, [pc, #464]	; (80022e0 <homing+0x2f0>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

	u[0]=0;
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	623b      	str	r3, [r7, #32]
	u[1]=0;
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
	apply_velocity_input(htim1, htim2, u);
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	461a      	mov	r2, r3
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	68b8      	ldr	r0, [r7, #8]
 8002128:	f7ff fc26 	bl	8001978 <apply_velocity_input>

	printf(" WHILE: offset2: %f \n ",offset2);
 800212c:	4b6e      	ldr	r3, [pc, #440]	; (80022e8 <homing+0x2f8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fa21 	bl	8000578 <__aeabi_f2d>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4870      	ldr	r0, [pc, #448]	; (80022fc <homing+0x30c>)
 800213c:	f005 ff18 	bl	8007f70 <iprintf>
	fflush(stdout);
 8002140:	4b6d      	ldr	r3, [pc, #436]	; (80022f8 <homing+0x308>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	4618      	mov	r0, r3
 8002148:	f005 f882 	bl	8007250 <fflush>

    offset1-=pos_real[0];
 800214c:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <homing+0x2f4>)
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	edd7 7a04 	vldr	s15, [r7, #16]
 8002156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215a:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <homing+0x2f4>)
 800215c:	edc3 7a00 	vstr	s15, [r3]
    offset2-=pos_real[1];
 8002160:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <homing+0x2f8>)
 8002162:	ed93 7a00 	vldr	s14, [r3]
 8002166:	edd7 7a05 	vldr	s15, [r7, #20]
 800216a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216e:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <homing+0x2f8>)
 8002170:	edc3 7a00 	vstr	s15, [r3]
    rblast(&manip->q0_actual,&pos[0]);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800217a:	f107 0218 	add.w	r2, r7, #24
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fe87 	bl	8002e94 <rblast>
    rblast(&manip->q1_actual,&pos[1]);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 800218c:	f107 0318 	add.w	r3, r7, #24
 8002190:	3304      	adds	r3, #4
 8002192:	4619      	mov	r1, r3
 8002194:	4610      	mov	r0, r2
 8002196:	f000 fe7d 	bl	8002e94 <rblast>


    printf("pos_real[1]: %f \n",pos_real[1]);
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9eb 	bl	8000578 <__aeabi_f2d>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4856      	ldr	r0, [pc, #344]	; (8002300 <homing+0x310>)
 80021a8:	f005 fee2 	bl	8007f70 <iprintf>
    printf("pos[0]: %f \n",pos[0]);
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9e2 	bl	8000578 <__aeabi_f2d>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4852      	ldr	r0, [pc, #328]	; (8002304 <homing+0x314>)
 80021ba:	f005 fed9 	bl	8007f70 <iprintf>
    printf("pos[1]: %f \n",pos[1]);
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f9d9 	bl	8000578 <__aeabi_f2d>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	484f      	ldr	r0, [pc, #316]	; (8002308 <homing+0x318>)
 80021cc:	f005 fed0 	bl	8007f70 <iprintf>
    fflush(stdout);
 80021d0:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <homing+0x308>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f005 f83a 	bl	8007250 <fflush>

	while(1){

	if((ABS(pos[0])> 0.001) || (ABS(pos[1])> 0.001)){
 80021dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80021e0:	eef0 7ae7 	vabs.f32	s15, s15
 80021e4:	ee17 0a90 	vmov	r0, s15
 80021e8:	f7fe f9c6 	bl	8000578 <__aeabi_f2d>
 80021ec:	a336      	add	r3, pc, #216	; (adr r3, 80022c8 <homing+0x2d8>)
 80021ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f2:	f7fe fca9 	bl	8000b48 <__aeabi_dcmpgt>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10f      	bne.n	800221c <homing+0x22c>
 80021fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002200:	eef0 7ae7 	vabs.f32	s15, s15
 8002204:	ee17 0a90 	vmov	r0, s15
 8002208:	f7fe f9b6 	bl	8000578 <__aeabi_f2d>
 800220c:	a32e      	add	r3, pc, #184	; (adr r3, 80022c8 <homing+0x2d8>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fe fc99 	bl	8000b48 <__aeabi_dcmpgt>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d033      	beq.n	8002284 <homing+0x294>

		PID_controller_position( manip, pid_p1, pid_p2, u);
 800221c:	f107 0320 	add.w	r3, r7, #32
 8002220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002222:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f7ff fd4f 	bl	8001cc8 <PID_controller_position>
		apply_velocity_input(htim1, htim2,  u);
 800222a:	f107 0320 	add.w	r3, r7, #32
 800222e:	461a      	mov	r2, r3
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	68b8      	ldr	r0, [r7, #8]
 8002234:	f7ff fba0 	bl	8001978 <apply_velocity_input>
		rblast(&manip->q0_actual,&pos[0]);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800223e:	f107 0218 	add.w	r2, r7, #24
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fe25 	bl	8002e94 <rblast>
		rblast(&manip->q1_actual,&pos[1]);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	3304      	adds	r3, #4
 8002256:	4619      	mov	r1, r3
 8002258:	4610      	mov	r0, r2
 800225a:	f000 fe1b 	bl	8002e94 <rblast>
		HAL_Delay((uint32_t) (T_C*1000));
 800225e:	200a      	movs	r0, #10
 8002260:	f001 faa6 	bl	80037b0 <HAL_Delay>

		printf("pos[0]: %f \n",pos[0]);
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f986 	bl	8000578 <__aeabi_f2d>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4824      	ldr	r0, [pc, #144]	; (8002304 <homing+0x314>)
 8002272:	f005 fe7d 	bl	8007f70 <iprintf>
		fflush(stdout);
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <homing+0x308>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4618      	mov	r0, r3
 800227e:	f004 ffe7 	bl	8007250 <fflush>
	if((ABS(pos[0])> 0.001) || (ABS(pos[1])> 0.001)){
 8002282:	e7ab      	b.n	80021dc <homing+0x1ec>
	}
}



	u[0]=0;
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
	u[1]=0;
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
	apply_velocity_input(htim1, htim2, u);
 8002290:	f107 0320 	add.w	r3, r7, #32
 8002294:	461a      	mov	r2, r3
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	68b8      	ldr	r0, [r7, #8]
 800229a:	f7ff fb6d 	bl	8001978 <apply_velocity_input>

	//is_home1=0;
	//is_home2=0;

	limit_switch1=0;
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <homing+0x2ec>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
	limit_switch2=0;
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <homing+0x2f0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
	printf("  end homing \n");
 80022aa:	4818      	ldr	r0, [pc, #96]	; (800230c <homing+0x31c>)
 80022ac:	f005 fee6 	bl	800807c <puts>
	fflush(stdout);
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <homing+0x308>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 ffca 	bl	8007250 <fflush>
}
 80022bc:	bf00      	nop
 80022be:	3728      	adds	r7, #40	; 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	f3af 8000 	nop.w
 80022c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80022cc:	3f50624d 	.word	0x3f50624d
 80022d0:	0800a56c 	.word	0x0800a56c
 80022d4:	2000061c 	.word	0x2000061c
 80022d8:	2000061d 	.word	0x2000061d
 80022dc:	20000618 	.word	0x20000618
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000610 	.word	0x20000610
 80022e8:	20000614 	.word	0x20000614
 80022ec:	bf333333 	.word	0xbf333333
 80022f0:	00000000 	.word	0x00000000
 80022f4:	0800a500 	.word	0x0800a500
 80022f8:	20000010 	.word	0x20000010
 80022fc:	0800a510 	.word	0x0800a510
 8002300:	0800a528 	.word	0x0800a528
 8002304:	0800a53c 	.word	0x0800a53c
 8002308:	0800a54c 	.word	0x0800a54c
 800230c:	0800a55c 	.word	0x0800a55c

08002310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  rate_t rate;
  float v[2], v_est, a_est;
  char *data = "\n";
 8002316:	4b6e      	ldr	r3, [pc, #440]	; (80024d0 <main+0x1c0>)
 8002318:	61fb      	str	r3, [r7, #28]
  float i = 1*T_C;
 800231a:	4b6e      	ldr	r3, [pc, #440]	; (80024d4 <main+0x1c4>)
 800231c:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800231e:	f001 f9d5 	bl	80036cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002322:	f000 f91d 	bl	8002560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002326:	f000 fb55 	bl	80029d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800232a:	f000 fb2b 	bl	8002984 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800232e:	f000 faff 	bl	8002930 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002332:	f000 f9d7 	bl	80026e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002336:	f000 fa29 	bl	800278c <MX_TIM4_Init>
  MX_TIM2_Init();
 800233a:	f000 f97b 	bl	8002634 <MX_TIM2_Init>
  MX_TIM5_Init();
 800233e:	f000 fa79 	bl	8002834 <MX_TIM5_Init>
  MX_TIM10_Init();
 8002342:	f000 fad1 	bl	80028e8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip, &htim3, &htim4,&htim2,&htim5); /* initialize the manipulator struct */
 8002346:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <main+0x1c8>)
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	4b64      	ldr	r3, [pc, #400]	; (80024dc <main+0x1cc>)
 800234c:	4a64      	ldr	r2, [pc, #400]	; (80024e0 <main+0x1d0>)
 800234e:	4965      	ldr	r1, [pc, #404]	; (80024e4 <main+0x1d4>)
 8002350:	4865      	ldr	r0, [pc, #404]	; (80024e8 <main+0x1d8>)
 8002352:	f7fe ffcb 	bl	80012ec <init_man>

  /* PID controllers*/

  PID_init(&pid_pos1,KP_P1,TI_P1,TD_P1,N1,0); /*initialize the PID controllers for position*/
 8002356:	2100      	movs	r1, #0
 8002358:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 800235c:	ed9f 1a63 	vldr	s2, [pc, #396]	; 80024ec <main+0x1dc>
 8002360:	eddf 0a63 	vldr	s1, [pc, #396]	; 80024f0 <main+0x1e0>
 8002364:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80024f4 <main+0x1e4>
 8002368:	4863      	ldr	r0, [pc, #396]	; (80024f8 <main+0x1e8>)
 800236a:	f000 fbd2 	bl	8002b12 <PID_init>
  PID_init(&pid_pos2,KP_P2,TI_P2,TD_P2,N2,0);
 800236e:	2100      	movs	r1, #0
 8002370:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8002374:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 80024ec <main+0x1dc>
 8002378:	eddf 0a60 	vldr	s1, [pc, #384]	; 80024fc <main+0x1ec>
 800237c:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8002500 <main+0x1f0>
 8002380:	4860      	ldr	r0, [pc, #384]	; (8002504 <main+0x1f4>)
 8002382:	f000 fbc6 	bl	8002b12 <PID_init>

  set_limit(&pid_pos1,-4*M_PI,4*M_PI,-M_PI/2,M_PI/2);/*initialize the PID controllers output limits*/
 8002386:	eddf 1a60 	vldr	s3, [pc, #384]	; 8002508 <main+0x1f8>
 800238a:	ed9f 1a60 	vldr	s2, [pc, #384]	; 800250c <main+0x1fc>
 800238e:	eddf 0a60 	vldr	s1, [pc, #384]	; 8002510 <main+0x200>
 8002392:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8002514 <main+0x204>
 8002396:	4858      	ldr	r0, [pc, #352]	; (80024f8 <main+0x1e8>)
 8002398:	f000 fbfe 	bl	8002b98 <set_limit>
  set_limit(&pid_pos2,-8*M_PI,8*M_PI,-6*(M_PI/2),6*(M_PI/2));
 800239c:	eddf 1a5e 	vldr	s3, [pc, #376]	; 8002518 <main+0x208>
 80023a0:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 800251c <main+0x20c>
 80023a4:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8002520 <main+0x210>
 80023a8:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8002524 <main+0x214>
 80023ac:	4855      	ldr	r0, [pc, #340]	; (8002504 <main+0x1f4>)
 80023ae:	f000 fbf3 	bl	8002b98 <set_limit>

  /* PI controllers*/
  PID_init(&pid_vel1,KP_V1,TI_V1,0,N1,1); /*initialize the PI controllers for velocity*/
 80023b2:	2101      	movs	r1, #1
 80023b4:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80023b8:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8002528 <main+0x218>
 80023bc:	eddf 0a5b 	vldr	s1, [pc, #364]	; 800252c <main+0x21c>
 80023c0:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8002530 <main+0x220>
 80023c4:	485b      	ldr	r0, [pc, #364]	; (8002534 <main+0x224>)
 80023c6:	f000 fba4 	bl	8002b12 <PID_init>
  PID_init(&pid_vel2,KP_V2,TI_V2,0,N2,1);
 80023ca:	2101      	movs	r1, #1
 80023cc:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80023d0:	ed9f 1a55 	vldr	s2, [pc, #340]	; 8002528 <main+0x218>
 80023d4:	eddf 0a55 	vldr	s1, [pc, #340]	; 800252c <main+0x21c>
 80023d8:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8002530 <main+0x220>
 80023dc:	4856      	ldr	r0, [pc, #344]	; (8002538 <main+0x228>)
 80023de:	f000 fb98 	bl	8002b12 <PID_init>

  set_limit(&pid_vel1,-4*M_PI,4*M_PI,-M_PI/2,M_PI/2);/*initialize the PI controllers output limits*/
 80023e2:	eddf 1a49 	vldr	s3, [pc, #292]	; 8002508 <main+0x1f8>
 80023e6:	ed9f 1a49 	vldr	s2, [pc, #292]	; 800250c <main+0x1fc>
 80023ea:	eddf 0a49 	vldr	s1, [pc, #292]	; 8002510 <main+0x200>
 80023ee:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8002514 <main+0x204>
 80023f2:	4850      	ldr	r0, [pc, #320]	; (8002534 <main+0x224>)
 80023f4:	f000 fbd0 	bl	8002b98 <set_limit>
  set_limit(&pid_vel2,-8*M_PI,8*M_PI,-6*(M_PI/2),6*(M_PI/2));
 80023f8:	eddf 1a47 	vldr	s3, [pc, #284]	; 8002518 <main+0x208>
 80023fc:	ed9f 1a47 	vldr	s2, [pc, #284]	; 800251c <main+0x20c>
 8002400:	eddf 0a47 	vldr	s1, [pc, #284]	; 8002520 <main+0x210>
 8002404:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8002524 <main+0x214>
 8002408:	484b      	ldr	r0, [pc, #300]	; (8002538 <main+0x228>)
 800240a:	f000 fbc5 	bl	8002b98 <set_limit>



  init_rate(&rate, (uint32_t) (T_C*1000)); /* initialize the rate struct */
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	210a      	movs	r1, #10
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff f8ab 	bl	8001570 <init_rate>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 800241a:	2278      	movs	r2, #120	; 0x78
 800241c:	4947      	ldr	r1, [pc, #284]	; (800253c <main+0x22c>)
 800241e:	4848      	ldr	r0, [pc, #288]	; (8002540 <main+0x230>)
 8002420:	f003 fd30 	bl	8005e84 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* start timers */
  start_timers(&htim3, &htim4, &htim2, &htim5);
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <main+0x1c8>)
 8002426:	4a2d      	ldr	r2, [pc, #180]	; (80024dc <main+0x1cc>)
 8002428:	492d      	ldr	r1, [pc, #180]	; (80024e0 <main+0x1d0>)
 800242a:	482e      	ldr	r0, [pc, #184]	; (80024e4 <main+0x1d4>)
 800242c:	f7ff fbb4 	bl	8001b98 <start_timers>
  setup_encoders(&htim10);
 8002430:	4844      	ldr	r0, [pc, #272]	; (8002544 <main+0x234>)
 8002432:	f7ff fc09 	bl	8001c48 <setup_encoders>
  //homing(&manip, &htim2, &htim5, &pid_vel1, &pid_vel2);

  while (1)
  {
    if (homing_triggered){
 8002436:	4b44      	ldr	r3, [pc, #272]	; (8002548 <main+0x238>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d012      	beq.n	8002464 <main+0x154>
      //is_home1=1;
      //is_home2=1;
      homing(&manip, manip.htim_motor1, manip.htim_motor2, &pid_vel1, &pid_vel2,&pid_pos1,&pid_pos2);
 800243e:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <main+0x1d8>)
 8002440:	f8d3 1290 	ldr.w	r1, [r3, #656]	; 0x290
 8002444:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <main+0x1d8>)
 8002446:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
 800244a:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <main+0x1f4>)
 800244c:	9302      	str	r3, [sp, #8]
 800244e:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <main+0x1e8>)
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	4b39      	ldr	r3, [pc, #228]	; (8002538 <main+0x228>)
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4b37      	ldr	r3, [pc, #220]	; (8002534 <main+0x224>)
 8002458:	4823      	ldr	r0, [pc, #140]	; (80024e8 <main+0x1d8>)
 800245a:	f7ff fdc9 	bl	8001ff0 <homing>
      homing_triggered=0;
 800245e:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <main+0x238>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
    }

    update_speeds(&manip);
 8002464:	4820      	ldr	r0, [pc, #128]	; (80024e8 <main+0x1d8>)
 8002466:	f7ff fa25 	bl	80018b4 <update_speeds>
    
    /* log data */
    if(log_triggered){
 800246a:	4b38      	ldr	r3, [pc, #224]	; (800254c <main+0x23c>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00f      	beq.n	8002492 <main+0x182>
      log_data(&huart2, &manip);
 8002472:	491d      	ldr	r1, [pc, #116]	; (80024e8 <main+0x1d8>)
 8002474:	4832      	ldr	r0, [pc, #200]	; (8002540 <main+0x230>)
 8002476:	f7ff fbb9 	bl	8001bec <log_data>
      printf("logData");
 800247a:	4835      	ldr	r0, [pc, #212]	; (8002550 <main+0x240>)
 800247c:	f005 fd78 	bl	8007f70 <iprintf>
      fflush(stdout);
 8002480:	4b34      	ldr	r3, [pc, #208]	; (8002554 <main+0x244>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	4618      	mov	r0, r3
 8002488:	f004 fee2 	bl	8007250 <fflush>
      log_triggered = 0;
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <main+0x23c>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
    }

    PID_controller_position( &manip, &pid_pos1, &pid_pos2, v);
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <main+0x1f4>)
 8002498:	4917      	ldr	r1, [pc, #92]	; (80024f8 <main+0x1e8>)
 800249a:	4813      	ldr	r0, [pc, #76]	; (80024e8 <main+0x1d8>)
 800249c:	f7ff fc14 	bl	8001cc8 <PID_controller_position>

    rblast(&manip.q0_actual,&pos[0]);
 80024a0:	463b      	mov	r3, r7
 80024a2:	4619      	mov	r1, r3
 80024a4:	482c      	ldr	r0, [pc, #176]	; (8002558 <main+0x248>)
 80024a6:	f000 fcf5 	bl	8002e94 <rblast>
    rblast(&manip.q1_actual,&pos[1]);
 80024aa:	463b      	mov	r3, r7
 80024ac:	3304      	adds	r3, #4
 80024ae:	4619      	mov	r1, r3
 80024b0:	482a      	ldr	r0, [pc, #168]	; (800255c <main+0x24c>)
 80024b2:	f000 fcef 	bl	8002e94 <rblast>
    /* apply the inputs to the motors */
    apply_velocity_input(&htim2, &htim5, v, pos);
 80024b6:	463b      	mov	r3, r7
 80024b8:	f107 0208 	add.w	r2, r7, #8
 80024bc:	4906      	ldr	r1, [pc, #24]	; (80024d8 <main+0x1c8>)
 80024be:	4807      	ldr	r0, [pc, #28]	; (80024dc <main+0x1cc>)
 80024c0:	f7ff fa5a 	bl	8001978 <apply_velocity_input>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    rate_sleep(&rate); /* wait with a fixed frequency */
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff f862 	bl	8001592 <rate_sleep>
  {
 80024ce:	e7b2      	b.n	8002436 <main+0x126>
 80024d0:	0800a574 	.word	0x0800a574
 80024d4:	3c23d70a 	.word	0x3c23d70a
 80024d8:	20000708 	.word	0x20000708
 80024dc:	20000630 	.word	0x20000630
 80024e0:	200006c0 	.word	0x200006c0
 80024e4:	20000678 	.word	0x20000678
 80024e8:	2000028c 	.word	0x2000028c
 80024ec:	3bf5c28f 	.word	0x3bf5c28f
 80024f0:	3d072b02 	.word	0x3d072b02
 80024f4:	4019999a 	.word	0x4019999a
 80024f8:	20000524 	.word	0x20000524
 80024fc:	3d3020c5 	.word	0x3d3020c5
 8002500:	400acd9f 	.word	0x400acd9f
 8002504:	2000055c 	.word	0x2000055c
 8002508:	3fc90fdb 	.word	0x3fc90fdb
 800250c:	bfc90fdb 	.word	0xbfc90fdb
 8002510:	41490fdb 	.word	0x41490fdb
 8002514:	c1490fdb 	.word	0xc1490fdb
 8002518:	4116cbe4 	.word	0x4116cbe4
 800251c:	c116cbe4 	.word	0xc116cbe4
 8002520:	41c90fdb 	.word	0x41c90fdb
 8002524:	c1c90fdb 	.word	0xc1c90fdb
 8002528:	00000000 	.word	0x00000000
 800252c:	3f23d70a 	.word	0x3f23d70a
 8002530:	3e94fdf4 	.word	0x3e94fdf4
 8002534:	20000594 	.word	0x20000594
 8002538:	200005cc 	.word	0x200005cc
 800253c:	200001fc 	.word	0x200001fc
 8002540:	20000798 	.word	0x20000798
 8002544:	20000750 	.word	0x20000750
 8002548:	2000061e 	.word	0x2000061e
 800254c:	2000061f 	.word	0x2000061f
 8002550:	0800a578 	.word	0x0800a578
 8002554:	20000010 	.word	0x20000010
 8002558:	200003c0 	.word	0x200003c0
 800255c:	200003ec 	.word	0x200003ec

08002560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b094      	sub	sp, #80	; 0x50
 8002564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002566:	f107 0320 	add.w	r3, r7, #32
 800256a:	2230      	movs	r2, #48	; 0x30
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f004 ffab 	bl	80074ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	4b28      	ldr	r3, [pc, #160]	; (800262c <SystemClock_Config+0xcc>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a27      	ldr	r2, [pc, #156]	; (800262c <SystemClock_Config+0xcc>)
 800258e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <SystemClock_Config+0xcc>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a0:	2300      	movs	r3, #0
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <SystemClock_Config+0xd0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a21      	ldr	r2, [pc, #132]	; (8002630 <SystemClock_Config+0xd0>)
 80025aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <SystemClock_Config+0xd0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025bc:	2302      	movs	r3, #2
 80025be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025c0:	2301      	movs	r3, #1
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025c4:	2310      	movs	r3, #16
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025c8:	2302      	movs	r3, #2
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025cc:	2300      	movs	r3, #0
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80025d0:	2310      	movs	r3, #16
 80025d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80025d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80025d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80025da:	2304      	movs	r3, #4
 80025dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025de:	2304      	movs	r3, #4
 80025e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e2:	f107 0320 	add.w	r3, r7, #32
 80025e6:	4618      	mov	r0, r3
 80025e8:	f001 ffea 	bl	80045c0 <HAL_RCC_OscConfig>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80025f2:	f000 fa89 	bl	8002b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025f6:	230f      	movs	r3, #15
 80025f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025fa:	2302      	movs	r3, #2
 80025fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f002 fa4c 	bl	8004ab0 <HAL_RCC_ClockConfig>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800261e:	f000 fa73 	bl	8002b08 <Error_Handler>
  }
}
 8002622:	bf00      	nop
 8002624:	3750      	adds	r7, #80	; 0x50
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000

08002634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263a:	f107 0320 	add.w	r3, r7, #32
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	60da      	str	r2, [r3, #12]
 8002650:	611a      	str	r2, [r3, #16]
 8002652:	615a      	str	r2, [r3, #20]
 8002654:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <MX_TIM2_Init+0xac>)
 8002658:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800265c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <MX_TIM2_Init+0xac>)
 8002660:	2200      	movs	r2, #0
 8002662:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002664:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <MX_TIM2_Init+0xac>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <MX_TIM2_Init+0xac>)
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <MX_TIM2_Init+0xac>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <MX_TIM2_Init+0xac>)
 800267a:	2200      	movs	r2, #0
 800267c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800267e:	4818      	ldr	r0, [pc, #96]	; (80026e0 <MX_TIM2_Init+0xac>)
 8002680:	f002 fce8 	bl	8005054 <HAL_TIM_PWM_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800268a:	f000 fa3d 	bl	8002b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002696:	f107 0320 	add.w	r3, r7, #32
 800269a:	4619      	mov	r1, r3
 800269c:	4810      	ldr	r0, [pc, #64]	; (80026e0 <MX_TIM2_Init+0xac>)
 800269e:	f003 faa3 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80026a8:	f000 fa2e 	bl	8002b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ac:	2360      	movs	r3, #96	; 0x60
 80026ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2200      	movs	r2, #0
 80026c0:	4619      	mov	r1, r3
 80026c2:	4807      	ldr	r0, [pc, #28]	; (80026e0 <MX_TIM2_Init+0xac>)
 80026c4:	f002 ff74 	bl	80055b0 <HAL_TIM_PWM_ConfigChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80026ce:	f000 fa1b 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026d2:	4803      	ldr	r0, [pc, #12]	; (80026e0 <MX_TIM2_Init+0xac>)
 80026d4:	f000 fd88 	bl	80031e8 <HAL_TIM_MspPostInit>

}
 80026d8:	bf00      	nop
 80026da:	3728      	adds	r7, #40	; 0x28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000630 	.word	0x20000630

080026e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08c      	sub	sp, #48	; 0x30
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	2224      	movs	r2, #36	; 0x24
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 fee9 	bl	80074ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <MX_TIM3_Init+0xa0>)
 8002702:	4a21      	ldr	r2, [pc, #132]	; (8002788 <MX_TIM3_Init+0xa4>)
 8002704:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <MX_TIM3_Init+0xa0>)
 8002708:	2200      	movs	r2, #0
 800270a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270c:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <MX_TIM3_Init+0xa0>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <MX_TIM3_Init+0xa0>)
 8002714:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002718:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271a:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <MX_TIM3_Init+0xa0>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002720:	4b18      	ldr	r3, [pc, #96]	; (8002784 <MX_TIM3_Init+0xa0>)
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002726:	2303      	movs	r3, #3
 8002728:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800272e:	2301      	movs	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800273e:	2301      	movs	r3, #1
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002742:	2300      	movs	r3, #0
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	4619      	mov	r1, r3
 8002750:	480c      	ldr	r0, [pc, #48]	; (8002784 <MX_TIM3_Init+0xa0>)
 8002752:	f002 fd7f 	bl	8005254 <HAL_TIM_Encoder_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800275c:	f000 f9d4 	bl	8002b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002760:	2300      	movs	r3, #0
 8002762:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	4619      	mov	r1, r3
 800276c:	4805      	ldr	r0, [pc, #20]	; (8002784 <MX_TIM3_Init+0xa0>)
 800276e:	f003 fa3b 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002778:	f000 f9c6 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800277c:	bf00      	nop
 800277e:	3730      	adds	r7, #48	; 0x30
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000678 	.word	0x20000678
 8002788:	40000400 	.word	0x40000400

0800278c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	; 0x30
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	2224      	movs	r2, #36	; 0x24
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f004 fe95 	bl	80074ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027a8:	4b20      	ldr	r3, [pc, #128]	; (800282c <MX_TIM4_Init+0xa0>)
 80027aa:	4a21      	ldr	r2, [pc, #132]	; (8002830 <MX_TIM4_Init+0xa4>)
 80027ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <MX_TIM4_Init+0xa0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <MX_TIM4_Init+0xa0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <MX_TIM4_Init+0xa0>)
 80027bc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80027c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <MX_TIM4_Init+0xa0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <MX_TIM4_Init+0xa0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027ce:	2303      	movs	r3, #3
 80027d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027d6:	2301      	movs	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027e6:	2301      	movs	r3, #1
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	4619      	mov	r1, r3
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <MX_TIM4_Init+0xa0>)
 80027fa:	f002 fd2b 	bl	8005254 <HAL_TIM_Encoder_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002804:	f000 f980 	bl	8002b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002808:	2300      	movs	r3, #0
 800280a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	; (800282c <MX_TIM4_Init+0xa0>)
 8002816:	f003 f9e7 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002820:	f000 f972 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	3730      	adds	r7, #48	; 0x30
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200006c0 	.word	0x200006c0
 8002830:	40000800 	.word	0x40000800

08002834 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283a:	f107 0320 	add.w	r3, r7, #32
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	615a      	str	r2, [r3, #20]
 8002854:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <MX_TIM5_Init+0xac>)
 8002858:	4a22      	ldr	r2, [pc, #136]	; (80028e4 <MX_TIM5_Init+0xb0>)
 800285a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800285c:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <MX_TIM5_Init+0xac>)
 800285e:	2200      	movs	r2, #0
 8002860:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002862:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <MX_TIM5_Init+0xac>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <MX_TIM5_Init+0xac>)
 800286a:	f04f 32ff 	mov.w	r2, #4294967295
 800286e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <MX_TIM5_Init+0xac>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <MX_TIM5_Init+0xac>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800287c:	4818      	ldr	r0, [pc, #96]	; (80028e0 <MX_TIM5_Init+0xac>)
 800287e:	f002 fbe9 	bl	8005054 <HAL_TIM_PWM_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002888:	f000 f93e 	bl	8002b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002894:	f107 0320 	add.w	r3, r7, #32
 8002898:	4619      	mov	r1, r3
 800289a:	4811      	ldr	r0, [pc, #68]	; (80028e0 <MX_TIM5_Init+0xac>)
 800289c:	f003 f9a4 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80028a6:	f000 f92f 	bl	8002b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028aa:	2360      	movs	r3, #96	; 0x60
 80028ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2200      	movs	r2, #0
 80028be:	4619      	mov	r1, r3
 80028c0:	4807      	ldr	r0, [pc, #28]	; (80028e0 <MX_TIM5_Init+0xac>)
 80028c2:	f002 fe75 	bl	80055b0 <HAL_TIM_PWM_ConfigChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80028cc:	f000 f91c 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80028d0:	4803      	ldr	r0, [pc, #12]	; (80028e0 <MX_TIM5_Init+0xac>)
 80028d2:	f000 fc89 	bl	80031e8 <HAL_TIM_MspPostInit>

}
 80028d6:	bf00      	nop
 80028d8:	3728      	adds	r7, #40	; 0x28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000708 	.word	0x20000708
 80028e4:	40000c00 	.word	0x40000c00

080028e8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <MX_TIM10_Init+0x40>)
 80028ee:	4a0f      	ldr	r2, [pc, #60]	; (800292c <MX_TIM10_Init+0x44>)
 80028f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16;
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <MX_TIM10_Init+0x40>)
 80028f4:	2210      	movs	r2, #16
 80028f6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <MX_TIM10_Init+0x40>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 52500;
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <MX_TIM10_Init+0x40>)
 8002900:	f64c 5214 	movw	r2, #52500	; 0xcd14
 8002904:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <MX_TIM10_Init+0x40>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <MX_TIM10_Init+0x40>)
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002912:	4805      	ldr	r0, [pc, #20]	; (8002928 <MX_TIM10_Init+0x40>)
 8002914:	f002 faec 	bl	8004ef0 <HAL_TIM_Base_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800291e:	f000 f8f3 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000750 	.word	0x20000750
 800292c:	40014400 	.word	0x40014400

08002930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002936:	4a12      	ldr	r2, [pc, #72]	; (8002980 <MX_USART2_UART_Init+0x50>)
 8002938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <MX_USART2_UART_Init+0x4c>)
 800293c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <MX_USART2_UART_Init+0x4c>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002956:	220c      	movs	r2, #12
 8002958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <MX_USART2_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002968:	f003 f9c0 	bl	8005cec <HAL_UART_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002972:	f000 f8c9 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000798 	.word	0x20000798
 8002980:	40004400 	.word	0x40004400

08002984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <MX_DMA_Init+0x4c>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <MX_DMA_Init+0x4c>)
 8002994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <MX_DMA_Init+0x4c>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2010      	movs	r0, #16
 80029ac:	f000 ffff 	bl	80039ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80029b0:	2010      	movs	r0, #16
 80029b2:	f001 f818 	bl	80039e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2011      	movs	r0, #17
 80029bc:	f000 fff7 	bl	80039ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80029c0:	2011      	movs	r0, #17
 80029c2:	f001 f810 	bl	80039e6 <HAL_NVIC_EnableIRQ>

}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800

080029d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	4b43      	ldr	r3, [pc, #268]	; (8002afc <MX_GPIO_Init+0x128>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a42      	ldr	r2, [pc, #264]	; (8002afc <MX_GPIO_Init+0x128>)
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b40      	ldr	r3, [pc, #256]	; (8002afc <MX_GPIO_Init+0x128>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <MX_GPIO_Init+0x128>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a3b      	ldr	r2, [pc, #236]	; (8002afc <MX_GPIO_Init+0x128>)
 8002a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <MX_GPIO_Init+0x128>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	4b35      	ldr	r3, [pc, #212]	; (8002afc <MX_GPIO_Init+0x128>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a34      	ldr	r2, [pc, #208]	; (8002afc <MX_GPIO_Init+0x128>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b32      	ldr	r3, [pc, #200]	; (8002afc <MX_GPIO_Init+0x128>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <MX_GPIO_Init+0x128>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a2d      	ldr	r2, [pc, #180]	; (8002afc <MX_GPIO_Init+0x128>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <MX_GPIO_Init+0x128>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2122      	movs	r1, #34	; 0x22
 8002a5e:	4828      	ldr	r0, [pc, #160]	; (8002b00 <MX_GPIO_Init+0x12c>)
 8002a60:	f001 fd62 	bl	8004528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8002a64:	2200      	movs	r2, #0
 8002a66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a6a:	4826      	ldr	r0, [pc, #152]	; (8002b04 <MX_GPIO_Init+0x130>)
 8002a6c:	f001 fd5c 	bl	8004528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	4619      	mov	r1, r3
 8002a86:	481f      	ldr	r0, [pc, #124]	; (8002b04 <MX_GPIO_Init+0x130>)
 8002a88:	f001 fbca 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|LD2_Pin;
 8002a8c:	2322      	movs	r3, #34	; 0x22
 8002a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a90:	2301      	movs	r3, #1
 8002a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4817      	ldr	r0, [pc, #92]	; (8002b00 <MX_GPIO_Init+0x12c>)
 8002aa4:	f001 fbbc 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|LIMIT_SWITCH_2_Pin;
 8002aa8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4619      	mov	r1, r3
 8002abe:	4810      	ldr	r0, [pc, #64]	; (8002b00 <MX_GPIO_Init+0x12c>)
 8002ac0:	f001 fbae 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_1_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin;
 8002ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	4619      	mov	r1, r3
 8002adc:	4809      	ldr	r0, [pc, #36]	; (8002b04 <MX_GPIO_Init+0x130>)
 8002ade:	f001 fb9f 	bl	8004220 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2028      	movs	r0, #40	; 0x28
 8002ae8:	f000 ff61 	bl	80039ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002aec:	2028      	movs	r0, #40	; 0x28
 8002aee:	f000 ff7a 	bl	80039e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002af2:	bf00      	nop
 8002af4:	3728      	adds	r7, #40	; 0x28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020800 	.word	0x40020800

08002b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b0c:	b672      	cpsid	i
}
 8002b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <Error_Handler+0x8>

08002b12 <PID_init>:
- int controller_type: whether the controller will be a P, PI or PID controller;
@outputs:
- void;
@#
*/
int PID_init(pid_controller_t *pid, float KP,float TI, float TD, float N, int Controller_type){
 8002b12:	b480      	push	{r7}
 8002b14:	b087      	sub	sp, #28
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6178      	str	r0, [r7, #20]
 8002b1a:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b1e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b22:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b26:	edc7 1a01 	vstr	s3, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
	pid->type=Controller_type;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	601a      	str	r2, [r3, #0]
	pid->Kp= KP;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	605a      	str	r2, [r3, #4]
	pid->Ti=TI;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	609a      	str	r2, [r3, #8]
	pid->Td=TD;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	60da      	str	r2, [r3, #12]
	pid->N=N;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]

	pid->integrator=0.f;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
	pid->derivative=0.f;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	621a      	str	r2, [r3, #32]
	pid->prev_err=0.f;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	615a      	str	r2, [r3, #20]

	pid->out=0.f;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	635a      	str	r2, [r3, #52]	; 0x34

	/*NB the limit must be set using the proper method */
	pid->lim_out_min=0.f;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lim_out_max=0.f;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28

	pid->lim_integ_min=0.f;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->lim_integ_max=0.f;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30

	return 0;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <set_limit>:
- float lim_integ_max: maximum limit value for the integrator value;
@outputs:
- void;
@#
*/
int set_limit(pid_controller_t *pid, float lim_out_min, float lim_out_max, float lim_integ_min,float lim_integ_max ){
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6178      	str	r0, [r7, #20]
 8002ba0:	ed87 0a04 	vstr	s0, [r7, #16]
 8002ba4:	edc7 0a03 	vstr	s1, [r7, #12]
 8002ba8:	ed87 1a02 	vstr	s2, [r7, #8]
 8002bac:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->lim_out_min=lim_out_min;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lim_out_max=lim_out_max;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28

	pid->lim_integ_min=lim_integ_min;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->lim_integ_max=lim_integ_max;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
	return 0;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <PID_update>:
@outputs:
- void;
@#
*/

int PID_update(pid_controller_t *pid, float set_point , float measure, float T_C){
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002be4:	edc7 0a01 	vstr	s1, [r7, #4]
 8002be8:	ed87 1a00 	vstr	s2, [r7]

	float u = 0.f;
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
	float error = 0.f;
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
	float proportional = 0.f;
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
	float alpha = pid->Td/T_C;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	edd3 6a03 	vldr	s13, [r3, #12]
 8002c04:	ed97 7a00 	vldr	s14, [r7]
 8002c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0c:	edc7 7a04 	vstr	s15, [r7, #16]


    /* calculate the error*/
	error = set_point - measure;
 8002c10:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1c:	edc7 7a06 	vstr	s15, [r7, #24]

	/* proportional contribute*/
	proportional= pid->Kp*error;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c26:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2e:	edc7 7a05 	vstr	s15, [r7, #20]

	/*integral contribute*/
	pid->integrator+=(pid->Kp/pid->Ti)*0.5f*T_C*(error-pid->prev_err);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	ed93 6a01 	vldr	s12, [r3, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c44:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c48:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002c4c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c50:	edd7 7a00 	vldr	s15, [r7]
 8002c54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c5e:	ed97 6a06 	vldr	s12, [r7, #24]
 8002c62:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	edc3 7a07 	vstr	s15, [r3, #28]

	/* simple anti wind-up*/
	if(pid->integrator > pid->lim_integ_max){
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	dd04      	ble.n	8002c94 <PID_update+0xbc>
		pid->integrator=pid->lim_integ_max;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	61da      	str	r2, [r3, #28]
 8002c92:	e00e      	b.n	8002cb2 <PID_update+0xda>
	}else if(pid->integrator < pid->lim_integ_min)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	d503      	bpl.n	8002cb2 <PID_update+0xda>
	{
		pid->integrator=pid->lim_integ_min;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	61da      	str	r2, [r3, #28]
	}

	/* output  */
	if (pid->type>0){
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	dd09      	ble.n	8002cce <PID_update+0xf6>
		u=proportional+pid->integrator;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc8:	edc7 7a07 	vstr	s15, [r7, #28]
 8002ccc:	e044      	b.n	8002d58 <PID_update+0x180>
	}else{
		/*derivative contribute*/
		pid->derivative= (2*(pid->Kp)*alpha*error - pid->derivative*(1-(2*alpha)/pid->N))/(1+(2*alpha)/pid->N);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cd4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002cd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	edd3 6a08 	vldr	s13, [r3, #32]
 8002cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cf2:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	ed93 6a04 	vldr	s12, [r3, #16]
 8002cfc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002d00:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002d04:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d10:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d14:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d1e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8002d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	edc3 7a08 	vstr	s15, [r3, #32]
		u=proportional+pid->integrator+0*pid->derivative;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d48:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002db4 <PID_update+0x1dc>
 8002d4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d54:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	/* output limitation */
	if(u>pid->lim_out_max){
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6a:	dd04      	ble.n	8002d76 <PID_update+0x19e>
		pid->out=pid->lim_out_max;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	635a      	str	r2, [r3, #52]	; 0x34
 8002d74:	e011      	b.n	8002d9a <PID_update+0x1c2>
	}else if(u<pid->lim_out_min){
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d88:	d504      	bpl.n	8002d94 <PID_update+0x1bc>
		pid->out=pid->lim_out_min;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34
 8002d92:	e002      	b.n	8002d9a <PID_update+0x1c2>
	}else{
		pid->out=u;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
	}


	pid->prev_err=error;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	615a      	str	r2, [r3, #20]
	pid->prev_meas=measure;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	619a      	str	r2, [r3, #24]

	return 0;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3724      	adds	r7, #36	; 0x24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	00000000 	.word	0x00000000

08002db8 <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <rbpush+0x90>)
 8002de6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dea:	08d9      	lsrs	r1, r3, #3
 8002dec:	460b      	mov	r3, r1
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	789b      	ldrb	r3, [r3, #2]
 8002e00:	2b0a      	cmp	r3, #10
 8002e02:	d114      	bne.n	8002e2e <rbpush+0x76>
        /* overwriting data: also move head forward */
        buffer->head++;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	785b      	ldrb	r3, [r3, #1]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	785a      	ldrb	r2, [r3, #1]
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <rbpush+0x90>)
 8002e16:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1a:	08d9      	lsrs	r1, r3, #3
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	705a      	strb	r2, [r3, #1]
 8002e2c:	e005      	b.n	8002e3a <rbpush+0x82>
    }else{
        buffer->length++;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	789b      	ldrb	r3, [r3, #2]
 8002e32:	3301      	adds	r3, #1
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 8002e3a:	2301      	movs	r3, #1
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	cccccccd 	.word	0xcccccccd

08002e4c <rbpeek>:
- rbelement_t \*data: pointer to the variable that will hold the value;
@outputs: 
- rberror_t: whether the operation was concluded successfully or not;
@#
*/
rberror_t rbpeek(ringbuffer_t *buffer, rbelement_t *data){
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	789b      	ldrb	r3, [r3, #2]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10a      	bne.n	8002e74 <rbpeek+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	785b      	ldrb	r3, [r3, #1]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	3304      	adds	r3, #4
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	601a      	str	r2, [r3, #0]
        return 0; /* peek operation could not be completed because the buffer is empty */
 8002e70:	2300      	movs	r3, #0
 8002e72:	e009      	b.n	8002e88 <rbpeek+0x3c>
    }
    *data = buffer->buffer[buffer->head];
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3304      	adds	r3, #4
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	601a      	str	r2, [r3, #0]
    return 1;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <rblast>:
- rbelement_t \*data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	789b      	ldrb	r3, [r3, #2]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <rblast+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	785b      	ldrb	r3, [r3, #1]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	601a      	str	r2, [r3, #0]
        return 0; // operation failed
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e015      	b.n	8002ee8 <rblast+0x54>
    }
    // uint8_t index = (uint8_t) ((buffer->tail-1+RBUF_SZ)%RBUF_SZ);
    int8_t index = buffer->tail-1;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
 8002ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da03      	bge.n	8002ed6 <rblast+0x42>
        index += RBUF_SZ;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	330a      	adds	r3, #10
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	73fb      	strb	r3, [r7, #15]
    }
    *data = buffer->buffer[(uint8_t) index];
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	601a      	str	r2, [r3, #0]
    return 1;
 8002ee6:	2301      	movs	r3, #1
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <rbget>:


rberror_t rbget(ringbuffer_t *buffer, int8_t i, rbelement_t *data){
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	460b      	mov	r3, r1
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 8002f02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db05      	blt.n	8002f16 <rbget+0x22>
 8002f0a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	7892      	ldrb	r2, [r2, #2]
 8002f12:	4293      	cmp	r3, r2
 8002f14:	db0a      	blt.n	8002f2c <rbget+0x38>
        /* out of bounds */
        *data =  buffer->buffer[buffer->head];
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	785b      	ldrb	r3, [r3, #1]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	3304      	adds	r3, #4
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	601a      	str	r2, [r3, #0]
        return 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e01b      	b.n	8002f64 <rbget+0x70>
    }
    uint8_t index = (uint8_t) ((buffer->head+i) % RBUF_SZ);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	461a      	mov	r2, r3
 8002f32:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002f36:	441a      	add	r2, r3
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <rbget+0x7c>)
 8002f3a:	fb83 1302 	smull	r1, r3, r3, r2
 8002f3e:	1099      	asrs	r1, r3, #2
 8002f40:	17d3      	asrs	r3, r2, #31
 8002f42:	1ac9      	subs	r1, r1, r3
 8002f44:	460b      	mov	r3, r1
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	1ad1      	subs	r1, r2, r3
 8002f4e:	460b      	mov	r3, r1
 8002f50:	75fb      	strb	r3, [r7, #23]
    *data = buffer->buffer[index];
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
    return 1;
 8002f62:	2301      	movs	r3, #1
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	66666667 	.word	0x66666667

08002f74 <rbclear>:
- ringbuffer_t \*buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8002f80:	2300      	movs	r3, #0
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e00a      	b.n	8002f9c <rbclear+0x28>
        buffer->buffer[i] = 0;
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3304      	adds	r3, #4
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	2b09      	cmp	r3, #9
 8002fa0:	d9f1      	bls.n	8002f86 <rbclear+0x12>
    }
    buffer->length = 0;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_MspInit+0x4c>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a0f      	ldr	r2, [pc, #60]	; (800300c <HAL_MspInit+0x4c>)
 8002fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_MspInit+0x4c>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_MspInit+0x4c>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_MspInit+0x4c>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_MspInit+0x4c>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ffe:	2007      	movs	r0, #7
 8003000:	f000 fcca 	bl	8003998 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40023800 	.word	0x40023800

08003010 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003020:	d10e      	bne.n	8003040 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b13      	ldr	r3, [pc, #76]	; (8003074 <HAL_TIM_PWM_MspInit+0x64>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <HAL_TIM_PWM_MspInit+0x64>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_TIM_PWM_MspInit+0x64>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800303e:	e012      	b.n	8003066 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0c      	ldr	r2, [pc, #48]	; (8003078 <HAL_TIM_PWM_MspInit+0x68>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d10d      	bne.n	8003066 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_TIM_PWM_MspInit+0x64>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a08      	ldr	r2, [pc, #32]	; (8003074 <HAL_TIM_PWM_MspInit+0x64>)
 8003054:	f043 0308 	orr.w	r3, r3, #8
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_TIM_PWM_MspInit+0x64>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	40000c00 	.word	0x40000c00

0800307c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	; 0x30
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003084:	f107 031c 	add.w	r3, r7, #28
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a3a      	ldr	r2, [pc, #232]	; (8003184 <HAL_TIM_Encoder_MspInit+0x108>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d134      	bne.n	8003108 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	4b39      	ldr	r3, [pc, #228]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a38      	ldr	r2, [pc, #224]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40
 80030ae:	4b36      	ldr	r3, [pc, #216]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	4b32      	ldr	r3, [pc, #200]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	4a31      	ldr	r2, [pc, #196]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ca:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030d6:	23c0      	movs	r3, #192	; 0xc0
 80030d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030e6:	2302      	movs	r3, #2
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ea:	f107 031c 	add.w	r3, r7, #28
 80030ee:	4619      	mov	r1, r3
 80030f0:	4826      	ldr	r0, [pc, #152]	; (800318c <HAL_TIM_Encoder_MspInit+0x110>)
 80030f2:	f001 f895 	bl	8004220 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	201d      	movs	r0, #29
 80030fc:	f000 fc57 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003100:	201d      	movs	r0, #29
 8003102:	f000 fc70 	bl	80039e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003106:	e038      	b.n	800317a <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a20      	ldr	r2, [pc, #128]	; (8003190 <HAL_TIM_Encoder_MspInit+0x114>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d133      	bne.n	800317a <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4a14      	ldr	r2, [pc, #80]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800314a:	23c0      	movs	r3, #192	; 0xc0
 800314c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2300      	movs	r3, #0
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800315a:	2302      	movs	r3, #2
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315e:	f107 031c 	add.w	r3, r7, #28
 8003162:	4619      	mov	r1, r3
 8003164:	480b      	ldr	r0, [pc, #44]	; (8003194 <HAL_TIM_Encoder_MspInit+0x118>)
 8003166:	f001 f85b 	bl	8004220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	201e      	movs	r0, #30
 8003170:	f000 fc1d 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003174:	201e      	movs	r0, #30
 8003176:	f000 fc36 	bl	80039e6 <HAL_NVIC_EnableIRQ>
}
 800317a:	bf00      	nop
 800317c:	3730      	adds	r7, #48	; 0x30
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40000400 	.word	0x40000400
 8003188:	40023800 	.word	0x40023800
 800318c:	40020000 	.word	0x40020000
 8003190:	40000800 	.word	0x40000800
 8003194:	40020400 	.word	0x40020400

08003198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0e      	ldr	r2, [pc, #56]	; (80031e0 <HAL_TIM_Base_MspInit+0x48>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d115      	bne.n	80031d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <HAL_TIM_Base_MspInit+0x4c>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <HAL_TIM_Base_MspInit+0x4c>)
 80031b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_TIM_Base_MspInit+0x4c>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2100      	movs	r1, #0
 80031ca:	2019      	movs	r0, #25
 80031cc:	f000 fbef 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80031d0:	2019      	movs	r0, #25
 80031d2:	f000 fc08 	bl	80039e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40014400 	.word	0x40014400
 80031e4:	40023800 	.word	0x40023800

080031e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d11f      	bne.n	800324a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <HAL_TIM_MspPostInit+0xb0>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a21      	ldr	r2, [pc, #132]	; (8003298 <HAL_TIM_MspPostInit+0xb0>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <HAL_TIM_MspPostInit+0xb0>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	2302      	movs	r3, #2
 800322e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003234:	2300      	movs	r3, #0
 8003236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003238:	2301      	movs	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	4619      	mov	r1, r3
 8003242:	4816      	ldr	r0, [pc, #88]	; (800329c <HAL_TIM_MspPostInit+0xb4>)
 8003244:	f000 ffec 	bl	8004220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003248:	e022      	b.n	8003290 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_TIM_MspPostInit+0xb8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d11d      	bne.n	8003290 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_TIM_MspPostInit+0xb0>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <HAL_TIM_MspPostInit+0xb0>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6313      	str	r3, [r2, #48]	; 0x30
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <HAL_TIM_MspPostInit+0xb0>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003270:	2301      	movs	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2300      	movs	r3, #0
 800327e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003280:	2302      	movs	r3, #2
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	4619      	mov	r1, r3
 800328a:	4804      	ldr	r0, [pc, #16]	; (800329c <HAL_TIM_MspPostInit+0xb4>)
 800328c:	f000 ffc8 	bl	8004220 <HAL_GPIO_Init>
}
 8003290:	bf00      	nop
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40000c00 	.word	0x40000c00

080032a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a4d      	ldr	r2, [pc, #308]	; (80033f8 <HAL_UART_MspInit+0x154>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	f040 8094 	bne.w	80033f0 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	4b4b      	ldr	r3, [pc, #300]	; (80033fc <HAL_UART_MspInit+0x158>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4a4a      	ldr	r2, [pc, #296]	; (80033fc <HAL_UART_MspInit+0x158>)
 80032d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d6:	6413      	str	r3, [r2, #64]	; 0x40
 80032d8:	4b48      	ldr	r3, [pc, #288]	; (80033fc <HAL_UART_MspInit+0x158>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	4b44      	ldr	r3, [pc, #272]	; (80033fc <HAL_UART_MspInit+0x158>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	4a43      	ldr	r2, [pc, #268]	; (80033fc <HAL_UART_MspInit+0x158>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6313      	str	r3, [r2, #48]	; 0x30
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_UART_MspInit+0x158>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003300:	230c      	movs	r3, #12
 8003302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003304:	2302      	movs	r3, #2
 8003306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330c:	2303      	movs	r3, #3
 800330e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003310:	2307      	movs	r3, #7
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	4619      	mov	r1, r3
 800331a:	4839      	ldr	r0, [pc, #228]	; (8003400 <HAL_UART_MspInit+0x15c>)
 800331c:	f000 ff80 	bl	8004220 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003320:	4b38      	ldr	r3, [pc, #224]	; (8003404 <HAL_UART_MspInit+0x160>)
 8003322:	4a39      	ldr	r2, [pc, #228]	; (8003408 <HAL_UART_MspInit+0x164>)
 8003324:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003326:	4b37      	ldr	r3, [pc, #220]	; (8003404 <HAL_UART_MspInit+0x160>)
 8003328:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800332c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800332e:	4b35      	ldr	r3, [pc, #212]	; (8003404 <HAL_UART_MspInit+0x160>)
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003334:	4b33      	ldr	r3, [pc, #204]	; (8003404 <HAL_UART_MspInit+0x160>)
 8003336:	2200      	movs	r2, #0
 8003338:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800333a:	4b32      	ldr	r3, [pc, #200]	; (8003404 <HAL_UART_MspInit+0x160>)
 800333c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003340:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <HAL_UART_MspInit+0x160>)
 8003344:	2200      	movs	r2, #0
 8003346:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003348:	4b2e      	ldr	r3, [pc, #184]	; (8003404 <HAL_UART_MspInit+0x160>)
 800334a:	2200      	movs	r2, #0
 800334c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_UART_MspInit+0x160>)
 8003350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003354:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003356:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_UART_MspInit+0x160>)
 8003358:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800335c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_UART_MspInit+0x160>)
 8003360:	2200      	movs	r2, #0
 8003362:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003364:	4827      	ldr	r0, [pc, #156]	; (8003404 <HAL_UART_MspInit+0x160>)
 8003366:	f000 fb59 	bl	8003a1c <HAL_DMA_Init>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003370:	f7ff fbca 	bl	8002b08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a23      	ldr	r2, [pc, #140]	; (8003404 <HAL_UART_MspInit+0x160>)
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
 800337a:	4a22      	ldr	r2, [pc, #136]	; (8003404 <HAL_UART_MspInit+0x160>)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003380:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_UART_MspInit+0x168>)
 8003382:	4a23      	ldr	r2, [pc, #140]	; (8003410 <HAL_UART_MspInit+0x16c>)
 8003384:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003386:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_UART_MspInit+0x168>)
 8003388:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800338c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800338e:	4b1f      	ldr	r3, [pc, #124]	; (800340c <HAL_UART_MspInit+0x168>)
 8003390:	2240      	movs	r2, #64	; 0x40
 8003392:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <HAL_UART_MspInit+0x168>)
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <HAL_UART_MspInit+0x168>)
 800339c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <HAL_UART_MspInit+0x168>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033a8:	4b18      	ldr	r3, [pc, #96]	; (800340c <HAL_UART_MspInit+0x168>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <HAL_UART_MspInit+0x168>)
 80033b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <HAL_UART_MspInit+0x168>)
 80033b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_UART_MspInit+0x168>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80033c4:	4811      	ldr	r0, [pc, #68]	; (800340c <HAL_UART_MspInit+0x168>)
 80033c6:	f000 fb29 	bl	8003a1c <HAL_DMA_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 80033d0:	f7ff fb9a 	bl	8002b08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a0d      	ldr	r2, [pc, #52]	; (800340c <HAL_UART_MspInit+0x168>)
 80033d8:	635a      	str	r2, [r3, #52]	; 0x34
 80033da:	4a0c      	ldr	r2, [pc, #48]	; (800340c <HAL_UART_MspInit+0x168>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2100      	movs	r1, #0
 80033e4:	2026      	movs	r0, #38	; 0x26
 80033e6:	f000 fae2 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033ea:	2026      	movs	r0, #38	; 0x26
 80033ec:	f000 fafb 	bl	80039e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033f0:	bf00      	nop
 80033f2:	3728      	adds	r7, #40	; 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40004400 	.word	0x40004400
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020000 	.word	0x40020000
 8003404:	200007dc 	.word	0x200007dc
 8003408:	40026088 	.word	0x40026088
 800340c:	2000083c 	.word	0x2000083c
 8003410:	400260a0 	.word	0x400260a0

08003414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003418:	e7fe      	b.n	8003418 <NMI_Handler+0x4>

0800341a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800341a:	b480      	push	{r7}
 800341c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800341e:	e7fe      	b.n	800341e <HardFault_Handler+0x4>

08003420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003424:	e7fe      	b.n	8003424 <MemManage_Handler+0x4>

08003426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003426:	b480      	push	{r7}
 8003428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800342a:	e7fe      	b.n	800342a <BusFault_Handler+0x4>

0800342c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003430:	e7fe      	b.n	8003430 <UsageFault_Handler+0x4>

08003432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003460:	f000 f986 	bl	8003770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}

08003468 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800346c:	4802      	ldr	r0, [pc, #8]	; (8003478 <DMA1_Stream5_IRQHandler+0x10>)
 800346e:	f000 fc6d 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200007dc 	.word	0x200007dc

0800347c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003480:	4802      	ldr	r0, [pc, #8]	; (800348c <DMA1_Stream6_IRQHandler+0x10>)
 8003482:	f000 fc63 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	2000083c 	.word	0x2000083c

08003490 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003494:	4802      	ldr	r0, [pc, #8]	; (80034a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003496:	f001 ff83 	bl	80053a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000750 	.word	0x20000750

080034a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034a8:	4802      	ldr	r0, [pc, #8]	; (80034b4 <TIM3_IRQHandler+0x10>)
 80034aa:	f001 ff79 	bl	80053a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000678 	.word	0x20000678

080034b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <TIM4_IRQHandler+0x10>)
 80034be:	f001 ff6f 	bl	80053a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200006c0 	.word	0x200006c0

080034cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034d0:	4802      	ldr	r0, [pc, #8]	; (80034dc <USART2_IRQHandler+0x10>)
 80034d2:	f002 fd07 	bl	8005ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000798 	.word	0x20000798

080034e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_1_Pin);
 80034e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80034e8:	f001 f852 	bl	8004590 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_2_Pin);
 80034ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80034f0:	f001 f84e 	bl	8004590 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80034f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80034f8:	f001 f84a 	bl	8004590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}

08003500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
	return 1;
 8003504:	2301      	movs	r3, #1
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <_kill>:

int _kill(int pid, int sig)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800351a:	f003 fdd1 	bl	80070c0 <__errno>
 800351e:	4603      	mov	r3, r0
 8003520:	2216      	movs	r2, #22
 8003522:	601a      	str	r2, [r3, #0]
	return -1;
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <_exit>:

void _exit (int status)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003538:	f04f 31ff 	mov.w	r1, #4294967295
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ffe7 	bl	8003510 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003542:	e7fe      	b.n	8003542 <_exit+0x12>

08003544 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e00a      	b.n	800356c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003556:	f3af 8000 	nop.w
 800355a:	4601      	mov	r1, r0
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	60ba      	str	r2, [r7, #8]
 8003562:	b2ca      	uxtb	r2, r1
 8003564:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	dbf0      	blt.n	8003556 <_read+0x12>
	}

return len;
 8003574:	687b      	ldr	r3, [r7, #4]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_close>:
	}
	return len;
}

int _close(int file)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
	return -1;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035a6:	605a      	str	r2, [r3, #4]
	return 0;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <_isatty>:

int _isatty(int file)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
	return 1;
 80035be:	2301      	movs	r3, #1
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
	return 0;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035f0:	4a14      	ldr	r2, [pc, #80]	; (8003644 <_sbrk+0x5c>)
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <_sbrk+0x60>)
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <_sbrk+0x64>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d102      	bne.n	800360a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <_sbrk+0x64>)
 8003606:	4a12      	ldr	r2, [pc, #72]	; (8003650 <_sbrk+0x68>)
 8003608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <_sbrk+0x64>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4413      	add	r3, r2
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	429a      	cmp	r2, r3
 8003616:	d207      	bcs.n	8003628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003618:	f003 fd52 	bl	80070c0 <__errno>
 800361c:	4603      	mov	r3, r0
 800361e:	220c      	movs	r2, #12
 8003620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
 8003626:	e009      	b.n	800363c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <_sbrk+0x64>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <_sbrk+0x64>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	4a05      	ldr	r2, [pc, #20]	; (800364c <_sbrk+0x64>)
 8003638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800363a:	68fb      	ldr	r3, [r7, #12]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20020000 	.word	0x20020000
 8003648:	00000400 	.word	0x00000400
 800364c:	2000089c 	.word	0x2000089c
 8003650:	200008b8 	.word	0x200008b8

08003654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <SystemInit+0x20>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	4a05      	ldr	r2, [pc, #20]	; (8003674 <SystemInit+0x20>)
 8003660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800367c:	480d      	ldr	r0, [pc, #52]	; (80036b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800367e:	490e      	ldr	r1, [pc, #56]	; (80036b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003680:	4a0e      	ldr	r2, [pc, #56]	; (80036bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003684:	e002      	b.n	800368c <LoopCopyDataInit>

08003686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800368a:	3304      	adds	r3, #4

0800368c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800368c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800368e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003690:	d3f9      	bcc.n	8003686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003692:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003694:	4c0b      	ldr	r4, [pc, #44]	; (80036c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003698:	e001      	b.n	800369e <LoopFillZerobss>

0800369a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800369a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800369c:	3204      	adds	r2, #4

0800369e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800369e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a0:	d3fb      	bcc.n	800369a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036a2:	f7ff ffd7 	bl	8003654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036a6:	f003 fedb 	bl	8007460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036aa:	f7fe fe31 	bl	8002310 <main>
  bx  lr    
 80036ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80036bc:	0800a98c 	.word	0x0800a98c
  ldr r2, =_sbss
 80036c0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80036c4:	200008b4 	.word	0x200008b4

080036c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036c8:	e7fe      	b.n	80036c8 <ADC_IRQHandler>
	...

080036cc <HAL_Init>:
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <HAL_Init+0x40>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <HAL_Init+0x40>)
 80036d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_Init+0x40>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0a      	ldr	r2, [pc, #40]	; (800370c <HAL_Init+0x40>)
 80036e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b08      	ldr	r3, [pc, #32]	; (800370c <HAL_Init+0x40>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <HAL_Init+0x40>)
 80036ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	2003      	movs	r0, #3
 80036f6:	f000 f94f 	bl	8003998 <HAL_NVIC_SetPriorityGrouping>
 80036fa:	2000      	movs	r0, #0
 80036fc:	f000 f808 	bl	8003710 <HAL_InitTick>
 8003700:	f7ff fc5e 	bl	8002fc0 <HAL_MspInit>
 8003704:	2300      	movs	r3, #0
 8003706:	4618      	mov	r0, r3
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023c00 	.word	0x40023c00

08003710 <HAL_InitTick>:
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_InitTick+0x54>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <HAL_InitTick+0x58>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	4619      	mov	r1, r3
 8003722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003726:	fbb3 f3f1 	udiv	r3, r3, r1
 800372a:	fbb2 f3f3 	udiv	r3, r2, r3
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f967 	bl	8003a02 <HAL_SYSTICK_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_InitTick+0x2e>
 800373a:	2301      	movs	r3, #1
 800373c:	e00e      	b.n	800375c <HAL_InitTick+0x4c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b0f      	cmp	r3, #15
 8003742:	d80a      	bhi.n	800375a <HAL_InitTick+0x4a>
 8003744:	2200      	movs	r2, #0
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	f000 f92f 	bl	80039ae <HAL_NVIC_SetPriority>
 8003750:	4a06      	ldr	r2, [pc, #24]	; (800376c <HAL_InitTick+0x5c>)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	2300      	movs	r3, #0
 8003758:	e000      	b.n	800375c <HAL_InitTick+0x4c>
 800375a:	2301      	movs	r3, #1
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000004 	.word	0x20000004
 8003768:	2000000c 	.word	0x2000000c
 800376c:	20000008 	.word	0x20000008

08003770 <HAL_IncTick>:
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_IncTick+0x20>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_IncTick+0x24>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4413      	add	r3, r2
 8003780:	4a04      	ldr	r2, [pc, #16]	; (8003794 <HAL_IncTick+0x24>)
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	2000000c 	.word	0x2000000c
 8003794:	200008a0 	.word	0x200008a0

08003798 <HAL_GetTick>:
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_GetTick+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	200008a0 	.word	0x200008a0

080037b0 <HAL_Delay>:
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	f7ff ffee 	bl	8003798 <HAL_GetTick>
 80037bc:	60b8      	str	r0, [r7, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d005      	beq.n	80037d6 <HAL_Delay+0x26>
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_Delay+0x44>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	bf00      	nop
 80037d8:	f7ff ffde 	bl	8003798 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d8f7      	bhi.n	80037d8 <HAL_Delay+0x28>
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	2000000c 	.word	0x2000000c

080037f8 <__NVIC_SetPriorityGrouping>:
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <__NVIC_SetPriorityGrouping+0x44>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003814:	4013      	ands	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	021a      	lsls	r2, r3, #8
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4313      	orrs	r3, r2
 8003820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	4a04      	ldr	r2, [pc, #16]	; (800383c <__NVIC_SetPriorityGrouping+0x44>)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	60d3      	str	r3, [r2, #12]
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <__NVIC_GetPriorityGrouping>:
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <__NVIC_GetPriorityGrouping+0x18>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	0a1b      	lsrs	r3, r3, #8
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	4618      	mov	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <__NVIC_EnableIRQ>:
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	2b00      	cmp	r3, #0
 800386c:	db0b      	blt.n	8003886 <__NVIC_EnableIRQ+0x2a>
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	f003 021f 	and.w	r2, r3, #31
 8003874:	4907      	ldr	r1, [pc, #28]	; (8003894 <__NVIC_EnableIRQ+0x38>)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2001      	movs	r0, #1
 800387e:	fa00 f202 	lsl.w	r2, r0, r2
 8003882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000e100 	.word	0xe000e100

08003898 <__NVIC_SetPriority>:
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	71fb      	strb	r3, [r7, #7]
 80038a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	db0a      	blt.n	80038c2 <__NVIC_SetPriority+0x2a>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	490c      	ldr	r1, [pc, #48]	; (80038e4 <__NVIC_SetPriority+0x4c>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	0112      	lsls	r2, r2, #4
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	440b      	add	r3, r1
 80038bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80038c0:	e00a      	b.n	80038d8 <__NVIC_SetPriority+0x40>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <__NVIC_SetPriority+0x50>)
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	3b04      	subs	r3, #4
 80038d0:	0112      	lsls	r2, r2, #4
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	440b      	add	r3, r1
 80038d6:	761a      	strb	r2, [r3, #24]
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000e100 	.word	0xe000e100
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <NVIC_EncodePriority>:
 80038ec:	b480      	push	{r7}
 80038ee:	b089      	sub	sp, #36	; 0x24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f1c3 0307 	rsb	r3, r3, #7
 8003906:	2b04      	cmp	r3, #4
 8003908:	bf28      	it	cs
 800390a:	2304      	movcs	r3, #4
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3304      	adds	r3, #4
 8003912:	2b06      	cmp	r3, #6
 8003914:	d902      	bls.n	800391c <NVIC_EncodePriority+0x30>
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3b03      	subs	r3, #3
 800391a:	e000      	b.n	800391e <NVIC_EncodePriority+0x32>
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	f04f 32ff 	mov.w	r2, #4294967295
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43da      	mvns	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	401a      	ands	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	409a      	lsls	r2, r3
 8003934:	f04f 31ff 	mov.w	r1, #4294967295
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	fa01 f303 	lsl.w	r3, r1, r3
 800393e:	43d9      	mvns	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	400b      	ands	r3, r1
 8003944:	4313      	orrs	r3, r2
 8003946:	4618      	mov	r0, r3
 8003948:	3724      	adds	r7, #36	; 0x24
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <SysTick_Config>:
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003964:	d301      	bcc.n	800396a <SysTick_Config+0x16>
 8003966:	2301      	movs	r3, #1
 8003968:	e00f      	b.n	800398a <SysTick_Config+0x36>
 800396a:	4a0a      	ldr	r2, [pc, #40]	; (8003994 <SysTick_Config+0x40>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	6053      	str	r3, [r2, #4]
 8003972:	210f      	movs	r1, #15
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	f7ff ff8e 	bl	8003898 <__NVIC_SetPriority>
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <SysTick_Config+0x40>)
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <SysTick_Config+0x40>)
 8003984:	2207      	movs	r2, #7
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	2300      	movs	r3, #0
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	e000e010 	.word	0xe000e010

08003998 <HAL_NVIC_SetPriorityGrouping>:
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ff29 	bl	80037f8 <__NVIC_SetPriorityGrouping>
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_SetPriority>:
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	4603      	mov	r3, r0
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	f7ff ff3e 	bl	8003840 <__NVIC_GetPriorityGrouping>
 80039c4:	6178      	str	r0, [r7, #20]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	6978      	ldr	r0, [r7, #20]
 80039cc:	f7ff ff8e 	bl	80038ec <NVIC_EncodePriority>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff5d 	bl	8003898 <__NVIC_SetPriority>
 80039de:	bf00      	nop
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_EnableIRQ>:
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	71fb      	strb	r3, [r7, #7]
 80039f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff31 	bl	800385c <__NVIC_EnableIRQ>
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_SYSTICK_Config>:
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff ffa2 	bl	8003954 <SysTick_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_DMA_Init>:
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	f7ff feb6 	bl	8003798 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_DMA_Init+0x1c>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e099      	b.n	8003b6c <HAL_DMA_Init+0x150>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e00f      	b.n	8003a7a <HAL_DMA_Init+0x5e>
 8003a5a:	f7ff fe9d 	bl	8003798 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	d908      	bls.n	8003a7a <HAL_DMA_Init+0x5e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2203      	movs	r2, #3
 8003a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a76:	2303      	movs	r3, #3
 8003a78:	e078      	b.n	8003b6c <HAL_DMA_Init+0x150>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e8      	bne.n	8003a5a <HAL_DMA_Init+0x3e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <HAL_DMA_Init+0x158>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d107      	bne.n	8003ae4 <HAL_DMA_Init+0xc8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	4313      	orrs	r3, r2
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0307 	bic.w	r3, r3, #7
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d117      	bne.n	8003b3e <HAL_DMA_Init+0x122>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00e      	beq.n	8003b3e <HAL_DMA_Init+0x122>
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb01 	bl	8004128 <DMA_CheckFifoParam>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_DMA_Init+0x122>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e016      	b.n	8003b6c <HAL_DMA_Init+0x150>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	615a      	str	r2, [r3, #20]
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fab8 	bl	80040bc <DMA_CalcBaseAndBitshift>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	223f      	movs	r2, #63	; 0x3f
 8003b56:	409a      	lsls	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	f010803f 	.word	0xf010803f

08003b78 <HAL_DMA_Start_IT>:
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	2300      	movs	r3, #0
 8003b88:	75fb      	strb	r3, [r7, #23]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_DMA_Start_IT+0x26>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e040      	b.n	8003c20 <HAL_DMA_Start_IT+0xa8>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d12f      	bne.n	8003c12 <HAL_DMA_Start_IT+0x9a>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fa4a 	bl	8004060 <DMA_SetConfig>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	223f      	movs	r2, #63	; 0x3f
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0216 	orr.w	r2, r2, #22
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_DMA_Start_IT+0x88>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0208 	orr.w	r2, r2, #8
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e005      	b.n	8003c1e <HAL_DMA_Start_IT+0xa6>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	75fb      	strb	r3, [r7, #23]
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_DMA_Abort>:
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	f7ff fdaf 	bl	8003798 <HAL_GetTick>
 8003c3a:	60b8      	str	r0, [r7, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d008      	beq.n	8003c5a <HAL_DMA_Abort+0x32>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003c56:	2301      	movs	r3, #1
 8003c58:	e052      	b.n	8003d00 <HAL_DMA_Abort+0xd8>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0216 	bic.w	r2, r2, #22
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c78:	615a      	str	r2, [r3, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d103      	bne.n	8003c8a <HAL_DMA_Abort+0x62>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <HAL_DMA_Abort+0x72>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0208 	bic.w	r2, r2, #8
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0201 	bic.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e013      	b.n	8003cd4 <HAL_DMA_Abort+0xac>
 8003cac:	f7ff fd74 	bl	8003798 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_DMA_Abort+0xac>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e015      	b.n	8003d00 <HAL_DMA_Abort+0xd8>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e4      	bne.n	8003cac <HAL_DMA_Abort+0x84>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce6:	223f      	movs	r2, #63	; 0x3f
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003cfe:	2300      	movs	r3, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_DMA_Abort_IT>:
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x1e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2280      	movs	r2, #128	; 0x80
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54
 8003d22:	2301      	movs	r3, #1
 8003d24:	e00c      	b.n	8003d40 <HAL_DMA_Abort_IT+0x38>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2205      	movs	r2, #5
 8003d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_DMA_IRQHandler>:
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	4b8e      	ldr	r3, [pc, #568]	; (8003f94 <HAL_DMA_IRQHandler+0x248>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a8e      	ldr	r2, [pc, #568]	; (8003f98 <HAL_DMA_IRQHandler+0x24c>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	2208      	movs	r2, #8
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01a      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x6c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x6c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	2208      	movs	r2, #8
 8003da6:	409a      	lsls	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d012      	beq.n	8003dee <HAL_DMA_IRQHandler+0xa2>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_DMA_IRQHandler+0xa2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	2201      	movs	r2, #1
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f043 0202 	orr.w	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2204      	movs	r2, #4
 8003df4:	409a      	lsls	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d012      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	2204      	movs	r2, #4
 8003e12:	409a      	lsls	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	2210      	movs	r2, #16
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d043      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03c      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e46:	2210      	movs	r2, #16
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	609a      	str	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d018      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x142>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d108      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x130>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d024      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
 8003e7a:	e01f      	b.n	8003ebc <HAL_DMA_IRQHandler+0x170>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01b      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
 8003e8c:	e016      	b.n	8003ebc <HAL_DMA_IRQHandler+0x170>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_DMA_IRQHandler+0x160>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0208 	bic.w	r2, r2, #8
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 808f 	beq.w	8003fec <HAL_DMA_IRQHandler+0x2a0>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8087 	beq.w	8003fec <HAL_DMA_IRQHandler+0x2a0>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	609a      	str	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b05      	cmp	r3, #5
 8003ef4:	d136      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x218>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0216 	bic.w	r2, r2, #22
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f14:	615a      	str	r2, [r3, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x1da>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x1ea>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0208 	bic.w	r2, r2, #8
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	223f      	movs	r2, #63	; 0x3f
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	609a      	str	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d07e      	beq.n	8004058 <HAL_DMA_IRQHandler+0x30c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
 8003f62:	e079      	b.n	8004058 <HAL_DMA_IRQHandler+0x30c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01d      	beq.n	8003fae <HAL_DMA_IRQHandler+0x262>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10d      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x250>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d031      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
 8003f90:	e02c      	b.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
 8003f92:	bf00      	nop
 8003f94:	20000004 	.word	0x20000004
 8003f98:	1b4e81b5 	.word	0x1b4e81b5
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d023      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
 8003fac:	e01e      	b.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10f      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x290>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0210 	bic.w	r2, r2, #16
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d032      	beq.n	800405a <HAL_DMA_IRQHandler+0x30e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2fa>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2205      	movs	r2, #5
 8004004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	3301      	adds	r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	429a      	cmp	r2, r3
 8004022:	d307      	bcc.n	8004034 <HAL_DMA_IRQHandler+0x2e8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f2      	bne.n	8004018 <HAL_DMA_IRQHandler+0x2cc>
 8004032:	e000      	b.n	8004036 <HAL_DMA_IRQHandler+0x2ea>
 8004034:	bf00      	nop
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_DMA_IRQHandler+0x30e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
 8004056:	e000      	b.n	800405a <HAL_DMA_IRQHandler+0x30e>
 8004058:	bf00      	nop
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <DMA_SetConfig>:
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d108      	bne.n	80040a0 <DMA_SetConfig+0x40>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	609a      	str	r2, [r3, #8]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	e007      	b.n	80040b0 <DMA_SetConfig+0x50>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <DMA_CalcBaseAndBitshift>:
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	3b10      	subs	r3, #16
 80040cc:	4a14      	ldr	r2, [pc, #80]	; (8004120 <DMA_CalcBaseAndBitshift+0x64>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	4a13      	ldr	r2, [pc, #76]	; (8004124 <DMA_CalcBaseAndBitshift+0x68>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d909      	bls.n	80040fe <DMA_CalcBaseAndBitshift+0x42>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	659a      	str	r2, [r3, #88]	; 0x58
 80040fc:	e007      	b.n	800410e <DMA_CalcBaseAndBitshift+0x52>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6593      	str	r3, [r2, #88]	; 0x58
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	aaaaaaab 	.word	0xaaaaaaab
 8004124:	0800a598 	.word	0x0800a598

08004128 <DMA_CheckFifoParam>:
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	2300      	movs	r3, #0
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d11f      	bne.n	8004182 <DMA_CheckFifoParam+0x5a>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d856      	bhi.n	80041f6 <DMA_CheckFifoParam+0xce>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <DMA_CheckFifoParam+0x28>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004161 	.word	0x08004161
 8004154:	08004173 	.word	0x08004173
 8004158:	08004161 	.word	0x08004161
 800415c:	080041f7 	.word	0x080041f7
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d046      	beq.n	80041fa <DMA_CheckFifoParam+0xd2>
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e043      	b.n	80041fa <DMA_CheckFifoParam+0xd2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800417a:	d140      	bne.n	80041fe <DMA_CheckFifoParam+0xd6>
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	e03d      	b.n	80041fe <DMA_CheckFifoParam+0xd6>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418a:	d121      	bne.n	80041d0 <DMA_CheckFifoParam+0xa8>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d837      	bhi.n	8004202 <DMA_CheckFifoParam+0xda>
 8004192:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <DMA_CheckFifoParam+0x70>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041af 	.word	0x080041af
 80041a0:	080041a9 	.word	0x080041a9
 80041a4:	080041c1 	.word	0x080041c1
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
 80041ac:	e030      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d025      	beq.n	8004206 <DMA_CheckFifoParam+0xde>
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
 80041be:	e022      	b.n	8004206 <DMA_CheckFifoParam+0xde>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041c8:	d11f      	bne.n	800420a <DMA_CheckFifoParam+0xe2>
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
 80041ce:	e01c      	b.n	800420a <DMA_CheckFifoParam+0xe2>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d903      	bls.n	80041de <DMA_CheckFifoParam+0xb6>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d003      	beq.n	80041e4 <DMA_CheckFifoParam+0xbc>
 80041dc:	e018      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e015      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <DMA_CheckFifoParam+0xe6>
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	e00b      	b.n	800420e <DMA_CheckFifoParam+0xe6>
 80041f6:	bf00      	nop
 80041f8:	e00a      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
 80041fa:	bf00      	nop
 80041fc:	e008      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
 80041fe:	bf00      	nop
 8004200:	e006      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
 8004202:	bf00      	nop
 8004204:	e004      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
 800420e:	bf00      	nop
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop

08004220 <HAL_GPIO_Init>:
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	; 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	e159      	b.n	80044f0 <HAL_GPIO_Init+0x2d0>
 800423c:	2201      	movs	r2, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	429a      	cmp	r2, r3
 8004256:	f040 8148 	bne.w	80044ea <HAL_GPIO_Init+0x2ca>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d005      	beq.n	8004272 <HAL_GPIO_Init+0x52>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d130      	bne.n	80042d4 <HAL_GPIO_Init+0xb4>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	2203      	movs	r2, #3
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4013      	ands	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	609a      	str	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	2201      	movs	r2, #1
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 0201 	and.w	r2, r3, #1
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d017      	beq.n	8004310 <HAL_GPIO_Init+0xf0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	60da      	str	r2, [r3, #12]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d123      	bne.n	8004364 <HAL_GPIO_Init+0x144>
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	08da      	lsrs	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3208      	adds	r2, #8
 8004324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	220f      	movs	r2, #15
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	08da      	lsrs	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3208      	adds	r2, #8
 800435e:	69b9      	ldr	r1, [r7, #24]
 8004360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	2203      	movs	r2, #3
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0203 	and.w	r2, r3, #3
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80a2 	beq.w	80044ea <HAL_GPIO_Init+0x2ca>
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	4b57      	ldr	r3, [pc, #348]	; (8004508 <HAL_GPIO_Init+0x2e8>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	4a56      	ldr	r2, [pc, #344]	; (8004508 <HAL_GPIO_Init+0x2e8>)
 80043b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b4:	6453      	str	r3, [r2, #68]	; 0x44
 80043b6:	4b54      	ldr	r3, [pc, #336]	; (8004508 <HAL_GPIO_Init+0x2e8>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a52      	ldr	r2, [pc, #328]	; (800450c <HAL_GPIO_Init+0x2ec>)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	089b      	lsrs	r3, r3, #2
 80043c8:	3302      	adds	r3, #2
 80043ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	220f      	movs	r2, #15
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a49      	ldr	r2, [pc, #292]	; (8004510 <HAL_GPIO_Init+0x2f0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d019      	beq.n	8004422 <HAL_GPIO_Init+0x202>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a48      	ldr	r2, [pc, #288]	; (8004514 <HAL_GPIO_Init+0x2f4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <HAL_GPIO_Init+0x1fe>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a47      	ldr	r2, [pc, #284]	; (8004518 <HAL_GPIO_Init+0x2f8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00d      	beq.n	800441a <HAL_GPIO_Init+0x1fa>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a46      	ldr	r2, [pc, #280]	; (800451c <HAL_GPIO_Init+0x2fc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <HAL_GPIO_Init+0x1f6>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a45      	ldr	r2, [pc, #276]	; (8004520 <HAL_GPIO_Init+0x300>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d101      	bne.n	8004412 <HAL_GPIO_Init+0x1f2>
 800440e:	2304      	movs	r3, #4
 8004410:	e008      	b.n	8004424 <HAL_GPIO_Init+0x204>
 8004412:	2307      	movs	r3, #7
 8004414:	e006      	b.n	8004424 <HAL_GPIO_Init+0x204>
 8004416:	2303      	movs	r3, #3
 8004418:	e004      	b.n	8004424 <HAL_GPIO_Init+0x204>
 800441a:	2302      	movs	r3, #2
 800441c:	e002      	b.n	8004424 <HAL_GPIO_Init+0x204>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <HAL_GPIO_Init+0x204>
 8004422:	2300      	movs	r3, #0
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	f002 0203 	and.w	r2, r2, #3
 800442a:	0092      	lsls	r2, r2, #2
 800442c:	4093      	lsls	r3, r2
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	4935      	ldr	r1, [pc, #212]	; (800450c <HAL_GPIO_Init+0x2ec>)
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	089b      	lsrs	r3, r3, #2
 800443a:	3302      	adds	r3, #2
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004442:	4b38      	ldr	r3, [pc, #224]	; (8004524 <HAL_GPIO_Init+0x304>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	43db      	mvns	r3, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4013      	ands	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_Init+0x246>
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	4a2f      	ldr	r2, [pc, #188]	; (8004524 <HAL_GPIO_Init+0x304>)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	6093      	str	r3, [r2, #8]
 800446c:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <HAL_GPIO_Init+0x304>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_GPIO_Init+0x270>
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	4a24      	ldr	r2, [pc, #144]	; (8004524 <HAL_GPIO_Init+0x304>)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	60d3      	str	r3, [r2, #12]
 8004496:	4b23      	ldr	r3, [pc, #140]	; (8004524 <HAL_GPIO_Init+0x304>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	43db      	mvns	r3, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4013      	ands	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_Init+0x29a>
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <HAL_GPIO_Init+0x304>)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	6053      	str	r3, [r2, #4]
 80044c0:	4b18      	ldr	r3, [pc, #96]	; (8004524 <HAL_GPIO_Init+0x304>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_GPIO_Init+0x2c4>
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	4a0f      	ldr	r2, [pc, #60]	; (8004524 <HAL_GPIO_Init+0x304>)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	3301      	adds	r3, #1
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2b0f      	cmp	r3, #15
 80044f4:	f67f aea2 	bls.w	800423c <HAL_GPIO_Init+0x1c>
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	3724      	adds	r7, #36	; 0x24
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
 800450c:	40013800 	.word	0x40013800
 8004510:	40020000 	.word	0x40020000
 8004514:	40020400 	.word	0x40020400
 8004518:	40020800 	.word	0x40020800
 800451c:	40020c00 	.word	0x40020c00
 8004520:	40021000 	.word	0x40021000
 8004524:	40013c00 	.word	0x40013c00

08004528 <HAL_GPIO_WritePin>:
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	807b      	strh	r3, [r7, #2]
 8004534:	4613      	mov	r3, r2
 8004536:	707b      	strb	r3, [r7, #1]
 8004538:	787b      	ldrb	r3, [r7, #1]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_GPIO_WritePin+0x1e>
 800453e:	887a      	ldrh	r2, [r7, #2]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	619a      	str	r2, [r3, #24]
 8004544:	e003      	b.n	800454e <HAL_GPIO_WritePin+0x26>
 8004546:	887b      	ldrh	r3, [r7, #2]
 8004548:	041a      	lsls	r2, r3, #16
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	619a      	str	r2, [r3, #24]
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_GPIO_TogglePin>:
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	807b      	strh	r3, [r7, #2]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	887a      	ldrh	r2, [r7, #2]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4013      	ands	r3, r2
 8004572:	041a      	lsls	r2, r3, #16
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	43d9      	mvns	r1, r3
 8004578:	887b      	ldrh	r3, [r7, #2]
 800457a:	400b      	ands	r3, r1
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	619a      	str	r2, [r3, #24]
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_GPIO_EXTI_IRQHandler>:
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	80fb      	strh	r3, [r7, #6]
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d006      	beq.n	80045b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80045a6:	4a05      	ldr	r2, [pc, #20]	; (80045bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	6153      	str	r3, [r2, #20]
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fc fda4 	bl	80010fc <HAL_GPIO_EXTI_Callback>
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40013c00 	.word	0x40013c00

080045c0 <HAL_RCC_OscConfig>:
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_OscConfig+0x12>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e267      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d075      	beq.n	80046ca <HAL_RCC_OscConfig+0x10a>
 80045de:	4b88      	ldr	r3, [pc, #544]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d00c      	beq.n	8004604 <HAL_RCC_OscConfig+0x44>
 80045ea:	4b85      	ldr	r3, [pc, #532]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d112      	bne.n	800461c <HAL_RCC_OscConfig+0x5c>
 80045f6:	4b82      	ldr	r3, [pc, #520]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004602:	d10b      	bne.n	800461c <HAL_RCC_OscConfig+0x5c>
 8004604:	4b7e      	ldr	r3, [pc, #504]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d05b      	beq.n	80046c8 <HAL_RCC_OscConfig+0x108>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d157      	bne.n	80046c8 <HAL_RCC_OscConfig+0x108>
 8004618:	2301      	movs	r3, #1
 800461a:	e242      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004624:	d106      	bne.n	8004634 <HAL_RCC_OscConfig+0x74>
 8004626:	4b76      	ldr	r3, [pc, #472]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a75      	ldr	r2, [pc, #468]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 800462c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e01d      	b.n	8004670 <HAL_RCC_OscConfig+0xb0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800463c:	d10c      	bne.n	8004658 <HAL_RCC_OscConfig+0x98>
 800463e:	4b70      	ldr	r3, [pc, #448]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a6f      	ldr	r2, [pc, #444]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 8004644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a6c      	ldr	r2, [pc, #432]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	e00b      	b.n	8004670 <HAL_RCC_OscConfig+0xb0>
 8004658:	4b69      	ldr	r3, [pc, #420]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a68      	ldr	r2, [pc, #416]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 800465e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4b66      	ldr	r3, [pc, #408]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a65      	ldr	r2, [pc, #404]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 800466a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d013      	beq.n	80046a0 <HAL_RCC_OscConfig+0xe0>
 8004678:	f7ff f88e 	bl	8003798 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0xd2>
 8004680:	f7ff f88a 	bl	8003798 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0xd2>
 800468e:	2303      	movs	r3, #3
 8004690:	e207      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 8004692:	4b5b      	ldr	r3, [pc, #364]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0xc0>
 800469e:	e014      	b.n	80046ca <HAL_RCC_OscConfig+0x10a>
 80046a0:	f7ff f87a 	bl	8003798 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0xfa>
 80046a8:	f7ff f876 	bl	8003798 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	; 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0xfa>
 80046b6:	2303      	movs	r3, #3
 80046b8:	e1f3      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 80046ba:	4b51      	ldr	r3, [pc, #324]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0xe8>
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x10a>
 80046c8:	bf00      	nop
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d063      	beq.n	800479e <HAL_RCC_OscConfig+0x1de>
 80046d6:	4b4a      	ldr	r3, [pc, #296]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <HAL_RCC_OscConfig+0x13a>
 80046e2:	4b47      	ldr	r3, [pc, #284]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d11c      	bne.n	8004728 <HAL_RCC_OscConfig+0x168>
 80046ee:	4b44      	ldr	r3, [pc, #272]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d116      	bne.n	8004728 <HAL_RCC_OscConfig+0x168>
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_RCC_OscConfig+0x152>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d001      	beq.n	8004712 <HAL_RCC_OscConfig+0x152>
 800470e:	2301      	movs	r3, #1
 8004710:	e1c7      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 8004712:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4937      	ldr	r1, [pc, #220]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]
 8004726:	e03a      	b.n	800479e <HAL_RCC_OscConfig+0x1de>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d020      	beq.n	8004772 <HAL_RCC_OscConfig+0x1b2>
 8004730:	4b34      	ldr	r3, [pc, #208]	; (8004804 <HAL_RCC_OscConfig+0x244>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f7ff f82f 	bl	8003798 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x190>
 800473e:	f7ff f82b 	bl	8003798 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x190>
 800474c:	2303      	movs	r3, #3
 800474e:	e1a8      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 8004750:	4b2b      	ldr	r3, [pc, #172]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x17e>
 800475c:	4b28      	ldr	r3, [pc, #160]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4925      	ldr	r1, [pc, #148]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 800476c:	4313      	orrs	r3, r2
 800476e:	600b      	str	r3, [r1, #0]
 8004770:	e015      	b.n	800479e <HAL_RCC_OscConfig+0x1de>
 8004772:	4b24      	ldr	r3, [pc, #144]	; (8004804 <HAL_RCC_OscConfig+0x244>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	f7ff f80e 	bl	8003798 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x1d2>
 8004780:	f7ff f80a 	bl	8003798 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x1d2>
 800478e:	2303      	movs	r3, #3
 8004790:	e187      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 8004792:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x1c0>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d036      	beq.n	8004818 <HAL_RCC_OscConfig+0x258>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d016      	beq.n	80047e0 <HAL_RCC_OscConfig+0x220>
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <HAL_RCC_OscConfig+0x248>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f7fe ffee 	bl	8003798 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x212>
 80047c0:	f7fe ffea 	bl	8003798 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x212>
 80047ce:	2303      	movs	r3, #3
 80047d0:	e167      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_OscConfig+0x240>)
 80047d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x200>
 80047de:	e01b      	b.n	8004818 <HAL_RCC_OscConfig+0x258>
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <HAL_RCC_OscConfig+0x248>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	f7fe ffd7 	bl	8003798 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]
 80047ec:	e00e      	b.n	800480c <HAL_RCC_OscConfig+0x24c>
 80047ee:	f7fe ffd3 	bl	8003798 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d907      	bls.n	800480c <HAL_RCC_OscConfig+0x24c>
 80047fc:	2303      	movs	r3, #3
 80047fe:	e150      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 8004800:	40023800 	.word	0x40023800
 8004804:	42470000 	.word	0x42470000
 8004808:	42470e80 	.word	0x42470e80
 800480c:	4b88      	ldr	r3, [pc, #544]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 800480e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1ea      	bne.n	80047ee <HAL_RCC_OscConfig+0x22e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8097 	beq.w	8004954 <HAL_RCC_OscConfig+0x394>
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]
 800482a:	4b81      	ldr	r3, [pc, #516]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10f      	bne.n	8004856 <HAL_RCC_OscConfig+0x296>
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	4b7d      	ldr	r3, [pc, #500]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a7c      	ldr	r2, [pc, #496]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 8004840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
 8004846:	4b7a      	ldr	r3, [pc, #488]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2301      	movs	r3, #1
 8004854:	75fb      	strb	r3, [r7, #23]
 8004856:	4b77      	ldr	r3, [pc, #476]	; (8004a34 <HAL_RCC_OscConfig+0x474>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d118      	bne.n	8004894 <HAL_RCC_OscConfig+0x2d4>
 8004862:	4b74      	ldr	r3, [pc, #464]	; (8004a34 <HAL_RCC_OscConfig+0x474>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a73      	ldr	r2, [pc, #460]	; (8004a34 <HAL_RCC_OscConfig+0x474>)
 8004868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	f7fe ff93 	bl	8003798 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x2c8>
 8004876:	f7fe ff8f 	bl	8003798 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x2c8>
 8004884:	2303      	movs	r3, #3
 8004886:	e10c      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 8004888:	4b6a      	ldr	r3, [pc, #424]	; (8004a34 <HAL_RCC_OscConfig+0x474>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x2b6>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d106      	bne.n	80048aa <HAL_RCC_OscConfig+0x2ea>
 800489c:	4b64      	ldr	r3, [pc, #400]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	4a63      	ldr	r2, [pc, #396]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	6713      	str	r3, [r2, #112]	; 0x70
 80048a8:	e01c      	b.n	80048e4 <HAL_RCC_OscConfig+0x324>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	d10c      	bne.n	80048cc <HAL_RCC_OscConfig+0x30c>
 80048b2:	4b5f      	ldr	r3, [pc, #380]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	4a5e      	ldr	r2, [pc, #376]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 80048b8:	f043 0304 	orr.w	r3, r3, #4
 80048bc:	6713      	str	r3, [r2, #112]	; 0x70
 80048be:	4b5c      	ldr	r3, [pc, #368]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	4a5b      	ldr	r2, [pc, #364]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ca:	e00b      	b.n	80048e4 <HAL_RCC_OscConfig+0x324>
 80048cc:	4b58      	ldr	r3, [pc, #352]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4a57      	ldr	r2, [pc, #348]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	6713      	str	r3, [r2, #112]	; 0x70
 80048d8:	4b55      	ldr	r3, [pc, #340]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048dc:	4a54      	ldr	r2, [pc, #336]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 80048de:	f023 0304 	bic.w	r3, r3, #4
 80048e2:	6713      	str	r3, [r2, #112]	; 0x70
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d015      	beq.n	8004918 <HAL_RCC_OscConfig+0x358>
 80048ec:	f7fe ff54 	bl	8003798 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]
 80048f2:	e00a      	b.n	800490a <HAL_RCC_OscConfig+0x34a>
 80048f4:	f7fe ff50 	bl	8003798 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x34a>
 8004906:	2303      	movs	r3, #3
 8004908:	e0cb      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 800490a:	4b49      	ldr	r3, [pc, #292]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0ee      	beq.n	80048f4 <HAL_RCC_OscConfig+0x334>
 8004916:	e014      	b.n	8004942 <HAL_RCC_OscConfig+0x382>
 8004918:	f7fe ff3e 	bl	8003798 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]
 800491e:	e00a      	b.n	8004936 <HAL_RCC_OscConfig+0x376>
 8004920:	f7fe ff3a 	bl	8003798 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f241 3288 	movw	r2, #5000	; 0x1388
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x376>
 8004932:	2303      	movs	r3, #3
 8004934:	e0b5      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 8004936:	4b3e      	ldr	r3, [pc, #248]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ee      	bne.n	8004920 <HAL_RCC_OscConfig+0x360>
 8004942:	7dfb      	ldrb	r3, [r7, #23]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d105      	bne.n	8004954 <HAL_RCC_OscConfig+0x394>
 8004948:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	4a38      	ldr	r2, [pc, #224]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 800494e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004952:	6413      	str	r3, [r2, #64]	; 0x40
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80a1 	beq.w	8004aa0 <HAL_RCC_OscConfig+0x4e0>
 800495e:	4b34      	ldr	r3, [pc, #208]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b08      	cmp	r3, #8
 8004968:	d05c      	beq.n	8004a24 <HAL_RCC_OscConfig+0x464>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d141      	bne.n	80049f6 <HAL_RCC_OscConfig+0x436>
 8004972:	4b31      	ldr	r3, [pc, #196]	; (8004a38 <HAL_RCC_OscConfig+0x478>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	f7fe ff0e 	bl	8003798 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x3d2>
 8004980:	f7fe ff0a 	bl	8003798 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x3d2>
 800498e:	2303      	movs	r3, #3
 8004990:	e087      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 8004992:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x3c0>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69da      	ldr	r2, [r3, #28]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	019b      	lsls	r3, r3, #6
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	3b01      	subs	r3, #1
 80049b8:	041b      	lsls	r3, r3, #16
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	061b      	lsls	r3, r3, #24
 80049c2:	491b      	ldr	r1, [pc, #108]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	604b      	str	r3, [r1, #4]
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <HAL_RCC_OscConfig+0x478>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	f7fe fee3 	bl	8003798 <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]
 80049d4:	e008      	b.n	80049e8 <HAL_RCC_OscConfig+0x428>
 80049d6:	f7fe fedf 	bl	8003798 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x428>
 80049e4:	2303      	movs	r3, #3
 80049e6:	e05c      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f0      	beq.n	80049d6 <HAL_RCC_OscConfig+0x416>
 80049f4:	e054      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4e0>
 80049f6:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <HAL_RCC_OscConfig+0x478>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f7fe fecc 	bl	8003798 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x456>
 8004a04:	f7fe fec8 	bl	8003798 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x456>
 8004a12:	2303      	movs	r3, #3
 8004a14:	e045      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_OscConfig+0x470>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1f0      	bne.n	8004a04 <HAL_RCC_OscConfig+0x444>
 8004a22:	e03d      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4e0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCC_OscConfig+0x47c>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e038      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40007000 	.word	0x40007000
 8004a38:	42470060 	.word	0x42470060
 8004a3c:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <HAL_RCC_OscConfig+0x4ec>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d028      	beq.n	8004a9c <HAL_RCC_OscConfig+0x4dc>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d121      	bne.n	8004a9c <HAL_RCC_OscConfig+0x4dc>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d11a      	bne.n	8004a9c <HAL_RCC_OscConfig+0x4dc>
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a72:	0192      	lsls	r2, r2, #6
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d111      	bne.n	8004a9c <HAL_RCC_OscConfig+0x4dc>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	3b01      	subs	r3, #1
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d107      	bne.n	8004a9c <HAL_RCC_OscConfig+0x4dc>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	061b      	lsls	r3, r3, #24
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x4e0>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4e2>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40023800 	.word	0x40023800

08004ab0 <HAL_RCC_ClockConfig>:
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x14>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0cc      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
 8004ac4:	4b68      	ldr	r3, [pc, #416]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d90c      	bls.n	8004aec <HAL_RCC_ClockConfig+0x3c>
 8004ad2:	4b65      	ldr	r3, [pc, #404]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	4b63      	ldr	r3, [pc, #396]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x3c>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0b8      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x8a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x60>
 8004b04:	4b59      	ldr	r3, [pc, #356]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	4a58      	ldr	r2, [pc, #352]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b0e:	6093      	str	r3, [r2, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x78>
 8004b1c:	4b53      	ldr	r3, [pc, #332]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a52      	ldr	r2, [pc, #328]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b26:	6093      	str	r3, [r2, #8]
 8004b28:	4b50      	ldr	r3, [pc, #320]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	494d      	ldr	r1, [pc, #308]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d044      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x120>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xae>
 8004b4e:	4b47      	ldr	r3, [pc, #284]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d119      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xde>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e07f      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d003      	beq.n	8004b6e <HAL_RCC_ClockConfig+0xbe>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xce>
 8004b6e:	4b3f      	ldr	r3, [pc, #252]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xde>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e06f      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
 8004b7e:	4b3b      	ldr	r3, [pc, #236]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xde>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e067      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
 8004b8e:	4b37      	ldr	r3, [pc, #220]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f023 0203 	bic.w	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4934      	ldr	r1, [pc, #208]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]
 8004ba0:	f7fe fdfa 	bl	8003798 <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCC_ClockConfig+0x10e>
 8004ba8:	f7fe fdf6 	bl	8003798 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_ClockConfig+0x10e>
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e04f      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 020c 	and.w	r2, r3, #12
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d1eb      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0xf8>
 8004bd0:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d20c      	bcs.n	8004bf8 <HAL_RCC_ClockConfig+0x148>
 8004bde:	4b22      	ldr	r3, [pc, #136]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x148>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e032      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x166>
 8004c04:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4916      	ldr	r1, [pc, #88]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x186>
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	490e      	ldr	r1, [pc, #56]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
 8004c36:	f000 f821 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	490a      	ldr	r1, [pc, #40]	; (8004c70 <HAL_RCC_ClockConfig+0x1c0>)
 8004c48:	5ccb      	ldrb	r3, [r1, r3]
 8004c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4e:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_ClockConfig+0x1c8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe fd5a 	bl	8003710 <HAL_InitTick>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40023c00 	.word	0x40023c00
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	0800a580 	.word	0x0800a580
 8004c74:	20000004 	.word	0x20000004
 8004c78:	20000008 	.word	0x20000008

08004c7c <HAL_RCC_GetSysClockFreq>:
 8004c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c80:	b094      	sub	sp, #80	; 0x50
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	2300      	movs	r3, #0
 8004c86:	647b      	str	r3, [r7, #68]	; 0x44
 8004c88:	2300      	movs	r3, #0
 8004c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c90:	2300      	movs	r3, #0
 8004c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c94:	4b79      	ldr	r3, [pc, #484]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d00d      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0x40>
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	f200 80e1 	bhi.w	8004e68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cae:	e0db      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cb0:	4b73      	ldr	r3, [pc, #460]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cb4:	e0db      	b.n	8004e6e <HAL_RCC_GetSysClockFreq+0x1f2>
 8004cb6:	4b73      	ldr	r3, [pc, #460]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cba:	e0d8      	b.n	8004e6e <HAL_RCC_GetSysClockFreq+0x1f2>
 8004cbc:	4b6f      	ldr	r3, [pc, #444]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc6:	4b6d      	ldr	r3, [pc, #436]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d063      	beq.n	8004d9a <HAL_RCC_GetSysClockFreq+0x11e>
 8004cd2:	4b6a      	ldr	r3, [pc, #424]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	2200      	movs	r2, #0
 8004cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cee:	4622      	mov	r2, r4
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f04f 0100 	mov.w	r1, #0
 8004cfa:	0159      	lsls	r1, r3, #5
 8004cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d00:	0150      	lsls	r0, r2, #5
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4621      	mov	r1, r4
 8004d08:	1a51      	subs	r1, r2, r1
 8004d0a:	6139      	str	r1, [r7, #16]
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d20:	4659      	mov	r1, fp
 8004d22:	018b      	lsls	r3, r1, #6
 8004d24:	4651      	mov	r1, sl
 8004d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	018a      	lsls	r2, r1, #6
 8004d2e:	4651      	mov	r1, sl
 8004d30:	ebb2 0801 	subs.w	r8, r2, r1
 8004d34:	4659      	mov	r1, fp
 8004d36:	eb63 0901 	sbc.w	r9, r3, r1
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d4e:	4690      	mov	r8, r2
 8004d50:	4699      	mov	r9, r3
 8004d52:	4623      	mov	r3, r4
 8004d54:	eb18 0303 	adds.w	r3, r8, r3
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	462b      	mov	r3, r5
 8004d5c:	eb49 0303 	adc.w	r3, r9, r3
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d6e:	4629      	mov	r1, r5
 8004d70:	024b      	lsls	r3, r1, #9
 8004d72:	4621      	mov	r1, r4
 8004d74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d78:	4621      	mov	r1, r4
 8004d7a:	024a      	lsls	r2, r1, #9
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d82:	2200      	movs	r2, #0
 8004d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d8c:	f7fb ff94 	bl	8000cb8 <__aeabi_uldivmod>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4613      	mov	r3, r2
 8004d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d98:	e058      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x1d0>
 8004d9a:	4b38      	ldr	r3, [pc, #224]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	099b      	lsrs	r3, r3, #6
 8004da0:	2200      	movs	r2, #0
 8004da2:	4618      	mov	r0, r3
 8004da4:	4611      	mov	r1, r2
 8004da6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004daa:	623b      	str	r3, [r7, #32]
 8004dac:	2300      	movs	r3, #0
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
 8004db0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004db4:	4642      	mov	r2, r8
 8004db6:	464b      	mov	r3, r9
 8004db8:	f04f 0000 	mov.w	r0, #0
 8004dbc:	f04f 0100 	mov.w	r1, #0
 8004dc0:	0159      	lsls	r1, r3, #5
 8004dc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dc6:	0150      	lsls	r0, r2, #5
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4641      	mov	r1, r8
 8004dce:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004de4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004de8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dec:	ebb2 040a 	subs.w	r4, r2, sl
 8004df0:	eb63 050b 	sbc.w	r5, r3, fp
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	00eb      	lsls	r3, r5, #3
 8004dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e02:	00e2      	lsls	r2, r4, #3
 8004e04:	4614      	mov	r4, r2
 8004e06:	461d      	mov	r5, r3
 8004e08:	4643      	mov	r3, r8
 8004e0a:	18e3      	adds	r3, r4, r3
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	464b      	mov	r3, r9
 8004e10:	eb45 0303 	adc.w	r3, r5, r3
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e22:	4629      	mov	r1, r5
 8004e24:	028b      	lsls	r3, r1, #10
 8004e26:	4621      	mov	r1, r4
 8004e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	028a      	lsls	r2, r1, #10
 8004e30:	4610      	mov	r0, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e36:	2200      	movs	r2, #0
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	61fa      	str	r2, [r7, #28]
 8004e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e40:	f7fb ff3a 	bl	8000cb8 <__aeabi_uldivmod>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4613      	mov	r3, r2
 8004e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	0c1b      	lsrs	r3, r3, #16
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	3301      	adds	r3, #1
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e66:	e002      	b.n	8004e6e <HAL_RCC_GetSysClockFreq+0x1f2>
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e6c:	bf00      	nop
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e70:	4618      	mov	r0, r3
 8004e72:	3750      	adds	r7, #80	; 0x50
 8004e74:	46bd      	mov	sp, r7
 8004e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	00f42400 	.word	0x00f42400
 8004e84:	007a1200 	.word	0x007a1200

08004e88 <HAL_RCC_GetHCLKFreq>:
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	20000004 	.word	0x20000004

08004ea0 <HAL_RCC_GetPCLK1Freq>:
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	f7ff fff0 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	0a9b      	lsrs	r3, r3, #10
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4903      	ldr	r1, [pc, #12]	; (8004ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	0800a590 	.word	0x0800a590

08004ec8 <HAL_RCC_GetPCLK2Freq>:
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	f7ff ffdc 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	0b5b      	lsrs	r3, r3, #13
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	4903      	ldr	r1, [pc, #12]	; (8004eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ede:	5ccb      	ldrb	r3, [r1, r3]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	0800a590 	.word	0x0800a590

08004ef0 <HAL_TIM_Base_Init>:
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_TIM_Base_Init+0x12>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e041      	b.n	8004f86 <HAL_TIM_Base_Init+0x96>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_TIM_Base_Init+0x2c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fe f93e 	bl	8003198 <HAL_TIM_Base_MspInit>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f000 fc28 	bl	8005784 <TIM_Base_SetConfig>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f84:	2300      	movs	r3, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <HAL_TIM_Base_Start_IT>:
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d001      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x18>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e044      	b.n	8005032 <HAL_TIM_Base_Start_IT+0xa2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	60da      	str	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1e      	ldr	r2, [pc, #120]	; (8005040 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d018      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x6c>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd2:	d013      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x6c>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1a      	ldr	r2, [pc, #104]	; (8005044 <HAL_TIM_Base_Start_IT+0xb4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00e      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x6c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a19      	ldr	r2, [pc, #100]	; (8005048 <HAL_TIM_Base_Start_IT+0xb8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x6c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a17      	ldr	r2, [pc, #92]	; (800504c <HAL_TIM_Base_Start_IT+0xbc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x6c>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a16      	ldr	r2, [pc, #88]	; (8005050 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d111      	bne.n	8005020 <HAL_TIM_Base_Start_IT+0x90>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d010      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0xa0>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e007      	b.n	8005030 <HAL_TIM_Base_Start_IT+0xa0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	2300      	movs	r3, #0
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40010000 	.word	0x40010000
 8005044:	40000400 	.word	0x40000400
 8005048:	40000800 	.word	0x40000800
 800504c:	40000c00 	.word	0x40000c00
 8005050:	40014000 	.word	0x40014000

08005054 <HAL_TIM_PWM_Init>:
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_TIM_PWM_Init+0x12>
 8005062:	2301      	movs	r3, #1
 8005064:	e041      	b.n	80050ea <HAL_TIM_PWM_Init+0x96>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_TIM_PWM_Init+0x2c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fd ffc8 	bl	8003010 <HAL_TIM_PWM_MspInit>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3304      	adds	r3, #4
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f000 fb76 	bl	8005784 <TIM_Base_SetConfig>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050e8:	2300      	movs	r3, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <HAL_TIM_PWM_Start>:
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <HAL_TIM_PWM_Start+0x24>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e022      	b.n	800515e <HAL_TIM_PWM_Start+0x6a>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b04      	cmp	r3, #4
 800511c:	d109      	bne.n	8005132 <HAL_TIM_PWM_Start+0x3e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b01      	cmp	r3, #1
 8005128:	bf14      	ite	ne
 800512a:	2301      	movne	r3, #1
 800512c:	2300      	moveq	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e015      	b.n	800515e <HAL_TIM_PWM_Start+0x6a>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b08      	cmp	r3, #8
 8005136:	d109      	bne.n	800514c <HAL_TIM_PWM_Start+0x58>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	e008      	b.n	800515e <HAL_TIM_PWM_Start+0x6a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_TIM_PWM_Start+0x72>
 8005162:	2301      	movs	r3, #1
 8005164:	e068      	b.n	8005238 <HAL_TIM_PWM_Start+0x144>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <HAL_TIM_PWM_Start+0x82>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005174:	e013      	b.n	800519e <HAL_TIM_PWM_Start+0xaa>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b04      	cmp	r3, #4
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0x92>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005184:	e00b      	b.n	800519e <HAL_TIM_PWM_Start+0xaa>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0xa2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005194:	e003      	b.n	800519e <HAL_TIM_PWM_Start+0xaa>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2201      	movs	r2, #1
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fcf8 	bl	8005b9c <TIM_CCxChannelCmd>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a23      	ldr	r2, [pc, #140]	; (8005240 <HAL_TIM_PWM_Start+0x14c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d107      	bne.n	80051c6 <HAL_TIM_PWM_Start+0xd2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051c4:	645a      	str	r2, [r3, #68]	; 0x44
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <HAL_TIM_PWM_Start+0x14c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d018      	beq.n	8005202 <HAL_TIM_PWM_Start+0x10e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d8:	d013      	beq.n	8005202 <HAL_TIM_PWM_Start+0x10e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a19      	ldr	r2, [pc, #100]	; (8005244 <HAL_TIM_PWM_Start+0x150>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00e      	beq.n	8005202 <HAL_TIM_PWM_Start+0x10e>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a17      	ldr	r2, [pc, #92]	; (8005248 <HAL_TIM_PWM_Start+0x154>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d009      	beq.n	8005202 <HAL_TIM_PWM_Start+0x10e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a16      	ldr	r2, [pc, #88]	; (800524c <HAL_TIM_PWM_Start+0x158>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d004      	beq.n	8005202 <HAL_TIM_PWM_Start+0x10e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a14      	ldr	r2, [pc, #80]	; (8005250 <HAL_TIM_PWM_Start+0x15c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d111      	bne.n	8005226 <HAL_TIM_PWM_Start+0x132>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b06      	cmp	r3, #6
 8005212:	d010      	beq.n	8005236 <HAL_TIM_PWM_Start+0x142>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e007      	b.n	8005236 <HAL_TIM_PWM_Start+0x142>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	2300      	movs	r3, #0
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40010000 	.word	0x40010000
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	40000c00 	.word	0x40000c00
 8005250:	40014000 	.word	0x40014000

08005254 <HAL_TIM_Encoder_Init>:
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_TIM_Encoder_Init+0x14>
 8005264:	2301      	movs	r3, #1
 8005266:	e097      	b.n	8005398 <HAL_TIM_Encoder_Init+0x144>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d106      	bne.n	8005282 <HAL_TIM_Encoder_Init+0x2e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fd fefd 	bl	800307c <HAL_TIM_Encoder_MspInit>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005298:	f023 0307 	bic.w	r3, r3, #7
 800529c:	6093      	str	r3, [r2, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3304      	adds	r3, #4
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f000 fa6b 	bl	8005784 <TIM_Base_SetConfig>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	4313      	orrs	r3, r2
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052f4:	f023 030c 	bic.w	r3, r3, #12
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	4313      	orrs	r3, r2
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	011a      	lsls	r2, r3, #4
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	031b      	lsls	r3, r3, #12
 8005324:	4313      	orrs	r3, r2
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	4313      	orrs	r3, r2
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	609a      	str	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	619a      	str	r2, [r3, #24]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	621a      	str	r2, [r3, #32]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005396:	2300      	movs	r3, #0
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_IRQHandler>:
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0x5c>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0x5c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0202 	mvn.w	r2, #2
 80053cc:	611a      	str	r2, [r3, #16]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	771a      	strb	r2, [r3, #28]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0x4a>
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f9b0 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0x56>
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f9a2 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f9b3 	bl	800575c <HAL_TIM_PWM_PulseFinishedCallback>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b04      	cmp	r3, #4
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0xb0>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b04      	cmp	r3, #4
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0xb0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0204 	mvn.w	r2, #4
 8005420:	611a      	str	r2, [r3, #16]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2202      	movs	r2, #2
 8005426:	771a      	strb	r2, [r3, #28]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x9e>
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f986 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0xaa>
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f978 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f989 	bl	800575c <HAL_TIM_PWM_PulseFinishedCallback>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b08      	cmp	r3, #8
 800545c:	d122      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x104>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d11b      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x104>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0208 	mvn.w	r2, #8
 8005474:	611a      	str	r2, [r3, #16]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2204      	movs	r2, #4
 800547a:	771a      	strb	r2, [r3, #28]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_TIM_IRQHandler+0xf2>
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f95c 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 8005490:	e005      	b.n	800549e <HAL_TIM_IRQHandler+0xfe>
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f94e 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f95f 	bl	800575c <HAL_TIM_PWM_PulseFinishedCallback>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x158>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x158>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0210 	mvn.w	r2, #16
 80054c8:	611a      	str	r2, [r3, #16]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2208      	movs	r2, #8
 80054ce:	771a      	strb	r2, [r3, #28]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x146>
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f932 	bl	8005748 <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0x152>
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f924 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f935 	bl	800575c <HAL_TIM_PWM_PulseFinishedCallback>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	d10e      	bne.n	8005524 <HAL_TIM_IRQHandler+0x184>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b01      	cmp	r3, #1
 8005512:	d107      	bne.n	8005524 <HAL_TIM_IRQHandler+0x184>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0201 	mvn.w	r2, #1
 800551c:	611a      	str	r2, [r3, #16]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fb fe8c 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	2b80      	cmp	r3, #128	; 0x80
 8005530:	d10e      	bne.n	8005550 <HAL_TIM_IRQHandler+0x1b0>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	2b80      	cmp	r3, #128	; 0x80
 800553e:	d107      	bne.n	8005550 <HAL_TIM_IRQHandler+0x1b0>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005548:	611a      	str	r2, [r3, #16]
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fbc4 	bl	8005cd8 <HAL_TIMEx_BreakCallback>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d10e      	bne.n	800557c <HAL_TIM_IRQHandler+0x1dc>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d107      	bne.n	800557c <HAL_TIM_IRQHandler+0x1dc>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005574:	611a      	str	r2, [r3, #16]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f8fa 	bl	8005770 <HAL_TIM_TriggerCallback>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b20      	cmp	r3, #32
 8005588:	d10e      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x208>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b20      	cmp	r3, #32
 8005596:	d107      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x208>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0220 	mvn.w	r2, #32
 80055a0:	611a      	str	r2, [r3, #16]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fb8e 	bl	8005cc4 <HAL_TIMEx_CommutCallback>
 80055a8:	bf00      	nop
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_TIM_PWM_ConfigChannel>:
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	2300      	movs	r3, #0
 80055be:	75fb      	strb	r3, [r7, #23]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e0ae      	b.n	800572c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	f200 809f 	bhi.w	800571c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	08005619 	.word	0x08005619
 80055e8:	0800571d 	.word	0x0800571d
 80055ec:	0800571d 	.word	0x0800571d
 80055f0:	0800571d 	.word	0x0800571d
 80055f4:	08005659 	.word	0x08005659
 80055f8:	0800571d 	.word	0x0800571d
 80055fc:	0800571d 	.word	0x0800571d
 8005600:	0800571d 	.word	0x0800571d
 8005604:	0800569b 	.word	0x0800569b
 8005608:	0800571d 	.word	0x0800571d
 800560c:	0800571d 	.word	0x0800571d
 8005610:	0800571d 	.word	0x0800571d
 8005614:	080056db 	.word	0x080056db
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f930 	bl	8005884 <TIM_OC1_SetConfig>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0208 	orr.w	r2, r2, #8
 8005632:	619a      	str	r2, [r3, #24]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0204 	bic.w	r2, r2, #4
 8005642:	619a      	str	r2, [r3, #24]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6999      	ldr	r1, [r3, #24]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	619a      	str	r2, [r3, #24]
 8005656:	e064      	b.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 f976 	bl	8005950 <TIM_OC2_SetConfig>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005672:	619a      	str	r2, [r3, #24]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005682:	619a      	str	r2, [r3, #24]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6999      	ldr	r1, [r3, #24]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	021a      	lsls	r2, r3, #8
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	619a      	str	r2, [r3, #24]
 8005698:	e043      	b.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x172>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 f9c1 	bl	8005a28 <TIM_OC3_SetConfig>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0208 	orr.w	r2, r2, #8
 80056b4:	61da      	str	r2, [r3, #28]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0204 	bic.w	r2, r2, #4
 80056c4:	61da      	str	r2, [r3, #28]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69d9      	ldr	r1, [r3, #28]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	61da      	str	r2, [r3, #28]
 80056d8:	e023      	b.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x172>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fa0b 	bl	8005afc <TIM_OC4_SetConfig>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f4:	61da      	str	r2, [r3, #28]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005704:	61da      	str	r2, [r3, #28]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69d9      	ldr	r1, [r3, #28]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	021a      	lsls	r2, r3, #8
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	61da      	str	r2, [r3, #28]
 800571a:	e002      	b.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x172>
 800571c:	2301      	movs	r3, #1
 800571e:	75fb      	strb	r3, [r7, #23]
 8005720:	bf00      	nop
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_TIM_OC_DelayElapsedCallback>:
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_TIM_IC_CaptureCallback>:
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIM_PWM_PulseFinishedCallback>:
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_TIM_TriggerCallback>:
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <TIM_Base_SetConfig>:
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a34      	ldr	r2, [pc, #208]	; (8005868 <TIM_Base_SetConfig+0xe4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00f      	beq.n	80057bc <TIM_Base_SetConfig+0x38>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a2:	d00b      	beq.n	80057bc <TIM_Base_SetConfig+0x38>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a31      	ldr	r2, [pc, #196]	; (800586c <TIM_Base_SetConfig+0xe8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d007      	beq.n	80057bc <TIM_Base_SetConfig+0x38>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a30      	ldr	r2, [pc, #192]	; (8005870 <TIM_Base_SetConfig+0xec>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_Base_SetConfig+0x38>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a2f      	ldr	r2, [pc, #188]	; (8005874 <TIM_Base_SetConfig+0xf0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d108      	bne.n	80057ce <TIM_Base_SetConfig+0x4a>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a25      	ldr	r2, [pc, #148]	; (8005868 <TIM_Base_SetConfig+0xe4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d01b      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057dc:	d017      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a22      	ldr	r2, [pc, #136]	; (800586c <TIM_Base_SetConfig+0xe8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a21      	ldr	r2, [pc, #132]	; (8005870 <TIM_Base_SetConfig+0xec>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00f      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a20      	ldr	r2, [pc, #128]	; (8005874 <TIM_Base_SetConfig+0xf0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00b      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <TIM_Base_SetConfig+0xf4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d007      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1e      	ldr	r2, [pc, #120]	; (800587c <TIM_Base_SetConfig+0xf8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d003      	beq.n	800580e <TIM_Base_SetConfig+0x8a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1d      	ldr	r2, [pc, #116]	; (8005880 <TIM_Base_SetConfig+0xfc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d108      	bne.n	8005820 <TIM_Base_SetConfig+0x9c>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	62da      	str	r2, [r3, #44]	; 0x2c
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	629a      	str	r2, [r3, #40]	; 0x28
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a08      	ldr	r2, [pc, #32]	; (8005868 <TIM_Base_SetConfig+0xe4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d103      	bne.n	8005854 <TIM_Base_SetConfig+0xd0>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	615a      	str	r2, [r3, #20]
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40010000 	.word	0x40010000
 800586c:	40000400 	.word	0x40000400
 8005870:	40000800 	.word	0x40000800
 8005874:	40000c00 	.word	0x40000c00
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800

08005884 <TIM_OC1_SetConfig>:
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f023 0201 	bic.w	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	621a      	str	r2, [r3, #32]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f023 0302 	bic.w	r3, r3, #2
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a1c      	ldr	r2, [pc, #112]	; (800594c <TIM_OC1_SetConfig+0xc8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10c      	bne.n	80058fa <TIM_OC1_SetConfig+0x76>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0308 	bic.w	r3, r3, #8
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f023 0304 	bic.w	r3, r3, #4
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a13      	ldr	r2, [pc, #76]	; (800594c <TIM_OC1_SetConfig+0xc8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d111      	bne.n	8005926 <TIM_OC1_SetConfig+0xa2>
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	619a      	str	r2, [r3, #24]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	635a      	str	r2, [r3, #52]	; 0x34
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40010000 	.word	0x40010000

08005950 <TIM_OC2_SetConfig>:
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f023 0210 	bic.w	r2, r3, #16
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	621a      	str	r2, [r3, #32]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0320 	bic.w	r3, r3, #32
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a1e      	ldr	r2, [pc, #120]	; (8005a24 <TIM_OC2_SetConfig+0xd4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10d      	bne.n	80059cc <TIM_OC2_SetConfig+0x7c>
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a15      	ldr	r2, [pc, #84]	; (8005a24 <TIM_OC2_SetConfig+0xd4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d113      	bne.n	80059fc <TIM_OC2_SetConfig+0xac>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e2:	613b      	str	r3, [r7, #16]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	619a      	str	r2, [r3, #24]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	621a      	str	r2, [r3, #32]
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40010000 	.word	0x40010000

08005a28 <TIM_OC3_SetConfig>:
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a1d      	ldr	r2, [pc, #116]	; (8005af8 <TIM_OC3_SetConfig+0xd0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d10d      	bne.n	8005aa2 <TIM_OC3_SetConfig+0x7a>
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a14      	ldr	r2, [pc, #80]	; (8005af8 <TIM_OC3_SetConfig+0xd0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d113      	bne.n	8005ad2 <TIM_OC3_SetConfig+0xaa>
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ab8:	613b      	str	r3, [r7, #16]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	605a      	str	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	61da      	str	r2, [r3, #28]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	621a      	str	r2, [r3, #32]
 8005aec:	bf00      	nop
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	40010000 	.word	0x40010000

08005afc <TIM_OC4_SetConfig>:
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	621a      	str	r2, [r3, #32]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	031b      	lsls	r3, r3, #12
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a10      	ldr	r2, [pc, #64]	; (8005b98 <TIM_OC4_SetConfig+0x9c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d109      	bne.n	8005b70 <TIM_OC4_SetConfig+0x74>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	019b      	lsls	r3, r3, #6
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	61da      	str	r2, [r3, #28]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	621a      	str	r2, [r3, #32]
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40010000 	.word	0x40010000

08005b9c <TIM_CCxChannelCmd>:
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2201      	movs	r2, #1
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1a      	ldr	r2, [r3, #32]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	401a      	ands	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	621a      	str	r2, [r3, #32]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	621a      	str	r2, [r3, #32]
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <HAL_TIMEx_MasterConfigSynchronization>:
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e050      	b.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	605a      	str	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1c      	ldr	r2, [pc, #112]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d018      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4c:	d013      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00e      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a16      	ldr	r2, [pc, #88]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d009      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a15      	ldr	r2, [pc, #84]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d10c      	bne.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	40014000 	.word	0x40014000

08005cc4 <HAL_TIMEx_CommutCallback>:
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIMEx_BreakCallback>:
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_UART_Init>:
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_UART_Init+0x12>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e03f      	b.n	8005d7e <HAL_UART_Init+0x92>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_UART_Init+0x2c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fd fac6 	bl	80032a4 <HAL_UART_MspInit>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2224      	movs	r2, #36	; 0x24
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d2e:	60da      	str	r2, [r3, #12]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 ff4d 	bl	8006bd0 <UART_SetConfig>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d44:	611a      	str	r2, [r3, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d54:	615a      	str	r2, [r3, #20]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d64:	60da      	str	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <HAL_UART_Transmit_DMA>:
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08c      	sub	sp, #48	; 0x30
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d165      	bne.n	8005e6e <HAL_UART_Transmit_DMA+0xe6>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <HAL_UART_Transmit_DMA+0x26>
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_UART_Transmit_DMA+0x2a>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e05e      	b.n	8005e70 <HAL_UART_Transmit_DMA+0xe8>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_UART_Transmit_DMA+0x38>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e057      	b.n	8005e70 <HAL_UART_Transmit_DMA+0xe8>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	621a      	str	r2, [r3, #32]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	88fa      	ldrh	r2, [r7, #6]
 8005dd2:	849a      	strh	r2, [r3, #36]	; 0x24
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	88fa      	ldrh	r2, [r7, #6]
 8005dd8:	84da      	strh	r2, [r3, #38]	; 0x26
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	641a      	str	r2, [r3, #64]	; 0x40
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2221      	movs	r2, #33	; 0x21
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dec:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <HAL_UART_Transmit_DMA+0xf0>)
 8005dee:	63da      	str	r2, [r3, #60]	; 0x3c
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df4:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <HAL_UART_Transmit_DMA+0xf4>)
 8005df6:	641a      	str	r2, [r3, #64]	; 0x40
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfc:	4a20      	ldr	r2, [pc, #128]	; (8005e80 <HAL_UART_Transmit_DMA+0xf8>)
 8005dfe:	64da      	str	r2, [r3, #76]	; 0x4c
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e04:	2200      	movs	r2, #0
 8005e06:	651a      	str	r2, [r3, #80]	; 0x50
 8005e08:	f107 0308 	add.w	r3, r7, #8
 8005e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	6819      	ldr	r1, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	f7fd feaa 	bl	8003b78 <HAL_DMA_Start_IT>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3314      	adds	r3, #20
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3314      	adds	r3, #20
 8005e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e56:	627a      	str	r2, [r7, #36]	; 0x24
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	6a39      	ldr	r1, [r7, #32]
 8005e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e5      	bne.n	8005e36 <HAL_UART_Transmit_DMA+0xae>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e000      	b.n	8005e70 <HAL_UART_Transmit_DMA+0xe8>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	4618      	mov	r0, r3
 8005e72:	3730      	adds	r7, #48	; 0x30
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	08006469 	.word	0x08006469
 8005e7c:	08006503 	.word	0x08006503
 8005e80:	0800667b 	.word	0x0800667b

08005e84 <HAL_UART_Receive_DMA>:
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	80fb      	strh	r3, [r7, #6]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d11d      	bne.n	8005eda <HAL_UART_Receive_DMA+0x56>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <HAL_UART_Receive_DMA+0x26>
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_UART_Receive_DMA+0x2a>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e016      	b.n	8005edc <HAL_UART_Receive_DMA+0x58>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_UART_Receive_DMA+0x38>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e00f      	b.n	8005edc <HAL_UART_Receive_DMA+0x58>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 fc1d 	bl	8006710 <UART_Start_Receive_DMA>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	e000      	b.n	8005edc <HAL_UART_Receive_DMA+0x58>
 8005eda:	2302      	movs	r3, #2
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_UART_IRQHandler>:
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b0ba      	sub	sp, #232	; 0xe8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f10:	2300      	movs	r3, #0
 8005f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10f      	bne.n	8005f4a <HAL_UART_IRQHandler+0x66>
 8005f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <HAL_UART_IRQHandler+0x66>
 8005f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_UART_IRQHandler+0x66>
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fd89 	bl	8006a5a <UART_Receive_IT>
 8005f48:	e256      	b.n	80063f8 <HAL_UART_IRQHandler+0x514>
 8005f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 80de 	beq.w	8006110 <HAL_UART_IRQHandler+0x22c>
 8005f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <HAL_UART_IRQHandler+0x8a>
 8005f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80d1 	beq.w	8006110 <HAL_UART_IRQHandler+0x22c>
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00b      	beq.n	8005f92 <HAL_UART_IRQHandler+0xae>
 8005f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <HAL_UART_IRQHandler+0xae>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f043 0201 	orr.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	641a      	str	r2, [r3, #64]	; 0x40
 8005f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00b      	beq.n	8005fb6 <HAL_UART_IRQHandler+0xd2>
 8005f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <HAL_UART_IRQHandler+0xd2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f043 0202 	orr.w	r2, r3, #2
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	641a      	str	r2, [r3, #64]	; 0x40
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <HAL_UART_IRQHandler+0xf6>
 8005fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <HAL_UART_IRQHandler+0xf6>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f043 0204 	orr.w	r2, r3, #4
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d011      	beq.n	800600a <HAL_UART_IRQHandler+0x126>
 8005fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d105      	bne.n	8005ffe <HAL_UART_IRQHandler+0x11a>
 8005ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <HAL_UART_IRQHandler+0x126>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f043 0208 	orr.w	r2, r3, #8
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	641a      	str	r2, [r3, #64]	; 0x40
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 81ed 	beq.w	80063ee <HAL_UART_IRQHandler+0x50a>
 8006014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_UART_IRQHandler+0x14e>
 8006020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_UART_IRQHandler+0x14e>
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fd14 	bl	8006a5a <UART_Receive_IT>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603c:	2b40      	cmp	r3, #64	; 0x40
 800603e:	bf0c      	ite	eq
 8006040:	2301      	moveq	r3, #1
 8006042:	2300      	movne	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d103      	bne.n	800605e <HAL_UART_IRQHandler+0x17a>
 8006056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800605a:	2b00      	cmp	r3, #0
 800605c:	d04f      	beq.n	80060fe <HAL_UART_IRQHandler+0x21a>
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fc1c 	bl	800689c <UART_EndRxTransfer>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606e:	2b40      	cmp	r3, #64	; 0x40
 8006070:	d141      	bne.n	80060f6 <HAL_UART_IRQHandler+0x212>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3314      	adds	r3, #20
 8006078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800607c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800608c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3314      	adds	r3, #20
 800609a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800609e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1d9      	bne.n	8006072 <HAL_UART_IRQHandler+0x18e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d013      	beq.n	80060ee <HAL_UART_IRQHandler+0x20a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	4a7d      	ldr	r2, [pc, #500]	; (80062c0 <HAL_UART_IRQHandler+0x3dc>)
 80060cc:	651a      	str	r2, [r3, #80]	; 0x50
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fd fe18 	bl	8003d08 <HAL_DMA_Abort_IT>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d016      	beq.n	800610c <HAL_UART_IRQHandler+0x228>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060e8:	4610      	mov	r0, r2
 80060ea:	4798      	blx	r3
 80060ec:	e00e      	b.n	800610c <HAL_UART_IRQHandler+0x228>
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f9a4 	bl	800643c <HAL_UART_ErrorCallback>
 80060f4:	e00a      	b.n	800610c <HAL_UART_IRQHandler+0x228>
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f9a0 	bl	800643c <HAL_UART_ErrorCallback>
 80060fc:	e006      	b.n	800610c <HAL_UART_IRQHandler+0x228>
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f99c 	bl	800643c <HAL_UART_ErrorCallback>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	641a      	str	r2, [r3, #64]	; 0x40
 800610a:	e170      	b.n	80063ee <HAL_UART_IRQHandler+0x50a>
 800610c:	bf00      	nop
 800610e:	e16e      	b.n	80063ee <HAL_UART_IRQHandler+0x50a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	2b01      	cmp	r3, #1
 8006116:	f040 814a 	bne.w	80063ae <HAL_UART_IRQHandler+0x4ca>
 800611a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611e:	f003 0310 	and.w	r3, r3, #16
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 8143 	beq.w	80063ae <HAL_UART_IRQHandler+0x4ca>
 8006128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612c:	f003 0310 	and.w	r3, r3, #16
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 813c 	beq.w	80063ae <HAL_UART_IRQHandler+0x4ca>
 8006136:	2300      	movs	r3, #0
 8006138:	60bb      	str	r3, [r7, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	60bb      	str	r3, [r7, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	60bb      	str	r3, [r7, #8]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	f040 80b4 	bne.w	80062c4 <HAL_UART_IRQHandler+0x3e0>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8006168:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8140 	beq.w	80063f2 <HAL_UART_IRQHandler+0x50e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800617a:	429a      	cmp	r2, r3
 800617c:	f080 8139 	bcs.w	80063f2 <HAL_UART_IRQHandler+0x50e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006186:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006192:	f000 8088 	beq.w	80062a6 <HAL_UART_IRQHandler+0x3c2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1d9      	bne.n	8006196 <HAL_UART_IRQHandler+0x2b2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3314      	adds	r3, #20
 80061e8:	677b      	str	r3, [r7, #116]	; 0x74
 80061ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	673b      	str	r3, [r7, #112]	; 0x70
 80061f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3314      	adds	r3, #20
 8006202:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006206:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800620a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800620c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800620e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	67bb      	str	r3, [r7, #120]	; 0x78
 8006218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e1      	bne.n	80061e2 <HAL_UART_IRQHandler+0x2fe>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3314      	adds	r3, #20
 8006224:	663b      	str	r3, [r7, #96]	; 0x60
 8006226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800622e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3314      	adds	r3, #20
 800623e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006242:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006244:	66bb      	str	r3, [r7, #104]	; 0x68
 8006246:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006248:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	667b      	str	r3, [r7, #100]	; 0x64
 8006250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e3      	bne.n	800621e <HAL_UART_IRQHandler+0x33a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800626c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	64bb      	str	r3, [r7, #72]	; 0x48
 8006274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006276:	f023 0310 	bic.w	r3, r3, #16
 800627a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	330c      	adds	r3, #12
 8006284:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006288:	65ba      	str	r2, [r7, #88]	; 0x58
 800628a:	657b      	str	r3, [r7, #84]	; 0x54
 800628c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800628e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	653b      	str	r3, [r7, #80]	; 0x50
 8006296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e3      	bne.n	8006264 <HAL_UART_IRQHandler+0x380>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fd fcc1 	bl	8003c28 <HAL_DMA_Abort>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f8ca 	bl	8006450 <HAL_UARTEx_RxEventCallback>
 80062bc:	e099      	b.n	80063f2 <HAL_UART_IRQHandler+0x50e>
 80062be:	bf00      	nop
 80062c0:	08006963 	.word	0x08006963
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 808b 	beq.w	80063f6 <HAL_UART_IRQHandler+0x512>
 80062e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8086 	beq.w	80063f6 <HAL_UART_IRQHandler+0x512>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
 80062fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006300:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800630e:	647a      	str	r2, [r7, #68]	; 0x44
 8006310:	643b      	str	r3, [r7, #64]	; 0x40
 8006312:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006314:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800631c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e3      	bne.n	80062ea <HAL_UART_IRQHandler+0x406>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3314      	adds	r3, #20
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	623b      	str	r3, [r7, #32]
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3314      	adds	r3, #20
 8006342:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006346:	633a      	str	r2, [r7, #48]	; 0x30
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800634a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800634c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e3      	bne.n	8006322 <HAL_UART_IRQHandler+0x43e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	330c      	adds	r3, #12
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0310 	bic.w	r3, r3, #16
 800637e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800638c:	61fa      	str	r2, [r7, #28]
 800638e:	61bb      	str	r3, [r7, #24]
 8006390:	69b9      	ldr	r1, [r7, #24]
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e3      	bne.n	8006368 <HAL_UART_IRQHandler+0x484>
 80063a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f852 	bl	8006450 <HAL_UARTEx_RxEventCallback>
 80063ac:	e023      	b.n	80063f6 <HAL_UART_IRQHandler+0x512>
 80063ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <HAL_UART_IRQHandler+0x4ea>
 80063ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_UART_IRQHandler+0x4ea>
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fadf 	bl	800698a <UART_Transmit_IT>
 80063cc:	e014      	b.n	80063f8 <HAL_UART_IRQHandler+0x514>
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00e      	beq.n	80063f8 <HAL_UART_IRQHandler+0x514>
 80063da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_UART_IRQHandler+0x514>
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fb1f 	bl	8006a2a <UART_EndTransmit_IT>
 80063ec:	e004      	b.n	80063f8 <HAL_UART_IRQHandler+0x514>
 80063ee:	bf00      	nop
 80063f0:	e002      	b.n	80063f8 <HAL_UART_IRQHandler+0x514>
 80063f2:	bf00      	nop
 80063f4:	e000      	b.n	80063f8 <HAL_UART_IRQHandler+0x514>
 80063f6:	bf00      	nop
 80063f8:	37e8      	adds	r7, #232	; 0xe8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop

08006400 <HAL_UART_TxCpltCallback>:
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_UART_TxHalfCpltCallback>:
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_UART_RxHalfCpltCallback>:
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_UART_ErrorCallback>:
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_UARTEx_RxEventCallback>:
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	807b      	strh	r3, [r7, #2]
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <UART_DMATransmitCplt>:
 8006468:	b580      	push	{r7, lr}
 800646a:	b090      	sub	sp, #64	; 0x40
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006480:	2b00      	cmp	r3, #0
 8006482:	d137      	bne.n	80064f4 <UART_DMATransmitCplt+0x8c>
 8006484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006486:	2200      	movs	r2, #0
 8006488:	84da      	strh	r2, [r3, #38]	; 0x26
 800648a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3314      	adds	r3, #20
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80064a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064aa:	633a      	str	r2, [r7, #48]	; 0x30
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e5      	bne.n	800648a <UART_DMATransmitCplt+0x22>
 80064be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	330c      	adds	r3, #12
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
 80064d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	330c      	adds	r3, #12
 80064dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064de:	61fa      	str	r2, [r7, #28]
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	69b9      	ldr	r1, [r7, #24]
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e5      	bne.n	80064be <UART_DMATransmitCplt+0x56>
 80064f2:	e002      	b.n	80064fa <UART_DMATransmitCplt+0x92>
 80064f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80064f6:	f7ff ff83 	bl	8006400 <HAL_UART_TxCpltCallback>
 80064fa:	bf00      	nop
 80064fc:	3740      	adds	r7, #64	; 0x40
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <UART_DMATxHalfCplt>:
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff ff7f 	bl	8006414 <HAL_UART_TxHalfCpltCallback>
 8006516:	bf00      	nop
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <UART_DMAReceiveCplt>:
 800651e:	b580      	push	{r7, lr}
 8006520:	b09c      	sub	sp, #112	; 0x70
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d172      	bne.n	8006620 <UART_DMAReceiveCplt+0x102>
 800653a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653c:	2200      	movs	r2, #0
 800653e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006556:	66bb      	str	r3, [r7, #104]	; 0x68
 8006558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006560:	65ba      	str	r2, [r7, #88]	; 0x58
 8006562:	657b      	str	r3, [r7, #84]	; 0x54
 8006564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	653b      	str	r3, [r7, #80]	; 0x50
 800656e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e5      	bne.n	8006540 <UART_DMAReceiveCplt+0x22>
 8006574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3314      	adds	r3, #20
 800657a:	63bb      	str	r3, [r7, #56]	; 0x38
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	637b      	str	r3, [r7, #52]	; 0x34
 8006584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006586:	f023 0301 	bic.w	r3, r3, #1
 800658a:	667b      	str	r3, [r7, #100]	; 0x64
 800658c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3314      	adds	r3, #20
 8006592:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006594:	647a      	str	r2, [r7, #68]	; 0x44
 8006596:	643b      	str	r3, [r7, #64]	; 0x40
 8006598:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800659a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e5      	bne.n	8006574 <UART_DMAReceiveCplt+0x56>
 80065a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	623b      	str	r3, [r7, #32]
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065be:	663b      	str	r3, [r7, #96]	; 0x60
 80065c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3314      	adds	r3, #20
 80065c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065c8:	633a      	str	r2, [r7, #48]	; 0x30
 80065ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e5      	bne.n	80065a8 <UART_DMAReceiveCplt+0x8a>
 80065dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d119      	bne.n	8006620 <UART_DMAReceiveCplt+0x102>
 80065ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0310 	bic.w	r3, r3, #16
 8006602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	330c      	adds	r3, #12
 800660a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800660c:	61fa      	str	r2, [r7, #28]
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	69b9      	ldr	r1, [r7, #24]
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e5      	bne.n	80065ec <UART_DMAReceiveCplt+0xce>
 8006620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	2b01      	cmp	r3, #1
 8006626:	d106      	bne.n	8006636 <UART_DMAReceiveCplt+0x118>
 8006628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800662a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800662c:	4619      	mov	r1, r3
 800662e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006630:	f7ff ff0e 	bl	8006450 <HAL_UARTEx_RxEventCallback>
 8006634:	e002      	b.n	800663c <UART_DMAReceiveCplt+0x11e>
 8006636:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006638:	f7fa fcc0 	bl	8000fbc <HAL_UART_RxCpltCallback>
 800663c:	bf00      	nop
 800663e:	3770      	adds	r7, #112	; 0x70
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <UART_DMARxHalfCplt>:
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	2b01      	cmp	r3, #1
 8006658:	d108      	bne.n	800666c <UART_DMARxHalfCplt+0x28>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800665e:	085b      	lsrs	r3, r3, #1
 8006660:	b29b      	uxth	r3, r3
 8006662:	4619      	mov	r1, r3
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7ff fef3 	bl	8006450 <HAL_UARTEx_RxEventCallback>
 800666a:	e002      	b.n	8006672 <UART_DMARxHalfCplt+0x2e>
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7ff fedb 	bl	8006428 <HAL_UART_RxHalfCpltCallback>
 8006672:	bf00      	nop
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <UART_DMAError>:
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	60bb      	str	r3, [r7, #8]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b80      	cmp	r3, #128	; 0x80
 8006698:	bf0c      	ite	eq
 800669a:	2301      	moveq	r3, #1
 800669c:	2300      	movne	r3, #0
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b21      	cmp	r3, #33	; 0x21
 80066ac:	d108      	bne.n	80066c0 <UART_DMAError+0x46>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <UART_DMAError+0x46>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2200      	movs	r2, #0
 80066b8:	84da      	strh	r2, [r3, #38]	; 0x26
 80066ba:	68b8      	ldr	r0, [r7, #8]
 80066bc:	f000 f8c6 	bl	800684c <UART_EndTxTransfer>
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ca:	2b40      	cmp	r3, #64	; 0x40
 80066cc:	bf0c      	ite	eq
 80066ce:	2301      	moveq	r3, #1
 80066d0:	2300      	movne	r3, #0
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b22      	cmp	r3, #34	; 0x22
 80066e0:	d108      	bne.n	80066f4 <UART_DMAError+0x7a>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <UART_DMAError+0x7a>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2200      	movs	r2, #0
 80066ec:	85da      	strh	r2, [r3, #46]	; 0x2e
 80066ee:	68b8      	ldr	r0, [r7, #8]
 80066f0:	f000 f8d4 	bl	800689c <UART_EndRxTransfer>
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	f043 0210 	orr.w	r2, r3, #16
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40
 8006700:	68b8      	ldr	r0, [r7, #8]
 8006702:	f7ff fe9b 	bl	800643c <HAL_UART_ErrorCallback>
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <UART_Start_Receive_DMA>:
 8006710:	b580      	push	{r7, lr}
 8006712:	b098      	sub	sp, #96	; 0x60
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	629a      	str	r2, [r3, #40]	; 0x28
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	859a      	strh	r2, [r3, #44]	; 0x2c
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	641a      	str	r2, [r3, #64]	; 0x40
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2222      	movs	r2, #34	; 0x22
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	4a40      	ldr	r2, [pc, #256]	; (8006840 <UART_Start_Receive_DMA+0x130>)
 800673e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	4a3f      	ldr	r2, [pc, #252]	; (8006844 <UART_Start_Receive_DMA+0x134>)
 8006746:	641a      	str	r2, [r3, #64]	; 0x40
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	4a3e      	ldr	r2, [pc, #248]	; (8006848 <UART_Start_Receive_DMA+0x138>)
 800674e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	2200      	movs	r2, #0
 8006756:	651a      	str	r2, [r3, #80]	; 0x50
 8006758:	f107 0308 	add.w	r3, r7, #8
 800675c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3304      	adds	r3, #4
 8006768:	4619      	mov	r1, r3
 800676a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	f7fd fa02 	bl	8003b78 <HAL_DMA_Start_IT>
 8006774:	2300      	movs	r3, #0
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d019      	beq.n	80067ce <UART_Start_Receive_DMA+0xbe>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	330c      	adds	r3, #12
 80067a0:	643b      	str	r3, [r7, #64]	; 0x40
 80067a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	330c      	adds	r3, #12
 80067b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80067bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80067be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80067c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	647b      	str	r3, [r7, #68]	; 0x44
 80067c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e5      	bne.n	800679a <UART_Start_Receive_DMA+0x8a>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3314      	adds	r3, #20
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	f043 0301 	orr.w	r3, r3, #1
 80067e4:	657b      	str	r3, [r7, #84]	; 0x54
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3314      	adds	r3, #20
 80067ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80067f0:	637b      	str	r3, [r7, #52]	; 0x34
 80067f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	633b      	str	r3, [r7, #48]	; 0x30
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e5      	bne.n	80067ce <UART_Start_Receive_DMA+0xbe>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3314      	adds	r3, #20
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006818:	653b      	str	r3, [r7, #80]	; 0x50
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3314      	adds	r3, #20
 8006820:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006822:	627a      	str	r2, [r7, #36]	; 0x24
 8006824:	623b      	str	r3, [r7, #32]
 8006826:	6a39      	ldr	r1, [r7, #32]
 8006828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	61fb      	str	r3, [r7, #28]
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e5      	bne.n	8006802 <UART_Start_Receive_DMA+0xf2>
 8006836:	2300      	movs	r3, #0
 8006838:	4618      	mov	r0, r3
 800683a:	3760      	adds	r7, #96	; 0x60
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	0800651f 	.word	0x0800651f
 8006844:	08006645 	.word	0x08006645
 8006848:	0800667b 	.word	0x0800667b

0800684c <UART_EndTxTransfer>:
 800684c:	b480      	push	{r7}
 800684e:	b089      	sub	sp, #36	; 0x24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	330c      	adds	r3, #12
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	60bb      	str	r3, [r7, #8]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	330c      	adds	r3, #12
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	61ba      	str	r2, [r7, #24]
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	6979      	ldr	r1, [r7, #20]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e5      	bne.n	8006854 <UART_EndTxTransfer+0x8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006890:	bf00      	nop
 8006892:	3724      	adds	r7, #36	; 0x24
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <UART_EndRxTransfer>:
 800689c:	b480      	push	{r7}
 800689e:	b095      	sub	sp, #84	; 0x54
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	330c      	adds	r3, #12
 80068aa:	637b      	str	r3, [r7, #52]	; 0x34
 80068ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	633b      	str	r3, [r7, #48]	; 0x30
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068c4:	643a      	str	r2, [r7, #64]	; 0x40
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e5      	bne.n	80068a4 <UART_EndRxTransfer+0x8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3314      	adds	r3, #20
 80068de:	623b      	str	r3, [r7, #32]
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	61fb      	str	r3, [r7, #28]
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3314      	adds	r3, #20
 80068f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80068fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e5      	bne.n	80068d8 <UART_EndRxTransfer+0x3c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	2b01      	cmp	r3, #1
 8006912:	d119      	bne.n	8006948 <UART_EndRxTransfer+0xac>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	60bb      	str	r3, [r7, #8]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	647b      	str	r3, [r7, #68]	; 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006934:	61ba      	str	r2, [r7, #24]
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	6979      	ldr	r1, [r7, #20]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e5      	bne.n	8006914 <UART_EndRxTransfer+0x78>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	631a      	str	r2, [r3, #48]	; 0x30
 8006956:	bf00      	nop
 8006958:	3754      	adds	r7, #84	; 0x54
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <UART_DMAAbortOnError>:
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	84da      	strh	r2, [r3, #38]	; 0x26
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff fd5d 	bl	800643c <HAL_UART_ErrorCallback>
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <UART_Transmit_IT>:
 800698a:	b480      	push	{r7}
 800698c:	b085      	sub	sp, #20
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b21      	cmp	r3, #33	; 0x21
 800699c:	d13e      	bne.n	8006a1c <UART_Transmit_IT+0x92>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a6:	d114      	bne.n	80069d2 <UART_Transmit_IT+0x48>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d110      	bne.n	80069d2 <UART_Transmit_IT+0x48>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069c4:	605a      	str	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	1c9a      	adds	r2, r3, #2
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	621a      	str	r2, [r3, #32]
 80069d0:	e008      	b.n	80069e4 <UART_Transmit_IT+0x5a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6211      	str	r1, [r2, #32]
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	605a      	str	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	4619      	mov	r1, r3
 80069f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10f      	bne.n	8006a18 <UART_Transmit_IT+0x8e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a06:	60da      	str	r2, [r3, #12]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a16:	60da      	str	r2, [r3, #12]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e000      	b.n	8006a1e <UART_Transmit_IT+0x94>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <UART_EndTransmit_IT>:
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a40:	60da      	str	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff fcd8 	bl	8006400 <HAL_UART_TxCpltCallback>
 8006a50:	2300      	movs	r3, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <UART_Receive_IT>:
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b08c      	sub	sp, #48	; 0x30
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b22      	cmp	r3, #34	; 0x22
 8006a6c:	f040 80ab 	bne.w	8006bc6 <UART_Receive_IT+0x16c>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a78:	d117      	bne.n	8006aaa <UART_Receive_IT+0x50>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d113      	bne.n	8006aaa <UART_Receive_IT+0x50>
 8006a82:	2300      	movs	r3, #0
 8006a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	1c9a      	adds	r2, r3, #2
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8006aa8:	e026      	b.n	8006af8 <UART_Receive_IT+0x9e>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006abc:	d007      	beq.n	8006ace <UART_Receive_IT+0x74>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <UART_Receive_IT+0x82>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <UART_Receive_IT+0x82>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	e008      	b.n	8006aee <UART_Receive_IT+0x94>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	629a      	str	r2, [r3, #40]	; 0x28
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	4619      	mov	r1, r3
 8006b06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d15a      	bne.n	8006bc2 <UART_Receive_IT+0x168>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0220 	bic.w	r2, r2, #32
 8006b1a:	60da      	str	r2, [r3, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b2a:	60da      	str	r2, [r3, #12]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695a      	ldr	r2, [r3, #20]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0201 	bic.w	r2, r2, #1
 8006b3a:	615a      	str	r2, [r3, #20]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d135      	bne.n	8006bb8 <UART_Receive_IT+0x15e>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	631a      	str	r2, [r3, #48]	; 0x30
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	330c      	adds	r3, #12
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f023 0310 	bic.w	r3, r3, #16
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b72:	623a      	str	r2, [r7, #32]
 8006b74:	61fb      	str	r3, [r7, #28]
 8006b76:	69f9      	ldr	r1, [r7, #28]
 8006b78:	6a3a      	ldr	r2, [r7, #32]
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e5      	bne.n	8006b52 <UART_Receive_IT+0xf8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b10      	cmp	r3, #16
 8006b92:	d10a      	bne.n	8006baa <UART_Receive_IT+0x150>
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fc4d 	bl	8006450 <HAL_UARTEx_RxEventCallback>
 8006bb6:	e002      	b.n	8006bbe <UART_Receive_IT+0x164>
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7fa f9ff 	bl	8000fbc <HAL_UART_RxCpltCallback>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e002      	b.n	8006bc8 <UART_Receive_IT+0x16e>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e000      	b.n	8006bc8 <UART_Receive_IT+0x16e>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3730      	adds	r7, #48	; 0x30
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <UART_SetConfig>:
 8006bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd4:	b0c0      	sub	sp, #256	; 0x100
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bec:	68d9      	ldr	r1, [r3, #12]
 8006bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	ea40 0301 	orr.w	r3, r0, r1
 8006bf8:	6113      	str	r3, [r2, #16]
 8006bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c28:	f021 010c 	bic.w	r1, r1, #12
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c36:	430b      	orrs	r3, r1
 8006c38:	60d3      	str	r3, [r2, #12]
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4a:	6999      	ldr	r1, [r3, #24]
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	ea40 0301 	orr.w	r3, r0, r1
 8006c56:	6153      	str	r3, [r2, #20]
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	4b8f      	ldr	r3, [pc, #572]	; (8006e9c <UART_SetConfig+0x2cc>)
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d005      	beq.n	8006c70 <UART_SetConfig+0xa0>
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b8d      	ldr	r3, [pc, #564]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d104      	bne.n	8006c7a <UART_SetConfig+0xaa>
 8006c70:	f7fe f92a 	bl	8004ec8 <HAL_RCC_GetPCLK2Freq>
 8006c74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c78:	e003      	b.n	8006c82 <UART_SetConfig+0xb2>
 8006c7a:	f7fe f911 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
 8006c7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c8c:	f040 810c 	bne.w	8006ea8 <UART_SetConfig+0x2d8>
 8006c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	1891      	adds	r1, r2, r2
 8006ca8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006caa:	415b      	adcs	r3, r3
 8006cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	eb12 0801 	adds.w	r8, r2, r1
 8006cb8:	4629      	mov	r1, r5
 8006cba:	eb43 0901 	adc.w	r9, r3, r1
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cd2:	4690      	mov	r8, r2
 8006cd4:	4699      	mov	r9, r3
 8006cd6:	4623      	mov	r3, r4
 8006cd8:	eb18 0303 	adds.w	r3, r8, r3
 8006cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ce0:	462b      	mov	r3, r5
 8006ce2:	eb49 0303 	adc.w	r3, r9, r3
 8006ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cfe:	460b      	mov	r3, r1
 8006d00:	18db      	adds	r3, r3, r3
 8006d02:	653b      	str	r3, [r7, #80]	; 0x50
 8006d04:	4613      	mov	r3, r2
 8006d06:	eb42 0303 	adc.w	r3, r2, r3
 8006d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d14:	f7f9 ffd0 	bl	8000cb8 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4b61      	ldr	r3, [pc, #388]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	011c      	lsls	r4, r3, #4
 8006d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	1891      	adds	r1, r2, r2
 8006d3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d40:	415b      	adcs	r3, r3
 8006d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d48:	4641      	mov	r1, r8
 8006d4a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d4e:	4649      	mov	r1, r9
 8006d50:	eb43 0b01 	adc.w	fp, r3, r1
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d68:	4692      	mov	sl, r2
 8006d6a:	469b      	mov	fp, r3
 8006d6c:	4643      	mov	r3, r8
 8006d6e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d76:	464b      	mov	r3, r9
 8006d78:	eb4b 0303 	adc.w	r3, fp, r3
 8006d7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d94:	460b      	mov	r3, r1
 8006d96:	18db      	adds	r3, r3, r3
 8006d98:	643b      	str	r3, [r7, #64]	; 0x40
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	eb42 0303 	adc.w	r3, r2, r3
 8006da0:	647b      	str	r3, [r7, #68]	; 0x44
 8006da2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006da6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006daa:	f7f9 ff85 	bl	8000cb8 <__aeabi_uldivmod>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4611      	mov	r1, r2
 8006db4:	4b3b      	ldr	r3, [pc, #236]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006db6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	2264      	movs	r2, #100	; 0x64
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	1acb      	subs	r3, r1, r3
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006dca:	4b36      	ldr	r3, [pc, #216]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dd8:	441c      	add	r4, r3
 8006dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006de4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006de8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006dec:	4642      	mov	r2, r8
 8006dee:	464b      	mov	r3, r9
 8006df0:	1891      	adds	r1, r2, r2
 8006df2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006df4:	415b      	adcs	r3, r3
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	1851      	adds	r1, r2, r1
 8006e00:	6339      	str	r1, [r7, #48]	; 0x30
 8006e02:	4649      	mov	r1, r9
 8006e04:	414b      	adcs	r3, r1
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e14:	4659      	mov	r1, fp
 8006e16:	00cb      	lsls	r3, r1, #3
 8006e18:	4651      	mov	r1, sl
 8006e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e1e:	4651      	mov	r1, sl
 8006e20:	00ca      	lsls	r2, r1, #3
 8006e22:	4610      	mov	r0, r2
 8006e24:	4619      	mov	r1, r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	4642      	mov	r2, r8
 8006e2a:	189b      	adds	r3, r3, r2
 8006e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e30:	464b      	mov	r3, r9
 8006e32:	460a      	mov	r2, r1
 8006e34:	eb42 0303 	adc.w	r3, r2, r3
 8006e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e50:	460b      	mov	r3, r1
 8006e52:	18db      	adds	r3, r3, r3
 8006e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e56:	4613      	mov	r3, r2
 8006e58:	eb42 0303 	adc.w	r3, r2, r3
 8006e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e66:	f7f9 ff27 	bl	8000cb8 <__aeabi_uldivmod>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006e70:	fba3 1302 	umull	r1, r3, r3, r2
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	2164      	movs	r1, #100	; 0x64
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	3332      	adds	r3, #50	; 0x32
 8006e82:	4a08      	ldr	r2, [pc, #32]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	f003 0207 	and.w	r2, r3, #7
 8006e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4422      	add	r2, r4
 8006e96:	609a      	str	r2, [r3, #8]
 8006e98:	e105      	b.n	80070a6 <UART_SetConfig+0x4d6>
 8006e9a:	bf00      	nop
 8006e9c:	40011000 	.word	0x40011000
 8006ea0:	40011400 	.word	0x40011400
 8006ea4:	51eb851f 	.word	0x51eb851f
 8006ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006eb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006eb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006eba:	4642      	mov	r2, r8
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	1891      	adds	r1, r2, r2
 8006ec0:	6239      	str	r1, [r7, #32]
 8006ec2:	415b      	adcs	r3, r3
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eca:	4641      	mov	r1, r8
 8006ecc:	1854      	adds	r4, r2, r1
 8006ece:	4649      	mov	r1, r9
 8006ed0:	eb43 0501 	adc.w	r5, r3, r1
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	00eb      	lsls	r3, r5, #3
 8006ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ee2:	00e2      	lsls	r2, r4, #3
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	4643      	mov	r3, r8
 8006eea:	18e3      	adds	r3, r4, r3
 8006eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	eb45 0303 	adc.w	r3, r5, r3
 8006ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f0a:	f04f 0200 	mov.w	r2, #0
 8006f0e:	f04f 0300 	mov.w	r3, #0
 8006f12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f16:	4629      	mov	r1, r5
 8006f18:	008b      	lsls	r3, r1, #2
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f20:	4621      	mov	r1, r4
 8006f22:	008a      	lsls	r2, r1, #2
 8006f24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f28:	f7f9 fec6 	bl	8000cb8 <__aeabi_uldivmod>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4b60      	ldr	r3, [pc, #384]	; (80070b4 <UART_SetConfig+0x4e4>)
 8006f32:	fba3 2302 	umull	r2, r3, r3, r2
 8006f36:	095b      	lsrs	r3, r3, #5
 8006f38:	011c      	lsls	r4, r3, #4
 8006f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	464b      	mov	r3, r9
 8006f50:	1891      	adds	r1, r2, r2
 8006f52:	61b9      	str	r1, [r7, #24]
 8006f54:	415b      	adcs	r3, r3
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	1851      	adds	r1, r2, r1
 8006f60:	6139      	str	r1, [r7, #16]
 8006f62:	4649      	mov	r1, r9
 8006f64:	414b      	adcs	r3, r1
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f74:	4659      	mov	r1, fp
 8006f76:	00cb      	lsls	r3, r1, #3
 8006f78:	4651      	mov	r1, sl
 8006f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f7e:	4651      	mov	r1, sl
 8006f80:	00ca      	lsls	r2, r1, #3
 8006f82:	4610      	mov	r0, r2
 8006f84:	4619      	mov	r1, r3
 8006f86:	4603      	mov	r3, r0
 8006f88:	4642      	mov	r2, r8
 8006f8a:	189b      	adds	r3, r3, r2
 8006f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f90:	464b      	mov	r3, r9
 8006f92:	460a      	mov	r2, r1
 8006f94:	eb42 0303 	adc.w	r3, r2, r3
 8006f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	008b      	lsls	r3, r1, #2
 8006fb8:	4641      	mov	r1, r8
 8006fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	008a      	lsls	r2, r1, #2
 8006fc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fc6:	f7f9 fe77 	bl	8000cb8 <__aeabi_uldivmod>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4b39      	ldr	r3, [pc, #228]	; (80070b4 <UART_SetConfig+0x4e4>)
 8006fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	2164      	movs	r1, #100	; 0x64
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	3332      	adds	r3, #50	; 0x32
 8006fe2:	4a34      	ldr	r2, [pc, #208]	; (80070b4 <UART_SetConfig+0x4e4>)
 8006fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fee:	441c      	add	r4, r3
 8006ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ff8:	677a      	str	r2, [r7, #116]	; 0x74
 8006ffa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ffe:	4642      	mov	r2, r8
 8007000:	464b      	mov	r3, r9
 8007002:	1891      	adds	r1, r2, r2
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	415b      	adcs	r3, r3
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800700e:	4641      	mov	r1, r8
 8007010:	1851      	adds	r1, r2, r1
 8007012:	6039      	str	r1, [r7, #0]
 8007014:	4649      	mov	r1, r9
 8007016:	414b      	adcs	r3, r1
 8007018:	607b      	str	r3, [r7, #4]
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	f04f 0300 	mov.w	r3, #0
 8007022:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007026:	4659      	mov	r1, fp
 8007028:	00cb      	lsls	r3, r1, #3
 800702a:	4651      	mov	r1, sl
 800702c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007030:	4651      	mov	r1, sl
 8007032:	00ca      	lsls	r2, r1, #3
 8007034:	4610      	mov	r0, r2
 8007036:	4619      	mov	r1, r3
 8007038:	4603      	mov	r3, r0
 800703a:	4642      	mov	r2, r8
 800703c:	189b      	adds	r3, r3, r2
 800703e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007040:	464b      	mov	r3, r9
 8007042:	460a      	mov	r2, r1
 8007044:	eb42 0303 	adc.w	r3, r2, r3
 8007048:	66fb      	str	r3, [r7, #108]	; 0x6c
 800704a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	663b      	str	r3, [r7, #96]	; 0x60
 8007054:	667a      	str	r2, [r7, #100]	; 0x64
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007062:	4649      	mov	r1, r9
 8007064:	008b      	lsls	r3, r1, #2
 8007066:	4641      	mov	r1, r8
 8007068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800706c:	4641      	mov	r1, r8
 800706e:	008a      	lsls	r2, r1, #2
 8007070:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007074:	f7f9 fe20 	bl	8000cb8 <__aeabi_uldivmod>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <UART_SetConfig+0x4e4>)
 800707e:	fba3 1302 	umull	r1, r3, r3, r2
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	2164      	movs	r1, #100	; 0x64
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	3332      	adds	r3, #50	; 0x32
 8007090:	4a08      	ldr	r2, [pc, #32]	; (80070b4 <UART_SetConfig+0x4e4>)
 8007092:	fba2 2303 	umull	r2, r3, r2, r3
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	f003 020f 	and.w	r2, r3, #15
 800709c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4422      	add	r2, r4
 80070a4:	609a      	str	r2, [r3, #8]
 80070a6:	bf00      	nop
 80070a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070ac:	46bd      	mov	sp, r7
 80070ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070b2:	bf00      	nop
 80070b4:	51eb851f 	.word	0x51eb851f

080070b8 <atoi>:
 80070b8:	220a      	movs	r2, #10
 80070ba:	2100      	movs	r1, #0
 80070bc:	f001 b906 	b.w	80082cc <strtol>

080070c0 <__errno>:
 80070c0:	4b01      	ldr	r3, [pc, #4]	; (80070c8 <__errno+0x8>)
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	20000010 	.word	0x20000010

080070cc <__sflush_r>:
 80070cc:	898a      	ldrh	r2, [r1, #12]
 80070ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d2:	4605      	mov	r5, r0
 80070d4:	0710      	lsls	r0, r2, #28
 80070d6:	460c      	mov	r4, r1
 80070d8:	d458      	bmi.n	800718c <__sflush_r+0xc0>
 80070da:	684b      	ldr	r3, [r1, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dc05      	bgt.n	80070ec <__sflush_r+0x20>
 80070e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	dc02      	bgt.n	80070ec <__sflush_r+0x20>
 80070e6:	2000      	movs	r0, #0
 80070e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070ee:	2e00      	cmp	r6, #0
 80070f0:	d0f9      	beq.n	80070e6 <__sflush_r+0x1a>
 80070f2:	2300      	movs	r3, #0
 80070f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070f8:	682f      	ldr	r7, [r5, #0]
 80070fa:	602b      	str	r3, [r5, #0]
 80070fc:	d032      	beq.n	8007164 <__sflush_r+0x98>
 80070fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007100:	89a3      	ldrh	r3, [r4, #12]
 8007102:	075a      	lsls	r2, r3, #29
 8007104:	d505      	bpl.n	8007112 <__sflush_r+0x46>
 8007106:	6863      	ldr	r3, [r4, #4]
 8007108:	1ac0      	subs	r0, r0, r3
 800710a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800710c:	b10b      	cbz	r3, 8007112 <__sflush_r+0x46>
 800710e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007110:	1ac0      	subs	r0, r0, r3
 8007112:	2300      	movs	r3, #0
 8007114:	4602      	mov	r2, r0
 8007116:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007118:	6a21      	ldr	r1, [r4, #32]
 800711a:	4628      	mov	r0, r5
 800711c:	47b0      	blx	r6
 800711e:	1c43      	adds	r3, r0, #1
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	d106      	bne.n	8007132 <__sflush_r+0x66>
 8007124:	6829      	ldr	r1, [r5, #0]
 8007126:	291d      	cmp	r1, #29
 8007128:	d82c      	bhi.n	8007184 <__sflush_r+0xb8>
 800712a:	4a2a      	ldr	r2, [pc, #168]	; (80071d4 <__sflush_r+0x108>)
 800712c:	40ca      	lsrs	r2, r1
 800712e:	07d6      	lsls	r6, r2, #31
 8007130:	d528      	bpl.n	8007184 <__sflush_r+0xb8>
 8007132:	2200      	movs	r2, #0
 8007134:	6062      	str	r2, [r4, #4]
 8007136:	04d9      	lsls	r1, r3, #19
 8007138:	6922      	ldr	r2, [r4, #16]
 800713a:	6022      	str	r2, [r4, #0]
 800713c:	d504      	bpl.n	8007148 <__sflush_r+0x7c>
 800713e:	1c42      	adds	r2, r0, #1
 8007140:	d101      	bne.n	8007146 <__sflush_r+0x7a>
 8007142:	682b      	ldr	r3, [r5, #0]
 8007144:	b903      	cbnz	r3, 8007148 <__sflush_r+0x7c>
 8007146:	6560      	str	r0, [r4, #84]	; 0x54
 8007148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800714a:	602f      	str	r7, [r5, #0]
 800714c:	2900      	cmp	r1, #0
 800714e:	d0ca      	beq.n	80070e6 <__sflush_r+0x1a>
 8007150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007154:	4299      	cmp	r1, r3
 8007156:	d002      	beq.n	800715e <__sflush_r+0x92>
 8007158:	4628      	mov	r0, r5
 800715a:	f000 f9bf 	bl	80074dc <_free_r>
 800715e:	2000      	movs	r0, #0
 8007160:	6360      	str	r0, [r4, #52]	; 0x34
 8007162:	e7c1      	b.n	80070e8 <__sflush_r+0x1c>
 8007164:	6a21      	ldr	r1, [r4, #32]
 8007166:	2301      	movs	r3, #1
 8007168:	4628      	mov	r0, r5
 800716a:	47b0      	blx	r6
 800716c:	1c41      	adds	r1, r0, #1
 800716e:	d1c7      	bne.n	8007100 <__sflush_r+0x34>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0c4      	beq.n	8007100 <__sflush_r+0x34>
 8007176:	2b1d      	cmp	r3, #29
 8007178:	d001      	beq.n	800717e <__sflush_r+0xb2>
 800717a:	2b16      	cmp	r3, #22
 800717c:	d101      	bne.n	8007182 <__sflush_r+0xb6>
 800717e:	602f      	str	r7, [r5, #0]
 8007180:	e7b1      	b.n	80070e6 <__sflush_r+0x1a>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	e7ad      	b.n	80070e8 <__sflush_r+0x1c>
 800718c:	690f      	ldr	r7, [r1, #16]
 800718e:	2f00      	cmp	r7, #0
 8007190:	d0a9      	beq.n	80070e6 <__sflush_r+0x1a>
 8007192:	0793      	lsls	r3, r2, #30
 8007194:	680e      	ldr	r6, [r1, #0]
 8007196:	bf08      	it	eq
 8007198:	694b      	ldreq	r3, [r1, #20]
 800719a:	600f      	str	r7, [r1, #0]
 800719c:	bf18      	it	ne
 800719e:	2300      	movne	r3, #0
 80071a0:	eba6 0807 	sub.w	r8, r6, r7
 80071a4:	608b      	str	r3, [r1, #8]
 80071a6:	f1b8 0f00 	cmp.w	r8, #0
 80071aa:	dd9c      	ble.n	80070e6 <__sflush_r+0x1a>
 80071ac:	6a21      	ldr	r1, [r4, #32]
 80071ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071b0:	4643      	mov	r3, r8
 80071b2:	463a      	mov	r2, r7
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b0      	blx	r6
 80071b8:	2800      	cmp	r0, #0
 80071ba:	dc06      	bgt.n	80071ca <__sflush_r+0xfe>
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c2:	81a3      	strh	r3, [r4, #12]
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295
 80071c8:	e78e      	b.n	80070e8 <__sflush_r+0x1c>
 80071ca:	4407      	add	r7, r0
 80071cc:	eba8 0800 	sub.w	r8, r8, r0
 80071d0:	e7e9      	b.n	80071a6 <__sflush_r+0xda>
 80071d2:	bf00      	nop
 80071d4:	20400001 	.word	0x20400001

080071d8 <_fflush_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	690b      	ldr	r3, [r1, #16]
 80071dc:	4605      	mov	r5, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	b913      	cbnz	r3, 80071e8 <_fflush_r+0x10>
 80071e2:	2500      	movs	r5, #0
 80071e4:	4628      	mov	r0, r5
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	b118      	cbz	r0, 80071f2 <_fflush_r+0x1a>
 80071ea:	6983      	ldr	r3, [r0, #24]
 80071ec:	b90b      	cbnz	r3, 80071f2 <_fflush_r+0x1a>
 80071ee:	f000 f899 	bl	8007324 <__sinit>
 80071f2:	4b14      	ldr	r3, [pc, #80]	; (8007244 <_fflush_r+0x6c>)
 80071f4:	429c      	cmp	r4, r3
 80071f6:	d11b      	bne.n	8007230 <_fflush_r+0x58>
 80071f8:	686c      	ldr	r4, [r5, #4]
 80071fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d0ef      	beq.n	80071e2 <_fflush_r+0xa>
 8007202:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007204:	07d0      	lsls	r0, r2, #31
 8007206:	d404      	bmi.n	8007212 <_fflush_r+0x3a>
 8007208:	0599      	lsls	r1, r3, #22
 800720a:	d402      	bmi.n	8007212 <_fflush_r+0x3a>
 800720c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800720e:	f000 f94c 	bl	80074aa <__retarget_lock_acquire_recursive>
 8007212:	4628      	mov	r0, r5
 8007214:	4621      	mov	r1, r4
 8007216:	f7ff ff59 	bl	80070cc <__sflush_r>
 800721a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800721c:	07da      	lsls	r2, r3, #31
 800721e:	4605      	mov	r5, r0
 8007220:	d4e0      	bmi.n	80071e4 <_fflush_r+0xc>
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	059b      	lsls	r3, r3, #22
 8007226:	d4dd      	bmi.n	80071e4 <_fflush_r+0xc>
 8007228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800722a:	f000 f93f 	bl	80074ac <__retarget_lock_release_recursive>
 800722e:	e7d9      	b.n	80071e4 <_fflush_r+0xc>
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <_fflush_r+0x70>)
 8007232:	429c      	cmp	r4, r3
 8007234:	d101      	bne.n	800723a <_fflush_r+0x62>
 8007236:	68ac      	ldr	r4, [r5, #8]
 8007238:	e7df      	b.n	80071fa <_fflush_r+0x22>
 800723a:	4b04      	ldr	r3, [pc, #16]	; (800724c <_fflush_r+0x74>)
 800723c:	429c      	cmp	r4, r3
 800723e:	bf08      	it	eq
 8007240:	68ec      	ldreq	r4, [r5, #12]
 8007242:	e7da      	b.n	80071fa <_fflush_r+0x22>
 8007244:	0800a5c0 	.word	0x0800a5c0
 8007248:	0800a5e0 	.word	0x0800a5e0
 800724c:	0800a5a0 	.word	0x0800a5a0

08007250 <fflush>:
 8007250:	4601      	mov	r1, r0
 8007252:	b920      	cbnz	r0, 800725e <fflush+0xe>
 8007254:	4b04      	ldr	r3, [pc, #16]	; (8007268 <fflush+0x18>)
 8007256:	4905      	ldr	r1, [pc, #20]	; (800726c <fflush+0x1c>)
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	f000 b8e1 	b.w	8007420 <_fwalk_reent>
 800725e:	4b04      	ldr	r3, [pc, #16]	; (8007270 <fflush+0x20>)
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	f7ff bfb9 	b.w	80071d8 <_fflush_r>
 8007266:	bf00      	nop
 8007268:	0800a600 	.word	0x0800a600
 800726c:	080071d9 	.word	0x080071d9
 8007270:	20000010 	.word	0x20000010

08007274 <std>:
 8007274:	2300      	movs	r3, #0
 8007276:	b510      	push	{r4, lr}
 8007278:	4604      	mov	r4, r0
 800727a:	e9c0 3300 	strd	r3, r3, [r0]
 800727e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007282:	6083      	str	r3, [r0, #8]
 8007284:	8181      	strh	r1, [r0, #12]
 8007286:	6643      	str	r3, [r0, #100]	; 0x64
 8007288:	81c2      	strh	r2, [r0, #14]
 800728a:	6183      	str	r3, [r0, #24]
 800728c:	4619      	mov	r1, r3
 800728e:	2208      	movs	r2, #8
 8007290:	305c      	adds	r0, #92	; 0x5c
 8007292:	f000 f91a 	bl	80074ca <memset>
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <std+0x38>)
 8007298:	6263      	str	r3, [r4, #36]	; 0x24
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <std+0x3c>)
 800729c:	62a3      	str	r3, [r4, #40]	; 0x28
 800729e:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <std+0x40>)
 80072a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072a2:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <std+0x44>)
 80072a4:	6224      	str	r4, [r4, #32]
 80072a6:	6323      	str	r3, [r4, #48]	; 0x30
 80072a8:	bd10      	pop	{r4, pc}
 80072aa:	bf00      	nop
 80072ac:	080080ed 	.word	0x080080ed
 80072b0:	0800810f 	.word	0x0800810f
 80072b4:	08008147 	.word	0x08008147
 80072b8:	0800816b 	.word	0x0800816b

080072bc <_cleanup_r>:
 80072bc:	4901      	ldr	r1, [pc, #4]	; (80072c4 <_cleanup_r+0x8>)
 80072be:	f000 b8af 	b.w	8007420 <_fwalk_reent>
 80072c2:	bf00      	nop
 80072c4:	080071d9 	.word	0x080071d9

080072c8 <__sfmoreglue>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	2268      	movs	r2, #104	; 0x68
 80072cc:	1e4d      	subs	r5, r1, #1
 80072ce:	4355      	muls	r5, r2
 80072d0:	460e      	mov	r6, r1
 80072d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072d6:	f000 f96d 	bl	80075b4 <_malloc_r>
 80072da:	4604      	mov	r4, r0
 80072dc:	b140      	cbz	r0, 80072f0 <__sfmoreglue+0x28>
 80072de:	2100      	movs	r1, #0
 80072e0:	e9c0 1600 	strd	r1, r6, [r0]
 80072e4:	300c      	adds	r0, #12
 80072e6:	60a0      	str	r0, [r4, #8]
 80072e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072ec:	f000 f8ed 	bl	80074ca <memset>
 80072f0:	4620      	mov	r0, r4
 80072f2:	bd70      	pop	{r4, r5, r6, pc}

080072f4 <__sfp_lock_acquire>:
 80072f4:	4801      	ldr	r0, [pc, #4]	; (80072fc <__sfp_lock_acquire+0x8>)
 80072f6:	f000 b8d8 	b.w	80074aa <__retarget_lock_acquire_recursive>
 80072fa:	bf00      	nop
 80072fc:	200008a5 	.word	0x200008a5

08007300 <__sfp_lock_release>:
 8007300:	4801      	ldr	r0, [pc, #4]	; (8007308 <__sfp_lock_release+0x8>)
 8007302:	f000 b8d3 	b.w	80074ac <__retarget_lock_release_recursive>
 8007306:	bf00      	nop
 8007308:	200008a5 	.word	0x200008a5

0800730c <__sinit_lock_acquire>:
 800730c:	4801      	ldr	r0, [pc, #4]	; (8007314 <__sinit_lock_acquire+0x8>)
 800730e:	f000 b8cc 	b.w	80074aa <__retarget_lock_acquire_recursive>
 8007312:	bf00      	nop
 8007314:	200008a6 	.word	0x200008a6

08007318 <__sinit_lock_release>:
 8007318:	4801      	ldr	r0, [pc, #4]	; (8007320 <__sinit_lock_release+0x8>)
 800731a:	f000 b8c7 	b.w	80074ac <__retarget_lock_release_recursive>
 800731e:	bf00      	nop
 8007320:	200008a6 	.word	0x200008a6

08007324 <__sinit>:
 8007324:	b510      	push	{r4, lr}
 8007326:	4604      	mov	r4, r0
 8007328:	f7ff fff0 	bl	800730c <__sinit_lock_acquire>
 800732c:	69a3      	ldr	r3, [r4, #24]
 800732e:	b11b      	cbz	r3, 8007338 <__sinit+0x14>
 8007330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007334:	f7ff bff0 	b.w	8007318 <__sinit_lock_release>
 8007338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800733c:	6523      	str	r3, [r4, #80]	; 0x50
 800733e:	4b13      	ldr	r3, [pc, #76]	; (800738c <__sinit+0x68>)
 8007340:	4a13      	ldr	r2, [pc, #76]	; (8007390 <__sinit+0x6c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	62a2      	str	r2, [r4, #40]	; 0x28
 8007346:	42a3      	cmp	r3, r4
 8007348:	bf04      	itt	eq
 800734a:	2301      	moveq	r3, #1
 800734c:	61a3      	streq	r3, [r4, #24]
 800734e:	4620      	mov	r0, r4
 8007350:	f000 f820 	bl	8007394 <__sfp>
 8007354:	6060      	str	r0, [r4, #4]
 8007356:	4620      	mov	r0, r4
 8007358:	f000 f81c 	bl	8007394 <__sfp>
 800735c:	60a0      	str	r0, [r4, #8]
 800735e:	4620      	mov	r0, r4
 8007360:	f000 f818 	bl	8007394 <__sfp>
 8007364:	2200      	movs	r2, #0
 8007366:	60e0      	str	r0, [r4, #12]
 8007368:	2104      	movs	r1, #4
 800736a:	6860      	ldr	r0, [r4, #4]
 800736c:	f7ff ff82 	bl	8007274 <std>
 8007370:	68a0      	ldr	r0, [r4, #8]
 8007372:	2201      	movs	r2, #1
 8007374:	2109      	movs	r1, #9
 8007376:	f7ff ff7d 	bl	8007274 <std>
 800737a:	68e0      	ldr	r0, [r4, #12]
 800737c:	2202      	movs	r2, #2
 800737e:	2112      	movs	r1, #18
 8007380:	f7ff ff78 	bl	8007274 <std>
 8007384:	2301      	movs	r3, #1
 8007386:	61a3      	str	r3, [r4, #24]
 8007388:	e7d2      	b.n	8007330 <__sinit+0xc>
 800738a:	bf00      	nop
 800738c:	0800a600 	.word	0x0800a600
 8007390:	080072bd 	.word	0x080072bd

08007394 <__sfp>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	4607      	mov	r7, r0
 8007398:	f7ff ffac 	bl	80072f4 <__sfp_lock_acquire>
 800739c:	4b1e      	ldr	r3, [pc, #120]	; (8007418 <__sfp+0x84>)
 800739e:	681e      	ldr	r6, [r3, #0]
 80073a0:	69b3      	ldr	r3, [r6, #24]
 80073a2:	b913      	cbnz	r3, 80073aa <__sfp+0x16>
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7ff ffbd 	bl	8007324 <__sinit>
 80073aa:	3648      	adds	r6, #72	; 0x48
 80073ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	d503      	bpl.n	80073bc <__sfp+0x28>
 80073b4:	6833      	ldr	r3, [r6, #0]
 80073b6:	b30b      	cbz	r3, 80073fc <__sfp+0x68>
 80073b8:	6836      	ldr	r6, [r6, #0]
 80073ba:	e7f7      	b.n	80073ac <__sfp+0x18>
 80073bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073c0:	b9d5      	cbnz	r5, 80073f8 <__sfp+0x64>
 80073c2:	4b16      	ldr	r3, [pc, #88]	; (800741c <__sfp+0x88>)
 80073c4:	60e3      	str	r3, [r4, #12]
 80073c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073ca:	6665      	str	r5, [r4, #100]	; 0x64
 80073cc:	f000 f86c 	bl	80074a8 <__retarget_lock_init_recursive>
 80073d0:	f7ff ff96 	bl	8007300 <__sfp_lock_release>
 80073d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073dc:	6025      	str	r5, [r4, #0]
 80073de:	61a5      	str	r5, [r4, #24]
 80073e0:	2208      	movs	r2, #8
 80073e2:	4629      	mov	r1, r5
 80073e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073e8:	f000 f86f 	bl	80074ca <memset>
 80073ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073f4:	4620      	mov	r0, r4
 80073f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f8:	3468      	adds	r4, #104	; 0x68
 80073fa:	e7d9      	b.n	80073b0 <__sfp+0x1c>
 80073fc:	2104      	movs	r1, #4
 80073fe:	4638      	mov	r0, r7
 8007400:	f7ff ff62 	bl	80072c8 <__sfmoreglue>
 8007404:	4604      	mov	r4, r0
 8007406:	6030      	str	r0, [r6, #0]
 8007408:	2800      	cmp	r0, #0
 800740a:	d1d5      	bne.n	80073b8 <__sfp+0x24>
 800740c:	f7ff ff78 	bl	8007300 <__sfp_lock_release>
 8007410:	230c      	movs	r3, #12
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	e7ee      	b.n	80073f4 <__sfp+0x60>
 8007416:	bf00      	nop
 8007418:	0800a600 	.word	0x0800a600
 800741c:	ffff0001 	.word	0xffff0001

08007420 <_fwalk_reent>:
 8007420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007424:	4606      	mov	r6, r0
 8007426:	4688      	mov	r8, r1
 8007428:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800742c:	2700      	movs	r7, #0
 800742e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007432:	f1b9 0901 	subs.w	r9, r9, #1
 8007436:	d505      	bpl.n	8007444 <_fwalk_reent+0x24>
 8007438:	6824      	ldr	r4, [r4, #0]
 800743a:	2c00      	cmp	r4, #0
 800743c:	d1f7      	bne.n	800742e <_fwalk_reent+0xe>
 800743e:	4638      	mov	r0, r7
 8007440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007444:	89ab      	ldrh	r3, [r5, #12]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d907      	bls.n	800745a <_fwalk_reent+0x3a>
 800744a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800744e:	3301      	adds	r3, #1
 8007450:	d003      	beq.n	800745a <_fwalk_reent+0x3a>
 8007452:	4629      	mov	r1, r5
 8007454:	4630      	mov	r0, r6
 8007456:	47c0      	blx	r8
 8007458:	4307      	orrs	r7, r0
 800745a:	3568      	adds	r5, #104	; 0x68
 800745c:	e7e9      	b.n	8007432 <_fwalk_reent+0x12>
	...

08007460 <__libc_init_array>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4d0d      	ldr	r5, [pc, #52]	; (8007498 <__libc_init_array+0x38>)
 8007464:	4c0d      	ldr	r4, [pc, #52]	; (800749c <__libc_init_array+0x3c>)
 8007466:	1b64      	subs	r4, r4, r5
 8007468:	10a4      	asrs	r4, r4, #2
 800746a:	2600      	movs	r6, #0
 800746c:	42a6      	cmp	r6, r4
 800746e:	d109      	bne.n	8007484 <__libc_init_array+0x24>
 8007470:	4d0b      	ldr	r5, [pc, #44]	; (80074a0 <__libc_init_array+0x40>)
 8007472:	4c0c      	ldr	r4, [pc, #48]	; (80074a4 <__libc_init_array+0x44>)
 8007474:	f003 f810 	bl	800a498 <_init>
 8007478:	1b64      	subs	r4, r4, r5
 800747a:	10a4      	asrs	r4, r4, #2
 800747c:	2600      	movs	r6, #0
 800747e:	42a6      	cmp	r6, r4
 8007480:	d105      	bne.n	800748e <__libc_init_array+0x2e>
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	f855 3b04 	ldr.w	r3, [r5], #4
 8007488:	4798      	blx	r3
 800748a:	3601      	adds	r6, #1
 800748c:	e7ee      	b.n	800746c <__libc_init_array+0xc>
 800748e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007492:	4798      	blx	r3
 8007494:	3601      	adds	r6, #1
 8007496:	e7f2      	b.n	800747e <__libc_init_array+0x1e>
 8007498:	0800a984 	.word	0x0800a984
 800749c:	0800a984 	.word	0x0800a984
 80074a0:	0800a984 	.word	0x0800a984
 80074a4:	0800a988 	.word	0x0800a988

080074a8 <__retarget_lock_init_recursive>:
 80074a8:	4770      	bx	lr

080074aa <__retarget_lock_acquire_recursive>:
 80074aa:	4770      	bx	lr

080074ac <__retarget_lock_release_recursive>:
 80074ac:	4770      	bx	lr

080074ae <memcpy>:
 80074ae:	440a      	add	r2, r1
 80074b0:	4291      	cmp	r1, r2
 80074b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80074b6:	d100      	bne.n	80074ba <memcpy+0xc>
 80074b8:	4770      	bx	lr
 80074ba:	b510      	push	{r4, lr}
 80074bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074c4:	4291      	cmp	r1, r2
 80074c6:	d1f9      	bne.n	80074bc <memcpy+0xe>
 80074c8:	bd10      	pop	{r4, pc}

080074ca <memset>:
 80074ca:	4402      	add	r2, r0
 80074cc:	4603      	mov	r3, r0
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d100      	bne.n	80074d4 <memset+0xa>
 80074d2:	4770      	bx	lr
 80074d4:	f803 1b01 	strb.w	r1, [r3], #1
 80074d8:	e7f9      	b.n	80074ce <memset+0x4>
	...

080074dc <_free_r>:
 80074dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074de:	2900      	cmp	r1, #0
 80074e0:	d044      	beq.n	800756c <_free_r+0x90>
 80074e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e6:	9001      	str	r0, [sp, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f1a1 0404 	sub.w	r4, r1, #4
 80074ee:	bfb8      	it	lt
 80074f0:	18e4      	addlt	r4, r4, r3
 80074f2:	f001 ff77 	bl	80093e4 <__malloc_lock>
 80074f6:	4a1e      	ldr	r2, [pc, #120]	; (8007570 <_free_r+0x94>)
 80074f8:	9801      	ldr	r0, [sp, #4]
 80074fa:	6813      	ldr	r3, [r2, #0]
 80074fc:	b933      	cbnz	r3, 800750c <_free_r+0x30>
 80074fe:	6063      	str	r3, [r4, #4]
 8007500:	6014      	str	r4, [r2, #0]
 8007502:	b003      	add	sp, #12
 8007504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007508:	f001 bf72 	b.w	80093f0 <__malloc_unlock>
 800750c:	42a3      	cmp	r3, r4
 800750e:	d908      	bls.n	8007522 <_free_r+0x46>
 8007510:	6825      	ldr	r5, [r4, #0]
 8007512:	1961      	adds	r1, r4, r5
 8007514:	428b      	cmp	r3, r1
 8007516:	bf01      	itttt	eq
 8007518:	6819      	ldreq	r1, [r3, #0]
 800751a:	685b      	ldreq	r3, [r3, #4]
 800751c:	1949      	addeq	r1, r1, r5
 800751e:	6021      	streq	r1, [r4, #0]
 8007520:	e7ed      	b.n	80074fe <_free_r+0x22>
 8007522:	461a      	mov	r2, r3
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	b10b      	cbz	r3, 800752c <_free_r+0x50>
 8007528:	42a3      	cmp	r3, r4
 800752a:	d9fa      	bls.n	8007522 <_free_r+0x46>
 800752c:	6811      	ldr	r1, [r2, #0]
 800752e:	1855      	adds	r5, r2, r1
 8007530:	42a5      	cmp	r5, r4
 8007532:	d10b      	bne.n	800754c <_free_r+0x70>
 8007534:	6824      	ldr	r4, [r4, #0]
 8007536:	4421      	add	r1, r4
 8007538:	1854      	adds	r4, r2, r1
 800753a:	42a3      	cmp	r3, r4
 800753c:	6011      	str	r1, [r2, #0]
 800753e:	d1e0      	bne.n	8007502 <_free_r+0x26>
 8007540:	681c      	ldr	r4, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	6053      	str	r3, [r2, #4]
 8007546:	4421      	add	r1, r4
 8007548:	6011      	str	r1, [r2, #0]
 800754a:	e7da      	b.n	8007502 <_free_r+0x26>
 800754c:	d902      	bls.n	8007554 <_free_r+0x78>
 800754e:	230c      	movs	r3, #12
 8007550:	6003      	str	r3, [r0, #0]
 8007552:	e7d6      	b.n	8007502 <_free_r+0x26>
 8007554:	6825      	ldr	r5, [r4, #0]
 8007556:	1961      	adds	r1, r4, r5
 8007558:	428b      	cmp	r3, r1
 800755a:	bf04      	itt	eq
 800755c:	6819      	ldreq	r1, [r3, #0]
 800755e:	685b      	ldreq	r3, [r3, #4]
 8007560:	6063      	str	r3, [r4, #4]
 8007562:	bf04      	itt	eq
 8007564:	1949      	addeq	r1, r1, r5
 8007566:	6021      	streq	r1, [r4, #0]
 8007568:	6054      	str	r4, [r2, #4]
 800756a:	e7ca      	b.n	8007502 <_free_r+0x26>
 800756c:	b003      	add	sp, #12
 800756e:	bd30      	pop	{r4, r5, pc}
 8007570:	200008a8 	.word	0x200008a8

08007574 <sbrk_aligned>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	4e0e      	ldr	r6, [pc, #56]	; (80075b0 <sbrk_aligned+0x3c>)
 8007578:	460c      	mov	r4, r1
 800757a:	6831      	ldr	r1, [r6, #0]
 800757c:	4605      	mov	r5, r0
 800757e:	b911      	cbnz	r1, 8007586 <sbrk_aligned+0x12>
 8007580:	f000 fd84 	bl	800808c <_sbrk_r>
 8007584:	6030      	str	r0, [r6, #0]
 8007586:	4621      	mov	r1, r4
 8007588:	4628      	mov	r0, r5
 800758a:	f000 fd7f 	bl	800808c <_sbrk_r>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	d00a      	beq.n	80075a8 <sbrk_aligned+0x34>
 8007592:	1cc4      	adds	r4, r0, #3
 8007594:	f024 0403 	bic.w	r4, r4, #3
 8007598:	42a0      	cmp	r0, r4
 800759a:	d007      	beq.n	80075ac <sbrk_aligned+0x38>
 800759c:	1a21      	subs	r1, r4, r0
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 fd74 	bl	800808c <_sbrk_r>
 80075a4:	3001      	adds	r0, #1
 80075a6:	d101      	bne.n	80075ac <sbrk_aligned+0x38>
 80075a8:	f04f 34ff 	mov.w	r4, #4294967295
 80075ac:	4620      	mov	r0, r4
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	200008ac 	.word	0x200008ac

080075b4 <_malloc_r>:
 80075b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b8:	1ccd      	adds	r5, r1, #3
 80075ba:	f025 0503 	bic.w	r5, r5, #3
 80075be:	3508      	adds	r5, #8
 80075c0:	2d0c      	cmp	r5, #12
 80075c2:	bf38      	it	cc
 80075c4:	250c      	movcc	r5, #12
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	4607      	mov	r7, r0
 80075ca:	db01      	blt.n	80075d0 <_malloc_r+0x1c>
 80075cc:	42a9      	cmp	r1, r5
 80075ce:	d905      	bls.n	80075dc <_malloc_r+0x28>
 80075d0:	230c      	movs	r3, #12
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	2600      	movs	r6, #0
 80075d6:	4630      	mov	r0, r6
 80075d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075dc:	4e2e      	ldr	r6, [pc, #184]	; (8007698 <_malloc_r+0xe4>)
 80075de:	f001 ff01 	bl	80093e4 <__malloc_lock>
 80075e2:	6833      	ldr	r3, [r6, #0]
 80075e4:	461c      	mov	r4, r3
 80075e6:	bb34      	cbnz	r4, 8007636 <_malloc_r+0x82>
 80075e8:	4629      	mov	r1, r5
 80075ea:	4638      	mov	r0, r7
 80075ec:	f7ff ffc2 	bl	8007574 <sbrk_aligned>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	4604      	mov	r4, r0
 80075f4:	d14d      	bne.n	8007692 <_malloc_r+0xde>
 80075f6:	6834      	ldr	r4, [r6, #0]
 80075f8:	4626      	mov	r6, r4
 80075fa:	2e00      	cmp	r6, #0
 80075fc:	d140      	bne.n	8007680 <_malloc_r+0xcc>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	4631      	mov	r1, r6
 8007602:	4638      	mov	r0, r7
 8007604:	eb04 0803 	add.w	r8, r4, r3
 8007608:	f000 fd40 	bl	800808c <_sbrk_r>
 800760c:	4580      	cmp	r8, r0
 800760e:	d13a      	bne.n	8007686 <_malloc_r+0xd2>
 8007610:	6821      	ldr	r1, [r4, #0]
 8007612:	3503      	adds	r5, #3
 8007614:	1a6d      	subs	r5, r5, r1
 8007616:	f025 0503 	bic.w	r5, r5, #3
 800761a:	3508      	adds	r5, #8
 800761c:	2d0c      	cmp	r5, #12
 800761e:	bf38      	it	cc
 8007620:	250c      	movcc	r5, #12
 8007622:	4629      	mov	r1, r5
 8007624:	4638      	mov	r0, r7
 8007626:	f7ff ffa5 	bl	8007574 <sbrk_aligned>
 800762a:	3001      	adds	r0, #1
 800762c:	d02b      	beq.n	8007686 <_malloc_r+0xd2>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	442b      	add	r3, r5
 8007632:	6023      	str	r3, [r4, #0]
 8007634:	e00e      	b.n	8007654 <_malloc_r+0xa0>
 8007636:	6822      	ldr	r2, [r4, #0]
 8007638:	1b52      	subs	r2, r2, r5
 800763a:	d41e      	bmi.n	800767a <_malloc_r+0xc6>
 800763c:	2a0b      	cmp	r2, #11
 800763e:	d916      	bls.n	800766e <_malloc_r+0xba>
 8007640:	1961      	adds	r1, r4, r5
 8007642:	42a3      	cmp	r3, r4
 8007644:	6025      	str	r5, [r4, #0]
 8007646:	bf18      	it	ne
 8007648:	6059      	strne	r1, [r3, #4]
 800764a:	6863      	ldr	r3, [r4, #4]
 800764c:	bf08      	it	eq
 800764e:	6031      	streq	r1, [r6, #0]
 8007650:	5162      	str	r2, [r4, r5]
 8007652:	604b      	str	r3, [r1, #4]
 8007654:	4638      	mov	r0, r7
 8007656:	f104 060b 	add.w	r6, r4, #11
 800765a:	f001 fec9 	bl	80093f0 <__malloc_unlock>
 800765e:	f026 0607 	bic.w	r6, r6, #7
 8007662:	1d23      	adds	r3, r4, #4
 8007664:	1af2      	subs	r2, r6, r3
 8007666:	d0b6      	beq.n	80075d6 <_malloc_r+0x22>
 8007668:	1b9b      	subs	r3, r3, r6
 800766a:	50a3      	str	r3, [r4, r2]
 800766c:	e7b3      	b.n	80075d6 <_malloc_r+0x22>
 800766e:	6862      	ldr	r2, [r4, #4]
 8007670:	42a3      	cmp	r3, r4
 8007672:	bf0c      	ite	eq
 8007674:	6032      	streq	r2, [r6, #0]
 8007676:	605a      	strne	r2, [r3, #4]
 8007678:	e7ec      	b.n	8007654 <_malloc_r+0xa0>
 800767a:	4623      	mov	r3, r4
 800767c:	6864      	ldr	r4, [r4, #4]
 800767e:	e7b2      	b.n	80075e6 <_malloc_r+0x32>
 8007680:	4634      	mov	r4, r6
 8007682:	6876      	ldr	r6, [r6, #4]
 8007684:	e7b9      	b.n	80075fa <_malloc_r+0x46>
 8007686:	230c      	movs	r3, #12
 8007688:	603b      	str	r3, [r7, #0]
 800768a:	4638      	mov	r0, r7
 800768c:	f001 feb0 	bl	80093f0 <__malloc_unlock>
 8007690:	e7a1      	b.n	80075d6 <_malloc_r+0x22>
 8007692:	6025      	str	r5, [r4, #0]
 8007694:	e7de      	b.n	8007654 <_malloc_r+0xa0>
 8007696:	bf00      	nop
 8007698:	200008a8 	.word	0x200008a8

0800769c <__cvt>:
 800769c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a0:	ec55 4b10 	vmov	r4, r5, d0
 80076a4:	2d00      	cmp	r5, #0
 80076a6:	460e      	mov	r6, r1
 80076a8:	4619      	mov	r1, r3
 80076aa:	462b      	mov	r3, r5
 80076ac:	bfbb      	ittet	lt
 80076ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076b2:	461d      	movlt	r5, r3
 80076b4:	2300      	movge	r3, #0
 80076b6:	232d      	movlt	r3, #45	; 0x2d
 80076b8:	700b      	strb	r3, [r1, #0]
 80076ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076c0:	4691      	mov	r9, r2
 80076c2:	f023 0820 	bic.w	r8, r3, #32
 80076c6:	bfbc      	itt	lt
 80076c8:	4622      	movlt	r2, r4
 80076ca:	4614      	movlt	r4, r2
 80076cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076d0:	d005      	beq.n	80076de <__cvt+0x42>
 80076d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076d6:	d100      	bne.n	80076da <__cvt+0x3e>
 80076d8:	3601      	adds	r6, #1
 80076da:	2102      	movs	r1, #2
 80076dc:	e000      	b.n	80076e0 <__cvt+0x44>
 80076de:	2103      	movs	r1, #3
 80076e0:	ab03      	add	r3, sp, #12
 80076e2:	9301      	str	r3, [sp, #4]
 80076e4:	ab02      	add	r3, sp, #8
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	ec45 4b10 	vmov	d0, r4, r5
 80076ec:	4653      	mov	r3, sl
 80076ee:	4632      	mov	r2, r6
 80076f0:	f001 f806 	bl	8008700 <_dtoa_r>
 80076f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076f8:	4607      	mov	r7, r0
 80076fa:	d102      	bne.n	8007702 <__cvt+0x66>
 80076fc:	f019 0f01 	tst.w	r9, #1
 8007700:	d022      	beq.n	8007748 <__cvt+0xac>
 8007702:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007706:	eb07 0906 	add.w	r9, r7, r6
 800770a:	d110      	bne.n	800772e <__cvt+0x92>
 800770c:	783b      	ldrb	r3, [r7, #0]
 800770e:	2b30      	cmp	r3, #48	; 0x30
 8007710:	d10a      	bne.n	8007728 <__cvt+0x8c>
 8007712:	2200      	movs	r2, #0
 8007714:	2300      	movs	r3, #0
 8007716:	4620      	mov	r0, r4
 8007718:	4629      	mov	r1, r5
 800771a:	f7f9 f9ed 	bl	8000af8 <__aeabi_dcmpeq>
 800771e:	b918      	cbnz	r0, 8007728 <__cvt+0x8c>
 8007720:	f1c6 0601 	rsb	r6, r6, #1
 8007724:	f8ca 6000 	str.w	r6, [sl]
 8007728:	f8da 3000 	ldr.w	r3, [sl]
 800772c:	4499      	add	r9, r3
 800772e:	2200      	movs	r2, #0
 8007730:	2300      	movs	r3, #0
 8007732:	4620      	mov	r0, r4
 8007734:	4629      	mov	r1, r5
 8007736:	f7f9 f9df 	bl	8000af8 <__aeabi_dcmpeq>
 800773a:	b108      	cbz	r0, 8007740 <__cvt+0xa4>
 800773c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007740:	2230      	movs	r2, #48	; 0x30
 8007742:	9b03      	ldr	r3, [sp, #12]
 8007744:	454b      	cmp	r3, r9
 8007746:	d307      	bcc.n	8007758 <__cvt+0xbc>
 8007748:	9b03      	ldr	r3, [sp, #12]
 800774a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800774c:	1bdb      	subs	r3, r3, r7
 800774e:	4638      	mov	r0, r7
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	b004      	add	sp, #16
 8007754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007758:	1c59      	adds	r1, r3, #1
 800775a:	9103      	str	r1, [sp, #12]
 800775c:	701a      	strb	r2, [r3, #0]
 800775e:	e7f0      	b.n	8007742 <__cvt+0xa6>

08007760 <__exponent>:
 8007760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007762:	4603      	mov	r3, r0
 8007764:	2900      	cmp	r1, #0
 8007766:	bfb8      	it	lt
 8007768:	4249      	neglt	r1, r1
 800776a:	f803 2b02 	strb.w	r2, [r3], #2
 800776e:	bfb4      	ite	lt
 8007770:	222d      	movlt	r2, #45	; 0x2d
 8007772:	222b      	movge	r2, #43	; 0x2b
 8007774:	2909      	cmp	r1, #9
 8007776:	7042      	strb	r2, [r0, #1]
 8007778:	dd2a      	ble.n	80077d0 <__exponent+0x70>
 800777a:	f10d 0407 	add.w	r4, sp, #7
 800777e:	46a4      	mov	ip, r4
 8007780:	270a      	movs	r7, #10
 8007782:	46a6      	mov	lr, r4
 8007784:	460a      	mov	r2, r1
 8007786:	fb91 f6f7 	sdiv	r6, r1, r7
 800778a:	fb07 1516 	mls	r5, r7, r6, r1
 800778e:	3530      	adds	r5, #48	; 0x30
 8007790:	2a63      	cmp	r2, #99	; 0x63
 8007792:	f104 34ff 	add.w	r4, r4, #4294967295
 8007796:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800779a:	4631      	mov	r1, r6
 800779c:	dcf1      	bgt.n	8007782 <__exponent+0x22>
 800779e:	3130      	adds	r1, #48	; 0x30
 80077a0:	f1ae 0502 	sub.w	r5, lr, #2
 80077a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077a8:	1c44      	adds	r4, r0, #1
 80077aa:	4629      	mov	r1, r5
 80077ac:	4561      	cmp	r1, ip
 80077ae:	d30a      	bcc.n	80077c6 <__exponent+0x66>
 80077b0:	f10d 0209 	add.w	r2, sp, #9
 80077b4:	eba2 020e 	sub.w	r2, r2, lr
 80077b8:	4565      	cmp	r5, ip
 80077ba:	bf88      	it	hi
 80077bc:	2200      	movhi	r2, #0
 80077be:	4413      	add	r3, r2
 80077c0:	1a18      	subs	r0, r3, r0
 80077c2:	b003      	add	sp, #12
 80077c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077ce:	e7ed      	b.n	80077ac <__exponent+0x4c>
 80077d0:	2330      	movs	r3, #48	; 0x30
 80077d2:	3130      	adds	r1, #48	; 0x30
 80077d4:	7083      	strb	r3, [r0, #2]
 80077d6:	70c1      	strb	r1, [r0, #3]
 80077d8:	1d03      	adds	r3, r0, #4
 80077da:	e7f1      	b.n	80077c0 <__exponent+0x60>

080077dc <_printf_float>:
 80077dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e0:	ed2d 8b02 	vpush	{d8}
 80077e4:	b08d      	sub	sp, #52	; 0x34
 80077e6:	460c      	mov	r4, r1
 80077e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077ec:	4616      	mov	r6, r2
 80077ee:	461f      	mov	r7, r3
 80077f0:	4605      	mov	r5, r0
 80077f2:	f001 fd73 	bl	80092dc <_localeconv_r>
 80077f6:	f8d0 a000 	ldr.w	sl, [r0]
 80077fa:	4650      	mov	r0, sl
 80077fc:	f7f8 fcfa 	bl	80001f4 <strlen>
 8007800:	2300      	movs	r3, #0
 8007802:	930a      	str	r3, [sp, #40]	; 0x28
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	9305      	str	r3, [sp, #20]
 8007808:	f8d8 3000 	ldr.w	r3, [r8]
 800780c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007810:	3307      	adds	r3, #7
 8007812:	f023 0307 	bic.w	r3, r3, #7
 8007816:	f103 0208 	add.w	r2, r3, #8
 800781a:	f8c8 2000 	str.w	r2, [r8]
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007826:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800782a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800782e:	9307      	str	r3, [sp, #28]
 8007830:	f8cd 8018 	str.w	r8, [sp, #24]
 8007834:	ee08 0a10 	vmov	s16, r0
 8007838:	4b9f      	ldr	r3, [pc, #636]	; (8007ab8 <_printf_float+0x2dc>)
 800783a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800783e:	f04f 32ff 	mov.w	r2, #4294967295
 8007842:	f7f9 f98b 	bl	8000b5c <__aeabi_dcmpun>
 8007846:	bb88      	cbnz	r0, 80078ac <_printf_float+0xd0>
 8007848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800784c:	4b9a      	ldr	r3, [pc, #616]	; (8007ab8 <_printf_float+0x2dc>)
 800784e:	f04f 32ff 	mov.w	r2, #4294967295
 8007852:	f7f9 f965 	bl	8000b20 <__aeabi_dcmple>
 8007856:	bb48      	cbnz	r0, 80078ac <_printf_float+0xd0>
 8007858:	2200      	movs	r2, #0
 800785a:	2300      	movs	r3, #0
 800785c:	4640      	mov	r0, r8
 800785e:	4649      	mov	r1, r9
 8007860:	f7f9 f954 	bl	8000b0c <__aeabi_dcmplt>
 8007864:	b110      	cbz	r0, 800786c <_printf_float+0x90>
 8007866:	232d      	movs	r3, #45	; 0x2d
 8007868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800786c:	4b93      	ldr	r3, [pc, #588]	; (8007abc <_printf_float+0x2e0>)
 800786e:	4894      	ldr	r0, [pc, #592]	; (8007ac0 <_printf_float+0x2e4>)
 8007870:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007874:	bf94      	ite	ls
 8007876:	4698      	movls	r8, r3
 8007878:	4680      	movhi	r8, r0
 800787a:	2303      	movs	r3, #3
 800787c:	6123      	str	r3, [r4, #16]
 800787e:	9b05      	ldr	r3, [sp, #20]
 8007880:	f023 0204 	bic.w	r2, r3, #4
 8007884:	6022      	str	r2, [r4, #0]
 8007886:	f04f 0900 	mov.w	r9, #0
 800788a:	9700      	str	r7, [sp, #0]
 800788c:	4633      	mov	r3, r6
 800788e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007890:	4621      	mov	r1, r4
 8007892:	4628      	mov	r0, r5
 8007894:	f000 f9d8 	bl	8007c48 <_printf_common>
 8007898:	3001      	adds	r0, #1
 800789a:	f040 8090 	bne.w	80079be <_printf_float+0x1e2>
 800789e:	f04f 30ff 	mov.w	r0, #4294967295
 80078a2:	b00d      	add	sp, #52	; 0x34
 80078a4:	ecbd 8b02 	vpop	{d8}
 80078a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ac:	4642      	mov	r2, r8
 80078ae:	464b      	mov	r3, r9
 80078b0:	4640      	mov	r0, r8
 80078b2:	4649      	mov	r1, r9
 80078b4:	f7f9 f952 	bl	8000b5c <__aeabi_dcmpun>
 80078b8:	b140      	cbz	r0, 80078cc <_printf_float+0xf0>
 80078ba:	464b      	mov	r3, r9
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bfbc      	itt	lt
 80078c0:	232d      	movlt	r3, #45	; 0x2d
 80078c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078c6:	487f      	ldr	r0, [pc, #508]	; (8007ac4 <_printf_float+0x2e8>)
 80078c8:	4b7f      	ldr	r3, [pc, #508]	; (8007ac8 <_printf_float+0x2ec>)
 80078ca:	e7d1      	b.n	8007870 <_printf_float+0x94>
 80078cc:	6863      	ldr	r3, [r4, #4]
 80078ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078d2:	9206      	str	r2, [sp, #24]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	d13f      	bne.n	8007958 <_printf_float+0x17c>
 80078d8:	2306      	movs	r3, #6
 80078da:	6063      	str	r3, [r4, #4]
 80078dc:	9b05      	ldr	r3, [sp, #20]
 80078de:	6861      	ldr	r1, [r4, #4]
 80078e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078e4:	2300      	movs	r3, #0
 80078e6:	9303      	str	r3, [sp, #12]
 80078e8:	ab0a      	add	r3, sp, #40	; 0x28
 80078ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078ee:	ab09      	add	r3, sp, #36	; 0x24
 80078f0:	ec49 8b10 	vmov	d0, r8, r9
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	6022      	str	r2, [r4, #0]
 80078f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078fc:	4628      	mov	r0, r5
 80078fe:	f7ff fecd 	bl	800769c <__cvt>
 8007902:	9b06      	ldr	r3, [sp, #24]
 8007904:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007906:	2b47      	cmp	r3, #71	; 0x47
 8007908:	4680      	mov	r8, r0
 800790a:	d108      	bne.n	800791e <_printf_float+0x142>
 800790c:	1cc8      	adds	r0, r1, #3
 800790e:	db02      	blt.n	8007916 <_printf_float+0x13a>
 8007910:	6863      	ldr	r3, [r4, #4]
 8007912:	4299      	cmp	r1, r3
 8007914:	dd41      	ble.n	800799a <_printf_float+0x1be>
 8007916:	f1ab 0b02 	sub.w	fp, fp, #2
 800791a:	fa5f fb8b 	uxtb.w	fp, fp
 800791e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007922:	d820      	bhi.n	8007966 <_printf_float+0x18a>
 8007924:	3901      	subs	r1, #1
 8007926:	465a      	mov	r2, fp
 8007928:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800792c:	9109      	str	r1, [sp, #36]	; 0x24
 800792e:	f7ff ff17 	bl	8007760 <__exponent>
 8007932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007934:	1813      	adds	r3, r2, r0
 8007936:	2a01      	cmp	r2, #1
 8007938:	4681      	mov	r9, r0
 800793a:	6123      	str	r3, [r4, #16]
 800793c:	dc02      	bgt.n	8007944 <_printf_float+0x168>
 800793e:	6822      	ldr	r2, [r4, #0]
 8007940:	07d2      	lsls	r2, r2, #31
 8007942:	d501      	bpl.n	8007948 <_printf_float+0x16c>
 8007944:	3301      	adds	r3, #1
 8007946:	6123      	str	r3, [r4, #16]
 8007948:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800794c:	2b00      	cmp	r3, #0
 800794e:	d09c      	beq.n	800788a <_printf_float+0xae>
 8007950:	232d      	movs	r3, #45	; 0x2d
 8007952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007956:	e798      	b.n	800788a <_printf_float+0xae>
 8007958:	9a06      	ldr	r2, [sp, #24]
 800795a:	2a47      	cmp	r2, #71	; 0x47
 800795c:	d1be      	bne.n	80078dc <_printf_float+0x100>
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1bc      	bne.n	80078dc <_printf_float+0x100>
 8007962:	2301      	movs	r3, #1
 8007964:	e7b9      	b.n	80078da <_printf_float+0xfe>
 8007966:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800796a:	d118      	bne.n	800799e <_printf_float+0x1c2>
 800796c:	2900      	cmp	r1, #0
 800796e:	6863      	ldr	r3, [r4, #4]
 8007970:	dd0b      	ble.n	800798a <_printf_float+0x1ae>
 8007972:	6121      	str	r1, [r4, #16]
 8007974:	b913      	cbnz	r3, 800797c <_printf_float+0x1a0>
 8007976:	6822      	ldr	r2, [r4, #0]
 8007978:	07d0      	lsls	r0, r2, #31
 800797a:	d502      	bpl.n	8007982 <_printf_float+0x1a6>
 800797c:	3301      	adds	r3, #1
 800797e:	440b      	add	r3, r1
 8007980:	6123      	str	r3, [r4, #16]
 8007982:	65a1      	str	r1, [r4, #88]	; 0x58
 8007984:	f04f 0900 	mov.w	r9, #0
 8007988:	e7de      	b.n	8007948 <_printf_float+0x16c>
 800798a:	b913      	cbnz	r3, 8007992 <_printf_float+0x1b6>
 800798c:	6822      	ldr	r2, [r4, #0]
 800798e:	07d2      	lsls	r2, r2, #31
 8007990:	d501      	bpl.n	8007996 <_printf_float+0x1ba>
 8007992:	3302      	adds	r3, #2
 8007994:	e7f4      	b.n	8007980 <_printf_float+0x1a4>
 8007996:	2301      	movs	r3, #1
 8007998:	e7f2      	b.n	8007980 <_printf_float+0x1a4>
 800799a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800799e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a0:	4299      	cmp	r1, r3
 80079a2:	db05      	blt.n	80079b0 <_printf_float+0x1d4>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	6121      	str	r1, [r4, #16]
 80079a8:	07d8      	lsls	r0, r3, #31
 80079aa:	d5ea      	bpl.n	8007982 <_printf_float+0x1a6>
 80079ac:	1c4b      	adds	r3, r1, #1
 80079ae:	e7e7      	b.n	8007980 <_printf_float+0x1a4>
 80079b0:	2900      	cmp	r1, #0
 80079b2:	bfd4      	ite	le
 80079b4:	f1c1 0202 	rsble	r2, r1, #2
 80079b8:	2201      	movgt	r2, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	e7e0      	b.n	8007980 <_printf_float+0x1a4>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	055a      	lsls	r2, r3, #21
 80079c2:	d407      	bmi.n	80079d4 <_printf_float+0x1f8>
 80079c4:	6923      	ldr	r3, [r4, #16]
 80079c6:	4642      	mov	r2, r8
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	d12c      	bne.n	8007a2c <_printf_float+0x250>
 80079d2:	e764      	b.n	800789e <_printf_float+0xc2>
 80079d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079d8:	f240 80e0 	bls.w	8007b9c <_printf_float+0x3c0>
 80079dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079e0:	2200      	movs	r2, #0
 80079e2:	2300      	movs	r3, #0
 80079e4:	f7f9 f888 	bl	8000af8 <__aeabi_dcmpeq>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d034      	beq.n	8007a56 <_printf_float+0x27a>
 80079ec:	4a37      	ldr	r2, [pc, #220]	; (8007acc <_printf_float+0x2f0>)
 80079ee:	2301      	movs	r3, #1
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	f43f af51 	beq.w	800789e <_printf_float+0xc2>
 80079fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a00:	429a      	cmp	r2, r3
 8007a02:	db02      	blt.n	8007a0a <_printf_float+0x22e>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	07d8      	lsls	r0, r3, #31
 8007a08:	d510      	bpl.n	8007a2c <_printf_float+0x250>
 8007a0a:	ee18 3a10 	vmov	r3, s16
 8007a0e:	4652      	mov	r2, sl
 8007a10:	4631      	mov	r1, r6
 8007a12:	4628      	mov	r0, r5
 8007a14:	47b8      	blx	r7
 8007a16:	3001      	adds	r0, #1
 8007a18:	f43f af41 	beq.w	800789e <_printf_float+0xc2>
 8007a1c:	f04f 0800 	mov.w	r8, #0
 8007a20:	f104 091a 	add.w	r9, r4, #26
 8007a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a26:	3b01      	subs	r3, #1
 8007a28:	4543      	cmp	r3, r8
 8007a2a:	dc09      	bgt.n	8007a40 <_printf_float+0x264>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	079b      	lsls	r3, r3, #30
 8007a30:	f100 8105 	bmi.w	8007c3e <_printf_float+0x462>
 8007a34:	68e0      	ldr	r0, [r4, #12]
 8007a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a38:	4298      	cmp	r0, r3
 8007a3a:	bfb8      	it	lt
 8007a3c:	4618      	movlt	r0, r3
 8007a3e:	e730      	b.n	80078a2 <_printf_float+0xc6>
 8007a40:	2301      	movs	r3, #1
 8007a42:	464a      	mov	r2, r9
 8007a44:	4631      	mov	r1, r6
 8007a46:	4628      	mov	r0, r5
 8007a48:	47b8      	blx	r7
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	f43f af27 	beq.w	800789e <_printf_float+0xc2>
 8007a50:	f108 0801 	add.w	r8, r8, #1
 8007a54:	e7e6      	b.n	8007a24 <_printf_float+0x248>
 8007a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	dc39      	bgt.n	8007ad0 <_printf_float+0x2f4>
 8007a5c:	4a1b      	ldr	r2, [pc, #108]	; (8007acc <_printf_float+0x2f0>)
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4631      	mov	r1, r6
 8007a62:	4628      	mov	r0, r5
 8007a64:	47b8      	blx	r7
 8007a66:	3001      	adds	r0, #1
 8007a68:	f43f af19 	beq.w	800789e <_printf_float+0xc2>
 8007a6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a70:	4313      	orrs	r3, r2
 8007a72:	d102      	bne.n	8007a7a <_printf_float+0x29e>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	07d9      	lsls	r1, r3, #31
 8007a78:	d5d8      	bpl.n	8007a2c <_printf_float+0x250>
 8007a7a:	ee18 3a10 	vmov	r3, s16
 8007a7e:	4652      	mov	r2, sl
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	f43f af09 	beq.w	800789e <_printf_float+0xc2>
 8007a8c:	f04f 0900 	mov.w	r9, #0
 8007a90:	f104 0a1a 	add.w	sl, r4, #26
 8007a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a96:	425b      	negs	r3, r3
 8007a98:	454b      	cmp	r3, r9
 8007a9a:	dc01      	bgt.n	8007aa0 <_printf_float+0x2c4>
 8007a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9e:	e792      	b.n	80079c6 <_printf_float+0x1ea>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	4652      	mov	r2, sl
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	47b8      	blx	r7
 8007aaa:	3001      	adds	r0, #1
 8007aac:	f43f aef7 	beq.w	800789e <_printf_float+0xc2>
 8007ab0:	f109 0901 	add.w	r9, r9, #1
 8007ab4:	e7ee      	b.n	8007a94 <_printf_float+0x2b8>
 8007ab6:	bf00      	nop
 8007ab8:	7fefffff 	.word	0x7fefffff
 8007abc:	0800a604 	.word	0x0800a604
 8007ac0:	0800a608 	.word	0x0800a608
 8007ac4:	0800a610 	.word	0x0800a610
 8007ac8:	0800a60c 	.word	0x0800a60c
 8007acc:	0800a614 	.word	0x0800a614
 8007ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ad2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	bfa8      	it	ge
 8007ad8:	461a      	movge	r2, r3
 8007ada:	2a00      	cmp	r2, #0
 8007adc:	4691      	mov	r9, r2
 8007ade:	dc37      	bgt.n	8007b50 <_printf_float+0x374>
 8007ae0:	f04f 0b00 	mov.w	fp, #0
 8007ae4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ae8:	f104 021a 	add.w	r2, r4, #26
 8007aec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	eba3 0309 	sub.w	r3, r3, r9
 8007af4:	455b      	cmp	r3, fp
 8007af6:	dc33      	bgt.n	8007b60 <_printf_float+0x384>
 8007af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007afc:	429a      	cmp	r2, r3
 8007afe:	db3b      	blt.n	8007b78 <_printf_float+0x39c>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	07da      	lsls	r2, r3, #31
 8007b04:	d438      	bmi.n	8007b78 <_printf_float+0x39c>
 8007b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b08:	9a05      	ldr	r2, [sp, #20]
 8007b0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b0c:	1a9a      	subs	r2, r3, r2
 8007b0e:	eba3 0901 	sub.w	r9, r3, r1
 8007b12:	4591      	cmp	r9, r2
 8007b14:	bfa8      	it	ge
 8007b16:	4691      	movge	r9, r2
 8007b18:	f1b9 0f00 	cmp.w	r9, #0
 8007b1c:	dc35      	bgt.n	8007b8a <_printf_float+0x3ae>
 8007b1e:	f04f 0800 	mov.w	r8, #0
 8007b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b26:	f104 0a1a 	add.w	sl, r4, #26
 8007b2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b2e:	1a9b      	subs	r3, r3, r2
 8007b30:	eba3 0309 	sub.w	r3, r3, r9
 8007b34:	4543      	cmp	r3, r8
 8007b36:	f77f af79 	ble.w	8007a2c <_printf_float+0x250>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4652      	mov	r2, sl
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4628      	mov	r0, r5
 8007b42:	47b8      	blx	r7
 8007b44:	3001      	adds	r0, #1
 8007b46:	f43f aeaa 	beq.w	800789e <_printf_float+0xc2>
 8007b4a:	f108 0801 	add.w	r8, r8, #1
 8007b4e:	e7ec      	b.n	8007b2a <_printf_float+0x34e>
 8007b50:	4613      	mov	r3, r2
 8007b52:	4631      	mov	r1, r6
 8007b54:	4642      	mov	r2, r8
 8007b56:	4628      	mov	r0, r5
 8007b58:	47b8      	blx	r7
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d1c0      	bne.n	8007ae0 <_printf_float+0x304>
 8007b5e:	e69e      	b.n	800789e <_printf_float+0xc2>
 8007b60:	2301      	movs	r3, #1
 8007b62:	4631      	mov	r1, r6
 8007b64:	4628      	mov	r0, r5
 8007b66:	9205      	str	r2, [sp, #20]
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f43f ae97 	beq.w	800789e <_printf_float+0xc2>
 8007b70:	9a05      	ldr	r2, [sp, #20]
 8007b72:	f10b 0b01 	add.w	fp, fp, #1
 8007b76:	e7b9      	b.n	8007aec <_printf_float+0x310>
 8007b78:	ee18 3a10 	vmov	r3, s16
 8007b7c:	4652      	mov	r2, sl
 8007b7e:	4631      	mov	r1, r6
 8007b80:	4628      	mov	r0, r5
 8007b82:	47b8      	blx	r7
 8007b84:	3001      	adds	r0, #1
 8007b86:	d1be      	bne.n	8007b06 <_printf_float+0x32a>
 8007b88:	e689      	b.n	800789e <_printf_float+0xc2>
 8007b8a:	9a05      	ldr	r2, [sp, #20]
 8007b8c:	464b      	mov	r3, r9
 8007b8e:	4442      	add	r2, r8
 8007b90:	4631      	mov	r1, r6
 8007b92:	4628      	mov	r0, r5
 8007b94:	47b8      	blx	r7
 8007b96:	3001      	adds	r0, #1
 8007b98:	d1c1      	bne.n	8007b1e <_printf_float+0x342>
 8007b9a:	e680      	b.n	800789e <_printf_float+0xc2>
 8007b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b9e:	2a01      	cmp	r2, #1
 8007ba0:	dc01      	bgt.n	8007ba6 <_printf_float+0x3ca>
 8007ba2:	07db      	lsls	r3, r3, #31
 8007ba4:	d538      	bpl.n	8007c18 <_printf_float+0x43c>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4642      	mov	r2, r8
 8007baa:	4631      	mov	r1, r6
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b8      	blx	r7
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	f43f ae74 	beq.w	800789e <_printf_float+0xc2>
 8007bb6:	ee18 3a10 	vmov	r3, s16
 8007bba:	4652      	mov	r2, sl
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	47b8      	blx	r7
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	f43f ae6b 	beq.w	800789e <_printf_float+0xc2>
 8007bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f7f8 ff92 	bl	8000af8 <__aeabi_dcmpeq>
 8007bd4:	b9d8      	cbnz	r0, 8007c0e <_printf_float+0x432>
 8007bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd8:	f108 0201 	add.w	r2, r8, #1
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	4631      	mov	r1, r6
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b8      	blx	r7
 8007be4:	3001      	adds	r0, #1
 8007be6:	d10e      	bne.n	8007c06 <_printf_float+0x42a>
 8007be8:	e659      	b.n	800789e <_printf_float+0xc2>
 8007bea:	2301      	movs	r3, #1
 8007bec:	4652      	mov	r2, sl
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	f43f ae52 	beq.w	800789e <_printf_float+0xc2>
 8007bfa:	f108 0801 	add.w	r8, r8, #1
 8007bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c00:	3b01      	subs	r3, #1
 8007c02:	4543      	cmp	r3, r8
 8007c04:	dcf1      	bgt.n	8007bea <_printf_float+0x40e>
 8007c06:	464b      	mov	r3, r9
 8007c08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c0c:	e6dc      	b.n	80079c8 <_printf_float+0x1ec>
 8007c0e:	f04f 0800 	mov.w	r8, #0
 8007c12:	f104 0a1a 	add.w	sl, r4, #26
 8007c16:	e7f2      	b.n	8007bfe <_printf_float+0x422>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	4642      	mov	r2, r8
 8007c1c:	e7df      	b.n	8007bde <_printf_float+0x402>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	464a      	mov	r2, r9
 8007c22:	4631      	mov	r1, r6
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b8      	blx	r7
 8007c28:	3001      	adds	r0, #1
 8007c2a:	f43f ae38 	beq.w	800789e <_printf_float+0xc2>
 8007c2e:	f108 0801 	add.w	r8, r8, #1
 8007c32:	68e3      	ldr	r3, [r4, #12]
 8007c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c36:	1a5b      	subs	r3, r3, r1
 8007c38:	4543      	cmp	r3, r8
 8007c3a:	dcf0      	bgt.n	8007c1e <_printf_float+0x442>
 8007c3c:	e6fa      	b.n	8007a34 <_printf_float+0x258>
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	f104 0919 	add.w	r9, r4, #25
 8007c46:	e7f4      	b.n	8007c32 <_printf_float+0x456>

08007c48 <_printf_common>:
 8007c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4c:	4616      	mov	r6, r2
 8007c4e:	4699      	mov	r9, r3
 8007c50:	688a      	ldr	r2, [r1, #8]
 8007c52:	690b      	ldr	r3, [r1, #16]
 8007c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	bfb8      	it	lt
 8007c5c:	4613      	movlt	r3, r2
 8007c5e:	6033      	str	r3, [r6, #0]
 8007c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c64:	4607      	mov	r7, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	b10a      	cbz	r2, 8007c6e <_printf_common+0x26>
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	6033      	str	r3, [r6, #0]
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	0699      	lsls	r1, r3, #26
 8007c72:	bf42      	ittt	mi
 8007c74:	6833      	ldrmi	r3, [r6, #0]
 8007c76:	3302      	addmi	r3, #2
 8007c78:	6033      	strmi	r3, [r6, #0]
 8007c7a:	6825      	ldr	r5, [r4, #0]
 8007c7c:	f015 0506 	ands.w	r5, r5, #6
 8007c80:	d106      	bne.n	8007c90 <_printf_common+0x48>
 8007c82:	f104 0a19 	add.w	sl, r4, #25
 8007c86:	68e3      	ldr	r3, [r4, #12]
 8007c88:	6832      	ldr	r2, [r6, #0]
 8007c8a:	1a9b      	subs	r3, r3, r2
 8007c8c:	42ab      	cmp	r3, r5
 8007c8e:	dc26      	bgt.n	8007cde <_printf_common+0x96>
 8007c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c94:	1e13      	subs	r3, r2, #0
 8007c96:	6822      	ldr	r2, [r4, #0]
 8007c98:	bf18      	it	ne
 8007c9a:	2301      	movne	r3, #1
 8007c9c:	0692      	lsls	r2, r2, #26
 8007c9e:	d42b      	bmi.n	8007cf8 <_printf_common+0xb0>
 8007ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	47c0      	blx	r8
 8007caa:	3001      	adds	r0, #1
 8007cac:	d01e      	beq.n	8007cec <_printf_common+0xa4>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	68e5      	ldr	r5, [r4, #12]
 8007cb2:	6832      	ldr	r2, [r6, #0]
 8007cb4:	f003 0306 	and.w	r3, r3, #6
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	bf08      	it	eq
 8007cbc:	1aad      	subeq	r5, r5, r2
 8007cbe:	68a3      	ldr	r3, [r4, #8]
 8007cc0:	6922      	ldr	r2, [r4, #16]
 8007cc2:	bf0c      	ite	eq
 8007cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cc8:	2500      	movne	r5, #0
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	bfc4      	itt	gt
 8007cce:	1a9b      	subgt	r3, r3, r2
 8007cd0:	18ed      	addgt	r5, r5, r3
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	341a      	adds	r4, #26
 8007cd6:	42b5      	cmp	r5, r6
 8007cd8:	d11a      	bne.n	8007d10 <_printf_common+0xc8>
 8007cda:	2000      	movs	r0, #0
 8007cdc:	e008      	b.n	8007cf0 <_printf_common+0xa8>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4652      	mov	r2, sl
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	47c0      	blx	r8
 8007ce8:	3001      	adds	r0, #1
 8007cea:	d103      	bne.n	8007cf4 <_printf_common+0xac>
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf4:	3501      	adds	r5, #1
 8007cf6:	e7c6      	b.n	8007c86 <_printf_common+0x3e>
 8007cf8:	18e1      	adds	r1, r4, r3
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	2030      	movs	r0, #48	; 0x30
 8007cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d02:	4422      	add	r2, r4
 8007d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	e7c7      	b.n	8007ca0 <_printf_common+0x58>
 8007d10:	2301      	movs	r3, #1
 8007d12:	4622      	mov	r2, r4
 8007d14:	4649      	mov	r1, r9
 8007d16:	4638      	mov	r0, r7
 8007d18:	47c0      	blx	r8
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	d0e6      	beq.n	8007cec <_printf_common+0xa4>
 8007d1e:	3601      	adds	r6, #1
 8007d20:	e7d9      	b.n	8007cd6 <_printf_common+0x8e>
	...

08007d24 <_printf_i>:
 8007d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	7e0f      	ldrb	r7, [r1, #24]
 8007d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d2c:	2f78      	cmp	r7, #120	; 0x78
 8007d2e:	4691      	mov	r9, r2
 8007d30:	4680      	mov	r8, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	469a      	mov	sl, r3
 8007d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d3a:	d807      	bhi.n	8007d4c <_printf_i+0x28>
 8007d3c:	2f62      	cmp	r7, #98	; 0x62
 8007d3e:	d80a      	bhi.n	8007d56 <_printf_i+0x32>
 8007d40:	2f00      	cmp	r7, #0
 8007d42:	f000 80d8 	beq.w	8007ef6 <_printf_i+0x1d2>
 8007d46:	2f58      	cmp	r7, #88	; 0x58
 8007d48:	f000 80a3 	beq.w	8007e92 <_printf_i+0x16e>
 8007d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d54:	e03a      	b.n	8007dcc <_printf_i+0xa8>
 8007d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d5a:	2b15      	cmp	r3, #21
 8007d5c:	d8f6      	bhi.n	8007d4c <_printf_i+0x28>
 8007d5e:	a101      	add	r1, pc, #4	; (adr r1, 8007d64 <_printf_i+0x40>)
 8007d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d64:	08007dbd 	.word	0x08007dbd
 8007d68:	08007dd1 	.word	0x08007dd1
 8007d6c:	08007d4d 	.word	0x08007d4d
 8007d70:	08007d4d 	.word	0x08007d4d
 8007d74:	08007d4d 	.word	0x08007d4d
 8007d78:	08007d4d 	.word	0x08007d4d
 8007d7c:	08007dd1 	.word	0x08007dd1
 8007d80:	08007d4d 	.word	0x08007d4d
 8007d84:	08007d4d 	.word	0x08007d4d
 8007d88:	08007d4d 	.word	0x08007d4d
 8007d8c:	08007d4d 	.word	0x08007d4d
 8007d90:	08007edd 	.word	0x08007edd
 8007d94:	08007e01 	.word	0x08007e01
 8007d98:	08007ebf 	.word	0x08007ebf
 8007d9c:	08007d4d 	.word	0x08007d4d
 8007da0:	08007d4d 	.word	0x08007d4d
 8007da4:	08007eff 	.word	0x08007eff
 8007da8:	08007d4d 	.word	0x08007d4d
 8007dac:	08007e01 	.word	0x08007e01
 8007db0:	08007d4d 	.word	0x08007d4d
 8007db4:	08007d4d 	.word	0x08007d4d
 8007db8:	08007ec7 	.word	0x08007ec7
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	1d1a      	adds	r2, r3, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	602a      	str	r2, [r5, #0]
 8007dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0a3      	b.n	8007f18 <_printf_i+0x1f4>
 8007dd0:	6820      	ldr	r0, [r4, #0]
 8007dd2:	6829      	ldr	r1, [r5, #0]
 8007dd4:	0606      	lsls	r6, r0, #24
 8007dd6:	f101 0304 	add.w	r3, r1, #4
 8007dda:	d50a      	bpl.n	8007df2 <_printf_i+0xce>
 8007ddc:	680e      	ldr	r6, [r1, #0]
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	2e00      	cmp	r6, #0
 8007de2:	da03      	bge.n	8007dec <_printf_i+0xc8>
 8007de4:	232d      	movs	r3, #45	; 0x2d
 8007de6:	4276      	negs	r6, r6
 8007de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dec:	485e      	ldr	r0, [pc, #376]	; (8007f68 <_printf_i+0x244>)
 8007dee:	230a      	movs	r3, #10
 8007df0:	e019      	b.n	8007e26 <_printf_i+0x102>
 8007df2:	680e      	ldr	r6, [r1, #0]
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dfa:	bf18      	it	ne
 8007dfc:	b236      	sxthne	r6, r6
 8007dfe:	e7ef      	b.n	8007de0 <_printf_i+0xbc>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	6820      	ldr	r0, [r4, #0]
 8007e04:	1d19      	adds	r1, r3, #4
 8007e06:	6029      	str	r1, [r5, #0]
 8007e08:	0601      	lsls	r1, r0, #24
 8007e0a:	d501      	bpl.n	8007e10 <_printf_i+0xec>
 8007e0c:	681e      	ldr	r6, [r3, #0]
 8007e0e:	e002      	b.n	8007e16 <_printf_i+0xf2>
 8007e10:	0646      	lsls	r6, r0, #25
 8007e12:	d5fb      	bpl.n	8007e0c <_printf_i+0xe8>
 8007e14:	881e      	ldrh	r6, [r3, #0]
 8007e16:	4854      	ldr	r0, [pc, #336]	; (8007f68 <_printf_i+0x244>)
 8007e18:	2f6f      	cmp	r7, #111	; 0x6f
 8007e1a:	bf0c      	ite	eq
 8007e1c:	2308      	moveq	r3, #8
 8007e1e:	230a      	movne	r3, #10
 8007e20:	2100      	movs	r1, #0
 8007e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e26:	6865      	ldr	r5, [r4, #4]
 8007e28:	60a5      	str	r5, [r4, #8]
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	bfa2      	ittt	ge
 8007e2e:	6821      	ldrge	r1, [r4, #0]
 8007e30:	f021 0104 	bicge.w	r1, r1, #4
 8007e34:	6021      	strge	r1, [r4, #0]
 8007e36:	b90e      	cbnz	r6, 8007e3c <_printf_i+0x118>
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	d04d      	beq.n	8007ed8 <_printf_i+0x1b4>
 8007e3c:	4615      	mov	r5, r2
 8007e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e42:	fb03 6711 	mls	r7, r3, r1, r6
 8007e46:	5dc7      	ldrb	r7, [r0, r7]
 8007e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e4c:	4637      	mov	r7, r6
 8007e4e:	42bb      	cmp	r3, r7
 8007e50:	460e      	mov	r6, r1
 8007e52:	d9f4      	bls.n	8007e3e <_printf_i+0x11a>
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d10b      	bne.n	8007e70 <_printf_i+0x14c>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	07de      	lsls	r6, r3, #31
 8007e5c:	d508      	bpl.n	8007e70 <_printf_i+0x14c>
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	6861      	ldr	r1, [r4, #4]
 8007e62:	4299      	cmp	r1, r3
 8007e64:	bfde      	ittt	le
 8007e66:	2330      	movle	r3, #48	; 0x30
 8007e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e70:	1b52      	subs	r2, r2, r5
 8007e72:	6122      	str	r2, [r4, #16]
 8007e74:	f8cd a000 	str.w	sl, [sp]
 8007e78:	464b      	mov	r3, r9
 8007e7a:	aa03      	add	r2, sp, #12
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4640      	mov	r0, r8
 8007e80:	f7ff fee2 	bl	8007c48 <_printf_common>
 8007e84:	3001      	adds	r0, #1
 8007e86:	d14c      	bne.n	8007f22 <_printf_i+0x1fe>
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	b004      	add	sp, #16
 8007e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e92:	4835      	ldr	r0, [pc, #212]	; (8007f68 <_printf_i+0x244>)
 8007e94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e98:	6829      	ldr	r1, [r5, #0]
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ea0:	6029      	str	r1, [r5, #0]
 8007ea2:	061d      	lsls	r5, r3, #24
 8007ea4:	d514      	bpl.n	8007ed0 <_printf_i+0x1ac>
 8007ea6:	07df      	lsls	r7, r3, #31
 8007ea8:	bf44      	itt	mi
 8007eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8007eae:	6023      	strmi	r3, [r4, #0]
 8007eb0:	b91e      	cbnz	r6, 8007eba <_printf_i+0x196>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	f023 0320 	bic.w	r3, r3, #32
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	2310      	movs	r3, #16
 8007ebc:	e7b0      	b.n	8007e20 <_printf_i+0xfc>
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	f043 0320 	orr.w	r3, r3, #32
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	2378      	movs	r3, #120	; 0x78
 8007ec8:	4828      	ldr	r0, [pc, #160]	; (8007f6c <_printf_i+0x248>)
 8007eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ece:	e7e3      	b.n	8007e98 <_printf_i+0x174>
 8007ed0:	0659      	lsls	r1, r3, #25
 8007ed2:	bf48      	it	mi
 8007ed4:	b2b6      	uxthmi	r6, r6
 8007ed6:	e7e6      	b.n	8007ea6 <_printf_i+0x182>
 8007ed8:	4615      	mov	r5, r2
 8007eda:	e7bb      	b.n	8007e54 <_printf_i+0x130>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	6826      	ldr	r6, [r4, #0]
 8007ee0:	6961      	ldr	r1, [r4, #20]
 8007ee2:	1d18      	adds	r0, r3, #4
 8007ee4:	6028      	str	r0, [r5, #0]
 8007ee6:	0635      	lsls	r5, r6, #24
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	d501      	bpl.n	8007ef0 <_printf_i+0x1cc>
 8007eec:	6019      	str	r1, [r3, #0]
 8007eee:	e002      	b.n	8007ef6 <_printf_i+0x1d2>
 8007ef0:	0670      	lsls	r0, r6, #25
 8007ef2:	d5fb      	bpl.n	8007eec <_printf_i+0x1c8>
 8007ef4:	8019      	strh	r1, [r3, #0]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	4615      	mov	r5, r2
 8007efc:	e7ba      	b.n	8007e74 <_printf_i+0x150>
 8007efe:	682b      	ldr	r3, [r5, #0]
 8007f00:	1d1a      	adds	r2, r3, #4
 8007f02:	602a      	str	r2, [r5, #0]
 8007f04:	681d      	ldr	r5, [r3, #0]
 8007f06:	6862      	ldr	r2, [r4, #4]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f7f8 f980 	bl	8000210 <memchr>
 8007f10:	b108      	cbz	r0, 8007f16 <_printf_i+0x1f2>
 8007f12:	1b40      	subs	r0, r0, r5
 8007f14:	6060      	str	r0, [r4, #4]
 8007f16:	6863      	ldr	r3, [r4, #4]
 8007f18:	6123      	str	r3, [r4, #16]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f20:	e7a8      	b.n	8007e74 <_printf_i+0x150>
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	462a      	mov	r2, r5
 8007f26:	4649      	mov	r1, r9
 8007f28:	4640      	mov	r0, r8
 8007f2a:	47d0      	blx	sl
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d0ab      	beq.n	8007e88 <_printf_i+0x164>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	079b      	lsls	r3, r3, #30
 8007f34:	d413      	bmi.n	8007f5e <_printf_i+0x23a>
 8007f36:	68e0      	ldr	r0, [r4, #12]
 8007f38:	9b03      	ldr	r3, [sp, #12]
 8007f3a:	4298      	cmp	r0, r3
 8007f3c:	bfb8      	it	lt
 8007f3e:	4618      	movlt	r0, r3
 8007f40:	e7a4      	b.n	8007e8c <_printf_i+0x168>
 8007f42:	2301      	movs	r3, #1
 8007f44:	4632      	mov	r2, r6
 8007f46:	4649      	mov	r1, r9
 8007f48:	4640      	mov	r0, r8
 8007f4a:	47d0      	blx	sl
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d09b      	beq.n	8007e88 <_printf_i+0x164>
 8007f50:	3501      	adds	r5, #1
 8007f52:	68e3      	ldr	r3, [r4, #12]
 8007f54:	9903      	ldr	r1, [sp, #12]
 8007f56:	1a5b      	subs	r3, r3, r1
 8007f58:	42ab      	cmp	r3, r5
 8007f5a:	dcf2      	bgt.n	8007f42 <_printf_i+0x21e>
 8007f5c:	e7eb      	b.n	8007f36 <_printf_i+0x212>
 8007f5e:	2500      	movs	r5, #0
 8007f60:	f104 0619 	add.w	r6, r4, #25
 8007f64:	e7f5      	b.n	8007f52 <_printf_i+0x22e>
 8007f66:	bf00      	nop
 8007f68:	0800a616 	.word	0x0800a616
 8007f6c:	0800a627 	.word	0x0800a627

08007f70 <iprintf>:
 8007f70:	b40f      	push	{r0, r1, r2, r3}
 8007f72:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <iprintf+0x2c>)
 8007f74:	b513      	push	{r0, r1, r4, lr}
 8007f76:	681c      	ldr	r4, [r3, #0]
 8007f78:	b124      	cbz	r4, 8007f84 <iprintf+0x14>
 8007f7a:	69a3      	ldr	r3, [r4, #24]
 8007f7c:	b913      	cbnz	r3, 8007f84 <iprintf+0x14>
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f7ff f9d0 	bl	8007324 <__sinit>
 8007f84:	ab05      	add	r3, sp, #20
 8007f86:	9a04      	ldr	r2, [sp, #16]
 8007f88:	68a1      	ldr	r1, [r4, #8]
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f001 ff55 	bl	8009e3c <_vfiprintf_r>
 8007f92:	b002      	add	sp, #8
 8007f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f98:	b004      	add	sp, #16
 8007f9a:	4770      	bx	lr
 8007f9c:	20000010 	.word	0x20000010

08007fa0 <_puts_r>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	460e      	mov	r6, r1
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	b118      	cbz	r0, 8007fb0 <_puts_r+0x10>
 8007fa8:	6983      	ldr	r3, [r0, #24]
 8007faa:	b90b      	cbnz	r3, 8007fb0 <_puts_r+0x10>
 8007fac:	f7ff f9ba 	bl	8007324 <__sinit>
 8007fb0:	69ab      	ldr	r3, [r5, #24]
 8007fb2:	68ac      	ldr	r4, [r5, #8]
 8007fb4:	b913      	cbnz	r3, 8007fbc <_puts_r+0x1c>
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f7ff f9b4 	bl	8007324 <__sinit>
 8007fbc:	4b2c      	ldr	r3, [pc, #176]	; (8008070 <_puts_r+0xd0>)
 8007fbe:	429c      	cmp	r4, r3
 8007fc0:	d120      	bne.n	8008004 <_puts_r+0x64>
 8007fc2:	686c      	ldr	r4, [r5, #4]
 8007fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fc6:	07db      	lsls	r3, r3, #31
 8007fc8:	d405      	bmi.n	8007fd6 <_puts_r+0x36>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	0598      	lsls	r0, r3, #22
 8007fce:	d402      	bmi.n	8007fd6 <_puts_r+0x36>
 8007fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fd2:	f7ff fa6a 	bl	80074aa <__retarget_lock_acquire_recursive>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	0719      	lsls	r1, r3, #28
 8007fda:	d51d      	bpl.n	8008018 <_puts_r+0x78>
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	b1db      	cbz	r3, 8008018 <_puts_r+0x78>
 8007fe0:	3e01      	subs	r6, #1
 8007fe2:	68a3      	ldr	r3, [r4, #8]
 8007fe4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	60a3      	str	r3, [r4, #8]
 8007fec:	bb39      	cbnz	r1, 800803e <_puts_r+0x9e>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	da38      	bge.n	8008064 <_puts_r+0xc4>
 8007ff2:	4622      	mov	r2, r4
 8007ff4:	210a      	movs	r1, #10
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 fa14 	bl	8008424 <__swbuf_r>
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d011      	beq.n	8008024 <_puts_r+0x84>
 8008000:	250a      	movs	r5, #10
 8008002:	e011      	b.n	8008028 <_puts_r+0x88>
 8008004:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <_puts_r+0xd4>)
 8008006:	429c      	cmp	r4, r3
 8008008:	d101      	bne.n	800800e <_puts_r+0x6e>
 800800a:	68ac      	ldr	r4, [r5, #8]
 800800c:	e7da      	b.n	8007fc4 <_puts_r+0x24>
 800800e:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <_puts_r+0xd8>)
 8008010:	429c      	cmp	r4, r3
 8008012:	bf08      	it	eq
 8008014:	68ec      	ldreq	r4, [r5, #12]
 8008016:	e7d5      	b.n	8007fc4 <_puts_r+0x24>
 8008018:	4621      	mov	r1, r4
 800801a:	4628      	mov	r0, r5
 800801c:	f000 fa66 	bl	80084ec <__swsetup_r>
 8008020:	2800      	cmp	r0, #0
 8008022:	d0dd      	beq.n	8007fe0 <_puts_r+0x40>
 8008024:	f04f 35ff 	mov.w	r5, #4294967295
 8008028:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800802a:	07da      	lsls	r2, r3, #31
 800802c:	d405      	bmi.n	800803a <_puts_r+0x9a>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	059b      	lsls	r3, r3, #22
 8008032:	d402      	bmi.n	800803a <_puts_r+0x9a>
 8008034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008036:	f7ff fa39 	bl	80074ac <__retarget_lock_release_recursive>
 800803a:	4628      	mov	r0, r5
 800803c:	bd70      	pop	{r4, r5, r6, pc}
 800803e:	2b00      	cmp	r3, #0
 8008040:	da04      	bge.n	800804c <_puts_r+0xac>
 8008042:	69a2      	ldr	r2, [r4, #24]
 8008044:	429a      	cmp	r2, r3
 8008046:	dc06      	bgt.n	8008056 <_puts_r+0xb6>
 8008048:	290a      	cmp	r1, #10
 800804a:	d004      	beq.n	8008056 <_puts_r+0xb6>
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	6022      	str	r2, [r4, #0]
 8008052:	7019      	strb	r1, [r3, #0]
 8008054:	e7c5      	b.n	8007fe2 <_puts_r+0x42>
 8008056:	4622      	mov	r2, r4
 8008058:	4628      	mov	r0, r5
 800805a:	f000 f9e3 	bl	8008424 <__swbuf_r>
 800805e:	3001      	adds	r0, #1
 8008060:	d1bf      	bne.n	8007fe2 <_puts_r+0x42>
 8008062:	e7df      	b.n	8008024 <_puts_r+0x84>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	250a      	movs	r5, #10
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	6022      	str	r2, [r4, #0]
 800806c:	701d      	strb	r5, [r3, #0]
 800806e:	e7db      	b.n	8008028 <_puts_r+0x88>
 8008070:	0800a5c0 	.word	0x0800a5c0
 8008074:	0800a5e0 	.word	0x0800a5e0
 8008078:	0800a5a0 	.word	0x0800a5a0

0800807c <puts>:
 800807c:	4b02      	ldr	r3, [pc, #8]	; (8008088 <puts+0xc>)
 800807e:	4601      	mov	r1, r0
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	f7ff bf8d 	b.w	8007fa0 <_puts_r>
 8008086:	bf00      	nop
 8008088:	20000010 	.word	0x20000010

0800808c <_sbrk_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4d06      	ldr	r5, [pc, #24]	; (80080a8 <_sbrk_r+0x1c>)
 8008090:	2300      	movs	r3, #0
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	f7fb faa6 	bl	80035e8 <_sbrk>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_sbrk_r+0x1a>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_sbrk_r+0x1a>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	200008b0 	.word	0x200008b0

080080ac <siprintf>:
 80080ac:	b40e      	push	{r1, r2, r3}
 80080ae:	b500      	push	{lr}
 80080b0:	b09c      	sub	sp, #112	; 0x70
 80080b2:	ab1d      	add	r3, sp, #116	; 0x74
 80080b4:	9002      	str	r0, [sp, #8]
 80080b6:	9006      	str	r0, [sp, #24]
 80080b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080bc:	4809      	ldr	r0, [pc, #36]	; (80080e4 <siprintf+0x38>)
 80080be:	9107      	str	r1, [sp, #28]
 80080c0:	9104      	str	r1, [sp, #16]
 80080c2:	4909      	ldr	r1, [pc, #36]	; (80080e8 <siprintf+0x3c>)
 80080c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c8:	9105      	str	r1, [sp, #20]
 80080ca:	6800      	ldr	r0, [r0, #0]
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	a902      	add	r1, sp, #8
 80080d0:	f001 fd8a 	bl	8009be8 <_svfiprintf_r>
 80080d4:	9b02      	ldr	r3, [sp, #8]
 80080d6:	2200      	movs	r2, #0
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	b01c      	add	sp, #112	; 0x70
 80080dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80080e0:	b003      	add	sp, #12
 80080e2:	4770      	bx	lr
 80080e4:	20000010 	.word	0x20000010
 80080e8:	ffff0208 	.word	0xffff0208

080080ec <__sread>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	460c      	mov	r4, r1
 80080f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f4:	f001 ffd2 	bl	800a09c <_read_r>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	bfab      	itete	ge
 80080fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008100:	181b      	addge	r3, r3, r0
 8008102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008106:	bfac      	ite	ge
 8008108:	6563      	strge	r3, [r4, #84]	; 0x54
 800810a:	81a3      	strhlt	r3, [r4, #12]
 800810c:	bd10      	pop	{r4, pc}

0800810e <__swrite>:
 800810e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008112:	461f      	mov	r7, r3
 8008114:	898b      	ldrh	r3, [r1, #12]
 8008116:	05db      	lsls	r3, r3, #23
 8008118:	4605      	mov	r5, r0
 800811a:	460c      	mov	r4, r1
 800811c:	4616      	mov	r6, r2
 800811e:	d505      	bpl.n	800812c <__swrite+0x1e>
 8008120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008124:	2302      	movs	r3, #2
 8008126:	2200      	movs	r2, #0
 8008128:	f001 f8dc 	bl	80092e4 <_lseek_r>
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008136:	81a3      	strh	r3, [r4, #12]
 8008138:	4632      	mov	r2, r6
 800813a:	463b      	mov	r3, r7
 800813c:	4628      	mov	r0, r5
 800813e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008142:	f000 b9c1 	b.w	80084c8 <_write_r>

08008146 <__sseek>:
 8008146:	b510      	push	{r4, lr}
 8008148:	460c      	mov	r4, r1
 800814a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814e:	f001 f8c9 	bl	80092e4 <_lseek_r>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	bf15      	itete	ne
 8008158:	6560      	strne	r0, [r4, #84]	; 0x54
 800815a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800815e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008162:	81a3      	strheq	r3, [r4, #12]
 8008164:	bf18      	it	ne
 8008166:	81a3      	strhne	r3, [r4, #12]
 8008168:	bd10      	pop	{r4, pc}

0800816a <__sclose>:
 800816a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816e:	f000 ba2b 	b.w	80085c8 <_close_r>

08008172 <__strtok_r>:
 8008172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008174:	b908      	cbnz	r0, 800817a <__strtok_r+0x8>
 8008176:	6810      	ldr	r0, [r2, #0]
 8008178:	b188      	cbz	r0, 800819e <__strtok_r+0x2c>
 800817a:	4604      	mov	r4, r0
 800817c:	4620      	mov	r0, r4
 800817e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008182:	460f      	mov	r7, r1
 8008184:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008188:	b91e      	cbnz	r6, 8008192 <__strtok_r+0x20>
 800818a:	b965      	cbnz	r5, 80081a6 <__strtok_r+0x34>
 800818c:	6015      	str	r5, [r2, #0]
 800818e:	4628      	mov	r0, r5
 8008190:	e005      	b.n	800819e <__strtok_r+0x2c>
 8008192:	42b5      	cmp	r5, r6
 8008194:	d1f6      	bne.n	8008184 <__strtok_r+0x12>
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1f0      	bne.n	800817c <__strtok_r+0xa>
 800819a:	6014      	str	r4, [r2, #0]
 800819c:	7003      	strb	r3, [r0, #0]
 800819e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a0:	461c      	mov	r4, r3
 80081a2:	e00c      	b.n	80081be <__strtok_r+0x4c>
 80081a4:	b915      	cbnz	r5, 80081ac <__strtok_r+0x3a>
 80081a6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081aa:	460e      	mov	r6, r1
 80081ac:	f816 5b01 	ldrb.w	r5, [r6], #1
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	d1f7      	bne.n	80081a4 <__strtok_r+0x32>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0f3      	beq.n	80081a0 <__strtok_r+0x2e>
 80081b8:	2300      	movs	r3, #0
 80081ba:	f804 3c01 	strb.w	r3, [r4, #-1]
 80081be:	6014      	str	r4, [r2, #0]
 80081c0:	e7ed      	b.n	800819e <__strtok_r+0x2c>

080081c2 <strtok_r>:
 80081c2:	2301      	movs	r3, #1
 80081c4:	f7ff bfd5 	b.w	8008172 <__strtok_r>

080081c8 <_strtol_l.constprop.0>:
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ce:	d001      	beq.n	80081d4 <_strtol_l.constprop.0+0xc>
 80081d0:	2b24      	cmp	r3, #36	; 0x24
 80081d2:	d906      	bls.n	80081e2 <_strtol_l.constprop.0+0x1a>
 80081d4:	f7fe ff74 	bl	80070c0 <__errno>
 80081d8:	2316      	movs	r3, #22
 80081da:	6003      	str	r3, [r0, #0]
 80081dc:	2000      	movs	r0, #0
 80081de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80082c8 <_strtol_l.constprop.0+0x100>
 80081e6:	460d      	mov	r5, r1
 80081e8:	462e      	mov	r6, r5
 80081ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80081f2:	f017 0708 	ands.w	r7, r7, #8
 80081f6:	d1f7      	bne.n	80081e8 <_strtol_l.constprop.0+0x20>
 80081f8:	2c2d      	cmp	r4, #45	; 0x2d
 80081fa:	d132      	bne.n	8008262 <_strtol_l.constprop.0+0x9a>
 80081fc:	782c      	ldrb	r4, [r5, #0]
 80081fe:	2701      	movs	r7, #1
 8008200:	1cb5      	adds	r5, r6, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d05b      	beq.n	80082be <_strtol_l.constprop.0+0xf6>
 8008206:	2b10      	cmp	r3, #16
 8008208:	d109      	bne.n	800821e <_strtol_l.constprop.0+0x56>
 800820a:	2c30      	cmp	r4, #48	; 0x30
 800820c:	d107      	bne.n	800821e <_strtol_l.constprop.0+0x56>
 800820e:	782c      	ldrb	r4, [r5, #0]
 8008210:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008214:	2c58      	cmp	r4, #88	; 0x58
 8008216:	d14d      	bne.n	80082b4 <_strtol_l.constprop.0+0xec>
 8008218:	786c      	ldrb	r4, [r5, #1]
 800821a:	2310      	movs	r3, #16
 800821c:	3502      	adds	r5, #2
 800821e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008222:	f108 38ff 	add.w	r8, r8, #4294967295
 8008226:	f04f 0c00 	mov.w	ip, #0
 800822a:	fbb8 f9f3 	udiv	r9, r8, r3
 800822e:	4666      	mov	r6, ip
 8008230:	fb03 8a19 	mls	sl, r3, r9, r8
 8008234:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008238:	f1be 0f09 	cmp.w	lr, #9
 800823c:	d816      	bhi.n	800826c <_strtol_l.constprop.0+0xa4>
 800823e:	4674      	mov	r4, lr
 8008240:	42a3      	cmp	r3, r4
 8008242:	dd24      	ble.n	800828e <_strtol_l.constprop.0+0xc6>
 8008244:	f1bc 0f00 	cmp.w	ip, #0
 8008248:	db1e      	blt.n	8008288 <_strtol_l.constprop.0+0xc0>
 800824a:	45b1      	cmp	r9, r6
 800824c:	d31c      	bcc.n	8008288 <_strtol_l.constprop.0+0xc0>
 800824e:	d101      	bne.n	8008254 <_strtol_l.constprop.0+0x8c>
 8008250:	45a2      	cmp	sl, r4
 8008252:	db19      	blt.n	8008288 <_strtol_l.constprop.0+0xc0>
 8008254:	fb06 4603 	mla	r6, r6, r3, r4
 8008258:	f04f 0c01 	mov.w	ip, #1
 800825c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008260:	e7e8      	b.n	8008234 <_strtol_l.constprop.0+0x6c>
 8008262:	2c2b      	cmp	r4, #43	; 0x2b
 8008264:	bf04      	itt	eq
 8008266:	782c      	ldrbeq	r4, [r5, #0]
 8008268:	1cb5      	addeq	r5, r6, #2
 800826a:	e7ca      	b.n	8008202 <_strtol_l.constprop.0+0x3a>
 800826c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008270:	f1be 0f19 	cmp.w	lr, #25
 8008274:	d801      	bhi.n	800827a <_strtol_l.constprop.0+0xb2>
 8008276:	3c37      	subs	r4, #55	; 0x37
 8008278:	e7e2      	b.n	8008240 <_strtol_l.constprop.0+0x78>
 800827a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800827e:	f1be 0f19 	cmp.w	lr, #25
 8008282:	d804      	bhi.n	800828e <_strtol_l.constprop.0+0xc6>
 8008284:	3c57      	subs	r4, #87	; 0x57
 8008286:	e7db      	b.n	8008240 <_strtol_l.constprop.0+0x78>
 8008288:	f04f 3cff 	mov.w	ip, #4294967295
 800828c:	e7e6      	b.n	800825c <_strtol_l.constprop.0+0x94>
 800828e:	f1bc 0f00 	cmp.w	ip, #0
 8008292:	da05      	bge.n	80082a0 <_strtol_l.constprop.0+0xd8>
 8008294:	2322      	movs	r3, #34	; 0x22
 8008296:	6003      	str	r3, [r0, #0]
 8008298:	4646      	mov	r6, r8
 800829a:	b942      	cbnz	r2, 80082ae <_strtol_l.constprop.0+0xe6>
 800829c:	4630      	mov	r0, r6
 800829e:	e79e      	b.n	80081de <_strtol_l.constprop.0+0x16>
 80082a0:	b107      	cbz	r7, 80082a4 <_strtol_l.constprop.0+0xdc>
 80082a2:	4276      	negs	r6, r6
 80082a4:	2a00      	cmp	r2, #0
 80082a6:	d0f9      	beq.n	800829c <_strtol_l.constprop.0+0xd4>
 80082a8:	f1bc 0f00 	cmp.w	ip, #0
 80082ac:	d000      	beq.n	80082b0 <_strtol_l.constprop.0+0xe8>
 80082ae:	1e69      	subs	r1, r5, #1
 80082b0:	6011      	str	r1, [r2, #0]
 80082b2:	e7f3      	b.n	800829c <_strtol_l.constprop.0+0xd4>
 80082b4:	2430      	movs	r4, #48	; 0x30
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1b1      	bne.n	800821e <_strtol_l.constprop.0+0x56>
 80082ba:	2308      	movs	r3, #8
 80082bc:	e7af      	b.n	800821e <_strtol_l.constprop.0+0x56>
 80082be:	2c30      	cmp	r4, #48	; 0x30
 80082c0:	d0a5      	beq.n	800820e <_strtol_l.constprop.0+0x46>
 80082c2:	230a      	movs	r3, #10
 80082c4:	e7ab      	b.n	800821e <_strtol_l.constprop.0+0x56>
 80082c6:	bf00      	nop
 80082c8:	0800a639 	.word	0x0800a639

080082cc <strtol>:
 80082cc:	4613      	mov	r3, r2
 80082ce:	460a      	mov	r2, r1
 80082d0:	4601      	mov	r1, r0
 80082d2:	4802      	ldr	r0, [pc, #8]	; (80082dc <strtol+0x10>)
 80082d4:	6800      	ldr	r0, [r0, #0]
 80082d6:	f7ff bf77 	b.w	80081c8 <_strtol_l.constprop.0>
 80082da:	bf00      	nop
 80082dc:	20000010 	.word	0x20000010

080082e0 <_strtoull_l.constprop.0>:
 80082e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	4692      	mov	sl, r2
 80082e6:	4a49      	ldr	r2, [pc, #292]	; (800840c <_strtoull_l.constprop.0+0x12c>)
 80082e8:	9001      	str	r0, [sp, #4]
 80082ea:	4689      	mov	r9, r1
 80082ec:	461d      	mov	r5, r3
 80082ee:	460e      	mov	r6, r1
 80082f0:	4633      	mov	r3, r6
 80082f2:	f816 4b01 	ldrb.w	r4, [r6], #1
 80082f6:	5ca7      	ldrb	r7, [r4, r2]
 80082f8:	f017 0708 	ands.w	r7, r7, #8
 80082fc:	d1f8      	bne.n	80082f0 <_strtoull_l.constprop.0+0x10>
 80082fe:	2c2d      	cmp	r4, #45	; 0x2d
 8008300:	d14a      	bne.n	8008398 <_strtoull_l.constprop.0+0xb8>
 8008302:	7834      	ldrb	r4, [r6, #0]
 8008304:	2701      	movs	r7, #1
 8008306:	1c9e      	adds	r6, r3, #2
 8008308:	2d00      	cmp	r5, #0
 800830a:	d07b      	beq.n	8008404 <_strtoull_l.constprop.0+0x124>
 800830c:	2d10      	cmp	r5, #16
 800830e:	d109      	bne.n	8008324 <_strtoull_l.constprop.0+0x44>
 8008310:	2c30      	cmp	r4, #48	; 0x30
 8008312:	d107      	bne.n	8008324 <_strtoull_l.constprop.0+0x44>
 8008314:	7833      	ldrb	r3, [r6, #0]
 8008316:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800831a:	2b58      	cmp	r3, #88	; 0x58
 800831c:	d16d      	bne.n	80083fa <_strtoull_l.constprop.0+0x11a>
 800831e:	7874      	ldrb	r4, [r6, #1]
 8008320:	2510      	movs	r5, #16
 8008322:	3602      	adds	r6, #2
 8008324:	ea4f 7be5 	mov.w	fp, r5, asr #31
 8008328:	462a      	mov	r2, r5
 800832a:	465b      	mov	r3, fp
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	f04f 31ff 	mov.w	r1, #4294967295
 8008334:	f7f8 fcc0 	bl	8000cb8 <__aeabi_uldivmod>
 8008338:	462a      	mov	r2, r5
 800833a:	9000      	str	r0, [sp, #0]
 800833c:	4688      	mov	r8, r1
 800833e:	465b      	mov	r3, fp
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
 8008344:	f04f 31ff 	mov.w	r1, #4294967295
 8008348:	f7f8 fcb6 	bl	8000cb8 <__aeabi_uldivmod>
 800834c:	2300      	movs	r3, #0
 800834e:	4618      	mov	r0, r3
 8008350:	4619      	mov	r1, r3
 8008352:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008356:	f1bc 0f09 	cmp.w	ip, #9
 800835a:	d822      	bhi.n	80083a2 <_strtoull_l.constprop.0+0xc2>
 800835c:	4664      	mov	r4, ip
 800835e:	42a5      	cmp	r5, r4
 8008360:	dd30      	ble.n	80083c4 <_strtoull_l.constprop.0+0xe4>
 8008362:	2b00      	cmp	r3, #0
 8008364:	db2b      	blt.n	80083be <_strtoull_l.constprop.0+0xde>
 8008366:	9b00      	ldr	r3, [sp, #0]
 8008368:	4283      	cmp	r3, r0
 800836a:	eb78 0301 	sbcs.w	r3, r8, r1
 800836e:	d326      	bcc.n	80083be <_strtoull_l.constprop.0+0xde>
 8008370:	9b00      	ldr	r3, [sp, #0]
 8008372:	4588      	cmp	r8, r1
 8008374:	bf08      	it	eq
 8008376:	4283      	cmpeq	r3, r0
 8008378:	d101      	bne.n	800837e <_strtoull_l.constprop.0+0x9e>
 800837a:	42a2      	cmp	r2, r4
 800837c:	db1f      	blt.n	80083be <_strtoull_l.constprop.0+0xde>
 800837e:	4369      	muls	r1, r5
 8008380:	fb00 110b 	mla	r1, r0, fp, r1
 8008384:	fba5 0300 	umull	r0, r3, r5, r0
 8008388:	4419      	add	r1, r3
 800838a:	1820      	adds	r0, r4, r0
 800838c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8008390:	2301      	movs	r3, #1
 8008392:	f816 4b01 	ldrb.w	r4, [r6], #1
 8008396:	e7dc      	b.n	8008352 <_strtoull_l.constprop.0+0x72>
 8008398:	2c2b      	cmp	r4, #43	; 0x2b
 800839a:	bf04      	itt	eq
 800839c:	7834      	ldrbeq	r4, [r6, #0]
 800839e:	1c9e      	addeq	r6, r3, #2
 80083a0:	e7b2      	b.n	8008308 <_strtoull_l.constprop.0+0x28>
 80083a2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80083a6:	f1bc 0f19 	cmp.w	ip, #25
 80083aa:	d801      	bhi.n	80083b0 <_strtoull_l.constprop.0+0xd0>
 80083ac:	3c37      	subs	r4, #55	; 0x37
 80083ae:	e7d6      	b.n	800835e <_strtoull_l.constprop.0+0x7e>
 80083b0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80083b4:	f1bc 0f19 	cmp.w	ip, #25
 80083b8:	d804      	bhi.n	80083c4 <_strtoull_l.constprop.0+0xe4>
 80083ba:	3c57      	subs	r4, #87	; 0x57
 80083bc:	e7cf      	b.n	800835e <_strtoull_l.constprop.0+0x7e>
 80083be:	f04f 33ff 	mov.w	r3, #4294967295
 80083c2:	e7e6      	b.n	8008392 <_strtoull_l.constprop.0+0xb2>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	da0b      	bge.n	80083e0 <_strtoull_l.constprop.0+0x100>
 80083c8:	9a01      	ldr	r2, [sp, #4]
 80083ca:	2322      	movs	r3, #34	; 0x22
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	4601      	mov	r1, r0
 80083d4:	f1ba 0f00 	cmp.w	sl, #0
 80083d8:	d10a      	bne.n	80083f0 <_strtoull_l.constprop.0+0x110>
 80083da:	b003      	add	sp, #12
 80083dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e0:	b117      	cbz	r7, 80083e8 <_strtoull_l.constprop.0+0x108>
 80083e2:	4240      	negs	r0, r0
 80083e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80083e8:	f1ba 0f00 	cmp.w	sl, #0
 80083ec:	d0f5      	beq.n	80083da <_strtoull_l.constprop.0+0xfa>
 80083ee:	b10b      	cbz	r3, 80083f4 <_strtoull_l.constprop.0+0x114>
 80083f0:	f106 39ff 	add.w	r9, r6, #4294967295
 80083f4:	f8ca 9000 	str.w	r9, [sl]
 80083f8:	e7ef      	b.n	80083da <_strtoull_l.constprop.0+0xfa>
 80083fa:	2430      	movs	r4, #48	; 0x30
 80083fc:	2d00      	cmp	r5, #0
 80083fe:	d191      	bne.n	8008324 <_strtoull_l.constprop.0+0x44>
 8008400:	2508      	movs	r5, #8
 8008402:	e78f      	b.n	8008324 <_strtoull_l.constprop.0+0x44>
 8008404:	2c30      	cmp	r4, #48	; 0x30
 8008406:	d085      	beq.n	8008314 <_strtoull_l.constprop.0+0x34>
 8008408:	250a      	movs	r5, #10
 800840a:	e78b      	b.n	8008324 <_strtoull_l.constprop.0+0x44>
 800840c:	0800a639 	.word	0x0800a639

08008410 <strtoull>:
 8008410:	4613      	mov	r3, r2
 8008412:	460a      	mov	r2, r1
 8008414:	4601      	mov	r1, r0
 8008416:	4802      	ldr	r0, [pc, #8]	; (8008420 <strtoull+0x10>)
 8008418:	6800      	ldr	r0, [r0, #0]
 800841a:	f7ff bf61 	b.w	80082e0 <_strtoull_l.constprop.0>
 800841e:	bf00      	nop
 8008420:	20000010 	.word	0x20000010

08008424 <__swbuf_r>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	460e      	mov	r6, r1
 8008428:	4614      	mov	r4, r2
 800842a:	4605      	mov	r5, r0
 800842c:	b118      	cbz	r0, 8008436 <__swbuf_r+0x12>
 800842e:	6983      	ldr	r3, [r0, #24]
 8008430:	b90b      	cbnz	r3, 8008436 <__swbuf_r+0x12>
 8008432:	f7fe ff77 	bl	8007324 <__sinit>
 8008436:	4b21      	ldr	r3, [pc, #132]	; (80084bc <__swbuf_r+0x98>)
 8008438:	429c      	cmp	r4, r3
 800843a:	d12b      	bne.n	8008494 <__swbuf_r+0x70>
 800843c:	686c      	ldr	r4, [r5, #4]
 800843e:	69a3      	ldr	r3, [r4, #24]
 8008440:	60a3      	str	r3, [r4, #8]
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	071a      	lsls	r2, r3, #28
 8008446:	d52f      	bpl.n	80084a8 <__swbuf_r+0x84>
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	b36b      	cbz	r3, 80084a8 <__swbuf_r+0x84>
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	6820      	ldr	r0, [r4, #0]
 8008450:	1ac0      	subs	r0, r0, r3
 8008452:	6963      	ldr	r3, [r4, #20]
 8008454:	b2f6      	uxtb	r6, r6
 8008456:	4283      	cmp	r3, r0
 8008458:	4637      	mov	r7, r6
 800845a:	dc04      	bgt.n	8008466 <__swbuf_r+0x42>
 800845c:	4621      	mov	r1, r4
 800845e:	4628      	mov	r0, r5
 8008460:	f7fe feba 	bl	80071d8 <_fflush_r>
 8008464:	bb30      	cbnz	r0, 80084b4 <__swbuf_r+0x90>
 8008466:	68a3      	ldr	r3, [r4, #8]
 8008468:	3b01      	subs	r3, #1
 800846a:	60a3      	str	r3, [r4, #8]
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	6022      	str	r2, [r4, #0]
 8008472:	701e      	strb	r6, [r3, #0]
 8008474:	6963      	ldr	r3, [r4, #20]
 8008476:	3001      	adds	r0, #1
 8008478:	4283      	cmp	r3, r0
 800847a:	d004      	beq.n	8008486 <__swbuf_r+0x62>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	07db      	lsls	r3, r3, #31
 8008480:	d506      	bpl.n	8008490 <__swbuf_r+0x6c>
 8008482:	2e0a      	cmp	r6, #10
 8008484:	d104      	bne.n	8008490 <__swbuf_r+0x6c>
 8008486:	4621      	mov	r1, r4
 8008488:	4628      	mov	r0, r5
 800848a:	f7fe fea5 	bl	80071d8 <_fflush_r>
 800848e:	b988      	cbnz	r0, 80084b4 <__swbuf_r+0x90>
 8008490:	4638      	mov	r0, r7
 8008492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <__swbuf_r+0x9c>)
 8008496:	429c      	cmp	r4, r3
 8008498:	d101      	bne.n	800849e <__swbuf_r+0x7a>
 800849a:	68ac      	ldr	r4, [r5, #8]
 800849c:	e7cf      	b.n	800843e <__swbuf_r+0x1a>
 800849e:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <__swbuf_r+0xa0>)
 80084a0:	429c      	cmp	r4, r3
 80084a2:	bf08      	it	eq
 80084a4:	68ec      	ldreq	r4, [r5, #12]
 80084a6:	e7ca      	b.n	800843e <__swbuf_r+0x1a>
 80084a8:	4621      	mov	r1, r4
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 f81e 	bl	80084ec <__swsetup_r>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d0cb      	beq.n	800844c <__swbuf_r+0x28>
 80084b4:	f04f 37ff 	mov.w	r7, #4294967295
 80084b8:	e7ea      	b.n	8008490 <__swbuf_r+0x6c>
 80084ba:	bf00      	nop
 80084bc:	0800a5c0 	.word	0x0800a5c0
 80084c0:	0800a5e0 	.word	0x0800a5e0
 80084c4:	0800a5a0 	.word	0x0800a5a0

080084c8 <_write_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4d07      	ldr	r5, [pc, #28]	; (80084e8 <_write_r+0x20>)
 80084cc:	4604      	mov	r4, r0
 80084ce:	4608      	mov	r0, r1
 80084d0:	4611      	mov	r1, r2
 80084d2:	2200      	movs	r2, #0
 80084d4:	602a      	str	r2, [r5, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	f7f8 feec 	bl	80012b4 <_write>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	d102      	bne.n	80084e6 <_write_r+0x1e>
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	b103      	cbz	r3, 80084e6 <_write_r+0x1e>
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
 80084e8:	200008b0 	.word	0x200008b0

080084ec <__swsetup_r>:
 80084ec:	4b32      	ldr	r3, [pc, #200]	; (80085b8 <__swsetup_r+0xcc>)
 80084ee:	b570      	push	{r4, r5, r6, lr}
 80084f0:	681d      	ldr	r5, [r3, #0]
 80084f2:	4606      	mov	r6, r0
 80084f4:	460c      	mov	r4, r1
 80084f6:	b125      	cbz	r5, 8008502 <__swsetup_r+0x16>
 80084f8:	69ab      	ldr	r3, [r5, #24]
 80084fa:	b913      	cbnz	r3, 8008502 <__swsetup_r+0x16>
 80084fc:	4628      	mov	r0, r5
 80084fe:	f7fe ff11 	bl	8007324 <__sinit>
 8008502:	4b2e      	ldr	r3, [pc, #184]	; (80085bc <__swsetup_r+0xd0>)
 8008504:	429c      	cmp	r4, r3
 8008506:	d10f      	bne.n	8008528 <__swsetup_r+0x3c>
 8008508:	686c      	ldr	r4, [r5, #4]
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008510:	0719      	lsls	r1, r3, #28
 8008512:	d42c      	bmi.n	800856e <__swsetup_r+0x82>
 8008514:	06dd      	lsls	r5, r3, #27
 8008516:	d411      	bmi.n	800853c <__swsetup_r+0x50>
 8008518:	2309      	movs	r3, #9
 800851a:	6033      	str	r3, [r6, #0]
 800851c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008520:	81a3      	strh	r3, [r4, #12]
 8008522:	f04f 30ff 	mov.w	r0, #4294967295
 8008526:	e03e      	b.n	80085a6 <__swsetup_r+0xba>
 8008528:	4b25      	ldr	r3, [pc, #148]	; (80085c0 <__swsetup_r+0xd4>)
 800852a:	429c      	cmp	r4, r3
 800852c:	d101      	bne.n	8008532 <__swsetup_r+0x46>
 800852e:	68ac      	ldr	r4, [r5, #8]
 8008530:	e7eb      	b.n	800850a <__swsetup_r+0x1e>
 8008532:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <__swsetup_r+0xd8>)
 8008534:	429c      	cmp	r4, r3
 8008536:	bf08      	it	eq
 8008538:	68ec      	ldreq	r4, [r5, #12]
 800853a:	e7e6      	b.n	800850a <__swsetup_r+0x1e>
 800853c:	0758      	lsls	r0, r3, #29
 800853e:	d512      	bpl.n	8008566 <__swsetup_r+0x7a>
 8008540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008542:	b141      	cbz	r1, 8008556 <__swsetup_r+0x6a>
 8008544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008548:	4299      	cmp	r1, r3
 800854a:	d002      	beq.n	8008552 <__swsetup_r+0x66>
 800854c:	4630      	mov	r0, r6
 800854e:	f7fe ffc5 	bl	80074dc <_free_r>
 8008552:	2300      	movs	r3, #0
 8008554:	6363      	str	r3, [r4, #52]	; 0x34
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	2300      	movs	r3, #0
 8008560:	6063      	str	r3, [r4, #4]
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	f043 0308 	orr.w	r3, r3, #8
 800856c:	81a3      	strh	r3, [r4, #12]
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	b94b      	cbnz	r3, 8008586 <__swsetup_r+0x9a>
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800857c:	d003      	beq.n	8008586 <__swsetup_r+0x9a>
 800857e:	4621      	mov	r1, r4
 8008580:	4630      	mov	r0, r6
 8008582:	f000 fee7 	bl	8009354 <__smakebuf_r>
 8008586:	89a0      	ldrh	r0, [r4, #12]
 8008588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800858c:	f010 0301 	ands.w	r3, r0, #1
 8008590:	d00a      	beq.n	80085a8 <__swsetup_r+0xbc>
 8008592:	2300      	movs	r3, #0
 8008594:	60a3      	str	r3, [r4, #8]
 8008596:	6963      	ldr	r3, [r4, #20]
 8008598:	425b      	negs	r3, r3
 800859a:	61a3      	str	r3, [r4, #24]
 800859c:	6923      	ldr	r3, [r4, #16]
 800859e:	b943      	cbnz	r3, 80085b2 <__swsetup_r+0xc6>
 80085a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085a4:	d1ba      	bne.n	800851c <__swsetup_r+0x30>
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	0781      	lsls	r1, r0, #30
 80085aa:	bf58      	it	pl
 80085ac:	6963      	ldrpl	r3, [r4, #20]
 80085ae:	60a3      	str	r3, [r4, #8]
 80085b0:	e7f4      	b.n	800859c <__swsetup_r+0xb0>
 80085b2:	2000      	movs	r0, #0
 80085b4:	e7f7      	b.n	80085a6 <__swsetup_r+0xba>
 80085b6:	bf00      	nop
 80085b8:	20000010 	.word	0x20000010
 80085bc:	0800a5c0 	.word	0x0800a5c0
 80085c0:	0800a5e0 	.word	0x0800a5e0
 80085c4:	0800a5a0 	.word	0x0800a5a0

080085c8 <_close_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d06      	ldr	r5, [pc, #24]	; (80085e4 <_close_r+0x1c>)
 80085cc:	2300      	movs	r3, #0
 80085ce:	4604      	mov	r4, r0
 80085d0:	4608      	mov	r0, r1
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	f7fa ffd3 	bl	800357e <_close>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_close_r+0x1a>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_close_r+0x1a>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	200008b0 	.word	0x200008b0

080085e8 <quorem>:
 80085e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	6903      	ldr	r3, [r0, #16]
 80085ee:	690c      	ldr	r4, [r1, #16]
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	4607      	mov	r7, r0
 80085f4:	f2c0 8081 	blt.w	80086fa <quorem+0x112>
 80085f8:	3c01      	subs	r4, #1
 80085fa:	f101 0814 	add.w	r8, r1, #20
 80085fe:	f100 0514 	add.w	r5, r0, #20
 8008602:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800860c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008610:	3301      	adds	r3, #1
 8008612:	429a      	cmp	r2, r3
 8008614:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008618:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800861c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008620:	d331      	bcc.n	8008686 <quorem+0x9e>
 8008622:	f04f 0e00 	mov.w	lr, #0
 8008626:	4640      	mov	r0, r8
 8008628:	46ac      	mov	ip, r5
 800862a:	46f2      	mov	sl, lr
 800862c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008630:	b293      	uxth	r3, r2
 8008632:	fb06 e303 	mla	r3, r6, r3, lr
 8008636:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800863a:	b29b      	uxth	r3, r3
 800863c:	ebaa 0303 	sub.w	r3, sl, r3
 8008640:	f8dc a000 	ldr.w	sl, [ip]
 8008644:	0c12      	lsrs	r2, r2, #16
 8008646:	fa13 f38a 	uxtah	r3, r3, sl
 800864a:	fb06 e202 	mla	r2, r6, r2, lr
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	9b00      	ldr	r3, [sp, #0]
 8008652:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008656:	b292      	uxth	r2, r2
 8008658:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800865c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008660:	f8bd 3000 	ldrh.w	r3, [sp]
 8008664:	4581      	cmp	r9, r0
 8008666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800866a:	f84c 3b04 	str.w	r3, [ip], #4
 800866e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008672:	d2db      	bcs.n	800862c <quorem+0x44>
 8008674:	f855 300b 	ldr.w	r3, [r5, fp]
 8008678:	b92b      	cbnz	r3, 8008686 <quorem+0x9e>
 800867a:	9b01      	ldr	r3, [sp, #4]
 800867c:	3b04      	subs	r3, #4
 800867e:	429d      	cmp	r5, r3
 8008680:	461a      	mov	r2, r3
 8008682:	d32e      	bcc.n	80086e2 <quorem+0xfa>
 8008684:	613c      	str	r4, [r7, #16]
 8008686:	4638      	mov	r0, r7
 8008688:	f001 f93a 	bl	8009900 <__mcmp>
 800868c:	2800      	cmp	r0, #0
 800868e:	db24      	blt.n	80086da <quorem+0xf2>
 8008690:	3601      	adds	r6, #1
 8008692:	4628      	mov	r0, r5
 8008694:	f04f 0c00 	mov.w	ip, #0
 8008698:	f858 2b04 	ldr.w	r2, [r8], #4
 800869c:	f8d0 e000 	ldr.w	lr, [r0]
 80086a0:	b293      	uxth	r3, r2
 80086a2:	ebac 0303 	sub.w	r3, ip, r3
 80086a6:	0c12      	lsrs	r2, r2, #16
 80086a8:	fa13 f38e 	uxtah	r3, r3, lr
 80086ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086ba:	45c1      	cmp	r9, r8
 80086bc:	f840 3b04 	str.w	r3, [r0], #4
 80086c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086c4:	d2e8      	bcs.n	8008698 <quorem+0xb0>
 80086c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086ce:	b922      	cbnz	r2, 80086da <quorem+0xf2>
 80086d0:	3b04      	subs	r3, #4
 80086d2:	429d      	cmp	r5, r3
 80086d4:	461a      	mov	r2, r3
 80086d6:	d30a      	bcc.n	80086ee <quorem+0x106>
 80086d8:	613c      	str	r4, [r7, #16]
 80086da:	4630      	mov	r0, r6
 80086dc:	b003      	add	sp, #12
 80086de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e2:	6812      	ldr	r2, [r2, #0]
 80086e4:	3b04      	subs	r3, #4
 80086e6:	2a00      	cmp	r2, #0
 80086e8:	d1cc      	bne.n	8008684 <quorem+0x9c>
 80086ea:	3c01      	subs	r4, #1
 80086ec:	e7c7      	b.n	800867e <quorem+0x96>
 80086ee:	6812      	ldr	r2, [r2, #0]
 80086f0:	3b04      	subs	r3, #4
 80086f2:	2a00      	cmp	r2, #0
 80086f4:	d1f0      	bne.n	80086d8 <quorem+0xf0>
 80086f6:	3c01      	subs	r4, #1
 80086f8:	e7eb      	b.n	80086d2 <quorem+0xea>
 80086fa:	2000      	movs	r0, #0
 80086fc:	e7ee      	b.n	80086dc <quorem+0xf4>
	...

08008700 <_dtoa_r>:
 8008700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008704:	ed2d 8b04 	vpush	{d8-d9}
 8008708:	ec57 6b10 	vmov	r6, r7, d0
 800870c:	b093      	sub	sp, #76	; 0x4c
 800870e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008710:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008714:	9106      	str	r1, [sp, #24]
 8008716:	ee10 aa10 	vmov	sl, s0
 800871a:	4604      	mov	r4, r0
 800871c:	9209      	str	r2, [sp, #36]	; 0x24
 800871e:	930c      	str	r3, [sp, #48]	; 0x30
 8008720:	46bb      	mov	fp, r7
 8008722:	b975      	cbnz	r5, 8008742 <_dtoa_r+0x42>
 8008724:	2010      	movs	r0, #16
 8008726:	f000 fe55 	bl	80093d4 <malloc>
 800872a:	4602      	mov	r2, r0
 800872c:	6260      	str	r0, [r4, #36]	; 0x24
 800872e:	b920      	cbnz	r0, 800873a <_dtoa_r+0x3a>
 8008730:	4ba7      	ldr	r3, [pc, #668]	; (80089d0 <_dtoa_r+0x2d0>)
 8008732:	21ea      	movs	r1, #234	; 0xea
 8008734:	48a7      	ldr	r0, [pc, #668]	; (80089d4 <_dtoa_r+0x2d4>)
 8008736:	f001 fcc3 	bl	800a0c0 <__assert_func>
 800873a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800873e:	6005      	str	r5, [r0, #0]
 8008740:	60c5      	str	r5, [r0, #12]
 8008742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008744:	6819      	ldr	r1, [r3, #0]
 8008746:	b151      	cbz	r1, 800875e <_dtoa_r+0x5e>
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	604a      	str	r2, [r1, #4]
 800874c:	2301      	movs	r3, #1
 800874e:	4093      	lsls	r3, r2
 8008750:	608b      	str	r3, [r1, #8]
 8008752:	4620      	mov	r0, r4
 8008754:	f000 fe92 	bl	800947c <_Bfree>
 8008758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	1e3b      	subs	r3, r7, #0
 8008760:	bfaa      	itet	ge
 8008762:	2300      	movge	r3, #0
 8008764:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008768:	f8c8 3000 	strge.w	r3, [r8]
 800876c:	4b9a      	ldr	r3, [pc, #616]	; (80089d8 <_dtoa_r+0x2d8>)
 800876e:	bfbc      	itt	lt
 8008770:	2201      	movlt	r2, #1
 8008772:	f8c8 2000 	strlt.w	r2, [r8]
 8008776:	ea33 030b 	bics.w	r3, r3, fp
 800877a:	d11b      	bne.n	80087b4 <_dtoa_r+0xb4>
 800877c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800877e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008788:	4333      	orrs	r3, r6
 800878a:	f000 8592 	beq.w	80092b2 <_dtoa_r+0xbb2>
 800878e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008790:	b963      	cbnz	r3, 80087ac <_dtoa_r+0xac>
 8008792:	4b92      	ldr	r3, [pc, #584]	; (80089dc <_dtoa_r+0x2dc>)
 8008794:	e022      	b.n	80087dc <_dtoa_r+0xdc>
 8008796:	4b92      	ldr	r3, [pc, #584]	; (80089e0 <_dtoa_r+0x2e0>)
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	3308      	adds	r3, #8
 800879c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	9801      	ldr	r0, [sp, #4]
 80087a2:	b013      	add	sp, #76	; 0x4c
 80087a4:	ecbd 8b04 	vpop	{d8-d9}
 80087a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ac:	4b8b      	ldr	r3, [pc, #556]	; (80089dc <_dtoa_r+0x2dc>)
 80087ae:	9301      	str	r3, [sp, #4]
 80087b0:	3303      	adds	r3, #3
 80087b2:	e7f3      	b.n	800879c <_dtoa_r+0x9c>
 80087b4:	2200      	movs	r2, #0
 80087b6:	2300      	movs	r3, #0
 80087b8:	4650      	mov	r0, sl
 80087ba:	4659      	mov	r1, fp
 80087bc:	f7f8 f99c 	bl	8000af8 <__aeabi_dcmpeq>
 80087c0:	ec4b ab19 	vmov	d9, sl, fp
 80087c4:	4680      	mov	r8, r0
 80087c6:	b158      	cbz	r0, 80087e0 <_dtoa_r+0xe0>
 80087c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087ca:	2301      	movs	r3, #1
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 856b 	beq.w	80092ac <_dtoa_r+0xbac>
 80087d6:	4883      	ldr	r0, [pc, #524]	; (80089e4 <_dtoa_r+0x2e4>)
 80087d8:	6018      	str	r0, [r3, #0]
 80087da:	1e43      	subs	r3, r0, #1
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	e7df      	b.n	80087a0 <_dtoa_r+0xa0>
 80087e0:	ec4b ab10 	vmov	d0, sl, fp
 80087e4:	aa10      	add	r2, sp, #64	; 0x40
 80087e6:	a911      	add	r1, sp, #68	; 0x44
 80087e8:	4620      	mov	r0, r4
 80087ea:	f001 f92f 	bl	8009a4c <__d2b>
 80087ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80087f2:	ee08 0a10 	vmov	s16, r0
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	f000 8084 	beq.w	8008904 <_dtoa_r+0x204>
 80087fc:	ee19 3a90 	vmov	r3, s19
 8008800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008804:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008808:	4656      	mov	r6, sl
 800880a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800880e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008812:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008816:	4b74      	ldr	r3, [pc, #464]	; (80089e8 <_dtoa_r+0x2e8>)
 8008818:	2200      	movs	r2, #0
 800881a:	4630      	mov	r0, r6
 800881c:	4639      	mov	r1, r7
 800881e:	f7f7 fd4b 	bl	80002b8 <__aeabi_dsub>
 8008822:	a365      	add	r3, pc, #404	; (adr r3, 80089b8 <_dtoa_r+0x2b8>)
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f7f7 fefe 	bl	8000628 <__aeabi_dmul>
 800882c:	a364      	add	r3, pc, #400	; (adr r3, 80089c0 <_dtoa_r+0x2c0>)
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	f7f7 fd43 	bl	80002bc <__adddf3>
 8008836:	4606      	mov	r6, r0
 8008838:	4628      	mov	r0, r5
 800883a:	460f      	mov	r7, r1
 800883c:	f7f7 fe8a 	bl	8000554 <__aeabi_i2d>
 8008840:	a361      	add	r3, pc, #388	; (adr r3, 80089c8 <_dtoa_r+0x2c8>)
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f7f7 feef 	bl	8000628 <__aeabi_dmul>
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	4630      	mov	r0, r6
 8008850:	4639      	mov	r1, r7
 8008852:	f7f7 fd33 	bl	80002bc <__adddf3>
 8008856:	4606      	mov	r6, r0
 8008858:	460f      	mov	r7, r1
 800885a:	f7f8 f995 	bl	8000b88 <__aeabi_d2iz>
 800885e:	2200      	movs	r2, #0
 8008860:	9000      	str	r0, [sp, #0]
 8008862:	2300      	movs	r3, #0
 8008864:	4630      	mov	r0, r6
 8008866:	4639      	mov	r1, r7
 8008868:	f7f8 f950 	bl	8000b0c <__aeabi_dcmplt>
 800886c:	b150      	cbz	r0, 8008884 <_dtoa_r+0x184>
 800886e:	9800      	ldr	r0, [sp, #0]
 8008870:	f7f7 fe70 	bl	8000554 <__aeabi_i2d>
 8008874:	4632      	mov	r2, r6
 8008876:	463b      	mov	r3, r7
 8008878:	f7f8 f93e 	bl	8000af8 <__aeabi_dcmpeq>
 800887c:	b910      	cbnz	r0, 8008884 <_dtoa_r+0x184>
 800887e:	9b00      	ldr	r3, [sp, #0]
 8008880:	3b01      	subs	r3, #1
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	9b00      	ldr	r3, [sp, #0]
 8008886:	2b16      	cmp	r3, #22
 8008888:	d85a      	bhi.n	8008940 <_dtoa_r+0x240>
 800888a:	9a00      	ldr	r2, [sp, #0]
 800888c:	4b57      	ldr	r3, [pc, #348]	; (80089ec <_dtoa_r+0x2ec>)
 800888e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	ec51 0b19 	vmov	r0, r1, d9
 800889a:	f7f8 f937 	bl	8000b0c <__aeabi_dcmplt>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d050      	beq.n	8008944 <_dtoa_r+0x244>
 80088a2:	9b00      	ldr	r3, [sp, #0]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	2300      	movs	r3, #0
 80088aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80088ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088ae:	1b5d      	subs	r5, r3, r5
 80088b0:	1e6b      	subs	r3, r5, #1
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	bf45      	ittet	mi
 80088b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80088ba:	9304      	strmi	r3, [sp, #16]
 80088bc:	2300      	movpl	r3, #0
 80088be:	2300      	movmi	r3, #0
 80088c0:	bf4c      	ite	mi
 80088c2:	9305      	strmi	r3, [sp, #20]
 80088c4:	9304      	strpl	r3, [sp, #16]
 80088c6:	9b00      	ldr	r3, [sp, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	db3d      	blt.n	8008948 <_dtoa_r+0x248>
 80088cc:	9b05      	ldr	r3, [sp, #20]
 80088ce:	9a00      	ldr	r2, [sp, #0]
 80088d0:	920a      	str	r2, [sp, #40]	; 0x28
 80088d2:	4413      	add	r3, r2
 80088d4:	9305      	str	r3, [sp, #20]
 80088d6:	2300      	movs	r3, #0
 80088d8:	9307      	str	r3, [sp, #28]
 80088da:	9b06      	ldr	r3, [sp, #24]
 80088dc:	2b09      	cmp	r3, #9
 80088de:	f200 8089 	bhi.w	80089f4 <_dtoa_r+0x2f4>
 80088e2:	2b05      	cmp	r3, #5
 80088e4:	bfc4      	itt	gt
 80088e6:	3b04      	subgt	r3, #4
 80088e8:	9306      	strgt	r3, [sp, #24]
 80088ea:	9b06      	ldr	r3, [sp, #24]
 80088ec:	f1a3 0302 	sub.w	r3, r3, #2
 80088f0:	bfcc      	ite	gt
 80088f2:	2500      	movgt	r5, #0
 80088f4:	2501      	movle	r5, #1
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	f200 8087 	bhi.w	8008a0a <_dtoa_r+0x30a>
 80088fc:	e8df f003 	tbb	[pc, r3]
 8008900:	59383a2d 	.word	0x59383a2d
 8008904:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008908:	441d      	add	r5, r3
 800890a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800890e:	2b20      	cmp	r3, #32
 8008910:	bfc1      	itttt	gt
 8008912:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008916:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800891a:	fa0b f303 	lslgt.w	r3, fp, r3
 800891e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008922:	bfda      	itte	le
 8008924:	f1c3 0320 	rsble	r3, r3, #32
 8008928:	fa06 f003 	lslle.w	r0, r6, r3
 800892c:	4318      	orrgt	r0, r3
 800892e:	f7f7 fe01 	bl	8000534 <__aeabi_ui2d>
 8008932:	2301      	movs	r3, #1
 8008934:	4606      	mov	r6, r0
 8008936:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800893a:	3d01      	subs	r5, #1
 800893c:	930e      	str	r3, [sp, #56]	; 0x38
 800893e:	e76a      	b.n	8008816 <_dtoa_r+0x116>
 8008940:	2301      	movs	r3, #1
 8008942:	e7b2      	b.n	80088aa <_dtoa_r+0x1aa>
 8008944:	900b      	str	r0, [sp, #44]	; 0x2c
 8008946:	e7b1      	b.n	80088ac <_dtoa_r+0x1ac>
 8008948:	9b04      	ldr	r3, [sp, #16]
 800894a:	9a00      	ldr	r2, [sp, #0]
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	4253      	negs	r3, r2
 8008952:	9307      	str	r3, [sp, #28]
 8008954:	2300      	movs	r3, #0
 8008956:	930a      	str	r3, [sp, #40]	; 0x28
 8008958:	e7bf      	b.n	80088da <_dtoa_r+0x1da>
 800895a:	2300      	movs	r3, #0
 800895c:	9308      	str	r3, [sp, #32]
 800895e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008960:	2b00      	cmp	r3, #0
 8008962:	dc55      	bgt.n	8008a10 <_dtoa_r+0x310>
 8008964:	2301      	movs	r3, #1
 8008966:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800896a:	461a      	mov	r2, r3
 800896c:	9209      	str	r2, [sp, #36]	; 0x24
 800896e:	e00c      	b.n	800898a <_dtoa_r+0x28a>
 8008970:	2301      	movs	r3, #1
 8008972:	e7f3      	b.n	800895c <_dtoa_r+0x25c>
 8008974:	2300      	movs	r3, #0
 8008976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008978:	9308      	str	r3, [sp, #32]
 800897a:	9b00      	ldr	r3, [sp, #0]
 800897c:	4413      	add	r3, r2
 800897e:	9302      	str	r3, [sp, #8]
 8008980:	3301      	adds	r3, #1
 8008982:	2b01      	cmp	r3, #1
 8008984:	9303      	str	r3, [sp, #12]
 8008986:	bfb8      	it	lt
 8008988:	2301      	movlt	r3, #1
 800898a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800898c:	2200      	movs	r2, #0
 800898e:	6042      	str	r2, [r0, #4]
 8008990:	2204      	movs	r2, #4
 8008992:	f102 0614 	add.w	r6, r2, #20
 8008996:	429e      	cmp	r6, r3
 8008998:	6841      	ldr	r1, [r0, #4]
 800899a:	d93d      	bls.n	8008a18 <_dtoa_r+0x318>
 800899c:	4620      	mov	r0, r4
 800899e:	f000 fd2d 	bl	80093fc <_Balloc>
 80089a2:	9001      	str	r0, [sp, #4]
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d13b      	bne.n	8008a20 <_dtoa_r+0x320>
 80089a8:	4b11      	ldr	r3, [pc, #68]	; (80089f0 <_dtoa_r+0x2f0>)
 80089aa:	4602      	mov	r2, r0
 80089ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089b0:	e6c0      	b.n	8008734 <_dtoa_r+0x34>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e7df      	b.n	8008976 <_dtoa_r+0x276>
 80089b6:	bf00      	nop
 80089b8:	636f4361 	.word	0x636f4361
 80089bc:	3fd287a7 	.word	0x3fd287a7
 80089c0:	8b60c8b3 	.word	0x8b60c8b3
 80089c4:	3fc68a28 	.word	0x3fc68a28
 80089c8:	509f79fb 	.word	0x509f79fb
 80089cc:	3fd34413 	.word	0x3fd34413
 80089d0:	0800a746 	.word	0x0800a746
 80089d4:	0800a75d 	.word	0x0800a75d
 80089d8:	7ff00000 	.word	0x7ff00000
 80089dc:	0800a742 	.word	0x0800a742
 80089e0:	0800a739 	.word	0x0800a739
 80089e4:	0800a615 	.word	0x0800a615
 80089e8:	3ff80000 	.word	0x3ff80000
 80089ec:	0800a850 	.word	0x0800a850
 80089f0:	0800a7b8 	.word	0x0800a7b8
 80089f4:	2501      	movs	r5, #1
 80089f6:	2300      	movs	r3, #0
 80089f8:	9306      	str	r3, [sp, #24]
 80089fa:	9508      	str	r5, [sp, #32]
 80089fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008a00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008a04:	2200      	movs	r2, #0
 8008a06:	2312      	movs	r3, #18
 8008a08:	e7b0      	b.n	800896c <_dtoa_r+0x26c>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	9308      	str	r3, [sp, #32]
 8008a0e:	e7f5      	b.n	80089fc <_dtoa_r+0x2fc>
 8008a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008a16:	e7b8      	b.n	800898a <_dtoa_r+0x28a>
 8008a18:	3101      	adds	r1, #1
 8008a1a:	6041      	str	r1, [r0, #4]
 8008a1c:	0052      	lsls	r2, r2, #1
 8008a1e:	e7b8      	b.n	8008992 <_dtoa_r+0x292>
 8008a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a22:	9a01      	ldr	r2, [sp, #4]
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	9b03      	ldr	r3, [sp, #12]
 8008a28:	2b0e      	cmp	r3, #14
 8008a2a:	f200 809d 	bhi.w	8008b68 <_dtoa_r+0x468>
 8008a2e:	2d00      	cmp	r5, #0
 8008a30:	f000 809a 	beq.w	8008b68 <_dtoa_r+0x468>
 8008a34:	9b00      	ldr	r3, [sp, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dd32      	ble.n	8008aa0 <_dtoa_r+0x3a0>
 8008a3a:	4ab7      	ldr	r2, [pc, #732]	; (8008d18 <_dtoa_r+0x618>)
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a48:	9b00      	ldr	r3, [sp, #0]
 8008a4a:	05d8      	lsls	r0, r3, #23
 8008a4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008a50:	d516      	bpl.n	8008a80 <_dtoa_r+0x380>
 8008a52:	4bb2      	ldr	r3, [pc, #712]	; (8008d1c <_dtoa_r+0x61c>)
 8008a54:	ec51 0b19 	vmov	r0, r1, d9
 8008a58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a5c:	f7f7 ff0e 	bl	800087c <__aeabi_ddiv>
 8008a60:	f007 070f 	and.w	r7, r7, #15
 8008a64:	4682      	mov	sl, r0
 8008a66:	468b      	mov	fp, r1
 8008a68:	2503      	movs	r5, #3
 8008a6a:	4eac      	ldr	r6, [pc, #688]	; (8008d1c <_dtoa_r+0x61c>)
 8008a6c:	b957      	cbnz	r7, 8008a84 <_dtoa_r+0x384>
 8008a6e:	4642      	mov	r2, r8
 8008a70:	464b      	mov	r3, r9
 8008a72:	4650      	mov	r0, sl
 8008a74:	4659      	mov	r1, fp
 8008a76:	f7f7 ff01 	bl	800087c <__aeabi_ddiv>
 8008a7a:	4682      	mov	sl, r0
 8008a7c:	468b      	mov	fp, r1
 8008a7e:	e028      	b.n	8008ad2 <_dtoa_r+0x3d2>
 8008a80:	2502      	movs	r5, #2
 8008a82:	e7f2      	b.n	8008a6a <_dtoa_r+0x36a>
 8008a84:	07f9      	lsls	r1, r7, #31
 8008a86:	d508      	bpl.n	8008a9a <_dtoa_r+0x39a>
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a90:	f7f7 fdca 	bl	8000628 <__aeabi_dmul>
 8008a94:	3501      	adds	r5, #1
 8008a96:	4680      	mov	r8, r0
 8008a98:	4689      	mov	r9, r1
 8008a9a:	107f      	asrs	r7, r7, #1
 8008a9c:	3608      	adds	r6, #8
 8008a9e:	e7e5      	b.n	8008a6c <_dtoa_r+0x36c>
 8008aa0:	f000 809b 	beq.w	8008bda <_dtoa_r+0x4da>
 8008aa4:	9b00      	ldr	r3, [sp, #0]
 8008aa6:	4f9d      	ldr	r7, [pc, #628]	; (8008d1c <_dtoa_r+0x61c>)
 8008aa8:	425e      	negs	r6, r3
 8008aaa:	4b9b      	ldr	r3, [pc, #620]	; (8008d18 <_dtoa_r+0x618>)
 8008aac:	f006 020f 	and.w	r2, r6, #15
 8008ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	ec51 0b19 	vmov	r0, r1, d9
 8008abc:	f7f7 fdb4 	bl	8000628 <__aeabi_dmul>
 8008ac0:	1136      	asrs	r6, r6, #4
 8008ac2:	4682      	mov	sl, r0
 8008ac4:	468b      	mov	fp, r1
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	2502      	movs	r5, #2
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	d17a      	bne.n	8008bc4 <_dtoa_r+0x4c4>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1d3      	bne.n	8008a7a <_dtoa_r+0x37a>
 8008ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 8082 	beq.w	8008bde <_dtoa_r+0x4de>
 8008ada:	4b91      	ldr	r3, [pc, #580]	; (8008d20 <_dtoa_r+0x620>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	4650      	mov	r0, sl
 8008ae0:	4659      	mov	r1, fp
 8008ae2:	f7f8 f813 	bl	8000b0c <__aeabi_dcmplt>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d079      	beq.n	8008bde <_dtoa_r+0x4de>
 8008aea:	9b03      	ldr	r3, [sp, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d076      	beq.n	8008bde <_dtoa_r+0x4de>
 8008af0:	9b02      	ldr	r3, [sp, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	dd36      	ble.n	8008b64 <_dtoa_r+0x464>
 8008af6:	9b00      	ldr	r3, [sp, #0]
 8008af8:	4650      	mov	r0, sl
 8008afa:	4659      	mov	r1, fp
 8008afc:	1e5f      	subs	r7, r3, #1
 8008afe:	2200      	movs	r2, #0
 8008b00:	4b88      	ldr	r3, [pc, #544]	; (8008d24 <_dtoa_r+0x624>)
 8008b02:	f7f7 fd91 	bl	8000628 <__aeabi_dmul>
 8008b06:	9e02      	ldr	r6, [sp, #8]
 8008b08:	4682      	mov	sl, r0
 8008b0a:	468b      	mov	fp, r1
 8008b0c:	3501      	adds	r5, #1
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f7f7 fd20 	bl	8000554 <__aeabi_i2d>
 8008b14:	4652      	mov	r2, sl
 8008b16:	465b      	mov	r3, fp
 8008b18:	f7f7 fd86 	bl	8000628 <__aeabi_dmul>
 8008b1c:	4b82      	ldr	r3, [pc, #520]	; (8008d28 <_dtoa_r+0x628>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f7f7 fbcc 	bl	80002bc <__adddf3>
 8008b24:	46d0      	mov	r8, sl
 8008b26:	46d9      	mov	r9, fp
 8008b28:	4682      	mov	sl, r0
 8008b2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008b2e:	2e00      	cmp	r6, #0
 8008b30:	d158      	bne.n	8008be4 <_dtoa_r+0x4e4>
 8008b32:	4b7e      	ldr	r3, [pc, #504]	; (8008d2c <_dtoa_r+0x62c>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	4640      	mov	r0, r8
 8008b38:	4649      	mov	r1, r9
 8008b3a:	f7f7 fbbd 	bl	80002b8 <__aeabi_dsub>
 8008b3e:	4652      	mov	r2, sl
 8008b40:	465b      	mov	r3, fp
 8008b42:	4680      	mov	r8, r0
 8008b44:	4689      	mov	r9, r1
 8008b46:	f7f7 ffff 	bl	8000b48 <__aeabi_dcmpgt>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	f040 8295 	bne.w	800907a <_dtoa_r+0x97a>
 8008b50:	4652      	mov	r2, sl
 8008b52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b56:	4640      	mov	r0, r8
 8008b58:	4649      	mov	r1, r9
 8008b5a:	f7f7 ffd7 	bl	8000b0c <__aeabi_dcmplt>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f040 8289 	bne.w	8009076 <_dtoa_r+0x976>
 8008b64:	ec5b ab19 	vmov	sl, fp, d9
 8008b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f2c0 8148 	blt.w	8008e00 <_dtoa_r+0x700>
 8008b70:	9a00      	ldr	r2, [sp, #0]
 8008b72:	2a0e      	cmp	r2, #14
 8008b74:	f300 8144 	bgt.w	8008e00 <_dtoa_r+0x700>
 8008b78:	4b67      	ldr	r3, [pc, #412]	; (8008d18 <_dtoa_r+0x618>)
 8008b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f280 80d5 	bge.w	8008d34 <_dtoa_r+0x634>
 8008b8a:	9b03      	ldr	r3, [sp, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f300 80d1 	bgt.w	8008d34 <_dtoa_r+0x634>
 8008b92:	f040 826f 	bne.w	8009074 <_dtoa_r+0x974>
 8008b96:	4b65      	ldr	r3, [pc, #404]	; (8008d2c <_dtoa_r+0x62c>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	4640      	mov	r0, r8
 8008b9c:	4649      	mov	r1, r9
 8008b9e:	f7f7 fd43 	bl	8000628 <__aeabi_dmul>
 8008ba2:	4652      	mov	r2, sl
 8008ba4:	465b      	mov	r3, fp
 8008ba6:	f7f7 ffc5 	bl	8000b34 <__aeabi_dcmpge>
 8008baa:	9e03      	ldr	r6, [sp, #12]
 8008bac:	4637      	mov	r7, r6
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f040 8245 	bne.w	800903e <_dtoa_r+0x93e>
 8008bb4:	9d01      	ldr	r5, [sp, #4]
 8008bb6:	2331      	movs	r3, #49	; 0x31
 8008bb8:	f805 3b01 	strb.w	r3, [r5], #1
 8008bbc:	9b00      	ldr	r3, [sp, #0]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	e240      	b.n	8009046 <_dtoa_r+0x946>
 8008bc4:	07f2      	lsls	r2, r6, #31
 8008bc6:	d505      	bpl.n	8008bd4 <_dtoa_r+0x4d4>
 8008bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bcc:	f7f7 fd2c 	bl	8000628 <__aeabi_dmul>
 8008bd0:	3501      	adds	r5, #1
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	1076      	asrs	r6, r6, #1
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	e777      	b.n	8008aca <_dtoa_r+0x3ca>
 8008bda:	2502      	movs	r5, #2
 8008bdc:	e779      	b.n	8008ad2 <_dtoa_r+0x3d2>
 8008bde:	9f00      	ldr	r7, [sp, #0]
 8008be0:	9e03      	ldr	r6, [sp, #12]
 8008be2:	e794      	b.n	8008b0e <_dtoa_r+0x40e>
 8008be4:	9901      	ldr	r1, [sp, #4]
 8008be6:	4b4c      	ldr	r3, [pc, #304]	; (8008d18 <_dtoa_r+0x618>)
 8008be8:	4431      	add	r1, r6
 8008bea:	910d      	str	r1, [sp, #52]	; 0x34
 8008bec:	9908      	ldr	r1, [sp, #32]
 8008bee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008bf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bf6:	2900      	cmp	r1, #0
 8008bf8:	d043      	beq.n	8008c82 <_dtoa_r+0x582>
 8008bfa:	494d      	ldr	r1, [pc, #308]	; (8008d30 <_dtoa_r+0x630>)
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	f7f7 fe3d 	bl	800087c <__aeabi_ddiv>
 8008c02:	4652      	mov	r2, sl
 8008c04:	465b      	mov	r3, fp
 8008c06:	f7f7 fb57 	bl	80002b8 <__aeabi_dsub>
 8008c0a:	9d01      	ldr	r5, [sp, #4]
 8008c0c:	4682      	mov	sl, r0
 8008c0e:	468b      	mov	fp, r1
 8008c10:	4649      	mov	r1, r9
 8008c12:	4640      	mov	r0, r8
 8008c14:	f7f7 ffb8 	bl	8000b88 <__aeabi_d2iz>
 8008c18:	4606      	mov	r6, r0
 8008c1a:	f7f7 fc9b 	bl	8000554 <__aeabi_i2d>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	f7f7 fb47 	bl	80002b8 <__aeabi_dsub>
 8008c2a:	3630      	adds	r6, #48	; 0x30
 8008c2c:	f805 6b01 	strb.w	r6, [r5], #1
 8008c30:	4652      	mov	r2, sl
 8008c32:	465b      	mov	r3, fp
 8008c34:	4680      	mov	r8, r0
 8008c36:	4689      	mov	r9, r1
 8008c38:	f7f7 ff68 	bl	8000b0c <__aeabi_dcmplt>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d163      	bne.n	8008d08 <_dtoa_r+0x608>
 8008c40:	4642      	mov	r2, r8
 8008c42:	464b      	mov	r3, r9
 8008c44:	4936      	ldr	r1, [pc, #216]	; (8008d20 <_dtoa_r+0x620>)
 8008c46:	2000      	movs	r0, #0
 8008c48:	f7f7 fb36 	bl	80002b8 <__aeabi_dsub>
 8008c4c:	4652      	mov	r2, sl
 8008c4e:	465b      	mov	r3, fp
 8008c50:	f7f7 ff5c 	bl	8000b0c <__aeabi_dcmplt>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f040 80b5 	bne.w	8008dc4 <_dtoa_r+0x6c4>
 8008c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c5c:	429d      	cmp	r5, r3
 8008c5e:	d081      	beq.n	8008b64 <_dtoa_r+0x464>
 8008c60:	4b30      	ldr	r3, [pc, #192]	; (8008d24 <_dtoa_r+0x624>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	4650      	mov	r0, sl
 8008c66:	4659      	mov	r1, fp
 8008c68:	f7f7 fcde 	bl	8000628 <__aeabi_dmul>
 8008c6c:	4b2d      	ldr	r3, [pc, #180]	; (8008d24 <_dtoa_r+0x624>)
 8008c6e:	4682      	mov	sl, r0
 8008c70:	468b      	mov	fp, r1
 8008c72:	4640      	mov	r0, r8
 8008c74:	4649      	mov	r1, r9
 8008c76:	2200      	movs	r2, #0
 8008c78:	f7f7 fcd6 	bl	8000628 <__aeabi_dmul>
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	4689      	mov	r9, r1
 8008c80:	e7c6      	b.n	8008c10 <_dtoa_r+0x510>
 8008c82:	4650      	mov	r0, sl
 8008c84:	4659      	mov	r1, fp
 8008c86:	f7f7 fccf 	bl	8000628 <__aeabi_dmul>
 8008c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c8c:	9d01      	ldr	r5, [sp, #4]
 8008c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c90:	4682      	mov	sl, r0
 8008c92:	468b      	mov	fp, r1
 8008c94:	4649      	mov	r1, r9
 8008c96:	4640      	mov	r0, r8
 8008c98:	f7f7 ff76 	bl	8000b88 <__aeabi_d2iz>
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	f7f7 fc59 	bl	8000554 <__aeabi_i2d>
 8008ca2:	3630      	adds	r6, #48	; 0x30
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4640      	mov	r0, r8
 8008caa:	4649      	mov	r1, r9
 8008cac:	f7f7 fb04 	bl	80002b8 <__aeabi_dsub>
 8008cb0:	f805 6b01 	strb.w	r6, [r5], #1
 8008cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cb6:	429d      	cmp	r5, r3
 8008cb8:	4680      	mov	r8, r0
 8008cba:	4689      	mov	r9, r1
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	d124      	bne.n	8008d0c <_dtoa_r+0x60c>
 8008cc2:	4b1b      	ldr	r3, [pc, #108]	; (8008d30 <_dtoa_r+0x630>)
 8008cc4:	4650      	mov	r0, sl
 8008cc6:	4659      	mov	r1, fp
 8008cc8:	f7f7 faf8 	bl	80002bc <__adddf3>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	f7f7 ff38 	bl	8000b48 <__aeabi_dcmpgt>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d173      	bne.n	8008dc4 <_dtoa_r+0x6c4>
 8008cdc:	4652      	mov	r2, sl
 8008cde:	465b      	mov	r3, fp
 8008ce0:	4913      	ldr	r1, [pc, #76]	; (8008d30 <_dtoa_r+0x630>)
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	f7f7 fae8 	bl	80002b8 <__aeabi_dsub>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4640      	mov	r0, r8
 8008cee:	4649      	mov	r1, r9
 8008cf0:	f7f7 ff0c 	bl	8000b0c <__aeabi_dcmplt>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	f43f af35 	beq.w	8008b64 <_dtoa_r+0x464>
 8008cfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008cfc:	1e6b      	subs	r3, r5, #1
 8008cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d04:	2b30      	cmp	r3, #48	; 0x30
 8008d06:	d0f8      	beq.n	8008cfa <_dtoa_r+0x5fa>
 8008d08:	9700      	str	r7, [sp, #0]
 8008d0a:	e049      	b.n	8008da0 <_dtoa_r+0x6a0>
 8008d0c:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <_dtoa_r+0x624>)
 8008d0e:	f7f7 fc8b 	bl	8000628 <__aeabi_dmul>
 8008d12:	4680      	mov	r8, r0
 8008d14:	4689      	mov	r9, r1
 8008d16:	e7bd      	b.n	8008c94 <_dtoa_r+0x594>
 8008d18:	0800a850 	.word	0x0800a850
 8008d1c:	0800a828 	.word	0x0800a828
 8008d20:	3ff00000 	.word	0x3ff00000
 8008d24:	40240000 	.word	0x40240000
 8008d28:	401c0000 	.word	0x401c0000
 8008d2c:	40140000 	.word	0x40140000
 8008d30:	3fe00000 	.word	0x3fe00000
 8008d34:	9d01      	ldr	r5, [sp, #4]
 8008d36:	4656      	mov	r6, sl
 8008d38:	465f      	mov	r7, fp
 8008d3a:	4642      	mov	r2, r8
 8008d3c:	464b      	mov	r3, r9
 8008d3e:	4630      	mov	r0, r6
 8008d40:	4639      	mov	r1, r7
 8008d42:	f7f7 fd9b 	bl	800087c <__aeabi_ddiv>
 8008d46:	f7f7 ff1f 	bl	8000b88 <__aeabi_d2iz>
 8008d4a:	4682      	mov	sl, r0
 8008d4c:	f7f7 fc02 	bl	8000554 <__aeabi_i2d>
 8008d50:	4642      	mov	r2, r8
 8008d52:	464b      	mov	r3, r9
 8008d54:	f7f7 fc68 	bl	8000628 <__aeabi_dmul>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	4639      	mov	r1, r7
 8008d60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008d64:	f7f7 faa8 	bl	80002b8 <__aeabi_dsub>
 8008d68:	f805 6b01 	strb.w	r6, [r5], #1
 8008d6c:	9e01      	ldr	r6, [sp, #4]
 8008d6e:	9f03      	ldr	r7, [sp, #12]
 8008d70:	1bae      	subs	r6, r5, r6
 8008d72:	42b7      	cmp	r7, r6
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	d135      	bne.n	8008de6 <_dtoa_r+0x6e6>
 8008d7a:	f7f7 fa9f 	bl	80002bc <__adddf3>
 8008d7e:	4642      	mov	r2, r8
 8008d80:	464b      	mov	r3, r9
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	f7f7 fedf 	bl	8000b48 <__aeabi_dcmpgt>
 8008d8a:	b9d0      	cbnz	r0, 8008dc2 <_dtoa_r+0x6c2>
 8008d8c:	4642      	mov	r2, r8
 8008d8e:	464b      	mov	r3, r9
 8008d90:	4630      	mov	r0, r6
 8008d92:	4639      	mov	r1, r7
 8008d94:	f7f7 feb0 	bl	8000af8 <__aeabi_dcmpeq>
 8008d98:	b110      	cbz	r0, 8008da0 <_dtoa_r+0x6a0>
 8008d9a:	f01a 0f01 	tst.w	sl, #1
 8008d9e:	d110      	bne.n	8008dc2 <_dtoa_r+0x6c2>
 8008da0:	4620      	mov	r0, r4
 8008da2:	ee18 1a10 	vmov	r1, s16
 8008da6:	f000 fb69 	bl	800947c <_Bfree>
 8008daa:	2300      	movs	r3, #0
 8008dac:	9800      	ldr	r0, [sp, #0]
 8008dae:	702b      	strb	r3, [r5, #0]
 8008db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008db2:	3001      	adds	r0, #1
 8008db4:	6018      	str	r0, [r3, #0]
 8008db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f43f acf1 	beq.w	80087a0 <_dtoa_r+0xa0>
 8008dbe:	601d      	str	r5, [r3, #0]
 8008dc0:	e4ee      	b.n	80087a0 <_dtoa_r+0xa0>
 8008dc2:	9f00      	ldr	r7, [sp, #0]
 8008dc4:	462b      	mov	r3, r5
 8008dc6:	461d      	mov	r5, r3
 8008dc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dcc:	2a39      	cmp	r2, #57	; 0x39
 8008dce:	d106      	bne.n	8008dde <_dtoa_r+0x6de>
 8008dd0:	9a01      	ldr	r2, [sp, #4]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d1f7      	bne.n	8008dc6 <_dtoa_r+0x6c6>
 8008dd6:	9901      	ldr	r1, [sp, #4]
 8008dd8:	2230      	movs	r2, #48	; 0x30
 8008dda:	3701      	adds	r7, #1
 8008ddc:	700a      	strb	r2, [r1, #0]
 8008dde:	781a      	ldrb	r2, [r3, #0]
 8008de0:	3201      	adds	r2, #1
 8008de2:	701a      	strb	r2, [r3, #0]
 8008de4:	e790      	b.n	8008d08 <_dtoa_r+0x608>
 8008de6:	4ba6      	ldr	r3, [pc, #664]	; (8009080 <_dtoa_r+0x980>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	f7f7 fc1d 	bl	8000628 <__aeabi_dmul>
 8008dee:	2200      	movs	r2, #0
 8008df0:	2300      	movs	r3, #0
 8008df2:	4606      	mov	r6, r0
 8008df4:	460f      	mov	r7, r1
 8008df6:	f7f7 fe7f 	bl	8000af8 <__aeabi_dcmpeq>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d09d      	beq.n	8008d3a <_dtoa_r+0x63a>
 8008dfe:	e7cf      	b.n	8008da0 <_dtoa_r+0x6a0>
 8008e00:	9a08      	ldr	r2, [sp, #32]
 8008e02:	2a00      	cmp	r2, #0
 8008e04:	f000 80d7 	beq.w	8008fb6 <_dtoa_r+0x8b6>
 8008e08:	9a06      	ldr	r2, [sp, #24]
 8008e0a:	2a01      	cmp	r2, #1
 8008e0c:	f300 80ba 	bgt.w	8008f84 <_dtoa_r+0x884>
 8008e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e12:	2a00      	cmp	r2, #0
 8008e14:	f000 80b2 	beq.w	8008f7c <_dtoa_r+0x87c>
 8008e18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e1c:	9e07      	ldr	r6, [sp, #28]
 8008e1e:	9d04      	ldr	r5, [sp, #16]
 8008e20:	9a04      	ldr	r2, [sp, #16]
 8008e22:	441a      	add	r2, r3
 8008e24:	9204      	str	r2, [sp, #16]
 8008e26:	9a05      	ldr	r2, [sp, #20]
 8008e28:	2101      	movs	r1, #1
 8008e2a:	441a      	add	r2, r3
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	9205      	str	r2, [sp, #20]
 8008e30:	f000 fbdc 	bl	80095ec <__i2b>
 8008e34:	4607      	mov	r7, r0
 8008e36:	2d00      	cmp	r5, #0
 8008e38:	dd0c      	ble.n	8008e54 <_dtoa_r+0x754>
 8008e3a:	9b05      	ldr	r3, [sp, #20]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dd09      	ble.n	8008e54 <_dtoa_r+0x754>
 8008e40:	42ab      	cmp	r3, r5
 8008e42:	9a04      	ldr	r2, [sp, #16]
 8008e44:	bfa8      	it	ge
 8008e46:	462b      	movge	r3, r5
 8008e48:	1ad2      	subs	r2, r2, r3
 8008e4a:	9204      	str	r2, [sp, #16]
 8008e4c:	9a05      	ldr	r2, [sp, #20]
 8008e4e:	1aed      	subs	r5, r5, r3
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	9305      	str	r3, [sp, #20]
 8008e54:	9b07      	ldr	r3, [sp, #28]
 8008e56:	b31b      	cbz	r3, 8008ea0 <_dtoa_r+0x7a0>
 8008e58:	9b08      	ldr	r3, [sp, #32]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 80af 	beq.w	8008fbe <_dtoa_r+0x8be>
 8008e60:	2e00      	cmp	r6, #0
 8008e62:	dd13      	ble.n	8008e8c <_dtoa_r+0x78c>
 8008e64:	4639      	mov	r1, r7
 8008e66:	4632      	mov	r2, r6
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f000 fc7f 	bl	800976c <__pow5mult>
 8008e6e:	ee18 2a10 	vmov	r2, s16
 8008e72:	4601      	mov	r1, r0
 8008e74:	4607      	mov	r7, r0
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 fbce 	bl	8009618 <__multiply>
 8008e7c:	ee18 1a10 	vmov	r1, s16
 8008e80:	4680      	mov	r8, r0
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 fafa 	bl	800947c <_Bfree>
 8008e88:	ee08 8a10 	vmov	s16, r8
 8008e8c:	9b07      	ldr	r3, [sp, #28]
 8008e8e:	1b9a      	subs	r2, r3, r6
 8008e90:	d006      	beq.n	8008ea0 <_dtoa_r+0x7a0>
 8008e92:	ee18 1a10 	vmov	r1, s16
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 fc68 	bl	800976c <__pow5mult>
 8008e9c:	ee08 0a10 	vmov	s16, r0
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 fba2 	bl	80095ec <__i2b>
 8008ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	4606      	mov	r6, r0
 8008eae:	f340 8088 	ble.w	8008fc2 <_dtoa_r+0x8c2>
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	4601      	mov	r1, r0
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f000 fc58 	bl	800976c <__pow5mult>
 8008ebc:	9b06      	ldr	r3, [sp, #24]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	f340 8081 	ble.w	8008fc8 <_dtoa_r+0x8c8>
 8008ec6:	f04f 0800 	mov.w	r8, #0
 8008eca:	6933      	ldr	r3, [r6, #16]
 8008ecc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ed0:	6918      	ldr	r0, [r3, #16]
 8008ed2:	f000 fb3b 	bl	800954c <__hi0bits>
 8008ed6:	f1c0 0020 	rsb	r0, r0, #32
 8008eda:	9b05      	ldr	r3, [sp, #20]
 8008edc:	4418      	add	r0, r3
 8008ede:	f010 001f 	ands.w	r0, r0, #31
 8008ee2:	f000 8092 	beq.w	800900a <_dtoa_r+0x90a>
 8008ee6:	f1c0 0320 	rsb	r3, r0, #32
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	f340 808a 	ble.w	8009004 <_dtoa_r+0x904>
 8008ef0:	f1c0 001c 	rsb	r0, r0, #28
 8008ef4:	9b04      	ldr	r3, [sp, #16]
 8008ef6:	4403      	add	r3, r0
 8008ef8:	9304      	str	r3, [sp, #16]
 8008efa:	9b05      	ldr	r3, [sp, #20]
 8008efc:	4403      	add	r3, r0
 8008efe:	4405      	add	r5, r0
 8008f00:	9305      	str	r3, [sp, #20]
 8008f02:	9b04      	ldr	r3, [sp, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	dd07      	ble.n	8008f18 <_dtoa_r+0x818>
 8008f08:	ee18 1a10 	vmov	r1, s16
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f000 fc86 	bl	8009820 <__lshift>
 8008f14:	ee08 0a10 	vmov	s16, r0
 8008f18:	9b05      	ldr	r3, [sp, #20]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dd05      	ble.n	8008f2a <_dtoa_r+0x82a>
 8008f1e:	4631      	mov	r1, r6
 8008f20:	461a      	mov	r2, r3
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 fc7c 	bl	8009820 <__lshift>
 8008f28:	4606      	mov	r6, r0
 8008f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d06e      	beq.n	800900e <_dtoa_r+0x90e>
 8008f30:	ee18 0a10 	vmov	r0, s16
 8008f34:	4631      	mov	r1, r6
 8008f36:	f000 fce3 	bl	8009900 <__mcmp>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	da67      	bge.n	800900e <_dtoa_r+0x90e>
 8008f3e:	9b00      	ldr	r3, [sp, #0]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	ee18 1a10 	vmov	r1, s16
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	220a      	movs	r2, #10
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f000 fab7 	bl	80094c0 <__multadd>
 8008f52:	9b08      	ldr	r3, [sp, #32]
 8008f54:	ee08 0a10 	vmov	s16, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 81b1 	beq.w	80092c0 <_dtoa_r+0xbc0>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	4639      	mov	r1, r7
 8008f62:	220a      	movs	r2, #10
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 faab 	bl	80094c0 <__multadd>
 8008f6a:	9b02      	ldr	r3, [sp, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	4607      	mov	r7, r0
 8008f70:	f300 808e 	bgt.w	8009090 <_dtoa_r+0x990>
 8008f74:	9b06      	ldr	r3, [sp, #24]
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	dc51      	bgt.n	800901e <_dtoa_r+0x91e>
 8008f7a:	e089      	b.n	8009090 <_dtoa_r+0x990>
 8008f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f82:	e74b      	b.n	8008e1c <_dtoa_r+0x71c>
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	1e5e      	subs	r6, r3, #1
 8008f88:	9b07      	ldr	r3, [sp, #28]
 8008f8a:	42b3      	cmp	r3, r6
 8008f8c:	bfbf      	itttt	lt
 8008f8e:	9b07      	ldrlt	r3, [sp, #28]
 8008f90:	9607      	strlt	r6, [sp, #28]
 8008f92:	1af2      	sublt	r2, r6, r3
 8008f94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008f96:	bfb6      	itet	lt
 8008f98:	189b      	addlt	r3, r3, r2
 8008f9a:	1b9e      	subge	r6, r3, r6
 8008f9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008f9e:	9b03      	ldr	r3, [sp, #12]
 8008fa0:	bfb8      	it	lt
 8008fa2:	2600      	movlt	r6, #0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bfb7      	itett	lt
 8008fa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008fac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008fb0:	1a9d      	sublt	r5, r3, r2
 8008fb2:	2300      	movlt	r3, #0
 8008fb4:	e734      	b.n	8008e20 <_dtoa_r+0x720>
 8008fb6:	9e07      	ldr	r6, [sp, #28]
 8008fb8:	9d04      	ldr	r5, [sp, #16]
 8008fba:	9f08      	ldr	r7, [sp, #32]
 8008fbc:	e73b      	b.n	8008e36 <_dtoa_r+0x736>
 8008fbe:	9a07      	ldr	r2, [sp, #28]
 8008fc0:	e767      	b.n	8008e92 <_dtoa_r+0x792>
 8008fc2:	9b06      	ldr	r3, [sp, #24]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	dc18      	bgt.n	8008ffa <_dtoa_r+0x8fa>
 8008fc8:	f1ba 0f00 	cmp.w	sl, #0
 8008fcc:	d115      	bne.n	8008ffa <_dtoa_r+0x8fa>
 8008fce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fd2:	b993      	cbnz	r3, 8008ffa <_dtoa_r+0x8fa>
 8008fd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008fd8:	0d1b      	lsrs	r3, r3, #20
 8008fda:	051b      	lsls	r3, r3, #20
 8008fdc:	b183      	cbz	r3, 8009000 <_dtoa_r+0x900>
 8008fde:	9b04      	ldr	r3, [sp, #16]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	9304      	str	r3, [sp, #16]
 8008fe4:	9b05      	ldr	r3, [sp, #20]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	9305      	str	r3, [sp, #20]
 8008fea:	f04f 0801 	mov.w	r8, #1
 8008fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f47f af6a 	bne.w	8008eca <_dtoa_r+0x7ca>
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	e76f      	b.n	8008eda <_dtoa_r+0x7da>
 8008ffa:	f04f 0800 	mov.w	r8, #0
 8008ffe:	e7f6      	b.n	8008fee <_dtoa_r+0x8ee>
 8009000:	4698      	mov	r8, r3
 8009002:	e7f4      	b.n	8008fee <_dtoa_r+0x8ee>
 8009004:	f43f af7d 	beq.w	8008f02 <_dtoa_r+0x802>
 8009008:	4618      	mov	r0, r3
 800900a:	301c      	adds	r0, #28
 800900c:	e772      	b.n	8008ef4 <_dtoa_r+0x7f4>
 800900e:	9b03      	ldr	r3, [sp, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	dc37      	bgt.n	8009084 <_dtoa_r+0x984>
 8009014:	9b06      	ldr	r3, [sp, #24]
 8009016:	2b02      	cmp	r3, #2
 8009018:	dd34      	ble.n	8009084 <_dtoa_r+0x984>
 800901a:	9b03      	ldr	r3, [sp, #12]
 800901c:	9302      	str	r3, [sp, #8]
 800901e:	9b02      	ldr	r3, [sp, #8]
 8009020:	b96b      	cbnz	r3, 800903e <_dtoa_r+0x93e>
 8009022:	4631      	mov	r1, r6
 8009024:	2205      	movs	r2, #5
 8009026:	4620      	mov	r0, r4
 8009028:	f000 fa4a 	bl	80094c0 <__multadd>
 800902c:	4601      	mov	r1, r0
 800902e:	4606      	mov	r6, r0
 8009030:	ee18 0a10 	vmov	r0, s16
 8009034:	f000 fc64 	bl	8009900 <__mcmp>
 8009038:	2800      	cmp	r0, #0
 800903a:	f73f adbb 	bgt.w	8008bb4 <_dtoa_r+0x4b4>
 800903e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009040:	9d01      	ldr	r5, [sp, #4]
 8009042:	43db      	mvns	r3, r3
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	f04f 0800 	mov.w	r8, #0
 800904a:	4631      	mov	r1, r6
 800904c:	4620      	mov	r0, r4
 800904e:	f000 fa15 	bl	800947c <_Bfree>
 8009052:	2f00      	cmp	r7, #0
 8009054:	f43f aea4 	beq.w	8008da0 <_dtoa_r+0x6a0>
 8009058:	f1b8 0f00 	cmp.w	r8, #0
 800905c:	d005      	beq.n	800906a <_dtoa_r+0x96a>
 800905e:	45b8      	cmp	r8, r7
 8009060:	d003      	beq.n	800906a <_dtoa_r+0x96a>
 8009062:	4641      	mov	r1, r8
 8009064:	4620      	mov	r0, r4
 8009066:	f000 fa09 	bl	800947c <_Bfree>
 800906a:	4639      	mov	r1, r7
 800906c:	4620      	mov	r0, r4
 800906e:	f000 fa05 	bl	800947c <_Bfree>
 8009072:	e695      	b.n	8008da0 <_dtoa_r+0x6a0>
 8009074:	2600      	movs	r6, #0
 8009076:	4637      	mov	r7, r6
 8009078:	e7e1      	b.n	800903e <_dtoa_r+0x93e>
 800907a:	9700      	str	r7, [sp, #0]
 800907c:	4637      	mov	r7, r6
 800907e:	e599      	b.n	8008bb4 <_dtoa_r+0x4b4>
 8009080:	40240000 	.word	0x40240000
 8009084:	9b08      	ldr	r3, [sp, #32]
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 80ca 	beq.w	8009220 <_dtoa_r+0xb20>
 800908c:	9b03      	ldr	r3, [sp, #12]
 800908e:	9302      	str	r3, [sp, #8]
 8009090:	2d00      	cmp	r5, #0
 8009092:	dd05      	ble.n	80090a0 <_dtoa_r+0x9a0>
 8009094:	4639      	mov	r1, r7
 8009096:	462a      	mov	r2, r5
 8009098:	4620      	mov	r0, r4
 800909a:	f000 fbc1 	bl	8009820 <__lshift>
 800909e:	4607      	mov	r7, r0
 80090a0:	f1b8 0f00 	cmp.w	r8, #0
 80090a4:	d05b      	beq.n	800915e <_dtoa_r+0xa5e>
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 f9a7 	bl	80093fc <_Balloc>
 80090ae:	4605      	mov	r5, r0
 80090b0:	b928      	cbnz	r0, 80090be <_dtoa_r+0x9be>
 80090b2:	4b87      	ldr	r3, [pc, #540]	; (80092d0 <_dtoa_r+0xbd0>)
 80090b4:	4602      	mov	r2, r0
 80090b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090ba:	f7ff bb3b 	b.w	8008734 <_dtoa_r+0x34>
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	3202      	adds	r2, #2
 80090c2:	0092      	lsls	r2, r2, #2
 80090c4:	f107 010c 	add.w	r1, r7, #12
 80090c8:	300c      	adds	r0, #12
 80090ca:	f7fe f9f0 	bl	80074ae <memcpy>
 80090ce:	2201      	movs	r2, #1
 80090d0:	4629      	mov	r1, r5
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 fba4 	bl	8009820 <__lshift>
 80090d8:	9b01      	ldr	r3, [sp, #4]
 80090da:	f103 0901 	add.w	r9, r3, #1
 80090de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80090e2:	4413      	add	r3, r2
 80090e4:	9305      	str	r3, [sp, #20]
 80090e6:	f00a 0301 	and.w	r3, sl, #1
 80090ea:	46b8      	mov	r8, r7
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	4607      	mov	r7, r0
 80090f0:	4631      	mov	r1, r6
 80090f2:	ee18 0a10 	vmov	r0, s16
 80090f6:	f7ff fa77 	bl	80085e8 <quorem>
 80090fa:	4641      	mov	r1, r8
 80090fc:	9002      	str	r0, [sp, #8]
 80090fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009102:	ee18 0a10 	vmov	r0, s16
 8009106:	f000 fbfb 	bl	8009900 <__mcmp>
 800910a:	463a      	mov	r2, r7
 800910c:	9003      	str	r0, [sp, #12]
 800910e:	4631      	mov	r1, r6
 8009110:	4620      	mov	r0, r4
 8009112:	f000 fc11 	bl	8009938 <__mdiff>
 8009116:	68c2      	ldr	r2, [r0, #12]
 8009118:	f109 3bff 	add.w	fp, r9, #4294967295
 800911c:	4605      	mov	r5, r0
 800911e:	bb02      	cbnz	r2, 8009162 <_dtoa_r+0xa62>
 8009120:	4601      	mov	r1, r0
 8009122:	ee18 0a10 	vmov	r0, s16
 8009126:	f000 fbeb 	bl	8009900 <__mcmp>
 800912a:	4602      	mov	r2, r0
 800912c:	4629      	mov	r1, r5
 800912e:	4620      	mov	r0, r4
 8009130:	9207      	str	r2, [sp, #28]
 8009132:	f000 f9a3 	bl	800947c <_Bfree>
 8009136:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800913a:	ea43 0102 	orr.w	r1, r3, r2
 800913e:	9b04      	ldr	r3, [sp, #16]
 8009140:	430b      	orrs	r3, r1
 8009142:	464d      	mov	r5, r9
 8009144:	d10f      	bne.n	8009166 <_dtoa_r+0xa66>
 8009146:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800914a:	d02a      	beq.n	80091a2 <_dtoa_r+0xaa2>
 800914c:	9b03      	ldr	r3, [sp, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	dd02      	ble.n	8009158 <_dtoa_r+0xa58>
 8009152:	9b02      	ldr	r3, [sp, #8]
 8009154:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009158:	f88b a000 	strb.w	sl, [fp]
 800915c:	e775      	b.n	800904a <_dtoa_r+0x94a>
 800915e:	4638      	mov	r0, r7
 8009160:	e7ba      	b.n	80090d8 <_dtoa_r+0x9d8>
 8009162:	2201      	movs	r2, #1
 8009164:	e7e2      	b.n	800912c <_dtoa_r+0xa2c>
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	db04      	blt.n	8009176 <_dtoa_r+0xa76>
 800916c:	9906      	ldr	r1, [sp, #24]
 800916e:	430b      	orrs	r3, r1
 8009170:	9904      	ldr	r1, [sp, #16]
 8009172:	430b      	orrs	r3, r1
 8009174:	d122      	bne.n	80091bc <_dtoa_r+0xabc>
 8009176:	2a00      	cmp	r2, #0
 8009178:	ddee      	ble.n	8009158 <_dtoa_r+0xa58>
 800917a:	ee18 1a10 	vmov	r1, s16
 800917e:	2201      	movs	r2, #1
 8009180:	4620      	mov	r0, r4
 8009182:	f000 fb4d 	bl	8009820 <__lshift>
 8009186:	4631      	mov	r1, r6
 8009188:	ee08 0a10 	vmov	s16, r0
 800918c:	f000 fbb8 	bl	8009900 <__mcmp>
 8009190:	2800      	cmp	r0, #0
 8009192:	dc03      	bgt.n	800919c <_dtoa_r+0xa9c>
 8009194:	d1e0      	bne.n	8009158 <_dtoa_r+0xa58>
 8009196:	f01a 0f01 	tst.w	sl, #1
 800919a:	d0dd      	beq.n	8009158 <_dtoa_r+0xa58>
 800919c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80091a0:	d1d7      	bne.n	8009152 <_dtoa_r+0xa52>
 80091a2:	2339      	movs	r3, #57	; 0x39
 80091a4:	f88b 3000 	strb.w	r3, [fp]
 80091a8:	462b      	mov	r3, r5
 80091aa:	461d      	mov	r5, r3
 80091ac:	3b01      	subs	r3, #1
 80091ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091b2:	2a39      	cmp	r2, #57	; 0x39
 80091b4:	d071      	beq.n	800929a <_dtoa_r+0xb9a>
 80091b6:	3201      	adds	r2, #1
 80091b8:	701a      	strb	r2, [r3, #0]
 80091ba:	e746      	b.n	800904a <_dtoa_r+0x94a>
 80091bc:	2a00      	cmp	r2, #0
 80091be:	dd07      	ble.n	80091d0 <_dtoa_r+0xad0>
 80091c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80091c4:	d0ed      	beq.n	80091a2 <_dtoa_r+0xaa2>
 80091c6:	f10a 0301 	add.w	r3, sl, #1
 80091ca:	f88b 3000 	strb.w	r3, [fp]
 80091ce:	e73c      	b.n	800904a <_dtoa_r+0x94a>
 80091d0:	9b05      	ldr	r3, [sp, #20]
 80091d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80091d6:	4599      	cmp	r9, r3
 80091d8:	d047      	beq.n	800926a <_dtoa_r+0xb6a>
 80091da:	ee18 1a10 	vmov	r1, s16
 80091de:	2300      	movs	r3, #0
 80091e0:	220a      	movs	r2, #10
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 f96c 	bl	80094c0 <__multadd>
 80091e8:	45b8      	cmp	r8, r7
 80091ea:	ee08 0a10 	vmov	s16, r0
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	f04f 020a 	mov.w	r2, #10
 80091f6:	4641      	mov	r1, r8
 80091f8:	4620      	mov	r0, r4
 80091fa:	d106      	bne.n	800920a <_dtoa_r+0xb0a>
 80091fc:	f000 f960 	bl	80094c0 <__multadd>
 8009200:	4680      	mov	r8, r0
 8009202:	4607      	mov	r7, r0
 8009204:	f109 0901 	add.w	r9, r9, #1
 8009208:	e772      	b.n	80090f0 <_dtoa_r+0x9f0>
 800920a:	f000 f959 	bl	80094c0 <__multadd>
 800920e:	4639      	mov	r1, r7
 8009210:	4680      	mov	r8, r0
 8009212:	2300      	movs	r3, #0
 8009214:	220a      	movs	r2, #10
 8009216:	4620      	mov	r0, r4
 8009218:	f000 f952 	bl	80094c0 <__multadd>
 800921c:	4607      	mov	r7, r0
 800921e:	e7f1      	b.n	8009204 <_dtoa_r+0xb04>
 8009220:	9b03      	ldr	r3, [sp, #12]
 8009222:	9302      	str	r3, [sp, #8]
 8009224:	9d01      	ldr	r5, [sp, #4]
 8009226:	ee18 0a10 	vmov	r0, s16
 800922a:	4631      	mov	r1, r6
 800922c:	f7ff f9dc 	bl	80085e8 <quorem>
 8009230:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009234:	9b01      	ldr	r3, [sp, #4]
 8009236:	f805 ab01 	strb.w	sl, [r5], #1
 800923a:	1aea      	subs	r2, r5, r3
 800923c:	9b02      	ldr	r3, [sp, #8]
 800923e:	4293      	cmp	r3, r2
 8009240:	dd09      	ble.n	8009256 <_dtoa_r+0xb56>
 8009242:	ee18 1a10 	vmov	r1, s16
 8009246:	2300      	movs	r3, #0
 8009248:	220a      	movs	r2, #10
 800924a:	4620      	mov	r0, r4
 800924c:	f000 f938 	bl	80094c0 <__multadd>
 8009250:	ee08 0a10 	vmov	s16, r0
 8009254:	e7e7      	b.n	8009226 <_dtoa_r+0xb26>
 8009256:	9b02      	ldr	r3, [sp, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	bfc8      	it	gt
 800925c:	461d      	movgt	r5, r3
 800925e:	9b01      	ldr	r3, [sp, #4]
 8009260:	bfd8      	it	le
 8009262:	2501      	movle	r5, #1
 8009264:	441d      	add	r5, r3
 8009266:	f04f 0800 	mov.w	r8, #0
 800926a:	ee18 1a10 	vmov	r1, s16
 800926e:	2201      	movs	r2, #1
 8009270:	4620      	mov	r0, r4
 8009272:	f000 fad5 	bl	8009820 <__lshift>
 8009276:	4631      	mov	r1, r6
 8009278:	ee08 0a10 	vmov	s16, r0
 800927c:	f000 fb40 	bl	8009900 <__mcmp>
 8009280:	2800      	cmp	r0, #0
 8009282:	dc91      	bgt.n	80091a8 <_dtoa_r+0xaa8>
 8009284:	d102      	bne.n	800928c <_dtoa_r+0xb8c>
 8009286:	f01a 0f01 	tst.w	sl, #1
 800928a:	d18d      	bne.n	80091a8 <_dtoa_r+0xaa8>
 800928c:	462b      	mov	r3, r5
 800928e:	461d      	mov	r5, r3
 8009290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009294:	2a30      	cmp	r2, #48	; 0x30
 8009296:	d0fa      	beq.n	800928e <_dtoa_r+0xb8e>
 8009298:	e6d7      	b.n	800904a <_dtoa_r+0x94a>
 800929a:	9a01      	ldr	r2, [sp, #4]
 800929c:	429a      	cmp	r2, r3
 800929e:	d184      	bne.n	80091aa <_dtoa_r+0xaaa>
 80092a0:	9b00      	ldr	r3, [sp, #0]
 80092a2:	3301      	adds	r3, #1
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	2331      	movs	r3, #49	; 0x31
 80092a8:	7013      	strb	r3, [r2, #0]
 80092aa:	e6ce      	b.n	800904a <_dtoa_r+0x94a>
 80092ac:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <_dtoa_r+0xbd4>)
 80092ae:	f7ff ba95 	b.w	80087dc <_dtoa_r+0xdc>
 80092b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f47f aa6e 	bne.w	8008796 <_dtoa_r+0x96>
 80092ba:	4b07      	ldr	r3, [pc, #28]	; (80092d8 <_dtoa_r+0xbd8>)
 80092bc:	f7ff ba8e 	b.w	80087dc <_dtoa_r+0xdc>
 80092c0:	9b02      	ldr	r3, [sp, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	dcae      	bgt.n	8009224 <_dtoa_r+0xb24>
 80092c6:	9b06      	ldr	r3, [sp, #24]
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	f73f aea8 	bgt.w	800901e <_dtoa_r+0x91e>
 80092ce:	e7a9      	b.n	8009224 <_dtoa_r+0xb24>
 80092d0:	0800a7b8 	.word	0x0800a7b8
 80092d4:	0800a614 	.word	0x0800a614
 80092d8:	0800a739 	.word	0x0800a739

080092dc <_localeconv_r>:
 80092dc:	4800      	ldr	r0, [pc, #0]	; (80092e0 <_localeconv_r+0x4>)
 80092de:	4770      	bx	lr
 80092e0:	20000164 	.word	0x20000164

080092e4 <_lseek_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	4d07      	ldr	r5, [pc, #28]	; (8009304 <_lseek_r+0x20>)
 80092e8:	4604      	mov	r4, r0
 80092ea:	4608      	mov	r0, r1
 80092ec:	4611      	mov	r1, r2
 80092ee:	2200      	movs	r2, #0
 80092f0:	602a      	str	r2, [r5, #0]
 80092f2:	461a      	mov	r2, r3
 80092f4:	f7fa f96a 	bl	80035cc <_lseek>
 80092f8:	1c43      	adds	r3, r0, #1
 80092fa:	d102      	bne.n	8009302 <_lseek_r+0x1e>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	b103      	cbz	r3, 8009302 <_lseek_r+0x1e>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	200008b0 	.word	0x200008b0

08009308 <__swhatbuf_r>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	460e      	mov	r6, r1
 800930c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009310:	2900      	cmp	r1, #0
 8009312:	b096      	sub	sp, #88	; 0x58
 8009314:	4614      	mov	r4, r2
 8009316:	461d      	mov	r5, r3
 8009318:	da08      	bge.n	800932c <__swhatbuf_r+0x24>
 800931a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	602a      	str	r2, [r5, #0]
 8009322:	061a      	lsls	r2, r3, #24
 8009324:	d410      	bmi.n	8009348 <__swhatbuf_r+0x40>
 8009326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800932a:	e00e      	b.n	800934a <__swhatbuf_r+0x42>
 800932c:	466a      	mov	r2, sp
 800932e:	f000 fef7 	bl	800a120 <_fstat_r>
 8009332:	2800      	cmp	r0, #0
 8009334:	dbf1      	blt.n	800931a <__swhatbuf_r+0x12>
 8009336:	9a01      	ldr	r2, [sp, #4]
 8009338:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800933c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009340:	425a      	negs	r2, r3
 8009342:	415a      	adcs	r2, r3
 8009344:	602a      	str	r2, [r5, #0]
 8009346:	e7ee      	b.n	8009326 <__swhatbuf_r+0x1e>
 8009348:	2340      	movs	r3, #64	; 0x40
 800934a:	2000      	movs	r0, #0
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	b016      	add	sp, #88	; 0x58
 8009350:	bd70      	pop	{r4, r5, r6, pc}
	...

08009354 <__smakebuf_r>:
 8009354:	898b      	ldrh	r3, [r1, #12]
 8009356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009358:	079d      	lsls	r5, r3, #30
 800935a:	4606      	mov	r6, r0
 800935c:	460c      	mov	r4, r1
 800935e:	d507      	bpl.n	8009370 <__smakebuf_r+0x1c>
 8009360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	6123      	str	r3, [r4, #16]
 8009368:	2301      	movs	r3, #1
 800936a:	6163      	str	r3, [r4, #20]
 800936c:	b002      	add	sp, #8
 800936e:	bd70      	pop	{r4, r5, r6, pc}
 8009370:	ab01      	add	r3, sp, #4
 8009372:	466a      	mov	r2, sp
 8009374:	f7ff ffc8 	bl	8009308 <__swhatbuf_r>
 8009378:	9900      	ldr	r1, [sp, #0]
 800937a:	4605      	mov	r5, r0
 800937c:	4630      	mov	r0, r6
 800937e:	f7fe f919 	bl	80075b4 <_malloc_r>
 8009382:	b948      	cbnz	r0, 8009398 <__smakebuf_r+0x44>
 8009384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009388:	059a      	lsls	r2, r3, #22
 800938a:	d4ef      	bmi.n	800936c <__smakebuf_r+0x18>
 800938c:	f023 0303 	bic.w	r3, r3, #3
 8009390:	f043 0302 	orr.w	r3, r3, #2
 8009394:	81a3      	strh	r3, [r4, #12]
 8009396:	e7e3      	b.n	8009360 <__smakebuf_r+0xc>
 8009398:	4b0d      	ldr	r3, [pc, #52]	; (80093d0 <__smakebuf_r+0x7c>)
 800939a:	62b3      	str	r3, [r6, #40]	; 0x28
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	6020      	str	r0, [r4, #0]
 80093a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a4:	81a3      	strh	r3, [r4, #12]
 80093a6:	9b00      	ldr	r3, [sp, #0]
 80093a8:	6163      	str	r3, [r4, #20]
 80093aa:	9b01      	ldr	r3, [sp, #4]
 80093ac:	6120      	str	r0, [r4, #16]
 80093ae:	b15b      	cbz	r3, 80093c8 <__smakebuf_r+0x74>
 80093b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093b4:	4630      	mov	r0, r6
 80093b6:	f000 fec5 	bl	800a144 <_isatty_r>
 80093ba:	b128      	cbz	r0, 80093c8 <__smakebuf_r+0x74>
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	f023 0303 	bic.w	r3, r3, #3
 80093c2:	f043 0301 	orr.w	r3, r3, #1
 80093c6:	81a3      	strh	r3, [r4, #12]
 80093c8:	89a0      	ldrh	r0, [r4, #12]
 80093ca:	4305      	orrs	r5, r0
 80093cc:	81a5      	strh	r5, [r4, #12]
 80093ce:	e7cd      	b.n	800936c <__smakebuf_r+0x18>
 80093d0:	080072bd 	.word	0x080072bd

080093d4 <malloc>:
 80093d4:	4b02      	ldr	r3, [pc, #8]	; (80093e0 <malloc+0xc>)
 80093d6:	4601      	mov	r1, r0
 80093d8:	6818      	ldr	r0, [r3, #0]
 80093da:	f7fe b8eb 	b.w	80075b4 <_malloc_r>
 80093de:	bf00      	nop
 80093e0:	20000010 	.word	0x20000010

080093e4 <__malloc_lock>:
 80093e4:	4801      	ldr	r0, [pc, #4]	; (80093ec <__malloc_lock+0x8>)
 80093e6:	f7fe b860 	b.w	80074aa <__retarget_lock_acquire_recursive>
 80093ea:	bf00      	nop
 80093ec:	200008a4 	.word	0x200008a4

080093f0 <__malloc_unlock>:
 80093f0:	4801      	ldr	r0, [pc, #4]	; (80093f8 <__malloc_unlock+0x8>)
 80093f2:	f7fe b85b 	b.w	80074ac <__retarget_lock_release_recursive>
 80093f6:	bf00      	nop
 80093f8:	200008a4 	.word	0x200008a4

080093fc <_Balloc>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009400:	4604      	mov	r4, r0
 8009402:	460d      	mov	r5, r1
 8009404:	b976      	cbnz	r6, 8009424 <_Balloc+0x28>
 8009406:	2010      	movs	r0, #16
 8009408:	f7ff ffe4 	bl	80093d4 <malloc>
 800940c:	4602      	mov	r2, r0
 800940e:	6260      	str	r0, [r4, #36]	; 0x24
 8009410:	b920      	cbnz	r0, 800941c <_Balloc+0x20>
 8009412:	4b18      	ldr	r3, [pc, #96]	; (8009474 <_Balloc+0x78>)
 8009414:	4818      	ldr	r0, [pc, #96]	; (8009478 <_Balloc+0x7c>)
 8009416:	2166      	movs	r1, #102	; 0x66
 8009418:	f000 fe52 	bl	800a0c0 <__assert_func>
 800941c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009420:	6006      	str	r6, [r0, #0]
 8009422:	60c6      	str	r6, [r0, #12]
 8009424:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009426:	68f3      	ldr	r3, [r6, #12]
 8009428:	b183      	cbz	r3, 800944c <_Balloc+0x50>
 800942a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009432:	b9b8      	cbnz	r0, 8009464 <_Balloc+0x68>
 8009434:	2101      	movs	r1, #1
 8009436:	fa01 f605 	lsl.w	r6, r1, r5
 800943a:	1d72      	adds	r2, r6, #5
 800943c:	0092      	lsls	r2, r2, #2
 800943e:	4620      	mov	r0, r4
 8009440:	f000 fb60 	bl	8009b04 <_calloc_r>
 8009444:	b160      	cbz	r0, 8009460 <_Balloc+0x64>
 8009446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800944a:	e00e      	b.n	800946a <_Balloc+0x6e>
 800944c:	2221      	movs	r2, #33	; 0x21
 800944e:	2104      	movs	r1, #4
 8009450:	4620      	mov	r0, r4
 8009452:	f000 fb57 	bl	8009b04 <_calloc_r>
 8009456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009458:	60f0      	str	r0, [r6, #12]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e4      	bne.n	800942a <_Balloc+0x2e>
 8009460:	2000      	movs	r0, #0
 8009462:	bd70      	pop	{r4, r5, r6, pc}
 8009464:	6802      	ldr	r2, [r0, #0]
 8009466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800946a:	2300      	movs	r3, #0
 800946c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009470:	e7f7      	b.n	8009462 <_Balloc+0x66>
 8009472:	bf00      	nop
 8009474:	0800a746 	.word	0x0800a746
 8009478:	0800a7c9 	.word	0x0800a7c9

0800947c <_Bfree>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009480:	4605      	mov	r5, r0
 8009482:	460c      	mov	r4, r1
 8009484:	b976      	cbnz	r6, 80094a4 <_Bfree+0x28>
 8009486:	2010      	movs	r0, #16
 8009488:	f7ff ffa4 	bl	80093d4 <malloc>
 800948c:	4602      	mov	r2, r0
 800948e:	6268      	str	r0, [r5, #36]	; 0x24
 8009490:	b920      	cbnz	r0, 800949c <_Bfree+0x20>
 8009492:	4b09      	ldr	r3, [pc, #36]	; (80094b8 <_Bfree+0x3c>)
 8009494:	4809      	ldr	r0, [pc, #36]	; (80094bc <_Bfree+0x40>)
 8009496:	218a      	movs	r1, #138	; 0x8a
 8009498:	f000 fe12 	bl	800a0c0 <__assert_func>
 800949c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094a0:	6006      	str	r6, [r0, #0]
 80094a2:	60c6      	str	r6, [r0, #12]
 80094a4:	b13c      	cbz	r4, 80094b6 <_Bfree+0x3a>
 80094a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094a8:	6862      	ldr	r2, [r4, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094b0:	6021      	str	r1, [r4, #0]
 80094b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	0800a746 	.word	0x0800a746
 80094bc:	0800a7c9 	.word	0x0800a7c9

080094c0 <__multadd>:
 80094c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c4:	690d      	ldr	r5, [r1, #16]
 80094c6:	4607      	mov	r7, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	461e      	mov	r6, r3
 80094cc:	f101 0c14 	add.w	ip, r1, #20
 80094d0:	2000      	movs	r0, #0
 80094d2:	f8dc 3000 	ldr.w	r3, [ip]
 80094d6:	b299      	uxth	r1, r3
 80094d8:	fb02 6101 	mla	r1, r2, r1, r6
 80094dc:	0c1e      	lsrs	r6, r3, #16
 80094de:	0c0b      	lsrs	r3, r1, #16
 80094e0:	fb02 3306 	mla	r3, r2, r6, r3
 80094e4:	b289      	uxth	r1, r1
 80094e6:	3001      	adds	r0, #1
 80094e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094ec:	4285      	cmp	r5, r0
 80094ee:	f84c 1b04 	str.w	r1, [ip], #4
 80094f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094f6:	dcec      	bgt.n	80094d2 <__multadd+0x12>
 80094f8:	b30e      	cbz	r6, 800953e <__multadd+0x7e>
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	42ab      	cmp	r3, r5
 80094fe:	dc19      	bgt.n	8009534 <__multadd+0x74>
 8009500:	6861      	ldr	r1, [r4, #4]
 8009502:	4638      	mov	r0, r7
 8009504:	3101      	adds	r1, #1
 8009506:	f7ff ff79 	bl	80093fc <_Balloc>
 800950a:	4680      	mov	r8, r0
 800950c:	b928      	cbnz	r0, 800951a <__multadd+0x5a>
 800950e:	4602      	mov	r2, r0
 8009510:	4b0c      	ldr	r3, [pc, #48]	; (8009544 <__multadd+0x84>)
 8009512:	480d      	ldr	r0, [pc, #52]	; (8009548 <__multadd+0x88>)
 8009514:	21b5      	movs	r1, #181	; 0xb5
 8009516:	f000 fdd3 	bl	800a0c0 <__assert_func>
 800951a:	6922      	ldr	r2, [r4, #16]
 800951c:	3202      	adds	r2, #2
 800951e:	f104 010c 	add.w	r1, r4, #12
 8009522:	0092      	lsls	r2, r2, #2
 8009524:	300c      	adds	r0, #12
 8009526:	f7fd ffc2 	bl	80074ae <memcpy>
 800952a:	4621      	mov	r1, r4
 800952c:	4638      	mov	r0, r7
 800952e:	f7ff ffa5 	bl	800947c <_Bfree>
 8009532:	4644      	mov	r4, r8
 8009534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009538:	3501      	adds	r5, #1
 800953a:	615e      	str	r6, [r3, #20]
 800953c:	6125      	str	r5, [r4, #16]
 800953e:	4620      	mov	r0, r4
 8009540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009544:	0800a7b8 	.word	0x0800a7b8
 8009548:	0800a7c9 	.word	0x0800a7c9

0800954c <__hi0bits>:
 800954c:	0c03      	lsrs	r3, r0, #16
 800954e:	041b      	lsls	r3, r3, #16
 8009550:	b9d3      	cbnz	r3, 8009588 <__hi0bits+0x3c>
 8009552:	0400      	lsls	r0, r0, #16
 8009554:	2310      	movs	r3, #16
 8009556:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800955a:	bf04      	itt	eq
 800955c:	0200      	lsleq	r0, r0, #8
 800955e:	3308      	addeq	r3, #8
 8009560:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009564:	bf04      	itt	eq
 8009566:	0100      	lsleq	r0, r0, #4
 8009568:	3304      	addeq	r3, #4
 800956a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800956e:	bf04      	itt	eq
 8009570:	0080      	lsleq	r0, r0, #2
 8009572:	3302      	addeq	r3, #2
 8009574:	2800      	cmp	r0, #0
 8009576:	db05      	blt.n	8009584 <__hi0bits+0x38>
 8009578:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800957c:	f103 0301 	add.w	r3, r3, #1
 8009580:	bf08      	it	eq
 8009582:	2320      	moveq	r3, #32
 8009584:	4618      	mov	r0, r3
 8009586:	4770      	bx	lr
 8009588:	2300      	movs	r3, #0
 800958a:	e7e4      	b.n	8009556 <__hi0bits+0xa>

0800958c <__lo0bits>:
 800958c:	6803      	ldr	r3, [r0, #0]
 800958e:	f013 0207 	ands.w	r2, r3, #7
 8009592:	4601      	mov	r1, r0
 8009594:	d00b      	beq.n	80095ae <__lo0bits+0x22>
 8009596:	07da      	lsls	r2, r3, #31
 8009598:	d423      	bmi.n	80095e2 <__lo0bits+0x56>
 800959a:	0798      	lsls	r0, r3, #30
 800959c:	bf49      	itett	mi
 800959e:	085b      	lsrmi	r3, r3, #1
 80095a0:	089b      	lsrpl	r3, r3, #2
 80095a2:	2001      	movmi	r0, #1
 80095a4:	600b      	strmi	r3, [r1, #0]
 80095a6:	bf5c      	itt	pl
 80095a8:	600b      	strpl	r3, [r1, #0]
 80095aa:	2002      	movpl	r0, #2
 80095ac:	4770      	bx	lr
 80095ae:	b298      	uxth	r0, r3
 80095b0:	b9a8      	cbnz	r0, 80095de <__lo0bits+0x52>
 80095b2:	0c1b      	lsrs	r3, r3, #16
 80095b4:	2010      	movs	r0, #16
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	b90a      	cbnz	r2, 80095be <__lo0bits+0x32>
 80095ba:	3008      	adds	r0, #8
 80095bc:	0a1b      	lsrs	r3, r3, #8
 80095be:	071a      	lsls	r2, r3, #28
 80095c0:	bf04      	itt	eq
 80095c2:	091b      	lsreq	r3, r3, #4
 80095c4:	3004      	addeq	r0, #4
 80095c6:	079a      	lsls	r2, r3, #30
 80095c8:	bf04      	itt	eq
 80095ca:	089b      	lsreq	r3, r3, #2
 80095cc:	3002      	addeq	r0, #2
 80095ce:	07da      	lsls	r2, r3, #31
 80095d0:	d403      	bmi.n	80095da <__lo0bits+0x4e>
 80095d2:	085b      	lsrs	r3, r3, #1
 80095d4:	f100 0001 	add.w	r0, r0, #1
 80095d8:	d005      	beq.n	80095e6 <__lo0bits+0x5a>
 80095da:	600b      	str	r3, [r1, #0]
 80095dc:	4770      	bx	lr
 80095de:	4610      	mov	r0, r2
 80095e0:	e7e9      	b.n	80095b6 <__lo0bits+0x2a>
 80095e2:	2000      	movs	r0, #0
 80095e4:	4770      	bx	lr
 80095e6:	2020      	movs	r0, #32
 80095e8:	4770      	bx	lr
	...

080095ec <__i2b>:
 80095ec:	b510      	push	{r4, lr}
 80095ee:	460c      	mov	r4, r1
 80095f0:	2101      	movs	r1, #1
 80095f2:	f7ff ff03 	bl	80093fc <_Balloc>
 80095f6:	4602      	mov	r2, r0
 80095f8:	b928      	cbnz	r0, 8009606 <__i2b+0x1a>
 80095fa:	4b05      	ldr	r3, [pc, #20]	; (8009610 <__i2b+0x24>)
 80095fc:	4805      	ldr	r0, [pc, #20]	; (8009614 <__i2b+0x28>)
 80095fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009602:	f000 fd5d 	bl	800a0c0 <__assert_func>
 8009606:	2301      	movs	r3, #1
 8009608:	6144      	str	r4, [r0, #20]
 800960a:	6103      	str	r3, [r0, #16]
 800960c:	bd10      	pop	{r4, pc}
 800960e:	bf00      	nop
 8009610:	0800a7b8 	.word	0x0800a7b8
 8009614:	0800a7c9 	.word	0x0800a7c9

08009618 <__multiply>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	4691      	mov	r9, r2
 800961e:	690a      	ldr	r2, [r1, #16]
 8009620:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009624:	429a      	cmp	r2, r3
 8009626:	bfb8      	it	lt
 8009628:	460b      	movlt	r3, r1
 800962a:	460c      	mov	r4, r1
 800962c:	bfbc      	itt	lt
 800962e:	464c      	movlt	r4, r9
 8009630:	4699      	movlt	r9, r3
 8009632:	6927      	ldr	r7, [r4, #16]
 8009634:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009638:	68a3      	ldr	r3, [r4, #8]
 800963a:	6861      	ldr	r1, [r4, #4]
 800963c:	eb07 060a 	add.w	r6, r7, sl
 8009640:	42b3      	cmp	r3, r6
 8009642:	b085      	sub	sp, #20
 8009644:	bfb8      	it	lt
 8009646:	3101      	addlt	r1, #1
 8009648:	f7ff fed8 	bl	80093fc <_Balloc>
 800964c:	b930      	cbnz	r0, 800965c <__multiply+0x44>
 800964e:	4602      	mov	r2, r0
 8009650:	4b44      	ldr	r3, [pc, #272]	; (8009764 <__multiply+0x14c>)
 8009652:	4845      	ldr	r0, [pc, #276]	; (8009768 <__multiply+0x150>)
 8009654:	f240 115d 	movw	r1, #349	; 0x15d
 8009658:	f000 fd32 	bl	800a0c0 <__assert_func>
 800965c:	f100 0514 	add.w	r5, r0, #20
 8009660:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009664:	462b      	mov	r3, r5
 8009666:	2200      	movs	r2, #0
 8009668:	4543      	cmp	r3, r8
 800966a:	d321      	bcc.n	80096b0 <__multiply+0x98>
 800966c:	f104 0314 	add.w	r3, r4, #20
 8009670:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009674:	f109 0314 	add.w	r3, r9, #20
 8009678:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800967c:	9202      	str	r2, [sp, #8]
 800967e:	1b3a      	subs	r2, r7, r4
 8009680:	3a15      	subs	r2, #21
 8009682:	f022 0203 	bic.w	r2, r2, #3
 8009686:	3204      	adds	r2, #4
 8009688:	f104 0115 	add.w	r1, r4, #21
 800968c:	428f      	cmp	r7, r1
 800968e:	bf38      	it	cc
 8009690:	2204      	movcc	r2, #4
 8009692:	9201      	str	r2, [sp, #4]
 8009694:	9a02      	ldr	r2, [sp, #8]
 8009696:	9303      	str	r3, [sp, #12]
 8009698:	429a      	cmp	r2, r3
 800969a:	d80c      	bhi.n	80096b6 <__multiply+0x9e>
 800969c:	2e00      	cmp	r6, #0
 800969e:	dd03      	ble.n	80096a8 <__multiply+0x90>
 80096a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d05a      	beq.n	800975e <__multiply+0x146>
 80096a8:	6106      	str	r6, [r0, #16]
 80096aa:	b005      	add	sp, #20
 80096ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b0:	f843 2b04 	str.w	r2, [r3], #4
 80096b4:	e7d8      	b.n	8009668 <__multiply+0x50>
 80096b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80096ba:	f1ba 0f00 	cmp.w	sl, #0
 80096be:	d024      	beq.n	800970a <__multiply+0xf2>
 80096c0:	f104 0e14 	add.w	lr, r4, #20
 80096c4:	46a9      	mov	r9, r5
 80096c6:	f04f 0c00 	mov.w	ip, #0
 80096ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096ce:	f8d9 1000 	ldr.w	r1, [r9]
 80096d2:	fa1f fb82 	uxth.w	fp, r2
 80096d6:	b289      	uxth	r1, r1
 80096d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80096dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096e0:	f8d9 2000 	ldr.w	r2, [r9]
 80096e4:	4461      	add	r1, ip
 80096e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80096ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096f2:	b289      	uxth	r1, r1
 80096f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096f8:	4577      	cmp	r7, lr
 80096fa:	f849 1b04 	str.w	r1, [r9], #4
 80096fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009702:	d8e2      	bhi.n	80096ca <__multiply+0xb2>
 8009704:	9a01      	ldr	r2, [sp, #4]
 8009706:	f845 c002 	str.w	ip, [r5, r2]
 800970a:	9a03      	ldr	r2, [sp, #12]
 800970c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009710:	3304      	adds	r3, #4
 8009712:	f1b9 0f00 	cmp.w	r9, #0
 8009716:	d020      	beq.n	800975a <__multiply+0x142>
 8009718:	6829      	ldr	r1, [r5, #0]
 800971a:	f104 0c14 	add.w	ip, r4, #20
 800971e:	46ae      	mov	lr, r5
 8009720:	f04f 0a00 	mov.w	sl, #0
 8009724:	f8bc b000 	ldrh.w	fp, [ip]
 8009728:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800972c:	fb09 220b 	mla	r2, r9, fp, r2
 8009730:	4492      	add	sl, r2
 8009732:	b289      	uxth	r1, r1
 8009734:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009738:	f84e 1b04 	str.w	r1, [lr], #4
 800973c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009740:	f8be 1000 	ldrh.w	r1, [lr]
 8009744:	0c12      	lsrs	r2, r2, #16
 8009746:	fb09 1102 	mla	r1, r9, r2, r1
 800974a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800974e:	4567      	cmp	r7, ip
 8009750:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009754:	d8e6      	bhi.n	8009724 <__multiply+0x10c>
 8009756:	9a01      	ldr	r2, [sp, #4]
 8009758:	50a9      	str	r1, [r5, r2]
 800975a:	3504      	adds	r5, #4
 800975c:	e79a      	b.n	8009694 <__multiply+0x7c>
 800975e:	3e01      	subs	r6, #1
 8009760:	e79c      	b.n	800969c <__multiply+0x84>
 8009762:	bf00      	nop
 8009764:	0800a7b8 	.word	0x0800a7b8
 8009768:	0800a7c9 	.word	0x0800a7c9

0800976c <__pow5mult>:
 800976c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009770:	4615      	mov	r5, r2
 8009772:	f012 0203 	ands.w	r2, r2, #3
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	d007      	beq.n	800978c <__pow5mult+0x20>
 800977c:	4c25      	ldr	r4, [pc, #148]	; (8009814 <__pow5mult+0xa8>)
 800977e:	3a01      	subs	r2, #1
 8009780:	2300      	movs	r3, #0
 8009782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009786:	f7ff fe9b 	bl	80094c0 <__multadd>
 800978a:	4607      	mov	r7, r0
 800978c:	10ad      	asrs	r5, r5, #2
 800978e:	d03d      	beq.n	800980c <__pow5mult+0xa0>
 8009790:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009792:	b97c      	cbnz	r4, 80097b4 <__pow5mult+0x48>
 8009794:	2010      	movs	r0, #16
 8009796:	f7ff fe1d 	bl	80093d4 <malloc>
 800979a:	4602      	mov	r2, r0
 800979c:	6270      	str	r0, [r6, #36]	; 0x24
 800979e:	b928      	cbnz	r0, 80097ac <__pow5mult+0x40>
 80097a0:	4b1d      	ldr	r3, [pc, #116]	; (8009818 <__pow5mult+0xac>)
 80097a2:	481e      	ldr	r0, [pc, #120]	; (800981c <__pow5mult+0xb0>)
 80097a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097a8:	f000 fc8a 	bl	800a0c0 <__assert_func>
 80097ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097b0:	6004      	str	r4, [r0, #0]
 80097b2:	60c4      	str	r4, [r0, #12]
 80097b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097bc:	b94c      	cbnz	r4, 80097d2 <__pow5mult+0x66>
 80097be:	f240 2171 	movw	r1, #625	; 0x271
 80097c2:	4630      	mov	r0, r6
 80097c4:	f7ff ff12 	bl	80095ec <__i2b>
 80097c8:	2300      	movs	r3, #0
 80097ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80097ce:	4604      	mov	r4, r0
 80097d0:	6003      	str	r3, [r0, #0]
 80097d2:	f04f 0900 	mov.w	r9, #0
 80097d6:	07eb      	lsls	r3, r5, #31
 80097d8:	d50a      	bpl.n	80097f0 <__pow5mult+0x84>
 80097da:	4639      	mov	r1, r7
 80097dc:	4622      	mov	r2, r4
 80097de:	4630      	mov	r0, r6
 80097e0:	f7ff ff1a 	bl	8009618 <__multiply>
 80097e4:	4639      	mov	r1, r7
 80097e6:	4680      	mov	r8, r0
 80097e8:	4630      	mov	r0, r6
 80097ea:	f7ff fe47 	bl	800947c <_Bfree>
 80097ee:	4647      	mov	r7, r8
 80097f0:	106d      	asrs	r5, r5, #1
 80097f2:	d00b      	beq.n	800980c <__pow5mult+0xa0>
 80097f4:	6820      	ldr	r0, [r4, #0]
 80097f6:	b938      	cbnz	r0, 8009808 <__pow5mult+0x9c>
 80097f8:	4622      	mov	r2, r4
 80097fa:	4621      	mov	r1, r4
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7ff ff0b 	bl	8009618 <__multiply>
 8009802:	6020      	str	r0, [r4, #0]
 8009804:	f8c0 9000 	str.w	r9, [r0]
 8009808:	4604      	mov	r4, r0
 800980a:	e7e4      	b.n	80097d6 <__pow5mult+0x6a>
 800980c:	4638      	mov	r0, r7
 800980e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009812:	bf00      	nop
 8009814:	0800a918 	.word	0x0800a918
 8009818:	0800a746 	.word	0x0800a746
 800981c:	0800a7c9 	.word	0x0800a7c9

08009820 <__lshift>:
 8009820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009824:	460c      	mov	r4, r1
 8009826:	6849      	ldr	r1, [r1, #4]
 8009828:	6923      	ldr	r3, [r4, #16]
 800982a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800982e:	68a3      	ldr	r3, [r4, #8]
 8009830:	4607      	mov	r7, r0
 8009832:	4691      	mov	r9, r2
 8009834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009838:	f108 0601 	add.w	r6, r8, #1
 800983c:	42b3      	cmp	r3, r6
 800983e:	db0b      	blt.n	8009858 <__lshift+0x38>
 8009840:	4638      	mov	r0, r7
 8009842:	f7ff fddb 	bl	80093fc <_Balloc>
 8009846:	4605      	mov	r5, r0
 8009848:	b948      	cbnz	r0, 800985e <__lshift+0x3e>
 800984a:	4602      	mov	r2, r0
 800984c:	4b2a      	ldr	r3, [pc, #168]	; (80098f8 <__lshift+0xd8>)
 800984e:	482b      	ldr	r0, [pc, #172]	; (80098fc <__lshift+0xdc>)
 8009850:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009854:	f000 fc34 	bl	800a0c0 <__assert_func>
 8009858:	3101      	adds	r1, #1
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	e7ee      	b.n	800983c <__lshift+0x1c>
 800985e:	2300      	movs	r3, #0
 8009860:	f100 0114 	add.w	r1, r0, #20
 8009864:	f100 0210 	add.w	r2, r0, #16
 8009868:	4618      	mov	r0, r3
 800986a:	4553      	cmp	r3, sl
 800986c:	db37      	blt.n	80098de <__lshift+0xbe>
 800986e:	6920      	ldr	r0, [r4, #16]
 8009870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009874:	f104 0314 	add.w	r3, r4, #20
 8009878:	f019 091f 	ands.w	r9, r9, #31
 800987c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009880:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009884:	d02f      	beq.n	80098e6 <__lshift+0xc6>
 8009886:	f1c9 0e20 	rsb	lr, r9, #32
 800988a:	468a      	mov	sl, r1
 800988c:	f04f 0c00 	mov.w	ip, #0
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	fa02 f209 	lsl.w	r2, r2, r9
 8009896:	ea42 020c 	orr.w	r2, r2, ip
 800989a:	f84a 2b04 	str.w	r2, [sl], #4
 800989e:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a2:	4298      	cmp	r0, r3
 80098a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80098a8:	d8f2      	bhi.n	8009890 <__lshift+0x70>
 80098aa:	1b03      	subs	r3, r0, r4
 80098ac:	3b15      	subs	r3, #21
 80098ae:	f023 0303 	bic.w	r3, r3, #3
 80098b2:	3304      	adds	r3, #4
 80098b4:	f104 0215 	add.w	r2, r4, #21
 80098b8:	4290      	cmp	r0, r2
 80098ba:	bf38      	it	cc
 80098bc:	2304      	movcc	r3, #4
 80098be:	f841 c003 	str.w	ip, [r1, r3]
 80098c2:	f1bc 0f00 	cmp.w	ip, #0
 80098c6:	d001      	beq.n	80098cc <__lshift+0xac>
 80098c8:	f108 0602 	add.w	r6, r8, #2
 80098cc:	3e01      	subs	r6, #1
 80098ce:	4638      	mov	r0, r7
 80098d0:	612e      	str	r6, [r5, #16]
 80098d2:	4621      	mov	r1, r4
 80098d4:	f7ff fdd2 	bl	800947c <_Bfree>
 80098d8:	4628      	mov	r0, r5
 80098da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098de:	f842 0f04 	str.w	r0, [r2, #4]!
 80098e2:	3301      	adds	r3, #1
 80098e4:	e7c1      	b.n	800986a <__lshift+0x4a>
 80098e6:	3904      	subs	r1, #4
 80098e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80098f0:	4298      	cmp	r0, r3
 80098f2:	d8f9      	bhi.n	80098e8 <__lshift+0xc8>
 80098f4:	e7ea      	b.n	80098cc <__lshift+0xac>
 80098f6:	bf00      	nop
 80098f8:	0800a7b8 	.word	0x0800a7b8
 80098fc:	0800a7c9 	.word	0x0800a7c9

08009900 <__mcmp>:
 8009900:	b530      	push	{r4, r5, lr}
 8009902:	6902      	ldr	r2, [r0, #16]
 8009904:	690c      	ldr	r4, [r1, #16]
 8009906:	1b12      	subs	r2, r2, r4
 8009908:	d10e      	bne.n	8009928 <__mcmp+0x28>
 800990a:	f100 0314 	add.w	r3, r0, #20
 800990e:	3114      	adds	r1, #20
 8009910:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009914:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009918:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800991c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009920:	42a5      	cmp	r5, r4
 8009922:	d003      	beq.n	800992c <__mcmp+0x2c>
 8009924:	d305      	bcc.n	8009932 <__mcmp+0x32>
 8009926:	2201      	movs	r2, #1
 8009928:	4610      	mov	r0, r2
 800992a:	bd30      	pop	{r4, r5, pc}
 800992c:	4283      	cmp	r3, r0
 800992e:	d3f3      	bcc.n	8009918 <__mcmp+0x18>
 8009930:	e7fa      	b.n	8009928 <__mcmp+0x28>
 8009932:	f04f 32ff 	mov.w	r2, #4294967295
 8009936:	e7f7      	b.n	8009928 <__mcmp+0x28>

08009938 <__mdiff>:
 8009938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	460c      	mov	r4, r1
 800993e:	4606      	mov	r6, r0
 8009940:	4611      	mov	r1, r2
 8009942:	4620      	mov	r0, r4
 8009944:	4690      	mov	r8, r2
 8009946:	f7ff ffdb 	bl	8009900 <__mcmp>
 800994a:	1e05      	subs	r5, r0, #0
 800994c:	d110      	bne.n	8009970 <__mdiff+0x38>
 800994e:	4629      	mov	r1, r5
 8009950:	4630      	mov	r0, r6
 8009952:	f7ff fd53 	bl	80093fc <_Balloc>
 8009956:	b930      	cbnz	r0, 8009966 <__mdiff+0x2e>
 8009958:	4b3a      	ldr	r3, [pc, #232]	; (8009a44 <__mdiff+0x10c>)
 800995a:	4602      	mov	r2, r0
 800995c:	f240 2132 	movw	r1, #562	; 0x232
 8009960:	4839      	ldr	r0, [pc, #228]	; (8009a48 <__mdiff+0x110>)
 8009962:	f000 fbad 	bl	800a0c0 <__assert_func>
 8009966:	2301      	movs	r3, #1
 8009968:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800996c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009970:	bfa4      	itt	ge
 8009972:	4643      	movge	r3, r8
 8009974:	46a0      	movge	r8, r4
 8009976:	4630      	mov	r0, r6
 8009978:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800997c:	bfa6      	itte	ge
 800997e:	461c      	movge	r4, r3
 8009980:	2500      	movge	r5, #0
 8009982:	2501      	movlt	r5, #1
 8009984:	f7ff fd3a 	bl	80093fc <_Balloc>
 8009988:	b920      	cbnz	r0, 8009994 <__mdiff+0x5c>
 800998a:	4b2e      	ldr	r3, [pc, #184]	; (8009a44 <__mdiff+0x10c>)
 800998c:	4602      	mov	r2, r0
 800998e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009992:	e7e5      	b.n	8009960 <__mdiff+0x28>
 8009994:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009998:	6926      	ldr	r6, [r4, #16]
 800999a:	60c5      	str	r5, [r0, #12]
 800999c:	f104 0914 	add.w	r9, r4, #20
 80099a0:	f108 0514 	add.w	r5, r8, #20
 80099a4:	f100 0e14 	add.w	lr, r0, #20
 80099a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80099ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099b0:	f108 0210 	add.w	r2, r8, #16
 80099b4:	46f2      	mov	sl, lr
 80099b6:	2100      	movs	r1, #0
 80099b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80099bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099c0:	fa1f f883 	uxth.w	r8, r3
 80099c4:	fa11 f18b 	uxtah	r1, r1, fp
 80099c8:	0c1b      	lsrs	r3, r3, #16
 80099ca:	eba1 0808 	sub.w	r8, r1, r8
 80099ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099d6:	fa1f f888 	uxth.w	r8, r8
 80099da:	1419      	asrs	r1, r3, #16
 80099dc:	454e      	cmp	r6, r9
 80099de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099e2:	f84a 3b04 	str.w	r3, [sl], #4
 80099e6:	d8e7      	bhi.n	80099b8 <__mdiff+0x80>
 80099e8:	1b33      	subs	r3, r6, r4
 80099ea:	3b15      	subs	r3, #21
 80099ec:	f023 0303 	bic.w	r3, r3, #3
 80099f0:	3304      	adds	r3, #4
 80099f2:	3415      	adds	r4, #21
 80099f4:	42a6      	cmp	r6, r4
 80099f6:	bf38      	it	cc
 80099f8:	2304      	movcc	r3, #4
 80099fa:	441d      	add	r5, r3
 80099fc:	4473      	add	r3, lr
 80099fe:	469e      	mov	lr, r3
 8009a00:	462e      	mov	r6, r5
 8009a02:	4566      	cmp	r6, ip
 8009a04:	d30e      	bcc.n	8009a24 <__mdiff+0xec>
 8009a06:	f10c 0203 	add.w	r2, ip, #3
 8009a0a:	1b52      	subs	r2, r2, r5
 8009a0c:	f022 0203 	bic.w	r2, r2, #3
 8009a10:	3d03      	subs	r5, #3
 8009a12:	45ac      	cmp	ip, r5
 8009a14:	bf38      	it	cc
 8009a16:	2200      	movcc	r2, #0
 8009a18:	441a      	add	r2, r3
 8009a1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a1e:	b17b      	cbz	r3, 8009a40 <__mdiff+0x108>
 8009a20:	6107      	str	r7, [r0, #16]
 8009a22:	e7a3      	b.n	800996c <__mdiff+0x34>
 8009a24:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a28:	fa11 f288 	uxtah	r2, r1, r8
 8009a2c:	1414      	asrs	r4, r2, #16
 8009a2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a32:	b292      	uxth	r2, r2
 8009a34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a38:	f84e 2b04 	str.w	r2, [lr], #4
 8009a3c:	1421      	asrs	r1, r4, #16
 8009a3e:	e7e0      	b.n	8009a02 <__mdiff+0xca>
 8009a40:	3f01      	subs	r7, #1
 8009a42:	e7ea      	b.n	8009a1a <__mdiff+0xe2>
 8009a44:	0800a7b8 	.word	0x0800a7b8
 8009a48:	0800a7c9 	.word	0x0800a7c9

08009a4c <__d2b>:
 8009a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a50:	4689      	mov	r9, r1
 8009a52:	2101      	movs	r1, #1
 8009a54:	ec57 6b10 	vmov	r6, r7, d0
 8009a58:	4690      	mov	r8, r2
 8009a5a:	f7ff fccf 	bl	80093fc <_Balloc>
 8009a5e:	4604      	mov	r4, r0
 8009a60:	b930      	cbnz	r0, 8009a70 <__d2b+0x24>
 8009a62:	4602      	mov	r2, r0
 8009a64:	4b25      	ldr	r3, [pc, #148]	; (8009afc <__d2b+0xb0>)
 8009a66:	4826      	ldr	r0, [pc, #152]	; (8009b00 <__d2b+0xb4>)
 8009a68:	f240 310a 	movw	r1, #778	; 0x30a
 8009a6c:	f000 fb28 	bl	800a0c0 <__assert_func>
 8009a70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a78:	bb35      	cbnz	r5, 8009ac8 <__d2b+0x7c>
 8009a7a:	2e00      	cmp	r6, #0
 8009a7c:	9301      	str	r3, [sp, #4]
 8009a7e:	d028      	beq.n	8009ad2 <__d2b+0x86>
 8009a80:	4668      	mov	r0, sp
 8009a82:	9600      	str	r6, [sp, #0]
 8009a84:	f7ff fd82 	bl	800958c <__lo0bits>
 8009a88:	9900      	ldr	r1, [sp, #0]
 8009a8a:	b300      	cbz	r0, 8009ace <__d2b+0x82>
 8009a8c:	9a01      	ldr	r2, [sp, #4]
 8009a8e:	f1c0 0320 	rsb	r3, r0, #32
 8009a92:	fa02 f303 	lsl.w	r3, r2, r3
 8009a96:	430b      	orrs	r3, r1
 8009a98:	40c2      	lsrs	r2, r0
 8009a9a:	6163      	str	r3, [r4, #20]
 8009a9c:	9201      	str	r2, [sp, #4]
 8009a9e:	9b01      	ldr	r3, [sp, #4]
 8009aa0:	61a3      	str	r3, [r4, #24]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	bf14      	ite	ne
 8009aa6:	2202      	movne	r2, #2
 8009aa8:	2201      	moveq	r2, #1
 8009aaa:	6122      	str	r2, [r4, #16]
 8009aac:	b1d5      	cbz	r5, 8009ae4 <__d2b+0x98>
 8009aae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ab2:	4405      	add	r5, r0
 8009ab4:	f8c9 5000 	str.w	r5, [r9]
 8009ab8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009abc:	f8c8 0000 	str.w	r0, [r8]
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	b003      	add	sp, #12
 8009ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009acc:	e7d5      	b.n	8009a7a <__d2b+0x2e>
 8009ace:	6161      	str	r1, [r4, #20]
 8009ad0:	e7e5      	b.n	8009a9e <__d2b+0x52>
 8009ad2:	a801      	add	r0, sp, #4
 8009ad4:	f7ff fd5a 	bl	800958c <__lo0bits>
 8009ad8:	9b01      	ldr	r3, [sp, #4]
 8009ada:	6163      	str	r3, [r4, #20]
 8009adc:	2201      	movs	r2, #1
 8009ade:	6122      	str	r2, [r4, #16]
 8009ae0:	3020      	adds	r0, #32
 8009ae2:	e7e3      	b.n	8009aac <__d2b+0x60>
 8009ae4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ae8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009aec:	f8c9 0000 	str.w	r0, [r9]
 8009af0:	6918      	ldr	r0, [r3, #16]
 8009af2:	f7ff fd2b 	bl	800954c <__hi0bits>
 8009af6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009afa:	e7df      	b.n	8009abc <__d2b+0x70>
 8009afc:	0800a7b8 	.word	0x0800a7b8
 8009b00:	0800a7c9 	.word	0x0800a7c9

08009b04 <_calloc_r>:
 8009b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b06:	fba1 2402 	umull	r2, r4, r1, r2
 8009b0a:	b94c      	cbnz	r4, 8009b20 <_calloc_r+0x1c>
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	9201      	str	r2, [sp, #4]
 8009b10:	f7fd fd50 	bl	80075b4 <_malloc_r>
 8009b14:	9a01      	ldr	r2, [sp, #4]
 8009b16:	4605      	mov	r5, r0
 8009b18:	b930      	cbnz	r0, 8009b28 <_calloc_r+0x24>
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	b003      	add	sp, #12
 8009b1e:	bd30      	pop	{r4, r5, pc}
 8009b20:	220c      	movs	r2, #12
 8009b22:	6002      	str	r2, [r0, #0]
 8009b24:	2500      	movs	r5, #0
 8009b26:	e7f8      	b.n	8009b1a <_calloc_r+0x16>
 8009b28:	4621      	mov	r1, r4
 8009b2a:	f7fd fcce 	bl	80074ca <memset>
 8009b2e:	e7f4      	b.n	8009b1a <_calloc_r+0x16>

08009b30 <__ssputs_r>:
 8009b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b34:	688e      	ldr	r6, [r1, #8]
 8009b36:	429e      	cmp	r6, r3
 8009b38:	4682      	mov	sl, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	4690      	mov	r8, r2
 8009b3e:	461f      	mov	r7, r3
 8009b40:	d838      	bhi.n	8009bb4 <__ssputs_r+0x84>
 8009b42:	898a      	ldrh	r2, [r1, #12]
 8009b44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b48:	d032      	beq.n	8009bb0 <__ssputs_r+0x80>
 8009b4a:	6825      	ldr	r5, [r4, #0]
 8009b4c:	6909      	ldr	r1, [r1, #16]
 8009b4e:	eba5 0901 	sub.w	r9, r5, r1
 8009b52:	6965      	ldr	r5, [r4, #20]
 8009b54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	444b      	add	r3, r9
 8009b60:	106d      	asrs	r5, r5, #1
 8009b62:	429d      	cmp	r5, r3
 8009b64:	bf38      	it	cc
 8009b66:	461d      	movcc	r5, r3
 8009b68:	0553      	lsls	r3, r2, #21
 8009b6a:	d531      	bpl.n	8009bd0 <__ssputs_r+0xa0>
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	f7fd fd21 	bl	80075b4 <_malloc_r>
 8009b72:	4606      	mov	r6, r0
 8009b74:	b950      	cbnz	r0, 8009b8c <__ssputs_r+0x5c>
 8009b76:	230c      	movs	r3, #12
 8009b78:	f8ca 3000 	str.w	r3, [sl]
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b82:	81a3      	strh	r3, [r4, #12]
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
 8009b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8c:	6921      	ldr	r1, [r4, #16]
 8009b8e:	464a      	mov	r2, r9
 8009b90:	f7fd fc8d 	bl	80074ae <memcpy>
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b9e:	81a3      	strh	r3, [r4, #12]
 8009ba0:	6126      	str	r6, [r4, #16]
 8009ba2:	6165      	str	r5, [r4, #20]
 8009ba4:	444e      	add	r6, r9
 8009ba6:	eba5 0509 	sub.w	r5, r5, r9
 8009baa:	6026      	str	r6, [r4, #0]
 8009bac:	60a5      	str	r5, [r4, #8]
 8009bae:	463e      	mov	r6, r7
 8009bb0:	42be      	cmp	r6, r7
 8009bb2:	d900      	bls.n	8009bb6 <__ssputs_r+0x86>
 8009bb4:	463e      	mov	r6, r7
 8009bb6:	6820      	ldr	r0, [r4, #0]
 8009bb8:	4632      	mov	r2, r6
 8009bba:	4641      	mov	r1, r8
 8009bbc:	f000 fae4 	bl	800a188 <memmove>
 8009bc0:	68a3      	ldr	r3, [r4, #8]
 8009bc2:	1b9b      	subs	r3, r3, r6
 8009bc4:	60a3      	str	r3, [r4, #8]
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	4433      	add	r3, r6
 8009bca:	6023      	str	r3, [r4, #0]
 8009bcc:	2000      	movs	r0, #0
 8009bce:	e7db      	b.n	8009b88 <__ssputs_r+0x58>
 8009bd0:	462a      	mov	r2, r5
 8009bd2:	f000 faf3 	bl	800a1bc <_realloc_r>
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d1e1      	bne.n	8009ba0 <__ssputs_r+0x70>
 8009bdc:	6921      	ldr	r1, [r4, #16]
 8009bde:	4650      	mov	r0, sl
 8009be0:	f7fd fc7c 	bl	80074dc <_free_r>
 8009be4:	e7c7      	b.n	8009b76 <__ssputs_r+0x46>
	...

08009be8 <_svfiprintf_r>:
 8009be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	4698      	mov	r8, r3
 8009bee:	898b      	ldrh	r3, [r1, #12]
 8009bf0:	061b      	lsls	r3, r3, #24
 8009bf2:	b09d      	sub	sp, #116	; 0x74
 8009bf4:	4607      	mov	r7, r0
 8009bf6:	460d      	mov	r5, r1
 8009bf8:	4614      	mov	r4, r2
 8009bfa:	d50e      	bpl.n	8009c1a <_svfiprintf_r+0x32>
 8009bfc:	690b      	ldr	r3, [r1, #16]
 8009bfe:	b963      	cbnz	r3, 8009c1a <_svfiprintf_r+0x32>
 8009c00:	2140      	movs	r1, #64	; 0x40
 8009c02:	f7fd fcd7 	bl	80075b4 <_malloc_r>
 8009c06:	6028      	str	r0, [r5, #0]
 8009c08:	6128      	str	r0, [r5, #16]
 8009c0a:	b920      	cbnz	r0, 8009c16 <_svfiprintf_r+0x2e>
 8009c0c:	230c      	movs	r3, #12
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295
 8009c14:	e0d1      	b.n	8009dba <_svfiprintf_r+0x1d2>
 8009c16:	2340      	movs	r3, #64	; 0x40
 8009c18:	616b      	str	r3, [r5, #20]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c1e:	2320      	movs	r3, #32
 8009c20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c24:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c28:	2330      	movs	r3, #48	; 0x30
 8009c2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009dd4 <_svfiprintf_r+0x1ec>
 8009c2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c32:	f04f 0901 	mov.w	r9, #1
 8009c36:	4623      	mov	r3, r4
 8009c38:	469a      	mov	sl, r3
 8009c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c3e:	b10a      	cbz	r2, 8009c44 <_svfiprintf_r+0x5c>
 8009c40:	2a25      	cmp	r2, #37	; 0x25
 8009c42:	d1f9      	bne.n	8009c38 <_svfiprintf_r+0x50>
 8009c44:	ebba 0b04 	subs.w	fp, sl, r4
 8009c48:	d00b      	beq.n	8009c62 <_svfiprintf_r+0x7a>
 8009c4a:	465b      	mov	r3, fp
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	4629      	mov	r1, r5
 8009c50:	4638      	mov	r0, r7
 8009c52:	f7ff ff6d 	bl	8009b30 <__ssputs_r>
 8009c56:	3001      	adds	r0, #1
 8009c58:	f000 80aa 	beq.w	8009db0 <_svfiprintf_r+0x1c8>
 8009c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c5e:	445a      	add	r2, fp
 8009c60:	9209      	str	r2, [sp, #36]	; 0x24
 8009c62:	f89a 3000 	ldrb.w	r3, [sl]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f000 80a2 	beq.w	8009db0 <_svfiprintf_r+0x1c8>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c76:	f10a 0a01 	add.w	sl, sl, #1
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	9307      	str	r3, [sp, #28]
 8009c7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c82:	931a      	str	r3, [sp, #104]	; 0x68
 8009c84:	4654      	mov	r4, sl
 8009c86:	2205      	movs	r2, #5
 8009c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c8c:	4851      	ldr	r0, [pc, #324]	; (8009dd4 <_svfiprintf_r+0x1ec>)
 8009c8e:	f7f6 fabf 	bl	8000210 <memchr>
 8009c92:	9a04      	ldr	r2, [sp, #16]
 8009c94:	b9d8      	cbnz	r0, 8009cce <_svfiprintf_r+0xe6>
 8009c96:	06d0      	lsls	r0, r2, #27
 8009c98:	bf44      	itt	mi
 8009c9a:	2320      	movmi	r3, #32
 8009c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ca0:	0711      	lsls	r1, r2, #28
 8009ca2:	bf44      	itt	mi
 8009ca4:	232b      	movmi	r3, #43	; 0x2b
 8009ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009caa:	f89a 3000 	ldrb.w	r3, [sl]
 8009cae:	2b2a      	cmp	r3, #42	; 0x2a
 8009cb0:	d015      	beq.n	8009cde <_svfiprintf_r+0xf6>
 8009cb2:	9a07      	ldr	r2, [sp, #28]
 8009cb4:	4654      	mov	r4, sl
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	f04f 0c0a 	mov.w	ip, #10
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cc2:	3b30      	subs	r3, #48	; 0x30
 8009cc4:	2b09      	cmp	r3, #9
 8009cc6:	d94e      	bls.n	8009d66 <_svfiprintf_r+0x17e>
 8009cc8:	b1b0      	cbz	r0, 8009cf8 <_svfiprintf_r+0x110>
 8009cca:	9207      	str	r2, [sp, #28]
 8009ccc:	e014      	b.n	8009cf8 <_svfiprintf_r+0x110>
 8009cce:	eba0 0308 	sub.w	r3, r0, r8
 8009cd2:	fa09 f303 	lsl.w	r3, r9, r3
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	9304      	str	r3, [sp, #16]
 8009cda:	46a2      	mov	sl, r4
 8009cdc:	e7d2      	b.n	8009c84 <_svfiprintf_r+0x9c>
 8009cde:	9b03      	ldr	r3, [sp, #12]
 8009ce0:	1d19      	adds	r1, r3, #4
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	9103      	str	r1, [sp, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	bfbb      	ittet	lt
 8009cea:	425b      	neglt	r3, r3
 8009cec:	f042 0202 	orrlt.w	r2, r2, #2
 8009cf0:	9307      	strge	r3, [sp, #28]
 8009cf2:	9307      	strlt	r3, [sp, #28]
 8009cf4:	bfb8      	it	lt
 8009cf6:	9204      	strlt	r2, [sp, #16]
 8009cf8:	7823      	ldrb	r3, [r4, #0]
 8009cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8009cfc:	d10c      	bne.n	8009d18 <_svfiprintf_r+0x130>
 8009cfe:	7863      	ldrb	r3, [r4, #1]
 8009d00:	2b2a      	cmp	r3, #42	; 0x2a
 8009d02:	d135      	bne.n	8009d70 <_svfiprintf_r+0x188>
 8009d04:	9b03      	ldr	r3, [sp, #12]
 8009d06:	1d1a      	adds	r2, r3, #4
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	9203      	str	r2, [sp, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	bfb8      	it	lt
 8009d10:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d14:	3402      	adds	r4, #2
 8009d16:	9305      	str	r3, [sp, #20]
 8009d18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009de4 <_svfiprintf_r+0x1fc>
 8009d1c:	7821      	ldrb	r1, [r4, #0]
 8009d1e:	2203      	movs	r2, #3
 8009d20:	4650      	mov	r0, sl
 8009d22:	f7f6 fa75 	bl	8000210 <memchr>
 8009d26:	b140      	cbz	r0, 8009d3a <_svfiprintf_r+0x152>
 8009d28:	2340      	movs	r3, #64	; 0x40
 8009d2a:	eba0 000a 	sub.w	r0, r0, sl
 8009d2e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d32:	9b04      	ldr	r3, [sp, #16]
 8009d34:	4303      	orrs	r3, r0
 8009d36:	3401      	adds	r4, #1
 8009d38:	9304      	str	r3, [sp, #16]
 8009d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d3e:	4826      	ldr	r0, [pc, #152]	; (8009dd8 <_svfiprintf_r+0x1f0>)
 8009d40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d44:	2206      	movs	r2, #6
 8009d46:	f7f6 fa63 	bl	8000210 <memchr>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d038      	beq.n	8009dc0 <_svfiprintf_r+0x1d8>
 8009d4e:	4b23      	ldr	r3, [pc, #140]	; (8009ddc <_svfiprintf_r+0x1f4>)
 8009d50:	bb1b      	cbnz	r3, 8009d9a <_svfiprintf_r+0x1b2>
 8009d52:	9b03      	ldr	r3, [sp, #12]
 8009d54:	3307      	adds	r3, #7
 8009d56:	f023 0307 	bic.w	r3, r3, #7
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	9303      	str	r3, [sp, #12]
 8009d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d60:	4433      	add	r3, r6
 8009d62:	9309      	str	r3, [sp, #36]	; 0x24
 8009d64:	e767      	b.n	8009c36 <_svfiprintf_r+0x4e>
 8009d66:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	e7a5      	b.n	8009cbc <_svfiprintf_r+0xd4>
 8009d70:	2300      	movs	r3, #0
 8009d72:	3401      	adds	r4, #1
 8009d74:	9305      	str	r3, [sp, #20]
 8009d76:	4619      	mov	r1, r3
 8009d78:	f04f 0c0a 	mov.w	ip, #10
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d82:	3a30      	subs	r2, #48	; 0x30
 8009d84:	2a09      	cmp	r2, #9
 8009d86:	d903      	bls.n	8009d90 <_svfiprintf_r+0x1a8>
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0c5      	beq.n	8009d18 <_svfiprintf_r+0x130>
 8009d8c:	9105      	str	r1, [sp, #20]
 8009d8e:	e7c3      	b.n	8009d18 <_svfiprintf_r+0x130>
 8009d90:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d94:	4604      	mov	r4, r0
 8009d96:	2301      	movs	r3, #1
 8009d98:	e7f0      	b.n	8009d7c <_svfiprintf_r+0x194>
 8009d9a:	ab03      	add	r3, sp, #12
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	462a      	mov	r2, r5
 8009da0:	4b0f      	ldr	r3, [pc, #60]	; (8009de0 <_svfiprintf_r+0x1f8>)
 8009da2:	a904      	add	r1, sp, #16
 8009da4:	4638      	mov	r0, r7
 8009da6:	f7fd fd19 	bl	80077dc <_printf_float>
 8009daa:	1c42      	adds	r2, r0, #1
 8009dac:	4606      	mov	r6, r0
 8009dae:	d1d6      	bne.n	8009d5e <_svfiprintf_r+0x176>
 8009db0:	89ab      	ldrh	r3, [r5, #12]
 8009db2:	065b      	lsls	r3, r3, #25
 8009db4:	f53f af2c 	bmi.w	8009c10 <_svfiprintf_r+0x28>
 8009db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dba:	b01d      	add	sp, #116	; 0x74
 8009dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc0:	ab03      	add	r3, sp, #12
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	462a      	mov	r2, r5
 8009dc6:	4b06      	ldr	r3, [pc, #24]	; (8009de0 <_svfiprintf_r+0x1f8>)
 8009dc8:	a904      	add	r1, sp, #16
 8009dca:	4638      	mov	r0, r7
 8009dcc:	f7fd ffaa 	bl	8007d24 <_printf_i>
 8009dd0:	e7eb      	b.n	8009daa <_svfiprintf_r+0x1c2>
 8009dd2:	bf00      	nop
 8009dd4:	0800a924 	.word	0x0800a924
 8009dd8:	0800a92e 	.word	0x0800a92e
 8009ddc:	080077dd 	.word	0x080077dd
 8009de0:	08009b31 	.word	0x08009b31
 8009de4:	0800a92a 	.word	0x0800a92a

08009de8 <__sfputc_r>:
 8009de8:	6893      	ldr	r3, [r2, #8]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	b410      	push	{r4}
 8009df0:	6093      	str	r3, [r2, #8]
 8009df2:	da08      	bge.n	8009e06 <__sfputc_r+0x1e>
 8009df4:	6994      	ldr	r4, [r2, #24]
 8009df6:	42a3      	cmp	r3, r4
 8009df8:	db01      	blt.n	8009dfe <__sfputc_r+0x16>
 8009dfa:	290a      	cmp	r1, #10
 8009dfc:	d103      	bne.n	8009e06 <__sfputc_r+0x1e>
 8009dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e02:	f7fe bb0f 	b.w	8008424 <__swbuf_r>
 8009e06:	6813      	ldr	r3, [r2, #0]
 8009e08:	1c58      	adds	r0, r3, #1
 8009e0a:	6010      	str	r0, [r2, #0]
 8009e0c:	7019      	strb	r1, [r3, #0]
 8009e0e:	4608      	mov	r0, r1
 8009e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <__sfputs_r>:
 8009e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e18:	4606      	mov	r6, r0
 8009e1a:	460f      	mov	r7, r1
 8009e1c:	4614      	mov	r4, r2
 8009e1e:	18d5      	adds	r5, r2, r3
 8009e20:	42ac      	cmp	r4, r5
 8009e22:	d101      	bne.n	8009e28 <__sfputs_r+0x12>
 8009e24:	2000      	movs	r0, #0
 8009e26:	e007      	b.n	8009e38 <__sfputs_r+0x22>
 8009e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2c:	463a      	mov	r2, r7
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f7ff ffda 	bl	8009de8 <__sfputc_r>
 8009e34:	1c43      	adds	r3, r0, #1
 8009e36:	d1f3      	bne.n	8009e20 <__sfputs_r+0xa>
 8009e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e3c <_vfiprintf_r>:
 8009e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e40:	460d      	mov	r5, r1
 8009e42:	b09d      	sub	sp, #116	; 0x74
 8009e44:	4614      	mov	r4, r2
 8009e46:	4698      	mov	r8, r3
 8009e48:	4606      	mov	r6, r0
 8009e4a:	b118      	cbz	r0, 8009e54 <_vfiprintf_r+0x18>
 8009e4c:	6983      	ldr	r3, [r0, #24]
 8009e4e:	b90b      	cbnz	r3, 8009e54 <_vfiprintf_r+0x18>
 8009e50:	f7fd fa68 	bl	8007324 <__sinit>
 8009e54:	4b89      	ldr	r3, [pc, #548]	; (800a07c <_vfiprintf_r+0x240>)
 8009e56:	429d      	cmp	r5, r3
 8009e58:	d11b      	bne.n	8009e92 <_vfiprintf_r+0x56>
 8009e5a:	6875      	ldr	r5, [r6, #4]
 8009e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e5e:	07d9      	lsls	r1, r3, #31
 8009e60:	d405      	bmi.n	8009e6e <_vfiprintf_r+0x32>
 8009e62:	89ab      	ldrh	r3, [r5, #12]
 8009e64:	059a      	lsls	r2, r3, #22
 8009e66:	d402      	bmi.n	8009e6e <_vfiprintf_r+0x32>
 8009e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e6a:	f7fd fb1e 	bl	80074aa <__retarget_lock_acquire_recursive>
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	071b      	lsls	r3, r3, #28
 8009e72:	d501      	bpl.n	8009e78 <_vfiprintf_r+0x3c>
 8009e74:	692b      	ldr	r3, [r5, #16]
 8009e76:	b9eb      	cbnz	r3, 8009eb4 <_vfiprintf_r+0x78>
 8009e78:	4629      	mov	r1, r5
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f7fe fb36 	bl	80084ec <__swsetup_r>
 8009e80:	b1c0      	cbz	r0, 8009eb4 <_vfiprintf_r+0x78>
 8009e82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e84:	07dc      	lsls	r4, r3, #31
 8009e86:	d50e      	bpl.n	8009ea6 <_vfiprintf_r+0x6a>
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8c:	b01d      	add	sp, #116	; 0x74
 8009e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e92:	4b7b      	ldr	r3, [pc, #492]	; (800a080 <_vfiprintf_r+0x244>)
 8009e94:	429d      	cmp	r5, r3
 8009e96:	d101      	bne.n	8009e9c <_vfiprintf_r+0x60>
 8009e98:	68b5      	ldr	r5, [r6, #8]
 8009e9a:	e7df      	b.n	8009e5c <_vfiprintf_r+0x20>
 8009e9c:	4b79      	ldr	r3, [pc, #484]	; (800a084 <_vfiprintf_r+0x248>)
 8009e9e:	429d      	cmp	r5, r3
 8009ea0:	bf08      	it	eq
 8009ea2:	68f5      	ldreq	r5, [r6, #12]
 8009ea4:	e7da      	b.n	8009e5c <_vfiprintf_r+0x20>
 8009ea6:	89ab      	ldrh	r3, [r5, #12]
 8009ea8:	0598      	lsls	r0, r3, #22
 8009eaa:	d4ed      	bmi.n	8009e88 <_vfiprintf_r+0x4c>
 8009eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eae:	f7fd fafd 	bl	80074ac <__retarget_lock_release_recursive>
 8009eb2:	e7e9      	b.n	8009e88 <_vfiprintf_r+0x4c>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb8:	2320      	movs	r3, #32
 8009eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ec2:	2330      	movs	r3, #48	; 0x30
 8009ec4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a088 <_vfiprintf_r+0x24c>
 8009ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ecc:	f04f 0901 	mov.w	r9, #1
 8009ed0:	4623      	mov	r3, r4
 8009ed2:	469a      	mov	sl, r3
 8009ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ed8:	b10a      	cbz	r2, 8009ede <_vfiprintf_r+0xa2>
 8009eda:	2a25      	cmp	r2, #37	; 0x25
 8009edc:	d1f9      	bne.n	8009ed2 <_vfiprintf_r+0x96>
 8009ede:	ebba 0b04 	subs.w	fp, sl, r4
 8009ee2:	d00b      	beq.n	8009efc <_vfiprintf_r+0xc0>
 8009ee4:	465b      	mov	r3, fp
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	4629      	mov	r1, r5
 8009eea:	4630      	mov	r0, r6
 8009eec:	f7ff ff93 	bl	8009e16 <__sfputs_r>
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	f000 80aa 	beq.w	800a04a <_vfiprintf_r+0x20e>
 8009ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef8:	445a      	add	r2, fp
 8009efa:	9209      	str	r2, [sp, #36]	; 0x24
 8009efc:	f89a 3000 	ldrb.w	r3, [sl]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 80a2 	beq.w	800a04a <_vfiprintf_r+0x20e>
 8009f06:	2300      	movs	r3, #0
 8009f08:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f10:	f10a 0a01 	add.w	sl, sl, #1
 8009f14:	9304      	str	r3, [sp, #16]
 8009f16:	9307      	str	r3, [sp, #28]
 8009f18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f1c:	931a      	str	r3, [sp, #104]	; 0x68
 8009f1e:	4654      	mov	r4, sl
 8009f20:	2205      	movs	r2, #5
 8009f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f26:	4858      	ldr	r0, [pc, #352]	; (800a088 <_vfiprintf_r+0x24c>)
 8009f28:	f7f6 f972 	bl	8000210 <memchr>
 8009f2c:	9a04      	ldr	r2, [sp, #16]
 8009f2e:	b9d8      	cbnz	r0, 8009f68 <_vfiprintf_r+0x12c>
 8009f30:	06d1      	lsls	r1, r2, #27
 8009f32:	bf44      	itt	mi
 8009f34:	2320      	movmi	r3, #32
 8009f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f3a:	0713      	lsls	r3, r2, #28
 8009f3c:	bf44      	itt	mi
 8009f3e:	232b      	movmi	r3, #43	; 0x2b
 8009f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f44:	f89a 3000 	ldrb.w	r3, [sl]
 8009f48:	2b2a      	cmp	r3, #42	; 0x2a
 8009f4a:	d015      	beq.n	8009f78 <_vfiprintf_r+0x13c>
 8009f4c:	9a07      	ldr	r2, [sp, #28]
 8009f4e:	4654      	mov	r4, sl
 8009f50:	2000      	movs	r0, #0
 8009f52:	f04f 0c0a 	mov.w	ip, #10
 8009f56:	4621      	mov	r1, r4
 8009f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f5c:	3b30      	subs	r3, #48	; 0x30
 8009f5e:	2b09      	cmp	r3, #9
 8009f60:	d94e      	bls.n	800a000 <_vfiprintf_r+0x1c4>
 8009f62:	b1b0      	cbz	r0, 8009f92 <_vfiprintf_r+0x156>
 8009f64:	9207      	str	r2, [sp, #28]
 8009f66:	e014      	b.n	8009f92 <_vfiprintf_r+0x156>
 8009f68:	eba0 0308 	sub.w	r3, r0, r8
 8009f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8009f70:	4313      	orrs	r3, r2
 8009f72:	9304      	str	r3, [sp, #16]
 8009f74:	46a2      	mov	sl, r4
 8009f76:	e7d2      	b.n	8009f1e <_vfiprintf_r+0xe2>
 8009f78:	9b03      	ldr	r3, [sp, #12]
 8009f7a:	1d19      	adds	r1, r3, #4
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	9103      	str	r1, [sp, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bfbb      	ittet	lt
 8009f84:	425b      	neglt	r3, r3
 8009f86:	f042 0202 	orrlt.w	r2, r2, #2
 8009f8a:	9307      	strge	r3, [sp, #28]
 8009f8c:	9307      	strlt	r3, [sp, #28]
 8009f8e:	bfb8      	it	lt
 8009f90:	9204      	strlt	r2, [sp, #16]
 8009f92:	7823      	ldrb	r3, [r4, #0]
 8009f94:	2b2e      	cmp	r3, #46	; 0x2e
 8009f96:	d10c      	bne.n	8009fb2 <_vfiprintf_r+0x176>
 8009f98:	7863      	ldrb	r3, [r4, #1]
 8009f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f9c:	d135      	bne.n	800a00a <_vfiprintf_r+0x1ce>
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	1d1a      	adds	r2, r3, #4
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	9203      	str	r2, [sp, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	bfb8      	it	lt
 8009faa:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fae:	3402      	adds	r4, #2
 8009fb0:	9305      	str	r3, [sp, #20]
 8009fb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a098 <_vfiprintf_r+0x25c>
 8009fb6:	7821      	ldrb	r1, [r4, #0]
 8009fb8:	2203      	movs	r2, #3
 8009fba:	4650      	mov	r0, sl
 8009fbc:	f7f6 f928 	bl	8000210 <memchr>
 8009fc0:	b140      	cbz	r0, 8009fd4 <_vfiprintf_r+0x198>
 8009fc2:	2340      	movs	r3, #64	; 0x40
 8009fc4:	eba0 000a 	sub.w	r0, r0, sl
 8009fc8:	fa03 f000 	lsl.w	r0, r3, r0
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	4303      	orrs	r3, r0
 8009fd0:	3401      	adds	r4, #1
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd8:	482c      	ldr	r0, [pc, #176]	; (800a08c <_vfiprintf_r+0x250>)
 8009fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fde:	2206      	movs	r2, #6
 8009fe0:	f7f6 f916 	bl	8000210 <memchr>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d03f      	beq.n	800a068 <_vfiprintf_r+0x22c>
 8009fe8:	4b29      	ldr	r3, [pc, #164]	; (800a090 <_vfiprintf_r+0x254>)
 8009fea:	bb1b      	cbnz	r3, 800a034 <_vfiprintf_r+0x1f8>
 8009fec:	9b03      	ldr	r3, [sp, #12]
 8009fee:	3307      	adds	r3, #7
 8009ff0:	f023 0307 	bic.w	r3, r3, #7
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	9303      	str	r3, [sp, #12]
 8009ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffa:	443b      	add	r3, r7
 8009ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ffe:	e767      	b.n	8009ed0 <_vfiprintf_r+0x94>
 800a000:	fb0c 3202 	mla	r2, ip, r2, r3
 800a004:	460c      	mov	r4, r1
 800a006:	2001      	movs	r0, #1
 800a008:	e7a5      	b.n	8009f56 <_vfiprintf_r+0x11a>
 800a00a:	2300      	movs	r3, #0
 800a00c:	3401      	adds	r4, #1
 800a00e:	9305      	str	r3, [sp, #20]
 800a010:	4619      	mov	r1, r3
 800a012:	f04f 0c0a 	mov.w	ip, #10
 800a016:	4620      	mov	r0, r4
 800a018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a01c:	3a30      	subs	r2, #48	; 0x30
 800a01e:	2a09      	cmp	r2, #9
 800a020:	d903      	bls.n	800a02a <_vfiprintf_r+0x1ee>
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0c5      	beq.n	8009fb2 <_vfiprintf_r+0x176>
 800a026:	9105      	str	r1, [sp, #20]
 800a028:	e7c3      	b.n	8009fb2 <_vfiprintf_r+0x176>
 800a02a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a02e:	4604      	mov	r4, r0
 800a030:	2301      	movs	r3, #1
 800a032:	e7f0      	b.n	800a016 <_vfiprintf_r+0x1da>
 800a034:	ab03      	add	r3, sp, #12
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	462a      	mov	r2, r5
 800a03a:	4b16      	ldr	r3, [pc, #88]	; (800a094 <_vfiprintf_r+0x258>)
 800a03c:	a904      	add	r1, sp, #16
 800a03e:	4630      	mov	r0, r6
 800a040:	f7fd fbcc 	bl	80077dc <_printf_float>
 800a044:	4607      	mov	r7, r0
 800a046:	1c78      	adds	r0, r7, #1
 800a048:	d1d6      	bne.n	8009ff8 <_vfiprintf_r+0x1bc>
 800a04a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a04c:	07d9      	lsls	r1, r3, #31
 800a04e:	d405      	bmi.n	800a05c <_vfiprintf_r+0x220>
 800a050:	89ab      	ldrh	r3, [r5, #12]
 800a052:	059a      	lsls	r2, r3, #22
 800a054:	d402      	bmi.n	800a05c <_vfiprintf_r+0x220>
 800a056:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a058:	f7fd fa28 	bl	80074ac <__retarget_lock_release_recursive>
 800a05c:	89ab      	ldrh	r3, [r5, #12]
 800a05e:	065b      	lsls	r3, r3, #25
 800a060:	f53f af12 	bmi.w	8009e88 <_vfiprintf_r+0x4c>
 800a064:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a066:	e711      	b.n	8009e8c <_vfiprintf_r+0x50>
 800a068:	ab03      	add	r3, sp, #12
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	462a      	mov	r2, r5
 800a06e:	4b09      	ldr	r3, [pc, #36]	; (800a094 <_vfiprintf_r+0x258>)
 800a070:	a904      	add	r1, sp, #16
 800a072:	4630      	mov	r0, r6
 800a074:	f7fd fe56 	bl	8007d24 <_printf_i>
 800a078:	e7e4      	b.n	800a044 <_vfiprintf_r+0x208>
 800a07a:	bf00      	nop
 800a07c:	0800a5c0 	.word	0x0800a5c0
 800a080:	0800a5e0 	.word	0x0800a5e0
 800a084:	0800a5a0 	.word	0x0800a5a0
 800a088:	0800a924 	.word	0x0800a924
 800a08c:	0800a92e 	.word	0x0800a92e
 800a090:	080077dd 	.word	0x080077dd
 800a094:	08009e17 	.word	0x08009e17
 800a098:	0800a92a 	.word	0x0800a92a

0800a09c <_read_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d07      	ldr	r5, [pc, #28]	; (800a0bc <_read_r+0x20>)
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	4608      	mov	r0, r1
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	602a      	str	r2, [r5, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	f7f9 fa4a 	bl	8003544 <_read>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_read_r+0x1e>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_read_r+0x1e>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	200008b0 	.word	0x200008b0

0800a0c0 <__assert_func>:
 800a0c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0c2:	4614      	mov	r4, r2
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <__assert_func+0x2c>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	68d8      	ldr	r0, [r3, #12]
 800a0ce:	b14c      	cbz	r4, 800a0e4 <__assert_func+0x24>
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <__assert_func+0x30>)
 800a0d2:	9100      	str	r1, [sp, #0]
 800a0d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0d8:	4906      	ldr	r1, [pc, #24]	; (800a0f4 <__assert_func+0x34>)
 800a0da:	462b      	mov	r3, r5
 800a0dc:	f000 f80e 	bl	800a0fc <fiprintf>
 800a0e0:	f000 f8a8 	bl	800a234 <abort>
 800a0e4:	4b04      	ldr	r3, [pc, #16]	; (800a0f8 <__assert_func+0x38>)
 800a0e6:	461c      	mov	r4, r3
 800a0e8:	e7f3      	b.n	800a0d2 <__assert_func+0x12>
 800a0ea:	bf00      	nop
 800a0ec:	20000010 	.word	0x20000010
 800a0f0:	0800a935 	.word	0x0800a935
 800a0f4:	0800a942 	.word	0x0800a942
 800a0f8:	0800a970 	.word	0x0800a970

0800a0fc <fiprintf>:
 800a0fc:	b40e      	push	{r1, r2, r3}
 800a0fe:	b503      	push	{r0, r1, lr}
 800a100:	4601      	mov	r1, r0
 800a102:	ab03      	add	r3, sp, #12
 800a104:	4805      	ldr	r0, [pc, #20]	; (800a11c <fiprintf+0x20>)
 800a106:	f853 2b04 	ldr.w	r2, [r3], #4
 800a10a:	6800      	ldr	r0, [r0, #0]
 800a10c:	9301      	str	r3, [sp, #4]
 800a10e:	f7ff fe95 	bl	8009e3c <_vfiprintf_r>
 800a112:	b002      	add	sp, #8
 800a114:	f85d eb04 	ldr.w	lr, [sp], #4
 800a118:	b003      	add	sp, #12
 800a11a:	4770      	bx	lr
 800a11c:	20000010 	.word	0x20000010

0800a120 <_fstat_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d07      	ldr	r5, [pc, #28]	; (800a140 <_fstat_r+0x20>)
 800a124:	2300      	movs	r3, #0
 800a126:	4604      	mov	r4, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	4611      	mov	r1, r2
 800a12c:	602b      	str	r3, [r5, #0]
 800a12e:	f7f9 fa32 	bl	8003596 <_fstat>
 800a132:	1c43      	adds	r3, r0, #1
 800a134:	d102      	bne.n	800a13c <_fstat_r+0x1c>
 800a136:	682b      	ldr	r3, [r5, #0]
 800a138:	b103      	cbz	r3, 800a13c <_fstat_r+0x1c>
 800a13a:	6023      	str	r3, [r4, #0]
 800a13c:	bd38      	pop	{r3, r4, r5, pc}
 800a13e:	bf00      	nop
 800a140:	200008b0 	.word	0x200008b0

0800a144 <_isatty_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4d06      	ldr	r5, [pc, #24]	; (800a160 <_isatty_r+0x1c>)
 800a148:	2300      	movs	r3, #0
 800a14a:	4604      	mov	r4, r0
 800a14c:	4608      	mov	r0, r1
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	f7f9 fa31 	bl	80035b6 <_isatty>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d102      	bne.n	800a15e <_isatty_r+0x1a>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	b103      	cbz	r3, 800a15e <_isatty_r+0x1a>
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	200008b0 	.word	0x200008b0

0800a164 <__ascii_mbtowc>:
 800a164:	b082      	sub	sp, #8
 800a166:	b901      	cbnz	r1, 800a16a <__ascii_mbtowc+0x6>
 800a168:	a901      	add	r1, sp, #4
 800a16a:	b142      	cbz	r2, 800a17e <__ascii_mbtowc+0x1a>
 800a16c:	b14b      	cbz	r3, 800a182 <__ascii_mbtowc+0x1e>
 800a16e:	7813      	ldrb	r3, [r2, #0]
 800a170:	600b      	str	r3, [r1, #0]
 800a172:	7812      	ldrb	r2, [r2, #0]
 800a174:	1e10      	subs	r0, r2, #0
 800a176:	bf18      	it	ne
 800a178:	2001      	movne	r0, #1
 800a17a:	b002      	add	sp, #8
 800a17c:	4770      	bx	lr
 800a17e:	4610      	mov	r0, r2
 800a180:	e7fb      	b.n	800a17a <__ascii_mbtowc+0x16>
 800a182:	f06f 0001 	mvn.w	r0, #1
 800a186:	e7f8      	b.n	800a17a <__ascii_mbtowc+0x16>

0800a188 <memmove>:
 800a188:	4288      	cmp	r0, r1
 800a18a:	b510      	push	{r4, lr}
 800a18c:	eb01 0402 	add.w	r4, r1, r2
 800a190:	d902      	bls.n	800a198 <memmove+0x10>
 800a192:	4284      	cmp	r4, r0
 800a194:	4623      	mov	r3, r4
 800a196:	d807      	bhi.n	800a1a8 <memmove+0x20>
 800a198:	1e43      	subs	r3, r0, #1
 800a19a:	42a1      	cmp	r1, r4
 800a19c:	d008      	beq.n	800a1b0 <memmove+0x28>
 800a19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1a6:	e7f8      	b.n	800a19a <memmove+0x12>
 800a1a8:	4402      	add	r2, r0
 800a1aa:	4601      	mov	r1, r0
 800a1ac:	428a      	cmp	r2, r1
 800a1ae:	d100      	bne.n	800a1b2 <memmove+0x2a>
 800a1b0:	bd10      	pop	{r4, pc}
 800a1b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1ba:	e7f7      	b.n	800a1ac <memmove+0x24>

0800a1bc <_realloc_r>:
 800a1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c0:	4680      	mov	r8, r0
 800a1c2:	4614      	mov	r4, r2
 800a1c4:	460e      	mov	r6, r1
 800a1c6:	b921      	cbnz	r1, 800a1d2 <_realloc_r+0x16>
 800a1c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	f7fd b9f1 	b.w	80075b4 <_malloc_r>
 800a1d2:	b92a      	cbnz	r2, 800a1e0 <_realloc_r+0x24>
 800a1d4:	f7fd f982 	bl	80074dc <_free_r>
 800a1d8:	4625      	mov	r5, r4
 800a1da:	4628      	mov	r0, r5
 800a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e0:	f000 f82f 	bl	800a242 <_malloc_usable_size_r>
 800a1e4:	4284      	cmp	r4, r0
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	d802      	bhi.n	800a1f0 <_realloc_r+0x34>
 800a1ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1ee:	d812      	bhi.n	800a216 <_realloc_r+0x5a>
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	f7fd f9de 	bl	80075b4 <_malloc_r>
 800a1f8:	4605      	mov	r5, r0
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d0ed      	beq.n	800a1da <_realloc_r+0x1e>
 800a1fe:	42bc      	cmp	r4, r7
 800a200:	4622      	mov	r2, r4
 800a202:	4631      	mov	r1, r6
 800a204:	bf28      	it	cs
 800a206:	463a      	movcs	r2, r7
 800a208:	f7fd f951 	bl	80074ae <memcpy>
 800a20c:	4631      	mov	r1, r6
 800a20e:	4640      	mov	r0, r8
 800a210:	f7fd f964 	bl	80074dc <_free_r>
 800a214:	e7e1      	b.n	800a1da <_realloc_r+0x1e>
 800a216:	4635      	mov	r5, r6
 800a218:	e7df      	b.n	800a1da <_realloc_r+0x1e>

0800a21a <__ascii_wctomb>:
 800a21a:	b149      	cbz	r1, 800a230 <__ascii_wctomb+0x16>
 800a21c:	2aff      	cmp	r2, #255	; 0xff
 800a21e:	bf85      	ittet	hi
 800a220:	238a      	movhi	r3, #138	; 0x8a
 800a222:	6003      	strhi	r3, [r0, #0]
 800a224:	700a      	strbls	r2, [r1, #0]
 800a226:	f04f 30ff 	movhi.w	r0, #4294967295
 800a22a:	bf98      	it	ls
 800a22c:	2001      	movls	r0, #1
 800a22e:	4770      	bx	lr
 800a230:	4608      	mov	r0, r1
 800a232:	4770      	bx	lr

0800a234 <abort>:
 800a234:	b508      	push	{r3, lr}
 800a236:	2006      	movs	r0, #6
 800a238:	f000 f834 	bl	800a2a4 <raise>
 800a23c:	2001      	movs	r0, #1
 800a23e:	f7f9 f977 	bl	8003530 <_exit>

0800a242 <_malloc_usable_size_r>:
 800a242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a246:	1f18      	subs	r0, r3, #4
 800a248:	2b00      	cmp	r3, #0
 800a24a:	bfbc      	itt	lt
 800a24c:	580b      	ldrlt	r3, [r1, r0]
 800a24e:	18c0      	addlt	r0, r0, r3
 800a250:	4770      	bx	lr

0800a252 <_raise_r>:
 800a252:	291f      	cmp	r1, #31
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4604      	mov	r4, r0
 800a258:	460d      	mov	r5, r1
 800a25a:	d904      	bls.n	800a266 <_raise_r+0x14>
 800a25c:	2316      	movs	r3, #22
 800a25e:	6003      	str	r3, [r0, #0]
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	bd38      	pop	{r3, r4, r5, pc}
 800a266:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a268:	b112      	cbz	r2, 800a270 <_raise_r+0x1e>
 800a26a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a26e:	b94b      	cbnz	r3, 800a284 <_raise_r+0x32>
 800a270:	4620      	mov	r0, r4
 800a272:	f000 f831 	bl	800a2d8 <_getpid_r>
 800a276:	462a      	mov	r2, r5
 800a278:	4601      	mov	r1, r0
 800a27a:	4620      	mov	r0, r4
 800a27c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a280:	f000 b818 	b.w	800a2b4 <_kill_r>
 800a284:	2b01      	cmp	r3, #1
 800a286:	d00a      	beq.n	800a29e <_raise_r+0x4c>
 800a288:	1c59      	adds	r1, r3, #1
 800a28a:	d103      	bne.n	800a294 <_raise_r+0x42>
 800a28c:	2316      	movs	r3, #22
 800a28e:	6003      	str	r3, [r0, #0]
 800a290:	2001      	movs	r0, #1
 800a292:	e7e7      	b.n	800a264 <_raise_r+0x12>
 800a294:	2400      	movs	r4, #0
 800a296:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a29a:	4628      	mov	r0, r5
 800a29c:	4798      	blx	r3
 800a29e:	2000      	movs	r0, #0
 800a2a0:	e7e0      	b.n	800a264 <_raise_r+0x12>
	...

0800a2a4 <raise>:
 800a2a4:	4b02      	ldr	r3, [pc, #8]	; (800a2b0 <raise+0xc>)
 800a2a6:	4601      	mov	r1, r0
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	f7ff bfd2 	b.w	800a252 <_raise_r>
 800a2ae:	bf00      	nop
 800a2b0:	20000010 	.word	0x20000010

0800a2b4 <_kill_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4d07      	ldr	r5, [pc, #28]	; (800a2d4 <_kill_r+0x20>)
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	4608      	mov	r0, r1
 800a2be:	4611      	mov	r1, r2
 800a2c0:	602b      	str	r3, [r5, #0]
 800a2c2:	f7f9 f925 	bl	8003510 <_kill>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	d102      	bne.n	800a2d0 <_kill_r+0x1c>
 800a2ca:	682b      	ldr	r3, [r5, #0]
 800a2cc:	b103      	cbz	r3, 800a2d0 <_kill_r+0x1c>
 800a2ce:	6023      	str	r3, [r4, #0]
 800a2d0:	bd38      	pop	{r3, r4, r5, pc}
 800a2d2:	bf00      	nop
 800a2d4:	200008b0 	.word	0x200008b0

0800a2d8 <_getpid_r>:
 800a2d8:	f7f9 b912 	b.w	8003500 <_getpid>

0800a2dc <sqrt>:
 800a2dc:	b538      	push	{r3, r4, r5, lr}
 800a2de:	ed2d 8b02 	vpush	{d8}
 800a2e2:	ec55 4b10 	vmov	r4, r5, d0
 800a2e6:	f000 f825 	bl	800a334 <__ieee754_sqrt>
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	462b      	mov	r3, r5
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	eeb0 8a40 	vmov.f32	s16, s0
 800a2f6:	eef0 8a60 	vmov.f32	s17, s1
 800a2fa:	f7f6 fc2f 	bl	8000b5c <__aeabi_dcmpun>
 800a2fe:	b990      	cbnz	r0, 800a326 <sqrt+0x4a>
 800a300:	2200      	movs	r2, #0
 800a302:	2300      	movs	r3, #0
 800a304:	4620      	mov	r0, r4
 800a306:	4629      	mov	r1, r5
 800a308:	f7f6 fc00 	bl	8000b0c <__aeabi_dcmplt>
 800a30c:	b158      	cbz	r0, 800a326 <sqrt+0x4a>
 800a30e:	f7fc fed7 	bl	80070c0 <__errno>
 800a312:	2321      	movs	r3, #33	; 0x21
 800a314:	6003      	str	r3, [r0, #0]
 800a316:	2200      	movs	r2, #0
 800a318:	2300      	movs	r3, #0
 800a31a:	4610      	mov	r0, r2
 800a31c:	4619      	mov	r1, r3
 800a31e:	f7f6 faad 	bl	800087c <__aeabi_ddiv>
 800a322:	ec41 0b18 	vmov	d8, r0, r1
 800a326:	eeb0 0a48 	vmov.f32	s0, s16
 800a32a:	eef0 0a68 	vmov.f32	s1, s17
 800a32e:	ecbd 8b02 	vpop	{d8}
 800a332:	bd38      	pop	{r3, r4, r5, pc}

0800a334 <__ieee754_sqrt>:
 800a334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a338:	ec55 4b10 	vmov	r4, r5, d0
 800a33c:	4e55      	ldr	r6, [pc, #340]	; (800a494 <__ieee754_sqrt+0x160>)
 800a33e:	43ae      	bics	r6, r5
 800a340:	ee10 0a10 	vmov	r0, s0
 800a344:	ee10 3a10 	vmov	r3, s0
 800a348:	462a      	mov	r2, r5
 800a34a:	4629      	mov	r1, r5
 800a34c:	d110      	bne.n	800a370 <__ieee754_sqrt+0x3c>
 800a34e:	ee10 2a10 	vmov	r2, s0
 800a352:	462b      	mov	r3, r5
 800a354:	f7f6 f968 	bl	8000628 <__aeabi_dmul>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4620      	mov	r0, r4
 800a35e:	4629      	mov	r1, r5
 800a360:	f7f5 ffac 	bl	80002bc <__adddf3>
 800a364:	4604      	mov	r4, r0
 800a366:	460d      	mov	r5, r1
 800a368:	ec45 4b10 	vmov	d0, r4, r5
 800a36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a370:	2d00      	cmp	r5, #0
 800a372:	dc10      	bgt.n	800a396 <__ieee754_sqrt+0x62>
 800a374:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a378:	4330      	orrs	r0, r6
 800a37a:	d0f5      	beq.n	800a368 <__ieee754_sqrt+0x34>
 800a37c:	b15d      	cbz	r5, 800a396 <__ieee754_sqrt+0x62>
 800a37e:	ee10 2a10 	vmov	r2, s0
 800a382:	462b      	mov	r3, r5
 800a384:	ee10 0a10 	vmov	r0, s0
 800a388:	f7f5 ff96 	bl	80002b8 <__aeabi_dsub>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	f7f6 fa74 	bl	800087c <__aeabi_ddiv>
 800a394:	e7e6      	b.n	800a364 <__ieee754_sqrt+0x30>
 800a396:	1512      	asrs	r2, r2, #20
 800a398:	d074      	beq.n	800a484 <__ieee754_sqrt+0x150>
 800a39a:	07d4      	lsls	r4, r2, #31
 800a39c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a3a0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a3a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a3a8:	bf5e      	ittt	pl
 800a3aa:	0fda      	lsrpl	r2, r3, #31
 800a3ac:	005b      	lslpl	r3, r3, #1
 800a3ae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a3b2:	2400      	movs	r4, #0
 800a3b4:	0fda      	lsrs	r2, r3, #31
 800a3b6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a3ba:	107f      	asrs	r7, r7, #1
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	2516      	movs	r5, #22
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a3c6:	1886      	adds	r6, r0, r2
 800a3c8:	428e      	cmp	r6, r1
 800a3ca:	bfde      	ittt	le
 800a3cc:	1b89      	suble	r1, r1, r6
 800a3ce:	18b0      	addle	r0, r6, r2
 800a3d0:	18a4      	addle	r4, r4, r2
 800a3d2:	0049      	lsls	r1, r1, #1
 800a3d4:	3d01      	subs	r5, #1
 800a3d6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a3da:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a3de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a3e2:	d1f0      	bne.n	800a3c6 <__ieee754_sqrt+0x92>
 800a3e4:	462a      	mov	r2, r5
 800a3e6:	f04f 0e20 	mov.w	lr, #32
 800a3ea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a3ee:	4281      	cmp	r1, r0
 800a3f0:	eb06 0c05 	add.w	ip, r6, r5
 800a3f4:	dc02      	bgt.n	800a3fc <__ieee754_sqrt+0xc8>
 800a3f6:	d113      	bne.n	800a420 <__ieee754_sqrt+0xec>
 800a3f8:	459c      	cmp	ip, r3
 800a3fa:	d811      	bhi.n	800a420 <__ieee754_sqrt+0xec>
 800a3fc:	f1bc 0f00 	cmp.w	ip, #0
 800a400:	eb0c 0506 	add.w	r5, ip, r6
 800a404:	da43      	bge.n	800a48e <__ieee754_sqrt+0x15a>
 800a406:	2d00      	cmp	r5, #0
 800a408:	db41      	blt.n	800a48e <__ieee754_sqrt+0x15a>
 800a40a:	f100 0801 	add.w	r8, r0, #1
 800a40e:	1a09      	subs	r1, r1, r0
 800a410:	459c      	cmp	ip, r3
 800a412:	bf88      	it	hi
 800a414:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a418:	eba3 030c 	sub.w	r3, r3, ip
 800a41c:	4432      	add	r2, r6
 800a41e:	4640      	mov	r0, r8
 800a420:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a424:	f1be 0e01 	subs.w	lr, lr, #1
 800a428:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a42c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a430:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a434:	d1db      	bne.n	800a3ee <__ieee754_sqrt+0xba>
 800a436:	430b      	orrs	r3, r1
 800a438:	d006      	beq.n	800a448 <__ieee754_sqrt+0x114>
 800a43a:	1c50      	adds	r0, r2, #1
 800a43c:	bf13      	iteet	ne
 800a43e:	3201      	addne	r2, #1
 800a440:	3401      	addeq	r4, #1
 800a442:	4672      	moveq	r2, lr
 800a444:	f022 0201 	bicne.w	r2, r2, #1
 800a448:	1063      	asrs	r3, r4, #1
 800a44a:	0852      	lsrs	r2, r2, #1
 800a44c:	07e1      	lsls	r1, r4, #31
 800a44e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a452:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a456:	bf48      	it	mi
 800a458:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a45c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a460:	4614      	mov	r4, r2
 800a462:	e781      	b.n	800a368 <__ieee754_sqrt+0x34>
 800a464:	0ad9      	lsrs	r1, r3, #11
 800a466:	3815      	subs	r0, #21
 800a468:	055b      	lsls	r3, r3, #21
 800a46a:	2900      	cmp	r1, #0
 800a46c:	d0fa      	beq.n	800a464 <__ieee754_sqrt+0x130>
 800a46e:	02cd      	lsls	r5, r1, #11
 800a470:	d50a      	bpl.n	800a488 <__ieee754_sqrt+0x154>
 800a472:	f1c2 0420 	rsb	r4, r2, #32
 800a476:	fa23 f404 	lsr.w	r4, r3, r4
 800a47a:	1e55      	subs	r5, r2, #1
 800a47c:	4093      	lsls	r3, r2
 800a47e:	4321      	orrs	r1, r4
 800a480:	1b42      	subs	r2, r0, r5
 800a482:	e78a      	b.n	800a39a <__ieee754_sqrt+0x66>
 800a484:	4610      	mov	r0, r2
 800a486:	e7f0      	b.n	800a46a <__ieee754_sqrt+0x136>
 800a488:	0049      	lsls	r1, r1, #1
 800a48a:	3201      	adds	r2, #1
 800a48c:	e7ef      	b.n	800a46e <__ieee754_sqrt+0x13a>
 800a48e:	4680      	mov	r8, r0
 800a490:	e7bd      	b.n	800a40e <__ieee754_sqrt+0xda>
 800a492:	bf00      	nop
 800a494:	7ff00000 	.word	0x7ff00000

0800a498 <_init>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	bf00      	nop
 800a49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49e:	bc08      	pop	{r3}
 800a4a0:	469e      	mov	lr, r3
 800a4a2:	4770      	bx	lr

0800a4a4 <_fini>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	bf00      	nop
 800a4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4aa:	bc08      	pop	{r3}
 800a4ac:	469e      	mov	lr, r3
 800a4ae:	4770      	bx	lr
