
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800515c  0800515c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005164  08005164  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800516c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000070  080051dc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  080051dc  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2c4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3b  00000000  00000000  0002a364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0002bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167a4  00000000  00000000  0002cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a160  00000000  00000000  000436bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a08  00000000  00000000  0004d81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5224  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b70  00000000  00000000  000d5274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ed0 	.word	0x08004ed0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004ed0 	.word	0x08004ed0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_uldivmod>:
 8000618:	b953      	cbnz	r3, 8000630 <__aeabi_uldivmod+0x18>
 800061a:	b94a      	cbnz	r2, 8000630 <__aeabi_uldivmod+0x18>
 800061c:	2900      	cmp	r1, #0
 800061e:	bf08      	it	eq
 8000620:	2800      	cmpeq	r0, #0
 8000622:	bf1c      	itt	ne
 8000624:	f04f 31ff 	movne.w	r1, #4294967295
 8000628:	f04f 30ff 	movne.w	r0, #4294967295
 800062c:	f000 b974 	b.w	8000918 <__aeabi_idiv0>
 8000630:	f1ad 0c08 	sub.w	ip, sp, #8
 8000634:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000638:	f000 f806 	bl	8000648 <__udivmoddi4>
 800063c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr

08000648 <__udivmoddi4>:
 8000648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800064c:	9d08      	ldr	r5, [sp, #32]
 800064e:	4604      	mov	r4, r0
 8000650:	468e      	mov	lr, r1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d14d      	bne.n	80006f2 <__udivmoddi4+0xaa>
 8000656:	428a      	cmp	r2, r1
 8000658:	4694      	mov	ip, r2
 800065a:	d969      	bls.n	8000730 <__udivmoddi4+0xe8>
 800065c:	fab2 f282 	clz	r2, r2
 8000660:	b152      	cbz	r2, 8000678 <__udivmoddi4+0x30>
 8000662:	fa01 f302 	lsl.w	r3, r1, r2
 8000666:	f1c2 0120 	rsb	r1, r2, #32
 800066a:	fa20 f101 	lsr.w	r1, r0, r1
 800066e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000672:	ea41 0e03 	orr.w	lr, r1, r3
 8000676:	4094      	lsls	r4, r2
 8000678:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800067c:	0c21      	lsrs	r1, r4, #16
 800067e:	fbbe f6f8 	udiv	r6, lr, r8
 8000682:	fa1f f78c 	uxth.w	r7, ip
 8000686:	fb08 e316 	mls	r3, r8, r6, lr
 800068a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800068e:	fb06 f107 	mul.w	r1, r6, r7
 8000692:	4299      	cmp	r1, r3
 8000694:	d90a      	bls.n	80006ac <__udivmoddi4+0x64>
 8000696:	eb1c 0303 	adds.w	r3, ip, r3
 800069a:	f106 30ff 	add.w	r0, r6, #4294967295
 800069e:	f080 811f 	bcs.w	80008e0 <__udivmoddi4+0x298>
 80006a2:	4299      	cmp	r1, r3
 80006a4:	f240 811c 	bls.w	80008e0 <__udivmoddi4+0x298>
 80006a8:	3e02      	subs	r6, #2
 80006aa:	4463      	add	r3, ip
 80006ac:	1a5b      	subs	r3, r3, r1
 80006ae:	b2a4      	uxth	r4, r4
 80006b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b4:	fb08 3310 	mls	r3, r8, r0, r3
 80006b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006bc:	fb00 f707 	mul.w	r7, r0, r7
 80006c0:	42a7      	cmp	r7, r4
 80006c2:	d90a      	bls.n	80006da <__udivmoddi4+0x92>
 80006c4:	eb1c 0404 	adds.w	r4, ip, r4
 80006c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006cc:	f080 810a 	bcs.w	80008e4 <__udivmoddi4+0x29c>
 80006d0:	42a7      	cmp	r7, r4
 80006d2:	f240 8107 	bls.w	80008e4 <__udivmoddi4+0x29c>
 80006d6:	4464      	add	r4, ip
 80006d8:	3802      	subs	r0, #2
 80006da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006de:	1be4      	subs	r4, r4, r7
 80006e0:	2600      	movs	r6, #0
 80006e2:	b11d      	cbz	r5, 80006ec <__udivmoddi4+0xa4>
 80006e4:	40d4      	lsrs	r4, r2
 80006e6:	2300      	movs	r3, #0
 80006e8:	e9c5 4300 	strd	r4, r3, [r5]
 80006ec:	4631      	mov	r1, r6
 80006ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d909      	bls.n	800070a <__udivmoddi4+0xc2>
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	f000 80ef 	beq.w	80008da <__udivmoddi4+0x292>
 80006fc:	2600      	movs	r6, #0
 80006fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000702:	4630      	mov	r0, r6
 8000704:	4631      	mov	r1, r6
 8000706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070a:	fab3 f683 	clz	r6, r3
 800070e:	2e00      	cmp	r6, #0
 8000710:	d14a      	bne.n	80007a8 <__udivmoddi4+0x160>
 8000712:	428b      	cmp	r3, r1
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xd4>
 8000716:	4282      	cmp	r2, r0
 8000718:	f200 80f9 	bhi.w	800090e <__udivmoddi4+0x2c6>
 800071c:	1a84      	subs	r4, r0, r2
 800071e:	eb61 0303 	sbc.w	r3, r1, r3
 8000722:	2001      	movs	r0, #1
 8000724:	469e      	mov	lr, r3
 8000726:	2d00      	cmp	r5, #0
 8000728:	d0e0      	beq.n	80006ec <__udivmoddi4+0xa4>
 800072a:	e9c5 4e00 	strd	r4, lr, [r5]
 800072e:	e7dd      	b.n	80006ec <__udivmoddi4+0xa4>
 8000730:	b902      	cbnz	r2, 8000734 <__udivmoddi4+0xec>
 8000732:	deff      	udf	#255	; 0xff
 8000734:	fab2 f282 	clz	r2, r2
 8000738:	2a00      	cmp	r2, #0
 800073a:	f040 8092 	bne.w	8000862 <__udivmoddi4+0x21a>
 800073e:	eba1 010c 	sub.w	r1, r1, ip
 8000742:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000746:	fa1f fe8c 	uxth.w	lr, ip
 800074a:	2601      	movs	r6, #1
 800074c:	0c20      	lsrs	r0, r4, #16
 800074e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000752:	fb07 1113 	mls	r1, r7, r3, r1
 8000756:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800075a:	fb0e f003 	mul.w	r0, lr, r3
 800075e:	4288      	cmp	r0, r1
 8000760:	d908      	bls.n	8000774 <__udivmoddi4+0x12c>
 8000762:	eb1c 0101 	adds.w	r1, ip, r1
 8000766:	f103 38ff 	add.w	r8, r3, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x12a>
 800076c:	4288      	cmp	r0, r1
 800076e:	f200 80cb 	bhi.w	8000908 <__udivmoddi4+0x2c0>
 8000772:	4643      	mov	r3, r8
 8000774:	1a09      	subs	r1, r1, r0
 8000776:	b2a4      	uxth	r4, r4
 8000778:	fbb1 f0f7 	udiv	r0, r1, r7
 800077c:	fb07 1110 	mls	r1, r7, r0, r1
 8000780:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000784:	fb0e fe00 	mul.w	lr, lr, r0
 8000788:	45a6      	cmp	lr, r4
 800078a:	d908      	bls.n	800079e <__udivmoddi4+0x156>
 800078c:	eb1c 0404 	adds.w	r4, ip, r4
 8000790:	f100 31ff 	add.w	r1, r0, #4294967295
 8000794:	d202      	bcs.n	800079c <__udivmoddi4+0x154>
 8000796:	45a6      	cmp	lr, r4
 8000798:	f200 80bb 	bhi.w	8000912 <__udivmoddi4+0x2ca>
 800079c:	4608      	mov	r0, r1
 800079e:	eba4 040e 	sub.w	r4, r4, lr
 80007a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007a6:	e79c      	b.n	80006e2 <__udivmoddi4+0x9a>
 80007a8:	f1c6 0720 	rsb	r7, r6, #32
 80007ac:	40b3      	lsls	r3, r6
 80007ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80007b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007b6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ba:	fa01 f306 	lsl.w	r3, r1, r6
 80007be:	431c      	orrs	r4, r3
 80007c0:	40f9      	lsrs	r1, r7
 80007c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007c6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ce:	0c20      	lsrs	r0, r4, #16
 80007d0:	fa1f fe8c 	uxth.w	lr, ip
 80007d4:	fb09 1118 	mls	r1, r9, r8, r1
 80007d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007dc:	fb08 f00e 	mul.w	r0, r8, lr
 80007e0:	4288      	cmp	r0, r1
 80007e2:	fa02 f206 	lsl.w	r2, r2, r6
 80007e6:	d90b      	bls.n	8000800 <__udivmoddi4+0x1b8>
 80007e8:	eb1c 0101 	adds.w	r1, ip, r1
 80007ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80007f0:	f080 8088 	bcs.w	8000904 <__udivmoddi4+0x2bc>
 80007f4:	4288      	cmp	r0, r1
 80007f6:	f240 8085 	bls.w	8000904 <__udivmoddi4+0x2bc>
 80007fa:	f1a8 0802 	sub.w	r8, r8, #2
 80007fe:	4461      	add	r1, ip
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	b2a4      	uxth	r4, r4
 8000804:	fbb1 f0f9 	udiv	r0, r1, r9
 8000808:	fb09 1110 	mls	r1, r9, r0, r1
 800080c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000810:	fb00 fe0e 	mul.w	lr, r0, lr
 8000814:	458e      	cmp	lr, r1
 8000816:	d908      	bls.n	800082a <__udivmoddi4+0x1e2>
 8000818:	eb1c 0101 	adds.w	r1, ip, r1
 800081c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000820:	d26c      	bcs.n	80008fc <__udivmoddi4+0x2b4>
 8000822:	458e      	cmp	lr, r1
 8000824:	d96a      	bls.n	80008fc <__udivmoddi4+0x2b4>
 8000826:	3802      	subs	r0, #2
 8000828:	4461      	add	r1, ip
 800082a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800082e:	fba0 9402 	umull	r9, r4, r0, r2
 8000832:	eba1 010e 	sub.w	r1, r1, lr
 8000836:	42a1      	cmp	r1, r4
 8000838:	46c8      	mov	r8, r9
 800083a:	46a6      	mov	lr, r4
 800083c:	d356      	bcc.n	80008ec <__udivmoddi4+0x2a4>
 800083e:	d053      	beq.n	80008e8 <__udivmoddi4+0x2a0>
 8000840:	b15d      	cbz	r5, 800085a <__udivmoddi4+0x212>
 8000842:	ebb3 0208 	subs.w	r2, r3, r8
 8000846:	eb61 010e 	sbc.w	r1, r1, lr
 800084a:	fa01 f707 	lsl.w	r7, r1, r7
 800084e:	fa22 f306 	lsr.w	r3, r2, r6
 8000852:	40f1      	lsrs	r1, r6
 8000854:	431f      	orrs	r7, r3
 8000856:	e9c5 7100 	strd	r7, r1, [r5]
 800085a:	2600      	movs	r6, #0
 800085c:	4631      	mov	r1, r6
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	f1c2 0320 	rsb	r3, r2, #32
 8000866:	40d8      	lsrs	r0, r3
 8000868:	fa0c fc02 	lsl.w	ip, ip, r2
 800086c:	fa21 f303 	lsr.w	r3, r1, r3
 8000870:	4091      	lsls	r1, r2
 8000872:	4301      	orrs	r1, r0
 8000874:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000878:	fa1f fe8c 	uxth.w	lr, ip
 800087c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000880:	fb07 3610 	mls	r6, r7, r0, r3
 8000884:	0c0b      	lsrs	r3, r1, #16
 8000886:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800088a:	fb00 f60e 	mul.w	r6, r0, lr
 800088e:	429e      	cmp	r6, r3
 8000890:	fa04 f402 	lsl.w	r4, r4, r2
 8000894:	d908      	bls.n	80008a8 <__udivmoddi4+0x260>
 8000896:	eb1c 0303 	adds.w	r3, ip, r3
 800089a:	f100 38ff 	add.w	r8, r0, #4294967295
 800089e:	d22f      	bcs.n	8000900 <__udivmoddi4+0x2b8>
 80008a0:	429e      	cmp	r6, r3
 80008a2:	d92d      	bls.n	8000900 <__udivmoddi4+0x2b8>
 80008a4:	3802      	subs	r0, #2
 80008a6:	4463      	add	r3, ip
 80008a8:	1b9b      	subs	r3, r3, r6
 80008aa:	b289      	uxth	r1, r1
 80008ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80008b0:	fb07 3316 	mls	r3, r7, r6, r3
 80008b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b8:	fb06 f30e 	mul.w	r3, r6, lr
 80008bc:	428b      	cmp	r3, r1
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x28a>
 80008c0:	eb1c 0101 	adds.w	r1, ip, r1
 80008c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008c8:	d216      	bcs.n	80008f8 <__udivmoddi4+0x2b0>
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d914      	bls.n	80008f8 <__udivmoddi4+0x2b0>
 80008ce:	3e02      	subs	r6, #2
 80008d0:	4461      	add	r1, ip
 80008d2:	1ac9      	subs	r1, r1, r3
 80008d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008d8:	e738      	b.n	800074c <__udivmoddi4+0x104>
 80008da:	462e      	mov	r6, r5
 80008dc:	4628      	mov	r0, r5
 80008de:	e705      	b.n	80006ec <__udivmoddi4+0xa4>
 80008e0:	4606      	mov	r6, r0
 80008e2:	e6e3      	b.n	80006ac <__udivmoddi4+0x64>
 80008e4:	4618      	mov	r0, r3
 80008e6:	e6f8      	b.n	80006da <__udivmoddi4+0x92>
 80008e8:	454b      	cmp	r3, r9
 80008ea:	d2a9      	bcs.n	8000840 <__udivmoddi4+0x1f8>
 80008ec:	ebb9 0802 	subs.w	r8, r9, r2
 80008f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008f4:	3801      	subs	r0, #1
 80008f6:	e7a3      	b.n	8000840 <__udivmoddi4+0x1f8>
 80008f8:	4646      	mov	r6, r8
 80008fa:	e7ea      	b.n	80008d2 <__udivmoddi4+0x28a>
 80008fc:	4620      	mov	r0, r4
 80008fe:	e794      	b.n	800082a <__udivmoddi4+0x1e2>
 8000900:	4640      	mov	r0, r8
 8000902:	e7d1      	b.n	80008a8 <__udivmoddi4+0x260>
 8000904:	46d0      	mov	r8, sl
 8000906:	e77b      	b.n	8000800 <__udivmoddi4+0x1b8>
 8000908:	3b02      	subs	r3, #2
 800090a:	4461      	add	r1, ip
 800090c:	e732      	b.n	8000774 <__udivmoddi4+0x12c>
 800090e:	4630      	mov	r0, r6
 8000910:	e709      	b.n	8000726 <__udivmoddi4+0xde>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	e742      	b.n	800079e <__udivmoddi4+0x156>

08000918 <__aeabi_idiv0>:
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <HAL_UART_RxCpltCallback>:
//controller parameters
const double Kp[4] = {1,0,0,1}; 
const double Kd[4] = {1,0,0,1};


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
    char *cmd, *data, *value;
    uint8_t i = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	74fb      	strb	r3, [r7, #19]
    /* read the first characters */
    cmd = strtok((char*) &rx_data, ":");
 8000928:	492b      	ldr	r1, [pc, #172]	; (80009d8 <HAL_UART_RxCpltCallback+0xbc>)
 800092a:	482c      	ldr	r0, [pc, #176]	; (80009dc <HAL_UART_RxCpltCallback+0xc0>)
 800092c:	f003 f94c 	bl	8003bc8 <strtok>
 8000930:	60f8      	str	r0, [r7, #12]
    if(strcmp(cmd, "trj")){ /* trj case*/
 8000932:	492b      	ldr	r1, [pc, #172]	; (80009e0 <HAL_UART_RxCpltCallback+0xc4>)
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f7ff fc53 	bl	80001e0 <strcmp>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d041      	beq.n	80009c4 <HAL_UART_RxCpltCallback+0xa8>
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        data = strtok(NULL, ":");
 8000940:	4925      	ldr	r1, [pc, #148]	; (80009d8 <HAL_UART_RxCpltCallback+0xbc>)
 8000942:	2000      	movs	r0, #0
 8000944:	f003 f940 	bl	8003bc8 <strtok>
 8000948:	6178      	str	r0, [r7, #20]
        while(data != NULL){
 800094a:	e028      	b.n	800099e <HAL_UART_RxCpltCallback+0x82>
            if(i == 6) break; /* reading penup */
 800094c:	7cfb      	ldrb	r3, [r7, #19]
 800094e:	2b06      	cmp	r3, #6
 8000950:	d029      	beq.n	80009a6 <HAL_UART_RxCpltCallback+0x8a>
            value = "0x"; /* will contain the value extracted from the received string */
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <HAL_UART_RxCpltCallback+0xc8>)
 8000954:	60bb      	str	r3, [r7, #8]
            strcat(value, data); /* string concatenation REF: https://www.programiz.com/c-programming/library-function/string.h/strcat */
 8000956:	6979      	ldr	r1, [r7, #20]
 8000958:	68b8      	ldr	r0, [r7, #8]
 800095a:	f003 f925 	bl	8003ba8 <strcat>
            rbpush((((ringbuffer_t *) &manip)+i),  strtoull(value, NULL, 16)); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 800095e:	7cfb      	ldrb	r3, [r7, #19]
 8000960:	2258      	movs	r2, #88	; 0x58
 8000962:	fb02 f303 	mul.w	r3, r2, r3
 8000966:	4a20      	ldr	r2, [pc, #128]	; (80009e8 <HAL_UART_RxCpltCallback+0xcc>)
 8000968:	189c      	adds	r4, r3, r2
 800096a:	2210      	movs	r2, #16
 800096c:	2100      	movs	r1, #0
 800096e:	68b8      	ldr	r0, [r7, #8]
 8000970:	f003 faaa 	bl	8003ec8 <strtoull>
 8000974:	4602      	mov	r2, r0
 8000976:	460b      	mov	r3, r1
 8000978:	4610      	mov	r0, r2
 800097a:	4619      	mov	r1, r3
 800097c:	f7ff fe16 	bl	80005ac <__aeabi_ul2d>
 8000980:	4602      	mov	r2, r0
 8000982:	460b      	mov	r3, r1
 8000984:	ec43 2b10 	vmov	d0, r2, r3
 8000988:	4620      	mov	r0, r4
 800098a:	f000 f9af 	bl	8000cec <rbpush>
            data = strtok(NULL, ":");
 800098e:	4912      	ldr	r1, [pc, #72]	; (80009d8 <HAL_UART_RxCpltCallback+0xbc>)
 8000990:	2000      	movs	r0, #0
 8000992:	f003 f919 	bl	8003bc8 <strtok>
 8000996:	6178      	str	r0, [r7, #20]
            i++;
 8000998:	7cfb      	ldrb	r3, [r7, #19]
 800099a:	3301      	adds	r3, #1
 800099c:	74fb      	strb	r3, [r7, #19]
        while(data != NULL){
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1d3      	bne.n	800094c <HAL_UART_RxCpltCallback+0x30>
 80009a4:	e000      	b.n	80009a8 <HAL_UART_RxCpltCallback+0x8c>
            if(i == 6) break; /* reading penup */
 80009a6:	bf00      	nop
        }
        rbpush(&manip.penup, (double) atoi(data));
 80009a8:	6978      	ldr	r0, [r7, #20]
 80009aa:	f003 f8c7 	bl	8003b3c <atoi>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fdc7 	bl	8000544 <__aeabi_i2d>
 80009b6:	4602      	mov	r2, r0
 80009b8:	460b      	mov	r3, r1
 80009ba:	ec43 2b10 	vmov	d0, r2, r3
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <HAL_UART_RxCpltCallback+0xd0>)
 80009c0:	f000 f994 	bl	8000cec <rbpush>
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(&huart, &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	4904      	ldr	r1, [pc, #16]	; (80009dc <HAL_UART_RxCpltCallback+0xc0>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 f801 	bl	80029d2 <HAL_UART_Receive_DMA>
}
 80009d0:	bf00      	nop
 80009d2:	371c      	adds	r7, #28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	08004ee8 	.word	0x08004ee8
 80009dc:	2000008c 	.word	0x2000008c
 80009e0:	08004eec 	.word	0x08004eec
 80009e4:	08004ef0 	.word	0x08004ef0
 80009e8:	200000d0 	.word	0x200000d0
 80009ec:	200002e0 	.word	0x200002e0

080009f0 <init_man>:
- man_t *manip: man_t obj. to initialize;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	e00b      	b.n	8000a16 <init_man+0x26>
        rbclear((((ringbuffer_t *) manip)+i));
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	2258      	movs	r2, #88	; 0x58
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f9ba 	bl	8000d84 <rbclear>
    for(i = 0; i < 14; i++){
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	3301      	adds	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	2b0d      	cmp	r3, #13
 8000a1a:	d9f0      	bls.n	80009fe <init_man+0xe>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73fb      	strb	r3, [r7, #15]
 8000a20:	e018      	b.n	8000a54 <init_man+0x64>
        manip->B[i] = (double) 0;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	339a      	adds	r3, #154	; 0x9a
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	18d1      	adds	r1, r2, r3
 8000a2c:	f04f 0200 	mov.w	r2, #0
 8000a30:	f04f 0300 	mov.w	r3, #0
 8000a34:	e9c1 2300 	strd	r2, r3, [r1]
        manip->C[i] = (double) 0;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	339e      	adds	r3, #158	; 0x9e
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	18d1      	adds	r1, r2, r3
 8000a42:	f04f 0200 	mov.w	r2, #0
 8000a46:	f04f 0300 	mov.w	r3, #0
 8000a4a:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < 4; i++){
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	3301      	adds	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d9e3      	bls.n	8000a22 <init_man+0x32>
    }
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fbaa 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f816 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 f8c8 	bl	8000c04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a74:	f000 f8a6 	bl	8000bc4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a78:	f000 f87a 	bl	8000b70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip); /* initialize the manipulator struct */
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <main+0x2c>)
 8000a7e:	f7ff ffb7 	bl	80009f0 <init_man>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8000a82:	2240      	movs	r2, #64	; 0x40
 8000a84:	4903      	ldr	r1, [pc, #12]	; (8000a94 <main+0x30>)
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <main+0x34>)
 8000a88:	f001 ffa3 	bl	80029d2 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <main+0x28>
 8000a8e:	bf00      	nop
 8000a90:	200000d0 	.word	0x200000d0
 8000a94:	2000008c 	.word	0x2000008c
 8000a98:	200005e0 	.word	0x200005e0

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	; 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2230      	movs	r2, #48	; 0x30
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 f874 	bl	8003b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <SystemClock_Config+0xcc>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a27      	ldr	r2, [pc, #156]	; (8000b68 <SystemClock_Config+0xcc>)
 8000aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <SystemClock_Config+0xcc>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <SystemClock_Config+0xd0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <SystemClock_Config+0xd0>)
 8000ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <SystemClock_Config+0xd0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af8:	2302      	movs	r3, #2
 8000afa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b00:	2310      	movs	r3, #16
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b04:	2302      	movs	r3, #2
 8000b06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b10:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b16:	2304      	movs	r3, #4
 8000b18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1e:	f107 0320 	add.w	r3, r7, #32
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fa70 	bl	8002008 <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b2e:	f000 f8d7 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	230f      	movs	r3, #15
 8000b34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b36:	2302      	movs	r3, #2
 8000b38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fcd2 	bl	80024f8 <HAL_RCC_ClockConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b5a:	f000 f8c1 	bl	8000ce0 <Error_Handler>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3750      	adds	r7, #80	; 0x50
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40007000 	.word	0x40007000

08000b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <MX_USART2_UART_Init+0x50>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_USART2_UART_Init+0x4c>)
 8000ba8:	f001 fec6 	bl	8002938 <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bb2:	f000 f895 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200005e0 	.word	0x200005e0
 8000bc0:	40004400 	.word	0x40004400

08000bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_DMA_Init+0x3c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <MX_DMA_Init+0x3c>)
 8000bd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_DMA_Init+0x3c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2010      	movs	r0, #16
 8000bec:	f000 fc35 	bl	800145a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000bf0:	2010      	movs	r0, #16
 8000bf2:	f000 fc4e 	bl	8001492 <HAL_NVIC_EnableIRQ>

}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a2c      	ldr	r2, [pc, #176]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a25      	ldr	r2, [pc, #148]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	4812      	ldr	r0, [pc, #72]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c90:	f001 f9a0 	bl	8001fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_GPIO_Init+0xd8>)
 8000cac:	f001 f80e 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000cc8:	f001 f800 	bl	8001ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020800 	.word	0x40020800

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	ed87 0b00 	vstr	d0, [r7]
    buffer->buffer[buffer->tail] = data;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	18d1      	adds	r1, r2, r3
 8000d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d08:	e9c1 2300 	strd	r2, r3, [r1]
    buffer->tail++;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <rbpush+0x94>)
 8000d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d22:	08d9      	lsrs	r1, r3, #3
 8000d24:	460b      	mov	r3, r1
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	440b      	add	r3, r1
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	789b      	ldrb	r3, [r3, #2]
 8000d38:	2b0a      	cmp	r3, #10
 8000d3a:	d114      	bne.n	8000d66 <rbpush+0x7a>
        /* overwriting data: also move head forward */
        buffer->head++;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	785b      	ldrb	r3, [r3, #1]
 8000d40:	3301      	adds	r3, #1
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	785a      	ldrb	r2, [r3, #1]
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <rbpush+0x94>)
 8000d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d52:	08d9      	lsrs	r1, r3, #3
 8000d54:	460b      	mov	r3, r1
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	440b      	add	r3, r1
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	705a      	strb	r2, [r3, #1]
 8000d64:	e005      	b.n	8000d72 <rbpush+0x86>
    }else{
        buffer->length++;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	789b      	ldrb	r3, [r3, #2]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	cccccccd 	.word	0xcccccccd

08000d84 <rbclear>:
- ringbuffer_t *buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8000d90:	2300      	movs	r3, #0
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e00d      	b.n	8000db2 <rbclear+0x2e>
        buffer->buffer[i] = 0;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	18d1      	adds	r1, r2, r3
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < RBUF_SZ; i++){
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	3301      	adds	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	2b09      	cmp	r3, #9
 8000db6:	d9ee      	bls.n	8000d96 <rbclear+0x12>
    }
    buffer->length = 0;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e16:	2007      	movs	r0, #7
 8000e18:	f000 fb14 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a39      	ldr	r2, [pc, #228]	; (8000f2c <HAL_UART_MspInit+0x104>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d16b      	bne.n	8000f22 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <HAL_UART_MspInit+0x108>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a37      	ldr	r2, [pc, #220]	; (8000f30 <HAL_UART_MspInit+0x108>)
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <HAL_UART_MspInit+0x108>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <HAL_UART_MspInit+0x108>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a30      	ldr	r2, [pc, #192]	; (8000f30 <HAL_UART_MspInit+0x108>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <HAL_UART_MspInit+0x108>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e82:	230c      	movs	r3, #12
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e92:	2307      	movs	r3, #7
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4825      	ldr	r0, [pc, #148]	; (8000f34 <HAL_UART_MspInit+0x10c>)
 8000e9e:	f000 ff15 	bl	8001ccc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000ea4:	4a25      	ldr	r2, [pc, #148]	; (8000f3c <HAL_UART_MspInit+0x114>)
 8000ea6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000ed8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000edc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ef6:	4810      	ldr	r0, [pc, #64]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000ef8:	f000 fae6 	bl	80014c8 <HAL_DMA_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000f02:	f7ff feed 	bl	8000ce0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000f0a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_UART_MspInit+0x110>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2026      	movs	r0, #38	; 0x26
 8000f18:	f000 fa9f 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f1c:	2026      	movs	r0, #38	; 0x26
 8000f1e:	f000 fab8 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	20000624 	.word	0x20000624
 8000f3c:	40026088 	.word	0x40026088

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f96a 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <DMA1_Stream5_IRQHandler+0x10>)
 8000f9a:	f000 fc2d 	bl	80017f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000624 	.word	0x20000624

08000fa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <USART2_IRQHandler+0x10>)
 8000fae:	f001 fd41 	bl	8002a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200005e0 	.word	0x200005e0

08000fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	return 1;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_kill>:

int _kill(int pid, int sig)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fd6:	f002 fdb5 	bl	8003b44 <__errno>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2216      	movs	r2, #22
 8000fde:	601a      	str	r2, [r3, #0]
	return -1;
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_exit>:

void _exit (int status)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffe7 	bl	8000fcc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ffe:	e7fe      	b.n	8000ffe <_exit+0x12>

08001000 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	e00a      	b.n	8001028 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001012:	f3af 8000 	nop.w
 8001016:	4601      	mov	r1, r0
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	60ba      	str	r2, [r7, #8]
 800101e:	b2ca      	uxtb	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbf0      	blt.n	8001012 <_read+0x12>
	}

return len;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e009      	b.n	8001060 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	60ba      	str	r2, [r7, #8]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	dbf1      	blt.n	800104c <_write+0x12>
	}
	return len;
 8001068:	687b      	ldr	r3, [r7, #4]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_close>:

int _close(int file)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	return -1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800109a:	605a      	str	r2, [r3, #4]
	return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_isatty>:

int _isatty(int file)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	return 1;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
	return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	; (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f002 fd1a 	bl	8003b44 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20020000 	.word	0x20020000
 800113c:	00000400 	.word	0x00000400
 8001140:	20000684 	.word	0x20000684
 8001144:	200006a0 	.word	0x200006a0

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001188:	4c0b      	ldr	r4, [pc, #44]	; (80011b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001196:	f7ff ffd7 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f002 fcd9 	bl	8003b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff fc61 	bl	8000a64 <main>
  bx  lr    
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011b0:	0800516c 	.word	0x0800516c
  ldr r2, =_sbss
 80011b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011b8:	2000069c 	.word	0x2000069c

080011bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_Init+0x40>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_Init+0x40>)
 80011d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x40>)
 80011e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f92b 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fdf0 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f943 	bl	80014ae <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f90b 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000000 	.word	0x20000000
 800125c:	20000008 	.word	0x20000008
 8001260:	20000004 	.word	0x20000004

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008
 8001288:	20000688 	.word	0x20000688

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000688 	.word	0x20000688

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff29 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff3e 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff8e 	bl	8001398 <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5d 	bl	8001344 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff31 	bl	8001308 <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa2 	bl	8001400 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff feda 	bl	800128c <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e099      	b.n	8001618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2202      	movs	r2, #2
 80014e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001504:	e00f      	b.n	8001526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001506:	f7ff fec1 	bl	800128c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b05      	cmp	r3, #5
 8001512:	d908      	bls.n	8001526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2220      	movs	r2, #32
 8001518:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2203      	movs	r2, #3
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e078      	b.n	8001618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1e8      	bne.n	8001506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	4b38      	ldr	r3, [pc, #224]	; (8001620 <HAL_DMA_Init+0x158>)
 8001540:	4013      	ands	r3, r2
 8001542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800156a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4313      	orrs	r3, r2
 8001576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	2b04      	cmp	r3, #4
 800157e:	d107      	bne.n	8001590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4313      	orrs	r3, r2
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	4313      	orrs	r3, r2
 800158e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f023 0307 	bic.w	r3, r3, #7
 80015a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d117      	bne.n	80015ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00e      	beq.n	80015ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fb01 	bl	8001bd4 <DMA_CheckFifoParam>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d008      	beq.n	80015ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2240      	movs	r2, #64	; 0x40
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015e6:	2301      	movs	r3, #1
 80015e8:	e016      	b.n	8001618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fab8 	bl	8001b68 <DMA_CalcBaseAndBitshift>
 80015f8:	4603      	mov	r3, r0
 80015fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001600:	223f      	movs	r2, #63	; 0x3f
 8001602:	409a      	lsls	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	f010803f 	.word	0xf010803f

08001624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_DMA_Start_IT+0x26>
 8001646:	2302      	movs	r3, #2
 8001648:	e040      	b.n	80016cc <HAL_DMA_Start_IT+0xa8>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d12f      	bne.n	80016be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2202      	movs	r2, #2
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fa4a 	bl	8001b0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167c:	223f      	movs	r2, #63	; 0x3f
 800167e:	409a      	lsls	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0216 	orr.w	r2, r2, #22
 8001692:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0208 	orr.w	r2, r2, #8
 80016aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e005      	b.n	80016ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016c6:	2302      	movs	r3, #2
 80016c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016e2:	f7ff fdd3 	bl	800128c <HAL_GetTick>
 80016e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d008      	beq.n	8001706 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e052      	b.n	80017ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0216 	bic.w	r2, r2, #22
 8001714:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001724:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d103      	bne.n	8001736 <HAL_DMA_Abort+0x62>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0208 	bic.w	r2, r2, #8
 8001744:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001756:	e013      	b.n	8001780 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001758:	f7ff fd98 	bl	800128c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b05      	cmp	r3, #5
 8001764:	d90c      	bls.n	8001780 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2220      	movs	r2, #32
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2203      	movs	r2, #3
 8001770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e015      	b.n	80017ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1e4      	bne.n	8001758 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001792:	223f      	movs	r2, #63	; 0x3f
 8001794:	409a      	lsls	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d004      	beq.n	80017d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00c      	b.n	80017ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2205      	movs	r2, #5
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001804:	4b8e      	ldr	r3, [pc, #568]	; (8001a40 <HAL_DMA_IRQHandler+0x248>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a8e      	ldr	r2, [pc, #568]	; (8001a44 <HAL_DMA_IRQHandler+0x24c>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0a9b      	lsrs	r3, r3, #10
 8001810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001822:	2208      	movs	r2, #8
 8001824:	409a      	lsls	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4013      	ands	r3, r2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d01a      	beq.n	8001864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d013      	beq.n	8001864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0204 	bic.w	r2, r2, #4
 800184a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001850:	2208      	movs	r2, #8
 8001852:	409a      	lsls	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001868:	2201      	movs	r2, #1
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d012      	beq.n	800189a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00b      	beq.n	800189a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	2201      	movs	r2, #1
 8001888:	409a      	lsls	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	f043 0202 	orr.w	r2, r3, #2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189e:	2204      	movs	r2, #4
 80018a0:	409a      	lsls	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d012      	beq.n	80018d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00b      	beq.n	80018d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	2204      	movs	r2, #4
 80018be:	409a      	lsls	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c8:	f043 0204 	orr.w	r2, r3, #4
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d4:	2210      	movs	r2, #16
 80018d6:	409a      	lsls	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d043      	beq.n	8001968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d03c      	beq.n	8001968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f2:	2210      	movs	r2, #16
 80018f4:	409a      	lsls	r2, r3
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d018      	beq.n	800193a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d108      	bne.n	8001928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	2b00      	cmp	r3, #0
 800191c:	d024      	beq.n	8001968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	4798      	blx	r3
 8001926:	e01f      	b.n	8001968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192c:	2b00      	cmp	r3, #0
 800192e:	d01b      	beq.n	8001968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
 8001938:	e016      	b.n	8001968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d107      	bne.n	8001958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0208 	bic.w	r2, r2, #8
 8001956:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	2220      	movs	r2, #32
 800196e:	409a      	lsls	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 808f 	beq.w	8001a98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8087 	beq.w	8001a98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	2220      	movs	r2, #32
 8001990:	409a      	lsls	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d136      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0216 	bic.w	r2, r2, #22
 80019b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695a      	ldr	r2, [r3, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <HAL_DMA_IRQHandler+0x1da>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0208 	bic.w	r2, r2, #8
 80019e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e6:	223f      	movs	r2, #63	; 0x3f
 80019e8:	409a      	lsls	r2, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d07e      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	4798      	blx	r3
        }
        return;
 8001a0e:	e079      	b.n	8001b04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d01d      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10d      	bne.n	8001a48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d031      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4798      	blx	r3
 8001a3c:	e02c      	b.n	8001a98 <HAL_DMA_IRQHandler+0x2a0>
 8001a3e:	bf00      	nop
 8001a40:	20000000 	.word	0x20000000
 8001a44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d023      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4798      	blx	r3
 8001a58:	e01e      	b.n	8001a98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10f      	bne.n	8001a88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0210 	bic.w	r2, r2, #16
 8001a76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d032      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d022      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2205      	movs	r2, #5
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d307      	bcc.n	8001ae0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f2      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x2cc>
 8001ade:	e000      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ae0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
 8001b02:	e000      	b.n	8001b06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b04:	bf00      	nop
    }
  }
}
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b40      	cmp	r3, #64	; 0x40
 8001b38:	d108      	bne.n	8001b4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b4a:	e007      	b.n	8001b5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	60da      	str	r2, [r3, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	3b10      	subs	r3, #16
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <DMA_CalcBaseAndBitshift+0x64>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b82:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d909      	bls.n	8001baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b9e:	f023 0303 	bic.w	r3, r3, #3
 8001ba2:	1d1a      	adds	r2, r3, #4
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ba8:	e007      	b.n	8001bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bb2:	f023 0303 	bic.w	r3, r3, #3
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	aaaaaaab 	.word	0xaaaaaaab
 8001bd0:	08004f0c 	.word	0x08004f0c

08001bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d11f      	bne.n	8001c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d856      	bhi.n	8001ca2 <DMA_CheckFifoParam+0xce>
 8001bf4:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <DMA_CheckFifoParam+0x28>)
 8001bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfa:	bf00      	nop
 8001bfc:	08001c0d 	.word	0x08001c0d
 8001c00:	08001c1f 	.word	0x08001c1f
 8001c04:	08001c0d 	.word	0x08001c0d
 8001c08:	08001ca3 	.word	0x08001ca3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d046      	beq.n	8001ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c1c:	e043      	b.n	8001ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c26:	d140      	bne.n	8001caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c2c:	e03d      	b.n	8001caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c36:	d121      	bne.n	8001c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d837      	bhi.n	8001cae <DMA_CheckFifoParam+0xda>
 8001c3e:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <DMA_CheckFifoParam+0x70>)
 8001c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c44:	08001c55 	.word	0x08001c55
 8001c48:	08001c5b 	.word	0x08001c5b
 8001c4c:	08001c55 	.word	0x08001c55
 8001c50:	08001c6d 	.word	0x08001c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
      break;
 8001c58:	e030      	b.n	8001cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d025      	beq.n	8001cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c6a:	e022      	b.n	8001cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c74:	d11f      	bne.n	8001cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c7a:	e01c      	b.n	8001cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d903      	bls.n	8001c8a <DMA_CheckFifoParam+0xb6>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d003      	beq.n	8001c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c88:	e018      	b.n	8001cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c8e:	e015      	b.n	8001cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00e      	beq.n	8001cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca0:	e00b      	b.n	8001cba <DMA_CheckFifoParam+0xe6>
      break;
 8001ca2:	bf00      	nop
 8001ca4:	e00a      	b.n	8001cbc <DMA_CheckFifoParam+0xe8>
      break;
 8001ca6:	bf00      	nop
 8001ca8:	e008      	b.n	8001cbc <DMA_CheckFifoParam+0xe8>
      break;
 8001caa:	bf00      	nop
 8001cac:	e006      	b.n	8001cbc <DMA_CheckFifoParam+0xe8>
      break;
 8001cae:	bf00      	nop
 8001cb0:	e004      	b.n	8001cbc <DMA_CheckFifoParam+0xe8>
      break;
 8001cb2:	bf00      	nop
 8001cb4:	e002      	b.n	8001cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8001cb6:	bf00      	nop
 8001cb8:	e000      	b.n	8001cbc <DMA_CheckFifoParam+0xe8>
      break;
 8001cba:	bf00      	nop
    }
  } 
  
  return status; 
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e159      	b.n	8001f9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8148 	bne.w	8001f96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80a2 	beq.w	8001f96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b57      	ldr	r3, [pc, #348]	; (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a56      	ldr	r2, [pc, #344]	; (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b54      	ldr	r3, [pc, #336]	; (8001fb4 <HAL_GPIO_Init+0x2e8>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a52      	ldr	r2, [pc, #328]	; (8001fb8 <HAL_GPIO_Init+0x2ec>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a49      	ldr	r2, [pc, #292]	; (8001fbc <HAL_GPIO_Init+0x2f0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x202>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a48      	ldr	r2, [pc, #288]	; (8001fc0 <HAL_GPIO_Init+0x2f4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x1fe>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a47      	ldr	r2, [pc, #284]	; (8001fc4 <HAL_GPIO_Init+0x2f8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x1fa>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a46      	ldr	r2, [pc, #280]	; (8001fc8 <HAL_GPIO_Init+0x2fc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x1f6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a45      	ldr	r2, [pc, #276]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x1f2>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e008      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e004      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	f002 0203 	and.w	r2, r2, #3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee0:	4935      	ldr	r1, [pc, #212]	; (8001fb8 <HAL_GPIO_Init+0x2ec>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f12:	4a2f      	ldr	r2, [pc, #188]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f3c:	4a24      	ldr	r2, [pc, #144]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f42:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f66:	4a1a      	ldr	r2, [pc, #104]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f90:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	f67f aea2 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40013800 	.word	0x40013800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40020c00 	.word	0x40020c00
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40013c00 	.word	0x40013c00

08001fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe4:	787b      	ldrb	r3, [r7, #1]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ff0:	e003      	b.n	8001ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ff2:	887b      	ldrh	r3, [r7, #2]
 8001ff4:	041a      	lsls	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	619a      	str	r2, [r3, #24]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e267      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d075      	beq.n	8002112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002026:	4b88      	ldr	r3, [pc, #544]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b04      	cmp	r3, #4
 8002030:	d00c      	beq.n	800204c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002032:	4b85      	ldr	r3, [pc, #532]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203a:	2b08      	cmp	r3, #8
 800203c:	d112      	bne.n	8002064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800203e:	4b82      	ldr	r3, [pc, #520]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800204a:	d10b      	bne.n	8002064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	4b7e      	ldr	r3, [pc, #504]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d05b      	beq.n	8002110 <HAL_RCC_OscConfig+0x108>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d157      	bne.n	8002110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e242      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d106      	bne.n	800207c <HAL_RCC_OscConfig+0x74>
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a75      	ldr	r2, [pc, #468]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e01d      	b.n	80020b8 <HAL_RCC_OscConfig+0xb0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x98>
 8002086:	4b70      	ldr	r3, [pc, #448]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a6f      	ldr	r2, [pc, #444]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b6d      	ldr	r3, [pc, #436]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6c      	ldr	r2, [pc, #432]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0xb0>
 80020a0:	4b69      	ldr	r3, [pc, #420]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a68      	ldr	r2, [pc, #416]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a65      	ldr	r2, [pc, #404]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7ff f8e4 	bl	800128c <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c8:	f7ff f8e0 	bl	800128c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e207      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b5b      	ldr	r3, [pc, #364]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0xc0>
 80020e6:	e014      	b.n	8002112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f8d0 	bl	800128c <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f0:	f7ff f8cc 	bl	800128c <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1f3      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	4b51      	ldr	r3, [pc, #324]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0xe8>
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d063      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800211e:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002132:	2b08      	cmp	r3, #8
 8002134:	d11c      	bne.n	8002170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002136:	4b44      	ldr	r3, [pc, #272]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d116      	bne.n	8002170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_RCC_OscConfig+0x152>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d001      	beq.n	800215a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e1c7      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	e03a      	b.n	80021e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002178:	4b34      	ldr	r3, [pc, #208]	; (800224c <HAL_RCC_OscConfig+0x244>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7ff f885 	bl	800128c <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002186:	f7ff f881 	bl	800128c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e1a8      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4925      	ldr	r1, [pc, #148]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
 80021b8:	e015      	b.n	80021e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCC_OscConfig+0x244>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7ff f864 	bl	800128c <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c8:	f7ff f860 	bl	800128c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e187      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d036      	beq.n	8002260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d016      	beq.n	8002228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_RCC_OscConfig+0x248>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7ff f844 	bl	800128c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002208:	f7ff f840 	bl	800128c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e167      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800221c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x200>
 8002226:	e01b      	b.n	8002260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_OscConfig+0x248>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7ff f82d 	bl	800128c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	e00e      	b.n	8002254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002236:	f7ff f829 	bl	800128c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d907      	bls.n	8002254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e150      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
 8002248:	40023800 	.word	0x40023800
 800224c:	42470000 	.word	0x42470000
 8002250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	4b88      	ldr	r3, [pc, #544]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ea      	bne.n	8002236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8097 	beq.w	800239c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002272:	4b81      	ldr	r3, [pc, #516]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10f      	bne.n	800229e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	4b7d      	ldr	r3, [pc, #500]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a7c      	ldr	r2, [pc, #496]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b7a      	ldr	r3, [pc, #488]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	4b77      	ldr	r3, [pc, #476]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d118      	bne.n	80022dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022aa:	4b74      	ldr	r3, [pc, #464]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a73      	ldr	r2, [pc, #460]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b6:	f7fe ffe9 	bl	800128c <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022be:	f7fe ffe5 	bl	800128c <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e10c      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	4b6a      	ldr	r3, [pc, #424]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x2ea>
 80022e4:	4b64      	ldr	r3, [pc, #400]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4a63      	ldr	r2, [pc, #396]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70
 80022f0:	e01c      	b.n	800232c <HAL_RCC_OscConfig+0x324>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x30c>
 80022fa:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a5b      	ldr	r2, [pc, #364]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0x324>
 8002314:	4b58      	ldr	r3, [pc, #352]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a57      	ldr	r2, [pc, #348]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	4b55      	ldr	r3, [pc, #340]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a54      	ldr	r2, [pc, #336]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002326:	f023 0304 	bic.w	r3, r3, #4
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe ffaa 	bl	800128c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe ffa6 	bl	800128c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0cb      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ee      	beq.n	800233c <HAL_RCC_OscConfig+0x334>
 800235e:	e014      	b.n	800238a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002360:	f7fe ff94 	bl	800128c <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002366:	e00a      	b.n	800237e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7fe ff90 	bl	800128c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e0b5      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237e:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ee      	bne.n	8002368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	4a38      	ldr	r2, [pc, #224]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a1 	beq.w	80024e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a6:	4b34      	ldr	r3, [pc, #208]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d05c      	beq.n	800246c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d141      	bne.n	800243e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b31      	ldr	r3, [pc, #196]	; (8002480 <HAL_RCC_OscConfig+0x478>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe ff64 	bl	800128c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe ff60 	bl	800128c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e087      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	4b27      	ldr	r3, [pc, #156]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	3b01      	subs	r3, #1
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	491b      	ldr	r1, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_RCC_OscConfig+0x478>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe ff39 	bl	800128c <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe ff35 	bl	800128c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e05c      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x416>
 800243c:	e054      	b.n	80024e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_RCC_OscConfig+0x478>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe ff22 	bl	800128c <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe ff1e 	bl	800128c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e045      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x444>
 800246a:	e03d      	b.n	80024e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e038      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000
 8002480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x4ec>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d028      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d121      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d11a      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024bc:	4293      	cmp	r3, r2
 80024be:	d111      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	3b01      	subs	r3, #1
 80024ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0cc      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4b68      	ldr	r3, [pc, #416]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d90c      	bls.n	8002534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b65      	ldr	r3, [pc, #404]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b8      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800254c:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002564:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a52      	ldr	r2, [pc, #328]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800256e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	494d      	ldr	r1, [pc, #308]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d044      	beq.n	8002618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d119      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e07f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b6:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e067      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f023 0203 	bic.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4934      	ldr	r1, [pc, #208]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e8:	f7fe fe50 	bl	800128c <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7fe fe4c 	bl	800128c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e04f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 020c 	and.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d1eb      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d20c      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e032      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4916      	ldr	r1, [pc, #88]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	490e      	ldr	r1, [pc, #56]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800267e:	f000 f821 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	490a      	ldr	r1, [pc, #40]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	5ccb      	ldrb	r3, [r1, r3]
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fdb0 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00
 80026b4:	40023800 	.word	0x40023800
 80026b8:	08004ef4 	.word	0x08004ef4
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c8:	b094      	sub	sp, #80	; 0x50
 80026ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
 80026d0:	2300      	movs	r3, #0
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d4:	2300      	movs	r3, #0
 80026d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026dc:	4b79      	ldr	r3, [pc, #484]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d00d      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x40>
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	f200 80e1 	bhi.w	80028b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x34>
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x3a>
 80026f6:	e0db      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f8:	4b73      	ldr	r3, [pc, #460]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026fc:	e0db      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026fe:	4b73      	ldr	r3, [pc, #460]	; (80028cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002702:	e0d8      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002704:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800270c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800270e:	4b6d      	ldr	r3, [pc, #436]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d063      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271a:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	099b      	lsrs	r3, r3, #6
 8002720:	2200      	movs	r2, #0
 8002722:	63bb      	str	r3, [r7, #56]	; 0x38
 8002724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
 800272e:	2300      	movs	r3, #0
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
 8002732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002736:	4622      	mov	r2, r4
 8002738:	462b      	mov	r3, r5
 800273a:	f04f 0000 	mov.w	r0, #0
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	0159      	lsls	r1, r3, #5
 8002744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002748:	0150      	lsls	r0, r2, #5
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4621      	mov	r1, r4
 8002750:	1a51      	subs	r1, r2, r1
 8002752:	6139      	str	r1, [r7, #16]
 8002754:	4629      	mov	r1, r5
 8002756:	eb63 0301 	sbc.w	r3, r3, r1
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002768:	4659      	mov	r1, fp
 800276a:	018b      	lsls	r3, r1, #6
 800276c:	4651      	mov	r1, sl
 800276e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002772:	4651      	mov	r1, sl
 8002774:	018a      	lsls	r2, r1, #6
 8002776:	4651      	mov	r1, sl
 8002778:	ebb2 0801 	subs.w	r8, r2, r1
 800277c:	4659      	mov	r1, fp
 800277e:	eb63 0901 	sbc.w	r9, r3, r1
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002796:	4690      	mov	r8, r2
 8002798:	4699      	mov	r9, r3
 800279a:	4623      	mov	r3, r4
 800279c:	eb18 0303 	adds.w	r3, r8, r3
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	462b      	mov	r3, r5
 80027a4:	eb49 0303 	adc.w	r3, r9, r3
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027b6:	4629      	mov	r1, r5
 80027b8:	024b      	lsls	r3, r1, #9
 80027ba:	4621      	mov	r1, r4
 80027bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027c0:	4621      	mov	r1, r4
 80027c2:	024a      	lsls	r2, r1, #9
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ca:	2200      	movs	r2, #0
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027d4:	f7fd ff20 	bl	8000618 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027e0:	e058      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	2200      	movs	r2, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	4611      	mov	r1, r2
 80027ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027f2:	623b      	str	r3, [r7, #32]
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
 80027f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027fc:	4642      	mov	r2, r8
 80027fe:	464b      	mov	r3, r9
 8002800:	f04f 0000 	mov.w	r0, #0
 8002804:	f04f 0100 	mov.w	r1, #0
 8002808:	0159      	lsls	r1, r3, #5
 800280a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800280e:	0150      	lsls	r0, r2, #5
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4641      	mov	r1, r8
 8002816:	ebb2 0a01 	subs.w	sl, r2, r1
 800281a:	4649      	mov	r1, r9
 800281c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800282c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002834:	ebb2 040a 	subs.w	r4, r2, sl
 8002838:	eb63 050b 	sbc.w	r5, r3, fp
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	00eb      	lsls	r3, r5, #3
 8002846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284a:	00e2      	lsls	r2, r4, #3
 800284c:	4614      	mov	r4, r2
 800284e:	461d      	mov	r5, r3
 8002850:	4643      	mov	r3, r8
 8002852:	18e3      	adds	r3, r4, r3
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	464b      	mov	r3, r9
 8002858:	eb45 0303 	adc.w	r3, r5, r3
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286a:	4629      	mov	r1, r5
 800286c:	028b      	lsls	r3, r1, #10
 800286e:	4621      	mov	r1, r4
 8002870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002874:	4621      	mov	r1, r4
 8002876:	028a      	lsls	r2, r1, #10
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800287e:	2200      	movs	r2, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	61fa      	str	r2, [r7, #28]
 8002884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002888:	f7fd fec6 	bl	8000618 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4613      	mov	r3, r2
 8002892:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	3301      	adds	r3, #1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ae:	e002      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3750      	adds	r7, #80	; 0x50
 80028bc:	46bd      	mov	sp, r7
 80028be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	00f42400 	.word	0x00f42400
 80028cc:	007a1200 	.word	0x007a1200

080028d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000000 	.word	0x20000000

080028e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028ec:	f7ff fff0 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	0a9b      	lsrs	r3, r3, #10
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4903      	ldr	r1, [pc, #12]	; (800290c <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	08004f04 	.word	0x08004f04

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002914:	f7ff ffdc 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0b5b      	lsrs	r3, r3, #13
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	08004f04 	.word	0x08004f04

08002938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e03f      	b.n	80029ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fa62 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2224      	movs	r2, #36	; 0x24
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800297a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fe69 	bl	8003654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	4613      	mov	r3, r2
 80029de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d11d      	bne.n	8002a28 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_UART_Receive_DMA+0x26>
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e016      	b.n	8002a2a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Receive_DMA+0x38>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e00f      	b.n	8002a2a <HAL_UART_Receive_DMA+0x58>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fbb8 	bl	8003194 <UART_Start_Receive_DMA>
 8002a24:	4603      	mov	r3, r0
 8002a26:	e000      	b.n	8002a2a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b0ba      	sub	sp, #232	; 0xe8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10f      	bne.n	8002a9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_UART_IRQHandler+0x66>
 8002a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fd23 	bl	80034de <UART_Receive_IT>
      return;
 8002a98:	e256      	b.n	8002f48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80de 	beq.w	8002c60 <HAL_UART_IRQHandler+0x22c>
 8002aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80d1 	beq.w	8002c60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_UART_IRQHandler+0xae>
 8002aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_UART_IRQHandler+0xd2>
 8002aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f043 0202 	orr.w	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_UART_IRQHandler+0xf6>
 8002b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f043 0204 	orr.w	r2, r3, #4
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d011      	beq.n	8002b5a <HAL_UART_IRQHandler+0x126>
 8002b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f043 0208 	orr.w	r2, r3, #8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 81ed 	beq.w	8002f3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_UART_IRQHandler+0x14e>
 8002b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fcae 	bl	80034de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b40      	cmp	r3, #64	; 0x40
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d103      	bne.n	8002bae <HAL_UART_IRQHandler+0x17a>
 8002ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d04f      	beq.n	8002c4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fbb6 	bl	8003320 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d141      	bne.n	8002c46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3314      	adds	r3, #20
 8002bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3314      	adds	r3, #20
 8002bea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1d9      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d013      	beq.n	8002c3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	4a7d      	ldr	r2, [pc, #500]	; (8002e10 <HAL_UART_IRQHandler+0x3dc>)
 8002c1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fdc6 	bl	80017b4 <HAL_DMA_Abort_IT>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d016      	beq.n	8002c5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	e00e      	b.n	8002c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f99a 	bl	8002f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c44:	e00a      	b.n	8002c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f996 	bl	8002f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	e006      	b.n	8002c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f992 	bl	8002f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c5a:	e170      	b.n	8002f3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	bf00      	nop
    return;
 8002c5e:	e16e      	b.n	8002f3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	f040 814a 	bne.w	8002efe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 8143 	beq.w	8002efe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 813c 	beq.w	8002efe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	f040 80b4 	bne.w	8002e14 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8140 	beq.w	8002f42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	f080 8139 	bcs.w	8002f42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cd6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce2:	f000 8088 	beq.w	8002df6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	330c      	adds	r3, #12
 8002cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d22:	e841 2300 	strex	r3, r2, [r1]
 8002d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1d9      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3314      	adds	r3, #20
 8002d38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3314      	adds	r3, #20
 8002d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e1      	bne.n	8002d32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3314      	adds	r3, #20
 8002d74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d78:	e853 3f00 	ldrex	r3, [r3]
 8002d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e3      	bne.n	8002d6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbe:	e853 3f00 	ldrex	r3, [r3]
 8002dc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc6:	f023 0310 	bic.w	r3, r3, #16
 8002dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	330c      	adds	r3, #12
 8002dd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002dd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002de0:	e841 2300 	strex	r3, r2, [r1]
 8002de4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e3      	bne.n	8002db4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe fc6f 	bl	80016d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8c0 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e0c:	e099      	b.n	8002f42 <HAL_UART_IRQHandler+0x50e>
 8002e0e:	bf00      	nop
 8002e10:	080033e7 	.word	0x080033e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 808b 	beq.w	8002f46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8086 	beq.w	8002f46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e44:	e853 3f00 	ldrex	r3, [r3]
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e5e:	647a      	str	r2, [r7, #68]	; 0x44
 8002e60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e3      	bne.n	8002e3a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3314      	adds	r3, #20
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	623b      	str	r3, [r7, #32]
   return(result);
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3314      	adds	r3, #20
 8002e92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e96:	633a      	str	r2, [r7, #48]	; 0x30
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e9e:	e841 2300 	strex	r3, r2, [r1]
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e3      	bne.n	8002e72 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0310 	bic.w	r3, r3, #16
 8002ece:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002edc:	61fa      	str	r2, [r7, #28]
 8002ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	69b9      	ldr	r1, [r7, #24]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e3      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f848 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002efc:	e023      	b.n	8002f46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_UART_IRQHandler+0x4ea>
 8002f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa79 	bl	800340e <UART_Transmit_IT>
    return;
 8002f1c:	e014      	b.n	8002f48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00e      	beq.n	8002f48 <HAL_UART_IRQHandler+0x514>
 8002f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fab9 	bl	80034ae <UART_EndTransmit_IT>
    return;
 8002f3c:	e004      	b.n	8002f48 <HAL_UART_IRQHandler+0x514>
    return;
 8002f3e:	bf00      	nop
 8002f40:	e002      	b.n	8002f48 <HAL_UART_IRQHandler+0x514>
      return;
 8002f42:	bf00      	nop
 8002f44:	e000      	b.n	8002f48 <HAL_UART_IRQHandler+0x514>
      return;
 8002f46:	bf00      	nop
  }
}
 8002f48:	37e8      	adds	r7, #232	; 0xe8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop

08002f50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b09c      	sub	sp, #112	; 0x70
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d172      	bne.n	80030a6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	330c      	adds	r3, #12
 8002fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fe6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fe8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e5      	bne.n	8002fc6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3314      	adds	r3, #20
 8003000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	667b      	str	r3, [r7, #100]	; 0x64
 8003012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3314      	adds	r3, #20
 8003018:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800301a:	647a      	str	r2, [r7, #68]	; 0x44
 800301c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003022:	e841 2300 	strex	r3, r2, [r1]
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e5      	bne.n	8002ffa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3314      	adds	r3, #20
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	623b      	str	r3, [r7, #32]
   return(result);
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003044:	663b      	str	r3, [r7, #96]	; 0x60
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3314      	adds	r3, #20
 800304c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800304e:	633a      	str	r2, [r7, #48]	; 0x30
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e5      	bne.n	800302e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800306a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	2b01      	cmp	r3, #1
 8003070:	d119      	bne.n	80030a6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	330c      	adds	r3, #12
 8003078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	e853 3f00 	ldrex	r3, [r3]
 8003080:	60fb      	str	r3, [r7, #12]
   return(result);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f023 0310 	bic.w	r3, r3, #16
 8003088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003092:	61fa      	str	r2, [r7, #28]
 8003094:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	e841 2300 	strex	r3, r2, [r1]
 800309e:	617b      	str	r3, [r7, #20]
   return(result);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1e5      	bne.n	8003072 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d106      	bne.n	80030bc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030b2:	4619      	mov	r1, r3
 80030b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80030b6:	f7ff ff69 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030ba:	e002      	b.n	80030c2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80030bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80030be:	f7fd fc2d 	bl	800091c <HAL_UART_RxCpltCallback>
}
 80030c2:	bf00      	nop
 80030c4:	3770      	adds	r7, #112	; 0x70
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d108      	bne.n	80030f2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	4619      	mov	r1, r3
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff ff4e 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030f0:	e002      	b.n	80030f8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff ff36 	bl	8002f64 <HAL_UART_RxHalfCpltCallback>
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b80      	cmp	r3, #128	; 0x80
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b21      	cmp	r3, #33	; 0x21
 8003132:	d108      	bne.n	8003146 <UART_DMAError+0x46>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2200      	movs	r2, #0
 800313e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003140:	68b8      	ldr	r0, [r7, #8]
 8003142:	f000 f8c5 	bl	80032d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b40      	cmp	r3, #64	; 0x40
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b22      	cmp	r3, #34	; 0x22
 8003166:	d108      	bne.n	800317a <UART_DMAError+0x7a>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2200      	movs	r2, #0
 8003172:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003174:	68b8      	ldr	r0, [r7, #8]
 8003176:	f000 f8d3 	bl	8003320 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f043 0210 	orr.w	r2, r3, #16
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003186:	68b8      	ldr	r0, [r7, #8]
 8003188:	f7ff fef6 	bl	8002f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b098      	sub	sp, #96	; 0x60
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	4613      	mov	r3, r2
 80031a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	88fa      	ldrh	r2, [r7, #6]
 80031ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2222      	movs	r2, #34	; 0x22
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	4a40      	ldr	r2, [pc, #256]	; (80032c4 <UART_Start_Receive_DMA+0x130>)
 80031c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	4a3f      	ldr	r2, [pc, #252]	; (80032c8 <UART_Start_Receive_DMA+0x134>)
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	4a3e      	ldr	r2, [pc, #248]	; (80032cc <UART_Start_Receive_DMA+0x138>)
 80031d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	2200      	movs	r2, #0
 80031da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	f7fe fa16 	bl	8001624 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d019      	beq.n	8003252 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330c      	adds	r3, #12
 8003224:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800322e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003234:	65bb      	str	r3, [r7, #88]	; 0x58
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	330c      	adds	r3, #12
 800323c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800323e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003240:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800324c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e5      	bne.n	800321e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3314      	adds	r3, #20
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	657b      	str	r3, [r7, #84]	; 0x54
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3314      	adds	r3, #20
 8003270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003272:	63ba      	str	r2, [r7, #56]	; 0x38
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800327a:	e841 2300 	strex	r3, r2, [r1]
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1e5      	bne.n	8003252 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	617b      	str	r3, [r7, #20]
   return(result);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800329c:	653b      	str	r3, [r7, #80]	; 0x50
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3314      	adds	r3, #20
 80032a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032a6:	627a      	str	r2, [r7, #36]	; 0x24
 80032a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6a39      	ldr	r1, [r7, #32]
 80032ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e5      	bne.n	8003286 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3760      	adds	r7, #96	; 0x60
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	08002fa5 	.word	0x08002fa5
 80032c8:	080030cb 	.word	0x080030cb
 80032cc:	08003101 	.word	0x08003101

080032d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	330c      	adds	r3, #12
 80032de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	e853 3f00 	ldrex	r3, [r3]
 80032e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	61ba      	str	r2, [r7, #24]
 80032fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6979      	ldr	r1, [r7, #20]
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	613b      	str	r3, [r7, #16]
   return(result);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e5      	bne.n	80032d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003314:	bf00      	nop
 8003316:	3724      	adds	r7, #36	; 0x24
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003320:	b480      	push	{r7}
 8003322:	b095      	sub	sp, #84	; 0x54
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800333e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003348:	643a      	str	r2, [r7, #64]	; 0x40
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800334e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e5      	bne.n	8003328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3314      	adds	r3, #20
 8003362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	61fb      	str	r3, [r7, #28]
   return(result);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3314      	adds	r3, #20
 800337a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800337c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e5      	bne.n	800335c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	2b01      	cmp	r3, #1
 8003396:	d119      	bne.n	80033cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f023 0310 	bic.w	r3, r3, #16
 80033ae:	647b      	str	r3, [r7, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033b8:	61ba      	str	r2, [r7, #24]
 80033ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6979      	ldr	r1, [r7, #20]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	613b      	str	r3, [r7, #16]
   return(result);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e5      	bne.n	8003398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033da:	bf00      	nop
 80033dc:	3754      	adds	r7, #84	; 0x54
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff fdb9 	bl	8002f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b21      	cmp	r3, #33	; 0x21
 8003420:	d13e      	bne.n	80034a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342a:	d114      	bne.n	8003456 <UART_Transmit_IT+0x48>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d110      	bne.n	8003456 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003448:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	1c9a      	adds	r2, r3, #2
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	621a      	str	r2, [r3, #32]
 8003454:	e008      	b.n	8003468 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6211      	str	r1, [r2, #32]
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29b      	uxth	r3, r3
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4619      	mov	r1, r3
 8003476:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10f      	bne.n	800349c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fd3e 	bl	8002f50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b08c      	sub	sp, #48	; 0x30
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b22      	cmp	r3, #34	; 0x22
 80034f0:	f040 80ab 	bne.w	800364a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fc:	d117      	bne.n	800352e <UART_Receive_IT+0x50>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351c:	b29a      	uxth	r2, r3
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	1c9a      	adds	r2, r3, #2
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
 800352c:	e026      	b.n	800357c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003534:	2300      	movs	r3, #0
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d007      	beq.n	8003552 <UART_Receive_IT+0x74>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <UART_Receive_IT+0x82>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e008      	b.n	8003572 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800356c:	b2da      	uxtb	r2, r3
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29b      	uxth	r3, r3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4619      	mov	r1, r3
 800358a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800358c:	2b00      	cmp	r3, #0
 800358e:	d15a      	bne.n	8003646 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0220 	bic.w	r2, r2, #32
 800359e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d135      	bne.n	800363c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	613b      	str	r3, [r7, #16]
   return(result);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f023 0310 	bic.w	r3, r3, #16
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	623a      	str	r2, [r7, #32]
 80035f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	69f9      	ldr	r1, [r7, #28]
 80035fc:	6a3a      	ldr	r2, [r7, #32]
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	61bb      	str	r3, [r7, #24]
   return(result);
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e5      	bne.n	80035d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b10      	cmp	r3, #16
 8003616:	d10a      	bne.n	800362e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003632:	4619      	mov	r1, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff fca9 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
 800363a:	e002      	b.n	8003642 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fd f96d 	bl	800091c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e002      	b.n	800364c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	e000      	b.n	800364c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800364a:	2302      	movs	r3, #2
  }
}
 800364c:	4618      	mov	r0, r3
 800364e:	3730      	adds	r7, #48	; 0x30
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003658:	b0c0      	sub	sp, #256	; 0x100
 800365a:	af00      	add	r7, sp, #0
 800365c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	68d9      	ldr	r1, [r3, #12]
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	ea40 0301 	orr.w	r3, r0, r1
 800367c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	431a      	orrs	r2, r3
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	431a      	orrs	r2, r3
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036ac:	f021 010c 	bic.w	r1, r1, #12
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036ba:	430b      	orrs	r3, r1
 80036bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ce:	6999      	ldr	r1, [r3, #24]
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	ea40 0301 	orr.w	r3, r0, r1
 80036da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b8f      	ldr	r3, [pc, #572]	; (8003920 <UART_SetConfig+0x2cc>)
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d005      	beq.n	80036f4 <UART_SetConfig+0xa0>
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4b8d      	ldr	r3, [pc, #564]	; (8003924 <UART_SetConfig+0x2d0>)
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d104      	bne.n	80036fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036f4:	f7ff f90c 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 80036f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036fc:	e003      	b.n	8003706 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036fe:	f7ff f8f3 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8003702:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003710:	f040 810c 	bne.w	800392c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003718:	2200      	movs	r2, #0
 800371a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800371e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003722:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003726:	4622      	mov	r2, r4
 8003728:	462b      	mov	r3, r5
 800372a:	1891      	adds	r1, r2, r2
 800372c:	65b9      	str	r1, [r7, #88]	; 0x58
 800372e:	415b      	adcs	r3, r3
 8003730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003732:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003736:	4621      	mov	r1, r4
 8003738:	eb12 0801 	adds.w	r8, r2, r1
 800373c:	4629      	mov	r1, r5
 800373e:	eb43 0901 	adc.w	r9, r3, r1
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003756:	4690      	mov	r8, r2
 8003758:	4699      	mov	r9, r3
 800375a:	4623      	mov	r3, r4
 800375c:	eb18 0303 	adds.w	r3, r8, r3
 8003760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003764:	462b      	mov	r3, r5
 8003766:	eb49 0303 	adc.w	r3, r9, r3
 800376a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800376e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800377a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800377e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003782:	460b      	mov	r3, r1
 8003784:	18db      	adds	r3, r3, r3
 8003786:	653b      	str	r3, [r7, #80]	; 0x50
 8003788:	4613      	mov	r3, r2
 800378a:	eb42 0303 	adc.w	r3, r2, r3
 800378e:	657b      	str	r3, [r7, #84]	; 0x54
 8003790:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003794:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003798:	f7fc ff3e 	bl	8000618 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4b61      	ldr	r3, [pc, #388]	; (8003928 <UART_SetConfig+0x2d4>)
 80037a2:	fba3 2302 	umull	r2, r3, r3, r2
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	011c      	lsls	r4, r3, #4
 80037aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037bc:	4642      	mov	r2, r8
 80037be:	464b      	mov	r3, r9
 80037c0:	1891      	adds	r1, r2, r2
 80037c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80037c4:	415b      	adcs	r3, r3
 80037c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037cc:	4641      	mov	r1, r8
 80037ce:	eb12 0a01 	adds.w	sl, r2, r1
 80037d2:	4649      	mov	r1, r9
 80037d4:	eb43 0b01 	adc.w	fp, r3, r1
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ec:	4692      	mov	sl, r2
 80037ee:	469b      	mov	fp, r3
 80037f0:	4643      	mov	r3, r8
 80037f2:	eb1a 0303 	adds.w	r3, sl, r3
 80037f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037fa:	464b      	mov	r3, r9
 80037fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003810:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003814:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003818:	460b      	mov	r3, r1
 800381a:	18db      	adds	r3, r3, r3
 800381c:	643b      	str	r3, [r7, #64]	; 0x40
 800381e:	4613      	mov	r3, r2
 8003820:	eb42 0303 	adc.w	r3, r2, r3
 8003824:	647b      	str	r3, [r7, #68]	; 0x44
 8003826:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800382a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800382e:	f7fc fef3 	bl	8000618 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4611      	mov	r1, r2
 8003838:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <UART_SetConfig+0x2d4>)
 800383a:	fba3 2301 	umull	r2, r3, r3, r1
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2264      	movs	r2, #100	; 0x64
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	1acb      	subs	r3, r1, r3
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <UART_SetConfig+0x2d4>)
 8003850:	fba3 2302 	umull	r2, r3, r3, r2
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800385c:	441c      	add	r4, r3
 800385e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003862:	2200      	movs	r2, #0
 8003864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003868:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800386c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003870:	4642      	mov	r2, r8
 8003872:	464b      	mov	r3, r9
 8003874:	1891      	adds	r1, r2, r2
 8003876:	63b9      	str	r1, [r7, #56]	; 0x38
 8003878:	415b      	adcs	r3, r3
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800387c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003880:	4641      	mov	r1, r8
 8003882:	1851      	adds	r1, r2, r1
 8003884:	6339      	str	r1, [r7, #48]	; 0x30
 8003886:	4649      	mov	r1, r9
 8003888:	414b      	adcs	r3, r1
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003898:	4659      	mov	r1, fp
 800389a:	00cb      	lsls	r3, r1, #3
 800389c:	4651      	mov	r1, sl
 800389e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a2:	4651      	mov	r1, sl
 80038a4:	00ca      	lsls	r2, r1, #3
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	4642      	mov	r2, r8
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038b4:	464b      	mov	r3, r9
 80038b6:	460a      	mov	r2, r1
 80038b8:	eb42 0303 	adc.w	r3, r2, r3
 80038bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038d4:	460b      	mov	r3, r1
 80038d6:	18db      	adds	r3, r3, r3
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038da:	4613      	mov	r3, r2
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038ea:	f7fc fe95 	bl	8000618 <__aeabi_uldivmod>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <UART_SetConfig+0x2d4>)
 80038f4:	fba3 1302 	umull	r1, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	2164      	movs	r1, #100	; 0x64
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	3332      	adds	r3, #50	; 0x32
 8003906:	4a08      	ldr	r2, [pc, #32]	; (8003928 <UART_SetConfig+0x2d4>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	f003 0207 	and.w	r2, r3, #7
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4422      	add	r2, r4
 800391a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800391c:	e105      	b.n	8003b2a <UART_SetConfig+0x4d6>
 800391e:	bf00      	nop
 8003920:	40011000 	.word	0x40011000
 8003924:	40011400 	.word	0x40011400
 8003928:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800392c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003930:	2200      	movs	r2, #0
 8003932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003936:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800393a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800393e:	4642      	mov	r2, r8
 8003940:	464b      	mov	r3, r9
 8003942:	1891      	adds	r1, r2, r2
 8003944:	6239      	str	r1, [r7, #32]
 8003946:	415b      	adcs	r3, r3
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800394e:	4641      	mov	r1, r8
 8003950:	1854      	adds	r4, r2, r1
 8003952:	4649      	mov	r1, r9
 8003954:	eb43 0501 	adc.w	r5, r3, r1
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	00eb      	lsls	r3, r5, #3
 8003962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003966:	00e2      	lsls	r2, r4, #3
 8003968:	4614      	mov	r4, r2
 800396a:	461d      	mov	r5, r3
 800396c:	4643      	mov	r3, r8
 800396e:	18e3      	adds	r3, r4, r3
 8003970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003974:	464b      	mov	r3, r9
 8003976:	eb45 0303 	adc.w	r3, r5, r3
 800397a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800398a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800399a:	4629      	mov	r1, r5
 800399c:	008b      	lsls	r3, r1, #2
 800399e:	4621      	mov	r1, r4
 80039a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039a4:	4621      	mov	r1, r4
 80039a6:	008a      	lsls	r2, r1, #2
 80039a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039ac:	f7fc fe34 	bl	8000618 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4b60      	ldr	r3, [pc, #384]	; (8003b38 <UART_SetConfig+0x4e4>)
 80039b6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	011c      	lsls	r4, r3, #4
 80039be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039d0:	4642      	mov	r2, r8
 80039d2:	464b      	mov	r3, r9
 80039d4:	1891      	adds	r1, r2, r2
 80039d6:	61b9      	str	r1, [r7, #24]
 80039d8:	415b      	adcs	r3, r3
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039e0:	4641      	mov	r1, r8
 80039e2:	1851      	adds	r1, r2, r1
 80039e4:	6139      	str	r1, [r7, #16]
 80039e6:	4649      	mov	r1, r9
 80039e8:	414b      	adcs	r3, r1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f8:	4659      	mov	r1, fp
 80039fa:	00cb      	lsls	r3, r1, #3
 80039fc:	4651      	mov	r1, sl
 80039fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a02:	4651      	mov	r1, sl
 8003a04:	00ca      	lsls	r2, r1, #3
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a14:	464b      	mov	r3, r9
 8003a16:	460a      	mov	r2, r1
 8003a18:	eb42 0303 	adc.w	r3, r2, r3
 8003a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a38:	4649      	mov	r1, r9
 8003a3a:	008b      	lsls	r3, r1, #2
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a42:	4641      	mov	r1, r8
 8003a44:	008a      	lsls	r2, r1, #2
 8003a46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a4a:	f7fc fde5 	bl	8000618 <__aeabi_uldivmod>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003a54:	fba3 1302 	umull	r1, r3, r3, r2
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	2164      	movs	r1, #100	; 0x64
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	3332      	adds	r3, #50	; 0x32
 8003a66:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a72:	441c      	add	r4, r3
 8003a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a78:	2200      	movs	r2, #0
 8003a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8003a7c:	677a      	str	r2, [r7, #116]	; 0x74
 8003a7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a82:	4642      	mov	r2, r8
 8003a84:	464b      	mov	r3, r9
 8003a86:	1891      	adds	r1, r2, r2
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	415b      	adcs	r3, r3
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a92:	4641      	mov	r1, r8
 8003a94:	1851      	adds	r1, r2, r1
 8003a96:	6039      	str	r1, [r7, #0]
 8003a98:	4649      	mov	r1, r9
 8003a9a:	414b      	adcs	r3, r1
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003aaa:	4659      	mov	r1, fp
 8003aac:	00cb      	lsls	r3, r1, #3
 8003aae:	4651      	mov	r1, sl
 8003ab0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	00ca      	lsls	r2, r1, #3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	4603      	mov	r3, r0
 8003abe:	4642      	mov	r2, r8
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	460a      	mov	r2, r1
 8003ac8:	eb42 0303 	adc.w	r3, r2, r3
 8003acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ad8:	667a      	str	r2, [r7, #100]	; 0x64
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	008b      	lsls	r3, r1, #2
 8003aea:	4641      	mov	r1, r8
 8003aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af0:	4641      	mov	r1, r8
 8003af2:	008a      	lsls	r2, r1, #2
 8003af4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003af8:	f7fc fd8e 	bl	8000618 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003b02:	fba3 1302 	umull	r1, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2164      	movs	r1, #100	; 0x64
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	3332      	adds	r3, #50	; 0x32
 8003b14:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4422      	add	r2, r4
 8003b28:	609a      	str	r2, [r3, #8]
}
 8003b2a:	bf00      	nop
 8003b2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b30:	46bd      	mov	sp, r7
 8003b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b36:	bf00      	nop
 8003b38:	51eb851f 	.word	0x51eb851f

08003b3c <atoi>:
 8003b3c:	220a      	movs	r2, #10
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f000 b920 	b.w	8003d84 <strtol>

08003b44 <__errno>:
 8003b44:	4b01      	ldr	r3, [pc, #4]	; (8003b4c <__errno+0x8>)
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	2000000c 	.word	0x2000000c

08003b50 <__libc_init_array>:
 8003b50:	b570      	push	{r4, r5, r6, lr}
 8003b52:	4d0d      	ldr	r5, [pc, #52]	; (8003b88 <__libc_init_array+0x38>)
 8003b54:	4c0d      	ldr	r4, [pc, #52]	; (8003b8c <__libc_init_array+0x3c>)
 8003b56:	1b64      	subs	r4, r4, r5
 8003b58:	10a4      	asrs	r4, r4, #2
 8003b5a:	2600      	movs	r6, #0
 8003b5c:	42a6      	cmp	r6, r4
 8003b5e:	d109      	bne.n	8003b74 <__libc_init_array+0x24>
 8003b60:	4d0b      	ldr	r5, [pc, #44]	; (8003b90 <__libc_init_array+0x40>)
 8003b62:	4c0c      	ldr	r4, [pc, #48]	; (8003b94 <__libc_init_array+0x44>)
 8003b64:	f001 f9b4 	bl	8004ed0 <_init>
 8003b68:	1b64      	subs	r4, r4, r5
 8003b6a:	10a4      	asrs	r4, r4, #2
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	42a6      	cmp	r6, r4
 8003b70:	d105      	bne.n	8003b7e <__libc_init_array+0x2e>
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b78:	4798      	blx	r3
 8003b7a:	3601      	adds	r6, #1
 8003b7c:	e7ee      	b.n	8003b5c <__libc_init_array+0xc>
 8003b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b82:	4798      	blx	r3
 8003b84:	3601      	adds	r6, #1
 8003b86:	e7f2      	b.n	8003b6e <__libc_init_array+0x1e>
 8003b88:	08005164 	.word	0x08005164
 8003b8c:	08005164 	.word	0x08005164
 8003b90:	08005164 	.word	0x08005164
 8003b94:	08005168 	.word	0x08005168

08003b98 <memset>:
 8003b98:	4402      	add	r2, r0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <strcat>:
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	4602      	mov	r2, r0
 8003bac:	7814      	ldrb	r4, [r2, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	3201      	adds	r2, #1
 8003bb2:	2c00      	cmp	r4, #0
 8003bb4:	d1fa      	bne.n	8003bac <strcat+0x4>
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bc0:	2a00      	cmp	r2, #0
 8003bc2:	d1f9      	bne.n	8003bb8 <strcat+0x10>
 8003bc4:	bd10      	pop	{r4, pc}
	...

08003bc8 <strtok>:
 8003bc8:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <strtok+0x5c>)
 8003bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bcc:	681e      	ldr	r6, [r3, #0]
 8003bce:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	b9fc      	cbnz	r4, 8003c14 <strtok+0x4c>
 8003bd4:	2050      	movs	r0, #80	; 0x50
 8003bd6:	9101      	str	r1, [sp, #4]
 8003bd8:	f000 f9b0 	bl	8003f3c <malloc>
 8003bdc:	9901      	ldr	r1, [sp, #4]
 8003bde:	65b0      	str	r0, [r6, #88]	; 0x58
 8003be0:	4602      	mov	r2, r0
 8003be2:	b920      	cbnz	r0, 8003bee <strtok+0x26>
 8003be4:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <strtok+0x60>)
 8003be6:	4811      	ldr	r0, [pc, #68]	; (8003c2c <strtok+0x64>)
 8003be8:	2157      	movs	r1, #87	; 0x57
 8003bea:	f000 f977 	bl	8003edc <__assert_func>
 8003bee:	e9c0 4400 	strd	r4, r4, [r0]
 8003bf2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003bf6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003bfa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003bfe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003c02:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003c06:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003c0a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003c0e:	6184      	str	r4, [r0, #24]
 8003c10:	7704      	strb	r4, [r0, #28]
 8003c12:	6244      	str	r4, [r0, #36]	; 0x24
 8003c14:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003c16:	2301      	movs	r3, #1
 8003c18:	4628      	mov	r0, r5
 8003c1a:	b002      	add	sp, #8
 8003c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c20:	f000 b806 	b.w	8003c30 <__strtok_r>
 8003c24:	2000000c 	.word	0x2000000c
 8003c28:	08004f18 	.word	0x08004f18
 8003c2c:	08004f2f 	.word	0x08004f2f

08003c30 <__strtok_r>:
 8003c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c32:	b908      	cbnz	r0, 8003c38 <__strtok_r+0x8>
 8003c34:	6810      	ldr	r0, [r2, #0]
 8003c36:	b188      	cbz	r0, 8003c5c <__strtok_r+0x2c>
 8003c38:	4604      	mov	r4, r0
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003c40:	460f      	mov	r7, r1
 8003c42:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003c46:	b91e      	cbnz	r6, 8003c50 <__strtok_r+0x20>
 8003c48:	b965      	cbnz	r5, 8003c64 <__strtok_r+0x34>
 8003c4a:	6015      	str	r5, [r2, #0]
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	e005      	b.n	8003c5c <__strtok_r+0x2c>
 8003c50:	42b5      	cmp	r5, r6
 8003c52:	d1f6      	bne.n	8003c42 <__strtok_r+0x12>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <__strtok_r+0xa>
 8003c58:	6014      	str	r4, [r2, #0]
 8003c5a:	7003      	strb	r3, [r0, #0]
 8003c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5e:	461c      	mov	r4, r3
 8003c60:	e00c      	b.n	8003c7c <__strtok_r+0x4c>
 8003c62:	b915      	cbnz	r5, 8003c6a <__strtok_r+0x3a>
 8003c64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003c68:	460e      	mov	r6, r1
 8003c6a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003c6e:	42ab      	cmp	r3, r5
 8003c70:	d1f7      	bne.n	8003c62 <__strtok_r+0x32>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f3      	beq.n	8003c5e <__strtok_r+0x2e>
 8003c76:	2300      	movs	r3, #0
 8003c78:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003c7c:	6014      	str	r4, [r2, #0]
 8003c7e:	e7ed      	b.n	8003c5c <__strtok_r+0x2c>

08003c80 <_strtol_l.constprop.0>:
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c86:	d001      	beq.n	8003c8c <_strtol_l.constprop.0+0xc>
 8003c88:	2b24      	cmp	r3, #36	; 0x24
 8003c8a:	d906      	bls.n	8003c9a <_strtol_l.constprop.0+0x1a>
 8003c8c:	f7ff ff5a 	bl	8003b44 <__errno>
 8003c90:	2316      	movs	r3, #22
 8003c92:	6003      	str	r3, [r0, #0]
 8003c94:	2000      	movs	r0, #0
 8003c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003d80 <_strtol_l.constprop.0+0x100>
 8003c9e:	460d      	mov	r5, r1
 8003ca0:	462e      	mov	r6, r5
 8003ca2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ca6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003caa:	f017 0708 	ands.w	r7, r7, #8
 8003cae:	d1f7      	bne.n	8003ca0 <_strtol_l.constprop.0+0x20>
 8003cb0:	2c2d      	cmp	r4, #45	; 0x2d
 8003cb2:	d132      	bne.n	8003d1a <_strtol_l.constprop.0+0x9a>
 8003cb4:	782c      	ldrb	r4, [r5, #0]
 8003cb6:	2701      	movs	r7, #1
 8003cb8:	1cb5      	adds	r5, r6, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d05b      	beq.n	8003d76 <_strtol_l.constprop.0+0xf6>
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d109      	bne.n	8003cd6 <_strtol_l.constprop.0+0x56>
 8003cc2:	2c30      	cmp	r4, #48	; 0x30
 8003cc4:	d107      	bne.n	8003cd6 <_strtol_l.constprop.0+0x56>
 8003cc6:	782c      	ldrb	r4, [r5, #0]
 8003cc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003ccc:	2c58      	cmp	r4, #88	; 0x58
 8003cce:	d14d      	bne.n	8003d6c <_strtol_l.constprop.0+0xec>
 8003cd0:	786c      	ldrb	r4, [r5, #1]
 8003cd2:	2310      	movs	r3, #16
 8003cd4:	3502      	adds	r5, #2
 8003cd6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003cda:	f108 38ff 	add.w	r8, r8, #4294967295
 8003cde:	f04f 0c00 	mov.w	ip, #0
 8003ce2:	fbb8 f9f3 	udiv	r9, r8, r3
 8003ce6:	4666      	mov	r6, ip
 8003ce8:	fb03 8a19 	mls	sl, r3, r9, r8
 8003cec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003cf0:	f1be 0f09 	cmp.w	lr, #9
 8003cf4:	d816      	bhi.n	8003d24 <_strtol_l.constprop.0+0xa4>
 8003cf6:	4674      	mov	r4, lr
 8003cf8:	42a3      	cmp	r3, r4
 8003cfa:	dd24      	ble.n	8003d46 <_strtol_l.constprop.0+0xc6>
 8003cfc:	f1bc 0f00 	cmp.w	ip, #0
 8003d00:	db1e      	blt.n	8003d40 <_strtol_l.constprop.0+0xc0>
 8003d02:	45b1      	cmp	r9, r6
 8003d04:	d31c      	bcc.n	8003d40 <_strtol_l.constprop.0+0xc0>
 8003d06:	d101      	bne.n	8003d0c <_strtol_l.constprop.0+0x8c>
 8003d08:	45a2      	cmp	sl, r4
 8003d0a:	db19      	blt.n	8003d40 <_strtol_l.constprop.0+0xc0>
 8003d0c:	fb06 4603 	mla	r6, r6, r3, r4
 8003d10:	f04f 0c01 	mov.w	ip, #1
 8003d14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d18:	e7e8      	b.n	8003cec <_strtol_l.constprop.0+0x6c>
 8003d1a:	2c2b      	cmp	r4, #43	; 0x2b
 8003d1c:	bf04      	itt	eq
 8003d1e:	782c      	ldrbeq	r4, [r5, #0]
 8003d20:	1cb5      	addeq	r5, r6, #2
 8003d22:	e7ca      	b.n	8003cba <_strtol_l.constprop.0+0x3a>
 8003d24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003d28:	f1be 0f19 	cmp.w	lr, #25
 8003d2c:	d801      	bhi.n	8003d32 <_strtol_l.constprop.0+0xb2>
 8003d2e:	3c37      	subs	r4, #55	; 0x37
 8003d30:	e7e2      	b.n	8003cf8 <_strtol_l.constprop.0+0x78>
 8003d32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003d36:	f1be 0f19 	cmp.w	lr, #25
 8003d3a:	d804      	bhi.n	8003d46 <_strtol_l.constprop.0+0xc6>
 8003d3c:	3c57      	subs	r4, #87	; 0x57
 8003d3e:	e7db      	b.n	8003cf8 <_strtol_l.constprop.0+0x78>
 8003d40:	f04f 3cff 	mov.w	ip, #4294967295
 8003d44:	e7e6      	b.n	8003d14 <_strtol_l.constprop.0+0x94>
 8003d46:	f1bc 0f00 	cmp.w	ip, #0
 8003d4a:	da05      	bge.n	8003d58 <_strtol_l.constprop.0+0xd8>
 8003d4c:	2322      	movs	r3, #34	; 0x22
 8003d4e:	6003      	str	r3, [r0, #0]
 8003d50:	4646      	mov	r6, r8
 8003d52:	b942      	cbnz	r2, 8003d66 <_strtol_l.constprop.0+0xe6>
 8003d54:	4630      	mov	r0, r6
 8003d56:	e79e      	b.n	8003c96 <_strtol_l.constprop.0+0x16>
 8003d58:	b107      	cbz	r7, 8003d5c <_strtol_l.constprop.0+0xdc>
 8003d5a:	4276      	negs	r6, r6
 8003d5c:	2a00      	cmp	r2, #0
 8003d5e:	d0f9      	beq.n	8003d54 <_strtol_l.constprop.0+0xd4>
 8003d60:	f1bc 0f00 	cmp.w	ip, #0
 8003d64:	d000      	beq.n	8003d68 <_strtol_l.constprop.0+0xe8>
 8003d66:	1e69      	subs	r1, r5, #1
 8003d68:	6011      	str	r1, [r2, #0]
 8003d6a:	e7f3      	b.n	8003d54 <_strtol_l.constprop.0+0xd4>
 8003d6c:	2430      	movs	r4, #48	; 0x30
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1b1      	bne.n	8003cd6 <_strtol_l.constprop.0+0x56>
 8003d72:	2308      	movs	r3, #8
 8003d74:	e7af      	b.n	8003cd6 <_strtol_l.constprop.0+0x56>
 8003d76:	2c30      	cmp	r4, #48	; 0x30
 8003d78:	d0a5      	beq.n	8003cc6 <_strtol_l.constprop.0+0x46>
 8003d7a:	230a      	movs	r3, #10
 8003d7c:	e7ab      	b.n	8003cd6 <_strtol_l.constprop.0+0x56>
 8003d7e:	bf00      	nop
 8003d80:	08004fc9 	.word	0x08004fc9

08003d84 <strtol>:
 8003d84:	4613      	mov	r3, r2
 8003d86:	460a      	mov	r2, r1
 8003d88:	4601      	mov	r1, r0
 8003d8a:	4802      	ldr	r0, [pc, #8]	; (8003d94 <strtol+0x10>)
 8003d8c:	6800      	ldr	r0, [r0, #0]
 8003d8e:	f7ff bf77 	b.w	8003c80 <_strtol_l.constprop.0>
 8003d92:	bf00      	nop
 8003d94:	2000000c 	.word	0x2000000c

08003d98 <_strtoull_l.constprop.0>:
 8003d98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9c:	4692      	mov	sl, r2
 8003d9e:	4a49      	ldr	r2, [pc, #292]	; (8003ec4 <_strtoull_l.constprop.0+0x12c>)
 8003da0:	9001      	str	r0, [sp, #4]
 8003da2:	4689      	mov	r9, r1
 8003da4:	461d      	mov	r5, r3
 8003da6:	460e      	mov	r6, r1
 8003da8:	4633      	mov	r3, r6
 8003daa:	f816 4b01 	ldrb.w	r4, [r6], #1
 8003dae:	5ca7      	ldrb	r7, [r4, r2]
 8003db0:	f017 0708 	ands.w	r7, r7, #8
 8003db4:	d1f8      	bne.n	8003da8 <_strtoull_l.constprop.0+0x10>
 8003db6:	2c2d      	cmp	r4, #45	; 0x2d
 8003db8:	d14a      	bne.n	8003e50 <_strtoull_l.constprop.0+0xb8>
 8003dba:	7834      	ldrb	r4, [r6, #0]
 8003dbc:	2701      	movs	r7, #1
 8003dbe:	1c9e      	adds	r6, r3, #2
 8003dc0:	2d00      	cmp	r5, #0
 8003dc2:	d07b      	beq.n	8003ebc <_strtoull_l.constprop.0+0x124>
 8003dc4:	2d10      	cmp	r5, #16
 8003dc6:	d109      	bne.n	8003ddc <_strtoull_l.constprop.0+0x44>
 8003dc8:	2c30      	cmp	r4, #48	; 0x30
 8003dca:	d107      	bne.n	8003ddc <_strtoull_l.constprop.0+0x44>
 8003dcc:	7833      	ldrb	r3, [r6, #0]
 8003dce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003dd2:	2b58      	cmp	r3, #88	; 0x58
 8003dd4:	d16d      	bne.n	8003eb2 <_strtoull_l.constprop.0+0x11a>
 8003dd6:	7874      	ldrb	r4, [r6, #1]
 8003dd8:	2510      	movs	r5, #16
 8003dda:	3602      	adds	r6, #2
 8003ddc:	ea4f 7be5 	mov.w	fp, r5, asr #31
 8003de0:	462a      	mov	r2, r5
 8003de2:	465b      	mov	r3, fp
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dec:	f7fc fc14 	bl	8000618 <__aeabi_uldivmod>
 8003df0:	462a      	mov	r2, r5
 8003df2:	9000      	str	r0, [sp, #0]
 8003df4:	4688      	mov	r8, r1
 8003df6:	465b      	mov	r3, fp
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003e00:	f7fc fc0a 	bl	8000618 <__aeabi_uldivmod>
 8003e04:	2300      	movs	r3, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003e0e:	f1bc 0f09 	cmp.w	ip, #9
 8003e12:	d822      	bhi.n	8003e5a <_strtoull_l.constprop.0+0xc2>
 8003e14:	4664      	mov	r4, ip
 8003e16:	42a5      	cmp	r5, r4
 8003e18:	dd30      	ble.n	8003e7c <_strtoull_l.constprop.0+0xe4>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	db2b      	blt.n	8003e76 <_strtoull_l.constprop.0+0xde>
 8003e1e:	9b00      	ldr	r3, [sp, #0]
 8003e20:	4283      	cmp	r3, r0
 8003e22:	eb78 0301 	sbcs.w	r3, r8, r1
 8003e26:	d326      	bcc.n	8003e76 <_strtoull_l.constprop.0+0xde>
 8003e28:	9b00      	ldr	r3, [sp, #0]
 8003e2a:	4588      	cmp	r8, r1
 8003e2c:	bf08      	it	eq
 8003e2e:	4283      	cmpeq	r3, r0
 8003e30:	d101      	bne.n	8003e36 <_strtoull_l.constprop.0+0x9e>
 8003e32:	42a2      	cmp	r2, r4
 8003e34:	db1f      	blt.n	8003e76 <_strtoull_l.constprop.0+0xde>
 8003e36:	4369      	muls	r1, r5
 8003e38:	fb00 110b 	mla	r1, r0, fp, r1
 8003e3c:	fba5 0300 	umull	r0, r3, r5, r0
 8003e40:	4419      	add	r1, r3
 8003e42:	1820      	adds	r0, r4, r0
 8003e44:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f816 4b01 	ldrb.w	r4, [r6], #1
 8003e4e:	e7dc      	b.n	8003e0a <_strtoull_l.constprop.0+0x72>
 8003e50:	2c2b      	cmp	r4, #43	; 0x2b
 8003e52:	bf04      	itt	eq
 8003e54:	7834      	ldrbeq	r4, [r6, #0]
 8003e56:	1c9e      	addeq	r6, r3, #2
 8003e58:	e7b2      	b.n	8003dc0 <_strtoull_l.constprop.0+0x28>
 8003e5a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003e5e:	f1bc 0f19 	cmp.w	ip, #25
 8003e62:	d801      	bhi.n	8003e68 <_strtoull_l.constprop.0+0xd0>
 8003e64:	3c37      	subs	r4, #55	; 0x37
 8003e66:	e7d6      	b.n	8003e16 <_strtoull_l.constprop.0+0x7e>
 8003e68:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003e6c:	f1bc 0f19 	cmp.w	ip, #25
 8003e70:	d804      	bhi.n	8003e7c <_strtoull_l.constprop.0+0xe4>
 8003e72:	3c57      	subs	r4, #87	; 0x57
 8003e74:	e7cf      	b.n	8003e16 <_strtoull_l.constprop.0+0x7e>
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7a:	e7e6      	b.n	8003e4a <_strtoull_l.constprop.0+0xb2>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	da0b      	bge.n	8003e98 <_strtoull_l.constprop.0+0x100>
 8003e80:	9a01      	ldr	r2, [sp, #4]
 8003e82:	2322      	movs	r3, #34	; 0x22
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4601      	mov	r1, r0
 8003e8c:	f1ba 0f00 	cmp.w	sl, #0
 8003e90:	d10a      	bne.n	8003ea8 <_strtoull_l.constprop.0+0x110>
 8003e92:	b003      	add	sp, #12
 8003e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e98:	b117      	cbz	r7, 8003ea0 <_strtoull_l.constprop.0+0x108>
 8003e9a:	4240      	negs	r0, r0
 8003e9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003ea0:	f1ba 0f00 	cmp.w	sl, #0
 8003ea4:	d0f5      	beq.n	8003e92 <_strtoull_l.constprop.0+0xfa>
 8003ea6:	b10b      	cbz	r3, 8003eac <_strtoull_l.constprop.0+0x114>
 8003ea8:	f106 39ff 	add.w	r9, r6, #4294967295
 8003eac:	f8ca 9000 	str.w	r9, [sl]
 8003eb0:	e7ef      	b.n	8003e92 <_strtoull_l.constprop.0+0xfa>
 8003eb2:	2430      	movs	r4, #48	; 0x30
 8003eb4:	2d00      	cmp	r5, #0
 8003eb6:	d191      	bne.n	8003ddc <_strtoull_l.constprop.0+0x44>
 8003eb8:	2508      	movs	r5, #8
 8003eba:	e78f      	b.n	8003ddc <_strtoull_l.constprop.0+0x44>
 8003ebc:	2c30      	cmp	r4, #48	; 0x30
 8003ebe:	d085      	beq.n	8003dcc <_strtoull_l.constprop.0+0x34>
 8003ec0:	250a      	movs	r5, #10
 8003ec2:	e78b      	b.n	8003ddc <_strtoull_l.constprop.0+0x44>
 8003ec4:	08004fc9 	.word	0x08004fc9

08003ec8 <strtoull>:
 8003ec8:	4613      	mov	r3, r2
 8003eca:	460a      	mov	r2, r1
 8003ecc:	4601      	mov	r1, r0
 8003ece:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <strtoull+0x10>)
 8003ed0:	6800      	ldr	r0, [r0, #0]
 8003ed2:	f7ff bf61 	b.w	8003d98 <_strtoull_l.constprop.0>
 8003ed6:	bf00      	nop
 8003ed8:	2000000c 	.word	0x2000000c

08003edc <__assert_func>:
 8003edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ede:	4614      	mov	r4, r2
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <__assert_func+0x2c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4605      	mov	r5, r0
 8003ee8:	68d8      	ldr	r0, [r3, #12]
 8003eea:	b14c      	cbz	r4, 8003f00 <__assert_func+0x24>
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <__assert_func+0x30>)
 8003eee:	9100      	str	r1, [sp, #0]
 8003ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003ef4:	4906      	ldr	r1, [pc, #24]	; (8003f10 <__assert_func+0x34>)
 8003ef6:	462b      	mov	r3, r5
 8003ef8:	f000 f80e 	bl	8003f18 <fiprintf>
 8003efc:	f000 fcc4 	bl	8004888 <abort>
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <__assert_func+0x38>)
 8003f02:	461c      	mov	r4, r3
 8003f04:	e7f3      	b.n	8003eee <__assert_func+0x12>
 8003f06:	bf00      	nop
 8003f08:	2000000c 	.word	0x2000000c
 8003f0c:	08004f8c 	.word	0x08004f8c
 8003f10:	08004f99 	.word	0x08004f99
 8003f14:	08004fc7 	.word	0x08004fc7

08003f18 <fiprintf>:
 8003f18:	b40e      	push	{r1, r2, r3}
 8003f1a:	b503      	push	{r0, r1, lr}
 8003f1c:	4601      	mov	r1, r0
 8003f1e:	ab03      	add	r3, sp, #12
 8003f20:	4805      	ldr	r0, [pc, #20]	; (8003f38 <fiprintf+0x20>)
 8003f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f26:	6800      	ldr	r0, [r0, #0]
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	f000 f919 	bl	8004160 <_vfiprintf_r>
 8003f2e:	b002      	add	sp, #8
 8003f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f34:	b003      	add	sp, #12
 8003f36:	4770      	bx	lr
 8003f38:	2000000c 	.word	0x2000000c

08003f3c <malloc>:
 8003f3c:	4b02      	ldr	r3, [pc, #8]	; (8003f48 <malloc+0xc>)
 8003f3e:	4601      	mov	r1, r0
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	f000 b86f 	b.w	8004024 <_malloc_r>
 8003f46:	bf00      	nop
 8003f48:	2000000c 	.word	0x2000000c

08003f4c <_free_r>:
 8003f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f4e:	2900      	cmp	r1, #0
 8003f50:	d044      	beq.n	8003fdc <_free_r+0x90>
 8003f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f56:	9001      	str	r0, [sp, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8003f5e:	bfb8      	it	lt
 8003f60:	18e4      	addlt	r4, r4, r3
 8003f62:	f000 feb9 	bl	8004cd8 <__malloc_lock>
 8003f66:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <_free_r+0x94>)
 8003f68:	9801      	ldr	r0, [sp, #4]
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	b933      	cbnz	r3, 8003f7c <_free_r+0x30>
 8003f6e:	6063      	str	r3, [r4, #4]
 8003f70:	6014      	str	r4, [r2, #0]
 8003f72:	b003      	add	sp, #12
 8003f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f78:	f000 beb4 	b.w	8004ce4 <__malloc_unlock>
 8003f7c:	42a3      	cmp	r3, r4
 8003f7e:	d908      	bls.n	8003f92 <_free_r+0x46>
 8003f80:	6825      	ldr	r5, [r4, #0]
 8003f82:	1961      	adds	r1, r4, r5
 8003f84:	428b      	cmp	r3, r1
 8003f86:	bf01      	itttt	eq
 8003f88:	6819      	ldreq	r1, [r3, #0]
 8003f8a:	685b      	ldreq	r3, [r3, #4]
 8003f8c:	1949      	addeq	r1, r1, r5
 8003f8e:	6021      	streq	r1, [r4, #0]
 8003f90:	e7ed      	b.n	8003f6e <_free_r+0x22>
 8003f92:	461a      	mov	r2, r3
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	b10b      	cbz	r3, 8003f9c <_free_r+0x50>
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	d9fa      	bls.n	8003f92 <_free_r+0x46>
 8003f9c:	6811      	ldr	r1, [r2, #0]
 8003f9e:	1855      	adds	r5, r2, r1
 8003fa0:	42a5      	cmp	r5, r4
 8003fa2:	d10b      	bne.n	8003fbc <_free_r+0x70>
 8003fa4:	6824      	ldr	r4, [r4, #0]
 8003fa6:	4421      	add	r1, r4
 8003fa8:	1854      	adds	r4, r2, r1
 8003faa:	42a3      	cmp	r3, r4
 8003fac:	6011      	str	r1, [r2, #0]
 8003fae:	d1e0      	bne.n	8003f72 <_free_r+0x26>
 8003fb0:	681c      	ldr	r4, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	6053      	str	r3, [r2, #4]
 8003fb6:	4421      	add	r1, r4
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	e7da      	b.n	8003f72 <_free_r+0x26>
 8003fbc:	d902      	bls.n	8003fc4 <_free_r+0x78>
 8003fbe:	230c      	movs	r3, #12
 8003fc0:	6003      	str	r3, [r0, #0]
 8003fc2:	e7d6      	b.n	8003f72 <_free_r+0x26>
 8003fc4:	6825      	ldr	r5, [r4, #0]
 8003fc6:	1961      	adds	r1, r4, r5
 8003fc8:	428b      	cmp	r3, r1
 8003fca:	bf04      	itt	eq
 8003fcc:	6819      	ldreq	r1, [r3, #0]
 8003fce:	685b      	ldreq	r3, [r3, #4]
 8003fd0:	6063      	str	r3, [r4, #4]
 8003fd2:	bf04      	itt	eq
 8003fd4:	1949      	addeq	r1, r1, r5
 8003fd6:	6021      	streq	r1, [r4, #0]
 8003fd8:	6054      	str	r4, [r2, #4]
 8003fda:	e7ca      	b.n	8003f72 <_free_r+0x26>
 8003fdc:	b003      	add	sp, #12
 8003fde:	bd30      	pop	{r4, r5, pc}
 8003fe0:	2000068c 	.word	0x2000068c

08003fe4 <sbrk_aligned>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	4e0e      	ldr	r6, [pc, #56]	; (8004020 <sbrk_aligned+0x3c>)
 8003fe8:	460c      	mov	r4, r1
 8003fea:	6831      	ldr	r1, [r6, #0]
 8003fec:	4605      	mov	r5, r0
 8003fee:	b911      	cbnz	r1, 8003ff6 <sbrk_aligned+0x12>
 8003ff0:	f000 fb7a 	bl	80046e8 <_sbrk_r>
 8003ff4:	6030      	str	r0, [r6, #0]
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f000 fb75 	bl	80046e8 <_sbrk_r>
 8003ffe:	1c43      	adds	r3, r0, #1
 8004000:	d00a      	beq.n	8004018 <sbrk_aligned+0x34>
 8004002:	1cc4      	adds	r4, r0, #3
 8004004:	f024 0403 	bic.w	r4, r4, #3
 8004008:	42a0      	cmp	r0, r4
 800400a:	d007      	beq.n	800401c <sbrk_aligned+0x38>
 800400c:	1a21      	subs	r1, r4, r0
 800400e:	4628      	mov	r0, r5
 8004010:	f000 fb6a 	bl	80046e8 <_sbrk_r>
 8004014:	3001      	adds	r0, #1
 8004016:	d101      	bne.n	800401c <sbrk_aligned+0x38>
 8004018:	f04f 34ff 	mov.w	r4, #4294967295
 800401c:	4620      	mov	r0, r4
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	20000690 	.word	0x20000690

08004024 <_malloc_r>:
 8004024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004028:	1ccd      	adds	r5, r1, #3
 800402a:	f025 0503 	bic.w	r5, r5, #3
 800402e:	3508      	adds	r5, #8
 8004030:	2d0c      	cmp	r5, #12
 8004032:	bf38      	it	cc
 8004034:	250c      	movcc	r5, #12
 8004036:	2d00      	cmp	r5, #0
 8004038:	4607      	mov	r7, r0
 800403a:	db01      	blt.n	8004040 <_malloc_r+0x1c>
 800403c:	42a9      	cmp	r1, r5
 800403e:	d905      	bls.n	800404c <_malloc_r+0x28>
 8004040:	230c      	movs	r3, #12
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	2600      	movs	r6, #0
 8004046:	4630      	mov	r0, r6
 8004048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800404c:	4e2e      	ldr	r6, [pc, #184]	; (8004108 <_malloc_r+0xe4>)
 800404e:	f000 fe43 	bl	8004cd8 <__malloc_lock>
 8004052:	6833      	ldr	r3, [r6, #0]
 8004054:	461c      	mov	r4, r3
 8004056:	bb34      	cbnz	r4, 80040a6 <_malloc_r+0x82>
 8004058:	4629      	mov	r1, r5
 800405a:	4638      	mov	r0, r7
 800405c:	f7ff ffc2 	bl	8003fe4 <sbrk_aligned>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	4604      	mov	r4, r0
 8004064:	d14d      	bne.n	8004102 <_malloc_r+0xde>
 8004066:	6834      	ldr	r4, [r6, #0]
 8004068:	4626      	mov	r6, r4
 800406a:	2e00      	cmp	r6, #0
 800406c:	d140      	bne.n	80040f0 <_malloc_r+0xcc>
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	4631      	mov	r1, r6
 8004072:	4638      	mov	r0, r7
 8004074:	eb04 0803 	add.w	r8, r4, r3
 8004078:	f000 fb36 	bl	80046e8 <_sbrk_r>
 800407c:	4580      	cmp	r8, r0
 800407e:	d13a      	bne.n	80040f6 <_malloc_r+0xd2>
 8004080:	6821      	ldr	r1, [r4, #0]
 8004082:	3503      	adds	r5, #3
 8004084:	1a6d      	subs	r5, r5, r1
 8004086:	f025 0503 	bic.w	r5, r5, #3
 800408a:	3508      	adds	r5, #8
 800408c:	2d0c      	cmp	r5, #12
 800408e:	bf38      	it	cc
 8004090:	250c      	movcc	r5, #12
 8004092:	4629      	mov	r1, r5
 8004094:	4638      	mov	r0, r7
 8004096:	f7ff ffa5 	bl	8003fe4 <sbrk_aligned>
 800409a:	3001      	adds	r0, #1
 800409c:	d02b      	beq.n	80040f6 <_malloc_r+0xd2>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	442b      	add	r3, r5
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	e00e      	b.n	80040c4 <_malloc_r+0xa0>
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	1b52      	subs	r2, r2, r5
 80040aa:	d41e      	bmi.n	80040ea <_malloc_r+0xc6>
 80040ac:	2a0b      	cmp	r2, #11
 80040ae:	d916      	bls.n	80040de <_malloc_r+0xba>
 80040b0:	1961      	adds	r1, r4, r5
 80040b2:	42a3      	cmp	r3, r4
 80040b4:	6025      	str	r5, [r4, #0]
 80040b6:	bf18      	it	ne
 80040b8:	6059      	strne	r1, [r3, #4]
 80040ba:	6863      	ldr	r3, [r4, #4]
 80040bc:	bf08      	it	eq
 80040be:	6031      	streq	r1, [r6, #0]
 80040c0:	5162      	str	r2, [r4, r5]
 80040c2:	604b      	str	r3, [r1, #4]
 80040c4:	4638      	mov	r0, r7
 80040c6:	f104 060b 	add.w	r6, r4, #11
 80040ca:	f000 fe0b 	bl	8004ce4 <__malloc_unlock>
 80040ce:	f026 0607 	bic.w	r6, r6, #7
 80040d2:	1d23      	adds	r3, r4, #4
 80040d4:	1af2      	subs	r2, r6, r3
 80040d6:	d0b6      	beq.n	8004046 <_malloc_r+0x22>
 80040d8:	1b9b      	subs	r3, r3, r6
 80040da:	50a3      	str	r3, [r4, r2]
 80040dc:	e7b3      	b.n	8004046 <_malloc_r+0x22>
 80040de:	6862      	ldr	r2, [r4, #4]
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	bf0c      	ite	eq
 80040e4:	6032      	streq	r2, [r6, #0]
 80040e6:	605a      	strne	r2, [r3, #4]
 80040e8:	e7ec      	b.n	80040c4 <_malloc_r+0xa0>
 80040ea:	4623      	mov	r3, r4
 80040ec:	6864      	ldr	r4, [r4, #4]
 80040ee:	e7b2      	b.n	8004056 <_malloc_r+0x32>
 80040f0:	4634      	mov	r4, r6
 80040f2:	6876      	ldr	r6, [r6, #4]
 80040f4:	e7b9      	b.n	800406a <_malloc_r+0x46>
 80040f6:	230c      	movs	r3, #12
 80040f8:	603b      	str	r3, [r7, #0]
 80040fa:	4638      	mov	r0, r7
 80040fc:	f000 fdf2 	bl	8004ce4 <__malloc_unlock>
 8004100:	e7a1      	b.n	8004046 <_malloc_r+0x22>
 8004102:	6025      	str	r5, [r4, #0]
 8004104:	e7de      	b.n	80040c4 <_malloc_r+0xa0>
 8004106:	bf00      	nop
 8004108:	2000068c 	.word	0x2000068c

0800410c <__sfputc_r>:
 800410c:	6893      	ldr	r3, [r2, #8]
 800410e:	3b01      	subs	r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	b410      	push	{r4}
 8004114:	6093      	str	r3, [r2, #8]
 8004116:	da08      	bge.n	800412a <__sfputc_r+0x1e>
 8004118:	6994      	ldr	r4, [r2, #24]
 800411a:	42a3      	cmp	r3, r4
 800411c:	db01      	blt.n	8004122 <__sfputc_r+0x16>
 800411e:	290a      	cmp	r1, #10
 8004120:	d103      	bne.n	800412a <__sfputc_r+0x1e>
 8004122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004126:	f000 baef 	b.w	8004708 <__swbuf_r>
 800412a:	6813      	ldr	r3, [r2, #0]
 800412c:	1c58      	adds	r0, r3, #1
 800412e:	6010      	str	r0, [r2, #0]
 8004130:	7019      	strb	r1, [r3, #0]
 8004132:	4608      	mov	r0, r1
 8004134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004138:	4770      	bx	lr

0800413a <__sfputs_r>:
 800413a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413c:	4606      	mov	r6, r0
 800413e:	460f      	mov	r7, r1
 8004140:	4614      	mov	r4, r2
 8004142:	18d5      	adds	r5, r2, r3
 8004144:	42ac      	cmp	r4, r5
 8004146:	d101      	bne.n	800414c <__sfputs_r+0x12>
 8004148:	2000      	movs	r0, #0
 800414a:	e007      	b.n	800415c <__sfputs_r+0x22>
 800414c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004150:	463a      	mov	r2, r7
 8004152:	4630      	mov	r0, r6
 8004154:	f7ff ffda 	bl	800410c <__sfputc_r>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d1f3      	bne.n	8004144 <__sfputs_r+0xa>
 800415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004160 <_vfiprintf_r>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	460d      	mov	r5, r1
 8004166:	b09d      	sub	sp, #116	; 0x74
 8004168:	4614      	mov	r4, r2
 800416a:	4698      	mov	r8, r3
 800416c:	4606      	mov	r6, r0
 800416e:	b118      	cbz	r0, 8004178 <_vfiprintf_r+0x18>
 8004170:	6983      	ldr	r3, [r0, #24]
 8004172:	b90b      	cbnz	r3, 8004178 <_vfiprintf_r+0x18>
 8004174:	f000 fcaa 	bl	8004acc <__sinit>
 8004178:	4b89      	ldr	r3, [pc, #548]	; (80043a0 <_vfiprintf_r+0x240>)
 800417a:	429d      	cmp	r5, r3
 800417c:	d11b      	bne.n	80041b6 <_vfiprintf_r+0x56>
 800417e:	6875      	ldr	r5, [r6, #4]
 8004180:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004182:	07d9      	lsls	r1, r3, #31
 8004184:	d405      	bmi.n	8004192 <_vfiprintf_r+0x32>
 8004186:	89ab      	ldrh	r3, [r5, #12]
 8004188:	059a      	lsls	r2, r3, #22
 800418a:	d402      	bmi.n	8004192 <_vfiprintf_r+0x32>
 800418c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800418e:	f000 fd3b 	bl	8004c08 <__retarget_lock_acquire_recursive>
 8004192:	89ab      	ldrh	r3, [r5, #12]
 8004194:	071b      	lsls	r3, r3, #28
 8004196:	d501      	bpl.n	800419c <_vfiprintf_r+0x3c>
 8004198:	692b      	ldr	r3, [r5, #16]
 800419a:	b9eb      	cbnz	r3, 80041d8 <_vfiprintf_r+0x78>
 800419c:	4629      	mov	r1, r5
 800419e:	4630      	mov	r0, r6
 80041a0:	f000 fb04 	bl	80047ac <__swsetup_r>
 80041a4:	b1c0      	cbz	r0, 80041d8 <_vfiprintf_r+0x78>
 80041a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041a8:	07dc      	lsls	r4, r3, #31
 80041aa:	d50e      	bpl.n	80041ca <_vfiprintf_r+0x6a>
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	b01d      	add	sp, #116	; 0x74
 80041b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b6:	4b7b      	ldr	r3, [pc, #492]	; (80043a4 <_vfiprintf_r+0x244>)
 80041b8:	429d      	cmp	r5, r3
 80041ba:	d101      	bne.n	80041c0 <_vfiprintf_r+0x60>
 80041bc:	68b5      	ldr	r5, [r6, #8]
 80041be:	e7df      	b.n	8004180 <_vfiprintf_r+0x20>
 80041c0:	4b79      	ldr	r3, [pc, #484]	; (80043a8 <_vfiprintf_r+0x248>)
 80041c2:	429d      	cmp	r5, r3
 80041c4:	bf08      	it	eq
 80041c6:	68f5      	ldreq	r5, [r6, #12]
 80041c8:	e7da      	b.n	8004180 <_vfiprintf_r+0x20>
 80041ca:	89ab      	ldrh	r3, [r5, #12]
 80041cc:	0598      	lsls	r0, r3, #22
 80041ce:	d4ed      	bmi.n	80041ac <_vfiprintf_r+0x4c>
 80041d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041d2:	f000 fd1a 	bl	8004c0a <__retarget_lock_release_recursive>
 80041d6:	e7e9      	b.n	80041ac <_vfiprintf_r+0x4c>
 80041d8:	2300      	movs	r3, #0
 80041da:	9309      	str	r3, [sp, #36]	; 0x24
 80041dc:	2320      	movs	r3, #32
 80041de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80041e6:	2330      	movs	r3, #48	; 0x30
 80041e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80043ac <_vfiprintf_r+0x24c>
 80041ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041f0:	f04f 0901 	mov.w	r9, #1
 80041f4:	4623      	mov	r3, r4
 80041f6:	469a      	mov	sl, r3
 80041f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041fc:	b10a      	cbz	r2, 8004202 <_vfiprintf_r+0xa2>
 80041fe:	2a25      	cmp	r2, #37	; 0x25
 8004200:	d1f9      	bne.n	80041f6 <_vfiprintf_r+0x96>
 8004202:	ebba 0b04 	subs.w	fp, sl, r4
 8004206:	d00b      	beq.n	8004220 <_vfiprintf_r+0xc0>
 8004208:	465b      	mov	r3, fp
 800420a:	4622      	mov	r2, r4
 800420c:	4629      	mov	r1, r5
 800420e:	4630      	mov	r0, r6
 8004210:	f7ff ff93 	bl	800413a <__sfputs_r>
 8004214:	3001      	adds	r0, #1
 8004216:	f000 80aa 	beq.w	800436e <_vfiprintf_r+0x20e>
 800421a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800421c:	445a      	add	r2, fp
 800421e:	9209      	str	r2, [sp, #36]	; 0x24
 8004220:	f89a 3000 	ldrb.w	r3, [sl]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80a2 	beq.w	800436e <_vfiprintf_r+0x20e>
 800422a:	2300      	movs	r3, #0
 800422c:	f04f 32ff 	mov.w	r2, #4294967295
 8004230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004234:	f10a 0a01 	add.w	sl, sl, #1
 8004238:	9304      	str	r3, [sp, #16]
 800423a:	9307      	str	r3, [sp, #28]
 800423c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004240:	931a      	str	r3, [sp, #104]	; 0x68
 8004242:	4654      	mov	r4, sl
 8004244:	2205      	movs	r2, #5
 8004246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800424a:	4858      	ldr	r0, [pc, #352]	; (80043ac <_vfiprintf_r+0x24c>)
 800424c:	f7fb ffd8 	bl	8000200 <memchr>
 8004250:	9a04      	ldr	r2, [sp, #16]
 8004252:	b9d8      	cbnz	r0, 800428c <_vfiprintf_r+0x12c>
 8004254:	06d1      	lsls	r1, r2, #27
 8004256:	bf44      	itt	mi
 8004258:	2320      	movmi	r3, #32
 800425a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800425e:	0713      	lsls	r3, r2, #28
 8004260:	bf44      	itt	mi
 8004262:	232b      	movmi	r3, #43	; 0x2b
 8004264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004268:	f89a 3000 	ldrb.w	r3, [sl]
 800426c:	2b2a      	cmp	r3, #42	; 0x2a
 800426e:	d015      	beq.n	800429c <_vfiprintf_r+0x13c>
 8004270:	9a07      	ldr	r2, [sp, #28]
 8004272:	4654      	mov	r4, sl
 8004274:	2000      	movs	r0, #0
 8004276:	f04f 0c0a 	mov.w	ip, #10
 800427a:	4621      	mov	r1, r4
 800427c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004280:	3b30      	subs	r3, #48	; 0x30
 8004282:	2b09      	cmp	r3, #9
 8004284:	d94e      	bls.n	8004324 <_vfiprintf_r+0x1c4>
 8004286:	b1b0      	cbz	r0, 80042b6 <_vfiprintf_r+0x156>
 8004288:	9207      	str	r2, [sp, #28]
 800428a:	e014      	b.n	80042b6 <_vfiprintf_r+0x156>
 800428c:	eba0 0308 	sub.w	r3, r0, r8
 8004290:	fa09 f303 	lsl.w	r3, r9, r3
 8004294:	4313      	orrs	r3, r2
 8004296:	9304      	str	r3, [sp, #16]
 8004298:	46a2      	mov	sl, r4
 800429a:	e7d2      	b.n	8004242 <_vfiprintf_r+0xe2>
 800429c:	9b03      	ldr	r3, [sp, #12]
 800429e:	1d19      	adds	r1, r3, #4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	9103      	str	r1, [sp, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bfbb      	ittet	lt
 80042a8:	425b      	neglt	r3, r3
 80042aa:	f042 0202 	orrlt.w	r2, r2, #2
 80042ae:	9307      	strge	r3, [sp, #28]
 80042b0:	9307      	strlt	r3, [sp, #28]
 80042b2:	bfb8      	it	lt
 80042b4:	9204      	strlt	r2, [sp, #16]
 80042b6:	7823      	ldrb	r3, [r4, #0]
 80042b8:	2b2e      	cmp	r3, #46	; 0x2e
 80042ba:	d10c      	bne.n	80042d6 <_vfiprintf_r+0x176>
 80042bc:	7863      	ldrb	r3, [r4, #1]
 80042be:	2b2a      	cmp	r3, #42	; 0x2a
 80042c0:	d135      	bne.n	800432e <_vfiprintf_r+0x1ce>
 80042c2:	9b03      	ldr	r3, [sp, #12]
 80042c4:	1d1a      	adds	r2, r3, #4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	9203      	str	r2, [sp, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfb8      	it	lt
 80042ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80042d2:	3402      	adds	r4, #2
 80042d4:	9305      	str	r3, [sp, #20]
 80042d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043bc <_vfiprintf_r+0x25c>
 80042da:	7821      	ldrb	r1, [r4, #0]
 80042dc:	2203      	movs	r2, #3
 80042de:	4650      	mov	r0, sl
 80042e0:	f7fb ff8e 	bl	8000200 <memchr>
 80042e4:	b140      	cbz	r0, 80042f8 <_vfiprintf_r+0x198>
 80042e6:	2340      	movs	r3, #64	; 0x40
 80042e8:	eba0 000a 	sub.w	r0, r0, sl
 80042ec:	fa03 f000 	lsl.w	r0, r3, r0
 80042f0:	9b04      	ldr	r3, [sp, #16]
 80042f2:	4303      	orrs	r3, r0
 80042f4:	3401      	adds	r4, #1
 80042f6:	9304      	str	r3, [sp, #16]
 80042f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042fc:	482c      	ldr	r0, [pc, #176]	; (80043b0 <_vfiprintf_r+0x250>)
 80042fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004302:	2206      	movs	r2, #6
 8004304:	f7fb ff7c 	bl	8000200 <memchr>
 8004308:	2800      	cmp	r0, #0
 800430a:	d03f      	beq.n	800438c <_vfiprintf_r+0x22c>
 800430c:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <_vfiprintf_r+0x254>)
 800430e:	bb1b      	cbnz	r3, 8004358 <_vfiprintf_r+0x1f8>
 8004310:	9b03      	ldr	r3, [sp, #12]
 8004312:	3307      	adds	r3, #7
 8004314:	f023 0307 	bic.w	r3, r3, #7
 8004318:	3308      	adds	r3, #8
 800431a:	9303      	str	r3, [sp, #12]
 800431c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800431e:	443b      	add	r3, r7
 8004320:	9309      	str	r3, [sp, #36]	; 0x24
 8004322:	e767      	b.n	80041f4 <_vfiprintf_r+0x94>
 8004324:	fb0c 3202 	mla	r2, ip, r2, r3
 8004328:	460c      	mov	r4, r1
 800432a:	2001      	movs	r0, #1
 800432c:	e7a5      	b.n	800427a <_vfiprintf_r+0x11a>
 800432e:	2300      	movs	r3, #0
 8004330:	3401      	adds	r4, #1
 8004332:	9305      	str	r3, [sp, #20]
 8004334:	4619      	mov	r1, r3
 8004336:	f04f 0c0a 	mov.w	ip, #10
 800433a:	4620      	mov	r0, r4
 800433c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004340:	3a30      	subs	r2, #48	; 0x30
 8004342:	2a09      	cmp	r2, #9
 8004344:	d903      	bls.n	800434e <_vfiprintf_r+0x1ee>
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0c5      	beq.n	80042d6 <_vfiprintf_r+0x176>
 800434a:	9105      	str	r1, [sp, #20]
 800434c:	e7c3      	b.n	80042d6 <_vfiprintf_r+0x176>
 800434e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004352:	4604      	mov	r4, r0
 8004354:	2301      	movs	r3, #1
 8004356:	e7f0      	b.n	800433a <_vfiprintf_r+0x1da>
 8004358:	ab03      	add	r3, sp, #12
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	462a      	mov	r2, r5
 800435e:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <_vfiprintf_r+0x258>)
 8004360:	a904      	add	r1, sp, #16
 8004362:	4630      	mov	r0, r6
 8004364:	f3af 8000 	nop.w
 8004368:	4607      	mov	r7, r0
 800436a:	1c78      	adds	r0, r7, #1
 800436c:	d1d6      	bne.n	800431c <_vfiprintf_r+0x1bc>
 800436e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004370:	07d9      	lsls	r1, r3, #31
 8004372:	d405      	bmi.n	8004380 <_vfiprintf_r+0x220>
 8004374:	89ab      	ldrh	r3, [r5, #12]
 8004376:	059a      	lsls	r2, r3, #22
 8004378:	d402      	bmi.n	8004380 <_vfiprintf_r+0x220>
 800437a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800437c:	f000 fc45 	bl	8004c0a <__retarget_lock_release_recursive>
 8004380:	89ab      	ldrh	r3, [r5, #12]
 8004382:	065b      	lsls	r3, r3, #25
 8004384:	f53f af12 	bmi.w	80041ac <_vfiprintf_r+0x4c>
 8004388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800438a:	e711      	b.n	80041b0 <_vfiprintf_r+0x50>
 800438c:	ab03      	add	r3, sp, #12
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	462a      	mov	r2, r5
 8004392:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <_vfiprintf_r+0x258>)
 8004394:	a904      	add	r1, sp, #16
 8004396:	4630      	mov	r0, r6
 8004398:	f000 f880 	bl	800449c <_printf_i>
 800439c:	e7e4      	b.n	8004368 <_vfiprintf_r+0x208>
 800439e:	bf00      	nop
 80043a0:	0800511c 	.word	0x0800511c
 80043a4:	0800513c 	.word	0x0800513c
 80043a8:	080050fc 	.word	0x080050fc
 80043ac:	080050c9 	.word	0x080050c9
 80043b0:	080050d3 	.word	0x080050d3
 80043b4:	00000000 	.word	0x00000000
 80043b8:	0800413b 	.word	0x0800413b
 80043bc:	080050cf 	.word	0x080050cf

080043c0 <_printf_common>:
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	4616      	mov	r6, r2
 80043c6:	4699      	mov	r9, r3
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bfb8      	it	lt
 80043d4:	4613      	movlt	r3, r2
 80043d6:	6033      	str	r3, [r6, #0]
 80043d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043dc:	4607      	mov	r7, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	b10a      	cbz	r2, 80043e6 <_printf_common+0x26>
 80043e2:	3301      	adds	r3, #1
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	0699      	lsls	r1, r3, #26
 80043ea:	bf42      	ittt	mi
 80043ec:	6833      	ldrmi	r3, [r6, #0]
 80043ee:	3302      	addmi	r3, #2
 80043f0:	6033      	strmi	r3, [r6, #0]
 80043f2:	6825      	ldr	r5, [r4, #0]
 80043f4:	f015 0506 	ands.w	r5, r5, #6
 80043f8:	d106      	bne.n	8004408 <_printf_common+0x48>
 80043fa:	f104 0a19 	add.w	sl, r4, #25
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	6832      	ldr	r2, [r6, #0]
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	42ab      	cmp	r3, r5
 8004406:	dc26      	bgt.n	8004456 <_printf_common+0x96>
 8004408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800440c:	1e13      	subs	r3, r2, #0
 800440e:	6822      	ldr	r2, [r4, #0]
 8004410:	bf18      	it	ne
 8004412:	2301      	movne	r3, #1
 8004414:	0692      	lsls	r2, r2, #26
 8004416:	d42b      	bmi.n	8004470 <_printf_common+0xb0>
 8004418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800441c:	4649      	mov	r1, r9
 800441e:	4638      	mov	r0, r7
 8004420:	47c0      	blx	r8
 8004422:	3001      	adds	r0, #1
 8004424:	d01e      	beq.n	8004464 <_printf_common+0xa4>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	68e5      	ldr	r5, [r4, #12]
 800442a:	6832      	ldr	r2, [r6, #0]
 800442c:	f003 0306 	and.w	r3, r3, #6
 8004430:	2b04      	cmp	r3, #4
 8004432:	bf08      	it	eq
 8004434:	1aad      	subeq	r5, r5, r2
 8004436:	68a3      	ldr	r3, [r4, #8]
 8004438:	6922      	ldr	r2, [r4, #16]
 800443a:	bf0c      	ite	eq
 800443c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004440:	2500      	movne	r5, #0
 8004442:	4293      	cmp	r3, r2
 8004444:	bfc4      	itt	gt
 8004446:	1a9b      	subgt	r3, r3, r2
 8004448:	18ed      	addgt	r5, r5, r3
 800444a:	2600      	movs	r6, #0
 800444c:	341a      	adds	r4, #26
 800444e:	42b5      	cmp	r5, r6
 8004450:	d11a      	bne.n	8004488 <_printf_common+0xc8>
 8004452:	2000      	movs	r0, #0
 8004454:	e008      	b.n	8004468 <_printf_common+0xa8>
 8004456:	2301      	movs	r3, #1
 8004458:	4652      	mov	r2, sl
 800445a:	4649      	mov	r1, r9
 800445c:	4638      	mov	r0, r7
 800445e:	47c0      	blx	r8
 8004460:	3001      	adds	r0, #1
 8004462:	d103      	bne.n	800446c <_printf_common+0xac>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	3501      	adds	r5, #1
 800446e:	e7c6      	b.n	80043fe <_printf_common+0x3e>
 8004470:	18e1      	adds	r1, r4, r3
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	2030      	movs	r0, #48	; 0x30
 8004476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800447a:	4422      	add	r2, r4
 800447c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004484:	3302      	adds	r3, #2
 8004486:	e7c7      	b.n	8004418 <_printf_common+0x58>
 8004488:	2301      	movs	r3, #1
 800448a:	4622      	mov	r2, r4
 800448c:	4649      	mov	r1, r9
 800448e:	4638      	mov	r0, r7
 8004490:	47c0      	blx	r8
 8004492:	3001      	adds	r0, #1
 8004494:	d0e6      	beq.n	8004464 <_printf_common+0xa4>
 8004496:	3601      	adds	r6, #1
 8004498:	e7d9      	b.n	800444e <_printf_common+0x8e>
	...

0800449c <_printf_i>:
 800449c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	7e0f      	ldrb	r7, [r1, #24]
 80044a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044a4:	2f78      	cmp	r7, #120	; 0x78
 80044a6:	4691      	mov	r9, r2
 80044a8:	4680      	mov	r8, r0
 80044aa:	460c      	mov	r4, r1
 80044ac:	469a      	mov	sl, r3
 80044ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044b2:	d807      	bhi.n	80044c4 <_printf_i+0x28>
 80044b4:	2f62      	cmp	r7, #98	; 0x62
 80044b6:	d80a      	bhi.n	80044ce <_printf_i+0x32>
 80044b8:	2f00      	cmp	r7, #0
 80044ba:	f000 80d8 	beq.w	800466e <_printf_i+0x1d2>
 80044be:	2f58      	cmp	r7, #88	; 0x58
 80044c0:	f000 80a3 	beq.w	800460a <_printf_i+0x16e>
 80044c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044cc:	e03a      	b.n	8004544 <_printf_i+0xa8>
 80044ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044d2:	2b15      	cmp	r3, #21
 80044d4:	d8f6      	bhi.n	80044c4 <_printf_i+0x28>
 80044d6:	a101      	add	r1, pc, #4	; (adr r1, 80044dc <_printf_i+0x40>)
 80044d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004549 	.word	0x08004549
 80044e4:	080044c5 	.word	0x080044c5
 80044e8:	080044c5 	.word	0x080044c5
 80044ec:	080044c5 	.word	0x080044c5
 80044f0:	080044c5 	.word	0x080044c5
 80044f4:	08004549 	.word	0x08004549
 80044f8:	080044c5 	.word	0x080044c5
 80044fc:	080044c5 	.word	0x080044c5
 8004500:	080044c5 	.word	0x080044c5
 8004504:	080044c5 	.word	0x080044c5
 8004508:	08004655 	.word	0x08004655
 800450c:	08004579 	.word	0x08004579
 8004510:	08004637 	.word	0x08004637
 8004514:	080044c5 	.word	0x080044c5
 8004518:	080044c5 	.word	0x080044c5
 800451c:	08004677 	.word	0x08004677
 8004520:	080044c5 	.word	0x080044c5
 8004524:	08004579 	.word	0x08004579
 8004528:	080044c5 	.word	0x080044c5
 800452c:	080044c5 	.word	0x080044c5
 8004530:	0800463f 	.word	0x0800463f
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	602a      	str	r2, [r5, #0]
 800453c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004544:	2301      	movs	r3, #1
 8004546:	e0a3      	b.n	8004690 <_printf_i+0x1f4>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	6829      	ldr	r1, [r5, #0]
 800454c:	0606      	lsls	r6, r0, #24
 800454e:	f101 0304 	add.w	r3, r1, #4
 8004552:	d50a      	bpl.n	800456a <_printf_i+0xce>
 8004554:	680e      	ldr	r6, [r1, #0]
 8004556:	602b      	str	r3, [r5, #0]
 8004558:	2e00      	cmp	r6, #0
 800455a:	da03      	bge.n	8004564 <_printf_i+0xc8>
 800455c:	232d      	movs	r3, #45	; 0x2d
 800455e:	4276      	negs	r6, r6
 8004560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004564:	485e      	ldr	r0, [pc, #376]	; (80046e0 <_printf_i+0x244>)
 8004566:	230a      	movs	r3, #10
 8004568:	e019      	b.n	800459e <_printf_i+0x102>
 800456a:	680e      	ldr	r6, [r1, #0]
 800456c:	602b      	str	r3, [r5, #0]
 800456e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004572:	bf18      	it	ne
 8004574:	b236      	sxthne	r6, r6
 8004576:	e7ef      	b.n	8004558 <_printf_i+0xbc>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	6820      	ldr	r0, [r4, #0]
 800457c:	1d19      	adds	r1, r3, #4
 800457e:	6029      	str	r1, [r5, #0]
 8004580:	0601      	lsls	r1, r0, #24
 8004582:	d501      	bpl.n	8004588 <_printf_i+0xec>
 8004584:	681e      	ldr	r6, [r3, #0]
 8004586:	e002      	b.n	800458e <_printf_i+0xf2>
 8004588:	0646      	lsls	r6, r0, #25
 800458a:	d5fb      	bpl.n	8004584 <_printf_i+0xe8>
 800458c:	881e      	ldrh	r6, [r3, #0]
 800458e:	4854      	ldr	r0, [pc, #336]	; (80046e0 <_printf_i+0x244>)
 8004590:	2f6f      	cmp	r7, #111	; 0x6f
 8004592:	bf0c      	ite	eq
 8004594:	2308      	moveq	r3, #8
 8004596:	230a      	movne	r3, #10
 8004598:	2100      	movs	r1, #0
 800459a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800459e:	6865      	ldr	r5, [r4, #4]
 80045a0:	60a5      	str	r5, [r4, #8]
 80045a2:	2d00      	cmp	r5, #0
 80045a4:	bfa2      	ittt	ge
 80045a6:	6821      	ldrge	r1, [r4, #0]
 80045a8:	f021 0104 	bicge.w	r1, r1, #4
 80045ac:	6021      	strge	r1, [r4, #0]
 80045ae:	b90e      	cbnz	r6, 80045b4 <_printf_i+0x118>
 80045b0:	2d00      	cmp	r5, #0
 80045b2:	d04d      	beq.n	8004650 <_printf_i+0x1b4>
 80045b4:	4615      	mov	r5, r2
 80045b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80045ba:	fb03 6711 	mls	r7, r3, r1, r6
 80045be:	5dc7      	ldrb	r7, [r0, r7]
 80045c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045c4:	4637      	mov	r7, r6
 80045c6:	42bb      	cmp	r3, r7
 80045c8:	460e      	mov	r6, r1
 80045ca:	d9f4      	bls.n	80045b6 <_printf_i+0x11a>
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d10b      	bne.n	80045e8 <_printf_i+0x14c>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	07de      	lsls	r6, r3, #31
 80045d4:	d508      	bpl.n	80045e8 <_printf_i+0x14c>
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	6861      	ldr	r1, [r4, #4]
 80045da:	4299      	cmp	r1, r3
 80045dc:	bfde      	ittt	le
 80045de:	2330      	movle	r3, #48	; 0x30
 80045e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045e8:	1b52      	subs	r2, r2, r5
 80045ea:	6122      	str	r2, [r4, #16]
 80045ec:	f8cd a000 	str.w	sl, [sp]
 80045f0:	464b      	mov	r3, r9
 80045f2:	aa03      	add	r2, sp, #12
 80045f4:	4621      	mov	r1, r4
 80045f6:	4640      	mov	r0, r8
 80045f8:	f7ff fee2 	bl	80043c0 <_printf_common>
 80045fc:	3001      	adds	r0, #1
 80045fe:	d14c      	bne.n	800469a <_printf_i+0x1fe>
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	b004      	add	sp, #16
 8004606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460a:	4835      	ldr	r0, [pc, #212]	; (80046e0 <_printf_i+0x244>)
 800460c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004610:	6829      	ldr	r1, [r5, #0]
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	f851 6b04 	ldr.w	r6, [r1], #4
 8004618:	6029      	str	r1, [r5, #0]
 800461a:	061d      	lsls	r5, r3, #24
 800461c:	d514      	bpl.n	8004648 <_printf_i+0x1ac>
 800461e:	07df      	lsls	r7, r3, #31
 8004620:	bf44      	itt	mi
 8004622:	f043 0320 	orrmi.w	r3, r3, #32
 8004626:	6023      	strmi	r3, [r4, #0]
 8004628:	b91e      	cbnz	r6, 8004632 <_printf_i+0x196>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	f023 0320 	bic.w	r3, r3, #32
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	2310      	movs	r3, #16
 8004634:	e7b0      	b.n	8004598 <_printf_i+0xfc>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	f043 0320 	orr.w	r3, r3, #32
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	2378      	movs	r3, #120	; 0x78
 8004640:	4828      	ldr	r0, [pc, #160]	; (80046e4 <_printf_i+0x248>)
 8004642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004646:	e7e3      	b.n	8004610 <_printf_i+0x174>
 8004648:	0659      	lsls	r1, r3, #25
 800464a:	bf48      	it	mi
 800464c:	b2b6      	uxthmi	r6, r6
 800464e:	e7e6      	b.n	800461e <_printf_i+0x182>
 8004650:	4615      	mov	r5, r2
 8004652:	e7bb      	b.n	80045cc <_printf_i+0x130>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	6826      	ldr	r6, [r4, #0]
 8004658:	6961      	ldr	r1, [r4, #20]
 800465a:	1d18      	adds	r0, r3, #4
 800465c:	6028      	str	r0, [r5, #0]
 800465e:	0635      	lsls	r5, r6, #24
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	d501      	bpl.n	8004668 <_printf_i+0x1cc>
 8004664:	6019      	str	r1, [r3, #0]
 8004666:	e002      	b.n	800466e <_printf_i+0x1d2>
 8004668:	0670      	lsls	r0, r6, #25
 800466a:	d5fb      	bpl.n	8004664 <_printf_i+0x1c8>
 800466c:	8019      	strh	r1, [r3, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	4615      	mov	r5, r2
 8004674:	e7ba      	b.n	80045ec <_printf_i+0x150>
 8004676:	682b      	ldr	r3, [r5, #0]
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	602a      	str	r2, [r5, #0]
 800467c:	681d      	ldr	r5, [r3, #0]
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	2100      	movs	r1, #0
 8004682:	4628      	mov	r0, r5
 8004684:	f7fb fdbc 	bl	8000200 <memchr>
 8004688:	b108      	cbz	r0, 800468e <_printf_i+0x1f2>
 800468a:	1b40      	subs	r0, r0, r5
 800468c:	6060      	str	r0, [r4, #4]
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	2300      	movs	r3, #0
 8004694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004698:	e7a8      	b.n	80045ec <_printf_i+0x150>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	462a      	mov	r2, r5
 800469e:	4649      	mov	r1, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	47d0      	blx	sl
 80046a4:	3001      	adds	r0, #1
 80046a6:	d0ab      	beq.n	8004600 <_printf_i+0x164>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	079b      	lsls	r3, r3, #30
 80046ac:	d413      	bmi.n	80046d6 <_printf_i+0x23a>
 80046ae:	68e0      	ldr	r0, [r4, #12]
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	4298      	cmp	r0, r3
 80046b4:	bfb8      	it	lt
 80046b6:	4618      	movlt	r0, r3
 80046b8:	e7a4      	b.n	8004604 <_printf_i+0x168>
 80046ba:	2301      	movs	r3, #1
 80046bc:	4632      	mov	r2, r6
 80046be:	4649      	mov	r1, r9
 80046c0:	4640      	mov	r0, r8
 80046c2:	47d0      	blx	sl
 80046c4:	3001      	adds	r0, #1
 80046c6:	d09b      	beq.n	8004600 <_printf_i+0x164>
 80046c8:	3501      	adds	r5, #1
 80046ca:	68e3      	ldr	r3, [r4, #12]
 80046cc:	9903      	ldr	r1, [sp, #12]
 80046ce:	1a5b      	subs	r3, r3, r1
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	dcf2      	bgt.n	80046ba <_printf_i+0x21e>
 80046d4:	e7eb      	b.n	80046ae <_printf_i+0x212>
 80046d6:	2500      	movs	r5, #0
 80046d8:	f104 0619 	add.w	r6, r4, #25
 80046dc:	e7f5      	b.n	80046ca <_printf_i+0x22e>
 80046de:	bf00      	nop
 80046e0:	080050da 	.word	0x080050da
 80046e4:	080050eb 	.word	0x080050eb

080046e8 <_sbrk_r>:
 80046e8:	b538      	push	{r3, r4, r5, lr}
 80046ea:	4d06      	ldr	r5, [pc, #24]	; (8004704 <_sbrk_r+0x1c>)
 80046ec:	2300      	movs	r3, #0
 80046ee:	4604      	mov	r4, r0
 80046f0:	4608      	mov	r0, r1
 80046f2:	602b      	str	r3, [r5, #0]
 80046f4:	f7fc fcf2 	bl	80010dc <_sbrk>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_sbrk_r+0x1a>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_sbrk_r+0x1a>
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	20000698 	.word	0x20000698

08004708 <__swbuf_r>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	460e      	mov	r6, r1
 800470c:	4614      	mov	r4, r2
 800470e:	4605      	mov	r5, r0
 8004710:	b118      	cbz	r0, 800471a <__swbuf_r+0x12>
 8004712:	6983      	ldr	r3, [r0, #24]
 8004714:	b90b      	cbnz	r3, 800471a <__swbuf_r+0x12>
 8004716:	f000 f9d9 	bl	8004acc <__sinit>
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <__swbuf_r+0x98>)
 800471c:	429c      	cmp	r4, r3
 800471e:	d12b      	bne.n	8004778 <__swbuf_r+0x70>
 8004720:	686c      	ldr	r4, [r5, #4]
 8004722:	69a3      	ldr	r3, [r4, #24]
 8004724:	60a3      	str	r3, [r4, #8]
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	071a      	lsls	r2, r3, #28
 800472a:	d52f      	bpl.n	800478c <__swbuf_r+0x84>
 800472c:	6923      	ldr	r3, [r4, #16]
 800472e:	b36b      	cbz	r3, 800478c <__swbuf_r+0x84>
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	6820      	ldr	r0, [r4, #0]
 8004734:	1ac0      	subs	r0, r0, r3
 8004736:	6963      	ldr	r3, [r4, #20]
 8004738:	b2f6      	uxtb	r6, r6
 800473a:	4283      	cmp	r3, r0
 800473c:	4637      	mov	r7, r6
 800473e:	dc04      	bgt.n	800474a <__swbuf_r+0x42>
 8004740:	4621      	mov	r1, r4
 8004742:	4628      	mov	r0, r5
 8004744:	f000 f92e 	bl	80049a4 <_fflush_r>
 8004748:	bb30      	cbnz	r0, 8004798 <__swbuf_r+0x90>
 800474a:	68a3      	ldr	r3, [r4, #8]
 800474c:	3b01      	subs	r3, #1
 800474e:	60a3      	str	r3, [r4, #8]
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	6022      	str	r2, [r4, #0]
 8004756:	701e      	strb	r6, [r3, #0]
 8004758:	6963      	ldr	r3, [r4, #20]
 800475a:	3001      	adds	r0, #1
 800475c:	4283      	cmp	r3, r0
 800475e:	d004      	beq.n	800476a <__swbuf_r+0x62>
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	07db      	lsls	r3, r3, #31
 8004764:	d506      	bpl.n	8004774 <__swbuf_r+0x6c>
 8004766:	2e0a      	cmp	r6, #10
 8004768:	d104      	bne.n	8004774 <__swbuf_r+0x6c>
 800476a:	4621      	mov	r1, r4
 800476c:	4628      	mov	r0, r5
 800476e:	f000 f919 	bl	80049a4 <_fflush_r>
 8004772:	b988      	cbnz	r0, 8004798 <__swbuf_r+0x90>
 8004774:	4638      	mov	r0, r7
 8004776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <__swbuf_r+0x9c>)
 800477a:	429c      	cmp	r4, r3
 800477c:	d101      	bne.n	8004782 <__swbuf_r+0x7a>
 800477e:	68ac      	ldr	r4, [r5, #8]
 8004780:	e7cf      	b.n	8004722 <__swbuf_r+0x1a>
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <__swbuf_r+0xa0>)
 8004784:	429c      	cmp	r4, r3
 8004786:	bf08      	it	eq
 8004788:	68ec      	ldreq	r4, [r5, #12]
 800478a:	e7ca      	b.n	8004722 <__swbuf_r+0x1a>
 800478c:	4621      	mov	r1, r4
 800478e:	4628      	mov	r0, r5
 8004790:	f000 f80c 	bl	80047ac <__swsetup_r>
 8004794:	2800      	cmp	r0, #0
 8004796:	d0cb      	beq.n	8004730 <__swbuf_r+0x28>
 8004798:	f04f 37ff 	mov.w	r7, #4294967295
 800479c:	e7ea      	b.n	8004774 <__swbuf_r+0x6c>
 800479e:	bf00      	nop
 80047a0:	0800511c 	.word	0x0800511c
 80047a4:	0800513c 	.word	0x0800513c
 80047a8:	080050fc 	.word	0x080050fc

080047ac <__swsetup_r>:
 80047ac:	4b32      	ldr	r3, [pc, #200]	; (8004878 <__swsetup_r+0xcc>)
 80047ae:	b570      	push	{r4, r5, r6, lr}
 80047b0:	681d      	ldr	r5, [r3, #0]
 80047b2:	4606      	mov	r6, r0
 80047b4:	460c      	mov	r4, r1
 80047b6:	b125      	cbz	r5, 80047c2 <__swsetup_r+0x16>
 80047b8:	69ab      	ldr	r3, [r5, #24]
 80047ba:	b913      	cbnz	r3, 80047c2 <__swsetup_r+0x16>
 80047bc:	4628      	mov	r0, r5
 80047be:	f000 f985 	bl	8004acc <__sinit>
 80047c2:	4b2e      	ldr	r3, [pc, #184]	; (800487c <__swsetup_r+0xd0>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	d10f      	bne.n	80047e8 <__swsetup_r+0x3c>
 80047c8:	686c      	ldr	r4, [r5, #4]
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047d0:	0719      	lsls	r1, r3, #28
 80047d2:	d42c      	bmi.n	800482e <__swsetup_r+0x82>
 80047d4:	06dd      	lsls	r5, r3, #27
 80047d6:	d411      	bmi.n	80047fc <__swsetup_r+0x50>
 80047d8:	2309      	movs	r3, #9
 80047da:	6033      	str	r3, [r6, #0]
 80047dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	f04f 30ff 	mov.w	r0, #4294967295
 80047e6:	e03e      	b.n	8004866 <__swsetup_r+0xba>
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <__swsetup_r+0xd4>)
 80047ea:	429c      	cmp	r4, r3
 80047ec:	d101      	bne.n	80047f2 <__swsetup_r+0x46>
 80047ee:	68ac      	ldr	r4, [r5, #8]
 80047f0:	e7eb      	b.n	80047ca <__swsetup_r+0x1e>
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <__swsetup_r+0xd8>)
 80047f4:	429c      	cmp	r4, r3
 80047f6:	bf08      	it	eq
 80047f8:	68ec      	ldreq	r4, [r5, #12]
 80047fa:	e7e6      	b.n	80047ca <__swsetup_r+0x1e>
 80047fc:	0758      	lsls	r0, r3, #29
 80047fe:	d512      	bpl.n	8004826 <__swsetup_r+0x7a>
 8004800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004802:	b141      	cbz	r1, 8004816 <__swsetup_r+0x6a>
 8004804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004808:	4299      	cmp	r1, r3
 800480a:	d002      	beq.n	8004812 <__swsetup_r+0x66>
 800480c:	4630      	mov	r0, r6
 800480e:	f7ff fb9d 	bl	8003f4c <_free_r>
 8004812:	2300      	movs	r3, #0
 8004814:	6363      	str	r3, [r4, #52]	; 0x34
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	2300      	movs	r3, #0
 8004820:	6063      	str	r3, [r4, #4]
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f043 0308 	orr.w	r3, r3, #8
 800482c:	81a3      	strh	r3, [r4, #12]
 800482e:	6923      	ldr	r3, [r4, #16]
 8004830:	b94b      	cbnz	r3, 8004846 <__swsetup_r+0x9a>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483c:	d003      	beq.n	8004846 <__swsetup_r+0x9a>
 800483e:	4621      	mov	r1, r4
 8004840:	4630      	mov	r0, r6
 8004842:	f000 fa09 	bl	8004c58 <__smakebuf_r>
 8004846:	89a0      	ldrh	r0, [r4, #12]
 8004848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800484c:	f010 0301 	ands.w	r3, r0, #1
 8004850:	d00a      	beq.n	8004868 <__swsetup_r+0xbc>
 8004852:	2300      	movs	r3, #0
 8004854:	60a3      	str	r3, [r4, #8]
 8004856:	6963      	ldr	r3, [r4, #20]
 8004858:	425b      	negs	r3, r3
 800485a:	61a3      	str	r3, [r4, #24]
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	b943      	cbnz	r3, 8004872 <__swsetup_r+0xc6>
 8004860:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004864:	d1ba      	bne.n	80047dc <__swsetup_r+0x30>
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	0781      	lsls	r1, r0, #30
 800486a:	bf58      	it	pl
 800486c:	6963      	ldrpl	r3, [r4, #20]
 800486e:	60a3      	str	r3, [r4, #8]
 8004870:	e7f4      	b.n	800485c <__swsetup_r+0xb0>
 8004872:	2000      	movs	r0, #0
 8004874:	e7f7      	b.n	8004866 <__swsetup_r+0xba>
 8004876:	bf00      	nop
 8004878:	2000000c 	.word	0x2000000c
 800487c:	0800511c 	.word	0x0800511c
 8004880:	0800513c 	.word	0x0800513c
 8004884:	080050fc 	.word	0x080050fc

08004888 <abort>:
 8004888:	b508      	push	{r3, lr}
 800488a:	2006      	movs	r0, #6
 800488c:	f000 fa58 	bl	8004d40 <raise>
 8004890:	2001      	movs	r0, #1
 8004892:	f7fc fbab 	bl	8000fec <_exit>
	...

08004898 <__sflush_r>:
 8004898:	898a      	ldrh	r2, [r1, #12]
 800489a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800489e:	4605      	mov	r5, r0
 80048a0:	0710      	lsls	r0, r2, #28
 80048a2:	460c      	mov	r4, r1
 80048a4:	d458      	bmi.n	8004958 <__sflush_r+0xc0>
 80048a6:	684b      	ldr	r3, [r1, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dc05      	bgt.n	80048b8 <__sflush_r+0x20>
 80048ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dc02      	bgt.n	80048b8 <__sflush_r+0x20>
 80048b2:	2000      	movs	r0, #0
 80048b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ba:	2e00      	cmp	r6, #0
 80048bc:	d0f9      	beq.n	80048b2 <__sflush_r+0x1a>
 80048be:	2300      	movs	r3, #0
 80048c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048c4:	682f      	ldr	r7, [r5, #0]
 80048c6:	602b      	str	r3, [r5, #0]
 80048c8:	d032      	beq.n	8004930 <__sflush_r+0x98>
 80048ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	075a      	lsls	r2, r3, #29
 80048d0:	d505      	bpl.n	80048de <__sflush_r+0x46>
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	1ac0      	subs	r0, r0, r3
 80048d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048d8:	b10b      	cbz	r3, 80048de <__sflush_r+0x46>
 80048da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048dc:	1ac0      	subs	r0, r0, r3
 80048de:	2300      	movs	r3, #0
 80048e0:	4602      	mov	r2, r0
 80048e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048e4:	6a21      	ldr	r1, [r4, #32]
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b0      	blx	r6
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	d106      	bne.n	80048fe <__sflush_r+0x66>
 80048f0:	6829      	ldr	r1, [r5, #0]
 80048f2:	291d      	cmp	r1, #29
 80048f4:	d82c      	bhi.n	8004950 <__sflush_r+0xb8>
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <__sflush_r+0x108>)
 80048f8:	40ca      	lsrs	r2, r1
 80048fa:	07d6      	lsls	r6, r2, #31
 80048fc:	d528      	bpl.n	8004950 <__sflush_r+0xb8>
 80048fe:	2200      	movs	r2, #0
 8004900:	6062      	str	r2, [r4, #4]
 8004902:	04d9      	lsls	r1, r3, #19
 8004904:	6922      	ldr	r2, [r4, #16]
 8004906:	6022      	str	r2, [r4, #0]
 8004908:	d504      	bpl.n	8004914 <__sflush_r+0x7c>
 800490a:	1c42      	adds	r2, r0, #1
 800490c:	d101      	bne.n	8004912 <__sflush_r+0x7a>
 800490e:	682b      	ldr	r3, [r5, #0]
 8004910:	b903      	cbnz	r3, 8004914 <__sflush_r+0x7c>
 8004912:	6560      	str	r0, [r4, #84]	; 0x54
 8004914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004916:	602f      	str	r7, [r5, #0]
 8004918:	2900      	cmp	r1, #0
 800491a:	d0ca      	beq.n	80048b2 <__sflush_r+0x1a>
 800491c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004920:	4299      	cmp	r1, r3
 8004922:	d002      	beq.n	800492a <__sflush_r+0x92>
 8004924:	4628      	mov	r0, r5
 8004926:	f7ff fb11 	bl	8003f4c <_free_r>
 800492a:	2000      	movs	r0, #0
 800492c:	6360      	str	r0, [r4, #52]	; 0x34
 800492e:	e7c1      	b.n	80048b4 <__sflush_r+0x1c>
 8004930:	6a21      	ldr	r1, [r4, #32]
 8004932:	2301      	movs	r3, #1
 8004934:	4628      	mov	r0, r5
 8004936:	47b0      	blx	r6
 8004938:	1c41      	adds	r1, r0, #1
 800493a:	d1c7      	bne.n	80048cc <__sflush_r+0x34>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0c4      	beq.n	80048cc <__sflush_r+0x34>
 8004942:	2b1d      	cmp	r3, #29
 8004944:	d001      	beq.n	800494a <__sflush_r+0xb2>
 8004946:	2b16      	cmp	r3, #22
 8004948:	d101      	bne.n	800494e <__sflush_r+0xb6>
 800494a:	602f      	str	r7, [r5, #0]
 800494c:	e7b1      	b.n	80048b2 <__sflush_r+0x1a>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	e7ad      	b.n	80048b4 <__sflush_r+0x1c>
 8004958:	690f      	ldr	r7, [r1, #16]
 800495a:	2f00      	cmp	r7, #0
 800495c:	d0a9      	beq.n	80048b2 <__sflush_r+0x1a>
 800495e:	0793      	lsls	r3, r2, #30
 8004960:	680e      	ldr	r6, [r1, #0]
 8004962:	bf08      	it	eq
 8004964:	694b      	ldreq	r3, [r1, #20]
 8004966:	600f      	str	r7, [r1, #0]
 8004968:	bf18      	it	ne
 800496a:	2300      	movne	r3, #0
 800496c:	eba6 0807 	sub.w	r8, r6, r7
 8004970:	608b      	str	r3, [r1, #8]
 8004972:	f1b8 0f00 	cmp.w	r8, #0
 8004976:	dd9c      	ble.n	80048b2 <__sflush_r+0x1a>
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800497c:	4643      	mov	r3, r8
 800497e:	463a      	mov	r2, r7
 8004980:	4628      	mov	r0, r5
 8004982:	47b0      	blx	r6
 8004984:	2800      	cmp	r0, #0
 8004986:	dc06      	bgt.n	8004996 <__sflush_r+0xfe>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	e78e      	b.n	80048b4 <__sflush_r+0x1c>
 8004996:	4407      	add	r7, r0
 8004998:	eba8 0800 	sub.w	r8, r8, r0
 800499c:	e7e9      	b.n	8004972 <__sflush_r+0xda>
 800499e:	bf00      	nop
 80049a0:	20400001 	.word	0x20400001

080049a4 <_fflush_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	690b      	ldr	r3, [r1, #16]
 80049a8:	4605      	mov	r5, r0
 80049aa:	460c      	mov	r4, r1
 80049ac:	b913      	cbnz	r3, 80049b4 <_fflush_r+0x10>
 80049ae:	2500      	movs	r5, #0
 80049b0:	4628      	mov	r0, r5
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	b118      	cbz	r0, 80049be <_fflush_r+0x1a>
 80049b6:	6983      	ldr	r3, [r0, #24]
 80049b8:	b90b      	cbnz	r3, 80049be <_fflush_r+0x1a>
 80049ba:	f000 f887 	bl	8004acc <__sinit>
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <_fflush_r+0x6c>)
 80049c0:	429c      	cmp	r4, r3
 80049c2:	d11b      	bne.n	80049fc <_fflush_r+0x58>
 80049c4:	686c      	ldr	r4, [r5, #4]
 80049c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ef      	beq.n	80049ae <_fflush_r+0xa>
 80049ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d0:	07d0      	lsls	r0, r2, #31
 80049d2:	d404      	bmi.n	80049de <_fflush_r+0x3a>
 80049d4:	0599      	lsls	r1, r3, #22
 80049d6:	d402      	bmi.n	80049de <_fflush_r+0x3a>
 80049d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049da:	f000 f915 	bl	8004c08 <__retarget_lock_acquire_recursive>
 80049de:	4628      	mov	r0, r5
 80049e0:	4621      	mov	r1, r4
 80049e2:	f7ff ff59 	bl	8004898 <__sflush_r>
 80049e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e8:	07da      	lsls	r2, r3, #31
 80049ea:	4605      	mov	r5, r0
 80049ec:	d4e0      	bmi.n	80049b0 <_fflush_r+0xc>
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	059b      	lsls	r3, r3, #22
 80049f2:	d4dd      	bmi.n	80049b0 <_fflush_r+0xc>
 80049f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f6:	f000 f908 	bl	8004c0a <__retarget_lock_release_recursive>
 80049fa:	e7d9      	b.n	80049b0 <_fflush_r+0xc>
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <_fflush_r+0x70>)
 80049fe:	429c      	cmp	r4, r3
 8004a00:	d101      	bne.n	8004a06 <_fflush_r+0x62>
 8004a02:	68ac      	ldr	r4, [r5, #8]
 8004a04:	e7df      	b.n	80049c6 <_fflush_r+0x22>
 8004a06:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <_fflush_r+0x74>)
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	bf08      	it	eq
 8004a0c:	68ec      	ldreq	r4, [r5, #12]
 8004a0e:	e7da      	b.n	80049c6 <_fflush_r+0x22>
 8004a10:	0800511c 	.word	0x0800511c
 8004a14:	0800513c 	.word	0x0800513c
 8004a18:	080050fc 	.word	0x080050fc

08004a1c <std>:
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	b510      	push	{r4, lr}
 8004a20:	4604      	mov	r4, r0
 8004a22:	e9c0 3300 	strd	r3, r3, [r0]
 8004a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a2a:	6083      	str	r3, [r0, #8]
 8004a2c:	8181      	strh	r1, [r0, #12]
 8004a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a30:	81c2      	strh	r2, [r0, #14]
 8004a32:	6183      	str	r3, [r0, #24]
 8004a34:	4619      	mov	r1, r3
 8004a36:	2208      	movs	r2, #8
 8004a38:	305c      	adds	r0, #92	; 0x5c
 8004a3a:	f7ff f8ad 	bl	8003b98 <memset>
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <std+0x38>)
 8004a40:	6263      	str	r3, [r4, #36]	; 0x24
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <std+0x3c>)
 8004a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <std+0x40>)
 8004a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <std+0x44>)
 8004a4c:	6224      	str	r4, [r4, #32]
 8004a4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	bf00      	nop
 8004a54:	08004d79 	.word	0x08004d79
 8004a58:	08004d9b 	.word	0x08004d9b
 8004a5c:	08004dd3 	.word	0x08004dd3
 8004a60:	08004df7 	.word	0x08004df7

08004a64 <_cleanup_r>:
 8004a64:	4901      	ldr	r1, [pc, #4]	; (8004a6c <_cleanup_r+0x8>)
 8004a66:	f000 b8af 	b.w	8004bc8 <_fwalk_reent>
 8004a6a:	bf00      	nop
 8004a6c:	080049a5 	.word	0x080049a5

08004a70 <__sfmoreglue>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	2268      	movs	r2, #104	; 0x68
 8004a74:	1e4d      	subs	r5, r1, #1
 8004a76:	4355      	muls	r5, r2
 8004a78:	460e      	mov	r6, r1
 8004a7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a7e:	f7ff fad1 	bl	8004024 <_malloc_r>
 8004a82:	4604      	mov	r4, r0
 8004a84:	b140      	cbz	r0, 8004a98 <__sfmoreglue+0x28>
 8004a86:	2100      	movs	r1, #0
 8004a88:	e9c0 1600 	strd	r1, r6, [r0]
 8004a8c:	300c      	adds	r0, #12
 8004a8e:	60a0      	str	r0, [r4, #8]
 8004a90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a94:	f7ff f880 	bl	8003b98 <memset>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}

08004a9c <__sfp_lock_acquire>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	; (8004aa4 <__sfp_lock_acquire+0x8>)
 8004a9e:	f000 b8b3 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	20000695 	.word	0x20000695

08004aa8 <__sfp_lock_release>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	; (8004ab0 <__sfp_lock_release+0x8>)
 8004aaa:	f000 b8ae 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004aae:	bf00      	nop
 8004ab0:	20000695 	.word	0x20000695

08004ab4 <__sinit_lock_acquire>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <__sinit_lock_acquire+0x8>)
 8004ab6:	f000 b8a7 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004aba:	bf00      	nop
 8004abc:	20000696 	.word	0x20000696

08004ac0 <__sinit_lock_release>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__sinit_lock_release+0x8>)
 8004ac2:	f000 b8a2 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	20000696 	.word	0x20000696

08004acc <__sinit>:
 8004acc:	b510      	push	{r4, lr}
 8004ace:	4604      	mov	r4, r0
 8004ad0:	f7ff fff0 	bl	8004ab4 <__sinit_lock_acquire>
 8004ad4:	69a3      	ldr	r3, [r4, #24]
 8004ad6:	b11b      	cbz	r3, 8004ae0 <__sinit+0x14>
 8004ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004adc:	f7ff bff0 	b.w	8004ac0 <__sinit_lock_release>
 8004ae0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ae4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <__sinit+0x68>)
 8004ae8:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <__sinit+0x6c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	62a2      	str	r2, [r4, #40]	; 0x28
 8004aee:	42a3      	cmp	r3, r4
 8004af0:	bf04      	itt	eq
 8004af2:	2301      	moveq	r3, #1
 8004af4:	61a3      	streq	r3, [r4, #24]
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 f820 	bl	8004b3c <__sfp>
 8004afc:	6060      	str	r0, [r4, #4]
 8004afe:	4620      	mov	r0, r4
 8004b00:	f000 f81c 	bl	8004b3c <__sfp>
 8004b04:	60a0      	str	r0, [r4, #8]
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 f818 	bl	8004b3c <__sfp>
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60e0      	str	r0, [r4, #12]
 8004b10:	2104      	movs	r1, #4
 8004b12:	6860      	ldr	r0, [r4, #4]
 8004b14:	f7ff ff82 	bl	8004a1c <std>
 8004b18:	68a0      	ldr	r0, [r4, #8]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	2109      	movs	r1, #9
 8004b1e:	f7ff ff7d 	bl	8004a1c <std>
 8004b22:	68e0      	ldr	r0, [r4, #12]
 8004b24:	2202      	movs	r2, #2
 8004b26:	2112      	movs	r1, #18
 8004b28:	f7ff ff78 	bl	8004a1c <std>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	61a3      	str	r3, [r4, #24]
 8004b30:	e7d2      	b.n	8004ad8 <__sinit+0xc>
 8004b32:	bf00      	nop
 8004b34:	08004f14 	.word	0x08004f14
 8004b38:	08004a65 	.word	0x08004a65

08004b3c <__sfp>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	4607      	mov	r7, r0
 8004b40:	f7ff ffac 	bl	8004a9c <__sfp_lock_acquire>
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <__sfp+0x84>)
 8004b46:	681e      	ldr	r6, [r3, #0]
 8004b48:	69b3      	ldr	r3, [r6, #24]
 8004b4a:	b913      	cbnz	r3, 8004b52 <__sfp+0x16>
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f7ff ffbd 	bl	8004acc <__sinit>
 8004b52:	3648      	adds	r6, #72	; 0x48
 8004b54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	d503      	bpl.n	8004b64 <__sfp+0x28>
 8004b5c:	6833      	ldr	r3, [r6, #0]
 8004b5e:	b30b      	cbz	r3, 8004ba4 <__sfp+0x68>
 8004b60:	6836      	ldr	r6, [r6, #0]
 8004b62:	e7f7      	b.n	8004b54 <__sfp+0x18>
 8004b64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b68:	b9d5      	cbnz	r5, 8004ba0 <__sfp+0x64>
 8004b6a:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <__sfp+0x88>)
 8004b6c:	60e3      	str	r3, [r4, #12]
 8004b6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b72:	6665      	str	r5, [r4, #100]	; 0x64
 8004b74:	f000 f847 	bl	8004c06 <__retarget_lock_init_recursive>
 8004b78:	f7ff ff96 	bl	8004aa8 <__sfp_lock_release>
 8004b7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b84:	6025      	str	r5, [r4, #0]
 8004b86:	61a5      	str	r5, [r4, #24]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b90:	f7ff f802 	bl	8003b98 <memset>
 8004b94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba0:	3468      	adds	r4, #104	; 0x68
 8004ba2:	e7d9      	b.n	8004b58 <__sfp+0x1c>
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	f7ff ff62 	bl	8004a70 <__sfmoreglue>
 8004bac:	4604      	mov	r4, r0
 8004bae:	6030      	str	r0, [r6, #0]
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d1d5      	bne.n	8004b60 <__sfp+0x24>
 8004bb4:	f7ff ff78 	bl	8004aa8 <__sfp_lock_release>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	e7ee      	b.n	8004b9c <__sfp+0x60>
 8004bbe:	bf00      	nop
 8004bc0:	08004f14 	.word	0x08004f14
 8004bc4:	ffff0001 	.word	0xffff0001

08004bc8 <_fwalk_reent>:
 8004bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bcc:	4606      	mov	r6, r0
 8004bce:	4688      	mov	r8, r1
 8004bd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bd4:	2700      	movs	r7, #0
 8004bd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bda:	f1b9 0901 	subs.w	r9, r9, #1
 8004bde:	d505      	bpl.n	8004bec <_fwalk_reent+0x24>
 8004be0:	6824      	ldr	r4, [r4, #0]
 8004be2:	2c00      	cmp	r4, #0
 8004be4:	d1f7      	bne.n	8004bd6 <_fwalk_reent+0xe>
 8004be6:	4638      	mov	r0, r7
 8004be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bec:	89ab      	ldrh	r3, [r5, #12]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d907      	bls.n	8004c02 <_fwalk_reent+0x3a>
 8004bf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	d003      	beq.n	8004c02 <_fwalk_reent+0x3a>
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	47c0      	blx	r8
 8004c00:	4307      	orrs	r7, r0
 8004c02:	3568      	adds	r5, #104	; 0x68
 8004c04:	e7e9      	b.n	8004bda <_fwalk_reent+0x12>

08004c06 <__retarget_lock_init_recursive>:
 8004c06:	4770      	bx	lr

08004c08 <__retarget_lock_acquire_recursive>:
 8004c08:	4770      	bx	lr

08004c0a <__retarget_lock_release_recursive>:
 8004c0a:	4770      	bx	lr

08004c0c <__swhatbuf_r>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	460e      	mov	r6, r1
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	2900      	cmp	r1, #0
 8004c16:	b096      	sub	sp, #88	; 0x58
 8004c18:	4614      	mov	r4, r2
 8004c1a:	461d      	mov	r5, r3
 8004c1c:	da08      	bge.n	8004c30 <__swhatbuf_r+0x24>
 8004c1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	602a      	str	r2, [r5, #0]
 8004c26:	061a      	lsls	r2, r3, #24
 8004c28:	d410      	bmi.n	8004c4c <__swhatbuf_r+0x40>
 8004c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2e:	e00e      	b.n	8004c4e <__swhatbuf_r+0x42>
 8004c30:	466a      	mov	r2, sp
 8004c32:	f000 f907 	bl	8004e44 <_fstat_r>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	dbf1      	blt.n	8004c1e <__swhatbuf_r+0x12>
 8004c3a:	9a01      	ldr	r2, [sp, #4]
 8004c3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c44:	425a      	negs	r2, r3
 8004c46:	415a      	adcs	r2, r3
 8004c48:	602a      	str	r2, [r5, #0]
 8004c4a:	e7ee      	b.n	8004c2a <__swhatbuf_r+0x1e>
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	2000      	movs	r0, #0
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	b016      	add	sp, #88	; 0x58
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c58 <__smakebuf_r>:
 8004c58:	898b      	ldrh	r3, [r1, #12]
 8004c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c5c:	079d      	lsls	r5, r3, #30
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460c      	mov	r4, r1
 8004c62:	d507      	bpl.n	8004c74 <__smakebuf_r+0x1c>
 8004c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	6163      	str	r3, [r4, #20]
 8004c70:	b002      	add	sp, #8
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	ab01      	add	r3, sp, #4
 8004c76:	466a      	mov	r2, sp
 8004c78:	f7ff ffc8 	bl	8004c0c <__swhatbuf_r>
 8004c7c:	9900      	ldr	r1, [sp, #0]
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4630      	mov	r0, r6
 8004c82:	f7ff f9cf 	bl	8004024 <_malloc_r>
 8004c86:	b948      	cbnz	r0, 8004c9c <__smakebuf_r+0x44>
 8004c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8c:	059a      	lsls	r2, r3, #22
 8004c8e:	d4ef      	bmi.n	8004c70 <__smakebuf_r+0x18>
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	e7e3      	b.n	8004c64 <__smakebuf_r+0xc>
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <__smakebuf_r+0x7c>)
 8004c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	6020      	str	r0, [r4, #0]
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	9b00      	ldr	r3, [sp, #0]
 8004cac:	6163      	str	r3, [r4, #20]
 8004cae:	9b01      	ldr	r3, [sp, #4]
 8004cb0:	6120      	str	r0, [r4, #16]
 8004cb2:	b15b      	cbz	r3, 8004ccc <__smakebuf_r+0x74>
 8004cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f000 f8d5 	bl	8004e68 <_isatty_r>
 8004cbe:	b128      	cbz	r0, 8004ccc <__smakebuf_r+0x74>
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	89a0      	ldrh	r0, [r4, #12]
 8004cce:	4305      	orrs	r5, r0
 8004cd0:	81a5      	strh	r5, [r4, #12]
 8004cd2:	e7cd      	b.n	8004c70 <__smakebuf_r+0x18>
 8004cd4:	08004a65 	.word	0x08004a65

08004cd8 <__malloc_lock>:
 8004cd8:	4801      	ldr	r0, [pc, #4]	; (8004ce0 <__malloc_lock+0x8>)
 8004cda:	f7ff bf95 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004cde:	bf00      	nop
 8004ce0:	20000694 	.word	0x20000694

08004ce4 <__malloc_unlock>:
 8004ce4:	4801      	ldr	r0, [pc, #4]	; (8004cec <__malloc_unlock+0x8>)
 8004ce6:	f7ff bf90 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004cea:	bf00      	nop
 8004cec:	20000694 	.word	0x20000694

08004cf0 <_raise_r>:
 8004cf0:	291f      	cmp	r1, #31
 8004cf2:	b538      	push	{r3, r4, r5, lr}
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	d904      	bls.n	8004d04 <_raise_r+0x14>
 8004cfa:	2316      	movs	r3, #22
 8004cfc:	6003      	str	r3, [r0, #0]
 8004cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8004d02:	bd38      	pop	{r3, r4, r5, pc}
 8004d04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d06:	b112      	cbz	r2, 8004d0e <_raise_r+0x1e>
 8004d08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d0c:	b94b      	cbnz	r3, 8004d22 <_raise_r+0x32>
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f000 f830 	bl	8004d74 <_getpid_r>
 8004d14:	462a      	mov	r2, r5
 8004d16:	4601      	mov	r1, r0
 8004d18:	4620      	mov	r0, r4
 8004d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d1e:	f000 b817 	b.w	8004d50 <_kill_r>
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d00a      	beq.n	8004d3c <_raise_r+0x4c>
 8004d26:	1c59      	adds	r1, r3, #1
 8004d28:	d103      	bne.n	8004d32 <_raise_r+0x42>
 8004d2a:	2316      	movs	r3, #22
 8004d2c:	6003      	str	r3, [r0, #0]
 8004d2e:	2001      	movs	r0, #1
 8004d30:	e7e7      	b.n	8004d02 <_raise_r+0x12>
 8004d32:	2400      	movs	r4, #0
 8004d34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004d38:	4628      	mov	r0, r5
 8004d3a:	4798      	blx	r3
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e7e0      	b.n	8004d02 <_raise_r+0x12>

08004d40 <raise>:
 8004d40:	4b02      	ldr	r3, [pc, #8]	; (8004d4c <raise+0xc>)
 8004d42:	4601      	mov	r1, r0
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	f7ff bfd3 	b.w	8004cf0 <_raise_r>
 8004d4a:	bf00      	nop
 8004d4c:	2000000c 	.word	0x2000000c

08004d50 <_kill_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4d07      	ldr	r5, [pc, #28]	; (8004d70 <_kill_r+0x20>)
 8004d54:	2300      	movs	r3, #0
 8004d56:	4604      	mov	r4, r0
 8004d58:	4608      	mov	r0, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	602b      	str	r3, [r5, #0]
 8004d5e:	f7fc f935 	bl	8000fcc <_kill>
 8004d62:	1c43      	adds	r3, r0, #1
 8004d64:	d102      	bne.n	8004d6c <_kill_r+0x1c>
 8004d66:	682b      	ldr	r3, [r5, #0]
 8004d68:	b103      	cbz	r3, 8004d6c <_kill_r+0x1c>
 8004d6a:	6023      	str	r3, [r4, #0]
 8004d6c:	bd38      	pop	{r3, r4, r5, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000698 	.word	0x20000698

08004d74 <_getpid_r>:
 8004d74:	f7fc b922 	b.w	8000fbc <_getpid>

08004d78 <__sread>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d80:	f000 f894 	bl	8004eac <_read_r>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	bfab      	itete	ge
 8004d88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d8c:	181b      	addge	r3, r3, r0
 8004d8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d92:	bfac      	ite	ge
 8004d94:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d96:	81a3      	strhlt	r3, [r4, #12]
 8004d98:	bd10      	pop	{r4, pc}

08004d9a <__swrite>:
 8004d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9e:	461f      	mov	r7, r3
 8004da0:	898b      	ldrh	r3, [r1, #12]
 8004da2:	05db      	lsls	r3, r3, #23
 8004da4:	4605      	mov	r5, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	4616      	mov	r6, r2
 8004daa:	d505      	bpl.n	8004db8 <__swrite+0x1e>
 8004dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db0:	2302      	movs	r3, #2
 8004db2:	2200      	movs	r2, #0
 8004db4:	f000 f868 	bl	8004e88 <_lseek_r>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	4632      	mov	r2, r6
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	4628      	mov	r0, r5
 8004dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dce:	f000 b817 	b.w	8004e00 <_write_r>

08004dd2 <__sseek>:
 8004dd2:	b510      	push	{r4, lr}
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dda:	f000 f855 	bl	8004e88 <_lseek_r>
 8004dde:	1c43      	adds	r3, r0, #1
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	bf15      	itete	ne
 8004de4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004de6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dee:	81a3      	strheq	r3, [r4, #12]
 8004df0:	bf18      	it	ne
 8004df2:	81a3      	strhne	r3, [r4, #12]
 8004df4:	bd10      	pop	{r4, pc}

08004df6 <__sclose>:
 8004df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfa:	f000 b813 	b.w	8004e24 <_close_r>
	...

08004e00 <_write_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d07      	ldr	r5, [pc, #28]	; (8004e20 <_write_r+0x20>)
 8004e04:	4604      	mov	r4, r0
 8004e06:	4608      	mov	r0, r1
 8004e08:	4611      	mov	r1, r2
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	602a      	str	r2, [r5, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f7fc f913 	bl	800103a <_write>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_write_r+0x1e>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_write_r+0x1e>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	20000698 	.word	0x20000698

08004e24 <_close_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d06      	ldr	r5, [pc, #24]	; (8004e40 <_close_r+0x1c>)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	602b      	str	r3, [r5, #0]
 8004e30:	f7fc f91f 	bl	8001072 <_close>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_close_r+0x1a>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_close_r+0x1a>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	20000698 	.word	0x20000698

08004e44 <_fstat_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d07      	ldr	r5, [pc, #28]	; (8004e64 <_fstat_r+0x20>)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	602b      	str	r3, [r5, #0]
 8004e52:	f7fc f91a 	bl	800108a <_fstat>
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	d102      	bne.n	8004e60 <_fstat_r+0x1c>
 8004e5a:	682b      	ldr	r3, [r5, #0]
 8004e5c:	b103      	cbz	r3, 8004e60 <_fstat_r+0x1c>
 8004e5e:	6023      	str	r3, [r4, #0]
 8004e60:	bd38      	pop	{r3, r4, r5, pc}
 8004e62:	bf00      	nop
 8004e64:	20000698 	.word	0x20000698

08004e68 <_isatty_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	4d06      	ldr	r5, [pc, #24]	; (8004e84 <_isatty_r+0x1c>)
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	602b      	str	r3, [r5, #0]
 8004e74:	f7fc f919 	bl	80010aa <_isatty>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_isatty_r+0x1a>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_isatty_r+0x1a>
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	20000698 	.word	0x20000698

08004e88 <_lseek_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4d07      	ldr	r5, [pc, #28]	; (8004ea8 <_lseek_r+0x20>)
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	4608      	mov	r0, r1
 8004e90:	4611      	mov	r1, r2
 8004e92:	2200      	movs	r2, #0
 8004e94:	602a      	str	r2, [r5, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f7fc f912 	bl	80010c0 <_lseek>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d102      	bne.n	8004ea6 <_lseek_r+0x1e>
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	b103      	cbz	r3, 8004ea6 <_lseek_r+0x1e>
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	20000698 	.word	0x20000698

08004eac <_read_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4d07      	ldr	r5, [pc, #28]	; (8004ecc <_read_r+0x20>)
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	4608      	mov	r0, r1
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	602a      	str	r2, [r5, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f7fc f8a0 	bl	8001000 <_read>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d102      	bne.n	8004eca <_read_r+0x1e>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	b103      	cbz	r3, 8004eca <_read_r+0x1e>
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	20000698 	.word	0x20000698

08004ed0 <_init>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	bf00      	nop
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr

08004edc <_fini>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr
