
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ff4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08009198  08009198  00019198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009618  08009618  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009618  08009618  00019618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009620  08009620  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  20000074  0800969c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800969c  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010782  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002433  00000000  00000000  00030826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00032c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00033ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176aa  00000000  00000000  00034868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010187  00000000  00000000  0004bf12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905af  00000000  00000000  0005c099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec648  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf0  00000000  00000000  000ec698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800917c 	.word	0x0800917c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800917c 	.word	0x0800917c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c90:	f000 b974 	b.w	8000f7c <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9d08      	ldr	r5, [sp, #32]
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	468e      	mov	lr, r1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d14d      	bne.n	8000d56 <__udivmoddi4+0xaa>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	d969      	bls.n	8000d94 <__udivmoddi4+0xe8>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b152      	cbz	r2, 8000cdc <__udivmoddi4+0x30>
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	f1c2 0120 	rsb	r1, r2, #32
 8000cce:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cda:	4094      	lsls	r4, r2
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	0c21      	lsrs	r1, r4, #16
 8000ce2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce6:	fa1f f78c 	uxth.w	r7, ip
 8000cea:	fb08 e316 	mls	r3, r8, r6, lr
 8000cee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cf2:	fb06 f107 	mul.w	r1, r6, r7
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d02:	f080 811f 	bcs.w	8000f44 <__udivmoddi4+0x298>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 811c 	bls.w	8000f44 <__udivmoddi4+0x298>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d18:	fb08 3310 	mls	r3, r8, r0, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb00 f707 	mul.w	r7, r0, r7
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	d90a      	bls.n	8000d3e <__udivmoddi4+0x92>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d30:	f080 810a 	bcs.w	8000f48 <__udivmoddi4+0x29c>
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	f240 8107 	bls.w	8000f48 <__udivmoddi4+0x29c>
 8000d3a:	4464      	add	r4, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	1be4      	subs	r4, r4, r7
 8000d44:	2600      	movs	r6, #0
 8000d46:	b11d      	cbz	r5, 8000d50 <__udivmoddi4+0xa4>
 8000d48:	40d4      	lsrs	r4, r2
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0xc2>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80ef 	beq.w	8000f3e <__udivmoddi4+0x292>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x160>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xd4>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80f9 	bhi.w	8000f72 <__udivmoddi4+0x2c6>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0303 	sbc.w	r3, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	469e      	mov	lr, r3
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e0      	beq.n	8000d50 <__udivmoddi4+0xa4>
 8000d8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d92:	e7dd      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000d94:	b902      	cbnz	r2, 8000d98 <__udivmoddi4+0xec>
 8000d96:	deff      	udf	#255	; 0xff
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	f040 8092 	bne.w	8000ec6 <__udivmoddi4+0x21a>
 8000da2:	eba1 010c 	sub.w	r1, r1, ip
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f fe8c 	uxth.w	lr, ip
 8000dae:	2601      	movs	r6, #1
 8000db0:	0c20      	lsrs	r0, r4, #16
 8000db2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbe:	fb0e f003 	mul.w	r0, lr, r3
 8000dc2:	4288      	cmp	r0, r1
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x12c>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x12a>
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	f200 80cb 	bhi.w	8000f6c <__udivmoddi4+0x2c0>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	1a09      	subs	r1, r1, r0
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de0:	fb07 1110 	mls	r1, r7, r0, r1
 8000de4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x156>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x154>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f200 80bb 	bhi.w	8000f76 <__udivmoddi4+0x2ca>
 8000e00:	4608      	mov	r0, r1
 8000e02:	eba4 040e 	sub.w	r4, r4, lr
 8000e06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0a:	e79c      	b.n	8000d46 <__udivmoddi4+0x9a>
 8000e0c:	f1c6 0720 	rsb	r7, r6, #32
 8000e10:	40b3      	lsls	r3, r6
 8000e12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	40f9      	lsrs	r1, r7
 8000e26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e32:	0c20      	lsrs	r0, r4, #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fb09 1118 	mls	r1, r9, r8, r1
 8000e3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e40:	fb08 f00e 	mul.w	r0, r8, lr
 8000e44:	4288      	cmp	r0, r1
 8000e46:	fa02 f206 	lsl.w	r2, r2, r6
 8000e4a:	d90b      	bls.n	8000e64 <__udivmoddi4+0x1b8>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e54:	f080 8088 	bcs.w	8000f68 <__udivmoddi4+0x2bc>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f240 8085 	bls.w	8000f68 <__udivmoddi4+0x2bc>
 8000e5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	458e      	cmp	lr, r1
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x1e2>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e84:	d26c      	bcs.n	8000f60 <__udivmoddi4+0x2b4>
 8000e86:	458e      	cmp	lr, r1
 8000e88:	d96a      	bls.n	8000f60 <__udivmoddi4+0x2b4>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4461      	add	r1, ip
 8000e8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e92:	fba0 9402 	umull	r9, r4, r0, r2
 8000e96:	eba1 010e 	sub.w	r1, r1, lr
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	46c8      	mov	r8, r9
 8000e9e:	46a6      	mov	lr, r4
 8000ea0:	d356      	bcc.n	8000f50 <__udivmoddi4+0x2a4>
 8000ea2:	d053      	beq.n	8000f4c <__udivmoddi4+0x2a0>
 8000ea4:	b15d      	cbz	r5, 8000ebe <__udivmoddi4+0x212>
 8000ea6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000eae:	fa01 f707 	lsl.w	r7, r1, r7
 8000eb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb6:	40f1      	lsrs	r1, r6
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	e9c5 7100 	strd	r7, r1, [r5]
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	f1c2 0320 	rsb	r3, r2, #32
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee8:	0c0b      	lsrs	r3, r1, #16
 8000eea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eee:	fb00 f60e 	mul.w	r6, r0, lr
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x260>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f02:	d22f      	bcs.n	8000f64 <__udivmoddi4+0x2b8>
 8000f04:	429e      	cmp	r6, r3
 8000f06:	d92d      	bls.n	8000f64 <__udivmoddi4+0x2b8>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	1b9b      	subs	r3, r3, r6
 8000f0e:	b289      	uxth	r1, r1
 8000f10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f14:	fb07 3316 	mls	r3, r7, r6, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x28a>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f2c:	d216      	bcs.n	8000f5c <__udivmoddi4+0x2b0>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d914      	bls.n	8000f5c <__udivmoddi4+0x2b0>
 8000f32:	3e02      	subs	r6, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f3c:	e738      	b.n	8000db0 <__udivmoddi4+0x104>
 8000f3e:	462e      	mov	r6, r5
 8000f40:	4628      	mov	r0, r5
 8000f42:	e705      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000f44:	4606      	mov	r6, r0
 8000f46:	e6e3      	b.n	8000d10 <__udivmoddi4+0x64>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6f8      	b.n	8000d3e <__udivmoddi4+0x92>
 8000f4c:	454b      	cmp	r3, r9
 8000f4e:	d2a9      	bcs.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f50:	ebb9 0802 	subs.w	r8, r9, r2
 8000f54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f58:	3801      	subs	r0, #1
 8000f5a:	e7a3      	b.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f5c:	4646      	mov	r6, r8
 8000f5e:	e7ea      	b.n	8000f36 <__udivmoddi4+0x28a>
 8000f60:	4620      	mov	r0, r4
 8000f62:	e794      	b.n	8000e8e <__udivmoddi4+0x1e2>
 8000f64:	4640      	mov	r0, r8
 8000f66:	e7d1      	b.n	8000f0c <__udivmoddi4+0x260>
 8000f68:	46d0      	mov	r8, sl
 8000f6a:	e77b      	b.n	8000e64 <__udivmoddi4+0x1b8>
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	e732      	b.n	8000dd8 <__udivmoddi4+0x12c>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e709      	b.n	8000d8a <__udivmoddi4+0xde>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	e742      	b.n	8000e02 <__udivmoddi4+0x156>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <HAL_UART_RxCpltCallback>:
float ddq_actual0, ddq_actual1;
uint32_t count = 0;
int limit_switch = 1;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b08b      	sub	sp, #44	; 0x2c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    char *cmd, *data;
    double value;
    unsigned long long encoding;
    uint8_t i = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /* read the first characters */
    cmd = strtok((char*) rx_data, ":");
 8000f8e:	492d      	ldr	r1, [pc, #180]	; (8001044 <HAL_UART_RxCpltCallback+0xc4>)
 8000f90:	482d      	ldr	r0, [pc, #180]	; (8001048 <HAL_UART_RxCpltCallback+0xc8>)
 8000f92:	f005 fed1 	bl	8006d38 <strtok>
 8000f96:	61f8      	str	r0, [r7, #28]
    if(strcmp(cmd, "TRJ")){ /* trj case*/
 8000f98:	492c      	ldr	r1, [pc, #176]	; (800104c <HAL_UART_RxCpltCallback+0xcc>)
 8000f9a:	69f8      	ldr	r0, [r7, #28]
 8000f9c:	f7ff f920 	bl	80001e0 <strcmp>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d044      	beq.n	8001030 <HAL_UART_RxCpltCallback+0xb0>
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        data = strtok(NULL, ":");
 8000fa6:	4927      	ldr	r1, [pc, #156]	; (8001044 <HAL_UART_RxCpltCallback+0xc4>)
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f005 fec5 	bl	8006d38 <strtok>
 8000fae:	6278      	str	r0, [r7, #36]	; 0x24
        while(data != NULL){
 8000fb0:	e02d      	b.n	800100e <HAL_UART_RxCpltCallback+0x8e>
            if(i == 6) break; /* reading penup */
 8000fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d02d      	beq.n	8001016 <HAL_UART_RxCpltCallback+0x96>
            // value = "0x"; /* will contain the value extracted from the received string */
            encoding = strtoull(data, NULL, 16);
 8000fba:	2210      	movs	r2, #16
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fc0:	f006 f83a 	bl	8007038 <strtoull>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
            memcpy(&value, &encoding, sizeof value);
 8000fd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // value = strcat(value, data); /* string concatenation REF: https://www.programiz.com/c-programming/library-function/string.h/strcat */
            rbpush((((ringbuffer_t *) &manip)+i), (float) value); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 8000fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fd8:	222c      	movs	r2, #44	; 0x2c
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <HAL_UART_RxCpltCallback+0xd0>)
 8000fe0:	189c      	adds	r4, r3, r2
 8000fe2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fdf7 	bl	8000bdc <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	ee00 3a10 	vmov	s0, r3
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f001 fd97 	bl	8002b28 <rbpush>
            data = strtok(NULL, ":");
 8000ffa:	4912      	ldr	r1, [pc, #72]	; (8001044 <HAL_UART_RxCpltCallback+0xc4>)
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f005 fe9b 	bl	8006d38 <strtok>
 8001002:	6278      	str	r0, [r7, #36]	; 0x24
            i++;
 8001004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001008:	3301      	adds	r3, #1
 800100a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        while(data != NULL){
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1ce      	bne.n	8000fb2 <HAL_UART_RxCpltCallback+0x32>
 8001014:	e000      	b.n	8001018 <HAL_UART_RxCpltCallback+0x98>
            if(i == 6) break; /* reading penup */
 8001016:	bf00      	nop
        }
        rbpush(&manip.penup, (float) atoi(data));
 8001018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800101a:	f005 fe57 	bl	8006ccc <atoi>
 800101e:	ee07 0a90 	vmov	s15, r0
 8001022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001026:	eeb0 0a67 	vmov.f32	s0, s15
 800102a:	480a      	ldr	r0, [pc, #40]	; (8001054 <HAL_UART_RxCpltCallback+0xd4>)
 800102c:	f001 fd7c 	bl	8002b28 <rbpush>
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(huart, rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	4905      	ldr	r1, [pc, #20]	; (8001048 <HAL_UART_RxCpltCallback+0xc8>)
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f004 fd94 	bl	8005b62 <HAL_UART_Receive_DMA>
}
 800103a:	bf00      	nop
 800103c:	372c      	adds	r7, #44	; 0x2c
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}
 8001042:	bf00      	nop
 8001044:	08009198 	.word	0x08009198
 8001048:	20000090 	.word	0x20000090
 800104c:	0800919c 	.word	0x0800919c
 8001050:	20000110 	.word	0x20000110
 8001054:	20000218 	.word	0x20000218

08001058 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
    // TODO: Implement limit switch handling
    uint32_t now;
    now = HAL_GetTick();
 8001062:	f002 fa87 	bl	8003574 <HAL_GetTick>
 8001066:	60f8      	str	r0, [r7, #12]
    if((now - previous_trigger) > DEBOUNCE_DELAY){
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_GPIO_EXTI_Callback+0x54>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b32      	cmp	r3, #50	; 0x32
 8001072:	d916      	bls.n	80010a2 <HAL_GPIO_EXTI_Callback+0x4a>
        if(!triggered){
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d108      	bne.n	800108e <HAL_GPIO_EXTI_Callback+0x36>
          limit_switch *= -1;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	425b      	negs	r3, r3
 8001082:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001084:	6013      	str	r3, [r2, #0]
            // SECTION - DEBUG
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001086:	2120      	movs	r1, #32
 8001088:	480b      	ldr	r0, [pc, #44]	; (80010b8 <HAL_GPIO_EXTI_Callback+0x60>)
 800108a:	f003 f954 	bl	8004336 <HAL_GPIO_TogglePin>
            // !SECTION - DEBUG
        }
        triggered = 1-triggered;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	f1c3 0301 	rsb	r3, r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x58>)
 800109a:	701a      	strb	r2, [r3, #0]
        previous_trigger = now;
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <HAL_GPIO_EXTI_Callback+0x54>)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6013      	str	r3, [r2, #0]
    }
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200003a0 	.word	0x200003a0
 80010b0:	200003a4 	.word	0x200003a4
 80010b4:	20000000 	.word	0x20000000
 80010b8:	40020000 	.word	0x40020000

080010bc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d107      	bne.n	80010de <HAL_TIM_PeriodElapsedCallback+0x22>
		/* check if it is the proper instance */
		read_encoders(&manip);
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80010d0:	f000 ff26 	bl	8001f20 <read_encoders>
		count++;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80010dc:	6013      	str	r3, [r2, #0]
	}
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40014400 	.word	0x40014400
 80010ec:	20000110 	.word	0x20000110
 80010f0:	200003e8 	.word	0x200003e8

080010f4 <init_man>:
- TIM_HandleTypeDef *htim2: pointer to the timer used to decode the output of the second encode;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip, TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 8001100:	2300      	movs	r3, #0
 8001102:	75fb      	strb	r3, [r7, #23]
 8001104:	e00b      	b.n	800111e <init_man+0x2a>
        rbclear((((ringbuffer_t *) manip)+i));
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	222c      	movs	r2, #44	; 0x2c
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4413      	add	r3, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fe02 	bl	8002d1c <rbclear>
    for(i = 0; i < 14; i++){
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	3301      	adds	r3, #1
 800111c:	75fb      	strb	r3, [r7, #23]
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	2b0d      	cmp	r3, #13
 8001122:	d9f0      	bls.n	8001106 <init_man+0x12>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 8001124:	2300      	movs	r3, #0
 8001126:	75fb      	strb	r3, [r7, #23]
 8001128:	e012      	b.n	8001150 <init_man+0x5c>
        manip->B[i] = (float) 0;
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	339a      	adds	r3, #154	; 0x9a
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
        manip->C[i] = (float) 0;
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	339e      	adds	r3, #158	; 0x9e
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 4; i++){
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	3301      	adds	r3, #1
 800114e:	75fb      	strb	r3, [r7, #23]
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d9e9      	bls.n	800112a <init_man+0x36>
    }
    manip->htim_encoder1 = htim1;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    manip->htim_encoder2 = htim2;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <dot>:
- float *C: pointer to a vector of floats of size nA*mB, which represents the resulting nAxmB matrix -> if the operation cannot be done, it will be NULL;
@outputs: 
- uint8_t: 0 or 1 that shows whether the operation completed successfully or not.
@#
*/
uint8_t dot(float *A, uint8_t nA, uint8_t mA, float* B, uint8_t nB, uint8_t mB, float* C){ /* nAxmA * nBxmB dot product */
 800116e:	b480      	push	{r7}
 8001170:	b087      	sub	sp, #28
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	72fb      	strb	r3, [r7, #11]
 800117c:	4613      	mov	r3, r2
 800117e:	72bb      	strb	r3, [r7, #10]
        this method exists just to make the code more readable and understand what each
        operation actually does instead of having meaningless calculations */
    
    /* C[i, j] = \sum_k A[i, k]*B[k, j] */
    /* given n rows and m columns, the matrix indexes i, j correspond to j+i*m array index */
    if(mA != nB){
 8001180:	7aba      	ldrb	r2, [r7, #10]
 8001182:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001186:	429a      	cmp	r2, r3
 8001188:	d003      	beq.n	8001192 <dot+0x24>
        C = NULL;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
        return 0; /* matrix multiplication cannot be done */
 800118e:	2300      	movs	r3, #0
 8001190:	e067      	b.n	8001262 <dot+0xf4>
    }
    uint8_t i, j, k;
    for(i = 0; i < nA*mB; i++){
 8001192:	2300      	movs	r3, #0
 8001194:	75fb      	strb	r3, [r7, #23]
 8001196:	e009      	b.n	80011ac <dot+0x3e>
        C[i] = (float) 0.0;
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800119e:	4413      	add	r3, r2
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
    for(i = 0; i < nA*mB; i++){
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	3301      	adds	r3, #1
 80011aa:	75fb      	strb	r3, [r7, #23]
 80011ac:	7dfa      	ldrb	r2, [r7, #23]
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80011b4:	fb01 f303 	mul.w	r3, r1, r3
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbed      	blt.n	8001198 <dot+0x2a>
    }

    for( i = 0; i < nA; i++){
 80011bc:	2300      	movs	r3, #0
 80011be:	75fb      	strb	r3, [r7, #23]
 80011c0:	e04a      	b.n	8001258 <dot+0xea>
        for( j = 0; j < mB; j++){
 80011c2:	2300      	movs	r3, #0
 80011c4:	75bb      	strb	r3, [r7, #22]
 80011c6:	e03f      	b.n	8001248 <dot+0xda>
            for( k = 0; k < mA; k++){
 80011c8:	2300      	movs	r3, #0
 80011ca:	757b      	strb	r3, [r7, #21]
 80011cc:	e035      	b.n	800123a <dot+0xcc>
                C[j+i*mB] += (float) (A[k+i*mA]*B[j+k*mB]);
 80011ce:	7dba      	ldrb	r2, [r7, #22]
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80011d6:	fb01 f303 	mul.w	r3, r1, r3
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e0:	4413      	add	r3, r2
 80011e2:	ed93 7a00 	vldr	s14, [r3]
 80011e6:	7d7a      	ldrb	r2, [r7, #21]
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	7ab9      	ldrb	r1, [r7, #10]
 80011ec:	fb01 f303 	mul.w	r3, r1, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	edd3 6a00 	vldr	s13, [r3]
 80011fc:	7dba      	ldrb	r2, [r7, #22]
 80011fe:	7d7b      	ldrb	r3, [r7, #21]
 8001200:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001218:	7dba      	ldrb	r2, [r7, #22]
 800121a:	7dfb      	ldrb	r3, [r7, #23]
 800121c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001220:	fb01 f303 	mul.w	r3, r1, r3
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800122a:	4413      	add	r3, r2
 800122c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001230:	edc3 7a00 	vstr	s15, [r3]
            for( k = 0; k < mA; k++){
 8001234:	7d7b      	ldrb	r3, [r7, #21]
 8001236:	3301      	adds	r3, #1
 8001238:	757b      	strb	r3, [r7, #21]
 800123a:	7d7a      	ldrb	r2, [r7, #21]
 800123c:	7abb      	ldrb	r3, [r7, #10]
 800123e:	429a      	cmp	r2, r3
 8001240:	d3c5      	bcc.n	80011ce <dot+0x60>
        for( j = 0; j < mB; j++){
 8001242:	7dbb      	ldrb	r3, [r7, #22]
 8001244:	3301      	adds	r3, #1
 8001246:	75bb      	strb	r3, [r7, #22]
 8001248:	7dba      	ldrb	r2, [r7, #22]
 800124a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800124e:	429a      	cmp	r2, r3
 8001250:	d3ba      	bcc.n	80011c8 <dot+0x5a>
    for( i = 0; i < nA; i++){
 8001252:	7dfb      	ldrb	r3, [r7, #23]
 8001254:	3301      	adds	r3, #1
 8001256:	75fb      	strb	r3, [r7, #23]
 8001258:	7dfa      	ldrb	r2, [r7, #23]
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	429a      	cmp	r2, r3
 800125e:	d3b0      	bcc.n	80011c2 <dot+0x54>
            }
        }
    }
    return 1; // matrix multiplication successfully completed
 8001260:	2301      	movs	r3, #1
}
 8001262:	4618      	mov	r0, r3
 8001264:	371c      	adds	r7, #28
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <inv2x2>:
- float *invM: pointer to the inverted matrix (NULL if inversion is not possible);
@outputs: 
- uint8_t: shows whether the inversion was completed or not
@#
*/
uint8_t inv2x2(float *M, float *invM){
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
    float d = DET(M);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	ed93 7a00 	vldr	s14, [r3]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	330c      	adds	r3, #12
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	ee27 7a27 	vmul.f32	s14, s14, s15
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3304      	adds	r3, #4
 800128e:	edd3 6a00 	vldr	s13, [r3]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3308      	adds	r3, #8
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a2:	edc7 7a03 	vstr	s15, [r7, #12]
    if(d == 0){
 80012a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	d103      	bne.n	80012bc <inv2x2+0x4e>
        invM = NULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	603b      	str	r3, [r7, #0]
        return 0; /* Inversion not possible */
 80012b8:	2300      	movs	r3, #0
 80012ba:	e032      	b.n	8001322 <inv2x2+0xb4>
    }
    invM[0] =  M[3]/d;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	330c      	adds	r3, #12
 80012c0:	edd3 6a00 	vldr	s13, [r3]
 80012c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80012c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	edc3 7a00 	vstr	s15, [r3]
    invM[3] =  M[0]/d;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	edd3 6a00 	vldr	s13, [r3]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	330c      	adds	r3, #12
 80012dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e4:	edc3 7a00 	vstr	s15, [r3]
    invM[1] = -M[1]/d;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3304      	adds	r3, #4
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	eef1 6a67 	vneg.f32	s13, s15
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	3304      	adds	r3, #4
 80012f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80012fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001300:	edc3 7a00 	vstr	s15, [r3]
    invM[2] = -M[2]/d;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3308      	adds	r3, #8
 8001308:	edd3 7a00 	vldr	s15, [r3]
 800130c:	eef1 6a67 	vneg.f32	s13, s15
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	3308      	adds	r3, #8
 8001314:	ed97 7a03 	vldr	s14, [r7, #12]
 8001318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131c:	edc3 7a00 	vstr	s15, [r3]
    return 1; /* Inversion completed successfully */
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <sum>:
- float *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void sum(float *A, float *B, uint8_t n, float *C){
 800132e:	b480      	push	{r7}
 8001330:	b087      	sub	sp, #28
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4613      	mov	r3, r2
 800133c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]
 8001342:	e016      	b.n	8001372 <sum+0x44>
        C[i] = A[i] + B[i];
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	ed93 7a00 	vldr	s14, [r3]
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	4413      	add	r3, r2
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	4413      	add	r3, r2
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < n; i++){
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	3301      	adds	r3, #1
 8001370:	75fb      	strb	r3, [r7, #23]
 8001372:	7dfa      	ldrb	r2, [r7, #23]
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	429a      	cmp	r2, r3
 8001378:	d3e4      	bcc.n	8001344 <sum+0x16>
    }
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	371c      	adds	r7, #28
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <diff>:
- float *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void diff(float *A, float *B, uint8_t n, float *C){
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	4613      	mov	r3, r2
 8001396:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 8001398:	2300      	movs	r3, #0
 800139a:	75fb      	strb	r3, [r7, #23]
 800139c:	e016      	b.n	80013cc <diff+0x44>
        C[i] = A[i] - B[i];
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	4413      	add	r3, r2
 80013a6:	ed93 7a00 	vldr	s14, [r3]
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	4413      	add	r3, r2
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c2:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < n; i++){
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	3301      	adds	r3, #1
 80013ca:	75fb      	strb	r3, [r7, #23]
 80013cc:	7dfa      	ldrb	r2, [r7, #23]
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3e4      	bcc.n	800139e <diff+0x16>
    }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	0000      	movs	r0, r0
 80013e4:	0000      	movs	r0, r0
	...

080013e8 <B_calc>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void B_calc(man_t *manip){
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
    float q1,q2;
    rblast(&manip->q0_actual, &q1);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80013f6:	f107 020c 	add.w	r2, r7, #12
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 fc1d 	bl	8002c3c <rblast>
    rblast(&manip->q1_actual, &q2);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001408:	f107 0208 	add.w	r2, r7, #8
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fc14 	bl	8002c3c <rblast>

    manip->B[0] = (float) (0.0047413*cos(q1 + 2*q2) + 0.028554*cos(q1 + q2) + 0.078463*cos(q1) + 0.014224*cos(q2) + 0.045182); // (0.024938*cos(q1 + 2*q2) + 0.12469*cos(q1 + q2) + 0.26194*cos(q1) + 0.074812*cos(q2) + 0.16349);
 8001414:	edd7 7a02 	vldr	s15, [r7, #8]
 8001418:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800141c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	ee17 0a90 	vmov	r0, s15
 8001428:	f7ff f89e 	bl	8000568 <__aeabi_f2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	ec43 2b10 	vmov	d0, r2, r3
 8001434:	f006 fe04 	bl	8008040 <cos>
 8001438:	ec51 0b10 	vmov	r0, r1, d0
 800143c:	a3ae      	add	r3, pc, #696	; (adr r3, 80016f8 <B_calc+0x310>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f8e9 	bl	8000618 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4614      	mov	r4, r2
 800144c:	461d      	mov	r5, r3
 800144e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001452:	edd7 7a02 	vldr	s15, [r7, #8]
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	ee17 0a90 	vmov	r0, s15
 800145e:	f7ff f883 	bl	8000568 <__aeabi_f2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	ec43 2b10 	vmov	d0, r2, r3
 800146a:	f006 fde9 	bl	8008040 <cos>
 800146e:	ec51 0b10 	vmov	r0, r1, d0
 8001472:	a3a3      	add	r3, pc, #652	; (adr r3, 8001700 <B_calc+0x318>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f8ce 	bl	8000618 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4620      	mov	r0, r4
 8001482:	4629      	mov	r1, r5
 8001484:	f7fe ff12 	bl	80002ac <__adddf3>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4614      	mov	r4, r2
 800148e:	461d      	mov	r5, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f868 	bl	8000568 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	ec43 2b10 	vmov	d0, r2, r3
 80014a0:	f006 fdce 	bl	8008040 <cos>
 80014a4:	ec51 0b10 	vmov	r0, r1, d0
 80014a8:	a397      	add	r3, pc, #604	; (adr r3, 8001708 <B_calc+0x320>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f8b3 	bl	8000618 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4620      	mov	r0, r4
 80014b8:	4629      	mov	r1, r5
 80014ba:	f7fe fef7 	bl	80002ac <__adddf3>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4614      	mov	r4, r2
 80014c4:	461d      	mov	r5, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f84d 	bl	8000568 <__aeabi_f2d>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	ec43 2b10 	vmov	d0, r2, r3
 80014d6:	f006 fdb3 	bl	8008040 <cos>
 80014da:	ec51 0b10 	vmov	r0, r1, d0
 80014de:	a38c      	add	r3, pc, #560	; (adr r3, 8001710 <B_calc+0x328>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f898 	bl	8000618 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7fe fedc 	bl	80002ac <__adddf3>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	a386      	add	r3, pc, #536	; (adr r3, 8001718 <B_calc+0x330>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7fe fed3 	bl	80002ac <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb65 	bl	8000bdc <__aeabi_d2f>
 8001512:	4602      	mov	r2, r0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    manip->B[1] = (float) (0.0023706*cos(q1 + 2*q2) + 0.023453*cos(q1 + q2) + 0.039491*cos(q1) + 0.0094825*cos(q2) + 0.01103); // (0.012469*cos(q1 + 2*q2) + 0.09975*cos(q1 + q2) + 0.14962*cos(q1) + 0.049875*cos(q2) + 0.058307);
 800151a:	edd7 7a02 	vldr	s15, [r7, #8]
 800151e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001522:	edd7 7a03 	vldr	s15, [r7, #12]
 8001526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152a:	ee17 0a90 	vmov	r0, s15
 800152e:	f7ff f81b 	bl	8000568 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	ec43 2b10 	vmov	d0, r2, r3
 800153a:	f006 fd81 	bl	8008040 <cos>
 800153e:	ec51 0b10 	vmov	r0, r1, d0
 8001542:	a377      	add	r3, pc, #476	; (adr r3, 8001720 <B_calc+0x338>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f866 	bl	8000618 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4614      	mov	r4, r2
 8001552:	461d      	mov	r5, r3
 8001554:	ed97 7a03 	vldr	s14, [r7, #12]
 8001558:	edd7 7a02 	vldr	s15, [r7, #8]
 800155c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001560:	ee17 0a90 	vmov	r0, s15
 8001564:	f7ff f800 	bl	8000568 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	ec43 2b10 	vmov	d0, r2, r3
 8001570:	f006 fd66 	bl	8008040 <cos>
 8001574:	ec51 0b10 	vmov	r0, r1, d0
 8001578:	a36b      	add	r3, pc, #428	; (adr r3, 8001728 <B_calc+0x340>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f84b 	bl	8000618 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4620      	mov	r0, r4
 8001588:	4629      	mov	r1, r5
 800158a:	f7fe fe8f 	bl	80002ac <__adddf3>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4614      	mov	r4, r2
 8001594:	461d      	mov	r5, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffe5 	bl	8000568 <__aeabi_f2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	ec43 2b10 	vmov	d0, r2, r3
 80015a6:	f006 fd4b 	bl	8008040 <cos>
 80015aa:	ec51 0b10 	vmov	r0, r1, d0
 80015ae:	a360      	add	r3, pc, #384	; (adr r3, 8001730 <B_calc+0x348>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f830 	bl	8000618 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7fe fe74 	bl	80002ac <__adddf3>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4614      	mov	r4, r2
 80015ca:	461d      	mov	r5, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffca 	bl	8000568 <__aeabi_f2d>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	ec43 2b10 	vmov	d0, r2, r3
 80015dc:	f006 fd30 	bl	8008040 <cos>
 80015e0:	ec51 0b10 	vmov	r0, r1, d0
 80015e4:	a354      	add	r3, pc, #336	; (adr r3, 8001738 <B_calc+0x350>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff f815 	bl	8000618 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7fe fe59 	bl	80002ac <__adddf3>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	a34f      	add	r3, pc, #316	; (adr r3, 8001740 <B_calc+0x358>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fe50 	bl	80002ac <__adddf3>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fae2 	bl	8000bdc <__aeabi_d2f>
 8001618:	4602      	mov	r2, r0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
    manip->B[2] = manip->B[1]; // the matrix is symmetrical
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    manip->B[3] = (float) (0.018351*cos(q1 + q2) + 0.039491*cos(q1) + 0.0047413*cos(q2) + 0.011032); // (0.074812*cos(q1 + q2) + 0.14962*cos(q1) + 0.024938*cos(q2) + 0.058309);
 800162c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001630:	edd7 7a02 	vldr	s15, [r7, #8]
 8001634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001638:	ee17 0a90 	vmov	r0, s15
 800163c:	f7fe ff94 	bl	8000568 <__aeabi_f2d>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	ec43 2b10 	vmov	d0, r2, r3
 8001648:	f006 fcfa 	bl	8008040 <cos>
 800164c:	ec51 0b10 	vmov	r0, r1, d0
 8001650:	a33d      	add	r3, pc, #244	; (adr r3, 8001748 <B_calc+0x360>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7fe ffdf 	bl	8000618 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4614      	mov	r4, r2
 8001660:	461d      	mov	r5, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff7f 	bl	8000568 <__aeabi_f2d>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	ec43 2b10 	vmov	d0, r2, r3
 8001672:	f006 fce5 	bl	8008040 <cos>
 8001676:	ec51 0b10 	vmov	r0, r1, d0
 800167a:	a32d      	add	r3, pc, #180	; (adr r3, 8001730 <B_calc+0x348>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe ffca 	bl	8000618 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe fe0e 	bl	80002ac <__adddf3>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4614      	mov	r4, r2
 8001696:	461d      	mov	r5, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe ff64 	bl	8000568 <__aeabi_f2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	ec43 2b10 	vmov	d0, r2, r3
 80016a8:	f006 fcca 	bl	8008040 <cos>
 80016ac:	ec51 0b10 	vmov	r0, r1, d0
 80016b0:	a311      	add	r3, pc, #68	; (adr r3, 80016f8 <B_calc+0x310>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffaf 	bl	8000618 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4620      	mov	r0, r4
 80016c0:	4629      	mov	r1, r5
 80016c2:	f7fe fdf3 	bl	80002ac <__adddf3>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	a320      	add	r3, pc, #128	; (adr r3, 8001750 <B_calc+0x368>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe fdea 	bl	80002ac <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff fa7c 	bl	8000bdc <__aeabi_d2f>
 80016e4:	4602      	mov	r2, r0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
    /*  manip::B is actually a vector, but it can be seen as follows: 
        [B[0], B[1]]
        [B[2], B[3]] */
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bdb0      	pop	{r4, r5, r7, pc}
 80016f4:	f3af 8000 	nop.w
 80016f8:	070c63bc 	.word	0x070c63bc
 80016fc:	3f736b9d 	.word	0x3f736b9d
 8001700:	80ae1049 	.word	0x80ae1049
 8001704:	3f9d3d42 	.word	0x3f9d3d42
 8001708:	b2f23034 	.word	0xb2f23034
 800170c:	3fb41626 	.word	0x3fb41626
 8001710:	f68be2f8 	.word	0xf68be2f8
 8001714:	3f8d2178 	.word	0x3f8d2178
 8001718:	58bc59b8 	.word	0x58bc59b8
 800171c:	3fa72218 	.word	0x3fa72218
 8001720:	2f19c8ff 	.word	0x2f19c8ff
 8001724:	3f636b82 	.word	0x3f636b82
 8001728:	2ff8ec10 	.word	0x2ff8ec10
 800172c:	3f980410 	.word	0x3f980410
 8001730:	12f90108 	.word	0x12f90108
 8001734:	3fa4382a 	.word	0x3fa4382a
 8001738:	9b13165d 	.word	0x9b13165d
 800173c:	3f836b8f 	.word	0x3f836b8f
 8001740:	8a32f449 	.word	0x8a32f449
 8001744:	3f8696e5 	.word	0x3f8696e5
 8001748:	c36544fe 	.word	0xc36544fe
 800174c:	3f92ca9a 	.word	0x3f92ca9a
 8001750:	f9acffa8 	.word	0xf9acffa8
 8001754:	3f8697f1 	.word	0x3f8697f1

08001758 <C_calc>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void C_calc(man_t *manip){
 8001758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
    float q1, q2, dq1, dq2;
    rblast(&manip->q0_actual, &q1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001768:	f107 0214 	add.w	r2, r7, #20
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fa64 	bl	8002c3c <rblast>
    rblast(&manip->q1_actual, &q2);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800177a:	f107 0210 	add.w	r2, r7, #16
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f001 fa5b 	bl	8002c3c <rblast>
    rblast(&manip->dq0_actual, &dq1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800178c:	f107 020c 	add.w	r2, r7, #12
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fa52 	bl	8002c3c <rblast>
    rblast(&manip->dq1_actual, &dq2);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800179e:	f107 0208 	add.w	r2, r7, #8
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f001 fa49 	bl	8002c3c <rblast>
    // SECTION DEBUG
	// dq1 = dq_actual0;
	// dq2 = dq_actual1;
	// !SECTION DEBUG

    manip->C[0] = (float) ( - 0.5*dq2*(0.0047413*sin(q1 + 2*q2) + 0.010203*sin(q1 + q2) + 0.0094825*sin(q2))); // ( - 0.5*dq2*(0.024938*sin(q1 + 2*q2) + 0.049875*sin(q1 + q2) + 0.049875*sin(q2)));
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fedb 	bl	8000568 <__aeabi_f2d>
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4bbc      	ldr	r3, [pc, #752]	; (8001aa8 <C_calc+0x350>)
 80017b8:	f7fe ff2e 	bl	8000618 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4614      	mov	r4, r2
 80017c2:	461d      	mov	r5, r3
 80017c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80017d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d4:	ee17 0a90 	vmov	r0, s15
 80017d8:	f7fe fec6 	bl	8000568 <__aeabi_f2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	ec43 2b10 	vmov	d0, r2, r3
 80017e4:	f006 fc80 	bl	80080e8 <sin>
 80017e8:	ec51 0b10 	vmov	r0, r1, d0
 80017ec:	a39e      	add	r3, pc, #632	; (adr r3, 8001a68 <C_calc+0x310>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7fe ff11 	bl	8000618 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4690      	mov	r8, r2
 80017fc:	4699      	mov	r9, r3
 80017fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001802:	edd7 7a04 	vldr	s15, [r7, #16]
 8001806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180a:	ee17 0a90 	vmov	r0, s15
 800180e:	f7fe feab 	bl	8000568 <__aeabi_f2d>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	ec43 2b10 	vmov	d0, r2, r3
 800181a:	f006 fc65 	bl	80080e8 <sin>
 800181e:	ec51 0b10 	vmov	r0, r1, d0
 8001822:	a393      	add	r3, pc, #588	; (adr r3, 8001a70 <C_calc+0x318>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe fef6 	bl	8000618 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4640      	mov	r0, r8
 8001832:	4649      	mov	r1, r9
 8001834:	f7fe fd3a 	bl	80002ac <__adddf3>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4690      	mov	r8, r2
 800183e:	4699      	mov	r9, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe90 	bl	8000568 <__aeabi_f2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	ec43 2b10 	vmov	d0, r2, r3
 8001850:	f006 fc4a 	bl	80080e8 <sin>
 8001854:	ec51 0b10 	vmov	r0, r1, d0
 8001858:	a387      	add	r3, pc, #540	; (adr r3, 8001a78 <C_calc+0x320>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fedb 	bl	8000618 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4640      	mov	r0, r8
 8001868:	4649      	mov	r1, r9
 800186a:	f7fe fd1f 	bl	80002ac <__adddf3>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4620      	mov	r0, r4
 8001874:	4629      	mov	r1, r5
 8001876:	f7fe fecf 	bl	8000618 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f9ab 	bl	8000bdc <__aeabi_d2f>
 8001886:	4602      	mov	r2, r0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
    manip->C[1] = (float) ( - 0.000030008*(dq1 + dq2)*(79.0*sin(q1 + 2*q2) + 170*sin(q1 + q2) + 158*sin(q2))); // ( - 0.012469*(dq1 + dq2)*(sin(q1 + 2*q2) + 2*sin(q1 + q2) + 2*sin(q2)));
 800188e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001892:	edd7 7a02 	vldr	s15, [r7, #8]
 8001896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189a:	ee17 0a90 	vmov	r0, s15
 800189e:	f7fe fe63 	bl	8000568 <__aeabi_f2d>
 80018a2:	a377      	add	r3, pc, #476	; (adr r3, 8001a80 <C_calc+0x328>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe feb6 	bl	8000618 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	461d      	mov	r5, r3
 80018b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80018c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c4:	ee17 0a90 	vmov	r0, s15
 80018c8:	f7fe fe4e 	bl	8000568 <__aeabi_f2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	ec43 2b10 	vmov	d0, r2, r3
 80018d4:	f006 fc08 	bl	80080e8 <sin>
 80018d8:	ec51 0b10 	vmov	r0, r1, d0
 80018dc:	a36a      	add	r3, pc, #424	; (adr r3, 8001a88 <C_calc+0x330>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fe99 	bl	8000618 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4690      	mov	r8, r2
 80018ec:	4699      	mov	r9, r3
 80018ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80018f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fa:	ee17 0a90 	vmov	r0, s15
 80018fe:	f7fe fe33 	bl	8000568 <__aeabi_f2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	ec43 2b10 	vmov	d0, r2, r3
 800190a:	f006 fbed 	bl	80080e8 <sin>
 800190e:	ec51 0b10 	vmov	r0, r1, d0
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b65      	ldr	r3, [pc, #404]	; (8001aac <C_calc+0x354>)
 8001918:	f7fe fe7e 	bl	8000618 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4640      	mov	r0, r8
 8001922:	4649      	mov	r1, r9
 8001924:	f7fe fcc2 	bl	80002ac <__adddf3>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4690      	mov	r8, r2
 800192e:	4699      	mov	r9, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fe18 	bl	8000568 <__aeabi_f2d>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	ec43 2b10 	vmov	d0, r2, r3
 8001940:	f006 fbd2 	bl	80080e8 <sin>
 8001944:	ec51 0b10 	vmov	r0, r1, d0
 8001948:	a351      	add	r3, pc, #324	; (adr r3, 8001a90 <C_calc+0x338>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fe63 	bl	8000618 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4640      	mov	r0, r8
 8001958:	4649      	mov	r1, r9
 800195a:	f7fe fca7 	bl	80002ac <__adddf3>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4620      	mov	r0, r4
 8001964:	4629      	mov	r1, r5
 8001966:	f7fe fe57 	bl	8000618 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f933 	bl	8000bdc <__aeabi_d2f>
 8001976:	4602      	mov	r2, r0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    manip->C[2] = (float) (   dq1*(0.0023706*sin(q1 + 2*q2) + 0.0051014*sin(q1 + q2) + 0.0047413*sin(q2))); // (dq1*(0.012469*sin(q1 + 2*q2) + 0.024938*sin(q1 + q2) + 0.024938*sin(q2)));
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fdf1 	bl	8000568 <__aeabi_f2d>
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
 800198a:	edd7 7a04 	vldr	s15, [r7, #16]
 800198e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001992:	edd7 7a05 	vldr	s15, [r7, #20]
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	ee17 0a90 	vmov	r0, s15
 800199e:	f7fe fde3 	bl	8000568 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	ec43 2b10 	vmov	d0, r2, r3
 80019aa:	f006 fb9d 	bl	80080e8 <sin>
 80019ae:	ec51 0b10 	vmov	r0, r1, d0
 80019b2:	a339      	add	r3, pc, #228	; (adr r3, 8001a98 <C_calc+0x340>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fe2e 	bl	8000618 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4690      	mov	r8, r2
 80019c2:	4699      	mov	r9, r3
 80019c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80019c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	ee17 0a90 	vmov	r0, s15
 80019d4:	f7fe fdc8 	bl	8000568 <__aeabi_f2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	ec43 2b10 	vmov	d0, r2, r3
 80019e0:	f006 fb82 	bl	80080e8 <sin>
 80019e4:	ec51 0b10 	vmov	r0, r1, d0
 80019e8:	a32d      	add	r3, pc, #180	; (adr r3, 8001aa0 <C_calc+0x348>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fe13 	bl	8000618 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4640      	mov	r0, r8
 80019f8:	4649      	mov	r1, r9
 80019fa:	f7fe fc57 	bl	80002ac <__adddf3>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4690      	mov	r8, r2
 8001a04:	4699      	mov	r9, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fdad 	bl	8000568 <__aeabi_f2d>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	ec43 2b10 	vmov	d0, r2, r3
 8001a16:	f006 fb67 	bl	80080e8 <sin>
 8001a1a:	ec51 0b10 	vmov	r0, r1, d0
 8001a1e:	a312      	add	r3, pc, #72	; (adr r3, 8001a68 <C_calc+0x310>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fdf8 	bl	8000618 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4640      	mov	r0, r8
 8001a2e:	4649      	mov	r1, r9
 8001a30:	f7fe fc3c 	bl	80002ac <__adddf3>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4620      	mov	r0, r4
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	f7fe fdec 	bl	8000618 <__aeabi_dmul>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff f8c8 	bl	8000bdc <__aeabi_d2f>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    manip->C[3] = (float) 0.0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
    /*  manip::C is actually a vector, but it can be seen as follows: 
        [C[0], C[1]]
        [C[2], C[3]] */
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a68:	070c63bc 	.word	0x070c63bc
 8001a6c:	3f736b9d 	.word	0x3f736b9d
 8001a70:	7a919696 	.word	0x7a919696
 8001a74:	3f84e54f 	.word	0x3f84e54f
 8001a78:	9b13165d 	.word	0x9b13165d
 8001a7c:	3f836b8f 	.word	0x3f836b8f
 8001a80:	0ed22244 	.word	0x0ed22244
 8001a84:	beff7736 	.word	0xbeff7736
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	4053c000 	.word	0x4053c000
 8001a90:	00000000 	.word	0x00000000
 8001a94:	4063c000 	.word	0x4063c000
 8001a98:	2f19c8ff 	.word	0x2f19c8ff
 8001a9c:	3f636b82 	.word	0x3f636b82
 8001aa0:	a29efbd9 	.word	0xa29efbd9
 8001aa4:	3f74e534 	.word	0x3f74e534
 8001aa8:	bfe00000 	.word	0xbfe00000
 8001aac:	40654000 	.word	0x40654000

08001ab0 <controller>:
- float *u: float[2] vector pointer that holds the control input to apply to motors (speed control);
@outputs: 
- void;
@#
*/
void controller(man_t *manip, float *u){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0ac      	sub	sp, #176	; 0xb0
 8001ab4:	af04      	add	r7, sp, #16
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
    float Bddq[2], invC[4], result[2];
    float d;
    uint8_t i;

    /* data preparation */
    rbpop(&manip->q0, &q[0]);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 f87a 	bl	8002bbc <rbpop>
    rbpop(&manip->q1, &q[1]);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001ace:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f001 f870 	bl	8002bbc <rbpop>
    rbpop(&manip->dq0, &dq[0]);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3358      	adds	r3, #88	; 0x58
 8001ae0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 f868 	bl	8002bbc <rbpop>
    rbpop(&manip->dq1, &dq[1]);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8001af2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001af6:	3304      	adds	r3, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f001 f85e 	bl	8002bbc <rbpop>
    rbpop(&manip->ddq0, &ddq[0]);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	33b0      	adds	r3, #176	; 0xb0
 8001b04:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 f856 	bl	8002bbc <rbpop>
    rbpop(&manip->ddq1, &ddq[1]);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8001b16:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	f001 f84c 	bl	8002bbc <rbpop>
    rblast(&manip->q0_actual, &q_actual[0]);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001b2a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 f883 	bl	8002c3c <rblast>
    rblast(&manip->q1_actual, &q_actual[1]);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 8001b3c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b40:	3304      	adds	r3, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4610      	mov	r0, r2
 8001b46:	f001 f879 	bl	8002c3c <rblast>
    rblast(&manip->dq0_actual, &dq_actual[0]);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b50:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 f870 	bl	8002c3c <rblast>
    rblast(&manip->dq1_actual, &dq_actual[1]);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8001b62:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b66:	3304      	adds	r3, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f001 f866 	bl	8002c3c <rblast>
    rblast(&manip->ddq0_actual, &ddq_actual[0]);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001b76:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 f85d 	bl	8002c3c <rblast>
    rblast(&manip->ddq1_actual, &ddq_actual[1]);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8001b88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4610      	mov	r0, r2
 8001b92:	f001 f853 	bl	8002c3c <rblast>
    B_calc(manip);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fc26 	bl	80013e8 <B_calc>
    C_calc(manip);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff fddb 	bl	8001758 <C_calc>
		s3 += a;
		rbget(&manip->ddq1_actual, i, &a);
		s4 += a;
	}
	*/
    dq_actual0 = dq_actual[0];
 8001ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ba4:	4a6c      	ldr	r2, [pc, #432]	; (8001d58 <controller+0x2a8>)
 8001ba6:	6013      	str	r3, [r2, #0]
    dq_actual1 = dq_actual[1];
 8001ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001baa:	4a6c      	ldr	r2, [pc, #432]	; (8001d5c <controller+0x2ac>)
 8001bac:	6013      	str	r3, [r2, #0]
    ddq_actual0 = ddq_actual[0];
 8001bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb0:	4a6b      	ldr	r2, [pc, #428]	; (8001d60 <controller+0x2b0>)
 8001bb2:	6013      	str	r3, [r2, #0]
    ddq_actual1 = ddq_actual[1];
 8001bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bb6:	4a6b      	ldr	r2, [pc, #428]	; (8001d64 <controller+0x2b4>)
 8001bb8:	6013      	str	r3, [r2, #0]
	ddq_actual[1] = ddq_actual1;
	*/
	
    // !SECTION DEBUG

    diff(q, q_actual, 2, ep); /* q - q_d */
 8001bba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bbe:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001bc2:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f7ff fbde 	bl	8001388 <diff>
    diff(dq, dq_actual, 2, ed); /* dq - dq_d */
 8001bcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bd0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001bd4:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f7ff fbd5 	bl	8001388 <diff>

    ep[0] = abs(ep[0]) < THRESHOLD ? 0:ep[0];
 8001bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001be0:	667b      	str	r3, [r7, #100]	; 0x64
    ep[1] = abs(ep[1]) < THRESHOLD ? 0:ep[1];
 8001be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001be4:	66bb      	str	r3, [r7, #104]	; 0x68

    ed[0] = abs(ed[0]) < THRESHOLD ? 0:ed[0];
 8001be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be8:	65fb      	str	r3, [r7, #92]	; 0x5c
    ed[1] = abs(ed[1]) < THRESHOLD ? 0:ed[1];
 8001bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bec:	663b      	str	r3, [r7, #96]	; 0x60

    dot((float *) Kp, 2, 2, ep, 2, 1, Kpep); /* Kp*ep */
 8001bee:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bf2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	2202      	movs	r2, #2
 8001c04:	2102      	movs	r1, #2
 8001c06:	4858      	ldr	r0, [pc, #352]	; (8001d68 <controller+0x2b8>)
 8001c08:	f7ff fab1 	bl	800116e <dot>
    dot((float *) Kd, 2, 2, ed, 2, 1, Kded); /* Kd*ed */
 8001c0c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	2202      	movs	r2, #2
 8001c22:	2102      	movs	r1, #2
 8001c24:	4851      	ldr	r0, [pc, #324]	; (8001d6c <controller+0x2bc>)
 8001c26:	f7ff faa2 	bl	800116e <dot>

    /* y = Kp*e_p + Kd*e_d + ddq */
    sum(Kpep, Kded, 2, y);
 8001c2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c2e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001c32:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001c36:	2202      	movs	r2, #2
 8001c38:	f7ff fb79 	bl	800132e <sum>
    sum(y, ddq, 2, y);
 8001c3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c40:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001c44:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f7ff fb70 	bl	800132e <sum>

    dot(manip->B, 2, 2, y, 2, 1, By); /* B*y */
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8001c54:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001c58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c5c:	9302      	str	r3, [sp, #8]
 8001c5e:	2301      	movs	r3, #1
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	2302      	movs	r3, #2
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	4613      	mov	r3, r2
 8001c68:	2202      	movs	r2, #2
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	f7ff fa7f 	bl	800116e <dot>
    dot(manip->C, 2, 2, dq_actual, 2, 1, Cdq); /* C*dq */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f503 701e 	add.w	r0, r3, #632	; 0x278
 8001c76:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	2301      	movs	r3, #1
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	2302      	movs	r3, #2
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	f7ff fa6e 	bl	800116e <dot>
    sum(By, Cdq, 2, tau); /* tau = B*y+C*dq  */
 8001c92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c96:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001c9a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f7ff fb45 	bl	800132e <sum>

    // TODO: TEST THIS SHIT

    d = DET(manip->C);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	ed93 7a9e 	vldr	s14, [r3, #632]	; 0x278
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	edd3 7aa1 	vldr	s15, [r3, #644]	; 0x284
 8001cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	edd3 6a9f 	vldr	s13, [r3, #636]	; 0x27c
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	edd3 7aa0 	vldr	s15, [r3, #640]	; 0x280
 8001cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    if(d == 0){
 8001ccc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001cd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	d109      	bne.n	8001cee <controller+0x23e>
        /* if C is not invertible, use the desired values as inputs */
        // TODO: Test and see if it works, otherwise use discrete integration
        *u = dq[0];
 8001cda:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	601a      	str	r2, [r3, #0]
        *(u+1) = dq[1];
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e031      	b.n	8001d52 <controller+0x2a2>
        return;
    }

    dot(manip->B, 2, 2, ddq_actual, 2, 1, Bddq); /* B*ddq */
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8001cf4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	2302      	movs	r3, #2
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	4613      	mov	r3, r2
 8001d08:	2202      	movs	r2, #2
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	f7ff fa2f 	bl	800116e <dot>
    diff(tau, Bddq, 2, result); /* tau - B*ddq */
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001d18:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	f7ff fb33 	bl	8001388 <diff>
    inv2x2(manip->C, invC); /* inv(C) */
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d28:	f107 0214 	add.w	r2, r7, #20
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fa9d 	bl	800126e <inv2x2>
    dot(invC, 2, 2, result, 2, 1, u); /* u = inv(C) * (tau - B*ddq) */
 8001d34:	f107 020c 	add.w	r2, r7, #12
 8001d38:	f107 0014 	add.w	r0, r7, #20
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	2301      	movs	r3, #1
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2302      	movs	r3, #2
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	f7ff fa0e 	bl	800116e <dot>
}
 8001d52:	37a0      	adds	r7, #160	; 0xa0
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200003d8 	.word	0x200003d8
 8001d5c:	200003dc 	.word	0x200003dc
 8001d60:	200003e0 	.word	0x200003e0
 8001d64:	200003e4 	.word	0x200003e4
 8001d68:	080091b4 	.word	0x080091b4
 8001d6c:	080091c4 	.word	0x080091c4

08001d70 <speed_estimation>:
- float *a_est: pointer to the variable that will hold the acceleration estimation;
@outputs: 
- void;
@#
*/
void speed_estimation(ringbuffer_t *q_actual, ringbuffer_t *dq_actual, float reduction, float *v_est, float *a_est){
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b0d4      	sub	sp, #336	; 0x150
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 8001d7a:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8001d7e:	6020      	str	r0, [r4, #0]
 8001d80:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001d84:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 8001d88:	6001      	str	r1, [r0, #0]
 8001d8a:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001d8e:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 8001d92:	ed81 0a00 	vstr	s0, [r1]
 8001d96:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001d9a:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 8001d9e:	600a      	str	r2, [r1, #0]
 8001da0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001da4:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8001da8:	6013      	str	r3, [r2, #0]
    rbget(dq_actual, RBUF_SZ-2, &prev);
    *a_est = (succ-prev)/T_S;*/

    /* filtering velocity with a first order filter  */
    float prev, succ, a;
       prev = 0;
 8001daa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001dae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
       succ = 0;
 8001db8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001dbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]

    float pos_prev, pos_succ, vel;

    rbget(q_actual,RBUF_SZ-1, &pos_succ);
 8001dc6:	f107 021c 	add.w	r2, r7, #28
 8001dca:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001dce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001dd2:	2109      	movs	r1, #9
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	f000 ff61 	bl	8002c9c <rbget>
    rbget(q_actual,RBUF_SZ-2, &pos_prev);
 8001dda:	f107 0220 	add.w	r2, r7, #32
 8001dde:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001de2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001de6:	2108      	movs	r1, #8
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	f000 ff57 	bl	8002c9c <rbget>
    rblast(dq_actual,&vel);
 8001dee:	f107 0218 	add.w	r2, r7, #24
 8001df2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001df6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	f000 ff1d 	bl	8002c3c <rblast>

    *v_est=(pos_succ-pos_prev)*0.1+vel;
 8001e02:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e06:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e0a:	ed93 7a00 	vldr	s14, [r3]
 8001e0e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e1e:	ee17 0a90 	vmov	r0, s15
 8001e22:	f7fe fba1 	bl	8000568 <__aeabi_f2d>
 8001e26:	a330      	add	r3, pc, #192	; (adr r3, 8001ee8 <speed_estimation+0x178>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fbf4 	bl	8000618 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4614      	mov	r4, r2
 8001e36:	461d      	mov	r5, r3
 8001e38:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e3c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fb90 	bl	8000568 <__aeabi_f2d>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	4629      	mov	r1, r5
 8001e50:	f7fe fa2c 	bl	80002ac <__adddf3>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe febe 	bl	8000bdc <__aeabi_d2f>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e66:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	601a      	str	r2, [r3, #0]


    rbget(dq_actual, RBUF_SZ-1, &succ);
 8001e6e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e72:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e76:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e7a:	2109      	movs	r1, #9
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	f000 ff0d 	bl	8002c9c <rbget>
	rbget(dq_actual, RBUF_SZ-2, &prev);
 8001e82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e86:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e8a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e8e:	2108      	movs	r1, #8
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	f000 ff03 	bl	8002c9c <rbget>
	*a_est = (succ-prev)/T_S;
 8001e96:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e9e:	ed93 7a00 	vldr	s14, [r3]
 8001ea2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ea6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb2:	ee17 0a90 	vmov	r0, s15
 8001eb6:	f7fe fb57 	bl	8000568 <__aeabi_f2d>
 8001eba:	a30d      	add	r3, pc, #52	; (adr r3, 8001ef0 <speed_estimation+0x180>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fcd4 	bl	800086c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f7fe fe86 	bl	8000bdc <__aeabi_d2f>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ed6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	601a      	str	r2, [r3, #0]





}
 8001ede:	bf00      	nop
 8001ee0:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee8:	9999999a 	.word	0x9999999a
 8001eec:	3fb99999 	.word	0x3fb99999
 8001ef0:	eb1c432d 	.word	0xeb1c432d
 8001ef4:	3f2a36e2 	.word	0x3f2a36e2

08001ef8 <init_rate>:
- uint32_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint32_t ms){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
    rate->last_time = HAL_GetTick();
 8001f02:	f001 fb37 	bl	8003574 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	601a      	str	r2, [r3, #0]
    rate->delta_time = ms;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	605a      	str	r2, [r3, #4]
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	0000      	movs	r0, r0
 8001f1c:	0000      	movs	r0, r0
	...

08001f20 <read_encoders>:
@inputs: 
- man_t *manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void read_encoders(man_t *manip){
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    uint16_t counter; 
    float displacement1, displacement2;
    // float v_est, a_est; /* used to hold temporarily the estimations of speed and acceleration */
    TIM_HandleTypeDef *htim1, *htim2;

    htim1 = manip->htim_encoder1; /* pointer to the timer struct that decodes the first encoder output */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8001f2e:	613b      	str	r3, [r7, #16]
    htim2 = manip->htim_encoder2; /* pointer to the timer struct that decodes the first encoder output */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f36:	60fb      	str	r3, [r7, #12]

    /* first encoder */
    counter = (htim1->Instance->CNT);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim1->Instance->ARR){
 8001f40:	8bfa      	ldrh	r2, [r7, #30]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d309      	bcc.n	8001f60 <read_encoders+0x40>
        counter = (htim1->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	83fb      	strh	r3, [r7, #30]
        htim1->Instance->CNT = counter; /* correct cnt value */
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	8bfa      	ldrh	r2, [r7, #30]
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    displacement1 = (float) (2*M_PI*counter/(htim1->Instance->ARR));
 8001f60:	8bfb      	ldrh	r3, [r7, #30]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe faee 	bl	8000544 <__aeabi_i2d>
 8001f68:	a35f      	add	r3, pc, #380	; (adr r3, 80020e8 <read_encoders+0x1c8>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe fb53 	bl	8000618 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4614      	mov	r4, r2
 8001f78:	461d      	mov	r5, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe facf 	bl	8000524 <__aeabi_ui2d>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe fc6d 	bl	800086c <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fe1f 	bl	8000bdc <__aeabi_d2f>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	61bb      	str	r3, [r7, #24]

    /* second encoder */
    counter = (htim2->Instance->CNT);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim2->Instance->ARR){
 8001faa:	8bfa      	ldrh	r2, [r7, #30]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d309      	bcc.n	8001fca <read_encoders+0xaa>
        counter = (htim2->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	83fb      	strh	r3, [r7, #30]
        htim2->Instance->CNT = counter;  /* correct cnt value */
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	8bfa      	ldrh	r2, [r7, #30]
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
    }
    displacement2 = (float) (2*M_PI) - (2*M_PI*counter/(htim2->Instance->ARR)); /* the motor is upside down */
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fab9 	bl	8000544 <__aeabi_i2d>
 8001fd2:	a345      	add	r3, pc, #276	; (adr r3, 80020e8 <read_encoders+0x1c8>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe fb1e 	bl	8000618 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4614      	mov	r4, r2
 8001fe2:	461d      	mov	r5, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fa9a 	bl	8000524 <__aeabi_ui2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	f7fe fc38 	bl	800086c <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	a13e      	add	r1, pc, #248	; (adr r1, 80020fc <read_encoders+0x1dc>)
 8002002:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002006:	f7fe f94f 	bl	80002a8 <__aeabi_dsub>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f7fe fde3 	bl	8000bdc <__aeabi_d2f>
 8002016:	4603      	mov	r3, r0
 8002018:	617b      	str	r3, [r7, #20]

    // SECTION DEBUG
    // rbpush(&timestamps, (float) HAL_GetTick()/1000.0);
    // !SECTION DEBUG

    if(displacement1 > 2*M_PI){
 800201a:	69b8      	ldr	r0, [r7, #24]
 800201c:	f7fe faa4 	bl	8000568 <__aeabi_f2d>
 8002020:	a331      	add	r3, pc, #196	; (adr r3, 80020e8 <read_encoders+0x1c8>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	f7fe fd87 	bl	8000b38 <__aeabi_dcmpgt>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <read_encoders+0x114>
    	displacement1 = 2*M_PI; /* clamping */
 8002030:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <read_encoders+0x1d8>)
 8002032:	61bb      	str	r3, [r7, #24]
	}
	if(displacement2 > 2*M_PI){
 8002034:	6978      	ldr	r0, [r7, #20]
 8002036:	f7fe fa97 	bl	8000568 <__aeabi_f2d>
 800203a:	a32b      	add	r3, pc, #172	; (adr r3, 80020e8 <read_encoders+0x1c8>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fd7a 	bl	8000b38 <__aeabi_dcmpgt>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <read_encoders+0x12e>
		displacement2 = 2*M_PI; /* clamping */
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <read_encoders+0x1d8>)
 800204c:	617b      	str	r3, [r7, #20]
	}
    if(displacement1 > M_PI){
 800204e:	69b8      	ldr	r0, [r7, #24]
 8002050:	f7fe fa8a 	bl	8000568 <__aeabi_f2d>
 8002054:	a326      	add	r3, pc, #152	; (adr r3, 80020f0 <read_encoders+0x1d0>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe fd6d 	bl	8000b38 <__aeabi_dcmpgt>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00f      	beq.n	8002084 <read_encoders+0x164>
    	displacement1 = displacement1 - (2*M_PI); /* redefining the domain between -PI and +PI */
 8002064:	69b8      	ldr	r0, [r7, #24]
 8002066:	f7fe fa7f 	bl	8000568 <__aeabi_f2d>
 800206a:	a31f      	add	r3, pc, #124	; (adr r3, 80020e8 <read_encoders+0x1c8>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f7fe f91a 	bl	80002a8 <__aeabi_dsub>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f7fe fdae 	bl	8000bdc <__aeabi_d2f>
 8002080:	4603      	mov	r3, r0
 8002082:	61bb      	str	r3, [r7, #24]
    }
    if(displacement2 > M_PI){
 8002084:	6978      	ldr	r0, [r7, #20]
 8002086:	f7fe fa6f 	bl	8000568 <__aeabi_f2d>
 800208a:	a319      	add	r3, pc, #100	; (adr r3, 80020f0 <read_encoders+0x1d0>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe fd52 	bl	8000b38 <__aeabi_dcmpgt>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00f      	beq.n	80020ba <read_encoders+0x19a>
    	displacement2 = displacement2 - (2*M_PI); /* redefining the domain between -PI and +PI */
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7fe fa64 	bl	8000568 <__aeabi_f2d>
 80020a0:	a311      	add	r3, pc, #68	; (adr r3, 80020e8 <read_encoders+0x1c8>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe f8ff 	bl	80002a8 <__aeabi_dsub>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f7fe fd93 	bl	8000bdc <__aeabi_d2f>
 80020b6:	4603      	mov	r3, r0
 80020b8:	617b      	str	r3, [r7, #20]
    /*
    uint8_t dir1 = (uint8_t) (htim1->Instance->CR1 >> 4) & 1;
    uint8_t dir2 = (uint8_t) (htim2->Instance->CR1 >> 4) & 1;
    */
    // SECTION DEBUG
    rbpush(&manip->q0_actual, displacement1);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80020c0:	ed97 0a06 	vldr	s0, [r7, #24]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fd2f 	bl	8002b28 <rbpush>
    rbpush(&manip->q1_actual, displacement2);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80020d0:	ed97 0a05 	vldr	s0, [r7, #20]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fd27 	bl	8002b28 <rbpush>

	rbpush(&manip->dq1_actual, v_est);
	rbpush(&manip->ddq1_actual, a_est);
    // !SECTION DEBUG
	*/
}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bdb0      	pop	{r4, r5, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	f3af 8000 	nop.w
 80020e8:	54442d18 	.word	0x54442d18
 80020ec:	401921fb 	.word	0x401921fb
 80020f0:	54442d18 	.word	0x54442d18
 80020f4:	400921fb 	.word	0x400921fb
 80020f8:	40c90fdb 	.word	0x40c90fdb
 80020fc:	60000000 	.word	0x60000000
 8002100:	401921fb 	.word	0x401921fb

08002104 <update_speeds>:

void update_speeds(man_t *manip){
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	float v_est, a_est;
	speed_estimation(&manip->q0_actual, &manip->dq0_actual, reduction1, &v_est, &a_est);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f503 709a 	add.w	r0, r3, #308	; 0x134
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f503 71c6 	add.w	r1, r3, #396	; 0x18c
 8002118:	eddf 7a24 	vldr	s15, [pc, #144]	; 80021ac <update_speeds+0xa8>
 800211c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	f107 020c 	add.w	r2, r7, #12
 8002128:	eeb0 0a67 	vmov.f32	s0, s15
 800212c:	f7ff fe20 	bl	8001d70 <speed_estimation>
	//disp1 = v_est;
	rbpush(&manip->dq0_actual, v_est);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002136:	edd7 7a03 	vldr	s15, [r7, #12]
 800213a:	eeb0 0a67 	vmov.f32	s0, s15
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fcf2 	bl	8002b28 <rbpush>
	rbpush(&manip->ddq0_actual, a_est);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800214a:	edd7 7a02 	vldr	s15, [r7, #8]
 800214e:	eeb0 0a67 	vmov.f32	s0, s15
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fce8 	bl	8002b28 <rbpush>

	speed_estimation(&manip->q1_actual, &manip->dq1_actual, reduction2, &v_est, &a_est);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8002164:	eddf 7a12 	vldr	s15, [pc, #72]	; 80021b0 <update_speeds+0xac>
 8002168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	f107 020c 	add.w	r2, r7, #12
 8002174:	eeb0 0a67 	vmov.f32	s0, s15
 8002178:	f7ff fdfa 	bl	8001d70 <speed_estimation>
	//disp2 = v_est;
	rbpush(&manip->dq1_actual, v_est);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002182:	edd7 7a03 	vldr	s15, [r7, #12]
 8002186:	eeb0 0a67 	vmov.f32	s0, s15
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fccc 	bl	8002b28 <rbpush>
	rbpush(&manip->ddq1_actual, a_est);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002196:	edd7 7a02 	vldr	s15, [r7, #8]
 800219a:	eeb0 0a67 	vmov.f32	s0, s15
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fcc2 	bl	8002b28 <rbpush>
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	0000000a 	.word	0x0000000a
 80021b0:	00000005 	.word	0x00000005
 80021b4:	00000000 	.word	0x00000000

080021b8 <apply_input>:

void apply_input(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, float *u){
 80021b8:	b5b0      	push	{r4, r5, r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
    __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
    htim1->Instance->EGR = TIM_EGR_UG;
    */
    // rad2stepdir(u[0], RESOLUTION, (float) 1/T_C, &steps, &dir);

    dir1 = u[0] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	bf4c      	ite	mi
 80021d4:	2301      	movmi	r3, #1
 80021d6:	2300      	movpl	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    // dir1 = 1; // DEBUG
    HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, dir1);
 80021de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021e2:	461a      	mov	r2, r3
 80021e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021e8:	4871      	ldr	r0, [pc, #452]	; (80023b0 <apply_input+0x1f8>)
 80021ea:	f002 f88b 	bl	8004304 <HAL_GPIO_WritePin>

    dir2 = u[1] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3304      	adds	r3, #4
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	bf4c      	ite	mi
 8002200:	2301      	movmi	r3, #1
 8002202:	2300      	movpl	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    // dir2 = 1; // DEBUG
    HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, dir2);
 800220a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800220e:	461a      	mov	r2, r3
 8002210:	2102      	movs	r1, #2
 8002212:	4868      	ldr	r0, [pc, #416]	; (80023b4 <apply_input+0x1fc>)
 8002214:	f002 f876 	bl	8004304 <HAL_GPIO_WritePin>
    //ARR *= 16;
    //ARR /= reduction1;
    //CCR = (uint32_t) ((ABS(u[0])/MAX_SPEED)*(ARR - 1));
    //CCR %= (ARR-1); /* saturate the motor, avoid too high speeds */
    // rad2stepdir(u[0], (float) RESOLUTION, (float) (1/T_S), &steps, &dir1);
    stepdir = (int32_t) (16*reduction1*(u[0]/RESOLUTION)); // 16 -> microstepping
 8002218:	230a      	movs	r3, #10
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f991 	bl	8000544 <__aeabi_i2d>
 8002222:	4604      	mov	r4, r0
 8002224:	460d      	mov	r5, r1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f99c 	bl	8000568 <__aeabi_f2d>
 8002230:	a35d      	add	r3, pc, #372	; (adr r3, 80023a8 <apply_input+0x1f0>)
 8002232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002236:	f7fe fb19 	bl	800086c <__aeabi_ddiv>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4620      	mov	r0, r4
 8002240:	4629      	mov	r1, r5
 8002242:	f7fe f9e9 	bl	8000618 <__aeabi_dmul>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f7fe fc7d 	bl	8000b4c <__aeabi_d2iz>
 8002252:	4603      	mov	r3, r0
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
    f = HAL_RCC_GetPCLK1Freq()*2;
 8002256:	f002 fd11 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 800225a:	4603      	mov	r3, r0
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    // dir1 = -SIGN(stepdir);
    steps = (uint32_t) ABS(stepdir);
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	43db      	mvns	r3, r3
 8002264:	0fdb      	lsrs	r3, r3, #31
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	2b00      	cmp	r3, #0
 800226e:	bfd4      	ite	le
 8002270:	2301      	movle	r3, #1
 8002272:	2300      	movgt	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	b25b      	sxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	623b      	str	r3, [r7, #32]
    ARR = steps == 0 ? 0 : (f/(steps))-1;
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <apply_input+0xe0>
 800228c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	e000      	b.n	800229a <apply_input+0xe2>
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
    CCR = steps == 0 ? 0 : (ARR-1)/2;
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <apply_input+0xf2>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	e000      	b.n	80022ac <apply_input+0xf4>
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
    __HAL_TIM_SET_AUTORELOAD(htim1, ARR);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	635a      	str	r2, [r3, #52]	; 0x34
    htim1->Instance->EGR = TIM_EGR_UG;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2201      	movs	r2, #1
 80022ca:	615a      	str	r2, [r3, #20]
    //ARR *= 16;
    //ARR /= reduction2;
    //CCR = (uint32_t) ((ABS(u[1])/MAX_SPEED)*(ARR - 1));
    //CCR %= (ARR-1); /* saturate the motor, avoid too high speeds */

    if(u[1] > 0){
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3304      	adds	r3, #4
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022dc:	dd05      	ble.n	80022ea <apply_input+0x132>
    	double a;
    	a = 0;
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }

    stepdir = (int32_t) (16*reduction2*(u[1]/RESOLUTION)); // 16 -> microstepping
 80022ea:	2305      	movs	r3, #5
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f928 	bl	8000544 <__aeabi_i2d>
 80022f4:	4604      	mov	r4, r0
 80022f6:	460d      	mov	r5, r1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3304      	adds	r3, #4
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f932 	bl	8000568 <__aeabi_f2d>
 8002304:	a328      	add	r3, pc, #160	; (adr r3, 80023a8 <apply_input+0x1f0>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe faaf 	bl	800086c <__aeabi_ddiv>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4620      	mov	r0, r4
 8002314:	4629      	mov	r1, r5
 8002316:	f7fe f97f 	bl	8000618 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f7fe fc13 	bl	8000b4c <__aeabi_d2iz>
 8002326:	4603      	mov	r3, r0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
    f = HAL_RCC_GetPCLK1Freq()*2;
 800232a:	f002 fca7 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 800232e:	4603      	mov	r3, r0
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
	steps = (uint32_t) ABS(stepdir);
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	43db      	mvns	r3, r3
 8002338:	0fdb      	lsrs	r3, r3, #31
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	bfd4      	ite	le
 8002344:	2301      	movle	r3, #1
 8002346:	2300      	movgt	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	b25b      	sxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	623b      	str	r3, [r7, #32]
	ARR = steps == 0 ? 0 : (f/(steps))-1;
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <apply_input+0x1b4>
 8002360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	e000      	b.n	800236e <apply_input+0x1b6>
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
	CCR = steps == 0 ? 0 : (ARR-1)/2;
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <apply_input+0x1c6>
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3b01      	subs	r3, #1
 800237a:	085b      	lsrs	r3, r3, #1
 800237c:	e000      	b.n	8002380 <apply_input+0x1c8>
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
    __HAL_TIM_SET_AUTORELOAD(htim2, ARR);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	635a      	str	r2, [r3, #52]	; 0x34
    htim2->Instance->EGR = TIM_EGR_UG;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2201      	movs	r2, #1
 800239e:	615a      	str	r2, [r3, #20]
    // CCR = (uint32_t) ARR/2;
// 
    // __HAL_TIM_SET_AUTORELOAD(htim2, ARR);
    // __HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
    // htim2->Instance->EGR = TIM_EGR_UG;
}
 80023a0:	bf00      	nop
 80023a2:	3730      	adds	r7, #48	; 0x30
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bdb0      	pop	{r4, r5, r7, pc}
 80023a8:	ae261898 	.word	0xae261898
 80023ac:	3fa015be 	.word	0x3fa015be
 80023b0:	40020800 	.word	0x40020800
 80023b4:	40020000 	.word	0x40020000

080023b8 <start_timers>:

void start_timers(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, TIM_HandleTypeDef *htim4){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
    HAL_TIM_Base_Start_IT(htim1);
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f002 fcd0 	bl	8004d6c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim2);
 80023cc:	68b8      	ldr	r0, [r7, #8]
 80023ce:	f002 fccd 	bl	8004d6c <HAL_TIM_Base_Start_IT>
    /* start motor PWM */
    HAL_TIM_Base_Start_IT(htim3);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f002 fcca 	bl	8004d6c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim4);
 80023d8:	6838      	ldr	r0, [r7, #0]
 80023da:	f002 fcc7 	bl	8004d6c <HAL_TIM_Base_Start_IT>
    /* start PWM */
    if(HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1) != HAL_OK){
 80023de:	2100      	movs	r1, #0
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f002 fd75 	bl	8004ed0 <HAL_TIM_PWM_Start>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <start_timers+0x38>
        HardFault_Handler();
 80023ec:	f000 fee7 	bl	80031be <HardFault_Handler>
    }
    if(HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_1) != HAL_OK){
 80023f0:	2100      	movs	r1, #0
 80023f2:	6838      	ldr	r0, [r7, #0]
 80023f4:	f002 fd6c 	bl	8004ed0 <HAL_TIM_PWM_Start>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <start_timers+0x4a>
        HardFault_Handler();
 80023fe:	f000 fede 	bl	80031be <HardFault_Handler>
    }
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	0000      	movs	r0, r0
 800240c:	0000      	movs	r0, r0
	...

08002410 <setup_encoders>:
    sprintf(tx_data, "%X:%X:%X:%X:%X\n", (unsigned long long int) timestamp, encoding_q0, encoding_q1, encoding_q0_d, encoding_q1_d); /*Timestamp:q0:q1*/
    HAL_UART_Transmit_DMA(huart, (uint8_t *) tx_data, sizeof tx_data); /* send encoder data for logging purposes */
}


void setup_encoders(TIM_HandleTypeDef *htim){
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	const uint32_t clock_freq = 84000000;
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <setup_encoders+0x78>)
 800241a:	60fb      	str	r3, [r7, #12]
	uint16_t ARR;
	ARR = (T_S*clock_freq)/PRESCALER_ENCODER;
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7fe f881 	bl	8000524 <__aeabi_ui2d>
 8002422:	a317      	add	r3, pc, #92	; (adr r3, 8002480 <setup_encoders+0x70>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f8f6 	bl	8000618 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <setup_encoders+0x7c>)
 800243a:	f7fe fa17 	bl	800086c <__aeabi_ddiv>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f7fe fba9 	bl	8000b9c <__aeabi_d2uiz>
 800244a:	4603      	mov	r3, r0
 800244c:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_PRESCALER(htim, PRESCALER_ENCODER);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2210      	movs	r2, #16
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	897a      	ldrh	r2, [r7, #10]
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
 800245e:	897a      	ldrh	r2, [r7, #10]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	60da      	str	r2, [r3, #12]
	htim->Instance->EGR = TIM_EGR_UG;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2201      	movs	r2, #1
 800246a:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f002 fc7d 	bl	8004d6c <HAL_TIM_Base_Start_IT>
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	f3af 8000 	nop.w
 8002480:	eb1c432d 	.word	0xeb1c432d
 8002484:	3f2a36e2 	.word	0x3f2a36e2
 8002488:	0501bd00 	.word	0x0501bd00
 800248c:	40300000 	.word	0x40300000

08002490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  rate_t rate;
  float v[2], v_est, a_est;
  char *data = "\n";
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <main+0xac>)
 8002498:	617b      	str	r3, [r7, #20]
  float i = 0.3*T_C;
 800249a:	4b29      	ldr	r3, [pc, #164]	; (8002540 <main+0xb0>)
 800249c:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800249e:	f001 f803 	bl	80034a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024a2:	f000 f867 	bl	8002574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024a6:	f000 fa9f 	bl	80029e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80024aa:	f000 fa75 	bl	8002998 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80024ae:	f000 fa49 	bl	8002944 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80024b2:	f000 f921 	bl	80026f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80024b6:	f000 f973 	bl	80027a0 <MX_TIM4_Init>
  MX_TIM2_Init();
 80024ba:	f000 f8c5 	bl	8002648 <MX_TIM2_Init>
  MX_TIM5_Init();
 80024be:	f000 f9c3 	bl	8002848 <MX_TIM5_Init>
  MX_TIM10_Init();
 80024c2:	f000 fa1b 	bl	80028fc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip, &htim3, &htim4); /* initialize the manipulator struct */
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <main+0xb4>)
 80024c8:	491f      	ldr	r1, [pc, #124]	; (8002548 <main+0xb8>)
 80024ca:	4820      	ldr	r0, [pc, #128]	; (800254c <main+0xbc>)
 80024cc:	f7fe fe12 	bl	80010f4 <init_man>
  init_rate(&rate, (uint32_t) (T_C*1000)); /* initialize the rate struct */
 80024d0:	f107 0308 	add.w	r3, r7, #8
 80024d4:	2101      	movs	r1, #1
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fd0e 	bl	8001ef8 <init_rate>
  rbclear(&timestamps);
 80024dc:	481c      	ldr	r0, [pc, #112]	; (8002550 <main+0xc0>)
 80024de:	f000 fc1d 	bl	8002d1c <rbclear>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	491b      	ldr	r1, [pc, #108]	; (8002554 <main+0xc4>)
 80024e6:	481c      	ldr	r0, [pc, #112]	; (8002558 <main+0xc8>)
 80024e8:	f003 fb3b 	bl	8005b62 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* start timers */
  start_timers(&htim3, &htim4, &htim2, &htim5);
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <main+0xcc>)
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <main+0xd0>)
 80024f0:	4914      	ldr	r1, [pc, #80]	; (8002544 <main+0xb4>)
 80024f2:	4815      	ldr	r0, [pc, #84]	; (8002548 <main+0xb8>)
 80024f4:	f7ff ff60 	bl	80023b8 <start_timers>
  setup_encoders(&htim10);
 80024f8:	481a      	ldr	r0, [pc, #104]	; (8002564 <main+0xd4>)
 80024fa:	f7ff ff89 	bl	8002410 <setup_encoders>

  while (1)
  {
    // read_encoders(&htim3, &htim4, &manip);
    update_speeds(&manip);
 80024fe:	4813      	ldr	r0, [pc, #76]	; (800254c <main+0xbc>)
 8002500:	f7ff fe00 	bl	8002104 <update_speeds>
    /* log data */
    //log_data(&huart2, &manip);
    controller(&manip, NULL); /* apply the control law to find the input */
 8002504:	2100      	movs	r1, #0
 8002506:	4811      	ldr	r0, [pc, #68]	; (800254c <main+0xbc>)
 8002508:	f7ff fad2 	bl	8001ab0 <controller>
    /* apply the inputs to the motors */

    // v[0] = 0; // 0.8*sin(HAL_GetTick()/1000);
    if (limit_switch == -1){
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <main+0xd8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002514:	d102      	bne.n	800251c <main+0x8c>
    	  v[0] = 0.3;
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <main+0xdc>)
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	e002      	b.n	8002522 <main+0x92>
    }
    else {
    	v[0]=0;
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	603b      	str	r3, [r7, #0]





    disp1 = v[0];
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	4a12      	ldr	r2, [pc, #72]	; (8002570 <main+0xe0>)
 8002526:	6013      	str	r3, [r2, #0]
    // *((float *) tx_data+1) = v[1];
    // tx_data[16] = '\n';
    // HAL_UART_Transmit_DMA(&huart2, &tx_data, 17);
    // !SECTION DEBUG

    apply_input(&htim2, &htim5, v);
 8002528:	463b      	mov	r3, r7
 800252a:	461a      	mov	r2, r3
 800252c:	490b      	ldr	r1, [pc, #44]	; (800255c <main+0xcc>)
 800252e:	480c      	ldr	r0, [pc, #48]	; (8002560 <main+0xd0>)
 8002530:	f7ff fe42 	bl	80021b8 <apply_input>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //rate_sleep(&rate); /* wait with a fixed frequency */
    HAL_Delay((uint32_t) (T_C*1000));
 8002534:	2001      	movs	r0, #1
 8002536:	f001 f829 	bl	800358c <HAL_Delay>
    update_speeds(&manip);
 800253a:	e7e0      	b.n	80024fe <main+0x6e>
 800253c:	080091b0 	.word	0x080091b0
 8002540:	399d4952 	.word	0x399d4952
 8002544:	2000047c 	.word	0x2000047c
 8002548:	20000434 	.word	0x20000434
 800254c:	20000110 	.word	0x20000110
 8002550:	200003a8 	.word	0x200003a8
 8002554:	20000090 	.word	0x20000090
 8002558:	20000554 	.word	0x20000554
 800255c:	200004c4 	.word	0x200004c4
 8002560:	200003ec 	.word	0x200003ec
 8002564:	2000050c 	.word	0x2000050c
 8002568:	20000000 	.word	0x20000000
 800256c:	3e99999a 	.word	0x3e99999a
 8002570:	200003d4 	.word	0x200003d4

08002574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b094      	sub	sp, #80	; 0x50
 8002578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800257a:	f107 0320 	add.w	r3, r7, #32
 800257e:	2230      	movs	r2, #48	; 0x30
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f004 fbd0 	bl	8006d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002588:	f107 030c 	add.w	r3, r7, #12
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002598:	2300      	movs	r3, #0
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <SystemClock_Config+0xcc>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	4a27      	ldr	r2, [pc, #156]	; (8002640 <SystemClock_Config+0xcc>)
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a6:	6413      	str	r3, [r2, #64]	; 0x40
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <SystemClock_Config+0xcc>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b4:	2300      	movs	r3, #0
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <SystemClock_Config+0xd0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a21      	ldr	r2, [pc, #132]	; (8002644 <SystemClock_Config+0xd0>)
 80025be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <SystemClock_Config+0xd0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025d0:	2302      	movs	r3, #2
 80025d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d4:	2301      	movs	r3, #1
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025d8:	2310      	movs	r3, #16
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025dc:	2302      	movs	r3, #2
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025e0:	2300      	movs	r3, #0
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80025e4:	2310      	movs	r3, #16
 80025e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80025e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80025ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80025ee:	2304      	movs	r3, #4
 80025f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025f2:	2304      	movs	r3, #4
 80025f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f6:	f107 0320 	add.w	r3, r7, #32
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 fece 	bl	800439c <HAL_RCC_OscConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002606:	f000 fa89 	bl	8002b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800260a:	230f      	movs	r3, #15
 800260c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800260e:	2302      	movs	r3, #2
 8002610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	2102      	movs	r1, #2
 8002626:	4618      	mov	r0, r3
 8002628:	f002 f930 	bl	800488c <HAL_RCC_ClockConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002632:	f000 fa73 	bl	8002b1c <Error_Handler>
  }
}
 8002636:	bf00      	nop
 8002638:	3750      	adds	r7, #80	; 0x50
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40007000 	.word	0x40007000

08002648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800264e:	f107 0320 	add.w	r3, r7, #32
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	60da      	str	r2, [r3, #12]
 8002664:	611a      	str	r2, [r3, #16]
 8002666:	615a      	str	r2, [r3, #20]
 8002668:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <MX_TIM2_Init+0xac>)
 800266c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002670:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <MX_TIM2_Init+0xac>)
 8002674:	2200      	movs	r2, #0
 8002676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <MX_TIM2_Init+0xac>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <MX_TIM2_Init+0xac>)
 8002680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002684:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <MX_TIM2_Init+0xac>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <MX_TIM2_Init+0xac>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002692:	4818      	ldr	r0, [pc, #96]	; (80026f4 <MX_TIM2_Init+0xac>)
 8002694:	f002 fbcc 	bl	8004e30 <HAL_TIM_PWM_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800269e:	f000 fa3d 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026aa:	f107 0320 	add.w	r3, r7, #32
 80026ae:	4619      	mov	r1, r3
 80026b0:	4810      	ldr	r0, [pc, #64]	; (80026f4 <MX_TIM2_Init+0xac>)
 80026b2:	f003 f987 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80026bc:	f000 fa2e 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c0:	2360      	movs	r3, #96	; 0x60
 80026c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2200      	movs	r2, #0
 80026d4:	4619      	mov	r1, r3
 80026d6:	4807      	ldr	r0, [pc, #28]	; (80026f4 <MX_TIM2_Init+0xac>)
 80026d8:	f002 fe58 	bl	800538c <HAL_TIM_PWM_ConfigChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80026e2:	f000 fa1b 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026e6:	4803      	ldr	r0, [pc, #12]	; (80026f4 <MX_TIM2_Init+0xac>)
 80026e8:	f000 fc52 	bl	8002f90 <HAL_TIM_MspPostInit>

}
 80026ec:	bf00      	nop
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200003ec 	.word	0x200003ec

080026f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	; 0x30
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026fe:	f107 030c 	add.w	r3, r7, #12
 8002702:	2224      	movs	r2, #36	; 0x24
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f004 fb0e 	bl	8006d28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <MX_TIM3_Init+0xa4>)
 8002718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800271a:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <MX_TIM3_Init+0xa0>)
 800271c:	2200      	movs	r2, #0
 800271e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002728:	f649 4240 	movw	r2, #40000	; 0x9c40
 800272c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800273a:	2303      	movs	r3, #3
 800273c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002742:	2301      	movs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002752:	2301      	movs	r3, #1
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002756:	2300      	movs	r3, #0
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800275e:	f107 030c 	add.w	r3, r7, #12
 8002762:	4619      	mov	r1, r3
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002766:	f002 fc63 	bl	8005030 <HAL_TIM_Encoder_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002770:	f000 f9d4 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	4619      	mov	r1, r3
 8002780:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002782:	f003 f91f 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800278c:	f000 f9c6 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002790:	bf00      	nop
 8002792:	3730      	adds	r7, #48	; 0x30
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000434 	.word	0x20000434
 800279c:	40000400 	.word	0x40000400

080027a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	; 0x30
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	2224      	movs	r2, #36	; 0x24
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f004 faba 	bl	8006d28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027bc:	4b20      	ldr	r3, [pc, #128]	; (8002840 <MX_TIM4_Init+0xa0>)
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <MX_TIM4_Init+0xa4>)
 80027c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027c2:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <MX_TIM4_Init+0xa0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <MX_TIM4_Init+0xa0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <MX_TIM4_Init+0xa0>)
 80027d0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80027d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d6:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <MX_TIM4_Init+0xa0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <MX_TIM4_Init+0xa0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027e2:	2303      	movs	r3, #3
 80027e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027ea:	2301      	movs	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027f6:	2300      	movs	r3, #0
 80027f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027fa:	2301      	movs	r3, #1
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027fe:	2300      	movs	r3, #0
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002806:	f107 030c 	add.w	r3, r7, #12
 800280a:	4619      	mov	r1, r3
 800280c:	480c      	ldr	r0, [pc, #48]	; (8002840 <MX_TIM4_Init+0xa0>)
 800280e:	f002 fc0f 	bl	8005030 <HAL_TIM_Encoder_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002818:	f000 f980 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281c:	2300      	movs	r3, #0
 800281e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	4619      	mov	r1, r3
 8002828:	4805      	ldr	r0, [pc, #20]	; (8002840 <MX_TIM4_Init+0xa0>)
 800282a:	f003 f8cb 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002834:	f000 f972 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002838:	bf00      	nop
 800283a:	3730      	adds	r7, #48	; 0x30
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	2000047c 	.word	0x2000047c
 8002844:	40000800 	.word	0x40000800

08002848 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284e:	f107 0320 	add.w	r3, r7, #32
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
 8002864:	611a      	str	r2, [r3, #16]
 8002866:	615a      	str	r2, [r3, #20]
 8002868:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800286a:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <MX_TIM5_Init+0xac>)
 800286c:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <MX_TIM5_Init+0xb0>)
 800286e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002870:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <MX_TIM5_Init+0xac>)
 8002872:	2200      	movs	r2, #0
 8002874:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002876:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <MX_TIM5_Init+0xac>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <MX_TIM5_Init+0xac>)
 800287e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002882:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <MX_TIM5_Init+0xac>)
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <MX_TIM5_Init+0xac>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002890:	4818      	ldr	r0, [pc, #96]	; (80028f4 <MX_TIM5_Init+0xac>)
 8002892:	f002 facd 	bl	8004e30 <HAL_TIM_PWM_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800289c:	f000 f93e 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a0:	2300      	movs	r3, #0
 80028a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028a8:	f107 0320 	add.w	r3, r7, #32
 80028ac:	4619      	mov	r1, r3
 80028ae:	4811      	ldr	r0, [pc, #68]	; (80028f4 <MX_TIM5_Init+0xac>)
 80028b0:	f003 f888 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80028ba:	f000 f92f 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028be:	2360      	movs	r3, #96	; 0x60
 80028c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	2200      	movs	r2, #0
 80028d2:	4619      	mov	r1, r3
 80028d4:	4807      	ldr	r0, [pc, #28]	; (80028f4 <MX_TIM5_Init+0xac>)
 80028d6:	f002 fd59 	bl	800538c <HAL_TIM_PWM_ConfigChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80028e0:	f000 f91c 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80028e4:	4803      	ldr	r0, [pc, #12]	; (80028f4 <MX_TIM5_Init+0xac>)
 80028e6:	f000 fb53 	bl	8002f90 <HAL_TIM_MspPostInit>

}
 80028ea:	bf00      	nop
 80028ec:	3728      	adds	r7, #40	; 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200004c4 	.word	0x200004c4
 80028f8:	40000c00 	.word	0x40000c00

080028fc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002900:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_TIM10_Init+0x40>)
 8002902:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <MX_TIM10_Init+0x44>)
 8002904:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16;
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <MX_TIM10_Init+0x40>)
 8002908:	2210      	movs	r2, #16
 800290a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <MX_TIM10_Init+0x40>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 52500;
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <MX_TIM10_Init+0x40>)
 8002914:	f64c 5214 	movw	r2, #52500	; 0xcd14
 8002918:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <MX_TIM10_Init+0x40>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_TIM10_Init+0x40>)
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_TIM10_Init+0x40>)
 8002928:	f002 f9d0 	bl	8004ccc <HAL_TIM_Base_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002932:	f000 f8f3 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000050c 	.word	0x2000050c
 8002940:	40014400 	.word	0x40014400

08002944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <MX_USART2_UART_Init+0x50>)
 800294c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800297a:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800297c:	f003 f8a4 	bl	8005ac8 <HAL_UART_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002986:	f000 f8c9 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000554 	.word	0x20000554
 8002994:	40004400 	.word	0x40004400

08002998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <MX_DMA_Init+0x4c>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <MX_DMA_Init+0x4c>)
 80029a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <MX_DMA_Init+0x4c>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2100      	movs	r1, #0
 80029be:	2010      	movs	r0, #16
 80029c0:	f000 fee3 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80029c4:	2010      	movs	r0, #16
 80029c6:	f000 fefc 	bl	80037c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	2011      	movs	r0, #17
 80029d0:	f000 fedb 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80029d4:	2011      	movs	r0, #17
 80029d6:	f000 fef4 	bl	80037c2 <HAL_NVIC_EnableIRQ>

}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800

080029e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	4b43      	ldr	r3, [pc, #268]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a42      	ldr	r2, [pc, #264]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a3b      	ldr	r2, [pc, #236]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a34      	ldr	r2, [pc, #208]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b32      	ldr	r3, [pc, #200]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	4b2e      	ldr	r3, [pc, #184]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a2d      	ldr	r2, [pc, #180]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <MX_GPIO_Init+0x128>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2122      	movs	r1, #34	; 0x22
 8002a72:	4828      	ldr	r0, [pc, #160]	; (8002b14 <MX_GPIO_Init+0x12c>)
 8002a74:	f001 fc46 	bl	8004304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a7e:	4826      	ldr	r0, [pc, #152]	; (8002b18 <MX_GPIO_Init+0x130>)
 8002a80:	f001 fc40 	bl	8004304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	4619      	mov	r1, r3
 8002a9a:	481f      	ldr	r0, [pc, #124]	; (8002b18 <MX_GPIO_Init+0x130>)
 8002a9c:	f001 faae 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|LD2_Pin;
 8002aa0:	2322      	movs	r3, #34	; 0x22
 8002aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4817      	ldr	r0, [pc, #92]	; (8002b14 <MX_GPIO_Init+0x12c>)
 8002ab8:	f001 faa0 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|LIMIT_SWITCH_2_Pin;
 8002abc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ac2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4810      	ldr	r0, [pc, #64]	; (8002b14 <MX_GPIO_Init+0x12c>)
 8002ad4:	f001 fa92 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_1_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin;
 8002ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <MX_GPIO_Init+0x130>)
 8002af2:	f001 fa83 	bl	8003ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	2028      	movs	r0, #40	; 0x28
 8002afc:	f000 fe45 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b00:	2028      	movs	r0, #40	; 0x28
 8002b02:	f000 fe5e 	bl	80037c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b06:	bf00      	nop
 8002b08:	3728      	adds	r7, #40	; 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020000 	.word	0x40020000
 8002b18:	40020800 	.word	0x40020800

08002b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b20:	b672      	cpsid	i
}
 8002b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <Error_Handler+0x8>
	...

08002b28 <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3304      	adds	r3, #4
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <rbpush+0x90>)
 8002b56:	fba3 1302 	umull	r1, r3, r3, r2
 8002b5a:	08d9      	lsrs	r1, r3, #3
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	789b      	ldrb	r3, [r3, #2]
 8002b70:	2b0a      	cmp	r3, #10
 8002b72:	d114      	bne.n	8002b9e <rbpush+0x76>
        /* overwriting data: also move head forward */
        buffer->head++;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	785a      	ldrb	r2, [r3, #1]
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <rbpush+0x90>)
 8002b86:	fba3 1302 	umull	r1, r3, r3, r2
 8002b8a:	08d9      	lsrs	r1, r3, #3
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	705a      	strb	r2, [r3, #1]
 8002b9c:	e005      	b.n	8002baa <rbpush+0x82>
    }else{
        buffer->length++;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	789b      	ldrb	r3, [r3, #2]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 8002baa:	2301      	movs	r3, #1
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	cccccccd 	.word	0xcccccccd

08002bbc <rbpop>:
- rbelement_t *data: pointer to the variable that will hold the popped value;
@outputs: 
- rberror_t: whether the popping procedure was concluded successfully.
@#
*/
rberror_t rbpop(ringbuffer_t *buffer, rbelement_t *data){
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	789b      	ldrb	r3, [r3, #2]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <rbpop+0x28>
        *data = buffer->buffer[buffer->head]; /* avoids random values in data */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	785b      	ldrb	r3, [r3, #1]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	601a      	str	r2, [r3, #0]
        return 0; /* pop operation could not be completed because the buffer is empty */
 8002be0:	2300      	movs	r3, #0
 8002be2:	e023      	b.n	8002c2c <rbpop+0x70>
    }
    *data = buffer->buffer[buffer->head];
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	785b      	ldrb	r3, [r3, #1]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	601a      	str	r2, [r3, #0]
    buffer->head++;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	705a      	strb	r2, [r3, #1]
    buffer->head %= RBUF_SZ;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	785a      	ldrb	r2, [r3, #1]
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <rbpop+0x7c>)
 8002c08:	fba3 1302 	umull	r1, r3, r3, r2
 8002c0c:	08d9      	lsrs	r1, r3, #3
 8002c0e:	460b      	mov	r3, r1
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	705a      	strb	r2, [r3, #1]
    buffer->length--;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	789b      	ldrb	r3, [r3, #2]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	709a      	strb	r2, [r3, #2]
    return 1;
 8002c2a:	2301      	movs	r3, #1
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	cccccccd 	.word	0xcccccccd

08002c3c <rblast>:
- rbelement_t *data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	789b      	ldrb	r3, [r3, #2]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <rblast+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	601a      	str	r2, [r3, #0]
        return 0; // operation failed
 8002c60:	2300      	movs	r3, #0
 8002c62:	e015      	b.n	8002c90 <rblast+0x54>
    }
    // uint8_t index = (uint8_t) ((buffer->tail-1+RBUF_SZ)%RBUF_SZ);
    int8_t index = buffer->tail-1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
 8002c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	da03      	bge.n	8002c7e <rblast+0x42>
    	index += RBUF_SZ;
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	330a      	adds	r3, #10
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	73fb      	strb	r3, [r7, #15]
    }
    *data = buffer->buffer[(uint8_t) index];
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	3304      	adds	r3, #4
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	601a      	str	r2, [r3, #0]
    return 1;
 8002c8e:	2301      	movs	r3, #1
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <rbget>:


rberror_t rbget(ringbuffer_t *buffer, int8_t i, rbelement_t *data){
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 8002caa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db05      	blt.n	8002cbe <rbget+0x22>
 8002cb2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	7892      	ldrb	r2, [r2, #2]
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	db0a      	blt.n	8002cd4 <rbget+0x38>
        /* out of bounds */
    	*data =  buffer->buffer[buffer->head];
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3304      	adds	r3, #4
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	601a      	str	r2, [r3, #0]
        return 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e01b      	b.n	8002d0c <rbget+0x70>
    }
    uint8_t index = (uint8_t) ((buffer->head+i) % RBUF_SZ);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	785b      	ldrb	r3, [r3, #1]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002cde:	441a      	add	r2, r3
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <rbget+0x7c>)
 8002ce2:	fb83 1302 	smull	r1, r3, r3, r2
 8002ce6:	1099      	asrs	r1, r3, #2
 8002ce8:	17d3      	asrs	r3, r2, #31
 8002cea:	1ac9      	subs	r1, r1, r3
 8002cec:	460b      	mov	r3, r1
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	1ad1      	subs	r1, r2, r3
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	75fb      	strb	r3, [r7, #23]
    *data = buffer->buffer[index];
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	3304      	adds	r3, #4
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	601a      	str	r2, [r3, #0]
    return 1;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	66666667 	.word	0x66666667

08002d1c <rbclear>:
- ringbuffer_t *buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e00a      	b.n	8002d44 <rbclear+0x28>
        buffer->buffer[i] = 0;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	3304      	adds	r3, #4
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	3301      	adds	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	d9f1      	bls.n	8002d2e <rbclear+0x12>
    }
    buffer->length = 0;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_MspInit+0x4c>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002da6:	2007      	movs	r0, #7
 8002da8:	f000 fce4 	bl	8003774 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc8:	d10e      	bne.n	8002de8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <HAL_TIM_PWM_MspInit+0x64>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <HAL_TIM_PWM_MspInit+0x64>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <HAL_TIM_PWM_MspInit+0x64>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002de6:	e012      	b.n	8002e0e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <HAL_TIM_PWM_MspInit+0x68>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d10d      	bne.n	8002e0e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_TIM_PWM_MspInit+0x64>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_TIM_PWM_MspInit+0x64>)
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_TIM_PWM_MspInit+0x64>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
}
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40000c00 	.word	0x40000c00

08002e24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08c      	sub	sp, #48	; 0x30
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 031c 	add.w	r3, r7, #28
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a3a      	ldr	r2, [pc, #232]	; (8002f2c <HAL_TIM_Encoder_MspInit+0x108>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d134      	bne.n	8002eb0 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a38      	ldr	r2, [pc, #224]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	4b32      	ldr	r3, [pc, #200]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a31      	ldr	r2, [pc, #196]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e7e:	23c0      	movs	r3, #192	; 0xc0
 8002e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	4619      	mov	r1, r3
 8002e98:	4826      	ldr	r0, [pc, #152]	; (8002f34 <HAL_TIM_Encoder_MspInit+0x110>)
 8002e9a:	f001 f8af 	bl	8003ffc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	201d      	movs	r0, #29
 8002ea4:	f000 fc71 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ea8:	201d      	movs	r0, #29
 8002eaa:	f000 fc8a 	bl	80037c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002eae:	e038      	b.n	8002f22 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <HAL_TIM_Encoder_MspInit+0x114>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d133      	bne.n	8002f22 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ef2:	23c0      	movs	r3, #192	; 0xc0
 8002ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2300      	movs	r3, #0
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f02:	2302      	movs	r3, #2
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f06:	f107 031c 	add.w	r3, r7, #28
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	480b      	ldr	r0, [pc, #44]	; (8002f3c <HAL_TIM_Encoder_MspInit+0x118>)
 8002f0e:	f001 f875 	bl	8003ffc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	201e      	movs	r0, #30
 8002f18:	f000 fc37 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f1c:	201e      	movs	r0, #30
 8002f1e:	f000 fc50 	bl	80037c2 <HAL_NVIC_EnableIRQ>
}
 8002f22:	bf00      	nop
 8002f24:	3730      	adds	r7, #48	; 0x30
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40000800 	.word	0x40000800
 8002f3c:	40020400 	.word	0x40020400

08002f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <HAL_TIM_Base_MspInit+0x48>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d115      	bne.n	8002f7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <HAL_TIM_Base_MspInit+0x4c>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	4a0c      	ldr	r2, [pc, #48]	; (8002f8c <HAL_TIM_Base_MspInit+0x4c>)
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f60:	6453      	str	r3, [r2, #68]	; 0x44
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_TIM_Base_MspInit+0x4c>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	2019      	movs	r0, #25
 8002f74:	f000 fc09 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f78:	2019      	movs	r0, #25
 8002f7a:	f000 fc22 	bl	80037c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40014400 	.word	0x40014400
 8002f8c:	40023800 	.word	0x40023800

08002f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d11f      	bne.n	8002ff2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_TIM_MspPostInit+0xb0>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <HAL_TIM_MspPostInit+0xb0>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <HAL_TIM_MspPostInit+0xb0>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4816      	ldr	r0, [pc, #88]	; (8003044 <HAL_TIM_MspPostInit+0xb4>)
 8002fec:	f001 f806 	bl	8003ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002ff0:	e022      	b.n	8003038 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a14      	ldr	r2, [pc, #80]	; (8003048 <HAL_TIM_MspPostInit+0xb8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d11d      	bne.n	8003038 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <HAL_TIM_MspPostInit+0xb0>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <HAL_TIM_MspPostInit+0xb0>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6313      	str	r3, [r2, #48]	; 0x30
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <HAL_TIM_MspPostInit+0xb0>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003018:	2301      	movs	r3, #1
 800301a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003028:	2302      	movs	r3, #2
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	f107 0314 	add.w	r3, r7, #20
 8003030:	4619      	mov	r1, r3
 8003032:	4804      	ldr	r0, [pc, #16]	; (8003044 <HAL_TIM_MspPostInit+0xb4>)
 8003034:	f000 ffe2 	bl	8003ffc <HAL_GPIO_Init>
}
 8003038:	bf00      	nop
 800303a:	3728      	adds	r7, #40	; 0x28
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	40020000 	.word	0x40020000
 8003048:	40000c00 	.word	0x40000c00

0800304c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a4c      	ldr	r2, [pc, #304]	; (800319c <HAL_UART_MspInit+0x150>)
 800306a:	4293      	cmp	r3, r2
 800306c:	f040 8092 	bne.w	8003194 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	4b4a      	ldr	r3, [pc, #296]	; (80031a0 <HAL_UART_MspInit+0x154>)
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	4a49      	ldr	r2, [pc, #292]	; (80031a0 <HAL_UART_MspInit+0x154>)
 800307a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800307e:	6413      	str	r3, [r2, #64]	; 0x40
 8003080:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_UART_MspInit+0x154>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	4b43      	ldr	r3, [pc, #268]	; (80031a0 <HAL_UART_MspInit+0x154>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	4a42      	ldr	r2, [pc, #264]	; (80031a0 <HAL_UART_MspInit+0x154>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6313      	str	r3, [r2, #48]	; 0x30
 800309c:	4b40      	ldr	r3, [pc, #256]	; (80031a0 <HAL_UART_MspInit+0x154>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030a8:	230c      	movs	r3, #12
 80030aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b4:	2303      	movs	r3, #3
 80030b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030b8:	2307      	movs	r3, #7
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4619      	mov	r1, r3
 80030c2:	4838      	ldr	r0, [pc, #224]	; (80031a4 <HAL_UART_MspInit+0x158>)
 80030c4:	f000 ff9a 	bl	8003ffc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80030c8:	4b37      	ldr	r3, [pc, #220]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 80030ca:	4a38      	ldr	r2, [pc, #224]	; (80031ac <HAL_UART_MspInit+0x160>)
 80030cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 80030d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030d6:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030dc:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030e2:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 80030e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030ea:	4b2f      	ldr	r3, [pc, #188]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030f0:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030fc:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 80030fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003102:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003104:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 8003106:	2200      	movs	r2, #0
 8003108:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800310a:	4827      	ldr	r0, [pc, #156]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 800310c:	f000 fb74 	bl	80037f8 <HAL_DMA_Init>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003116:	f7ff fd01 	bl	8002b1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 800311e:	639a      	str	r2, [r3, #56]	; 0x38
 8003120:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <HAL_UART_MspInit+0x15c>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_UART_MspInit+0x164>)
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <HAL_UART_MspInit+0x168>)
 800312a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_UART_MspInit+0x164>)
 800312e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003132:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003134:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <HAL_UART_MspInit+0x164>)
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_UART_MspInit+0x164>)
 800313c:	2200      	movs	r2, #0
 800313e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_UART_MspInit+0x164>)
 8003142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003146:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_UART_MspInit+0x164>)
 800314a:	2200      	movs	r2, #0
 800314c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800314e:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <HAL_UART_MspInit+0x164>)
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003154:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <HAL_UART_MspInit+0x164>)
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_UART_MspInit+0x164>)
 800315c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003160:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_UART_MspInit+0x164>)
 8003164:	2200      	movs	r2, #0
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003168:	4811      	ldr	r0, [pc, #68]	; (80031b0 <HAL_UART_MspInit+0x164>)
 800316a:	f000 fb45 	bl	80037f8 <HAL_DMA_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8003174:	f7ff fcd2 	bl	8002b1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a0d      	ldr	r2, [pc, #52]	; (80031b0 <HAL_UART_MspInit+0x164>)
 800317c:	635a      	str	r2, [r3, #52]	; 0x34
 800317e:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <HAL_UART_MspInit+0x164>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003184:	2200      	movs	r2, #0
 8003186:	2100      	movs	r1, #0
 8003188:	2026      	movs	r0, #38	; 0x26
 800318a:	f000 fafe 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800318e:	2026      	movs	r0, #38	; 0x26
 8003190:	f000 fb17 	bl	80037c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003194:	bf00      	nop
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40004400 	.word	0x40004400
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40020000 	.word	0x40020000
 80031a8:	20000598 	.word	0x20000598
 80031ac:	40026088 	.word	0x40026088
 80031b0:	200005f8 	.word	0x200005f8
 80031b4:	400260a0 	.word	0x400260a0

080031b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031bc:	e7fe      	b.n	80031bc <NMI_Handler+0x4>

080031be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c2:	e7fe      	b.n	80031c2 <HardFault_Handler+0x4>

080031c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c8:	e7fe      	b.n	80031c8 <MemManage_Handler+0x4>

080031ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ce:	e7fe      	b.n	80031ce <BusFault_Handler+0x4>

080031d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <UsageFault_Handler+0x4>

080031d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003204:	f000 f9a2 	bl	800354c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003208:	bf00      	nop
 800320a:	bd80      	pop	{r7, pc}

0800320c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003210:	4802      	ldr	r0, [pc, #8]	; (800321c <DMA1_Stream5_IRQHandler+0x10>)
 8003212:	f000 fc89 	bl	8003b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000598 	.word	0x20000598

08003220 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003224:	4802      	ldr	r0, [pc, #8]	; (8003230 <DMA1_Stream6_IRQHandler+0x10>)
 8003226:	f000 fc7f 	bl	8003b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200005f8 	.word	0x200005f8

08003234 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003238:	4802      	ldr	r0, [pc, #8]	; (8003244 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800323a:	f001 ff9f 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	2000050c 	.word	0x2000050c

08003248 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <TIM3_IRQHandler+0x10>)
 800324e:	f001 ff95 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000434 	.word	0x20000434

0800325c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003260:	4802      	ldr	r0, [pc, #8]	; (800326c <TIM4_IRQHandler+0x10>)
 8003262:	f001 ff8b 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	2000047c 	.word	0x2000047c

08003270 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003274:	4802      	ldr	r0, [pc, #8]	; (8003280 <USART2_IRQHandler+0x10>)
 8003276:	f002 fca5 	bl	8005bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000554 	.word	0x20000554

08003284 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_1_Pin);
 8003288:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800328c:	f001 f86e 	bl	800436c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_2_Pin);
 8003290:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003294:	f001 f86a 	bl	800436c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003298:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800329c:	f001 f866 	bl	800436c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
	return 1;
 80032a8:	2301      	movs	r3, #1
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <_kill>:

int _kill(int pid, int sig)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032be:	f003 fd09 	bl	8006cd4 <__errno>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2216      	movs	r2, #22
 80032c6:	601a      	str	r2, [r3, #0]
	return -1;
 80032c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <_exit>:

void _exit (int status)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ffe7 	bl	80032b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032e6:	e7fe      	b.n	80032e6 <_exit+0x12>

080032e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	e00a      	b.n	8003310 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032fa:	f3af 8000 	nop.w
 80032fe:	4601      	mov	r1, r0
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	60ba      	str	r2, [r7, #8]
 8003306:	b2ca      	uxtb	r2, r1
 8003308:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	3301      	adds	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	dbf0      	blt.n	80032fa <_read+0x12>
	}

return len;
 8003318:	687b      	ldr	r3, [r7, #4]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e009      	b.n	8003348 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	60ba      	str	r2, [r7, #8]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	3301      	adds	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	dbf1      	blt.n	8003334 <_write+0x12>
	}
	return len;
 8003350:	687b      	ldr	r3, [r7, #4]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <_close>:

int _close(int file)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
	return -1;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003382:	605a      	str	r2, [r3, #4]
	return 0;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <_isatty>:

int _isatty(int file)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
	return 1;
 800339a:	2301      	movs	r3, #1
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
	return 0;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033cc:	4a14      	ldr	r2, [pc, #80]	; (8003420 <_sbrk+0x5c>)
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <_sbrk+0x60>)
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <_sbrk+0x64>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <_sbrk+0x64>)
 80033e2:	4a12      	ldr	r2, [pc, #72]	; (800342c <_sbrk+0x68>)
 80033e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <_sbrk+0x64>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d207      	bcs.n	8003404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033f4:	f003 fc6e 	bl	8006cd4 <__errno>
 80033f8:	4603      	mov	r3, r0
 80033fa:	220c      	movs	r2, #12
 80033fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003402:	e009      	b.n	8003418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <_sbrk+0x64>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <_sbrk+0x64>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	4a05      	ldr	r2, [pc, #20]	; (8003428 <_sbrk+0x64>)
 8003414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20020000 	.word	0x20020000
 8003424:	00000400 	.word	0x00000400
 8003428:	20000658 	.word	0x20000658
 800342c:	20000670 	.word	0x20000670

08003430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <SystemInit+0x20>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	4a05      	ldr	r2, [pc, #20]	; (8003450 <SystemInit+0x20>)
 800343c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <Reset_Handler>:
 8003454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800348c <LoopFillZerobss+0x12>
 8003458:	480d      	ldr	r0, [pc, #52]	; (8003490 <LoopFillZerobss+0x16>)
 800345a:	490e      	ldr	r1, [pc, #56]	; (8003494 <LoopFillZerobss+0x1a>)
 800345c:	4a0e      	ldr	r2, [pc, #56]	; (8003498 <LoopFillZerobss+0x1e>)
 800345e:	2300      	movs	r3, #0
 8003460:	e002      	b.n	8003468 <LoopCopyDataInit>

08003462 <CopyDataInit>:
 8003462:	58d4      	ldr	r4, [r2, r3]
 8003464:	50c4      	str	r4, [r0, r3]
 8003466:	3304      	adds	r3, #4

08003468 <LoopCopyDataInit>:
 8003468:	18c4      	adds	r4, r0, r3
 800346a:	428c      	cmp	r4, r1
 800346c:	d3f9      	bcc.n	8003462 <CopyDataInit>
 800346e:	4a0b      	ldr	r2, [pc, #44]	; (800349c <LoopFillZerobss+0x22>)
 8003470:	4c0b      	ldr	r4, [pc, #44]	; (80034a0 <LoopFillZerobss+0x26>)
 8003472:	2300      	movs	r3, #0
 8003474:	e001      	b.n	800347a <LoopFillZerobss>

08003476 <FillZerobss>:
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	3204      	adds	r2, #4

0800347a <LoopFillZerobss>:
 800347a:	42a2      	cmp	r2, r4
 800347c:	d3fb      	bcc.n	8003476 <FillZerobss>
 800347e:	f7ff ffd7 	bl	8003430 <SystemInit>
 8003482:	f003 fc2d 	bl	8006ce0 <__libc_init_array>
 8003486:	f7ff f803 	bl	8002490 <main>
 800348a:	4770      	bx	lr
 800348c:	20020000 	.word	0x20020000
 8003490:	20000000 	.word	0x20000000
 8003494:	20000074 	.word	0x20000074
 8003498:	08009628 	.word	0x08009628
 800349c:	20000074 	.word	0x20000074
 80034a0:	20000670 	.word	0x20000670

080034a4 <ADC_IRQHandler>:
 80034a4:	e7fe      	b.n	80034a4 <ADC_IRQHandler>
	...

080034a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_Init+0x40>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <HAL_Init+0x40>)
 80034b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_Init+0x40>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <HAL_Init+0x40>)
 80034be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c4:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <HAL_Init+0x40>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <HAL_Init+0x40>)
 80034ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d0:	2003      	movs	r0, #3
 80034d2:	f000 f94f 	bl	8003774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034d6:	2000      	movs	r0, #0
 80034d8:	f000 f808 	bl	80034ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034dc:	f7ff fc44 	bl	8002d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023c00 	.word	0x40023c00

080034ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034f4:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_InitTick+0x54>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_InitTick+0x58>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4619      	mov	r1, r3
 80034fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003502:	fbb3 f3f1 	udiv	r3, r3, r1
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f967 	bl	80037de <HAL_SYSTICK_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e00e      	b.n	8003538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b0f      	cmp	r3, #15
 800351e:	d80a      	bhi.n	8003536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003520:	2200      	movs	r2, #0
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003528:	f000 f92f 	bl	800378a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800352c:	4a06      	ldr	r2, [pc, #24]	; (8003548 <HAL_InitTick+0x5c>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	e000      	b.n	8003538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20000004 	.word	0x20000004
 8003544:	2000000c 	.word	0x2000000c
 8003548:	20000008 	.word	0x20000008

0800354c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_IncTick+0x20>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_IncTick+0x24>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4413      	add	r3, r2
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_IncTick+0x24>)
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	2000000c 	.word	0x2000000c
 8003570:	2000065c 	.word	0x2000065c

08003574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return uwTick;
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_GetTick+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	2000065c 	.word	0x2000065c

0800358c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003594:	f7ff ffee 	bl	8003574 <HAL_GetTick>
 8003598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a4:	d005      	beq.n	80035b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_Delay+0x44>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035b2:	bf00      	nop
 80035b4:	f7ff ffde 	bl	8003574 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d8f7      	bhi.n	80035b4 <HAL_Delay+0x28>
  {
  }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	2000000c 	.word	0x2000000c

080035d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003606:	4a04      	ldr	r2, [pc, #16]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	60d3      	str	r3, [r2, #12]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <__NVIC_GetPriorityGrouping+0x18>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0307 	and.w	r3, r3, #7
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	2b00      	cmp	r3, #0
 8003648:	db0b      	blt.n	8003662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4907      	ldr	r1, [pc, #28]	; (8003670 <__NVIC_EnableIRQ+0x38>)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2001      	movs	r0, #1
 800365a:	fa00 f202 	lsl.w	r2, r0, r2
 800365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000e100 	.word	0xe000e100

08003674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	6039      	str	r1, [r7, #0]
 800367e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003684:	2b00      	cmp	r3, #0
 8003686:	db0a      	blt.n	800369e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	b2da      	uxtb	r2, r3
 800368c:	490c      	ldr	r1, [pc, #48]	; (80036c0 <__NVIC_SetPriority+0x4c>)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	0112      	lsls	r2, r2, #4
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	440b      	add	r3, r1
 8003698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800369c:	e00a      	b.n	80036b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4908      	ldr	r1, [pc, #32]	; (80036c4 <__NVIC_SetPriority+0x50>)
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	3b04      	subs	r3, #4
 80036ac:	0112      	lsls	r2, r2, #4
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	440b      	add	r3, r1
 80036b2:	761a      	strb	r2, [r3, #24]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000e100 	.word	0xe000e100
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b089      	sub	sp, #36	; 0x24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f1c3 0307 	rsb	r3, r3, #7
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	bf28      	it	cs
 80036e6:	2304      	movcs	r3, #4
 80036e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d902      	bls.n	80036f8 <NVIC_EncodePriority+0x30>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3b03      	subs	r3, #3
 80036f6:	e000      	b.n	80036fa <NVIC_EncodePriority+0x32>
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43da      	mvns	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	401a      	ands	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	43d9      	mvns	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	4313      	orrs	r3, r2
         );
}
 8003722:	4618      	mov	r0, r3
 8003724:	3724      	adds	r7, #36	; 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003740:	d301      	bcc.n	8003746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003742:	2301      	movs	r3, #1
 8003744:	e00f      	b.n	8003766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <SysTick_Config+0x40>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374e:	210f      	movs	r1, #15
 8003750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003754:	f7ff ff8e 	bl	8003674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <SysTick_Config+0x40>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <SysTick_Config+0x40>)
 8003760:	2207      	movs	r2, #7
 8003762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	e000e010 	.word	0xe000e010

08003774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff29 	bl	80035d4 <__NVIC_SetPriorityGrouping>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800379c:	f7ff ff3e 	bl	800361c <__NVIC_GetPriorityGrouping>
 80037a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	6978      	ldr	r0, [r7, #20]
 80037a8:	f7ff ff8e 	bl	80036c8 <NVIC_EncodePriority>
 80037ac:	4602      	mov	r2, r0
 80037ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff ff5d 	bl	8003674 <__NVIC_SetPriority>
}
 80037ba:	bf00      	nop
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	4603      	mov	r3, r0
 80037ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff31 	bl	8003638 <__NVIC_EnableIRQ>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ffa2 	bl	8003730 <SysTick_Config>
 80037ec:	4603      	mov	r3, r0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff feb6 	bl	8003574 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e099      	b.n	8003948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003834:	e00f      	b.n	8003856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003836:	f7ff fe9d 	bl	8003574 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b05      	cmp	r3, #5
 8003842:	d908      	bls.n	8003856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2203      	movs	r2, #3
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e078      	b.n	8003948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e8      	bne.n	8003836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4b38      	ldr	r3, [pc, #224]	; (8003950 <HAL_DMA_Init+0x158>)
 8003870:	4013      	ands	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800389a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d107      	bne.n	80038c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	4313      	orrs	r3, r2
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0307 	bic.w	r3, r3, #7
 80038d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d117      	bne.n	800391a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00e      	beq.n	800391a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fb01 	bl	8003f04 <DMA_CheckFifoParam>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2240      	movs	r2, #64	; 0x40
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003916:	2301      	movs	r3, #1
 8003918:	e016      	b.n	8003948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fab8 	bl	8003e98 <DMA_CalcBaseAndBitshift>
 8003928:	4603      	mov	r3, r0
 800392a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	223f      	movs	r2, #63	; 0x3f
 8003932:	409a      	lsls	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	f010803f 	.word	0xf010803f

08003954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_DMA_Start_IT+0x26>
 8003976:	2302      	movs	r3, #2
 8003978:	e040      	b.n	80039fc <HAL_DMA_Start_IT+0xa8>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d12f      	bne.n	80039ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fa4a 	bl	8003e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	223f      	movs	r2, #63	; 0x3f
 80039ae:	409a      	lsls	r2, r3
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0216 	orr.w	r2, r2, #22
 80039c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0208 	orr.w	r2, r2, #8
 80039da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e005      	b.n	80039fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
 80039f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a12:	f7ff fdaf 	bl	8003574 <HAL_GetTick>
 8003a16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d008      	beq.n	8003a36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e052      	b.n	8003adc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0216 	bic.w	r2, r2, #22
 8003a44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <HAL_DMA_Abort+0x62>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0208 	bic.w	r2, r2, #8
 8003a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a86:	e013      	b.n	8003ab0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a88:	f7ff fd74 	bl	8003574 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d90c      	bls.n	8003ab0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e015      	b.n	8003adc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e4      	bne.n	8003a88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	223f      	movs	r2, #63	; 0x3f
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d004      	beq.n	8003b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2280      	movs	r2, #128	; 0x80
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e00c      	b.n	8003b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2205      	movs	r2, #5
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b34:	4b8e      	ldr	r3, [pc, #568]	; (8003d70 <HAL_DMA_IRQHandler+0x248>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a8e      	ldr	r2, [pc, #568]	; (8003d74 <HAL_DMA_IRQHandler+0x24c>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	0a9b      	lsrs	r3, r3, #10
 8003b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b52:	2208      	movs	r2, #8
 8003b54:	409a      	lsls	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01a      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0204 	bic.w	r2, r2, #4
 8003b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	2208      	movs	r2, #8
 8003b82:	409a      	lsls	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b98:	2201      	movs	r2, #1
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d012      	beq.n	8003bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	f043 0202 	orr.w	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bce:	2204      	movs	r2, #4
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d012      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bec:	2204      	movs	r2, #4
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	2210      	movs	r2, #16
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d043      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d03c      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c22:	2210      	movs	r2, #16
 8003c24:	409a      	lsls	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d018      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d024      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
 8003c56:	e01f      	b.n	8003c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01b      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
 8003c68:	e016      	b.n	8003c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d107      	bne.n	8003c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0208 	bic.w	r2, r2, #8
 8003c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 808f 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8087 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b05      	cmp	r3, #5
 8003cd0:	d136      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0216 	bic.w	r2, r2, #22
 8003ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d103      	bne.n	8003d02 <HAL_DMA_IRQHandler+0x1da>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0208 	bic.w	r2, r2, #8
 8003d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d16:	223f      	movs	r2, #63	; 0x3f
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d07e      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
        }
        return;
 8003d3e:	e079      	b.n	8003e34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01d      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10d      	bne.n	8003d78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d031      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
 8003d6c:	e02c      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
 8003d6e:	bf00      	nop
 8003d70:	20000004 	.word	0x20000004
 8003d74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d023      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
 8003d88:	e01e      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10f      	bne.n	8003db8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0210 	bic.w	r2, r2, #16
 8003da6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d032      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d022      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2205      	movs	r2, #5
 8003de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3301      	adds	r3, #1
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d307      	bcc.n	8003e10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f2      	bne.n	8003df4 <HAL_DMA_IRQHandler+0x2cc>
 8003e0e:	e000      	b.n	8003e12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
 8003e32:	e000      	b.n	8003e36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e34:	bf00      	nop
    }
  }
}
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d108      	bne.n	8003e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e7a:	e007      	b.n	8003e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	60da      	str	r2, [r3, #12]
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	3b10      	subs	r3, #16
 8003ea8:	4a14      	ldr	r2, [pc, #80]	; (8003efc <DMA_CalcBaseAndBitshift+0x64>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eb2:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <DMA_CalcBaseAndBitshift+0x68>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d909      	bls.n	8003eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	1d1a      	adds	r2, r3, #4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ed8:	e007      	b.n	8003eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	aaaaaaab 	.word	0xaaaaaaab
 8003f00:	080091ec 	.word	0x080091ec

08003f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11f      	bne.n	8003f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d856      	bhi.n	8003fd2 <DMA_CheckFifoParam+0xce>
 8003f24:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <DMA_CheckFifoParam+0x28>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f3d 	.word	0x08003f3d
 8003f30:	08003f4f 	.word	0x08003f4f
 8003f34:	08003f3d 	.word	0x08003f3d
 8003f38:	08003fd3 	.word	0x08003fd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d046      	beq.n	8003fd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4c:	e043      	b.n	8003fd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f56:	d140      	bne.n	8003fda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5c:	e03d      	b.n	8003fda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f66:	d121      	bne.n	8003fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d837      	bhi.n	8003fde <DMA_CheckFifoParam+0xda>
 8003f6e:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <DMA_CheckFifoParam+0x70>)
 8003f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f8b 	.word	0x08003f8b
 8003f7c:	08003f85 	.word	0x08003f85
 8003f80:	08003f9d 	.word	0x08003f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	73fb      	strb	r3, [r7, #15]
      break;
 8003f88:	e030      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d025      	beq.n	8003fe2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f9a:	e022      	b.n	8003fe2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fa4:	d11f      	bne.n	8003fe6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003faa:	e01c      	b.n	8003fe6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d903      	bls.n	8003fba <DMA_CheckFifoParam+0xb6>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d003      	beq.n	8003fc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fb8:	e018      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003fbe:	e015      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00e      	beq.n	8003fea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd0:	e00b      	b.n	8003fea <DMA_CheckFifoParam+0xe6>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e00a      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e008      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e006      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e004      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;   
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fea:	bf00      	nop
    }
  } 
  
  return status; 
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop

08003ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	; 0x24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e159      	b.n	80042cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004018:	2201      	movs	r2, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	429a      	cmp	r2, r3
 8004032:	f040 8148 	bne.w	80042c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d005      	beq.n	800404e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800404a:	2b02      	cmp	r3, #2
 800404c:	d130      	bne.n	80040b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	2203      	movs	r2, #3
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004084:	2201      	movs	r2, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f003 0201 	and.w	r2, r3, #1
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d017      	beq.n	80040ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	2203      	movs	r2, #3
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d123      	bne.n	8004140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	08da      	lsrs	r2, r3, #3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3208      	adds	r2, #8
 8004100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	220f      	movs	r2, #15
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	08da      	lsrs	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3208      	adds	r2, #8
 800413a:	69b9      	ldr	r1, [r7, #24]
 800413c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2203      	movs	r2, #3
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0203 	and.w	r2, r3, #3
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80a2 	beq.w	80042c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	4b57      	ldr	r3, [pc, #348]	; (80042e4 <HAL_GPIO_Init+0x2e8>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	4a56      	ldr	r2, [pc, #344]	; (80042e4 <HAL_GPIO_Init+0x2e8>)
 800418c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004190:	6453      	str	r3, [r2, #68]	; 0x44
 8004192:	4b54      	ldr	r3, [pc, #336]	; (80042e4 <HAL_GPIO_Init+0x2e8>)
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800419e:	4a52      	ldr	r2, [pc, #328]	; (80042e8 <HAL_GPIO_Init+0x2ec>)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	3302      	adds	r3, #2
 80041a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	220f      	movs	r2, #15
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a49      	ldr	r2, [pc, #292]	; (80042ec <HAL_GPIO_Init+0x2f0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d019      	beq.n	80041fe <HAL_GPIO_Init+0x202>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a48      	ldr	r2, [pc, #288]	; (80042f0 <HAL_GPIO_Init+0x2f4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <HAL_GPIO_Init+0x1fe>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a47      	ldr	r2, [pc, #284]	; (80042f4 <HAL_GPIO_Init+0x2f8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00d      	beq.n	80041f6 <HAL_GPIO_Init+0x1fa>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a46      	ldr	r2, [pc, #280]	; (80042f8 <HAL_GPIO_Init+0x2fc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <HAL_GPIO_Init+0x1f6>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a45      	ldr	r2, [pc, #276]	; (80042fc <HAL_GPIO_Init+0x300>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <HAL_GPIO_Init+0x1f2>
 80041ea:	2304      	movs	r3, #4
 80041ec:	e008      	b.n	8004200 <HAL_GPIO_Init+0x204>
 80041ee:	2307      	movs	r3, #7
 80041f0:	e006      	b.n	8004200 <HAL_GPIO_Init+0x204>
 80041f2:	2303      	movs	r3, #3
 80041f4:	e004      	b.n	8004200 <HAL_GPIO_Init+0x204>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e002      	b.n	8004200 <HAL_GPIO_Init+0x204>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_GPIO_Init+0x204>
 80041fe:	2300      	movs	r3, #0
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	f002 0203 	and.w	r2, r2, #3
 8004206:	0092      	lsls	r2, r2, #2
 8004208:	4093      	lsls	r3, r2
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004210:	4935      	ldr	r1, [pc, #212]	; (80042e8 <HAL_GPIO_Init+0x2ec>)
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	3302      	adds	r3, #2
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800421e:	4b38      	ldr	r3, [pc, #224]	; (8004300 <HAL_GPIO_Init+0x304>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004242:	4a2f      	ldr	r2, [pc, #188]	; (8004300 <HAL_GPIO_Init+0x304>)
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004248:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <HAL_GPIO_Init+0x304>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800426c:	4a24      	ldr	r2, [pc, #144]	; (8004300 <HAL_GPIO_Init+0x304>)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004272:	4b23      	ldr	r3, [pc, #140]	; (8004300 <HAL_GPIO_Init+0x304>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	43db      	mvns	r3, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4013      	ands	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004296:	4a1a      	ldr	r2, [pc, #104]	; (8004300 <HAL_GPIO_Init+0x304>)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800429c:	4b18      	ldr	r3, [pc, #96]	; (8004300 <HAL_GPIO_Init+0x304>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042c0:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <HAL_GPIO_Init+0x304>)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b0f      	cmp	r3, #15
 80042d0:	f67f aea2 	bls.w	8004018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	3724      	adds	r7, #36	; 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40013800 	.word	0x40013800
 80042ec:	40020000 	.word	0x40020000
 80042f0:	40020400 	.word	0x40020400
 80042f4:	40020800 	.word	0x40020800
 80042f8:	40020c00 	.word	0x40020c00
 80042fc:	40021000 	.word	0x40021000
 8004300:	40013c00 	.word	0x40013c00

08004304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	807b      	strh	r3, [r7, #2]
 8004310:	4613      	mov	r3, r2
 8004312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004314:	787b      	ldrb	r3, [r7, #1]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800431a:	887a      	ldrh	r2, [r7, #2]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004320:	e003      	b.n	800432a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004322:	887b      	ldrh	r3, [r7, #2]
 8004324:	041a      	lsls	r2, r3, #16
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	619a      	str	r2, [r3, #24]
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004348:	887a      	ldrh	r2, [r7, #2]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4013      	ands	r3, r2
 800434e:	041a      	lsls	r2, r3, #16
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	43d9      	mvns	r1, r3
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	400b      	ands	r3, r1
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	619a      	str	r2, [r3, #24]
}
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	4013      	ands	r3, r2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d006      	beq.n	8004390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004382:	4a05      	ldr	r2, [pc, #20]	; (8004398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fc fe64 	bl	8001058 <HAL_GPIO_EXTI_Callback>
  }
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40013c00 	.word	0x40013c00

0800439c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e267      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d075      	beq.n	80044a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ba:	4b88      	ldr	r3, [pc, #544]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d00c      	beq.n	80043e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c6:	4b85      	ldr	r3, [pc, #532]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d112      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4b82      	ldr	r3, [pc, #520]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043de:	d10b      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	4b7e      	ldr	r3, [pc, #504]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d05b      	beq.n	80044a4 <HAL_RCC_OscConfig+0x108>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d157      	bne.n	80044a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e242      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004400:	d106      	bne.n	8004410 <HAL_RCC_OscConfig+0x74>
 8004402:	4b76      	ldr	r3, [pc, #472]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a75      	ldr	r2, [pc, #468]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e01d      	b.n	800444c <HAL_RCC_OscConfig+0xb0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004418:	d10c      	bne.n	8004434 <HAL_RCC_OscConfig+0x98>
 800441a:	4b70      	ldr	r3, [pc, #448]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6f      	ldr	r2, [pc, #444]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b6d      	ldr	r3, [pc, #436]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6c      	ldr	r2, [pc, #432]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e00b      	b.n	800444c <HAL_RCC_OscConfig+0xb0>
 8004434:	4b69      	ldr	r3, [pc, #420]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a68      	ldr	r2, [pc, #416]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 800443a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b66      	ldr	r3, [pc, #408]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a65      	ldr	r2, [pc, #404]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7ff f88e 	bl	8003574 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800445c:	f7ff f88a 	bl	8003574 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e207      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	4b5b      	ldr	r3, [pc, #364]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0xc0>
 800447a:	e014      	b.n	80044a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7ff f87a 	bl	8003574 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004484:	f7ff f876 	bl	8003574 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	; 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e1f3      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	4b51      	ldr	r3, [pc, #324]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0xe8>
 80044a2:	e000      	b.n	80044a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d063      	beq.n	800457a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044b2:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d11c      	bne.n	8004504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b44      	ldr	r3, [pc, #272]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d116      	bne.n	8004504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	4b41      	ldr	r3, [pc, #260]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_RCC_OscConfig+0x152>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d001      	beq.n	80044ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e1c7      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4937      	ldr	r1, [pc, #220]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004502:	e03a      	b.n	800457a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800450c:	4b34      	ldr	r3, [pc, #208]	; (80045e0 <HAL_RCC_OscConfig+0x244>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7ff f82f 	bl	8003574 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451a:	f7ff f82b 	bl	8003574 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e1a8      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452c:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4b28      	ldr	r3, [pc, #160]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4925      	ldr	r1, [pc, #148]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]
 800454c:	e015      	b.n	800457a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454e:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <HAL_RCC_OscConfig+0x244>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7ff f80e 	bl	8003574 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800455c:	f7ff f80a 	bl	8003574 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e187      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d036      	beq.n	80045f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458e:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <HAL_RCC_OscConfig+0x248>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fe ffee 	bl	8003574 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459c:	f7fe ffea 	bl	8003574 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e167      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_OscConfig+0x240>)
 80045b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x200>
 80045ba:	e01b      	b.n	80045f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <HAL_RCC_OscConfig+0x248>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fe ffd7 	bl	8003574 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	e00e      	b.n	80045e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ca:	f7fe ffd3 	bl	8003574 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d907      	bls.n	80045e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e150      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
 80045dc:	40023800 	.word	0x40023800
 80045e0:	42470000 	.word	0x42470000
 80045e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e8:	4b88      	ldr	r3, [pc, #544]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80045ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1ea      	bne.n	80045ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8097 	beq.w	8004730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004606:	4b81      	ldr	r3, [pc, #516]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10f      	bne.n	8004632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	4b7d      	ldr	r3, [pc, #500]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	4a7c      	ldr	r2, [pc, #496]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800461c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004620:	6413      	str	r3, [r2, #64]	; 0x40
 8004622:	4b7a      	ldr	r3, [pc, #488]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004632:	4b77      	ldr	r3, [pc, #476]	; (8004810 <HAL_RCC_OscConfig+0x474>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d118      	bne.n	8004670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463e:	4b74      	ldr	r3, [pc, #464]	; (8004810 <HAL_RCC_OscConfig+0x474>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a73      	ldr	r2, [pc, #460]	; (8004810 <HAL_RCC_OscConfig+0x474>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800464a:	f7fe ff93 	bl	8003574 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004652:	f7fe ff8f 	bl	8003574 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e10c      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004664:	4b6a      	ldr	r3, [pc, #424]	; (8004810 <HAL_RCC_OscConfig+0x474>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d106      	bne.n	8004686 <HAL_RCC_OscConfig+0x2ea>
 8004678:	4b64      	ldr	r3, [pc, #400]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4a63      	ldr	r2, [pc, #396]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	6713      	str	r3, [r2, #112]	; 0x70
 8004684:	e01c      	b.n	80046c0 <HAL_RCC_OscConfig+0x324>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b05      	cmp	r3, #5
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x30c>
 800468e:	4b5f      	ldr	r3, [pc, #380]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a5e      	ldr	r2, [pc, #376]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004694:	f043 0304 	orr.w	r3, r3, #4
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
 800469a:	4b5c      	ldr	r3, [pc, #368]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a5b      	ldr	r2, [pc, #364]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	e00b      	b.n	80046c0 <HAL_RCC_OscConfig+0x324>
 80046a8:	4b58      	ldr	r3, [pc, #352]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	4a57      	ldr	r2, [pc, #348]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	6713      	str	r3, [r2, #112]	; 0x70
 80046b4:	4b55      	ldr	r3, [pc, #340]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	4a54      	ldr	r2, [pc, #336]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046ba:	f023 0304 	bic.w	r3, r3, #4
 80046be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d015      	beq.n	80046f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fe ff54 	bl	8003574 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d0:	f7fe ff50 	bl	8003574 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	; 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0cb      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e6:	4b49      	ldr	r3, [pc, #292]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0ee      	beq.n	80046d0 <HAL_RCC_OscConfig+0x334>
 80046f2:	e014      	b.n	800471e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f4:	f7fe ff3e 	bl	8003574 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fc:	f7fe ff3a 	bl	8003574 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0b5      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004712:	4b3e      	ldr	r3, [pc, #248]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1ee      	bne.n	80046fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471e:	7dfb      	ldrb	r3, [r7, #23]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004724:	4b39      	ldr	r3, [pc, #228]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	4a38      	ldr	r2, [pc, #224]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800472a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 80a1 	beq.w	800487c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800473a:	4b34      	ldr	r3, [pc, #208]	; (800480c <HAL_RCC_OscConfig+0x470>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b08      	cmp	r3, #8
 8004744:	d05c      	beq.n	8004800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d141      	bne.n	80047d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474e:	4b31      	ldr	r3, [pc, #196]	; (8004814 <HAL_RCC_OscConfig+0x478>)
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fe ff0e 	bl	8003574 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475c:	f7fe ff0a 	bl	8003574 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e087      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	4b27      	ldr	r3, [pc, #156]	; (800480c <HAL_RCC_OscConfig+0x470>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	019b      	lsls	r3, r3, #6
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	3b01      	subs	r3, #1
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	491b      	ldr	r1, [pc, #108]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_RCC_OscConfig+0x478>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fe fee3 	bl	8003574 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fe fedf 	bl	8003574 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e05c      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x416>
 80047d0:	e054      	b.n	800487c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <HAL_RCC_OscConfig+0x478>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fe fecc 	bl	8003574 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fe fec8 	bl	8003574 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e045      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_RCC_OscConfig+0x470>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x444>
 80047fe:	e03d      	b.n	800487c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d107      	bne.n	8004818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e038      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
 800480c:	40023800 	.word	0x40023800
 8004810:	40007000 	.word	0x40007000
 8004814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCC_OscConfig+0x4ec>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d028      	beq.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d121      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d11a      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800484e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004850:	4293      	cmp	r3, r2
 8004852:	d111      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	3b01      	subs	r3, #1
 8004862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004864:	429a      	cmp	r2, r3
 8004866:	d107      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800

0800488c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0cc      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a0:	4b68      	ldr	r3, [pc, #416]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d90c      	bls.n	80048c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b65      	ldr	r3, [pc, #404]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b63      	ldr	r3, [pc, #396]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0b8      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d020      	beq.n	8004916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e0:	4b59      	ldr	r3, [pc, #356]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a58      	ldr	r2, [pc, #352]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f8:	4b53      	ldr	r3, [pc, #332]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4a52      	ldr	r2, [pc, #328]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004904:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	494d      	ldr	r1, [pc, #308]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d044      	beq.n	80049ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d119      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e07f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d003      	beq.n	800494a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004946:	2b03      	cmp	r3, #3
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494a:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e06f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495a:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e067      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496a:	4b37      	ldr	r3, [pc, #220]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 0203 	bic.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4934      	ldr	r1, [pc, #208]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800497c:	f7fe fdfa 	bl	8003574 <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	e00a      	b.n	800499a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004984:	f7fe fdf6 	bl	8003574 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e04f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499a:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 020c 	and.w	r2, r3, #12
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d1eb      	bne.n	8004984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ac:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d20c      	bcs.n	80049d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e032      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e0:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4916      	ldr	r1, [pc, #88]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	490e      	ldr	r1, [pc, #56]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a12:	f000 f821 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8004a16:	4602      	mov	r2, r0
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	490a      	ldr	r1, [pc, #40]	; (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 8004a24:	5ccb      	ldrb	r3, [r1, r3]
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe fd5a 	bl	80034ec <HAL_InitTick>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023c00 	.word	0x40023c00
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	080091d4 	.word	0x080091d4
 8004a50:	20000004 	.word	0x20000004
 8004a54:	20000008 	.word	0x20000008

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a5c:	b094      	sub	sp, #80	; 0x50
 8004a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	647b      	str	r3, [r7, #68]	; 0x44
 8004a64:	2300      	movs	r3, #0
 8004a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a68:	2300      	movs	r3, #0
 8004a6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a70:	4b79      	ldr	r3, [pc, #484]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d00d      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x40>
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	f200 80e1 	bhi.w	8004c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x34>
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d003      	beq.n	8004a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a8a:	e0db      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a8c:	4b73      	ldr	r3, [pc, #460]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a90:	e0db      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a92:	4b73      	ldr	r3, [pc, #460]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a96:	e0d8      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a98:	4b6f      	ldr	r3, [pc, #444]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa2:	4b6d      	ldr	r3, [pc, #436]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d063      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aae:	4b6a      	ldr	r3, [pc, #424]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004aca:	4622      	mov	r2, r4
 8004acc:	462b      	mov	r3, r5
 8004ace:	f04f 0000 	mov.w	r0, #0
 8004ad2:	f04f 0100 	mov.w	r1, #0
 8004ad6:	0159      	lsls	r1, r3, #5
 8004ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004adc:	0150      	lsls	r0, r2, #5
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	1a51      	subs	r1, r2, r1
 8004ae6:	6139      	str	r1, [r7, #16]
 8004ae8:	4629      	mov	r1, r5
 8004aea:	eb63 0301 	sbc.w	r3, r3, r1
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004afc:	4659      	mov	r1, fp
 8004afe:	018b      	lsls	r3, r1, #6
 8004b00:	4651      	mov	r1, sl
 8004b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b06:	4651      	mov	r1, sl
 8004b08:	018a      	lsls	r2, r1, #6
 8004b0a:	4651      	mov	r1, sl
 8004b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b10:	4659      	mov	r1, fp
 8004b12:	eb63 0901 	sbc.w	r9, r3, r1
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b2a:	4690      	mov	r8, r2
 8004b2c:	4699      	mov	r9, r3
 8004b2e:	4623      	mov	r3, r4
 8004b30:	eb18 0303 	adds.w	r3, r8, r3
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	462b      	mov	r3, r5
 8004b38:	eb49 0303 	adc.w	r3, r9, r3
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	024b      	lsls	r3, r1, #9
 8004b4e:	4621      	mov	r1, r4
 8004b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b54:	4621      	mov	r1, r4
 8004b56:	024a      	lsls	r2, r1, #9
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5e:	2200      	movs	r2, #0
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b68:	f7fc f888 	bl	8000c7c <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4613      	mov	r3, r2
 8004b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b74:	e058      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b76:	4b38      	ldr	r3, [pc, #224]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	099b      	lsrs	r3, r3, #6
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	4611      	mov	r1, r2
 8004b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b86:	623b      	str	r3, [r7, #32]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b90:	4642      	mov	r2, r8
 8004b92:	464b      	mov	r3, r9
 8004b94:	f04f 0000 	mov.w	r0, #0
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	0159      	lsls	r1, r3, #5
 8004b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba2:	0150      	lsls	r0, r2, #5
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4641      	mov	r1, r8
 8004baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bae:	4649      	mov	r1, r9
 8004bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8004bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	00eb      	lsls	r3, r5, #3
 8004bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bde:	00e2      	lsls	r2, r4, #3
 8004be0:	4614      	mov	r4, r2
 8004be2:	461d      	mov	r5, r3
 8004be4:	4643      	mov	r3, r8
 8004be6:	18e3      	adds	r3, r4, r3
 8004be8:	603b      	str	r3, [r7, #0]
 8004bea:	464b      	mov	r3, r9
 8004bec:	eb45 0303 	adc.w	r3, r5, r3
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bfe:	4629      	mov	r1, r5
 8004c00:	028b      	lsls	r3, r1, #10
 8004c02:	4621      	mov	r1, r4
 8004c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c08:	4621      	mov	r1, r4
 8004c0a:	028a      	lsls	r2, r1, #10
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c12:	2200      	movs	r2, #0
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	61fa      	str	r2, [r7, #28]
 8004c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c1c:	f7fc f82e 	bl	8000c7c <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4613      	mov	r3, r2
 8004c26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	3301      	adds	r3, #1
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c42:	e002      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3750      	adds	r7, #80	; 0x50
 8004c50:	46bd      	mov	sp, r7
 8004c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	00f42400 	.word	0x00f42400
 8004c60:	007a1200 	.word	0x007a1200

08004c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000004 	.word	0x20000004

08004c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c80:	f7ff fff0 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0a9b      	lsrs	r3, r3, #10
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4903      	ldr	r1, [pc, #12]	; (8004ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	080091e4 	.word	0x080091e4

08004ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ca8:	f7ff ffdc 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	0b5b      	lsrs	r3, r3, #13
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	4903      	ldr	r1, [pc, #12]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cba:	5ccb      	ldrb	r3, [r1, r3]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	080091e4 	.word	0x080091e4

08004ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e041      	b.n	8004d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fe f924 	bl	8002f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f000 fc28 	bl	8005560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d001      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e044      	b.n	8004e0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1e      	ldr	r2, [pc, #120]	; (8004e1c <HAL_TIM_Base_Start_IT+0xb0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d018      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dae:	d013      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1a      	ldr	r2, [pc, #104]	; (8004e20 <HAL_TIM_Base_Start_IT+0xb4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00e      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a19      	ldr	r2, [pc, #100]	; (8004e24 <HAL_TIM_Base_Start_IT+0xb8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d009      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <HAL_TIM_Base_Start_IT+0xbc>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d004      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <HAL_TIM_Base_Start_IT+0xc0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d111      	bne.n	8004dfc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b06      	cmp	r3, #6
 8004de8:	d010      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfa:	e007      	b.n	8004e0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800
 8004e28:	40000c00 	.word	0x40000c00
 8004e2c:	40014000 	.word	0x40014000

08004e30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e041      	b.n	8004ec6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fd ffae 	bl	8002db8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	f000 fb76 	bl	8005560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d109      	bne.n	8004ef4 <HAL_TIM_PWM_Start+0x24>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	bf14      	ite	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	2300      	moveq	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	e022      	b.n	8004f3a <HAL_TIM_PWM_Start+0x6a>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d109      	bne.n	8004f0e <HAL_TIM_PWM_Start+0x3e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	bf14      	ite	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	2300      	moveq	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	e015      	b.n	8004f3a <HAL_TIM_PWM_Start+0x6a>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d109      	bne.n	8004f28 <HAL_TIM_PWM_Start+0x58>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	bf14      	ite	ne
 8004f20:	2301      	movne	r3, #1
 8004f22:	2300      	moveq	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	e008      	b.n	8004f3a <HAL_TIM_PWM_Start+0x6a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	bf14      	ite	ne
 8004f34:	2301      	movne	r3, #1
 8004f36:	2300      	moveq	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e068      	b.n	8005014 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <HAL_TIM_PWM_Start+0x82>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f50:	e013      	b.n	8004f7a <HAL_TIM_PWM_Start+0xaa>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d104      	bne.n	8004f62 <HAL_TIM_PWM_Start+0x92>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f60:	e00b      	b.n	8004f7a <HAL_TIM_PWM_Start+0xaa>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d104      	bne.n	8004f72 <HAL_TIM_PWM_Start+0xa2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f70:	e003      	b.n	8004f7a <HAL_TIM_PWM_Start+0xaa>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	6839      	ldr	r1, [r7, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fcf8 	bl	8005978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a23      	ldr	r2, [pc, #140]	; (800501c <HAL_TIM_PWM_Start+0x14c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d107      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1d      	ldr	r2, [pc, #116]	; (800501c <HAL_TIM_PWM_Start+0x14c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d018      	beq.n	8004fde <HAL_TIM_PWM_Start+0x10e>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb4:	d013      	beq.n	8004fde <HAL_TIM_PWM_Start+0x10e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a19      	ldr	r2, [pc, #100]	; (8005020 <HAL_TIM_PWM_Start+0x150>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00e      	beq.n	8004fde <HAL_TIM_PWM_Start+0x10e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a17      	ldr	r2, [pc, #92]	; (8005024 <HAL_TIM_PWM_Start+0x154>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d009      	beq.n	8004fde <HAL_TIM_PWM_Start+0x10e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a16      	ldr	r2, [pc, #88]	; (8005028 <HAL_TIM_PWM_Start+0x158>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <HAL_TIM_PWM_Start+0x10e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a14      	ldr	r2, [pc, #80]	; (800502c <HAL_TIM_PWM_Start+0x15c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d111      	bne.n	8005002 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b06      	cmp	r3, #6
 8004fee:	d010      	beq.n	8005012 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	e007      	b.n	8005012 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40010000 	.word	0x40010000
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40014000 	.word	0x40014000

08005030 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e097      	b.n	8005174 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fd fee3 	bl	8002e24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005074:	f023 0307 	bic.w	r3, r3, #7
 8005078:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f000 fa6b 	bl	8005560 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	4313      	orrs	r3, r2
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050d0:	f023 030c 	bic.w	r3, r3, #12
 80050d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	4313      	orrs	r3, r2
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	011a      	lsls	r2, r3, #4
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	031b      	lsls	r3, r3, #12
 8005100:	4313      	orrs	r3, r2
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005116:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	4313      	orrs	r3, r2
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d122      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b02      	cmp	r3, #2
 800519e:	d11b      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0202 	mvn.w	r2, #2
 80051a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f9b0 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
 80051c4:	e005      	b.n	80051d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f9a2 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f9b3 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d122      	bne.n	800522c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d11b      	bne.n	800522c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0204 	mvn.w	r2, #4
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f986 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f978 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f989 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b08      	cmp	r3, #8
 8005238:	d122      	bne.n	8005280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b08      	cmp	r3, #8
 8005246:	d11b      	bne.n	8005280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0208 	mvn.w	r2, #8
 8005250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2204      	movs	r2, #4
 8005256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f95c 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
 800526c:	e005      	b.n	800527a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f94e 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f95f 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b10      	cmp	r3, #16
 800528c:	d122      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b10      	cmp	r3, #16
 800529a:	d11b      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0210 	mvn.w	r2, #16
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2208      	movs	r2, #8
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f932 	bl	8005524 <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f924 	bl	8005510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f935 	bl	8005538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d10e      	bne.n	8005300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0201 	mvn.w	r2, #1
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fb fede 	bl	80010bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	2b80      	cmp	r3, #128	; 0x80
 800530c:	d10e      	bne.n	800532c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	2b80      	cmp	r3, #128	; 0x80
 800531a:	d107      	bne.n	800532c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fbc4 	bl	8005ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d10e      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d107      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8fa 	bl	800554c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b20      	cmp	r3, #32
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b20      	cmp	r3, #32
 8005372:	d107      	bne.n	8005384 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0220 	mvn.w	r2, #32
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fb8e 	bl	8005aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e0ae      	b.n	8005508 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	f200 809f 	bhi.w	80054f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053ba:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	080054f9 	.word	0x080054f9
 80053c8:	080054f9 	.word	0x080054f9
 80053cc:	080054f9 	.word	0x080054f9
 80053d0:	08005435 	.word	0x08005435
 80053d4:	080054f9 	.word	0x080054f9
 80053d8:	080054f9 	.word	0x080054f9
 80053dc:	080054f9 	.word	0x080054f9
 80053e0:	08005477 	.word	0x08005477
 80053e4:	080054f9 	.word	0x080054f9
 80053e8:	080054f9 	.word	0x080054f9
 80053ec:	080054f9 	.word	0x080054f9
 80053f0:	080054b7 	.word	0x080054b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f930 	bl	8005660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0208 	orr.w	r2, r2, #8
 800540e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0204 	bic.w	r2, r2, #4
 800541e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6999      	ldr	r1, [r3, #24]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	619a      	str	r2, [r3, #24]
      break;
 8005432:	e064      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f976 	bl	800572c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6999      	ldr	r1, [r3, #24]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	021a      	lsls	r2, r3, #8
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	619a      	str	r2, [r3, #24]
      break;
 8005474:	e043      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	4618      	mov	r0, r3
 800547e:	f000 f9c1 	bl	8005804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0208 	orr.w	r2, r2, #8
 8005490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0204 	bic.w	r2, r2, #4
 80054a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69d9      	ldr	r1, [r3, #28]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	61da      	str	r2, [r3, #28]
      break;
 80054b4:	e023      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fa0b 	bl	80058d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69d9      	ldr	r1, [r3, #28]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	021a      	lsls	r2, r3, #8
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	61da      	str	r2, [r3, #28]
      break;
 80054f6:	e002      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	75fb      	strb	r3, [r7, #23]
      break;
 80054fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a34      	ldr	r2, [pc, #208]	; (8005644 <TIM_Base_SetConfig+0xe4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00f      	beq.n	8005598 <TIM_Base_SetConfig+0x38>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557e:	d00b      	beq.n	8005598 <TIM_Base_SetConfig+0x38>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a31      	ldr	r2, [pc, #196]	; (8005648 <TIM_Base_SetConfig+0xe8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d007      	beq.n	8005598 <TIM_Base_SetConfig+0x38>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a30      	ldr	r2, [pc, #192]	; (800564c <TIM_Base_SetConfig+0xec>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <TIM_Base_SetConfig+0x38>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a2f      	ldr	r2, [pc, #188]	; (8005650 <TIM_Base_SetConfig+0xf0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d108      	bne.n	80055aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a25      	ldr	r2, [pc, #148]	; (8005644 <TIM_Base_SetConfig+0xe4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01b      	beq.n	80055ea <TIM_Base_SetConfig+0x8a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b8:	d017      	beq.n	80055ea <TIM_Base_SetConfig+0x8a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a22      	ldr	r2, [pc, #136]	; (8005648 <TIM_Base_SetConfig+0xe8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <TIM_Base_SetConfig+0x8a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a21      	ldr	r2, [pc, #132]	; (800564c <TIM_Base_SetConfig+0xec>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00f      	beq.n	80055ea <TIM_Base_SetConfig+0x8a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a20      	ldr	r2, [pc, #128]	; (8005650 <TIM_Base_SetConfig+0xf0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00b      	beq.n	80055ea <TIM_Base_SetConfig+0x8a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a1f      	ldr	r2, [pc, #124]	; (8005654 <TIM_Base_SetConfig+0xf4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <TIM_Base_SetConfig+0x8a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a1e      	ldr	r2, [pc, #120]	; (8005658 <TIM_Base_SetConfig+0xf8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_Base_SetConfig+0x8a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a1d      	ldr	r2, [pc, #116]	; (800565c <TIM_Base_SetConfig+0xfc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d108      	bne.n	80055fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a08      	ldr	r2, [pc, #32]	; (8005644 <TIM_Base_SetConfig+0xe4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d103      	bne.n	8005630 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	615a      	str	r2, [r3, #20]
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	40014800 	.word	0x40014800

08005660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0201 	bic.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f023 0302 	bic.w	r3, r3, #2
 80056a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a1c      	ldr	r2, [pc, #112]	; (8005728 <TIM_OC1_SetConfig+0xc8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d10c      	bne.n	80056d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0308 	bic.w	r3, r3, #8
 80056c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f023 0304 	bic.w	r3, r3, #4
 80056d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a13      	ldr	r2, [pc, #76]	; (8005728 <TIM_OC1_SetConfig+0xc8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d111      	bne.n	8005702 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	621a      	str	r2, [r3, #32]
}
 800571c:	bf00      	nop
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	40010000 	.word	0x40010000

0800572c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f023 0210 	bic.w	r2, r3, #16
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	021b      	lsls	r3, r3, #8
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f023 0320 	bic.w	r3, r3, #32
 8005776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <TIM_OC2_SetConfig+0xd4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d10d      	bne.n	80057a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a15      	ldr	r2, [pc, #84]	; (8005800 <TIM_OC2_SetConfig+0xd4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d113      	bne.n	80057d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40010000 	.word	0x40010000

08005804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0303 	bic.w	r3, r3, #3
 800583a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800584c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <TIM_OC3_SetConfig+0xd0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d10d      	bne.n	800587e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800587c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a14      	ldr	r2, [pc, #80]	; (80058d4 <TIM_OC3_SetConfig+0xd0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d113      	bne.n	80058ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800588c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	621a      	str	r2, [r3, #32]
}
 80058c8:	bf00      	nop
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	40010000 	.word	0x40010000

080058d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	021b      	lsls	r3, r3, #8
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	031b      	lsls	r3, r3, #12
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a10      	ldr	r2, [pc, #64]	; (8005974 <TIM_OC4_SetConfig+0x9c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d109      	bne.n	800594c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800593e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	019b      	lsls	r3, r3, #6
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000

08005978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	2201      	movs	r2, #1
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	43db      	mvns	r3, r3
 800599a:	401a      	ands	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	fa01 f303 	lsl.w	r3, r1, r3
 80059b0:	431a      	orrs	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d8:	2302      	movs	r3, #2
 80059da:	e050      	b.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1c      	ldr	r2, [pc, #112]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d018      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a28:	d013      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d10c      	bne.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40014000 	.word	0x40014000

08005aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e03f      	b.n	8005b5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fd faac 	bl	800304c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2224      	movs	r2, #36	; 0x24
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fe69 	bl	80067e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	691a      	ldr	r2, [r3, #16]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695a      	ldr	r2, [r3, #20]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d11d      	bne.n	8005bb8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <HAL_UART_Receive_DMA+0x26>
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e016      	b.n	8005bba <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Receive_DMA+0x38>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e00f      	b.n	8005bba <HAL_UART_Receive_DMA+0x58>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	461a      	mov	r2, r3
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fbb8 	bl	8006324 <UART_Start_Receive_DMA>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	e000      	b.n	8005bba <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bb8:	2302      	movs	r3, #2
  }
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b0ba      	sub	sp, #232	; 0xe8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10f      	bne.n	8005c2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <HAL_UART_IRQHandler+0x66>
 8005c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fd23 	bl	800666e <UART_Receive_IT>
      return;
 8005c28:	e256      	b.n	80060d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 80de 	beq.w	8005df0 <HAL_UART_IRQHandler+0x22c>
 8005c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80d1 	beq.w	8005df0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <HAL_UART_IRQHandler+0xae>
 8005c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <HAL_UART_IRQHandler+0xd2>
 8005c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	f043 0202 	orr.w	r2, r3, #2
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00b      	beq.n	8005cba <HAL_UART_IRQHandler+0xf6>
 8005ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f043 0204 	orr.w	r2, r3, #4
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d011      	beq.n	8005cea <HAL_UART_IRQHandler+0x126>
 8005cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d105      	bne.n	8005cde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f043 0208 	orr.w	r2, r3, #8
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 81ed 	beq.w	80060ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <HAL_UART_IRQHandler+0x14e>
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fcae 	bl	800666e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1c:	2b40      	cmp	r3, #64	; 0x40
 8005d1e:	bf0c      	ite	eq
 8005d20:	2301      	moveq	r3, #1
 8005d22:	2300      	movne	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <HAL_UART_IRQHandler+0x17a>
 8005d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d04f      	beq.n	8005dde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fbb6 	bl	80064b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b40      	cmp	r3, #64	; 0x40
 8005d50:	d141      	bne.n	8005dd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3314      	adds	r3, #20
 8005d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1d9      	bne.n	8005d52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d013      	beq.n	8005dce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	4a7d      	ldr	r2, [pc, #500]	; (8005fa0 <HAL_UART_IRQHandler+0x3dc>)
 8005dac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fd fe96 	bl	8003ae4 <HAL_DMA_Abort_IT>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d016      	beq.n	8005dec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	e00e      	b.n	8005dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f99a 	bl	8006108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd4:	e00a      	b.n	8005dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f996 	bl	8006108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	e006      	b.n	8005dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f992 	bl	8006108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005dea:	e170      	b.n	80060ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dec:	bf00      	nop
    return;
 8005dee:	e16e      	b.n	80060ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	f040 814a 	bne.w	800608e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8143 	beq.w	800608e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 813c 	beq.w	800608e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60bb      	str	r3, [r7, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	f040 80b4 	bne.w	8005fa4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8140 	beq.w	80060d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	f080 8139 	bcs.w	80060d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e72:	f000 8088 	beq.w	8005f86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	330c      	adds	r3, #12
 8005e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ea2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ea6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005eae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1d9      	bne.n	8005e76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3314      	adds	r3, #20
 8005ec8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3314      	adds	r3, #20
 8005ee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ee6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e1      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3314      	adds	r3, #20
 8005f04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3314      	adds	r3, #20
 8005f1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e3      	bne.n	8005efe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f56:	f023 0310 	bic.w	r3, r3, #16
 8005f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	330c      	adds	r3, #12
 8005f64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f68:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e3      	bne.n	8005f44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fd fd3f 	bl	8003a04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f8c0 	bl	800611c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f9c:	e099      	b.n	80060d2 <HAL_UART_IRQHandler+0x50e>
 8005f9e:	bf00      	nop
 8005fa0:	08006577 	.word	0x08006577
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 808b 	beq.w	80060d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8086 	beq.w	80060d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fee:	647a      	str	r2, [r7, #68]	; 0x44
 8005ff0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e3      	bne.n	8005fca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3314      	adds	r3, #20
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	623b      	str	r3, [r7, #32]
   return(result);
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3314      	adds	r3, #20
 8006022:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006026:	633a      	str	r2, [r7, #48]	; 0x30
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800602c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e3      	bne.n	8006002 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	330c      	adds	r3, #12
 800604e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	60fb      	str	r3, [r7, #12]
   return(result);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0310 	bic.w	r3, r3, #16
 800605e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	330c      	adds	r3, #12
 8006068:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800606c:	61fa      	str	r2, [r7, #28]
 800606e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	69b9      	ldr	r1, [r7, #24]
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	617b      	str	r3, [r7, #20]
   return(result);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e3      	bne.n	8006048 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f848 	bl	800611c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800608c:	e023      	b.n	80060d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800608e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_UART_IRQHandler+0x4ea>
 800609a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa79 	bl	800659e <UART_Transmit_IT>
    return;
 80060ac:	e014      	b.n	80060d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00e      	beq.n	80060d8 <HAL_UART_IRQHandler+0x514>
 80060ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fab9 	bl	800663e <UART_EndTransmit_IT>
    return;
 80060cc:	e004      	b.n	80060d8 <HAL_UART_IRQHandler+0x514>
    return;
 80060ce:	bf00      	nop
 80060d0:	e002      	b.n	80060d8 <HAL_UART_IRQHandler+0x514>
      return;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <HAL_UART_IRQHandler+0x514>
      return;
 80060d6:	bf00      	nop
  }
}
 80060d8:	37e8      	adds	r7, #232	; 0xe8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop

080060e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b09c      	sub	sp, #112	; 0x70
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614c:	2b00      	cmp	r3, #0
 800614e:	d172      	bne.n	8006236 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006152:	2200      	movs	r2, #0
 8006154:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800616c:	66bb      	str	r3, [r7, #104]	; 0x68
 800616e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006176:	65ba      	str	r2, [r7, #88]	; 0x58
 8006178:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800617c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e5      	bne.n	8006156 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3314      	adds	r3, #20
 8006190:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800619a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	667b      	str	r3, [r7, #100]	; 0x64
 80061a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3314      	adds	r3, #20
 80061a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80061aa:	647a      	str	r2, [r7, #68]	; 0x44
 80061ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e5      	bne.n	800618a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3314      	adds	r3, #20
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	623b      	str	r3, [r7, #32]
   return(result);
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d4:	663b      	str	r3, [r7, #96]	; 0x60
 80061d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3314      	adds	r3, #20
 80061dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061de:	633a      	str	r2, [r7, #48]	; 0x30
 80061e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e5      	bne.n	80061be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d119      	bne.n	8006236 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	60fb      	str	r3, [r7, #12]
   return(result);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f023 0310 	bic.w	r3, r3, #16
 8006218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800621a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	330c      	adds	r3, #12
 8006220:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006222:	61fa      	str	r2, [r7, #28]
 8006224:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	69b9      	ldr	r1, [r7, #24]
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	617b      	str	r3, [r7, #20]
   return(result);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e5      	bne.n	8006202 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	2b01      	cmp	r3, #1
 800623c:	d106      	bne.n	800624c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800623e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006240:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006242:	4619      	mov	r1, r3
 8006244:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006246:	f7ff ff69 	bl	800611c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800624a:	e002      	b.n	8006252 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800624c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800624e:	f7fa fe97 	bl	8000f80 <HAL_UART_RxCpltCallback>
}
 8006252:	bf00      	nop
 8006254:	3770      	adds	r7, #112	; 0x70
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	2b01      	cmp	r3, #1
 800626e:	d108      	bne.n	8006282 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	b29b      	uxth	r3, r3
 8006278:	4619      	mov	r1, r3
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff ff4e 	bl	800611c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006280:	e002      	b.n	8006288 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f7ff ff36 	bl	80060f4 <HAL_UART_RxHalfCpltCallback>
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	bf0c      	ite	eq
 80062b0:	2301      	moveq	r3, #1
 80062b2:	2300      	movne	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b21      	cmp	r3, #33	; 0x21
 80062c2:	d108      	bne.n	80062d6 <UART_DMAError+0x46>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2200      	movs	r2, #0
 80062ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80062d0:	68b8      	ldr	r0, [r7, #8]
 80062d2:	f000 f8c5 	bl	8006460 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	bf0c      	ite	eq
 80062e4:	2301      	moveq	r3, #1
 80062e6:	2300      	movne	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b22      	cmp	r3, #34	; 0x22
 80062f6:	d108      	bne.n	800630a <UART_DMAError+0x7a>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d005      	beq.n	800630a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2200      	movs	r2, #0
 8006302:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006304:	68b8      	ldr	r0, [r7, #8]
 8006306:	f000 f8d3 	bl	80064b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	f043 0210 	orr.w	r2, r3, #16
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006316:	68b8      	ldr	r0, [r7, #8]
 8006318:	f7ff fef6 	bl	8006108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b098      	sub	sp, #96	; 0x60
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	4613      	mov	r3, r2
 8006330:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	88fa      	ldrh	r2, [r7, #6]
 800633c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2222      	movs	r2, #34	; 0x22
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	4a40      	ldr	r2, [pc, #256]	; (8006454 <UART_Start_Receive_DMA+0x130>)
 8006352:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	4a3f      	ldr	r2, [pc, #252]	; (8006458 <UART_Start_Receive_DMA+0x134>)
 800635a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	4a3e      	ldr	r2, [pc, #248]	; (800645c <UART_Start_Receive_DMA+0x138>)
 8006362:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	2200      	movs	r2, #0
 800636a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800636c:	f107 0308 	add.w	r3, r7, #8
 8006370:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3304      	adds	r3, #4
 800637c:	4619      	mov	r1, r3
 800637e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	88fb      	ldrh	r3, [r7, #6]
 8006384:	f7fd fae6 	bl	8003954 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006388:	2300      	movs	r3, #0
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d019      	beq.n	80063e2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	330c      	adds	r3, #12
 80063b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	330c      	adds	r3, #12
 80063cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80063d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80063d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80063dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e5      	bne.n	80063ae <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3314      	adds	r3, #20
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	657b      	str	r3, [r7, #84]	; 0x54
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3314      	adds	r3, #20
 8006400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006402:	63ba      	str	r2, [r7, #56]	; 0x38
 8006404:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e5      	bne.n	80063e2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3314      	adds	r3, #20
 800641c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	617b      	str	r3, [r7, #20]
   return(result);
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800642c:	653b      	str	r3, [r7, #80]	; 0x50
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3314      	adds	r3, #20
 8006434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006436:	627a      	str	r2, [r7, #36]	; 0x24
 8006438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6a39      	ldr	r1, [r7, #32]
 800643c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	61fb      	str	r3, [r7, #28]
   return(result);
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e5      	bne.n	8006416 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3760      	adds	r7, #96	; 0x60
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	08006135 	.word	0x08006135
 8006458:	0800625b 	.word	0x0800625b
 800645c:	08006291 	.word	0x08006291

08006460 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006460:	b480      	push	{r7}
 8006462:	b089      	sub	sp, #36	; 0x24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	330c      	adds	r3, #12
 800646e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	60bb      	str	r3, [r7, #8]
   return(result);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	330c      	adds	r3, #12
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	61ba      	str	r2, [r7, #24]
 800648a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	6979      	ldr	r1, [r7, #20]
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	613b      	str	r3, [r7, #16]
   return(result);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e5      	bne.n	8006468 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80064a4:	bf00      	nop
 80064a6:	3724      	adds	r7, #36	; 0x24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b095      	sub	sp, #84	; 0x54
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064d8:	643a      	str	r2, [r7, #64]	; 0x40
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e5      	bne.n	80064b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3314      	adds	r3, #20
 80064f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f023 0301 	bic.w	r3, r3, #1
 8006502:	64bb      	str	r3, [r7, #72]	; 0x48
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3314      	adds	r3, #20
 800650a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800650c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e5      	bne.n	80064ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	2b01      	cmp	r3, #1
 8006526:	d119      	bne.n	800655c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	e853 3f00 	ldrex	r3, [r3]
 8006536:	60bb      	str	r3, [r7, #8]
   return(result);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f023 0310 	bic.w	r3, r3, #16
 800653e:	647b      	str	r3, [r7, #68]	; 0x44
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006548:	61ba      	str	r2, [r7, #24]
 800654a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	6979      	ldr	r1, [r7, #20]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	e841 2300 	strex	r3, r2, [r1]
 8006554:	613b      	str	r3, [r7, #16]
   return(result);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e5      	bne.n	8006528 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
}
 800656a:	bf00      	nop
 800656c:	3754      	adds	r7, #84	; 0x54
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f7ff fdb9 	bl	8006108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006596:	bf00      	nop
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800659e:	b480      	push	{r7}
 80065a0:	b085      	sub	sp, #20
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b21      	cmp	r3, #33	; 0x21
 80065b0:	d13e      	bne.n	8006630 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ba:	d114      	bne.n	80065e6 <UART_Transmit_IT+0x48>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d110      	bne.n	80065e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	1c9a      	adds	r2, r3, #2
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	621a      	str	r2, [r3, #32]
 80065e4:	e008      	b.n	80065f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	1c59      	adds	r1, r3, #1
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6211      	str	r1, [r2, #32]
 80065f0:	781a      	ldrb	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29b      	uxth	r3, r3
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	4619      	mov	r1, r3
 8006606:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10f      	bne.n	800662c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800661a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800662a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	e000      	b.n	8006632 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006630:	2302      	movs	r3, #2
  }
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006654:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff fd3e 	bl	80060e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b08c      	sub	sp, #48	; 0x30
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b22      	cmp	r3, #34	; 0x22
 8006680:	f040 80ab 	bne.w	80067da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668c:	d117      	bne.n	80066be <UART_Receive_IT+0x50>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d113      	bne.n	80066be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	1c9a      	adds	r2, r3, #2
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	629a      	str	r2, [r3, #40]	; 0x28
 80066bc:	e026      	b.n	800670c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d0:	d007      	beq.n	80066e2 <UART_Receive_IT+0x74>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <UART_Receive_IT+0x82>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	e008      	b.n	8006702 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29b      	uxth	r3, r3
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	4619      	mov	r1, r3
 800671a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800671c:	2b00      	cmp	r3, #0
 800671e:	d15a      	bne.n	80067d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0220 	bic.w	r2, r2, #32
 800672e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800673e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0201 	bic.w	r2, r2, #1
 800674e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675c:	2b01      	cmp	r3, #1
 800675e:	d135      	bne.n	80067cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	330c      	adds	r3, #12
 800676c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	613b      	str	r3, [r7, #16]
   return(result);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f023 0310 	bic.w	r3, r3, #16
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	330c      	adds	r3, #12
 8006784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006786:	623a      	str	r2, [r7, #32]
 8006788:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	69f9      	ldr	r1, [r7, #28]
 800678c:	6a3a      	ldr	r2, [r7, #32]
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	61bb      	str	r3, [r7, #24]
   return(result);
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e5      	bne.n	8006766 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0310 	and.w	r3, r3, #16
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d10a      	bne.n	80067be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff fca9 	bl	800611c <HAL_UARTEx_RxEventCallback>
 80067ca:	e002      	b.n	80067d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fa fbd7 	bl	8000f80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	e002      	b.n	80067dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	e000      	b.n	80067dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067da:	2302      	movs	r3, #2
  }
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3730      	adds	r7, #48	; 0x30
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067e8:	b0c0      	sub	sp, #256	; 0x100
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006800:	68d9      	ldr	r1, [r3, #12]
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	ea40 0301 	orr.w	r3, r0, r1
 800680c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800680e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	431a      	orrs	r2, r3
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	431a      	orrs	r2, r3
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800683c:	f021 010c 	bic.w	r1, r1, #12
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800684a:	430b      	orrs	r3, r1
 800684c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800684e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800685a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685e:	6999      	ldr	r1, [r3, #24]
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	ea40 0301 	orr.w	r3, r0, r1
 800686a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b8f      	ldr	r3, [pc, #572]	; (8006ab0 <UART_SetConfig+0x2cc>)
 8006874:	429a      	cmp	r2, r3
 8006876:	d005      	beq.n	8006884 <UART_SetConfig+0xa0>
 8006878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4b8d      	ldr	r3, [pc, #564]	; (8006ab4 <UART_SetConfig+0x2d0>)
 8006880:	429a      	cmp	r2, r3
 8006882:	d104      	bne.n	800688e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006884:	f7fe fa0e 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 8006888:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800688c:	e003      	b.n	8006896 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800688e:	f7fe f9f5 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 8006892:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068a0:	f040 810c 	bne.w	8006abc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a8:	2200      	movs	r2, #0
 80068aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068b6:	4622      	mov	r2, r4
 80068b8:	462b      	mov	r3, r5
 80068ba:	1891      	adds	r1, r2, r2
 80068bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80068be:	415b      	adcs	r3, r3
 80068c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068c6:	4621      	mov	r1, r4
 80068c8:	eb12 0801 	adds.w	r8, r2, r1
 80068cc:	4629      	mov	r1, r5
 80068ce:	eb43 0901 	adc.w	r9, r3, r1
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068e6:	4690      	mov	r8, r2
 80068e8:	4699      	mov	r9, r3
 80068ea:	4623      	mov	r3, r4
 80068ec:	eb18 0303 	adds.w	r3, r8, r3
 80068f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068f4:	462b      	mov	r3, r5
 80068f6:	eb49 0303 	adc.w	r3, r9, r3
 80068fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800690a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800690e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006912:	460b      	mov	r3, r1
 8006914:	18db      	adds	r3, r3, r3
 8006916:	653b      	str	r3, [r7, #80]	; 0x50
 8006918:	4613      	mov	r3, r2
 800691a:	eb42 0303 	adc.w	r3, r2, r3
 800691e:	657b      	str	r3, [r7, #84]	; 0x54
 8006920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006924:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006928:	f7fa f9a8 	bl	8000c7c <__aeabi_uldivmod>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4b61      	ldr	r3, [pc, #388]	; (8006ab8 <UART_SetConfig+0x2d4>)
 8006932:	fba3 2302 	umull	r2, r3, r3, r2
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	011c      	lsls	r4, r3, #4
 800693a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800693e:	2200      	movs	r2, #0
 8006940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006944:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006948:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800694c:	4642      	mov	r2, r8
 800694e:	464b      	mov	r3, r9
 8006950:	1891      	adds	r1, r2, r2
 8006952:	64b9      	str	r1, [r7, #72]	; 0x48
 8006954:	415b      	adcs	r3, r3
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006958:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800695c:	4641      	mov	r1, r8
 800695e:	eb12 0a01 	adds.w	sl, r2, r1
 8006962:	4649      	mov	r1, r9
 8006964:	eb43 0b01 	adc.w	fp, r3, r1
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800697c:	4692      	mov	sl, r2
 800697e:	469b      	mov	fp, r3
 8006980:	4643      	mov	r3, r8
 8006982:	eb1a 0303 	adds.w	r3, sl, r3
 8006986:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800698a:	464b      	mov	r3, r9
 800698c:	eb4b 0303 	adc.w	r3, fp, r3
 8006990:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069a8:	460b      	mov	r3, r1
 80069aa:	18db      	adds	r3, r3, r3
 80069ac:	643b      	str	r3, [r7, #64]	; 0x40
 80069ae:	4613      	mov	r3, r2
 80069b0:	eb42 0303 	adc.w	r3, r2, r3
 80069b4:	647b      	str	r3, [r7, #68]	; 0x44
 80069b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069be:	f7fa f95d 	bl	8000c7c <__aeabi_uldivmod>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4611      	mov	r1, r2
 80069c8:	4b3b      	ldr	r3, [pc, #236]	; (8006ab8 <UART_SetConfig+0x2d4>)
 80069ca:	fba3 2301 	umull	r2, r3, r3, r1
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	2264      	movs	r2, #100	; 0x64
 80069d2:	fb02 f303 	mul.w	r3, r2, r3
 80069d6:	1acb      	subs	r3, r1, r3
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069de:	4b36      	ldr	r3, [pc, #216]	; (8006ab8 <UART_SetConfig+0x2d4>)
 80069e0:	fba3 2302 	umull	r2, r3, r3, r2
 80069e4:	095b      	lsrs	r3, r3, #5
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069ec:	441c      	add	r4, r3
 80069ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a00:	4642      	mov	r2, r8
 8006a02:	464b      	mov	r3, r9
 8006a04:	1891      	adds	r1, r2, r2
 8006a06:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a08:	415b      	adcs	r3, r3
 8006a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a10:	4641      	mov	r1, r8
 8006a12:	1851      	adds	r1, r2, r1
 8006a14:	6339      	str	r1, [r7, #48]	; 0x30
 8006a16:	4649      	mov	r1, r9
 8006a18:	414b      	adcs	r3, r1
 8006a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a28:	4659      	mov	r1, fp
 8006a2a:	00cb      	lsls	r3, r1, #3
 8006a2c:	4651      	mov	r1, sl
 8006a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a32:	4651      	mov	r1, sl
 8006a34:	00ca      	lsls	r2, r1, #3
 8006a36:	4610      	mov	r0, r2
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	189b      	adds	r3, r3, r2
 8006a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a44:	464b      	mov	r3, r9
 8006a46:	460a      	mov	r2, r1
 8006a48:	eb42 0303 	adc.w	r3, r2, r3
 8006a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a64:	460b      	mov	r3, r1
 8006a66:	18db      	adds	r3, r3, r3
 8006a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	eb42 0303 	adc.w	r3, r2, r3
 8006a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a7a:	f7fa f8ff 	bl	8000c7c <__aeabi_uldivmod>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <UART_SetConfig+0x2d4>)
 8006a84:	fba3 1302 	umull	r1, r3, r3, r2
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	2164      	movs	r1, #100	; 0x64
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	3332      	adds	r3, #50	; 0x32
 8006a96:	4a08      	ldr	r2, [pc, #32]	; (8006ab8 <UART_SetConfig+0x2d4>)
 8006a98:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	f003 0207 	and.w	r2, r3, #7
 8006aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4422      	add	r2, r4
 8006aaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006aac:	e105      	b.n	8006cba <UART_SetConfig+0x4d6>
 8006aae:	bf00      	nop
 8006ab0:	40011000 	.word	0x40011000
 8006ab4:	40011400 	.word	0x40011400
 8006ab8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ac6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006aca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ace:	4642      	mov	r2, r8
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	1891      	adds	r1, r2, r2
 8006ad4:	6239      	str	r1, [r7, #32]
 8006ad6:	415b      	adcs	r3, r3
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8006ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ade:	4641      	mov	r1, r8
 8006ae0:	1854      	adds	r4, r2, r1
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	eb43 0501 	adc.w	r5, r3, r1
 8006ae8:	f04f 0200 	mov.w	r2, #0
 8006aec:	f04f 0300 	mov.w	r3, #0
 8006af0:	00eb      	lsls	r3, r5, #3
 8006af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006af6:	00e2      	lsls	r2, r4, #3
 8006af8:	4614      	mov	r4, r2
 8006afa:	461d      	mov	r5, r3
 8006afc:	4643      	mov	r3, r8
 8006afe:	18e3      	adds	r3, r4, r3
 8006b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b04:	464b      	mov	r3, r9
 8006b06:	eb45 0303 	adc.w	r3, r5, r3
 8006b0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	008b      	lsls	r3, r1, #2
 8006b2e:	4621      	mov	r1, r4
 8006b30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b34:	4621      	mov	r1, r4
 8006b36:	008a      	lsls	r2, r1, #2
 8006b38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b3c:	f7fa f89e 	bl	8000c7c <__aeabi_uldivmod>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4b60      	ldr	r3, [pc, #384]	; (8006cc8 <UART_SetConfig+0x4e4>)
 8006b46:	fba3 2302 	umull	r2, r3, r3, r2
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	011c      	lsls	r4, r3, #4
 8006b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b60:	4642      	mov	r2, r8
 8006b62:	464b      	mov	r3, r9
 8006b64:	1891      	adds	r1, r2, r2
 8006b66:	61b9      	str	r1, [r7, #24]
 8006b68:	415b      	adcs	r3, r3
 8006b6a:	61fb      	str	r3, [r7, #28]
 8006b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b70:	4641      	mov	r1, r8
 8006b72:	1851      	adds	r1, r2, r1
 8006b74:	6139      	str	r1, [r7, #16]
 8006b76:	4649      	mov	r1, r9
 8006b78:	414b      	adcs	r3, r1
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b88:	4659      	mov	r1, fp
 8006b8a:	00cb      	lsls	r3, r1, #3
 8006b8c:	4651      	mov	r1, sl
 8006b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b92:	4651      	mov	r1, sl
 8006b94:	00ca      	lsls	r2, r1, #3
 8006b96:	4610      	mov	r0, r2
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	189b      	adds	r3, r3, r2
 8006ba0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ba4:	464b      	mov	r3, r9
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	eb42 0303 	adc.w	r3, r2, r3
 8006bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bc8:	4649      	mov	r1, r9
 8006bca:	008b      	lsls	r3, r1, #2
 8006bcc:	4641      	mov	r1, r8
 8006bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bd2:	4641      	mov	r1, r8
 8006bd4:	008a      	lsls	r2, r1, #2
 8006bd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bda:	f7fa f84f 	bl	8000c7c <__aeabi_uldivmod>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4b39      	ldr	r3, [pc, #228]	; (8006cc8 <UART_SetConfig+0x4e4>)
 8006be4:	fba3 1302 	umull	r1, r3, r3, r2
 8006be8:	095b      	lsrs	r3, r3, #5
 8006bea:	2164      	movs	r1, #100	; 0x64
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	3332      	adds	r3, #50	; 0x32
 8006bf6:	4a34      	ldr	r2, [pc, #208]	; (8006cc8 <UART_SetConfig+0x4e4>)
 8006bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c02:	441c      	add	r4, r3
 8006c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c08:	2200      	movs	r2, #0
 8006c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8006c0c:	677a      	str	r2, [r7, #116]	; 0x74
 8006c0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c12:	4642      	mov	r2, r8
 8006c14:	464b      	mov	r3, r9
 8006c16:	1891      	adds	r1, r2, r2
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	415b      	adcs	r3, r3
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c22:	4641      	mov	r1, r8
 8006c24:	1851      	adds	r1, r2, r1
 8006c26:	6039      	str	r1, [r7, #0]
 8006c28:	4649      	mov	r1, r9
 8006c2a:	414b      	adcs	r3, r1
 8006c2c:	607b      	str	r3, [r7, #4]
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c3a:	4659      	mov	r1, fp
 8006c3c:	00cb      	lsls	r3, r1, #3
 8006c3e:	4651      	mov	r1, sl
 8006c40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c44:	4651      	mov	r1, sl
 8006c46:	00ca      	lsls	r2, r1, #3
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	4642      	mov	r2, r8
 8006c50:	189b      	adds	r3, r3, r2
 8006c52:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c54:	464b      	mov	r3, r9
 8006c56:	460a      	mov	r2, r1
 8006c58:	eb42 0303 	adc.w	r3, r2, r3
 8006c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	663b      	str	r3, [r7, #96]	; 0x60
 8006c68:	667a      	str	r2, [r7, #100]	; 0x64
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c76:	4649      	mov	r1, r9
 8006c78:	008b      	lsls	r3, r1, #2
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c80:	4641      	mov	r1, r8
 8006c82:	008a      	lsls	r2, r1, #2
 8006c84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c88:	f7f9 fff8 	bl	8000c7c <__aeabi_uldivmod>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <UART_SetConfig+0x4e4>)
 8006c92:	fba3 1302 	umull	r1, r3, r3, r2
 8006c96:	095b      	lsrs	r3, r3, #5
 8006c98:	2164      	movs	r1, #100	; 0x64
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	3332      	adds	r3, #50	; 0x32
 8006ca4:	4a08      	ldr	r2, [pc, #32]	; (8006cc8 <UART_SetConfig+0x4e4>)
 8006ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8006caa:	095b      	lsrs	r3, r3, #5
 8006cac:	f003 020f 	and.w	r2, r3, #15
 8006cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4422      	add	r2, r4
 8006cb8:	609a      	str	r2, [r3, #8]
}
 8006cba:	bf00      	nop
 8006cbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cc6:	bf00      	nop
 8006cc8:	51eb851f 	.word	0x51eb851f

08006ccc <atoi>:
 8006ccc:	220a      	movs	r2, #10
 8006cce:	2100      	movs	r1, #0
 8006cd0:	f000 b910 	b.w	8006ef4 <strtol>

08006cd4 <__errno>:
 8006cd4:	4b01      	ldr	r3, [pc, #4]	; (8006cdc <__errno+0x8>)
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	20000010 	.word	0x20000010

08006ce0 <__libc_init_array>:
 8006ce0:	b570      	push	{r4, r5, r6, lr}
 8006ce2:	4d0d      	ldr	r5, [pc, #52]	; (8006d18 <__libc_init_array+0x38>)
 8006ce4:	4c0d      	ldr	r4, [pc, #52]	; (8006d1c <__libc_init_array+0x3c>)
 8006ce6:	1b64      	subs	r4, r4, r5
 8006ce8:	10a4      	asrs	r4, r4, #2
 8006cea:	2600      	movs	r6, #0
 8006cec:	42a6      	cmp	r6, r4
 8006cee:	d109      	bne.n	8006d04 <__libc_init_array+0x24>
 8006cf0:	4d0b      	ldr	r5, [pc, #44]	; (8006d20 <__libc_init_array+0x40>)
 8006cf2:	4c0c      	ldr	r4, [pc, #48]	; (8006d24 <__libc_init_array+0x44>)
 8006cf4:	f002 fa42 	bl	800917c <_init>
 8006cf8:	1b64      	subs	r4, r4, r5
 8006cfa:	10a4      	asrs	r4, r4, #2
 8006cfc:	2600      	movs	r6, #0
 8006cfe:	42a6      	cmp	r6, r4
 8006d00:	d105      	bne.n	8006d0e <__libc_init_array+0x2e>
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
 8006d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d08:	4798      	blx	r3
 8006d0a:	3601      	adds	r6, #1
 8006d0c:	e7ee      	b.n	8006cec <__libc_init_array+0xc>
 8006d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d12:	4798      	blx	r3
 8006d14:	3601      	adds	r6, #1
 8006d16:	e7f2      	b.n	8006cfe <__libc_init_array+0x1e>
 8006d18:	08009620 	.word	0x08009620
 8006d1c:	08009620 	.word	0x08009620
 8006d20:	08009620 	.word	0x08009620
 8006d24:	08009624 	.word	0x08009624

08006d28 <memset>:
 8006d28:	4402      	add	r2, r0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d100      	bne.n	8006d32 <memset+0xa>
 8006d30:	4770      	bx	lr
 8006d32:	f803 1b01 	strb.w	r1, [r3], #1
 8006d36:	e7f9      	b.n	8006d2c <memset+0x4>

08006d38 <strtok>:
 8006d38:	4b16      	ldr	r3, [pc, #88]	; (8006d94 <strtok+0x5c>)
 8006d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d3c:	681e      	ldr	r6, [r3, #0]
 8006d3e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006d40:	4605      	mov	r5, r0
 8006d42:	b9fc      	cbnz	r4, 8006d84 <strtok+0x4c>
 8006d44:	2050      	movs	r0, #80	; 0x50
 8006d46:	9101      	str	r1, [sp, #4]
 8006d48:	f000 f9b0 	bl	80070ac <malloc>
 8006d4c:	9901      	ldr	r1, [sp, #4]
 8006d4e:	65b0      	str	r0, [r6, #88]	; 0x58
 8006d50:	4602      	mov	r2, r0
 8006d52:	b920      	cbnz	r0, 8006d5e <strtok+0x26>
 8006d54:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <strtok+0x60>)
 8006d56:	4811      	ldr	r0, [pc, #68]	; (8006d9c <strtok+0x64>)
 8006d58:	2157      	movs	r1, #87	; 0x57
 8006d5a:	f000 f977 	bl	800704c <__assert_func>
 8006d5e:	e9c0 4400 	strd	r4, r4, [r0]
 8006d62:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006d66:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006d6a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006d6e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006d72:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006d76:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006d7a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006d7e:	6184      	str	r4, [r0, #24]
 8006d80:	7704      	strb	r4, [r0, #28]
 8006d82:	6244      	str	r4, [r0, #36]	; 0x24
 8006d84:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006d86:	2301      	movs	r3, #1
 8006d88:	4628      	mov	r0, r5
 8006d8a:	b002      	add	sp, #8
 8006d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d90:	f000 b806 	b.w	8006da0 <__strtok_r>
 8006d94:	20000010 	.word	0x20000010
 8006d98:	080091f8 	.word	0x080091f8
 8006d9c:	0800920f 	.word	0x0800920f

08006da0 <__strtok_r>:
 8006da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da2:	b908      	cbnz	r0, 8006da8 <__strtok_r+0x8>
 8006da4:	6810      	ldr	r0, [r2, #0]
 8006da6:	b188      	cbz	r0, 8006dcc <__strtok_r+0x2c>
 8006da8:	4604      	mov	r4, r0
 8006daa:	4620      	mov	r0, r4
 8006dac:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006db0:	460f      	mov	r7, r1
 8006db2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006db6:	b91e      	cbnz	r6, 8006dc0 <__strtok_r+0x20>
 8006db8:	b965      	cbnz	r5, 8006dd4 <__strtok_r+0x34>
 8006dba:	6015      	str	r5, [r2, #0]
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	e005      	b.n	8006dcc <__strtok_r+0x2c>
 8006dc0:	42b5      	cmp	r5, r6
 8006dc2:	d1f6      	bne.n	8006db2 <__strtok_r+0x12>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f0      	bne.n	8006daa <__strtok_r+0xa>
 8006dc8:	6014      	str	r4, [r2, #0]
 8006dca:	7003      	strb	r3, [r0, #0]
 8006dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dce:	461c      	mov	r4, r3
 8006dd0:	e00c      	b.n	8006dec <__strtok_r+0x4c>
 8006dd2:	b915      	cbnz	r5, 8006dda <__strtok_r+0x3a>
 8006dd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006dd8:	460e      	mov	r6, r1
 8006dda:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006dde:	42ab      	cmp	r3, r5
 8006de0:	d1f7      	bne.n	8006dd2 <__strtok_r+0x32>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0f3      	beq.n	8006dce <__strtok_r+0x2e>
 8006de6:	2300      	movs	r3, #0
 8006de8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006dec:	6014      	str	r4, [r2, #0]
 8006dee:	e7ed      	b.n	8006dcc <__strtok_r+0x2c>

08006df0 <_strtol_l.constprop.0>:
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df6:	d001      	beq.n	8006dfc <_strtol_l.constprop.0+0xc>
 8006df8:	2b24      	cmp	r3, #36	; 0x24
 8006dfa:	d906      	bls.n	8006e0a <_strtol_l.constprop.0+0x1a>
 8006dfc:	f7ff ff6a 	bl	8006cd4 <__errno>
 8006e00:	2316      	movs	r3, #22
 8006e02:	6003      	str	r3, [r0, #0]
 8006e04:	2000      	movs	r0, #0
 8006e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006ef0 <_strtol_l.constprop.0+0x100>
 8006e0e:	460d      	mov	r5, r1
 8006e10:	462e      	mov	r6, r5
 8006e12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e16:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006e1a:	f017 0708 	ands.w	r7, r7, #8
 8006e1e:	d1f7      	bne.n	8006e10 <_strtol_l.constprop.0+0x20>
 8006e20:	2c2d      	cmp	r4, #45	; 0x2d
 8006e22:	d132      	bne.n	8006e8a <_strtol_l.constprop.0+0x9a>
 8006e24:	782c      	ldrb	r4, [r5, #0]
 8006e26:	2701      	movs	r7, #1
 8006e28:	1cb5      	adds	r5, r6, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d05b      	beq.n	8006ee6 <_strtol_l.constprop.0+0xf6>
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d109      	bne.n	8006e46 <_strtol_l.constprop.0+0x56>
 8006e32:	2c30      	cmp	r4, #48	; 0x30
 8006e34:	d107      	bne.n	8006e46 <_strtol_l.constprop.0+0x56>
 8006e36:	782c      	ldrb	r4, [r5, #0]
 8006e38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006e3c:	2c58      	cmp	r4, #88	; 0x58
 8006e3e:	d14d      	bne.n	8006edc <_strtol_l.constprop.0+0xec>
 8006e40:	786c      	ldrb	r4, [r5, #1]
 8006e42:	2310      	movs	r3, #16
 8006e44:	3502      	adds	r5, #2
 8006e46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006e4a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006e4e:	f04f 0c00 	mov.w	ip, #0
 8006e52:	fbb8 f9f3 	udiv	r9, r8, r3
 8006e56:	4666      	mov	r6, ip
 8006e58:	fb03 8a19 	mls	sl, r3, r9, r8
 8006e5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006e60:	f1be 0f09 	cmp.w	lr, #9
 8006e64:	d816      	bhi.n	8006e94 <_strtol_l.constprop.0+0xa4>
 8006e66:	4674      	mov	r4, lr
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	dd24      	ble.n	8006eb6 <_strtol_l.constprop.0+0xc6>
 8006e6c:	f1bc 0f00 	cmp.w	ip, #0
 8006e70:	db1e      	blt.n	8006eb0 <_strtol_l.constprop.0+0xc0>
 8006e72:	45b1      	cmp	r9, r6
 8006e74:	d31c      	bcc.n	8006eb0 <_strtol_l.constprop.0+0xc0>
 8006e76:	d101      	bne.n	8006e7c <_strtol_l.constprop.0+0x8c>
 8006e78:	45a2      	cmp	sl, r4
 8006e7a:	db19      	blt.n	8006eb0 <_strtol_l.constprop.0+0xc0>
 8006e7c:	fb06 4603 	mla	r6, r6, r3, r4
 8006e80:	f04f 0c01 	mov.w	ip, #1
 8006e84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e88:	e7e8      	b.n	8006e5c <_strtol_l.constprop.0+0x6c>
 8006e8a:	2c2b      	cmp	r4, #43	; 0x2b
 8006e8c:	bf04      	itt	eq
 8006e8e:	782c      	ldrbeq	r4, [r5, #0]
 8006e90:	1cb5      	addeq	r5, r6, #2
 8006e92:	e7ca      	b.n	8006e2a <_strtol_l.constprop.0+0x3a>
 8006e94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006e98:	f1be 0f19 	cmp.w	lr, #25
 8006e9c:	d801      	bhi.n	8006ea2 <_strtol_l.constprop.0+0xb2>
 8006e9e:	3c37      	subs	r4, #55	; 0x37
 8006ea0:	e7e2      	b.n	8006e68 <_strtol_l.constprop.0+0x78>
 8006ea2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006ea6:	f1be 0f19 	cmp.w	lr, #25
 8006eaa:	d804      	bhi.n	8006eb6 <_strtol_l.constprop.0+0xc6>
 8006eac:	3c57      	subs	r4, #87	; 0x57
 8006eae:	e7db      	b.n	8006e68 <_strtol_l.constprop.0+0x78>
 8006eb0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006eb4:	e7e6      	b.n	8006e84 <_strtol_l.constprop.0+0x94>
 8006eb6:	f1bc 0f00 	cmp.w	ip, #0
 8006eba:	da05      	bge.n	8006ec8 <_strtol_l.constprop.0+0xd8>
 8006ebc:	2322      	movs	r3, #34	; 0x22
 8006ebe:	6003      	str	r3, [r0, #0]
 8006ec0:	4646      	mov	r6, r8
 8006ec2:	b942      	cbnz	r2, 8006ed6 <_strtol_l.constprop.0+0xe6>
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	e79e      	b.n	8006e06 <_strtol_l.constprop.0+0x16>
 8006ec8:	b107      	cbz	r7, 8006ecc <_strtol_l.constprop.0+0xdc>
 8006eca:	4276      	negs	r6, r6
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	d0f9      	beq.n	8006ec4 <_strtol_l.constprop.0+0xd4>
 8006ed0:	f1bc 0f00 	cmp.w	ip, #0
 8006ed4:	d000      	beq.n	8006ed8 <_strtol_l.constprop.0+0xe8>
 8006ed6:	1e69      	subs	r1, r5, #1
 8006ed8:	6011      	str	r1, [r2, #0]
 8006eda:	e7f3      	b.n	8006ec4 <_strtol_l.constprop.0+0xd4>
 8006edc:	2430      	movs	r4, #48	; 0x30
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1b1      	bne.n	8006e46 <_strtol_l.constprop.0+0x56>
 8006ee2:	2308      	movs	r3, #8
 8006ee4:	e7af      	b.n	8006e46 <_strtol_l.constprop.0+0x56>
 8006ee6:	2c30      	cmp	r4, #48	; 0x30
 8006ee8:	d0a5      	beq.n	8006e36 <_strtol_l.constprop.0+0x46>
 8006eea:	230a      	movs	r3, #10
 8006eec:	e7ab      	b.n	8006e46 <_strtol_l.constprop.0+0x56>
 8006eee:	bf00      	nop
 8006ef0:	080092a9 	.word	0x080092a9

08006ef4 <strtol>:
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	460a      	mov	r2, r1
 8006ef8:	4601      	mov	r1, r0
 8006efa:	4802      	ldr	r0, [pc, #8]	; (8006f04 <strtol+0x10>)
 8006efc:	6800      	ldr	r0, [r0, #0]
 8006efe:	f7ff bf77 	b.w	8006df0 <_strtol_l.constprop.0>
 8006f02:	bf00      	nop
 8006f04:	20000010 	.word	0x20000010

08006f08 <_strtoull_l.constprop.0>:
 8006f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	4692      	mov	sl, r2
 8006f0e:	4a49      	ldr	r2, [pc, #292]	; (8007034 <_strtoull_l.constprop.0+0x12c>)
 8006f10:	9001      	str	r0, [sp, #4]
 8006f12:	4689      	mov	r9, r1
 8006f14:	461d      	mov	r5, r3
 8006f16:	460e      	mov	r6, r1
 8006f18:	4633      	mov	r3, r6
 8006f1a:	f816 4b01 	ldrb.w	r4, [r6], #1
 8006f1e:	5ca7      	ldrb	r7, [r4, r2]
 8006f20:	f017 0708 	ands.w	r7, r7, #8
 8006f24:	d1f8      	bne.n	8006f18 <_strtoull_l.constprop.0+0x10>
 8006f26:	2c2d      	cmp	r4, #45	; 0x2d
 8006f28:	d14a      	bne.n	8006fc0 <_strtoull_l.constprop.0+0xb8>
 8006f2a:	7834      	ldrb	r4, [r6, #0]
 8006f2c:	2701      	movs	r7, #1
 8006f2e:	1c9e      	adds	r6, r3, #2
 8006f30:	2d00      	cmp	r5, #0
 8006f32:	d07b      	beq.n	800702c <_strtoull_l.constprop.0+0x124>
 8006f34:	2d10      	cmp	r5, #16
 8006f36:	d109      	bne.n	8006f4c <_strtoull_l.constprop.0+0x44>
 8006f38:	2c30      	cmp	r4, #48	; 0x30
 8006f3a:	d107      	bne.n	8006f4c <_strtoull_l.constprop.0+0x44>
 8006f3c:	7833      	ldrb	r3, [r6, #0]
 8006f3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f42:	2b58      	cmp	r3, #88	; 0x58
 8006f44:	d16d      	bne.n	8007022 <_strtoull_l.constprop.0+0x11a>
 8006f46:	7874      	ldrb	r4, [r6, #1]
 8006f48:	2510      	movs	r5, #16
 8006f4a:	3602      	adds	r6, #2
 8006f4c:	ea4f 7be5 	mov.w	fp, r5, asr #31
 8006f50:	462a      	mov	r2, r5
 8006f52:	465b      	mov	r3, fp
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f5c:	f7f9 fe8e 	bl	8000c7c <__aeabi_uldivmod>
 8006f60:	462a      	mov	r2, r5
 8006f62:	9000      	str	r0, [sp, #0]
 8006f64:	4688      	mov	r8, r1
 8006f66:	465b      	mov	r3, fp
 8006f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f70:	f7f9 fe84 	bl	8000c7c <__aeabi_uldivmod>
 8006f74:	2300      	movs	r3, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006f7e:	f1bc 0f09 	cmp.w	ip, #9
 8006f82:	d822      	bhi.n	8006fca <_strtoull_l.constprop.0+0xc2>
 8006f84:	4664      	mov	r4, ip
 8006f86:	42a5      	cmp	r5, r4
 8006f88:	dd30      	ble.n	8006fec <_strtoull_l.constprop.0+0xe4>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	db2b      	blt.n	8006fe6 <_strtoull_l.constprop.0+0xde>
 8006f8e:	9b00      	ldr	r3, [sp, #0]
 8006f90:	4283      	cmp	r3, r0
 8006f92:	eb78 0301 	sbcs.w	r3, r8, r1
 8006f96:	d326      	bcc.n	8006fe6 <_strtoull_l.constprop.0+0xde>
 8006f98:	9b00      	ldr	r3, [sp, #0]
 8006f9a:	4588      	cmp	r8, r1
 8006f9c:	bf08      	it	eq
 8006f9e:	4283      	cmpeq	r3, r0
 8006fa0:	d101      	bne.n	8006fa6 <_strtoull_l.constprop.0+0x9e>
 8006fa2:	42a2      	cmp	r2, r4
 8006fa4:	db1f      	blt.n	8006fe6 <_strtoull_l.constprop.0+0xde>
 8006fa6:	4369      	muls	r1, r5
 8006fa8:	fb00 110b 	mla	r1, r0, fp, r1
 8006fac:	fba5 0300 	umull	r0, r3, r5, r0
 8006fb0:	4419      	add	r1, r3
 8006fb2:	1820      	adds	r0, r4, r0
 8006fb4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f816 4b01 	ldrb.w	r4, [r6], #1
 8006fbe:	e7dc      	b.n	8006f7a <_strtoull_l.constprop.0+0x72>
 8006fc0:	2c2b      	cmp	r4, #43	; 0x2b
 8006fc2:	bf04      	itt	eq
 8006fc4:	7834      	ldrbeq	r4, [r6, #0]
 8006fc6:	1c9e      	addeq	r6, r3, #2
 8006fc8:	e7b2      	b.n	8006f30 <_strtoull_l.constprop.0+0x28>
 8006fca:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006fce:	f1bc 0f19 	cmp.w	ip, #25
 8006fd2:	d801      	bhi.n	8006fd8 <_strtoull_l.constprop.0+0xd0>
 8006fd4:	3c37      	subs	r4, #55	; 0x37
 8006fd6:	e7d6      	b.n	8006f86 <_strtoull_l.constprop.0+0x7e>
 8006fd8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006fdc:	f1bc 0f19 	cmp.w	ip, #25
 8006fe0:	d804      	bhi.n	8006fec <_strtoull_l.constprop.0+0xe4>
 8006fe2:	3c57      	subs	r4, #87	; 0x57
 8006fe4:	e7cf      	b.n	8006f86 <_strtoull_l.constprop.0+0x7e>
 8006fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fea:	e7e6      	b.n	8006fba <_strtoull_l.constprop.0+0xb2>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da0b      	bge.n	8007008 <_strtoull_l.constprop.0+0x100>
 8006ff0:	9a01      	ldr	r2, [sp, #4]
 8006ff2:	2322      	movs	r3, #34	; 0x22
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	4601      	mov	r1, r0
 8006ffc:	f1ba 0f00 	cmp.w	sl, #0
 8007000:	d10a      	bne.n	8007018 <_strtoull_l.constprop.0+0x110>
 8007002:	b003      	add	sp, #12
 8007004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007008:	b117      	cbz	r7, 8007010 <_strtoull_l.constprop.0+0x108>
 800700a:	4240      	negs	r0, r0
 800700c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007010:	f1ba 0f00 	cmp.w	sl, #0
 8007014:	d0f5      	beq.n	8007002 <_strtoull_l.constprop.0+0xfa>
 8007016:	b10b      	cbz	r3, 800701c <_strtoull_l.constprop.0+0x114>
 8007018:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 800701c:	f8ca 9000 	str.w	r9, [sl]
 8007020:	e7ef      	b.n	8007002 <_strtoull_l.constprop.0+0xfa>
 8007022:	2430      	movs	r4, #48	; 0x30
 8007024:	2d00      	cmp	r5, #0
 8007026:	d191      	bne.n	8006f4c <_strtoull_l.constprop.0+0x44>
 8007028:	2508      	movs	r5, #8
 800702a:	e78f      	b.n	8006f4c <_strtoull_l.constprop.0+0x44>
 800702c:	2c30      	cmp	r4, #48	; 0x30
 800702e:	d085      	beq.n	8006f3c <_strtoull_l.constprop.0+0x34>
 8007030:	250a      	movs	r5, #10
 8007032:	e78b      	b.n	8006f4c <_strtoull_l.constprop.0+0x44>
 8007034:	080092a9 	.word	0x080092a9

08007038 <strtoull>:
 8007038:	4613      	mov	r3, r2
 800703a:	460a      	mov	r2, r1
 800703c:	4601      	mov	r1, r0
 800703e:	4802      	ldr	r0, [pc, #8]	; (8007048 <strtoull+0x10>)
 8007040:	6800      	ldr	r0, [r0, #0]
 8007042:	f7ff bf61 	b.w	8006f08 <_strtoull_l.constprop.0>
 8007046:	bf00      	nop
 8007048:	20000010 	.word	0x20000010

0800704c <__assert_func>:
 800704c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800704e:	4614      	mov	r4, r2
 8007050:	461a      	mov	r2, r3
 8007052:	4b09      	ldr	r3, [pc, #36]	; (8007078 <__assert_func+0x2c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4605      	mov	r5, r0
 8007058:	68d8      	ldr	r0, [r3, #12]
 800705a:	b14c      	cbz	r4, 8007070 <__assert_func+0x24>
 800705c:	4b07      	ldr	r3, [pc, #28]	; (800707c <__assert_func+0x30>)
 800705e:	9100      	str	r1, [sp, #0]
 8007060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007064:	4906      	ldr	r1, [pc, #24]	; (8007080 <__assert_func+0x34>)
 8007066:	462b      	mov	r3, r5
 8007068:	f000 f80e 	bl	8007088 <fiprintf>
 800706c:	f000 fcc4 	bl	80079f8 <abort>
 8007070:	4b04      	ldr	r3, [pc, #16]	; (8007084 <__assert_func+0x38>)
 8007072:	461c      	mov	r4, r3
 8007074:	e7f3      	b.n	800705e <__assert_func+0x12>
 8007076:	bf00      	nop
 8007078:	20000010 	.word	0x20000010
 800707c:	0800926c 	.word	0x0800926c
 8007080:	08009279 	.word	0x08009279
 8007084:	080092a7 	.word	0x080092a7

08007088 <fiprintf>:
 8007088:	b40e      	push	{r1, r2, r3}
 800708a:	b503      	push	{r0, r1, lr}
 800708c:	4601      	mov	r1, r0
 800708e:	ab03      	add	r3, sp, #12
 8007090:	4805      	ldr	r0, [pc, #20]	; (80070a8 <fiprintf+0x20>)
 8007092:	f853 2b04 	ldr.w	r2, [r3], #4
 8007096:	6800      	ldr	r0, [r0, #0]
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	f000 f919 	bl	80072d0 <_vfiprintf_r>
 800709e:	b002      	add	sp, #8
 80070a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a4:	b003      	add	sp, #12
 80070a6:	4770      	bx	lr
 80070a8:	20000010 	.word	0x20000010

080070ac <malloc>:
 80070ac:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <malloc+0xc>)
 80070ae:	4601      	mov	r1, r0
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	f000 b86f 	b.w	8007194 <_malloc_r>
 80070b6:	bf00      	nop
 80070b8:	20000010 	.word	0x20000010

080070bc <_free_r>:
 80070bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070be:	2900      	cmp	r1, #0
 80070c0:	d044      	beq.n	800714c <_free_r+0x90>
 80070c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c6:	9001      	str	r0, [sp, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f1a1 0404 	sub.w	r4, r1, #4
 80070ce:	bfb8      	it	lt
 80070d0:	18e4      	addlt	r4, r4, r3
 80070d2:	f000 feb9 	bl	8007e48 <__malloc_lock>
 80070d6:	4a1e      	ldr	r2, [pc, #120]	; (8007150 <_free_r+0x94>)
 80070d8:	9801      	ldr	r0, [sp, #4]
 80070da:	6813      	ldr	r3, [r2, #0]
 80070dc:	b933      	cbnz	r3, 80070ec <_free_r+0x30>
 80070de:	6063      	str	r3, [r4, #4]
 80070e0:	6014      	str	r4, [r2, #0]
 80070e2:	b003      	add	sp, #12
 80070e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070e8:	f000 beb4 	b.w	8007e54 <__malloc_unlock>
 80070ec:	42a3      	cmp	r3, r4
 80070ee:	d908      	bls.n	8007102 <_free_r+0x46>
 80070f0:	6825      	ldr	r5, [r4, #0]
 80070f2:	1961      	adds	r1, r4, r5
 80070f4:	428b      	cmp	r3, r1
 80070f6:	bf01      	itttt	eq
 80070f8:	6819      	ldreq	r1, [r3, #0]
 80070fa:	685b      	ldreq	r3, [r3, #4]
 80070fc:	1949      	addeq	r1, r1, r5
 80070fe:	6021      	streq	r1, [r4, #0]
 8007100:	e7ed      	b.n	80070de <_free_r+0x22>
 8007102:	461a      	mov	r2, r3
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	b10b      	cbz	r3, 800710c <_free_r+0x50>
 8007108:	42a3      	cmp	r3, r4
 800710a:	d9fa      	bls.n	8007102 <_free_r+0x46>
 800710c:	6811      	ldr	r1, [r2, #0]
 800710e:	1855      	adds	r5, r2, r1
 8007110:	42a5      	cmp	r5, r4
 8007112:	d10b      	bne.n	800712c <_free_r+0x70>
 8007114:	6824      	ldr	r4, [r4, #0]
 8007116:	4421      	add	r1, r4
 8007118:	1854      	adds	r4, r2, r1
 800711a:	42a3      	cmp	r3, r4
 800711c:	6011      	str	r1, [r2, #0]
 800711e:	d1e0      	bne.n	80070e2 <_free_r+0x26>
 8007120:	681c      	ldr	r4, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	6053      	str	r3, [r2, #4]
 8007126:	4421      	add	r1, r4
 8007128:	6011      	str	r1, [r2, #0]
 800712a:	e7da      	b.n	80070e2 <_free_r+0x26>
 800712c:	d902      	bls.n	8007134 <_free_r+0x78>
 800712e:	230c      	movs	r3, #12
 8007130:	6003      	str	r3, [r0, #0]
 8007132:	e7d6      	b.n	80070e2 <_free_r+0x26>
 8007134:	6825      	ldr	r5, [r4, #0]
 8007136:	1961      	adds	r1, r4, r5
 8007138:	428b      	cmp	r3, r1
 800713a:	bf04      	itt	eq
 800713c:	6819      	ldreq	r1, [r3, #0]
 800713e:	685b      	ldreq	r3, [r3, #4]
 8007140:	6063      	str	r3, [r4, #4]
 8007142:	bf04      	itt	eq
 8007144:	1949      	addeq	r1, r1, r5
 8007146:	6021      	streq	r1, [r4, #0]
 8007148:	6054      	str	r4, [r2, #4]
 800714a:	e7ca      	b.n	80070e2 <_free_r+0x26>
 800714c:	b003      	add	sp, #12
 800714e:	bd30      	pop	{r4, r5, pc}
 8007150:	20000660 	.word	0x20000660

08007154 <sbrk_aligned>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	4e0e      	ldr	r6, [pc, #56]	; (8007190 <sbrk_aligned+0x3c>)
 8007158:	460c      	mov	r4, r1
 800715a:	6831      	ldr	r1, [r6, #0]
 800715c:	4605      	mov	r5, r0
 800715e:	b911      	cbnz	r1, 8007166 <sbrk_aligned+0x12>
 8007160:	f000 fb7a 	bl	8007858 <_sbrk_r>
 8007164:	6030      	str	r0, [r6, #0]
 8007166:	4621      	mov	r1, r4
 8007168:	4628      	mov	r0, r5
 800716a:	f000 fb75 	bl	8007858 <_sbrk_r>
 800716e:	1c43      	adds	r3, r0, #1
 8007170:	d00a      	beq.n	8007188 <sbrk_aligned+0x34>
 8007172:	1cc4      	adds	r4, r0, #3
 8007174:	f024 0403 	bic.w	r4, r4, #3
 8007178:	42a0      	cmp	r0, r4
 800717a:	d007      	beq.n	800718c <sbrk_aligned+0x38>
 800717c:	1a21      	subs	r1, r4, r0
 800717e:	4628      	mov	r0, r5
 8007180:	f000 fb6a 	bl	8007858 <_sbrk_r>
 8007184:	3001      	adds	r0, #1
 8007186:	d101      	bne.n	800718c <sbrk_aligned+0x38>
 8007188:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800718c:	4620      	mov	r0, r4
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	20000664 	.word	0x20000664

08007194 <_malloc_r>:
 8007194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007198:	1ccd      	adds	r5, r1, #3
 800719a:	f025 0503 	bic.w	r5, r5, #3
 800719e:	3508      	adds	r5, #8
 80071a0:	2d0c      	cmp	r5, #12
 80071a2:	bf38      	it	cc
 80071a4:	250c      	movcc	r5, #12
 80071a6:	2d00      	cmp	r5, #0
 80071a8:	4607      	mov	r7, r0
 80071aa:	db01      	blt.n	80071b0 <_malloc_r+0x1c>
 80071ac:	42a9      	cmp	r1, r5
 80071ae:	d905      	bls.n	80071bc <_malloc_r+0x28>
 80071b0:	230c      	movs	r3, #12
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	2600      	movs	r6, #0
 80071b6:	4630      	mov	r0, r6
 80071b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071bc:	4e2e      	ldr	r6, [pc, #184]	; (8007278 <_malloc_r+0xe4>)
 80071be:	f000 fe43 	bl	8007e48 <__malloc_lock>
 80071c2:	6833      	ldr	r3, [r6, #0]
 80071c4:	461c      	mov	r4, r3
 80071c6:	bb34      	cbnz	r4, 8007216 <_malloc_r+0x82>
 80071c8:	4629      	mov	r1, r5
 80071ca:	4638      	mov	r0, r7
 80071cc:	f7ff ffc2 	bl	8007154 <sbrk_aligned>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	4604      	mov	r4, r0
 80071d4:	d14d      	bne.n	8007272 <_malloc_r+0xde>
 80071d6:	6834      	ldr	r4, [r6, #0]
 80071d8:	4626      	mov	r6, r4
 80071da:	2e00      	cmp	r6, #0
 80071dc:	d140      	bne.n	8007260 <_malloc_r+0xcc>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	4631      	mov	r1, r6
 80071e2:	4638      	mov	r0, r7
 80071e4:	eb04 0803 	add.w	r8, r4, r3
 80071e8:	f000 fb36 	bl	8007858 <_sbrk_r>
 80071ec:	4580      	cmp	r8, r0
 80071ee:	d13a      	bne.n	8007266 <_malloc_r+0xd2>
 80071f0:	6821      	ldr	r1, [r4, #0]
 80071f2:	3503      	adds	r5, #3
 80071f4:	1a6d      	subs	r5, r5, r1
 80071f6:	f025 0503 	bic.w	r5, r5, #3
 80071fa:	3508      	adds	r5, #8
 80071fc:	2d0c      	cmp	r5, #12
 80071fe:	bf38      	it	cc
 8007200:	250c      	movcc	r5, #12
 8007202:	4629      	mov	r1, r5
 8007204:	4638      	mov	r0, r7
 8007206:	f7ff ffa5 	bl	8007154 <sbrk_aligned>
 800720a:	3001      	adds	r0, #1
 800720c:	d02b      	beq.n	8007266 <_malloc_r+0xd2>
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	442b      	add	r3, r5
 8007212:	6023      	str	r3, [r4, #0]
 8007214:	e00e      	b.n	8007234 <_malloc_r+0xa0>
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	1b52      	subs	r2, r2, r5
 800721a:	d41e      	bmi.n	800725a <_malloc_r+0xc6>
 800721c:	2a0b      	cmp	r2, #11
 800721e:	d916      	bls.n	800724e <_malloc_r+0xba>
 8007220:	1961      	adds	r1, r4, r5
 8007222:	42a3      	cmp	r3, r4
 8007224:	6025      	str	r5, [r4, #0]
 8007226:	bf18      	it	ne
 8007228:	6059      	strne	r1, [r3, #4]
 800722a:	6863      	ldr	r3, [r4, #4]
 800722c:	bf08      	it	eq
 800722e:	6031      	streq	r1, [r6, #0]
 8007230:	5162      	str	r2, [r4, r5]
 8007232:	604b      	str	r3, [r1, #4]
 8007234:	4638      	mov	r0, r7
 8007236:	f104 060b 	add.w	r6, r4, #11
 800723a:	f000 fe0b 	bl	8007e54 <__malloc_unlock>
 800723e:	f026 0607 	bic.w	r6, r6, #7
 8007242:	1d23      	adds	r3, r4, #4
 8007244:	1af2      	subs	r2, r6, r3
 8007246:	d0b6      	beq.n	80071b6 <_malloc_r+0x22>
 8007248:	1b9b      	subs	r3, r3, r6
 800724a:	50a3      	str	r3, [r4, r2]
 800724c:	e7b3      	b.n	80071b6 <_malloc_r+0x22>
 800724e:	6862      	ldr	r2, [r4, #4]
 8007250:	42a3      	cmp	r3, r4
 8007252:	bf0c      	ite	eq
 8007254:	6032      	streq	r2, [r6, #0]
 8007256:	605a      	strne	r2, [r3, #4]
 8007258:	e7ec      	b.n	8007234 <_malloc_r+0xa0>
 800725a:	4623      	mov	r3, r4
 800725c:	6864      	ldr	r4, [r4, #4]
 800725e:	e7b2      	b.n	80071c6 <_malloc_r+0x32>
 8007260:	4634      	mov	r4, r6
 8007262:	6876      	ldr	r6, [r6, #4]
 8007264:	e7b9      	b.n	80071da <_malloc_r+0x46>
 8007266:	230c      	movs	r3, #12
 8007268:	603b      	str	r3, [r7, #0]
 800726a:	4638      	mov	r0, r7
 800726c:	f000 fdf2 	bl	8007e54 <__malloc_unlock>
 8007270:	e7a1      	b.n	80071b6 <_malloc_r+0x22>
 8007272:	6025      	str	r5, [r4, #0]
 8007274:	e7de      	b.n	8007234 <_malloc_r+0xa0>
 8007276:	bf00      	nop
 8007278:	20000660 	.word	0x20000660

0800727c <__sfputc_r>:
 800727c:	6893      	ldr	r3, [r2, #8]
 800727e:	3b01      	subs	r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	b410      	push	{r4}
 8007284:	6093      	str	r3, [r2, #8]
 8007286:	da08      	bge.n	800729a <__sfputc_r+0x1e>
 8007288:	6994      	ldr	r4, [r2, #24]
 800728a:	42a3      	cmp	r3, r4
 800728c:	db01      	blt.n	8007292 <__sfputc_r+0x16>
 800728e:	290a      	cmp	r1, #10
 8007290:	d103      	bne.n	800729a <__sfputc_r+0x1e>
 8007292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007296:	f000 baef 	b.w	8007878 <__swbuf_r>
 800729a:	6813      	ldr	r3, [r2, #0]
 800729c:	1c58      	adds	r0, r3, #1
 800729e:	6010      	str	r0, [r2, #0]
 80072a0:	7019      	strb	r1, [r3, #0]
 80072a2:	4608      	mov	r0, r1
 80072a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <__sfputs_r>:
 80072aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ac:	4606      	mov	r6, r0
 80072ae:	460f      	mov	r7, r1
 80072b0:	4614      	mov	r4, r2
 80072b2:	18d5      	adds	r5, r2, r3
 80072b4:	42ac      	cmp	r4, r5
 80072b6:	d101      	bne.n	80072bc <__sfputs_r+0x12>
 80072b8:	2000      	movs	r0, #0
 80072ba:	e007      	b.n	80072cc <__sfputs_r+0x22>
 80072bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c0:	463a      	mov	r2, r7
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7ff ffda 	bl	800727c <__sfputc_r>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d1f3      	bne.n	80072b4 <__sfputs_r+0xa>
 80072cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072d0 <_vfiprintf_r>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	460d      	mov	r5, r1
 80072d6:	b09d      	sub	sp, #116	; 0x74
 80072d8:	4614      	mov	r4, r2
 80072da:	4698      	mov	r8, r3
 80072dc:	4606      	mov	r6, r0
 80072de:	b118      	cbz	r0, 80072e8 <_vfiprintf_r+0x18>
 80072e0:	6983      	ldr	r3, [r0, #24]
 80072e2:	b90b      	cbnz	r3, 80072e8 <_vfiprintf_r+0x18>
 80072e4:	f000 fcaa 	bl	8007c3c <__sinit>
 80072e8:	4b89      	ldr	r3, [pc, #548]	; (8007510 <_vfiprintf_r+0x240>)
 80072ea:	429d      	cmp	r5, r3
 80072ec:	d11b      	bne.n	8007326 <_vfiprintf_r+0x56>
 80072ee:	6875      	ldr	r5, [r6, #4]
 80072f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072f2:	07d9      	lsls	r1, r3, #31
 80072f4:	d405      	bmi.n	8007302 <_vfiprintf_r+0x32>
 80072f6:	89ab      	ldrh	r3, [r5, #12]
 80072f8:	059a      	lsls	r2, r3, #22
 80072fa:	d402      	bmi.n	8007302 <_vfiprintf_r+0x32>
 80072fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072fe:	f000 fd3b 	bl	8007d78 <__retarget_lock_acquire_recursive>
 8007302:	89ab      	ldrh	r3, [r5, #12]
 8007304:	071b      	lsls	r3, r3, #28
 8007306:	d501      	bpl.n	800730c <_vfiprintf_r+0x3c>
 8007308:	692b      	ldr	r3, [r5, #16]
 800730a:	b9eb      	cbnz	r3, 8007348 <_vfiprintf_r+0x78>
 800730c:	4629      	mov	r1, r5
 800730e:	4630      	mov	r0, r6
 8007310:	f000 fb04 	bl	800791c <__swsetup_r>
 8007314:	b1c0      	cbz	r0, 8007348 <_vfiprintf_r+0x78>
 8007316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007318:	07dc      	lsls	r4, r3, #31
 800731a:	d50e      	bpl.n	800733a <_vfiprintf_r+0x6a>
 800731c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007320:	b01d      	add	sp, #116	; 0x74
 8007322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007326:	4b7b      	ldr	r3, [pc, #492]	; (8007514 <_vfiprintf_r+0x244>)
 8007328:	429d      	cmp	r5, r3
 800732a:	d101      	bne.n	8007330 <_vfiprintf_r+0x60>
 800732c:	68b5      	ldr	r5, [r6, #8]
 800732e:	e7df      	b.n	80072f0 <_vfiprintf_r+0x20>
 8007330:	4b79      	ldr	r3, [pc, #484]	; (8007518 <_vfiprintf_r+0x248>)
 8007332:	429d      	cmp	r5, r3
 8007334:	bf08      	it	eq
 8007336:	68f5      	ldreq	r5, [r6, #12]
 8007338:	e7da      	b.n	80072f0 <_vfiprintf_r+0x20>
 800733a:	89ab      	ldrh	r3, [r5, #12]
 800733c:	0598      	lsls	r0, r3, #22
 800733e:	d4ed      	bmi.n	800731c <_vfiprintf_r+0x4c>
 8007340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007342:	f000 fd1a 	bl	8007d7a <__retarget_lock_release_recursive>
 8007346:	e7e9      	b.n	800731c <_vfiprintf_r+0x4c>
 8007348:	2300      	movs	r3, #0
 800734a:	9309      	str	r3, [sp, #36]	; 0x24
 800734c:	2320      	movs	r3, #32
 800734e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007352:	f8cd 800c 	str.w	r8, [sp, #12]
 8007356:	2330      	movs	r3, #48	; 0x30
 8007358:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800751c <_vfiprintf_r+0x24c>
 800735c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007360:	f04f 0901 	mov.w	r9, #1
 8007364:	4623      	mov	r3, r4
 8007366:	469a      	mov	sl, r3
 8007368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800736c:	b10a      	cbz	r2, 8007372 <_vfiprintf_r+0xa2>
 800736e:	2a25      	cmp	r2, #37	; 0x25
 8007370:	d1f9      	bne.n	8007366 <_vfiprintf_r+0x96>
 8007372:	ebba 0b04 	subs.w	fp, sl, r4
 8007376:	d00b      	beq.n	8007390 <_vfiprintf_r+0xc0>
 8007378:	465b      	mov	r3, fp
 800737a:	4622      	mov	r2, r4
 800737c:	4629      	mov	r1, r5
 800737e:	4630      	mov	r0, r6
 8007380:	f7ff ff93 	bl	80072aa <__sfputs_r>
 8007384:	3001      	adds	r0, #1
 8007386:	f000 80aa 	beq.w	80074de <_vfiprintf_r+0x20e>
 800738a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800738c:	445a      	add	r2, fp
 800738e:	9209      	str	r2, [sp, #36]	; 0x24
 8007390:	f89a 3000 	ldrb.w	r3, [sl]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 80a2 	beq.w	80074de <_vfiprintf_r+0x20e>
 800739a:	2300      	movs	r3, #0
 800739c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a4:	f10a 0a01 	add.w	sl, sl, #1
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	9307      	str	r3, [sp, #28]
 80073ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073b0:	931a      	str	r3, [sp, #104]	; 0x68
 80073b2:	4654      	mov	r4, sl
 80073b4:	2205      	movs	r2, #5
 80073b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ba:	4858      	ldr	r0, [pc, #352]	; (800751c <_vfiprintf_r+0x24c>)
 80073bc:	f7f8 ff20 	bl	8000200 <memchr>
 80073c0:	9a04      	ldr	r2, [sp, #16]
 80073c2:	b9d8      	cbnz	r0, 80073fc <_vfiprintf_r+0x12c>
 80073c4:	06d1      	lsls	r1, r2, #27
 80073c6:	bf44      	itt	mi
 80073c8:	2320      	movmi	r3, #32
 80073ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073ce:	0713      	lsls	r3, r2, #28
 80073d0:	bf44      	itt	mi
 80073d2:	232b      	movmi	r3, #43	; 0x2b
 80073d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d8:	f89a 3000 	ldrb.w	r3, [sl]
 80073dc:	2b2a      	cmp	r3, #42	; 0x2a
 80073de:	d015      	beq.n	800740c <_vfiprintf_r+0x13c>
 80073e0:	9a07      	ldr	r2, [sp, #28]
 80073e2:	4654      	mov	r4, sl
 80073e4:	2000      	movs	r0, #0
 80073e6:	f04f 0c0a 	mov.w	ip, #10
 80073ea:	4621      	mov	r1, r4
 80073ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f0:	3b30      	subs	r3, #48	; 0x30
 80073f2:	2b09      	cmp	r3, #9
 80073f4:	d94e      	bls.n	8007494 <_vfiprintf_r+0x1c4>
 80073f6:	b1b0      	cbz	r0, 8007426 <_vfiprintf_r+0x156>
 80073f8:	9207      	str	r2, [sp, #28]
 80073fa:	e014      	b.n	8007426 <_vfiprintf_r+0x156>
 80073fc:	eba0 0308 	sub.w	r3, r0, r8
 8007400:	fa09 f303 	lsl.w	r3, r9, r3
 8007404:	4313      	orrs	r3, r2
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	46a2      	mov	sl, r4
 800740a:	e7d2      	b.n	80073b2 <_vfiprintf_r+0xe2>
 800740c:	9b03      	ldr	r3, [sp, #12]
 800740e:	1d19      	adds	r1, r3, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	9103      	str	r1, [sp, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	bfbb      	ittet	lt
 8007418:	425b      	neglt	r3, r3
 800741a:	f042 0202 	orrlt.w	r2, r2, #2
 800741e:	9307      	strge	r3, [sp, #28]
 8007420:	9307      	strlt	r3, [sp, #28]
 8007422:	bfb8      	it	lt
 8007424:	9204      	strlt	r2, [sp, #16]
 8007426:	7823      	ldrb	r3, [r4, #0]
 8007428:	2b2e      	cmp	r3, #46	; 0x2e
 800742a:	d10c      	bne.n	8007446 <_vfiprintf_r+0x176>
 800742c:	7863      	ldrb	r3, [r4, #1]
 800742e:	2b2a      	cmp	r3, #42	; 0x2a
 8007430:	d135      	bne.n	800749e <_vfiprintf_r+0x1ce>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	1d1a      	adds	r2, r3, #4
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	9203      	str	r2, [sp, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	bfb8      	it	lt
 800743e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007442:	3402      	adds	r4, #2
 8007444:	9305      	str	r3, [sp, #20]
 8007446:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800752c <_vfiprintf_r+0x25c>
 800744a:	7821      	ldrb	r1, [r4, #0]
 800744c:	2203      	movs	r2, #3
 800744e:	4650      	mov	r0, sl
 8007450:	f7f8 fed6 	bl	8000200 <memchr>
 8007454:	b140      	cbz	r0, 8007468 <_vfiprintf_r+0x198>
 8007456:	2340      	movs	r3, #64	; 0x40
 8007458:	eba0 000a 	sub.w	r0, r0, sl
 800745c:	fa03 f000 	lsl.w	r0, r3, r0
 8007460:	9b04      	ldr	r3, [sp, #16]
 8007462:	4303      	orrs	r3, r0
 8007464:	3401      	adds	r4, #1
 8007466:	9304      	str	r3, [sp, #16]
 8007468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746c:	482c      	ldr	r0, [pc, #176]	; (8007520 <_vfiprintf_r+0x250>)
 800746e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007472:	2206      	movs	r2, #6
 8007474:	f7f8 fec4 	bl	8000200 <memchr>
 8007478:	2800      	cmp	r0, #0
 800747a:	d03f      	beq.n	80074fc <_vfiprintf_r+0x22c>
 800747c:	4b29      	ldr	r3, [pc, #164]	; (8007524 <_vfiprintf_r+0x254>)
 800747e:	bb1b      	cbnz	r3, 80074c8 <_vfiprintf_r+0x1f8>
 8007480:	9b03      	ldr	r3, [sp, #12]
 8007482:	3307      	adds	r3, #7
 8007484:	f023 0307 	bic.w	r3, r3, #7
 8007488:	3308      	adds	r3, #8
 800748a:	9303      	str	r3, [sp, #12]
 800748c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800748e:	443b      	add	r3, r7
 8007490:	9309      	str	r3, [sp, #36]	; 0x24
 8007492:	e767      	b.n	8007364 <_vfiprintf_r+0x94>
 8007494:	fb0c 3202 	mla	r2, ip, r2, r3
 8007498:	460c      	mov	r4, r1
 800749a:	2001      	movs	r0, #1
 800749c:	e7a5      	b.n	80073ea <_vfiprintf_r+0x11a>
 800749e:	2300      	movs	r3, #0
 80074a0:	3401      	adds	r4, #1
 80074a2:	9305      	str	r3, [sp, #20]
 80074a4:	4619      	mov	r1, r3
 80074a6:	f04f 0c0a 	mov.w	ip, #10
 80074aa:	4620      	mov	r0, r4
 80074ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074b0:	3a30      	subs	r2, #48	; 0x30
 80074b2:	2a09      	cmp	r2, #9
 80074b4:	d903      	bls.n	80074be <_vfiprintf_r+0x1ee>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0c5      	beq.n	8007446 <_vfiprintf_r+0x176>
 80074ba:	9105      	str	r1, [sp, #20]
 80074bc:	e7c3      	b.n	8007446 <_vfiprintf_r+0x176>
 80074be:	fb0c 2101 	mla	r1, ip, r1, r2
 80074c2:	4604      	mov	r4, r0
 80074c4:	2301      	movs	r3, #1
 80074c6:	e7f0      	b.n	80074aa <_vfiprintf_r+0x1da>
 80074c8:	ab03      	add	r3, sp, #12
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	462a      	mov	r2, r5
 80074ce:	4b16      	ldr	r3, [pc, #88]	; (8007528 <_vfiprintf_r+0x258>)
 80074d0:	a904      	add	r1, sp, #16
 80074d2:	4630      	mov	r0, r6
 80074d4:	f3af 8000 	nop.w
 80074d8:	4607      	mov	r7, r0
 80074da:	1c78      	adds	r0, r7, #1
 80074dc:	d1d6      	bne.n	800748c <_vfiprintf_r+0x1bc>
 80074de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074e0:	07d9      	lsls	r1, r3, #31
 80074e2:	d405      	bmi.n	80074f0 <_vfiprintf_r+0x220>
 80074e4:	89ab      	ldrh	r3, [r5, #12]
 80074e6:	059a      	lsls	r2, r3, #22
 80074e8:	d402      	bmi.n	80074f0 <_vfiprintf_r+0x220>
 80074ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ec:	f000 fc45 	bl	8007d7a <__retarget_lock_release_recursive>
 80074f0:	89ab      	ldrh	r3, [r5, #12]
 80074f2:	065b      	lsls	r3, r3, #25
 80074f4:	f53f af12 	bmi.w	800731c <_vfiprintf_r+0x4c>
 80074f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074fa:	e711      	b.n	8007320 <_vfiprintf_r+0x50>
 80074fc:	ab03      	add	r3, sp, #12
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	462a      	mov	r2, r5
 8007502:	4b09      	ldr	r3, [pc, #36]	; (8007528 <_vfiprintf_r+0x258>)
 8007504:	a904      	add	r1, sp, #16
 8007506:	4630      	mov	r0, r6
 8007508:	f000 f880 	bl	800760c <_printf_i>
 800750c:	e7e4      	b.n	80074d8 <_vfiprintf_r+0x208>
 800750e:	bf00      	nop
 8007510:	080093fc 	.word	0x080093fc
 8007514:	0800941c 	.word	0x0800941c
 8007518:	080093dc 	.word	0x080093dc
 800751c:	080093a9 	.word	0x080093a9
 8007520:	080093b3 	.word	0x080093b3
 8007524:	00000000 	.word	0x00000000
 8007528:	080072ab 	.word	0x080072ab
 800752c:	080093af 	.word	0x080093af

08007530 <_printf_common>:
 8007530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	4616      	mov	r6, r2
 8007536:	4699      	mov	r9, r3
 8007538:	688a      	ldr	r2, [r1, #8]
 800753a:	690b      	ldr	r3, [r1, #16]
 800753c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007540:	4293      	cmp	r3, r2
 8007542:	bfb8      	it	lt
 8007544:	4613      	movlt	r3, r2
 8007546:	6033      	str	r3, [r6, #0]
 8007548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800754c:	4607      	mov	r7, r0
 800754e:	460c      	mov	r4, r1
 8007550:	b10a      	cbz	r2, 8007556 <_printf_common+0x26>
 8007552:	3301      	adds	r3, #1
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	0699      	lsls	r1, r3, #26
 800755a:	bf42      	ittt	mi
 800755c:	6833      	ldrmi	r3, [r6, #0]
 800755e:	3302      	addmi	r3, #2
 8007560:	6033      	strmi	r3, [r6, #0]
 8007562:	6825      	ldr	r5, [r4, #0]
 8007564:	f015 0506 	ands.w	r5, r5, #6
 8007568:	d106      	bne.n	8007578 <_printf_common+0x48>
 800756a:	f104 0a19 	add.w	sl, r4, #25
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	6832      	ldr	r2, [r6, #0]
 8007572:	1a9b      	subs	r3, r3, r2
 8007574:	42ab      	cmp	r3, r5
 8007576:	dc26      	bgt.n	80075c6 <_printf_common+0x96>
 8007578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800757c:	1e13      	subs	r3, r2, #0
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	bf18      	it	ne
 8007582:	2301      	movne	r3, #1
 8007584:	0692      	lsls	r2, r2, #26
 8007586:	d42b      	bmi.n	80075e0 <_printf_common+0xb0>
 8007588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800758c:	4649      	mov	r1, r9
 800758e:	4638      	mov	r0, r7
 8007590:	47c0      	blx	r8
 8007592:	3001      	adds	r0, #1
 8007594:	d01e      	beq.n	80075d4 <_printf_common+0xa4>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	68e5      	ldr	r5, [r4, #12]
 800759a:	6832      	ldr	r2, [r6, #0]
 800759c:	f003 0306 	and.w	r3, r3, #6
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	bf08      	it	eq
 80075a4:	1aad      	subeq	r5, r5, r2
 80075a6:	68a3      	ldr	r3, [r4, #8]
 80075a8:	6922      	ldr	r2, [r4, #16]
 80075aa:	bf0c      	ite	eq
 80075ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b0:	2500      	movne	r5, #0
 80075b2:	4293      	cmp	r3, r2
 80075b4:	bfc4      	itt	gt
 80075b6:	1a9b      	subgt	r3, r3, r2
 80075b8:	18ed      	addgt	r5, r5, r3
 80075ba:	2600      	movs	r6, #0
 80075bc:	341a      	adds	r4, #26
 80075be:	42b5      	cmp	r5, r6
 80075c0:	d11a      	bne.n	80075f8 <_printf_common+0xc8>
 80075c2:	2000      	movs	r0, #0
 80075c4:	e008      	b.n	80075d8 <_printf_common+0xa8>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4652      	mov	r2, sl
 80075ca:	4649      	mov	r1, r9
 80075cc:	4638      	mov	r0, r7
 80075ce:	47c0      	blx	r8
 80075d0:	3001      	adds	r0, #1
 80075d2:	d103      	bne.n	80075dc <_printf_common+0xac>
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075dc:	3501      	adds	r5, #1
 80075de:	e7c6      	b.n	800756e <_printf_common+0x3e>
 80075e0:	18e1      	adds	r1, r4, r3
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	2030      	movs	r0, #48	; 0x30
 80075e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075ea:	4422      	add	r2, r4
 80075ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075f4:	3302      	adds	r3, #2
 80075f6:	e7c7      	b.n	8007588 <_printf_common+0x58>
 80075f8:	2301      	movs	r3, #1
 80075fa:	4622      	mov	r2, r4
 80075fc:	4649      	mov	r1, r9
 80075fe:	4638      	mov	r0, r7
 8007600:	47c0      	blx	r8
 8007602:	3001      	adds	r0, #1
 8007604:	d0e6      	beq.n	80075d4 <_printf_common+0xa4>
 8007606:	3601      	adds	r6, #1
 8007608:	e7d9      	b.n	80075be <_printf_common+0x8e>
	...

0800760c <_printf_i>:
 800760c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	7e0f      	ldrb	r7, [r1, #24]
 8007612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007614:	2f78      	cmp	r7, #120	; 0x78
 8007616:	4691      	mov	r9, r2
 8007618:	4680      	mov	r8, r0
 800761a:	460c      	mov	r4, r1
 800761c:	469a      	mov	sl, r3
 800761e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007622:	d807      	bhi.n	8007634 <_printf_i+0x28>
 8007624:	2f62      	cmp	r7, #98	; 0x62
 8007626:	d80a      	bhi.n	800763e <_printf_i+0x32>
 8007628:	2f00      	cmp	r7, #0
 800762a:	f000 80d8 	beq.w	80077de <_printf_i+0x1d2>
 800762e:	2f58      	cmp	r7, #88	; 0x58
 8007630:	f000 80a3 	beq.w	800777a <_printf_i+0x16e>
 8007634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800763c:	e03a      	b.n	80076b4 <_printf_i+0xa8>
 800763e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007642:	2b15      	cmp	r3, #21
 8007644:	d8f6      	bhi.n	8007634 <_printf_i+0x28>
 8007646:	a101      	add	r1, pc, #4	; (adr r1, 800764c <_printf_i+0x40>)
 8007648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800764c:	080076a5 	.word	0x080076a5
 8007650:	080076b9 	.word	0x080076b9
 8007654:	08007635 	.word	0x08007635
 8007658:	08007635 	.word	0x08007635
 800765c:	08007635 	.word	0x08007635
 8007660:	08007635 	.word	0x08007635
 8007664:	080076b9 	.word	0x080076b9
 8007668:	08007635 	.word	0x08007635
 800766c:	08007635 	.word	0x08007635
 8007670:	08007635 	.word	0x08007635
 8007674:	08007635 	.word	0x08007635
 8007678:	080077c5 	.word	0x080077c5
 800767c:	080076e9 	.word	0x080076e9
 8007680:	080077a7 	.word	0x080077a7
 8007684:	08007635 	.word	0x08007635
 8007688:	08007635 	.word	0x08007635
 800768c:	080077e7 	.word	0x080077e7
 8007690:	08007635 	.word	0x08007635
 8007694:	080076e9 	.word	0x080076e9
 8007698:	08007635 	.word	0x08007635
 800769c:	08007635 	.word	0x08007635
 80076a0:	080077af 	.word	0x080077af
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	1d1a      	adds	r2, r3, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	602a      	str	r2, [r5, #0]
 80076ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076b4:	2301      	movs	r3, #1
 80076b6:	e0a3      	b.n	8007800 <_printf_i+0x1f4>
 80076b8:	6820      	ldr	r0, [r4, #0]
 80076ba:	6829      	ldr	r1, [r5, #0]
 80076bc:	0606      	lsls	r6, r0, #24
 80076be:	f101 0304 	add.w	r3, r1, #4
 80076c2:	d50a      	bpl.n	80076da <_printf_i+0xce>
 80076c4:	680e      	ldr	r6, [r1, #0]
 80076c6:	602b      	str	r3, [r5, #0]
 80076c8:	2e00      	cmp	r6, #0
 80076ca:	da03      	bge.n	80076d4 <_printf_i+0xc8>
 80076cc:	232d      	movs	r3, #45	; 0x2d
 80076ce:	4276      	negs	r6, r6
 80076d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d4:	485e      	ldr	r0, [pc, #376]	; (8007850 <_printf_i+0x244>)
 80076d6:	230a      	movs	r3, #10
 80076d8:	e019      	b.n	800770e <_printf_i+0x102>
 80076da:	680e      	ldr	r6, [r1, #0]
 80076dc:	602b      	str	r3, [r5, #0]
 80076de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076e2:	bf18      	it	ne
 80076e4:	b236      	sxthne	r6, r6
 80076e6:	e7ef      	b.n	80076c8 <_printf_i+0xbc>
 80076e8:	682b      	ldr	r3, [r5, #0]
 80076ea:	6820      	ldr	r0, [r4, #0]
 80076ec:	1d19      	adds	r1, r3, #4
 80076ee:	6029      	str	r1, [r5, #0]
 80076f0:	0601      	lsls	r1, r0, #24
 80076f2:	d501      	bpl.n	80076f8 <_printf_i+0xec>
 80076f4:	681e      	ldr	r6, [r3, #0]
 80076f6:	e002      	b.n	80076fe <_printf_i+0xf2>
 80076f8:	0646      	lsls	r6, r0, #25
 80076fa:	d5fb      	bpl.n	80076f4 <_printf_i+0xe8>
 80076fc:	881e      	ldrh	r6, [r3, #0]
 80076fe:	4854      	ldr	r0, [pc, #336]	; (8007850 <_printf_i+0x244>)
 8007700:	2f6f      	cmp	r7, #111	; 0x6f
 8007702:	bf0c      	ite	eq
 8007704:	2308      	moveq	r3, #8
 8007706:	230a      	movne	r3, #10
 8007708:	2100      	movs	r1, #0
 800770a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800770e:	6865      	ldr	r5, [r4, #4]
 8007710:	60a5      	str	r5, [r4, #8]
 8007712:	2d00      	cmp	r5, #0
 8007714:	bfa2      	ittt	ge
 8007716:	6821      	ldrge	r1, [r4, #0]
 8007718:	f021 0104 	bicge.w	r1, r1, #4
 800771c:	6021      	strge	r1, [r4, #0]
 800771e:	b90e      	cbnz	r6, 8007724 <_printf_i+0x118>
 8007720:	2d00      	cmp	r5, #0
 8007722:	d04d      	beq.n	80077c0 <_printf_i+0x1b4>
 8007724:	4615      	mov	r5, r2
 8007726:	fbb6 f1f3 	udiv	r1, r6, r3
 800772a:	fb03 6711 	mls	r7, r3, r1, r6
 800772e:	5dc7      	ldrb	r7, [r0, r7]
 8007730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007734:	4637      	mov	r7, r6
 8007736:	42bb      	cmp	r3, r7
 8007738:	460e      	mov	r6, r1
 800773a:	d9f4      	bls.n	8007726 <_printf_i+0x11a>
 800773c:	2b08      	cmp	r3, #8
 800773e:	d10b      	bne.n	8007758 <_printf_i+0x14c>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	07de      	lsls	r6, r3, #31
 8007744:	d508      	bpl.n	8007758 <_printf_i+0x14c>
 8007746:	6923      	ldr	r3, [r4, #16]
 8007748:	6861      	ldr	r1, [r4, #4]
 800774a:	4299      	cmp	r1, r3
 800774c:	bfde      	ittt	le
 800774e:	2330      	movle	r3, #48	; 0x30
 8007750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007754:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007758:	1b52      	subs	r2, r2, r5
 800775a:	6122      	str	r2, [r4, #16]
 800775c:	f8cd a000 	str.w	sl, [sp]
 8007760:	464b      	mov	r3, r9
 8007762:	aa03      	add	r2, sp, #12
 8007764:	4621      	mov	r1, r4
 8007766:	4640      	mov	r0, r8
 8007768:	f7ff fee2 	bl	8007530 <_printf_common>
 800776c:	3001      	adds	r0, #1
 800776e:	d14c      	bne.n	800780a <_printf_i+0x1fe>
 8007770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007774:	b004      	add	sp, #16
 8007776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777a:	4835      	ldr	r0, [pc, #212]	; (8007850 <_printf_i+0x244>)
 800777c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007780:	6829      	ldr	r1, [r5, #0]
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	f851 6b04 	ldr.w	r6, [r1], #4
 8007788:	6029      	str	r1, [r5, #0]
 800778a:	061d      	lsls	r5, r3, #24
 800778c:	d514      	bpl.n	80077b8 <_printf_i+0x1ac>
 800778e:	07df      	lsls	r7, r3, #31
 8007790:	bf44      	itt	mi
 8007792:	f043 0320 	orrmi.w	r3, r3, #32
 8007796:	6023      	strmi	r3, [r4, #0]
 8007798:	b91e      	cbnz	r6, 80077a2 <_printf_i+0x196>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	f023 0320 	bic.w	r3, r3, #32
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	2310      	movs	r3, #16
 80077a4:	e7b0      	b.n	8007708 <_printf_i+0xfc>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	f043 0320 	orr.w	r3, r3, #32
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	2378      	movs	r3, #120	; 0x78
 80077b0:	4828      	ldr	r0, [pc, #160]	; (8007854 <_printf_i+0x248>)
 80077b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077b6:	e7e3      	b.n	8007780 <_printf_i+0x174>
 80077b8:	0659      	lsls	r1, r3, #25
 80077ba:	bf48      	it	mi
 80077bc:	b2b6      	uxthmi	r6, r6
 80077be:	e7e6      	b.n	800778e <_printf_i+0x182>
 80077c0:	4615      	mov	r5, r2
 80077c2:	e7bb      	b.n	800773c <_printf_i+0x130>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	6826      	ldr	r6, [r4, #0]
 80077c8:	6961      	ldr	r1, [r4, #20]
 80077ca:	1d18      	adds	r0, r3, #4
 80077cc:	6028      	str	r0, [r5, #0]
 80077ce:	0635      	lsls	r5, r6, #24
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	d501      	bpl.n	80077d8 <_printf_i+0x1cc>
 80077d4:	6019      	str	r1, [r3, #0]
 80077d6:	e002      	b.n	80077de <_printf_i+0x1d2>
 80077d8:	0670      	lsls	r0, r6, #25
 80077da:	d5fb      	bpl.n	80077d4 <_printf_i+0x1c8>
 80077dc:	8019      	strh	r1, [r3, #0]
 80077de:	2300      	movs	r3, #0
 80077e0:	6123      	str	r3, [r4, #16]
 80077e2:	4615      	mov	r5, r2
 80077e4:	e7ba      	b.n	800775c <_printf_i+0x150>
 80077e6:	682b      	ldr	r3, [r5, #0]
 80077e8:	1d1a      	adds	r2, r3, #4
 80077ea:	602a      	str	r2, [r5, #0]
 80077ec:	681d      	ldr	r5, [r3, #0]
 80077ee:	6862      	ldr	r2, [r4, #4]
 80077f0:	2100      	movs	r1, #0
 80077f2:	4628      	mov	r0, r5
 80077f4:	f7f8 fd04 	bl	8000200 <memchr>
 80077f8:	b108      	cbz	r0, 80077fe <_printf_i+0x1f2>
 80077fa:	1b40      	subs	r0, r0, r5
 80077fc:	6060      	str	r0, [r4, #4]
 80077fe:	6863      	ldr	r3, [r4, #4]
 8007800:	6123      	str	r3, [r4, #16]
 8007802:	2300      	movs	r3, #0
 8007804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007808:	e7a8      	b.n	800775c <_printf_i+0x150>
 800780a:	6923      	ldr	r3, [r4, #16]
 800780c:	462a      	mov	r2, r5
 800780e:	4649      	mov	r1, r9
 8007810:	4640      	mov	r0, r8
 8007812:	47d0      	blx	sl
 8007814:	3001      	adds	r0, #1
 8007816:	d0ab      	beq.n	8007770 <_printf_i+0x164>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	079b      	lsls	r3, r3, #30
 800781c:	d413      	bmi.n	8007846 <_printf_i+0x23a>
 800781e:	68e0      	ldr	r0, [r4, #12]
 8007820:	9b03      	ldr	r3, [sp, #12]
 8007822:	4298      	cmp	r0, r3
 8007824:	bfb8      	it	lt
 8007826:	4618      	movlt	r0, r3
 8007828:	e7a4      	b.n	8007774 <_printf_i+0x168>
 800782a:	2301      	movs	r3, #1
 800782c:	4632      	mov	r2, r6
 800782e:	4649      	mov	r1, r9
 8007830:	4640      	mov	r0, r8
 8007832:	47d0      	blx	sl
 8007834:	3001      	adds	r0, #1
 8007836:	d09b      	beq.n	8007770 <_printf_i+0x164>
 8007838:	3501      	adds	r5, #1
 800783a:	68e3      	ldr	r3, [r4, #12]
 800783c:	9903      	ldr	r1, [sp, #12]
 800783e:	1a5b      	subs	r3, r3, r1
 8007840:	42ab      	cmp	r3, r5
 8007842:	dcf2      	bgt.n	800782a <_printf_i+0x21e>
 8007844:	e7eb      	b.n	800781e <_printf_i+0x212>
 8007846:	2500      	movs	r5, #0
 8007848:	f104 0619 	add.w	r6, r4, #25
 800784c:	e7f5      	b.n	800783a <_printf_i+0x22e>
 800784e:	bf00      	nop
 8007850:	080093ba 	.word	0x080093ba
 8007854:	080093cb 	.word	0x080093cb

08007858 <_sbrk_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d06      	ldr	r5, [pc, #24]	; (8007874 <_sbrk_r+0x1c>)
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	602b      	str	r3, [r5, #0]
 8007864:	f7fb fdae 	bl	80033c4 <_sbrk>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_sbrk_r+0x1a>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_sbrk_r+0x1a>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	2000066c 	.word	0x2000066c

08007878 <__swbuf_r>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	460e      	mov	r6, r1
 800787c:	4614      	mov	r4, r2
 800787e:	4605      	mov	r5, r0
 8007880:	b118      	cbz	r0, 800788a <__swbuf_r+0x12>
 8007882:	6983      	ldr	r3, [r0, #24]
 8007884:	b90b      	cbnz	r3, 800788a <__swbuf_r+0x12>
 8007886:	f000 f9d9 	bl	8007c3c <__sinit>
 800788a:	4b21      	ldr	r3, [pc, #132]	; (8007910 <__swbuf_r+0x98>)
 800788c:	429c      	cmp	r4, r3
 800788e:	d12b      	bne.n	80078e8 <__swbuf_r+0x70>
 8007890:	686c      	ldr	r4, [r5, #4]
 8007892:	69a3      	ldr	r3, [r4, #24]
 8007894:	60a3      	str	r3, [r4, #8]
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	071a      	lsls	r2, r3, #28
 800789a:	d52f      	bpl.n	80078fc <__swbuf_r+0x84>
 800789c:	6923      	ldr	r3, [r4, #16]
 800789e:	b36b      	cbz	r3, 80078fc <__swbuf_r+0x84>
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	6820      	ldr	r0, [r4, #0]
 80078a4:	1ac0      	subs	r0, r0, r3
 80078a6:	6963      	ldr	r3, [r4, #20]
 80078a8:	b2f6      	uxtb	r6, r6
 80078aa:	4283      	cmp	r3, r0
 80078ac:	4637      	mov	r7, r6
 80078ae:	dc04      	bgt.n	80078ba <__swbuf_r+0x42>
 80078b0:	4621      	mov	r1, r4
 80078b2:	4628      	mov	r0, r5
 80078b4:	f000 f92e 	bl	8007b14 <_fflush_r>
 80078b8:	bb30      	cbnz	r0, 8007908 <__swbuf_r+0x90>
 80078ba:	68a3      	ldr	r3, [r4, #8]
 80078bc:	3b01      	subs	r3, #1
 80078be:	60a3      	str	r3, [r4, #8]
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	6022      	str	r2, [r4, #0]
 80078c6:	701e      	strb	r6, [r3, #0]
 80078c8:	6963      	ldr	r3, [r4, #20]
 80078ca:	3001      	adds	r0, #1
 80078cc:	4283      	cmp	r3, r0
 80078ce:	d004      	beq.n	80078da <__swbuf_r+0x62>
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	07db      	lsls	r3, r3, #31
 80078d4:	d506      	bpl.n	80078e4 <__swbuf_r+0x6c>
 80078d6:	2e0a      	cmp	r6, #10
 80078d8:	d104      	bne.n	80078e4 <__swbuf_r+0x6c>
 80078da:	4621      	mov	r1, r4
 80078dc:	4628      	mov	r0, r5
 80078de:	f000 f919 	bl	8007b14 <_fflush_r>
 80078e2:	b988      	cbnz	r0, 8007908 <__swbuf_r+0x90>
 80078e4:	4638      	mov	r0, r7
 80078e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e8:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <__swbuf_r+0x9c>)
 80078ea:	429c      	cmp	r4, r3
 80078ec:	d101      	bne.n	80078f2 <__swbuf_r+0x7a>
 80078ee:	68ac      	ldr	r4, [r5, #8]
 80078f0:	e7cf      	b.n	8007892 <__swbuf_r+0x1a>
 80078f2:	4b09      	ldr	r3, [pc, #36]	; (8007918 <__swbuf_r+0xa0>)
 80078f4:	429c      	cmp	r4, r3
 80078f6:	bf08      	it	eq
 80078f8:	68ec      	ldreq	r4, [r5, #12]
 80078fa:	e7ca      	b.n	8007892 <__swbuf_r+0x1a>
 80078fc:	4621      	mov	r1, r4
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 f80c 	bl	800791c <__swsetup_r>
 8007904:	2800      	cmp	r0, #0
 8007906:	d0cb      	beq.n	80078a0 <__swbuf_r+0x28>
 8007908:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800790c:	e7ea      	b.n	80078e4 <__swbuf_r+0x6c>
 800790e:	bf00      	nop
 8007910:	080093fc 	.word	0x080093fc
 8007914:	0800941c 	.word	0x0800941c
 8007918:	080093dc 	.word	0x080093dc

0800791c <__swsetup_r>:
 800791c:	4b32      	ldr	r3, [pc, #200]	; (80079e8 <__swsetup_r+0xcc>)
 800791e:	b570      	push	{r4, r5, r6, lr}
 8007920:	681d      	ldr	r5, [r3, #0]
 8007922:	4606      	mov	r6, r0
 8007924:	460c      	mov	r4, r1
 8007926:	b125      	cbz	r5, 8007932 <__swsetup_r+0x16>
 8007928:	69ab      	ldr	r3, [r5, #24]
 800792a:	b913      	cbnz	r3, 8007932 <__swsetup_r+0x16>
 800792c:	4628      	mov	r0, r5
 800792e:	f000 f985 	bl	8007c3c <__sinit>
 8007932:	4b2e      	ldr	r3, [pc, #184]	; (80079ec <__swsetup_r+0xd0>)
 8007934:	429c      	cmp	r4, r3
 8007936:	d10f      	bne.n	8007958 <__swsetup_r+0x3c>
 8007938:	686c      	ldr	r4, [r5, #4]
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007940:	0719      	lsls	r1, r3, #28
 8007942:	d42c      	bmi.n	800799e <__swsetup_r+0x82>
 8007944:	06dd      	lsls	r5, r3, #27
 8007946:	d411      	bmi.n	800796c <__swsetup_r+0x50>
 8007948:	2309      	movs	r3, #9
 800794a:	6033      	str	r3, [r6, #0]
 800794c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007950:	81a3      	strh	r3, [r4, #12]
 8007952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007956:	e03e      	b.n	80079d6 <__swsetup_r+0xba>
 8007958:	4b25      	ldr	r3, [pc, #148]	; (80079f0 <__swsetup_r+0xd4>)
 800795a:	429c      	cmp	r4, r3
 800795c:	d101      	bne.n	8007962 <__swsetup_r+0x46>
 800795e:	68ac      	ldr	r4, [r5, #8]
 8007960:	e7eb      	b.n	800793a <__swsetup_r+0x1e>
 8007962:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <__swsetup_r+0xd8>)
 8007964:	429c      	cmp	r4, r3
 8007966:	bf08      	it	eq
 8007968:	68ec      	ldreq	r4, [r5, #12]
 800796a:	e7e6      	b.n	800793a <__swsetup_r+0x1e>
 800796c:	0758      	lsls	r0, r3, #29
 800796e:	d512      	bpl.n	8007996 <__swsetup_r+0x7a>
 8007970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007972:	b141      	cbz	r1, 8007986 <__swsetup_r+0x6a>
 8007974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007978:	4299      	cmp	r1, r3
 800797a:	d002      	beq.n	8007982 <__swsetup_r+0x66>
 800797c:	4630      	mov	r0, r6
 800797e:	f7ff fb9d 	bl	80070bc <_free_r>
 8007982:	2300      	movs	r3, #0
 8007984:	6363      	str	r3, [r4, #52]	; 0x34
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800798c:	81a3      	strh	r3, [r4, #12]
 800798e:	2300      	movs	r3, #0
 8007990:	6063      	str	r3, [r4, #4]
 8007992:	6923      	ldr	r3, [r4, #16]
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	f043 0308 	orr.w	r3, r3, #8
 800799c:	81a3      	strh	r3, [r4, #12]
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	b94b      	cbnz	r3, 80079b6 <__swsetup_r+0x9a>
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ac:	d003      	beq.n	80079b6 <__swsetup_r+0x9a>
 80079ae:	4621      	mov	r1, r4
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 fa09 	bl	8007dc8 <__smakebuf_r>
 80079b6:	89a0      	ldrh	r0, [r4, #12]
 80079b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079bc:	f010 0301 	ands.w	r3, r0, #1
 80079c0:	d00a      	beq.n	80079d8 <__swsetup_r+0xbc>
 80079c2:	2300      	movs	r3, #0
 80079c4:	60a3      	str	r3, [r4, #8]
 80079c6:	6963      	ldr	r3, [r4, #20]
 80079c8:	425b      	negs	r3, r3
 80079ca:	61a3      	str	r3, [r4, #24]
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	b943      	cbnz	r3, 80079e2 <__swsetup_r+0xc6>
 80079d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079d4:	d1ba      	bne.n	800794c <__swsetup_r+0x30>
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	0781      	lsls	r1, r0, #30
 80079da:	bf58      	it	pl
 80079dc:	6963      	ldrpl	r3, [r4, #20]
 80079de:	60a3      	str	r3, [r4, #8]
 80079e0:	e7f4      	b.n	80079cc <__swsetup_r+0xb0>
 80079e2:	2000      	movs	r0, #0
 80079e4:	e7f7      	b.n	80079d6 <__swsetup_r+0xba>
 80079e6:	bf00      	nop
 80079e8:	20000010 	.word	0x20000010
 80079ec:	080093fc 	.word	0x080093fc
 80079f0:	0800941c 	.word	0x0800941c
 80079f4:	080093dc 	.word	0x080093dc

080079f8 <abort>:
 80079f8:	b508      	push	{r3, lr}
 80079fa:	2006      	movs	r0, #6
 80079fc:	f000 fa58 	bl	8007eb0 <raise>
 8007a00:	2001      	movs	r0, #1
 8007a02:	f7fb fc67 	bl	80032d4 <_exit>
	...

08007a08 <__sflush_r>:
 8007a08:	898a      	ldrh	r2, [r1, #12]
 8007a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0e:	4605      	mov	r5, r0
 8007a10:	0710      	lsls	r0, r2, #28
 8007a12:	460c      	mov	r4, r1
 8007a14:	d458      	bmi.n	8007ac8 <__sflush_r+0xc0>
 8007a16:	684b      	ldr	r3, [r1, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	dc05      	bgt.n	8007a28 <__sflush_r+0x20>
 8007a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	dc02      	bgt.n	8007a28 <__sflush_r+0x20>
 8007a22:	2000      	movs	r0, #0
 8007a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a2a:	2e00      	cmp	r6, #0
 8007a2c:	d0f9      	beq.n	8007a22 <__sflush_r+0x1a>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a34:	682f      	ldr	r7, [r5, #0]
 8007a36:	602b      	str	r3, [r5, #0]
 8007a38:	d032      	beq.n	8007aa0 <__sflush_r+0x98>
 8007a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	075a      	lsls	r2, r3, #29
 8007a40:	d505      	bpl.n	8007a4e <__sflush_r+0x46>
 8007a42:	6863      	ldr	r3, [r4, #4]
 8007a44:	1ac0      	subs	r0, r0, r3
 8007a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a48:	b10b      	cbz	r3, 8007a4e <__sflush_r+0x46>
 8007a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a4c:	1ac0      	subs	r0, r0, r3
 8007a4e:	2300      	movs	r3, #0
 8007a50:	4602      	mov	r2, r0
 8007a52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a54:	6a21      	ldr	r1, [r4, #32]
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b0      	blx	r6
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	d106      	bne.n	8007a6e <__sflush_r+0x66>
 8007a60:	6829      	ldr	r1, [r5, #0]
 8007a62:	291d      	cmp	r1, #29
 8007a64:	d82c      	bhi.n	8007ac0 <__sflush_r+0xb8>
 8007a66:	4a2a      	ldr	r2, [pc, #168]	; (8007b10 <__sflush_r+0x108>)
 8007a68:	40ca      	lsrs	r2, r1
 8007a6a:	07d6      	lsls	r6, r2, #31
 8007a6c:	d528      	bpl.n	8007ac0 <__sflush_r+0xb8>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	6062      	str	r2, [r4, #4]
 8007a72:	04d9      	lsls	r1, r3, #19
 8007a74:	6922      	ldr	r2, [r4, #16]
 8007a76:	6022      	str	r2, [r4, #0]
 8007a78:	d504      	bpl.n	8007a84 <__sflush_r+0x7c>
 8007a7a:	1c42      	adds	r2, r0, #1
 8007a7c:	d101      	bne.n	8007a82 <__sflush_r+0x7a>
 8007a7e:	682b      	ldr	r3, [r5, #0]
 8007a80:	b903      	cbnz	r3, 8007a84 <__sflush_r+0x7c>
 8007a82:	6560      	str	r0, [r4, #84]	; 0x54
 8007a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a86:	602f      	str	r7, [r5, #0]
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	d0ca      	beq.n	8007a22 <__sflush_r+0x1a>
 8007a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a90:	4299      	cmp	r1, r3
 8007a92:	d002      	beq.n	8007a9a <__sflush_r+0x92>
 8007a94:	4628      	mov	r0, r5
 8007a96:	f7ff fb11 	bl	80070bc <_free_r>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8007a9e:	e7c1      	b.n	8007a24 <__sflush_r+0x1c>
 8007aa0:	6a21      	ldr	r1, [r4, #32]
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	47b0      	blx	r6
 8007aa8:	1c41      	adds	r1, r0, #1
 8007aaa:	d1c7      	bne.n	8007a3c <__sflush_r+0x34>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0c4      	beq.n	8007a3c <__sflush_r+0x34>
 8007ab2:	2b1d      	cmp	r3, #29
 8007ab4:	d001      	beq.n	8007aba <__sflush_r+0xb2>
 8007ab6:	2b16      	cmp	r3, #22
 8007ab8:	d101      	bne.n	8007abe <__sflush_r+0xb6>
 8007aba:	602f      	str	r7, [r5, #0]
 8007abc:	e7b1      	b.n	8007a22 <__sflush_r+0x1a>
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	e7ad      	b.n	8007a24 <__sflush_r+0x1c>
 8007ac8:	690f      	ldr	r7, [r1, #16]
 8007aca:	2f00      	cmp	r7, #0
 8007acc:	d0a9      	beq.n	8007a22 <__sflush_r+0x1a>
 8007ace:	0793      	lsls	r3, r2, #30
 8007ad0:	680e      	ldr	r6, [r1, #0]
 8007ad2:	bf08      	it	eq
 8007ad4:	694b      	ldreq	r3, [r1, #20]
 8007ad6:	600f      	str	r7, [r1, #0]
 8007ad8:	bf18      	it	ne
 8007ada:	2300      	movne	r3, #0
 8007adc:	eba6 0807 	sub.w	r8, r6, r7
 8007ae0:	608b      	str	r3, [r1, #8]
 8007ae2:	f1b8 0f00 	cmp.w	r8, #0
 8007ae6:	dd9c      	ble.n	8007a22 <__sflush_r+0x1a>
 8007ae8:	6a21      	ldr	r1, [r4, #32]
 8007aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007aec:	4643      	mov	r3, r8
 8007aee:	463a      	mov	r2, r7
 8007af0:	4628      	mov	r0, r5
 8007af2:	47b0      	blx	r6
 8007af4:	2800      	cmp	r0, #0
 8007af6:	dc06      	bgt.n	8007b06 <__sflush_r+0xfe>
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b04:	e78e      	b.n	8007a24 <__sflush_r+0x1c>
 8007b06:	4407      	add	r7, r0
 8007b08:	eba8 0800 	sub.w	r8, r8, r0
 8007b0c:	e7e9      	b.n	8007ae2 <__sflush_r+0xda>
 8007b0e:	bf00      	nop
 8007b10:	20400001 	.word	0x20400001

08007b14 <_fflush_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	690b      	ldr	r3, [r1, #16]
 8007b18:	4605      	mov	r5, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	b913      	cbnz	r3, 8007b24 <_fflush_r+0x10>
 8007b1e:	2500      	movs	r5, #0
 8007b20:	4628      	mov	r0, r5
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	b118      	cbz	r0, 8007b2e <_fflush_r+0x1a>
 8007b26:	6983      	ldr	r3, [r0, #24]
 8007b28:	b90b      	cbnz	r3, 8007b2e <_fflush_r+0x1a>
 8007b2a:	f000 f887 	bl	8007c3c <__sinit>
 8007b2e:	4b14      	ldr	r3, [pc, #80]	; (8007b80 <_fflush_r+0x6c>)
 8007b30:	429c      	cmp	r4, r3
 8007b32:	d11b      	bne.n	8007b6c <_fflush_r+0x58>
 8007b34:	686c      	ldr	r4, [r5, #4]
 8007b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0ef      	beq.n	8007b1e <_fflush_r+0xa>
 8007b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b40:	07d0      	lsls	r0, r2, #31
 8007b42:	d404      	bmi.n	8007b4e <_fflush_r+0x3a>
 8007b44:	0599      	lsls	r1, r3, #22
 8007b46:	d402      	bmi.n	8007b4e <_fflush_r+0x3a>
 8007b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b4a:	f000 f915 	bl	8007d78 <__retarget_lock_acquire_recursive>
 8007b4e:	4628      	mov	r0, r5
 8007b50:	4621      	mov	r1, r4
 8007b52:	f7ff ff59 	bl	8007a08 <__sflush_r>
 8007b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b58:	07da      	lsls	r2, r3, #31
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	d4e0      	bmi.n	8007b20 <_fflush_r+0xc>
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	059b      	lsls	r3, r3, #22
 8007b62:	d4dd      	bmi.n	8007b20 <_fflush_r+0xc>
 8007b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b66:	f000 f908 	bl	8007d7a <__retarget_lock_release_recursive>
 8007b6a:	e7d9      	b.n	8007b20 <_fflush_r+0xc>
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <_fflush_r+0x70>)
 8007b6e:	429c      	cmp	r4, r3
 8007b70:	d101      	bne.n	8007b76 <_fflush_r+0x62>
 8007b72:	68ac      	ldr	r4, [r5, #8]
 8007b74:	e7df      	b.n	8007b36 <_fflush_r+0x22>
 8007b76:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <_fflush_r+0x74>)
 8007b78:	429c      	cmp	r4, r3
 8007b7a:	bf08      	it	eq
 8007b7c:	68ec      	ldreq	r4, [r5, #12]
 8007b7e:	e7da      	b.n	8007b36 <_fflush_r+0x22>
 8007b80:	080093fc 	.word	0x080093fc
 8007b84:	0800941c 	.word	0x0800941c
 8007b88:	080093dc 	.word	0x080093dc

08007b8c <std>:
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	b510      	push	{r4, lr}
 8007b90:	4604      	mov	r4, r0
 8007b92:	e9c0 3300 	strd	r3, r3, [r0]
 8007b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b9a:	6083      	str	r3, [r0, #8]
 8007b9c:	8181      	strh	r1, [r0, #12]
 8007b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007ba0:	81c2      	strh	r2, [r0, #14]
 8007ba2:	6183      	str	r3, [r0, #24]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	305c      	adds	r0, #92	; 0x5c
 8007baa:	f7ff f8bd 	bl	8006d28 <memset>
 8007bae:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <std+0x38>)
 8007bb0:	6263      	str	r3, [r4, #36]	; 0x24
 8007bb2:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <std+0x3c>)
 8007bb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bb6:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <std+0x40>)
 8007bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bba:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <std+0x44>)
 8007bbc:	6224      	str	r4, [r4, #32]
 8007bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8007bc0:	bd10      	pop	{r4, pc}
 8007bc2:	bf00      	nop
 8007bc4:	08007ee9 	.word	0x08007ee9
 8007bc8:	08007f0b 	.word	0x08007f0b
 8007bcc:	08007f43 	.word	0x08007f43
 8007bd0:	08007f67 	.word	0x08007f67

08007bd4 <_cleanup_r>:
 8007bd4:	4901      	ldr	r1, [pc, #4]	; (8007bdc <_cleanup_r+0x8>)
 8007bd6:	f000 b8af 	b.w	8007d38 <_fwalk_reent>
 8007bda:	bf00      	nop
 8007bdc:	08007b15 	.word	0x08007b15

08007be0 <__sfmoreglue>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	2268      	movs	r2, #104	; 0x68
 8007be4:	1e4d      	subs	r5, r1, #1
 8007be6:	4355      	muls	r5, r2
 8007be8:	460e      	mov	r6, r1
 8007bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bee:	f7ff fad1 	bl	8007194 <_malloc_r>
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	b140      	cbz	r0, 8007c08 <__sfmoreglue+0x28>
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8007bfc:	300c      	adds	r0, #12
 8007bfe:	60a0      	str	r0, [r4, #8]
 8007c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c04:	f7ff f890 	bl	8006d28 <memset>
 8007c08:	4620      	mov	r0, r4
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}

08007c0c <__sfp_lock_acquire>:
 8007c0c:	4801      	ldr	r0, [pc, #4]	; (8007c14 <__sfp_lock_acquire+0x8>)
 8007c0e:	f000 b8b3 	b.w	8007d78 <__retarget_lock_acquire_recursive>
 8007c12:	bf00      	nop
 8007c14:	20000669 	.word	0x20000669

08007c18 <__sfp_lock_release>:
 8007c18:	4801      	ldr	r0, [pc, #4]	; (8007c20 <__sfp_lock_release+0x8>)
 8007c1a:	f000 b8ae 	b.w	8007d7a <__retarget_lock_release_recursive>
 8007c1e:	bf00      	nop
 8007c20:	20000669 	.word	0x20000669

08007c24 <__sinit_lock_acquire>:
 8007c24:	4801      	ldr	r0, [pc, #4]	; (8007c2c <__sinit_lock_acquire+0x8>)
 8007c26:	f000 b8a7 	b.w	8007d78 <__retarget_lock_acquire_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	2000066a 	.word	0x2000066a

08007c30 <__sinit_lock_release>:
 8007c30:	4801      	ldr	r0, [pc, #4]	; (8007c38 <__sinit_lock_release+0x8>)
 8007c32:	f000 b8a2 	b.w	8007d7a <__retarget_lock_release_recursive>
 8007c36:	bf00      	nop
 8007c38:	2000066a 	.word	0x2000066a

08007c3c <__sinit>:
 8007c3c:	b510      	push	{r4, lr}
 8007c3e:	4604      	mov	r4, r0
 8007c40:	f7ff fff0 	bl	8007c24 <__sinit_lock_acquire>
 8007c44:	69a3      	ldr	r3, [r4, #24]
 8007c46:	b11b      	cbz	r3, 8007c50 <__sinit+0x14>
 8007c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c4c:	f7ff bff0 	b.w	8007c30 <__sinit_lock_release>
 8007c50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c54:	6523      	str	r3, [r4, #80]	; 0x50
 8007c56:	4b13      	ldr	r3, [pc, #76]	; (8007ca4 <__sinit+0x68>)
 8007c58:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <__sinit+0x6c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c5e:	42a3      	cmp	r3, r4
 8007c60:	bf04      	itt	eq
 8007c62:	2301      	moveq	r3, #1
 8007c64:	61a3      	streq	r3, [r4, #24]
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 f820 	bl	8007cac <__sfp>
 8007c6c:	6060      	str	r0, [r4, #4]
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 f81c 	bl	8007cac <__sfp>
 8007c74:	60a0      	str	r0, [r4, #8]
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 f818 	bl	8007cac <__sfp>
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	60e0      	str	r0, [r4, #12]
 8007c80:	2104      	movs	r1, #4
 8007c82:	6860      	ldr	r0, [r4, #4]
 8007c84:	f7ff ff82 	bl	8007b8c <std>
 8007c88:	68a0      	ldr	r0, [r4, #8]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	2109      	movs	r1, #9
 8007c8e:	f7ff ff7d 	bl	8007b8c <std>
 8007c92:	68e0      	ldr	r0, [r4, #12]
 8007c94:	2202      	movs	r2, #2
 8007c96:	2112      	movs	r1, #18
 8007c98:	f7ff ff78 	bl	8007b8c <std>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	61a3      	str	r3, [r4, #24]
 8007ca0:	e7d2      	b.n	8007c48 <__sinit+0xc>
 8007ca2:	bf00      	nop
 8007ca4:	080091f4 	.word	0x080091f4
 8007ca8:	08007bd5 	.word	0x08007bd5

08007cac <__sfp>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	4607      	mov	r7, r0
 8007cb0:	f7ff ffac 	bl	8007c0c <__sfp_lock_acquire>
 8007cb4:	4b1e      	ldr	r3, [pc, #120]	; (8007d30 <__sfp+0x84>)
 8007cb6:	681e      	ldr	r6, [r3, #0]
 8007cb8:	69b3      	ldr	r3, [r6, #24]
 8007cba:	b913      	cbnz	r3, 8007cc2 <__sfp+0x16>
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff ffbd 	bl	8007c3c <__sinit>
 8007cc2:	3648      	adds	r6, #72	; 0x48
 8007cc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	d503      	bpl.n	8007cd4 <__sfp+0x28>
 8007ccc:	6833      	ldr	r3, [r6, #0]
 8007cce:	b30b      	cbz	r3, 8007d14 <__sfp+0x68>
 8007cd0:	6836      	ldr	r6, [r6, #0]
 8007cd2:	e7f7      	b.n	8007cc4 <__sfp+0x18>
 8007cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cd8:	b9d5      	cbnz	r5, 8007d10 <__sfp+0x64>
 8007cda:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <__sfp+0x88>)
 8007cdc:	60e3      	str	r3, [r4, #12]
 8007cde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ce2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ce4:	f000 f847 	bl	8007d76 <__retarget_lock_init_recursive>
 8007ce8:	f7ff ff96 	bl	8007c18 <__sfp_lock_release>
 8007cec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cf4:	6025      	str	r5, [r4, #0]
 8007cf6:	61a5      	str	r5, [r4, #24]
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d00:	f7ff f812 	bl	8006d28 <memset>
 8007d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d10:	3468      	adds	r4, #104	; 0x68
 8007d12:	e7d9      	b.n	8007cc8 <__sfp+0x1c>
 8007d14:	2104      	movs	r1, #4
 8007d16:	4638      	mov	r0, r7
 8007d18:	f7ff ff62 	bl	8007be0 <__sfmoreglue>
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	6030      	str	r0, [r6, #0]
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d1d5      	bne.n	8007cd0 <__sfp+0x24>
 8007d24:	f7ff ff78 	bl	8007c18 <__sfp_lock_release>
 8007d28:	230c      	movs	r3, #12
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	e7ee      	b.n	8007d0c <__sfp+0x60>
 8007d2e:	bf00      	nop
 8007d30:	080091f4 	.word	0x080091f4
 8007d34:	ffff0001 	.word	0xffff0001

08007d38 <_fwalk_reent>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	4688      	mov	r8, r1
 8007d40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d44:	2700      	movs	r7, #0
 8007d46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d4a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d4e:	d505      	bpl.n	8007d5c <_fwalk_reent+0x24>
 8007d50:	6824      	ldr	r4, [r4, #0]
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	d1f7      	bne.n	8007d46 <_fwalk_reent+0xe>
 8007d56:	4638      	mov	r0, r7
 8007d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5c:	89ab      	ldrh	r3, [r5, #12]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d907      	bls.n	8007d72 <_fwalk_reent+0x3a>
 8007d62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d66:	3301      	adds	r3, #1
 8007d68:	d003      	beq.n	8007d72 <_fwalk_reent+0x3a>
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	47c0      	blx	r8
 8007d70:	4307      	orrs	r7, r0
 8007d72:	3568      	adds	r5, #104	; 0x68
 8007d74:	e7e9      	b.n	8007d4a <_fwalk_reent+0x12>

08007d76 <__retarget_lock_init_recursive>:
 8007d76:	4770      	bx	lr

08007d78 <__retarget_lock_acquire_recursive>:
 8007d78:	4770      	bx	lr

08007d7a <__retarget_lock_release_recursive>:
 8007d7a:	4770      	bx	lr

08007d7c <__swhatbuf_r>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	460e      	mov	r6, r1
 8007d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d84:	2900      	cmp	r1, #0
 8007d86:	b096      	sub	sp, #88	; 0x58
 8007d88:	4614      	mov	r4, r2
 8007d8a:	461d      	mov	r5, r3
 8007d8c:	da08      	bge.n	8007da0 <__swhatbuf_r+0x24>
 8007d8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	602a      	str	r2, [r5, #0]
 8007d96:	061a      	lsls	r2, r3, #24
 8007d98:	d410      	bmi.n	8007dbc <__swhatbuf_r+0x40>
 8007d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d9e:	e00e      	b.n	8007dbe <__swhatbuf_r+0x42>
 8007da0:	466a      	mov	r2, sp
 8007da2:	f000 f907 	bl	8007fb4 <_fstat_r>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	dbf1      	blt.n	8007d8e <__swhatbuf_r+0x12>
 8007daa:	9a01      	ldr	r2, [sp, #4]
 8007dac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007db0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007db4:	425a      	negs	r2, r3
 8007db6:	415a      	adcs	r2, r3
 8007db8:	602a      	str	r2, [r5, #0]
 8007dba:	e7ee      	b.n	8007d9a <__swhatbuf_r+0x1e>
 8007dbc:	2340      	movs	r3, #64	; 0x40
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	b016      	add	sp, #88	; 0x58
 8007dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007dc8 <__smakebuf_r>:
 8007dc8:	898b      	ldrh	r3, [r1, #12]
 8007dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dcc:	079d      	lsls	r5, r3, #30
 8007dce:	4606      	mov	r6, r0
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	d507      	bpl.n	8007de4 <__smakebuf_r+0x1c>
 8007dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	6123      	str	r3, [r4, #16]
 8007ddc:	2301      	movs	r3, #1
 8007dde:	6163      	str	r3, [r4, #20]
 8007de0:	b002      	add	sp, #8
 8007de2:	bd70      	pop	{r4, r5, r6, pc}
 8007de4:	ab01      	add	r3, sp, #4
 8007de6:	466a      	mov	r2, sp
 8007de8:	f7ff ffc8 	bl	8007d7c <__swhatbuf_r>
 8007dec:	9900      	ldr	r1, [sp, #0]
 8007dee:	4605      	mov	r5, r0
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff f9cf 	bl	8007194 <_malloc_r>
 8007df6:	b948      	cbnz	r0, 8007e0c <__smakebuf_r+0x44>
 8007df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfc:	059a      	lsls	r2, r3, #22
 8007dfe:	d4ef      	bmi.n	8007de0 <__smakebuf_r+0x18>
 8007e00:	f023 0303 	bic.w	r3, r3, #3
 8007e04:	f043 0302 	orr.w	r3, r3, #2
 8007e08:	81a3      	strh	r3, [r4, #12]
 8007e0a:	e7e3      	b.n	8007dd4 <__smakebuf_r+0xc>
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <__smakebuf_r+0x7c>)
 8007e0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	6020      	str	r0, [r4, #0]
 8007e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e18:	81a3      	strh	r3, [r4, #12]
 8007e1a:	9b00      	ldr	r3, [sp, #0]
 8007e1c:	6163      	str	r3, [r4, #20]
 8007e1e:	9b01      	ldr	r3, [sp, #4]
 8007e20:	6120      	str	r0, [r4, #16]
 8007e22:	b15b      	cbz	r3, 8007e3c <__smakebuf_r+0x74>
 8007e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f000 f8d5 	bl	8007fd8 <_isatty_r>
 8007e2e:	b128      	cbz	r0, 8007e3c <__smakebuf_r+0x74>
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	81a3      	strh	r3, [r4, #12]
 8007e3c:	89a0      	ldrh	r0, [r4, #12]
 8007e3e:	4305      	orrs	r5, r0
 8007e40:	81a5      	strh	r5, [r4, #12]
 8007e42:	e7cd      	b.n	8007de0 <__smakebuf_r+0x18>
 8007e44:	08007bd5 	.word	0x08007bd5

08007e48 <__malloc_lock>:
 8007e48:	4801      	ldr	r0, [pc, #4]	; (8007e50 <__malloc_lock+0x8>)
 8007e4a:	f7ff bf95 	b.w	8007d78 <__retarget_lock_acquire_recursive>
 8007e4e:	bf00      	nop
 8007e50:	20000668 	.word	0x20000668

08007e54 <__malloc_unlock>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__malloc_unlock+0x8>)
 8007e56:	f7ff bf90 	b.w	8007d7a <__retarget_lock_release_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	20000668 	.word	0x20000668

08007e60 <_raise_r>:
 8007e60:	291f      	cmp	r1, #31
 8007e62:	b538      	push	{r3, r4, r5, lr}
 8007e64:	4604      	mov	r4, r0
 8007e66:	460d      	mov	r5, r1
 8007e68:	d904      	bls.n	8007e74 <_raise_r+0x14>
 8007e6a:	2316      	movs	r3, #22
 8007e6c:	6003      	str	r3, [r0, #0]
 8007e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e76:	b112      	cbz	r2, 8007e7e <_raise_r+0x1e>
 8007e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e7c:	b94b      	cbnz	r3, 8007e92 <_raise_r+0x32>
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f000 f830 	bl	8007ee4 <_getpid_r>
 8007e84:	462a      	mov	r2, r5
 8007e86:	4601      	mov	r1, r0
 8007e88:	4620      	mov	r0, r4
 8007e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e8e:	f000 b817 	b.w	8007ec0 <_kill_r>
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d00a      	beq.n	8007eac <_raise_r+0x4c>
 8007e96:	1c59      	adds	r1, r3, #1
 8007e98:	d103      	bne.n	8007ea2 <_raise_r+0x42>
 8007e9a:	2316      	movs	r3, #22
 8007e9c:	6003      	str	r3, [r0, #0]
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	e7e7      	b.n	8007e72 <_raise_r+0x12>
 8007ea2:	2400      	movs	r4, #0
 8007ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	4798      	blx	r3
 8007eac:	2000      	movs	r0, #0
 8007eae:	e7e0      	b.n	8007e72 <_raise_r+0x12>

08007eb0 <raise>:
 8007eb0:	4b02      	ldr	r3, [pc, #8]	; (8007ebc <raise+0xc>)
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	6818      	ldr	r0, [r3, #0]
 8007eb6:	f7ff bfd3 	b.w	8007e60 <_raise_r>
 8007eba:	bf00      	nop
 8007ebc:	20000010 	.word	0x20000010

08007ec0 <_kill_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d07      	ldr	r5, [pc, #28]	; (8007ee0 <_kill_r+0x20>)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	4611      	mov	r1, r2
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	f7fb f9f1 	bl	80032b4 <_kill>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d102      	bne.n	8007edc <_kill_r+0x1c>
 8007ed6:	682b      	ldr	r3, [r5, #0]
 8007ed8:	b103      	cbz	r3, 8007edc <_kill_r+0x1c>
 8007eda:	6023      	str	r3, [r4, #0]
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
 8007ede:	bf00      	nop
 8007ee0:	2000066c 	.word	0x2000066c

08007ee4 <_getpid_r>:
 8007ee4:	f7fb b9de 	b.w	80032a4 <_getpid>

08007ee8 <__sread>:
 8007ee8:	b510      	push	{r4, lr}
 8007eea:	460c      	mov	r4, r1
 8007eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef0:	f000 f894 	bl	800801c <_read_r>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	bfab      	itete	ge
 8007ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007efa:	89a3      	ldrhlt	r3, [r4, #12]
 8007efc:	181b      	addge	r3, r3, r0
 8007efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f02:	bfac      	ite	ge
 8007f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f06:	81a3      	strhlt	r3, [r4, #12]
 8007f08:	bd10      	pop	{r4, pc}

08007f0a <__swrite>:
 8007f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0e:	461f      	mov	r7, r3
 8007f10:	898b      	ldrh	r3, [r1, #12]
 8007f12:	05db      	lsls	r3, r3, #23
 8007f14:	4605      	mov	r5, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	4616      	mov	r6, r2
 8007f1a:	d505      	bpl.n	8007f28 <__swrite+0x1e>
 8007f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f20:	2302      	movs	r3, #2
 8007f22:	2200      	movs	r2, #0
 8007f24:	f000 f868 	bl	8007ff8 <_lseek_r>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f32:	81a3      	strh	r3, [r4, #12]
 8007f34:	4632      	mov	r2, r6
 8007f36:	463b      	mov	r3, r7
 8007f38:	4628      	mov	r0, r5
 8007f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3e:	f000 b817 	b.w	8007f70 <_write_r>

08007f42 <__sseek>:
 8007f42:	b510      	push	{r4, lr}
 8007f44:	460c      	mov	r4, r1
 8007f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4a:	f000 f855 	bl	8007ff8 <_lseek_r>
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	bf15      	itete	ne
 8007f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f5e:	81a3      	strheq	r3, [r4, #12]
 8007f60:	bf18      	it	ne
 8007f62:	81a3      	strhne	r3, [r4, #12]
 8007f64:	bd10      	pop	{r4, pc}

08007f66 <__sclose>:
 8007f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6a:	f000 b813 	b.w	8007f94 <_close_r>
	...

08007f70 <_write_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	4d07      	ldr	r5, [pc, #28]	; (8007f90 <_write_r+0x20>)
 8007f74:	4604      	mov	r4, r0
 8007f76:	4608      	mov	r0, r1
 8007f78:	4611      	mov	r1, r2
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	602a      	str	r2, [r5, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f7fb f9cf 	bl	8003322 <_write>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d102      	bne.n	8007f8e <_write_r+0x1e>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	b103      	cbz	r3, 8007f8e <_write_r+0x1e>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	2000066c 	.word	0x2000066c

08007f94 <_close_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4d06      	ldr	r5, [pc, #24]	; (8007fb0 <_close_r+0x1c>)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	4608      	mov	r0, r1
 8007f9e:	602b      	str	r3, [r5, #0]
 8007fa0:	f7fb f9db 	bl	800335a <_close>
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	d102      	bne.n	8007fae <_close_r+0x1a>
 8007fa8:	682b      	ldr	r3, [r5, #0]
 8007faa:	b103      	cbz	r3, 8007fae <_close_r+0x1a>
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	bd38      	pop	{r3, r4, r5, pc}
 8007fb0:	2000066c 	.word	0x2000066c

08007fb4 <_fstat_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d07      	ldr	r5, [pc, #28]	; (8007fd4 <_fstat_r+0x20>)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4604      	mov	r4, r0
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	602b      	str	r3, [r5, #0]
 8007fc2:	f7fb f9d6 	bl	8003372 <_fstat>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	d102      	bne.n	8007fd0 <_fstat_r+0x1c>
 8007fca:	682b      	ldr	r3, [r5, #0]
 8007fcc:	b103      	cbz	r3, 8007fd0 <_fstat_r+0x1c>
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	bd38      	pop	{r3, r4, r5, pc}
 8007fd2:	bf00      	nop
 8007fd4:	2000066c 	.word	0x2000066c

08007fd8 <_isatty_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d06      	ldr	r5, [pc, #24]	; (8007ff4 <_isatty_r+0x1c>)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	602b      	str	r3, [r5, #0]
 8007fe4:	f7fb f9d5 	bl	8003392 <_isatty>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d102      	bne.n	8007ff2 <_isatty_r+0x1a>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	b103      	cbz	r3, 8007ff2 <_isatty_r+0x1a>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	2000066c 	.word	0x2000066c

08007ff8 <_lseek_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4d07      	ldr	r5, [pc, #28]	; (8008018 <_lseek_r+0x20>)
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	4608      	mov	r0, r1
 8008000:	4611      	mov	r1, r2
 8008002:	2200      	movs	r2, #0
 8008004:	602a      	str	r2, [r5, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	f7fb f9ce 	bl	80033a8 <_lseek>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_lseek_r+0x1e>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_lseek_r+0x1e>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	2000066c 	.word	0x2000066c

0800801c <_read_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4d07      	ldr	r5, [pc, #28]	; (800803c <_read_r+0x20>)
 8008020:	4604      	mov	r4, r0
 8008022:	4608      	mov	r0, r1
 8008024:	4611      	mov	r1, r2
 8008026:	2200      	movs	r2, #0
 8008028:	602a      	str	r2, [r5, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	f7fb f95c 	bl	80032e8 <_read>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_read_r+0x1e>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b103      	cbz	r3, 800803a <_read_r+0x1e>
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	2000066c 	.word	0x2000066c

08008040 <cos>:
 8008040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008042:	ec53 2b10 	vmov	r2, r3, d0
 8008046:	4826      	ldr	r0, [pc, #152]	; (80080e0 <cos+0xa0>)
 8008048:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800804c:	4281      	cmp	r1, r0
 800804e:	dc06      	bgt.n	800805e <cos+0x1e>
 8008050:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80080d8 <cos+0x98>
 8008054:	b005      	add	sp, #20
 8008056:	f85d eb04 	ldr.w	lr, [sp], #4
 800805a:	f000 baa9 	b.w	80085b0 <__kernel_cos>
 800805e:	4821      	ldr	r0, [pc, #132]	; (80080e4 <cos+0xa4>)
 8008060:	4281      	cmp	r1, r0
 8008062:	dd09      	ble.n	8008078 <cos+0x38>
 8008064:	ee10 0a10 	vmov	r0, s0
 8008068:	4619      	mov	r1, r3
 800806a:	f7f8 f91d 	bl	80002a8 <__aeabi_dsub>
 800806e:	ec41 0b10 	vmov	d0, r0, r1
 8008072:	b005      	add	sp, #20
 8008074:	f85d fb04 	ldr.w	pc, [sp], #4
 8008078:	4668      	mov	r0, sp
 800807a:	f000 f88d 	bl	8008198 <__ieee754_rem_pio2>
 800807e:	f000 0003 	and.w	r0, r0, #3
 8008082:	2801      	cmp	r0, #1
 8008084:	d00b      	beq.n	800809e <cos+0x5e>
 8008086:	2802      	cmp	r0, #2
 8008088:	d016      	beq.n	80080b8 <cos+0x78>
 800808a:	b9e0      	cbnz	r0, 80080c6 <cos+0x86>
 800808c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008090:	ed9d 0b00 	vldr	d0, [sp]
 8008094:	f000 fa8c 	bl	80085b0 <__kernel_cos>
 8008098:	ec51 0b10 	vmov	r0, r1, d0
 800809c:	e7e7      	b.n	800806e <cos+0x2e>
 800809e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80080a2:	ed9d 0b00 	vldr	d0, [sp]
 80080a6:	f000 fe9b 	bl	8008de0 <__kernel_sin>
 80080aa:	ec53 2b10 	vmov	r2, r3, d0
 80080ae:	ee10 0a10 	vmov	r0, s0
 80080b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80080b6:	e7da      	b.n	800806e <cos+0x2e>
 80080b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80080bc:	ed9d 0b00 	vldr	d0, [sp]
 80080c0:	f000 fa76 	bl	80085b0 <__kernel_cos>
 80080c4:	e7f1      	b.n	80080aa <cos+0x6a>
 80080c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80080ca:	ed9d 0b00 	vldr	d0, [sp]
 80080ce:	2001      	movs	r0, #1
 80080d0:	f000 fe86 	bl	8008de0 <__kernel_sin>
 80080d4:	e7e0      	b.n	8008098 <cos+0x58>
 80080d6:	bf00      	nop
	...
 80080e0:	3fe921fb 	.word	0x3fe921fb
 80080e4:	7fefffff 	.word	0x7fefffff

080080e8 <sin>:
 80080e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080ea:	ec53 2b10 	vmov	r2, r3, d0
 80080ee:	4828      	ldr	r0, [pc, #160]	; (8008190 <sin+0xa8>)
 80080f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80080f4:	4281      	cmp	r1, r0
 80080f6:	dc07      	bgt.n	8008108 <sin+0x20>
 80080f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008188 <sin+0xa0>
 80080fc:	2000      	movs	r0, #0
 80080fe:	b005      	add	sp, #20
 8008100:	f85d eb04 	ldr.w	lr, [sp], #4
 8008104:	f000 be6c 	b.w	8008de0 <__kernel_sin>
 8008108:	4822      	ldr	r0, [pc, #136]	; (8008194 <sin+0xac>)
 800810a:	4281      	cmp	r1, r0
 800810c:	dd09      	ble.n	8008122 <sin+0x3a>
 800810e:	ee10 0a10 	vmov	r0, s0
 8008112:	4619      	mov	r1, r3
 8008114:	f7f8 f8c8 	bl	80002a8 <__aeabi_dsub>
 8008118:	ec41 0b10 	vmov	d0, r0, r1
 800811c:	b005      	add	sp, #20
 800811e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008122:	4668      	mov	r0, sp
 8008124:	f000 f838 	bl	8008198 <__ieee754_rem_pio2>
 8008128:	f000 0003 	and.w	r0, r0, #3
 800812c:	2801      	cmp	r0, #1
 800812e:	d00c      	beq.n	800814a <sin+0x62>
 8008130:	2802      	cmp	r0, #2
 8008132:	d011      	beq.n	8008158 <sin+0x70>
 8008134:	b9f0      	cbnz	r0, 8008174 <sin+0x8c>
 8008136:	ed9d 1b02 	vldr	d1, [sp, #8]
 800813a:	ed9d 0b00 	vldr	d0, [sp]
 800813e:	2001      	movs	r0, #1
 8008140:	f000 fe4e 	bl	8008de0 <__kernel_sin>
 8008144:	ec51 0b10 	vmov	r0, r1, d0
 8008148:	e7e6      	b.n	8008118 <sin+0x30>
 800814a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800814e:	ed9d 0b00 	vldr	d0, [sp]
 8008152:	f000 fa2d 	bl	80085b0 <__kernel_cos>
 8008156:	e7f5      	b.n	8008144 <sin+0x5c>
 8008158:	ed9d 1b02 	vldr	d1, [sp, #8]
 800815c:	ed9d 0b00 	vldr	d0, [sp]
 8008160:	2001      	movs	r0, #1
 8008162:	f000 fe3d 	bl	8008de0 <__kernel_sin>
 8008166:	ec53 2b10 	vmov	r2, r3, d0
 800816a:	ee10 0a10 	vmov	r0, s0
 800816e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008172:	e7d1      	b.n	8008118 <sin+0x30>
 8008174:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008178:	ed9d 0b00 	vldr	d0, [sp]
 800817c:	f000 fa18 	bl	80085b0 <__kernel_cos>
 8008180:	e7f1      	b.n	8008166 <sin+0x7e>
 8008182:	bf00      	nop
 8008184:	f3af 8000 	nop.w
	...
 8008190:	3fe921fb 	.word	0x3fe921fb
 8008194:	7fefffff 	.word	0x7fefffff

08008198 <__ieee754_rem_pio2>:
 8008198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	ed2d 8b02 	vpush	{d8}
 80081a0:	ec55 4b10 	vmov	r4, r5, d0
 80081a4:	4bca      	ldr	r3, [pc, #808]	; (80084d0 <__ieee754_rem_pio2+0x338>)
 80081a6:	b08b      	sub	sp, #44	; 0x2c
 80081a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80081ac:	4598      	cmp	r8, r3
 80081ae:	4682      	mov	sl, r0
 80081b0:	9502      	str	r5, [sp, #8]
 80081b2:	dc08      	bgt.n	80081c6 <__ieee754_rem_pio2+0x2e>
 80081b4:	2200      	movs	r2, #0
 80081b6:	2300      	movs	r3, #0
 80081b8:	ed80 0b00 	vstr	d0, [r0]
 80081bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80081c0:	f04f 0b00 	mov.w	fp, #0
 80081c4:	e028      	b.n	8008218 <__ieee754_rem_pio2+0x80>
 80081c6:	4bc3      	ldr	r3, [pc, #780]	; (80084d4 <__ieee754_rem_pio2+0x33c>)
 80081c8:	4598      	cmp	r8, r3
 80081ca:	dc78      	bgt.n	80082be <__ieee754_rem_pio2+0x126>
 80081cc:	9b02      	ldr	r3, [sp, #8]
 80081ce:	4ec2      	ldr	r6, [pc, #776]	; (80084d8 <__ieee754_rem_pio2+0x340>)
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	ee10 0a10 	vmov	r0, s0
 80081d6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008498 <__ieee754_rem_pio2+0x300>)
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	4629      	mov	r1, r5
 80081de:	dd39      	ble.n	8008254 <__ieee754_rem_pio2+0xbc>
 80081e0:	f7f8 f862 	bl	80002a8 <__aeabi_dsub>
 80081e4:	45b0      	cmp	r8, r6
 80081e6:	4604      	mov	r4, r0
 80081e8:	460d      	mov	r5, r1
 80081ea:	d01b      	beq.n	8008224 <__ieee754_rem_pio2+0x8c>
 80081ec:	a3ac      	add	r3, pc, #688	; (adr r3, 80084a0 <__ieee754_rem_pio2+0x308>)
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f7f8 f859 	bl	80002a8 <__aeabi_dsub>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	e9ca 2300 	strd	r2, r3, [sl]
 80081fe:	4620      	mov	r0, r4
 8008200:	4629      	mov	r1, r5
 8008202:	f7f8 f851 	bl	80002a8 <__aeabi_dsub>
 8008206:	a3a6      	add	r3, pc, #664	; (adr r3, 80084a0 <__ieee754_rem_pio2+0x308>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 f84c 	bl	80002a8 <__aeabi_dsub>
 8008210:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008214:	f04f 0b01 	mov.w	fp, #1
 8008218:	4658      	mov	r0, fp
 800821a:	b00b      	add	sp, #44	; 0x2c
 800821c:	ecbd 8b02 	vpop	{d8}
 8008220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008224:	a3a0      	add	r3, pc, #640	; (adr r3, 80084a8 <__ieee754_rem_pio2+0x310>)
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	f7f8 f83d 	bl	80002a8 <__aeabi_dsub>
 800822e:	a3a0      	add	r3, pc, #640	; (adr r3, 80084b0 <__ieee754_rem_pio2+0x318>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	4604      	mov	r4, r0
 8008236:	460d      	mov	r5, r1
 8008238:	f7f8 f836 	bl	80002a8 <__aeabi_dsub>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	e9ca 2300 	strd	r2, r3, [sl]
 8008244:	4620      	mov	r0, r4
 8008246:	4629      	mov	r1, r5
 8008248:	f7f8 f82e 	bl	80002a8 <__aeabi_dsub>
 800824c:	a398      	add	r3, pc, #608	; (adr r3, 80084b0 <__ieee754_rem_pio2+0x318>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	e7db      	b.n	800820c <__ieee754_rem_pio2+0x74>
 8008254:	f7f8 f82a 	bl	80002ac <__adddf3>
 8008258:	45b0      	cmp	r8, r6
 800825a:	4604      	mov	r4, r0
 800825c:	460d      	mov	r5, r1
 800825e:	d016      	beq.n	800828e <__ieee754_rem_pio2+0xf6>
 8008260:	a38f      	add	r3, pc, #572	; (adr r3, 80084a0 <__ieee754_rem_pio2+0x308>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f8 f821 	bl	80002ac <__adddf3>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	e9ca 2300 	strd	r2, r3, [sl]
 8008272:	4620      	mov	r0, r4
 8008274:	4629      	mov	r1, r5
 8008276:	f7f8 f817 	bl	80002a8 <__aeabi_dsub>
 800827a:	a389      	add	r3, pc, #548	; (adr r3, 80084a0 <__ieee754_rem_pio2+0x308>)
 800827c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008280:	f7f8 f814 	bl	80002ac <__adddf3>
 8008284:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008288:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800828c:	e7c4      	b.n	8008218 <__ieee754_rem_pio2+0x80>
 800828e:	a386      	add	r3, pc, #536	; (adr r3, 80084a8 <__ieee754_rem_pio2+0x310>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	f7f8 f80a 	bl	80002ac <__adddf3>
 8008298:	a385      	add	r3, pc, #532	; (adr r3, 80084b0 <__ieee754_rem_pio2+0x318>)
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	4604      	mov	r4, r0
 80082a0:	460d      	mov	r5, r1
 80082a2:	f7f8 f803 	bl	80002ac <__adddf3>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	e9ca 2300 	strd	r2, r3, [sl]
 80082ae:	4620      	mov	r0, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	f7f7 fff9 	bl	80002a8 <__aeabi_dsub>
 80082b6:	a37e      	add	r3, pc, #504	; (adr r3, 80084b0 <__ieee754_rem_pio2+0x318>)
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	e7e0      	b.n	8008280 <__ieee754_rem_pio2+0xe8>
 80082be:	4b87      	ldr	r3, [pc, #540]	; (80084dc <__ieee754_rem_pio2+0x344>)
 80082c0:	4598      	cmp	r8, r3
 80082c2:	f300 80d9 	bgt.w	8008478 <__ieee754_rem_pio2+0x2e0>
 80082c6:	f000 fe49 	bl	8008f5c <fabs>
 80082ca:	ec55 4b10 	vmov	r4, r5, d0
 80082ce:	ee10 0a10 	vmov	r0, s0
 80082d2:	a379      	add	r3, pc, #484	; (adr r3, 80084b8 <__ieee754_rem_pio2+0x320>)
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	4629      	mov	r1, r5
 80082da:	f7f8 f99d 	bl	8000618 <__aeabi_dmul>
 80082de:	4b80      	ldr	r3, [pc, #512]	; (80084e0 <__ieee754_rem_pio2+0x348>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	f7f7 ffe3 	bl	80002ac <__adddf3>
 80082e6:	f7f8 fc31 	bl	8000b4c <__aeabi_d2iz>
 80082ea:	4683      	mov	fp, r0
 80082ec:	f7f8 f92a 	bl	8000544 <__aeabi_i2d>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	ec43 2b18 	vmov	d8, r2, r3
 80082f8:	a367      	add	r3, pc, #412	; (adr r3, 8008498 <__ieee754_rem_pio2+0x300>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f8 f98b 	bl	8000618 <__aeabi_dmul>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4620      	mov	r0, r4
 8008308:	4629      	mov	r1, r5
 800830a:	f7f7 ffcd 	bl	80002a8 <__aeabi_dsub>
 800830e:	a364      	add	r3, pc, #400	; (adr r3, 80084a0 <__ieee754_rem_pio2+0x308>)
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	4606      	mov	r6, r0
 8008316:	460f      	mov	r7, r1
 8008318:	ec51 0b18 	vmov	r0, r1, d8
 800831c:	f7f8 f97c 	bl	8000618 <__aeabi_dmul>
 8008320:	f1bb 0f1f 	cmp.w	fp, #31
 8008324:	4604      	mov	r4, r0
 8008326:	460d      	mov	r5, r1
 8008328:	dc0d      	bgt.n	8008346 <__ieee754_rem_pio2+0x1ae>
 800832a:	4b6e      	ldr	r3, [pc, #440]	; (80084e4 <__ieee754_rem_pio2+0x34c>)
 800832c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008334:	4543      	cmp	r3, r8
 8008336:	d006      	beq.n	8008346 <__ieee754_rem_pio2+0x1ae>
 8008338:	4622      	mov	r2, r4
 800833a:	462b      	mov	r3, r5
 800833c:	4630      	mov	r0, r6
 800833e:	4639      	mov	r1, r7
 8008340:	f7f7 ffb2 	bl	80002a8 <__aeabi_dsub>
 8008344:	e00f      	b.n	8008366 <__ieee754_rem_pio2+0x1ce>
 8008346:	462b      	mov	r3, r5
 8008348:	4622      	mov	r2, r4
 800834a:	4630      	mov	r0, r6
 800834c:	4639      	mov	r1, r7
 800834e:	f7f7 ffab 	bl	80002a8 <__aeabi_dsub>
 8008352:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008356:	9303      	str	r3, [sp, #12]
 8008358:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800835c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008360:	f1b8 0f10 	cmp.w	r8, #16
 8008364:	dc02      	bgt.n	800836c <__ieee754_rem_pio2+0x1d4>
 8008366:	e9ca 0100 	strd	r0, r1, [sl]
 800836a:	e039      	b.n	80083e0 <__ieee754_rem_pio2+0x248>
 800836c:	a34e      	add	r3, pc, #312	; (adr r3, 80084a8 <__ieee754_rem_pio2+0x310>)
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	ec51 0b18 	vmov	r0, r1, d8
 8008376:	f7f8 f94f 	bl	8000618 <__aeabi_dmul>
 800837a:	4604      	mov	r4, r0
 800837c:	460d      	mov	r5, r1
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4630      	mov	r0, r6
 8008384:	4639      	mov	r1, r7
 8008386:	f7f7 ff8f 	bl	80002a8 <__aeabi_dsub>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	4680      	mov	r8, r0
 8008390:	4689      	mov	r9, r1
 8008392:	4630      	mov	r0, r6
 8008394:	4639      	mov	r1, r7
 8008396:	f7f7 ff87 	bl	80002a8 <__aeabi_dsub>
 800839a:	4622      	mov	r2, r4
 800839c:	462b      	mov	r3, r5
 800839e:	f7f7 ff83 	bl	80002a8 <__aeabi_dsub>
 80083a2:	a343      	add	r3, pc, #268	; (adr r3, 80084b0 <__ieee754_rem_pio2+0x318>)
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	4604      	mov	r4, r0
 80083aa:	460d      	mov	r5, r1
 80083ac:	ec51 0b18 	vmov	r0, r1, d8
 80083b0:	f7f8 f932 	bl	8000618 <__aeabi_dmul>
 80083b4:	4622      	mov	r2, r4
 80083b6:	462b      	mov	r3, r5
 80083b8:	f7f7 ff76 	bl	80002a8 <__aeabi_dsub>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4604      	mov	r4, r0
 80083c2:	460d      	mov	r5, r1
 80083c4:	4640      	mov	r0, r8
 80083c6:	4649      	mov	r1, r9
 80083c8:	f7f7 ff6e 	bl	80002a8 <__aeabi_dsub>
 80083cc:	9a03      	ldr	r2, [sp, #12]
 80083ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b31      	cmp	r3, #49	; 0x31
 80083d6:	dc24      	bgt.n	8008422 <__ieee754_rem_pio2+0x28a>
 80083d8:	e9ca 0100 	strd	r0, r1, [sl]
 80083dc:	4646      	mov	r6, r8
 80083de:	464f      	mov	r7, r9
 80083e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80083e4:	4630      	mov	r0, r6
 80083e6:	4642      	mov	r2, r8
 80083e8:	464b      	mov	r3, r9
 80083ea:	4639      	mov	r1, r7
 80083ec:	f7f7 ff5c 	bl	80002a8 <__aeabi_dsub>
 80083f0:	462b      	mov	r3, r5
 80083f2:	4622      	mov	r2, r4
 80083f4:	f7f7 ff58 	bl	80002a8 <__aeabi_dsub>
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008400:	f6bf af0a 	bge.w	8008218 <__ieee754_rem_pio2+0x80>
 8008404:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008408:	f8ca 3004 	str.w	r3, [sl, #4]
 800840c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008410:	f8ca 8000 	str.w	r8, [sl]
 8008414:	f8ca 0008 	str.w	r0, [sl, #8]
 8008418:	f8ca 300c 	str.w	r3, [sl, #12]
 800841c:	f1cb 0b00 	rsb	fp, fp, #0
 8008420:	e6fa      	b.n	8008218 <__ieee754_rem_pio2+0x80>
 8008422:	a327      	add	r3, pc, #156	; (adr r3, 80084c0 <__ieee754_rem_pio2+0x328>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	ec51 0b18 	vmov	r0, r1, d8
 800842c:	f7f8 f8f4 	bl	8000618 <__aeabi_dmul>
 8008430:	4604      	mov	r4, r0
 8008432:	460d      	mov	r5, r1
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4640      	mov	r0, r8
 800843a:	4649      	mov	r1, r9
 800843c:	f7f7 ff34 	bl	80002a8 <__aeabi_dsub>
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	4606      	mov	r6, r0
 8008446:	460f      	mov	r7, r1
 8008448:	4640      	mov	r0, r8
 800844a:	4649      	mov	r1, r9
 800844c:	f7f7 ff2c 	bl	80002a8 <__aeabi_dsub>
 8008450:	4622      	mov	r2, r4
 8008452:	462b      	mov	r3, r5
 8008454:	f7f7 ff28 	bl	80002a8 <__aeabi_dsub>
 8008458:	a31b      	add	r3, pc, #108	; (adr r3, 80084c8 <__ieee754_rem_pio2+0x330>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	4604      	mov	r4, r0
 8008460:	460d      	mov	r5, r1
 8008462:	ec51 0b18 	vmov	r0, r1, d8
 8008466:	f7f8 f8d7 	bl	8000618 <__aeabi_dmul>
 800846a:	4622      	mov	r2, r4
 800846c:	462b      	mov	r3, r5
 800846e:	f7f7 ff1b 	bl	80002a8 <__aeabi_dsub>
 8008472:	4604      	mov	r4, r0
 8008474:	460d      	mov	r5, r1
 8008476:	e75f      	b.n	8008338 <__ieee754_rem_pio2+0x1a0>
 8008478:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <__ieee754_rem_pio2+0x350>)
 800847a:	4598      	cmp	r8, r3
 800847c:	dd36      	ble.n	80084ec <__ieee754_rem_pio2+0x354>
 800847e:	ee10 2a10 	vmov	r2, s0
 8008482:	462b      	mov	r3, r5
 8008484:	4620      	mov	r0, r4
 8008486:	4629      	mov	r1, r5
 8008488:	f7f7 ff0e 	bl	80002a8 <__aeabi_dsub>
 800848c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008490:	e9ca 0100 	strd	r0, r1, [sl]
 8008494:	e694      	b.n	80081c0 <__ieee754_rem_pio2+0x28>
 8008496:	bf00      	nop
 8008498:	54400000 	.word	0x54400000
 800849c:	3ff921fb 	.word	0x3ff921fb
 80084a0:	1a626331 	.word	0x1a626331
 80084a4:	3dd0b461 	.word	0x3dd0b461
 80084a8:	1a600000 	.word	0x1a600000
 80084ac:	3dd0b461 	.word	0x3dd0b461
 80084b0:	2e037073 	.word	0x2e037073
 80084b4:	3ba3198a 	.word	0x3ba3198a
 80084b8:	6dc9c883 	.word	0x6dc9c883
 80084bc:	3fe45f30 	.word	0x3fe45f30
 80084c0:	2e000000 	.word	0x2e000000
 80084c4:	3ba3198a 	.word	0x3ba3198a
 80084c8:	252049c1 	.word	0x252049c1
 80084cc:	397b839a 	.word	0x397b839a
 80084d0:	3fe921fb 	.word	0x3fe921fb
 80084d4:	4002d97b 	.word	0x4002d97b
 80084d8:	3ff921fb 	.word	0x3ff921fb
 80084dc:	413921fb 	.word	0x413921fb
 80084e0:	3fe00000 	.word	0x3fe00000
 80084e4:	0800943c 	.word	0x0800943c
 80084e8:	7fefffff 	.word	0x7fefffff
 80084ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 80084f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80084f4:	ee10 0a10 	vmov	r0, s0
 80084f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80084fc:	ee10 6a10 	vmov	r6, s0
 8008500:	460f      	mov	r7, r1
 8008502:	f7f8 fb23 	bl	8000b4c <__aeabi_d2iz>
 8008506:	f7f8 f81d 	bl	8000544 <__aeabi_i2d>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4630      	mov	r0, r6
 8008510:	4639      	mov	r1, r7
 8008512:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008516:	f7f7 fec7 	bl	80002a8 <__aeabi_dsub>
 800851a:	4b23      	ldr	r3, [pc, #140]	; (80085a8 <__ieee754_rem_pio2+0x410>)
 800851c:	2200      	movs	r2, #0
 800851e:	f7f8 f87b 	bl	8000618 <__aeabi_dmul>
 8008522:	460f      	mov	r7, r1
 8008524:	4606      	mov	r6, r0
 8008526:	f7f8 fb11 	bl	8000b4c <__aeabi_d2iz>
 800852a:	f7f8 f80b 	bl	8000544 <__aeabi_i2d>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	4630      	mov	r0, r6
 8008534:	4639      	mov	r1, r7
 8008536:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800853a:	f7f7 feb5 	bl	80002a8 <__aeabi_dsub>
 800853e:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <__ieee754_rem_pio2+0x410>)
 8008540:	2200      	movs	r2, #0
 8008542:	f7f8 f869 	bl	8000618 <__aeabi_dmul>
 8008546:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800854a:	ad04      	add	r5, sp, #16
 800854c:	f04f 0803 	mov.w	r8, #3
 8008550:	46a9      	mov	r9, r5
 8008552:	2600      	movs	r6, #0
 8008554:	2700      	movs	r7, #0
 8008556:	4632      	mov	r2, r6
 8008558:	463b      	mov	r3, r7
 800855a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800855e:	46c3      	mov	fp, r8
 8008560:	3d08      	subs	r5, #8
 8008562:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008566:	f7f8 fabf 	bl	8000ae8 <__aeabi_dcmpeq>
 800856a:	2800      	cmp	r0, #0
 800856c:	d1f3      	bne.n	8008556 <__ieee754_rem_pio2+0x3be>
 800856e:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <__ieee754_rem_pio2+0x414>)
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	2302      	movs	r3, #2
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	4622      	mov	r2, r4
 8008578:	465b      	mov	r3, fp
 800857a:	4651      	mov	r1, sl
 800857c:	4648      	mov	r0, r9
 800857e:	f000 f8df 	bl	8008740 <__kernel_rem_pio2>
 8008582:	9b02      	ldr	r3, [sp, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	4683      	mov	fp, r0
 8008588:	f6bf ae46 	bge.w	8008218 <__ieee754_rem_pio2+0x80>
 800858c:	e9da 2100 	ldrd	r2, r1, [sl]
 8008590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008594:	e9ca 2300 	strd	r2, r3, [sl]
 8008598:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800859c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80085a4:	e73a      	b.n	800841c <__ieee754_rem_pio2+0x284>
 80085a6:	bf00      	nop
 80085a8:	41700000 	.word	0x41700000
 80085ac:	080094bc 	.word	0x080094bc

080085b0 <__kernel_cos>:
 80085b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	ec57 6b10 	vmov	r6, r7, d0
 80085b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80085bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80085c0:	ed8d 1b00 	vstr	d1, [sp]
 80085c4:	da07      	bge.n	80085d6 <__kernel_cos+0x26>
 80085c6:	ee10 0a10 	vmov	r0, s0
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f8 fabe 	bl	8000b4c <__aeabi_d2iz>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	f000 8088 	beq.w	80086e6 <__kernel_cos+0x136>
 80085d6:	4632      	mov	r2, r6
 80085d8:	463b      	mov	r3, r7
 80085da:	4630      	mov	r0, r6
 80085dc:	4639      	mov	r1, r7
 80085de:	f7f8 f81b 	bl	8000618 <__aeabi_dmul>
 80085e2:	4b51      	ldr	r3, [pc, #324]	; (8008728 <__kernel_cos+0x178>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	4604      	mov	r4, r0
 80085e8:	460d      	mov	r5, r1
 80085ea:	f7f8 f815 	bl	8000618 <__aeabi_dmul>
 80085ee:	a340      	add	r3, pc, #256	; (adr r3, 80086f0 <__kernel_cos+0x140>)
 80085f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f4:	4682      	mov	sl, r0
 80085f6:	468b      	mov	fp, r1
 80085f8:	4620      	mov	r0, r4
 80085fa:	4629      	mov	r1, r5
 80085fc:	f7f8 f80c 	bl	8000618 <__aeabi_dmul>
 8008600:	a33d      	add	r3, pc, #244	; (adr r3, 80086f8 <__kernel_cos+0x148>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f7f7 fe51 	bl	80002ac <__adddf3>
 800860a:	4622      	mov	r2, r4
 800860c:	462b      	mov	r3, r5
 800860e:	f7f8 f803 	bl	8000618 <__aeabi_dmul>
 8008612:	a33b      	add	r3, pc, #236	; (adr r3, 8008700 <__kernel_cos+0x150>)
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	f7f7 fe46 	bl	80002a8 <__aeabi_dsub>
 800861c:	4622      	mov	r2, r4
 800861e:	462b      	mov	r3, r5
 8008620:	f7f7 fffa 	bl	8000618 <__aeabi_dmul>
 8008624:	a338      	add	r3, pc, #224	; (adr r3, 8008708 <__kernel_cos+0x158>)
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f7f7 fe3f 	bl	80002ac <__adddf3>
 800862e:	4622      	mov	r2, r4
 8008630:	462b      	mov	r3, r5
 8008632:	f7f7 fff1 	bl	8000618 <__aeabi_dmul>
 8008636:	a336      	add	r3, pc, #216	; (adr r3, 8008710 <__kernel_cos+0x160>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f7f7 fe34 	bl	80002a8 <__aeabi_dsub>
 8008640:	4622      	mov	r2, r4
 8008642:	462b      	mov	r3, r5
 8008644:	f7f7 ffe8 	bl	8000618 <__aeabi_dmul>
 8008648:	a333      	add	r3, pc, #204	; (adr r3, 8008718 <__kernel_cos+0x168>)
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	f7f7 fe2d 	bl	80002ac <__adddf3>
 8008652:	4622      	mov	r2, r4
 8008654:	462b      	mov	r3, r5
 8008656:	f7f7 ffdf 	bl	8000618 <__aeabi_dmul>
 800865a:	4622      	mov	r2, r4
 800865c:	462b      	mov	r3, r5
 800865e:	f7f7 ffdb 	bl	8000618 <__aeabi_dmul>
 8008662:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008666:	4604      	mov	r4, r0
 8008668:	460d      	mov	r5, r1
 800866a:	4630      	mov	r0, r6
 800866c:	4639      	mov	r1, r7
 800866e:	f7f7 ffd3 	bl	8000618 <__aeabi_dmul>
 8008672:	460b      	mov	r3, r1
 8008674:	4602      	mov	r2, r0
 8008676:	4629      	mov	r1, r5
 8008678:	4620      	mov	r0, r4
 800867a:	f7f7 fe15 	bl	80002a8 <__aeabi_dsub>
 800867e:	4b2b      	ldr	r3, [pc, #172]	; (800872c <__kernel_cos+0x17c>)
 8008680:	4598      	cmp	r8, r3
 8008682:	4606      	mov	r6, r0
 8008684:	460f      	mov	r7, r1
 8008686:	dc10      	bgt.n	80086aa <__kernel_cos+0xfa>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	4650      	mov	r0, sl
 800868e:	4659      	mov	r1, fp
 8008690:	f7f7 fe0a 	bl	80002a8 <__aeabi_dsub>
 8008694:	460b      	mov	r3, r1
 8008696:	4926      	ldr	r1, [pc, #152]	; (8008730 <__kernel_cos+0x180>)
 8008698:	4602      	mov	r2, r0
 800869a:	2000      	movs	r0, #0
 800869c:	f7f7 fe04 	bl	80002a8 <__aeabi_dsub>
 80086a0:	ec41 0b10 	vmov	d0, r0, r1
 80086a4:	b003      	add	sp, #12
 80086a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086aa:	4b22      	ldr	r3, [pc, #136]	; (8008734 <__kernel_cos+0x184>)
 80086ac:	4920      	ldr	r1, [pc, #128]	; (8008730 <__kernel_cos+0x180>)
 80086ae:	4598      	cmp	r8, r3
 80086b0:	bfcc      	ite	gt
 80086b2:	4d21      	ldrgt	r5, [pc, #132]	; (8008738 <__kernel_cos+0x188>)
 80086b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80086b8:	2400      	movs	r4, #0
 80086ba:	4622      	mov	r2, r4
 80086bc:	462b      	mov	r3, r5
 80086be:	2000      	movs	r0, #0
 80086c0:	f7f7 fdf2 	bl	80002a8 <__aeabi_dsub>
 80086c4:	4622      	mov	r2, r4
 80086c6:	4680      	mov	r8, r0
 80086c8:	4689      	mov	r9, r1
 80086ca:	462b      	mov	r3, r5
 80086cc:	4650      	mov	r0, sl
 80086ce:	4659      	mov	r1, fp
 80086d0:	f7f7 fdea 	bl	80002a8 <__aeabi_dsub>
 80086d4:	4632      	mov	r2, r6
 80086d6:	463b      	mov	r3, r7
 80086d8:	f7f7 fde6 	bl	80002a8 <__aeabi_dsub>
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4640      	mov	r0, r8
 80086e2:	4649      	mov	r1, r9
 80086e4:	e7da      	b.n	800869c <__kernel_cos+0xec>
 80086e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008720 <__kernel_cos+0x170>
 80086ea:	e7db      	b.n	80086a4 <__kernel_cos+0xf4>
 80086ec:	f3af 8000 	nop.w
 80086f0:	be8838d4 	.word	0xbe8838d4
 80086f4:	bda8fae9 	.word	0xbda8fae9
 80086f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80086fc:	3e21ee9e 	.word	0x3e21ee9e
 8008700:	809c52ad 	.word	0x809c52ad
 8008704:	3e927e4f 	.word	0x3e927e4f
 8008708:	19cb1590 	.word	0x19cb1590
 800870c:	3efa01a0 	.word	0x3efa01a0
 8008710:	16c15177 	.word	0x16c15177
 8008714:	3f56c16c 	.word	0x3f56c16c
 8008718:	5555554c 	.word	0x5555554c
 800871c:	3fa55555 	.word	0x3fa55555
 8008720:	00000000 	.word	0x00000000
 8008724:	3ff00000 	.word	0x3ff00000
 8008728:	3fe00000 	.word	0x3fe00000
 800872c:	3fd33332 	.word	0x3fd33332
 8008730:	3ff00000 	.word	0x3ff00000
 8008734:	3fe90000 	.word	0x3fe90000
 8008738:	3fd20000 	.word	0x3fd20000
 800873c:	00000000 	.word	0x00000000

08008740 <__kernel_rem_pio2>:
 8008740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008744:	ed2d 8b02 	vpush	{d8}
 8008748:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800874c:	f112 0f14 	cmn.w	r2, #20
 8008750:	9308      	str	r3, [sp, #32]
 8008752:	9101      	str	r1, [sp, #4]
 8008754:	4bc4      	ldr	r3, [pc, #784]	; (8008a68 <__kernel_rem_pio2+0x328>)
 8008756:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008758:	900b      	str	r0, [sp, #44]	; 0x2c
 800875a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800875e:	9302      	str	r3, [sp, #8]
 8008760:	9b08      	ldr	r3, [sp, #32]
 8008762:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008766:	bfa8      	it	ge
 8008768:	1ed4      	subge	r4, r2, #3
 800876a:	9306      	str	r3, [sp, #24]
 800876c:	bfb2      	itee	lt
 800876e:	2400      	movlt	r4, #0
 8008770:	2318      	movge	r3, #24
 8008772:	fb94 f4f3 	sdivge	r4, r4, r3
 8008776:	f06f 0317 	mvn.w	r3, #23
 800877a:	fb04 3303 	mla	r3, r4, r3, r3
 800877e:	eb03 0a02 	add.w	sl, r3, r2
 8008782:	9b02      	ldr	r3, [sp, #8]
 8008784:	9a06      	ldr	r2, [sp, #24]
 8008786:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008a58 <__kernel_rem_pio2+0x318>
 800878a:	eb03 0802 	add.w	r8, r3, r2
 800878e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008790:	1aa7      	subs	r7, r4, r2
 8008792:	ae22      	add	r6, sp, #136	; 0x88
 8008794:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008798:	2500      	movs	r5, #0
 800879a:	4545      	cmp	r5, r8
 800879c:	dd13      	ble.n	80087c6 <__kernel_rem_pio2+0x86>
 800879e:	9b08      	ldr	r3, [sp, #32]
 80087a0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008a58 <__kernel_rem_pio2+0x318>
 80087a4:	aa22      	add	r2, sp, #136	; 0x88
 80087a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80087aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80087ae:	f04f 0800 	mov.w	r8, #0
 80087b2:	9b02      	ldr	r3, [sp, #8]
 80087b4:	4598      	cmp	r8, r3
 80087b6:	dc2f      	bgt.n	8008818 <__kernel_rem_pio2+0xd8>
 80087b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80087bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80087c0:	462f      	mov	r7, r5
 80087c2:	2600      	movs	r6, #0
 80087c4:	e01b      	b.n	80087fe <__kernel_rem_pio2+0xbe>
 80087c6:	42ef      	cmn	r7, r5
 80087c8:	d407      	bmi.n	80087da <__kernel_rem_pio2+0x9a>
 80087ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80087ce:	f7f7 feb9 	bl	8000544 <__aeabi_i2d>
 80087d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80087d6:	3501      	adds	r5, #1
 80087d8:	e7df      	b.n	800879a <__kernel_rem_pio2+0x5a>
 80087da:	ec51 0b18 	vmov	r0, r1, d8
 80087de:	e7f8      	b.n	80087d2 <__kernel_rem_pio2+0x92>
 80087e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80087e8:	f7f7 ff16 	bl	8000618 <__aeabi_dmul>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087f4:	f7f7 fd5a 	bl	80002ac <__adddf3>
 80087f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087fc:	3601      	adds	r6, #1
 80087fe:	9b06      	ldr	r3, [sp, #24]
 8008800:	429e      	cmp	r6, r3
 8008802:	f1a7 0708 	sub.w	r7, r7, #8
 8008806:	ddeb      	ble.n	80087e0 <__kernel_rem_pio2+0xa0>
 8008808:	ed9d 7b04 	vldr	d7, [sp, #16]
 800880c:	f108 0801 	add.w	r8, r8, #1
 8008810:	ecab 7b02 	vstmia	fp!, {d7}
 8008814:	3508      	adds	r5, #8
 8008816:	e7cc      	b.n	80087b2 <__kernel_rem_pio2+0x72>
 8008818:	9b02      	ldr	r3, [sp, #8]
 800881a:	aa0e      	add	r2, sp, #56	; 0x38
 800881c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008820:	930d      	str	r3, [sp, #52]	; 0x34
 8008822:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008824:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008828:	9c02      	ldr	r4, [sp, #8]
 800882a:	930c      	str	r3, [sp, #48]	; 0x30
 800882c:	00e3      	lsls	r3, r4, #3
 800882e:	930a      	str	r3, [sp, #40]	; 0x28
 8008830:	ab9a      	add	r3, sp, #616	; 0x268
 8008832:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008836:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800883a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800883e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008840:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008844:	46c3      	mov	fp, r8
 8008846:	46a1      	mov	r9, r4
 8008848:	f1b9 0f00 	cmp.w	r9, #0
 800884c:	f1a5 0508 	sub.w	r5, r5, #8
 8008850:	dc77      	bgt.n	8008942 <__kernel_rem_pio2+0x202>
 8008852:	ec47 6b10 	vmov	d0, r6, r7
 8008856:	4650      	mov	r0, sl
 8008858:	f000 fc0a 	bl	8009070 <scalbn>
 800885c:	ec57 6b10 	vmov	r6, r7, d0
 8008860:	2200      	movs	r2, #0
 8008862:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008866:	ee10 0a10 	vmov	r0, s0
 800886a:	4639      	mov	r1, r7
 800886c:	f7f7 fed4 	bl	8000618 <__aeabi_dmul>
 8008870:	ec41 0b10 	vmov	d0, r0, r1
 8008874:	f000 fb7c 	bl	8008f70 <floor>
 8008878:	4b7c      	ldr	r3, [pc, #496]	; (8008a6c <__kernel_rem_pio2+0x32c>)
 800887a:	ec51 0b10 	vmov	r0, r1, d0
 800887e:	2200      	movs	r2, #0
 8008880:	f7f7 feca 	bl	8000618 <__aeabi_dmul>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4630      	mov	r0, r6
 800888a:	4639      	mov	r1, r7
 800888c:	f7f7 fd0c 	bl	80002a8 <__aeabi_dsub>
 8008890:	460f      	mov	r7, r1
 8008892:	4606      	mov	r6, r0
 8008894:	f7f8 f95a 	bl	8000b4c <__aeabi_d2iz>
 8008898:	9004      	str	r0, [sp, #16]
 800889a:	f7f7 fe53 	bl	8000544 <__aeabi_i2d>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4630      	mov	r0, r6
 80088a4:	4639      	mov	r1, r7
 80088a6:	f7f7 fcff 	bl	80002a8 <__aeabi_dsub>
 80088aa:	f1ba 0f00 	cmp.w	sl, #0
 80088ae:	4606      	mov	r6, r0
 80088b0:	460f      	mov	r7, r1
 80088b2:	dd6d      	ble.n	8008990 <__kernel_rem_pio2+0x250>
 80088b4:	1e62      	subs	r2, r4, #1
 80088b6:	ab0e      	add	r3, sp, #56	; 0x38
 80088b8:	9d04      	ldr	r5, [sp, #16]
 80088ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80088be:	f1ca 0118 	rsb	r1, sl, #24
 80088c2:	fa40 f301 	asr.w	r3, r0, r1
 80088c6:	441d      	add	r5, r3
 80088c8:	408b      	lsls	r3, r1
 80088ca:	1ac0      	subs	r0, r0, r3
 80088cc:	ab0e      	add	r3, sp, #56	; 0x38
 80088ce:	9504      	str	r5, [sp, #16]
 80088d0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80088d4:	f1ca 0317 	rsb	r3, sl, #23
 80088d8:	fa40 fb03 	asr.w	fp, r0, r3
 80088dc:	f1bb 0f00 	cmp.w	fp, #0
 80088e0:	dd65      	ble.n	80089ae <__kernel_rem_pio2+0x26e>
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	2200      	movs	r2, #0
 80088e6:	3301      	adds	r3, #1
 80088e8:	9304      	str	r3, [sp, #16]
 80088ea:	4615      	mov	r5, r2
 80088ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80088f0:	4294      	cmp	r4, r2
 80088f2:	f300 809c 	bgt.w	8008a2e <__kernel_rem_pio2+0x2ee>
 80088f6:	f1ba 0f00 	cmp.w	sl, #0
 80088fa:	dd07      	ble.n	800890c <__kernel_rem_pio2+0x1cc>
 80088fc:	f1ba 0f01 	cmp.w	sl, #1
 8008900:	f000 80c0 	beq.w	8008a84 <__kernel_rem_pio2+0x344>
 8008904:	f1ba 0f02 	cmp.w	sl, #2
 8008908:	f000 80c6 	beq.w	8008a98 <__kernel_rem_pio2+0x358>
 800890c:	f1bb 0f02 	cmp.w	fp, #2
 8008910:	d14d      	bne.n	80089ae <__kernel_rem_pio2+0x26e>
 8008912:	4632      	mov	r2, r6
 8008914:	463b      	mov	r3, r7
 8008916:	4956      	ldr	r1, [pc, #344]	; (8008a70 <__kernel_rem_pio2+0x330>)
 8008918:	2000      	movs	r0, #0
 800891a:	f7f7 fcc5 	bl	80002a8 <__aeabi_dsub>
 800891e:	4606      	mov	r6, r0
 8008920:	460f      	mov	r7, r1
 8008922:	2d00      	cmp	r5, #0
 8008924:	d043      	beq.n	80089ae <__kernel_rem_pio2+0x26e>
 8008926:	4650      	mov	r0, sl
 8008928:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008a60 <__kernel_rem_pio2+0x320>
 800892c:	f000 fba0 	bl	8009070 <scalbn>
 8008930:	4630      	mov	r0, r6
 8008932:	4639      	mov	r1, r7
 8008934:	ec53 2b10 	vmov	r2, r3, d0
 8008938:	f7f7 fcb6 	bl	80002a8 <__aeabi_dsub>
 800893c:	4606      	mov	r6, r0
 800893e:	460f      	mov	r7, r1
 8008940:	e035      	b.n	80089ae <__kernel_rem_pio2+0x26e>
 8008942:	4b4c      	ldr	r3, [pc, #304]	; (8008a74 <__kernel_rem_pio2+0x334>)
 8008944:	2200      	movs	r2, #0
 8008946:	4630      	mov	r0, r6
 8008948:	4639      	mov	r1, r7
 800894a:	f7f7 fe65 	bl	8000618 <__aeabi_dmul>
 800894e:	f7f8 f8fd 	bl	8000b4c <__aeabi_d2iz>
 8008952:	f7f7 fdf7 	bl	8000544 <__aeabi_i2d>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	ec43 2b18 	vmov	d8, r2, r3
 800895e:	4b46      	ldr	r3, [pc, #280]	; (8008a78 <__kernel_rem_pio2+0x338>)
 8008960:	2200      	movs	r2, #0
 8008962:	f7f7 fe59 	bl	8000618 <__aeabi_dmul>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	4630      	mov	r0, r6
 800896c:	4639      	mov	r1, r7
 800896e:	f7f7 fc9b 	bl	80002a8 <__aeabi_dsub>
 8008972:	f7f8 f8eb 	bl	8000b4c <__aeabi_d2iz>
 8008976:	e9d5 2300 	ldrd	r2, r3, [r5]
 800897a:	f84b 0b04 	str.w	r0, [fp], #4
 800897e:	ec51 0b18 	vmov	r0, r1, d8
 8008982:	f7f7 fc93 	bl	80002ac <__adddf3>
 8008986:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800898a:	4606      	mov	r6, r0
 800898c:	460f      	mov	r7, r1
 800898e:	e75b      	b.n	8008848 <__kernel_rem_pio2+0x108>
 8008990:	d106      	bne.n	80089a0 <__kernel_rem_pio2+0x260>
 8008992:	1e63      	subs	r3, r4, #1
 8008994:	aa0e      	add	r2, sp, #56	; 0x38
 8008996:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800899a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800899e:	e79d      	b.n	80088dc <__kernel_rem_pio2+0x19c>
 80089a0:	4b36      	ldr	r3, [pc, #216]	; (8008a7c <__kernel_rem_pio2+0x33c>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	f7f8 f8be 	bl	8000b24 <__aeabi_dcmpge>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d13d      	bne.n	8008a28 <__kernel_rem_pio2+0x2e8>
 80089ac:	4683      	mov	fp, r0
 80089ae:	2200      	movs	r2, #0
 80089b0:	2300      	movs	r3, #0
 80089b2:	4630      	mov	r0, r6
 80089b4:	4639      	mov	r1, r7
 80089b6:	f7f8 f897 	bl	8000ae8 <__aeabi_dcmpeq>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	f000 80c0 	beq.w	8008b40 <__kernel_rem_pio2+0x400>
 80089c0:	1e65      	subs	r5, r4, #1
 80089c2:	462b      	mov	r3, r5
 80089c4:	2200      	movs	r2, #0
 80089c6:	9902      	ldr	r1, [sp, #8]
 80089c8:	428b      	cmp	r3, r1
 80089ca:	da6c      	bge.n	8008aa6 <__kernel_rem_pio2+0x366>
 80089cc:	2a00      	cmp	r2, #0
 80089ce:	f000 8089 	beq.w	8008ae4 <__kernel_rem_pio2+0x3a4>
 80089d2:	ab0e      	add	r3, sp, #56	; 0x38
 80089d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80089d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 80ad 	beq.w	8008b3c <__kernel_rem_pio2+0x3fc>
 80089e2:	4650      	mov	r0, sl
 80089e4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008a60 <__kernel_rem_pio2+0x320>
 80089e8:	f000 fb42 	bl	8009070 <scalbn>
 80089ec:	ab9a      	add	r3, sp, #616	; 0x268
 80089ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80089f2:	ec57 6b10 	vmov	r6, r7, d0
 80089f6:	00ec      	lsls	r4, r5, #3
 80089f8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80089fc:	46aa      	mov	sl, r5
 80089fe:	f1ba 0f00 	cmp.w	sl, #0
 8008a02:	f280 80d6 	bge.w	8008bb2 <__kernel_rem_pio2+0x472>
 8008a06:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008a58 <__kernel_rem_pio2+0x318>
 8008a0a:	462e      	mov	r6, r5
 8008a0c:	2e00      	cmp	r6, #0
 8008a0e:	f2c0 8104 	blt.w	8008c1a <__kernel_rem_pio2+0x4da>
 8008a12:	ab72      	add	r3, sp, #456	; 0x1c8
 8008a14:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008a18:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008a80 <__kernel_rem_pio2+0x340>
 8008a1c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008a20:	f04f 0800 	mov.w	r8, #0
 8008a24:	1baf      	subs	r7, r5, r6
 8008a26:	e0ea      	b.n	8008bfe <__kernel_rem_pio2+0x4be>
 8008a28:	f04f 0b02 	mov.w	fp, #2
 8008a2c:	e759      	b.n	80088e2 <__kernel_rem_pio2+0x1a2>
 8008a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a32:	b955      	cbnz	r5, 8008a4a <__kernel_rem_pio2+0x30a>
 8008a34:	b123      	cbz	r3, 8008a40 <__kernel_rem_pio2+0x300>
 8008a36:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008a3a:	f8c8 3000 	str.w	r3, [r8]
 8008a3e:	2301      	movs	r3, #1
 8008a40:	3201      	adds	r2, #1
 8008a42:	f108 0804 	add.w	r8, r8, #4
 8008a46:	461d      	mov	r5, r3
 8008a48:	e752      	b.n	80088f0 <__kernel_rem_pio2+0x1b0>
 8008a4a:	1acb      	subs	r3, r1, r3
 8008a4c:	f8c8 3000 	str.w	r3, [r8]
 8008a50:	462b      	mov	r3, r5
 8008a52:	e7f5      	b.n	8008a40 <__kernel_rem_pio2+0x300>
 8008a54:	f3af 8000 	nop.w
	...
 8008a64:	3ff00000 	.word	0x3ff00000
 8008a68:	08009608 	.word	0x08009608
 8008a6c:	40200000 	.word	0x40200000
 8008a70:	3ff00000 	.word	0x3ff00000
 8008a74:	3e700000 	.word	0x3e700000
 8008a78:	41700000 	.word	0x41700000
 8008a7c:	3fe00000 	.word	0x3fe00000
 8008a80:	080095c8 	.word	0x080095c8
 8008a84:	1e62      	subs	r2, r4, #1
 8008a86:	ab0e      	add	r3, sp, #56	; 0x38
 8008a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008a90:	a90e      	add	r1, sp, #56	; 0x38
 8008a92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008a96:	e739      	b.n	800890c <__kernel_rem_pio2+0x1cc>
 8008a98:	1e62      	subs	r2, r4, #1
 8008a9a:	ab0e      	add	r3, sp, #56	; 0x38
 8008a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008aa4:	e7f4      	b.n	8008a90 <__kernel_rem_pio2+0x350>
 8008aa6:	a90e      	add	r1, sp, #56	; 0x38
 8008aa8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	e789      	b.n	80089c6 <__kernel_rem_pio2+0x286>
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008ab8:	2900      	cmp	r1, #0
 8008aba:	d0fa      	beq.n	8008ab2 <__kernel_rem_pio2+0x372>
 8008abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008abe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008ac2:	446a      	add	r2, sp
 8008ac4:	3a98      	subs	r2, #152	; 0x98
 8008ac6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ac8:	9a08      	ldr	r2, [sp, #32]
 8008aca:	18e3      	adds	r3, r4, r3
 8008acc:	18a5      	adds	r5, r4, r2
 8008ace:	aa22      	add	r2, sp, #136	; 0x88
 8008ad0:	f104 0801 	add.w	r8, r4, #1
 8008ad4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008ad8:	9304      	str	r3, [sp, #16]
 8008ada:	9b04      	ldr	r3, [sp, #16]
 8008adc:	4543      	cmp	r3, r8
 8008ade:	da04      	bge.n	8008aea <__kernel_rem_pio2+0x3aa>
 8008ae0:	461c      	mov	r4, r3
 8008ae2:	e6a3      	b.n	800882c <__kernel_rem_pio2+0xec>
 8008ae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e7e4      	b.n	8008ab4 <__kernel_rem_pio2+0x374>
 8008aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008af0:	f7f7 fd28 	bl	8000544 <__aeabi_i2d>
 8008af4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008afa:	46ab      	mov	fp, r5
 8008afc:	461c      	mov	r4, r3
 8008afe:	f04f 0900 	mov.w	r9, #0
 8008b02:	2600      	movs	r6, #0
 8008b04:	2700      	movs	r7, #0
 8008b06:	9b06      	ldr	r3, [sp, #24]
 8008b08:	4599      	cmp	r9, r3
 8008b0a:	dd06      	ble.n	8008b1a <__kernel_rem_pio2+0x3da>
 8008b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008b12:	f108 0801 	add.w	r8, r8, #1
 8008b16:	930a      	str	r3, [sp, #40]	; 0x28
 8008b18:	e7df      	b.n	8008ada <__kernel_rem_pio2+0x39a>
 8008b1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008b1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008b22:	f7f7 fd79 	bl	8000618 <__aeabi_dmul>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	f7f7 fbbd 	bl	80002ac <__adddf3>
 8008b32:	f109 0901 	add.w	r9, r9, #1
 8008b36:	4606      	mov	r6, r0
 8008b38:	460f      	mov	r7, r1
 8008b3a:	e7e4      	b.n	8008b06 <__kernel_rem_pio2+0x3c6>
 8008b3c:	3d01      	subs	r5, #1
 8008b3e:	e748      	b.n	80089d2 <__kernel_rem_pio2+0x292>
 8008b40:	ec47 6b10 	vmov	d0, r6, r7
 8008b44:	f1ca 0000 	rsb	r0, sl, #0
 8008b48:	f000 fa92 	bl	8009070 <scalbn>
 8008b4c:	ec57 6b10 	vmov	r6, r7, d0
 8008b50:	4ba0      	ldr	r3, [pc, #640]	; (8008dd4 <__kernel_rem_pio2+0x694>)
 8008b52:	ee10 0a10 	vmov	r0, s0
 8008b56:	2200      	movs	r2, #0
 8008b58:	4639      	mov	r1, r7
 8008b5a:	f7f7 ffe3 	bl	8000b24 <__aeabi_dcmpge>
 8008b5e:	b1f8      	cbz	r0, 8008ba0 <__kernel_rem_pio2+0x460>
 8008b60:	4b9d      	ldr	r3, [pc, #628]	; (8008dd8 <__kernel_rem_pio2+0x698>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	4630      	mov	r0, r6
 8008b66:	4639      	mov	r1, r7
 8008b68:	f7f7 fd56 	bl	8000618 <__aeabi_dmul>
 8008b6c:	f7f7 ffee 	bl	8000b4c <__aeabi_d2iz>
 8008b70:	4680      	mov	r8, r0
 8008b72:	f7f7 fce7 	bl	8000544 <__aeabi_i2d>
 8008b76:	4b97      	ldr	r3, [pc, #604]	; (8008dd4 <__kernel_rem_pio2+0x694>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f7f7 fd4d 	bl	8000618 <__aeabi_dmul>
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4602      	mov	r2, r0
 8008b82:	4639      	mov	r1, r7
 8008b84:	4630      	mov	r0, r6
 8008b86:	f7f7 fb8f 	bl	80002a8 <__aeabi_dsub>
 8008b8a:	f7f7 ffdf 	bl	8000b4c <__aeabi_d2iz>
 8008b8e:	1c65      	adds	r5, r4, #1
 8008b90:	ab0e      	add	r3, sp, #56	; 0x38
 8008b92:	f10a 0a18 	add.w	sl, sl, #24
 8008b96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008b9a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008b9e:	e720      	b.n	80089e2 <__kernel_rem_pio2+0x2a2>
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f7f7 ffd2 	bl	8000b4c <__aeabi_d2iz>
 8008ba8:	ab0e      	add	r3, sp, #56	; 0x38
 8008baa:	4625      	mov	r5, r4
 8008bac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008bb0:	e717      	b.n	80089e2 <__kernel_rem_pio2+0x2a2>
 8008bb2:	ab0e      	add	r3, sp, #56	; 0x38
 8008bb4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008bb8:	f7f7 fcc4 	bl	8000544 <__aeabi_i2d>
 8008bbc:	4632      	mov	r2, r6
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	f7f7 fd2a 	bl	8000618 <__aeabi_dmul>
 8008bc4:	4b84      	ldr	r3, [pc, #528]	; (8008dd8 <__kernel_rem_pio2+0x698>)
 8008bc6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008bca:	2200      	movs	r2, #0
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 fd22 	bl	8000618 <__aeabi_dmul>
 8008bd4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008bd8:	4606      	mov	r6, r0
 8008bda:	460f      	mov	r7, r1
 8008bdc:	e70f      	b.n	80089fe <__kernel_rem_pio2+0x2be>
 8008bde:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008be2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008be6:	f7f7 fd17 	bl	8000618 <__aeabi_dmul>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bf2:	f7f7 fb5b 	bl	80002ac <__adddf3>
 8008bf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008bfa:	f108 0801 	add.w	r8, r8, #1
 8008bfe:	9b02      	ldr	r3, [sp, #8]
 8008c00:	4598      	cmp	r8, r3
 8008c02:	dc01      	bgt.n	8008c08 <__kernel_rem_pio2+0x4c8>
 8008c04:	45b8      	cmp	r8, r7
 8008c06:	ddea      	ble.n	8008bde <__kernel_rem_pio2+0x49e>
 8008c08:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008c0c:	ab4a      	add	r3, sp, #296	; 0x128
 8008c0e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008c12:	ed87 7b00 	vstr	d7, [r7]
 8008c16:	3e01      	subs	r6, #1
 8008c18:	e6f8      	b.n	8008a0c <__kernel_rem_pio2+0x2cc>
 8008c1a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	dc0b      	bgt.n	8008c38 <__kernel_rem_pio2+0x4f8>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	dc35      	bgt.n	8008c90 <__kernel_rem_pio2+0x550>
 8008c24:	d059      	beq.n	8008cda <__kernel_rem_pio2+0x59a>
 8008c26:	9b04      	ldr	r3, [sp, #16]
 8008c28:	f003 0007 	and.w	r0, r3, #7
 8008c2c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008c30:	ecbd 8b02 	vpop	{d8}
 8008c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d1f3      	bne.n	8008c26 <__kernel_rem_pio2+0x4e6>
 8008c3e:	ab4a      	add	r3, sp, #296	; 0x128
 8008c40:	4423      	add	r3, r4
 8008c42:	9306      	str	r3, [sp, #24]
 8008c44:	461c      	mov	r4, r3
 8008c46:	469a      	mov	sl, r3
 8008c48:	9502      	str	r5, [sp, #8]
 8008c4a:	9b02      	ldr	r3, [sp, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f1aa 0a08 	sub.w	sl, sl, #8
 8008c52:	dc6b      	bgt.n	8008d2c <__kernel_rem_pio2+0x5ec>
 8008c54:	46aa      	mov	sl, r5
 8008c56:	f1ba 0f01 	cmp.w	sl, #1
 8008c5a:	f1a4 0408 	sub.w	r4, r4, #8
 8008c5e:	f300 8085 	bgt.w	8008d6c <__kernel_rem_pio2+0x62c>
 8008c62:	9c06      	ldr	r4, [sp, #24]
 8008c64:	2000      	movs	r0, #0
 8008c66:	3408      	adds	r4, #8
 8008c68:	2100      	movs	r1, #0
 8008c6a:	2d01      	cmp	r5, #1
 8008c6c:	f300 809d 	bgt.w	8008daa <__kernel_rem_pio2+0x66a>
 8008c70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008c74:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008c78:	f1bb 0f00 	cmp.w	fp, #0
 8008c7c:	f040 809b 	bne.w	8008db6 <__kernel_rem_pio2+0x676>
 8008c80:	9b01      	ldr	r3, [sp, #4]
 8008c82:	e9c3 5600 	strd	r5, r6, [r3]
 8008c86:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008c8a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008c8e:	e7ca      	b.n	8008c26 <__kernel_rem_pio2+0x4e6>
 8008c90:	3408      	adds	r4, #8
 8008c92:	ab4a      	add	r3, sp, #296	; 0x128
 8008c94:	441c      	add	r4, r3
 8008c96:	462e      	mov	r6, r5
 8008c98:	2000      	movs	r0, #0
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	2e00      	cmp	r6, #0
 8008c9e:	da36      	bge.n	8008d0e <__kernel_rem_pio2+0x5ce>
 8008ca0:	f1bb 0f00 	cmp.w	fp, #0
 8008ca4:	d039      	beq.n	8008d1a <__kernel_rem_pio2+0x5da>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cac:	9c01      	ldr	r4, [sp, #4]
 8008cae:	e9c4 2300 	strd	r2, r3, [r4]
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008cba:	f7f7 faf5 	bl	80002a8 <__aeabi_dsub>
 8008cbe:	ae4c      	add	r6, sp, #304	; 0x130
 8008cc0:	2401      	movs	r4, #1
 8008cc2:	42a5      	cmp	r5, r4
 8008cc4:	da2c      	bge.n	8008d20 <__kernel_rem_pio2+0x5e0>
 8008cc6:	f1bb 0f00 	cmp.w	fp, #0
 8008cca:	d002      	beq.n	8008cd2 <__kernel_rem_pio2+0x592>
 8008ccc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	9b01      	ldr	r3, [sp, #4]
 8008cd4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008cd8:	e7a5      	b.n	8008c26 <__kernel_rem_pio2+0x4e6>
 8008cda:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008cde:	eb0d 0403 	add.w	r4, sp, r3
 8008ce2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	2100      	movs	r1, #0
 8008cea:	2d00      	cmp	r5, #0
 8008cec:	da09      	bge.n	8008d02 <__kernel_rem_pio2+0x5c2>
 8008cee:	f1bb 0f00 	cmp.w	fp, #0
 8008cf2:	d002      	beq.n	8008cfa <__kernel_rem_pio2+0x5ba>
 8008cf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	9b01      	ldr	r3, [sp, #4]
 8008cfc:	e9c3 0100 	strd	r0, r1, [r3]
 8008d00:	e791      	b.n	8008c26 <__kernel_rem_pio2+0x4e6>
 8008d02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008d06:	f7f7 fad1 	bl	80002ac <__adddf3>
 8008d0a:	3d01      	subs	r5, #1
 8008d0c:	e7ed      	b.n	8008cea <__kernel_rem_pio2+0x5aa>
 8008d0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008d12:	f7f7 facb 	bl	80002ac <__adddf3>
 8008d16:	3e01      	subs	r6, #1
 8008d18:	e7c0      	b.n	8008c9c <__kernel_rem_pio2+0x55c>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	e7c5      	b.n	8008cac <__kernel_rem_pio2+0x56c>
 8008d20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008d24:	f7f7 fac2 	bl	80002ac <__adddf3>
 8008d28:	3401      	adds	r4, #1
 8008d2a:	e7ca      	b.n	8008cc2 <__kernel_rem_pio2+0x582>
 8008d2c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008d30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008d34:	9b02      	ldr	r3, [sp, #8]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	9302      	str	r3, [sp, #8]
 8008d3a:	4632      	mov	r2, r6
 8008d3c:	463b      	mov	r3, r7
 8008d3e:	4640      	mov	r0, r8
 8008d40:	4649      	mov	r1, r9
 8008d42:	f7f7 fab3 	bl	80002ac <__adddf3>
 8008d46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4640      	mov	r0, r8
 8008d50:	4649      	mov	r1, r9
 8008d52:	f7f7 faa9 	bl	80002a8 <__aeabi_dsub>
 8008d56:	4632      	mov	r2, r6
 8008d58:	463b      	mov	r3, r7
 8008d5a:	f7f7 faa7 	bl	80002ac <__adddf3>
 8008d5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008d62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d66:	ed8a 7b00 	vstr	d7, [sl]
 8008d6a:	e76e      	b.n	8008c4a <__kernel_rem_pio2+0x50a>
 8008d6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008d70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008d74:	4640      	mov	r0, r8
 8008d76:	4632      	mov	r2, r6
 8008d78:	463b      	mov	r3, r7
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	f7f7 fa96 	bl	80002ac <__adddf3>
 8008d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4640      	mov	r0, r8
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	f7f7 fa8c 	bl	80002a8 <__aeabi_dsub>
 8008d90:	4632      	mov	r2, r6
 8008d92:	463b      	mov	r3, r7
 8008d94:	f7f7 fa8a 	bl	80002ac <__adddf3>
 8008d98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008da0:	ed84 7b00 	vstr	d7, [r4]
 8008da4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008da8:	e755      	b.n	8008c56 <__kernel_rem_pio2+0x516>
 8008daa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008dae:	f7f7 fa7d 	bl	80002ac <__adddf3>
 8008db2:	3d01      	subs	r5, #1
 8008db4:	e759      	b.n	8008c6a <__kernel_rem_pio2+0x52a>
 8008db6:	9b01      	ldr	r3, [sp, #4]
 8008db8:	9a01      	ldr	r2, [sp, #4]
 8008dba:	601d      	str	r5, [r3, #0]
 8008dbc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008dc0:	605c      	str	r4, [r3, #4]
 8008dc2:	609f      	str	r7, [r3, #8]
 8008dc4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008dc8:	60d3      	str	r3, [r2, #12]
 8008dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dce:	6110      	str	r0, [r2, #16]
 8008dd0:	6153      	str	r3, [r2, #20]
 8008dd2:	e728      	b.n	8008c26 <__kernel_rem_pio2+0x4e6>
 8008dd4:	41700000 	.word	0x41700000
 8008dd8:	3e700000 	.word	0x3e700000
 8008ddc:	00000000 	.word	0x00000000

08008de0 <__kernel_sin>:
 8008de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de4:	ed2d 8b04 	vpush	{d8-d9}
 8008de8:	eeb0 8a41 	vmov.f32	s16, s2
 8008dec:	eef0 8a61 	vmov.f32	s17, s3
 8008df0:	ec55 4b10 	vmov	r4, r5, d0
 8008df4:	b083      	sub	sp, #12
 8008df6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008dfa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008dfe:	9001      	str	r0, [sp, #4]
 8008e00:	da06      	bge.n	8008e10 <__kernel_sin+0x30>
 8008e02:	ee10 0a10 	vmov	r0, s0
 8008e06:	4629      	mov	r1, r5
 8008e08:	f7f7 fea0 	bl	8000b4c <__aeabi_d2iz>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d051      	beq.n	8008eb4 <__kernel_sin+0xd4>
 8008e10:	4622      	mov	r2, r4
 8008e12:	462b      	mov	r3, r5
 8008e14:	4620      	mov	r0, r4
 8008e16:	4629      	mov	r1, r5
 8008e18:	f7f7 fbfe 	bl	8000618 <__aeabi_dmul>
 8008e1c:	4682      	mov	sl, r0
 8008e1e:	468b      	mov	fp, r1
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4620      	mov	r0, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	f7f7 fbf6 	bl	8000618 <__aeabi_dmul>
 8008e2c:	a341      	add	r3, pc, #260	; (adr r3, 8008f34 <__kernel_sin+0x154>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	4680      	mov	r8, r0
 8008e34:	4689      	mov	r9, r1
 8008e36:	4650      	mov	r0, sl
 8008e38:	4659      	mov	r1, fp
 8008e3a:	f7f7 fbed 	bl	8000618 <__aeabi_dmul>
 8008e3e:	a33f      	add	r3, pc, #252	; (adr r3, 8008f3c <__kernel_sin+0x15c>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	f7f7 fa30 	bl	80002a8 <__aeabi_dsub>
 8008e48:	4652      	mov	r2, sl
 8008e4a:	465b      	mov	r3, fp
 8008e4c:	f7f7 fbe4 	bl	8000618 <__aeabi_dmul>
 8008e50:	a33c      	add	r3, pc, #240	; (adr r3, 8008f44 <__kernel_sin+0x164>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f7f7 fa29 	bl	80002ac <__adddf3>
 8008e5a:	4652      	mov	r2, sl
 8008e5c:	465b      	mov	r3, fp
 8008e5e:	f7f7 fbdb 	bl	8000618 <__aeabi_dmul>
 8008e62:	a33a      	add	r3, pc, #232	; (adr r3, 8008f4c <__kernel_sin+0x16c>)
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	f7f7 fa1e 	bl	80002a8 <__aeabi_dsub>
 8008e6c:	4652      	mov	r2, sl
 8008e6e:	465b      	mov	r3, fp
 8008e70:	f7f7 fbd2 	bl	8000618 <__aeabi_dmul>
 8008e74:	a337      	add	r3, pc, #220	; (adr r3, 8008f54 <__kernel_sin+0x174>)
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f7f7 fa17 	bl	80002ac <__adddf3>
 8008e7e:	9b01      	ldr	r3, [sp, #4]
 8008e80:	4606      	mov	r6, r0
 8008e82:	460f      	mov	r7, r1
 8008e84:	b9eb      	cbnz	r3, 8008ec2 <__kernel_sin+0xe2>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4650      	mov	r0, sl
 8008e8c:	4659      	mov	r1, fp
 8008e8e:	f7f7 fbc3 	bl	8000618 <__aeabi_dmul>
 8008e92:	a325      	add	r3, pc, #148	; (adr r3, 8008f28 <__kernel_sin+0x148>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	f7f7 fa06 	bl	80002a8 <__aeabi_dsub>
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	464b      	mov	r3, r9
 8008ea0:	f7f7 fbba 	bl	8000618 <__aeabi_dmul>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	4629      	mov	r1, r5
 8008eac:	f7f7 f9fe 	bl	80002ac <__adddf3>
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	ec45 4b10 	vmov	d0, r4, r5
 8008eb8:	b003      	add	sp, #12
 8008eba:	ecbd 8b04 	vpop	{d8-d9}
 8008ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec2:	4b1b      	ldr	r3, [pc, #108]	; (8008f30 <__kernel_sin+0x150>)
 8008ec4:	ec51 0b18 	vmov	r0, r1, d8
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f7f7 fba5 	bl	8000618 <__aeabi_dmul>
 8008ece:	4632      	mov	r2, r6
 8008ed0:	ec41 0b19 	vmov	d9, r0, r1
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	4649      	mov	r1, r9
 8008eda:	f7f7 fb9d 	bl	8000618 <__aeabi_dmul>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	ec51 0b19 	vmov	r0, r1, d9
 8008ee6:	f7f7 f9df 	bl	80002a8 <__aeabi_dsub>
 8008eea:	4652      	mov	r2, sl
 8008eec:	465b      	mov	r3, fp
 8008eee:	f7f7 fb93 	bl	8000618 <__aeabi_dmul>
 8008ef2:	ec53 2b18 	vmov	r2, r3, d8
 8008ef6:	f7f7 f9d7 	bl	80002a8 <__aeabi_dsub>
 8008efa:	a30b      	add	r3, pc, #44	; (adr r3, 8008f28 <__kernel_sin+0x148>)
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	4606      	mov	r6, r0
 8008f02:	460f      	mov	r7, r1
 8008f04:	4640      	mov	r0, r8
 8008f06:	4649      	mov	r1, r9
 8008f08:	f7f7 fb86 	bl	8000618 <__aeabi_dmul>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4630      	mov	r0, r6
 8008f12:	4639      	mov	r1, r7
 8008f14:	f7f7 f9ca 	bl	80002ac <__adddf3>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f7f7 f9c2 	bl	80002a8 <__aeabi_dsub>
 8008f24:	e7c4      	b.n	8008eb0 <__kernel_sin+0xd0>
 8008f26:	bf00      	nop
 8008f28:	55555549 	.word	0x55555549
 8008f2c:	3fc55555 	.word	0x3fc55555
 8008f30:	3fe00000 	.word	0x3fe00000
 8008f34:	5acfd57c 	.word	0x5acfd57c
 8008f38:	3de5d93a 	.word	0x3de5d93a
 8008f3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008f40:	3e5ae5e6 	.word	0x3e5ae5e6
 8008f44:	57b1fe7d 	.word	0x57b1fe7d
 8008f48:	3ec71de3 	.word	0x3ec71de3
 8008f4c:	19c161d5 	.word	0x19c161d5
 8008f50:	3f2a01a0 	.word	0x3f2a01a0
 8008f54:	1110f8a6 	.word	0x1110f8a6
 8008f58:	3f811111 	.word	0x3f811111

08008f5c <fabs>:
 8008f5c:	ec51 0b10 	vmov	r0, r1, d0
 8008f60:	ee10 2a10 	vmov	r2, s0
 8008f64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f68:	ec43 2b10 	vmov	d0, r2, r3
 8008f6c:	4770      	bx	lr
	...

08008f70 <floor>:
 8008f70:	ec51 0b10 	vmov	r0, r1, d0
 8008f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008f7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008f80:	2e13      	cmp	r6, #19
 8008f82:	ee10 5a10 	vmov	r5, s0
 8008f86:	ee10 8a10 	vmov	r8, s0
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	dc32      	bgt.n	8008ff4 <floor+0x84>
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	da14      	bge.n	8008fbc <floor+0x4c>
 8008f92:	a333      	add	r3, pc, #204	; (adr r3, 8009060 <floor+0xf0>)
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f7f7 f988 	bl	80002ac <__adddf3>
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f7f7 fdca 	bl	8000b38 <__aeabi_dcmpgt>
 8008fa4:	b138      	cbz	r0, 8008fb6 <floor+0x46>
 8008fa6:	2c00      	cmp	r4, #0
 8008fa8:	da57      	bge.n	800905a <floor+0xea>
 8008faa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008fae:	431d      	orrs	r5, r3
 8008fb0:	d001      	beq.n	8008fb6 <floor+0x46>
 8008fb2:	4c2d      	ldr	r4, [pc, #180]	; (8009068 <floor+0xf8>)
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4628      	mov	r0, r5
 8008fba:	e025      	b.n	8009008 <floor+0x98>
 8008fbc:	4f2b      	ldr	r7, [pc, #172]	; (800906c <floor+0xfc>)
 8008fbe:	4137      	asrs	r7, r6
 8008fc0:	ea01 0307 	and.w	r3, r1, r7
 8008fc4:	4303      	orrs	r3, r0
 8008fc6:	d01f      	beq.n	8009008 <floor+0x98>
 8008fc8:	a325      	add	r3, pc, #148	; (adr r3, 8009060 <floor+0xf0>)
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f7f7 f96d 	bl	80002ac <__adddf3>
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f7f7 fdaf 	bl	8000b38 <__aeabi_dcmpgt>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d0eb      	beq.n	8008fb6 <floor+0x46>
 8008fde:	2c00      	cmp	r4, #0
 8008fe0:	bfbe      	ittt	lt
 8008fe2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008fe6:	fa43 f606 	asrlt.w	r6, r3, r6
 8008fea:	19a4      	addlt	r4, r4, r6
 8008fec:	ea24 0407 	bic.w	r4, r4, r7
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	e7e0      	b.n	8008fb6 <floor+0x46>
 8008ff4:	2e33      	cmp	r6, #51	; 0x33
 8008ff6:	dd0b      	ble.n	8009010 <floor+0xa0>
 8008ff8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008ffc:	d104      	bne.n	8009008 <floor+0x98>
 8008ffe:	ee10 2a10 	vmov	r2, s0
 8009002:	460b      	mov	r3, r1
 8009004:	f7f7 f952 	bl	80002ac <__adddf3>
 8009008:	ec41 0b10 	vmov	d0, r0, r1
 800900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009010:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009018:	fa23 f707 	lsr.w	r7, r3, r7
 800901c:	4207      	tst	r7, r0
 800901e:	d0f3      	beq.n	8009008 <floor+0x98>
 8009020:	a30f      	add	r3, pc, #60	; (adr r3, 8009060 <floor+0xf0>)
 8009022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009026:	f7f7 f941 	bl	80002ac <__adddf3>
 800902a:	2200      	movs	r2, #0
 800902c:	2300      	movs	r3, #0
 800902e:	f7f7 fd83 	bl	8000b38 <__aeabi_dcmpgt>
 8009032:	2800      	cmp	r0, #0
 8009034:	d0bf      	beq.n	8008fb6 <floor+0x46>
 8009036:	2c00      	cmp	r4, #0
 8009038:	da02      	bge.n	8009040 <floor+0xd0>
 800903a:	2e14      	cmp	r6, #20
 800903c:	d103      	bne.n	8009046 <floor+0xd6>
 800903e:	3401      	adds	r4, #1
 8009040:	ea25 0507 	bic.w	r5, r5, r7
 8009044:	e7b7      	b.n	8008fb6 <floor+0x46>
 8009046:	2301      	movs	r3, #1
 8009048:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800904c:	fa03 f606 	lsl.w	r6, r3, r6
 8009050:	4435      	add	r5, r6
 8009052:	4545      	cmp	r5, r8
 8009054:	bf38      	it	cc
 8009056:	18e4      	addcc	r4, r4, r3
 8009058:	e7f2      	b.n	8009040 <floor+0xd0>
 800905a:	2500      	movs	r5, #0
 800905c:	462c      	mov	r4, r5
 800905e:	e7aa      	b.n	8008fb6 <floor+0x46>
 8009060:	8800759c 	.word	0x8800759c
 8009064:	7e37e43c 	.word	0x7e37e43c
 8009068:	bff00000 	.word	0xbff00000
 800906c:	000fffff 	.word	0x000fffff

08009070 <scalbn>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	ec55 4b10 	vmov	r4, r5, d0
 8009076:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800907a:	4606      	mov	r6, r0
 800907c:	462b      	mov	r3, r5
 800907e:	b99a      	cbnz	r2, 80090a8 <scalbn+0x38>
 8009080:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009084:	4323      	orrs	r3, r4
 8009086:	d036      	beq.n	80090f6 <scalbn+0x86>
 8009088:	4b39      	ldr	r3, [pc, #228]	; (8009170 <scalbn+0x100>)
 800908a:	4629      	mov	r1, r5
 800908c:	ee10 0a10 	vmov	r0, s0
 8009090:	2200      	movs	r2, #0
 8009092:	f7f7 fac1 	bl	8000618 <__aeabi_dmul>
 8009096:	4b37      	ldr	r3, [pc, #220]	; (8009174 <scalbn+0x104>)
 8009098:	429e      	cmp	r6, r3
 800909a:	4604      	mov	r4, r0
 800909c:	460d      	mov	r5, r1
 800909e:	da10      	bge.n	80090c2 <scalbn+0x52>
 80090a0:	a32b      	add	r3, pc, #172	; (adr r3, 8009150 <scalbn+0xe0>)
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	e03a      	b.n	800911e <scalbn+0xae>
 80090a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80090ac:	428a      	cmp	r2, r1
 80090ae:	d10c      	bne.n	80090ca <scalbn+0x5a>
 80090b0:	ee10 2a10 	vmov	r2, s0
 80090b4:	4620      	mov	r0, r4
 80090b6:	4629      	mov	r1, r5
 80090b8:	f7f7 f8f8 	bl	80002ac <__adddf3>
 80090bc:	4604      	mov	r4, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	e019      	b.n	80090f6 <scalbn+0x86>
 80090c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80090c6:	460b      	mov	r3, r1
 80090c8:	3a36      	subs	r2, #54	; 0x36
 80090ca:	4432      	add	r2, r6
 80090cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80090d0:	428a      	cmp	r2, r1
 80090d2:	dd08      	ble.n	80090e6 <scalbn+0x76>
 80090d4:	2d00      	cmp	r5, #0
 80090d6:	a120      	add	r1, pc, #128	; (adr r1, 8009158 <scalbn+0xe8>)
 80090d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090dc:	da1c      	bge.n	8009118 <scalbn+0xa8>
 80090de:	a120      	add	r1, pc, #128	; (adr r1, 8009160 <scalbn+0xf0>)
 80090e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e4:	e018      	b.n	8009118 <scalbn+0xa8>
 80090e6:	2a00      	cmp	r2, #0
 80090e8:	dd08      	ble.n	80090fc <scalbn+0x8c>
 80090ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80090ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80090f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80090f6:	ec45 4b10 	vmov	d0, r4, r5
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009100:	da19      	bge.n	8009136 <scalbn+0xc6>
 8009102:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009106:	429e      	cmp	r6, r3
 8009108:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800910c:	dd0a      	ble.n	8009124 <scalbn+0xb4>
 800910e:	a112      	add	r1, pc, #72	; (adr r1, 8009158 <scalbn+0xe8>)
 8009110:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e2      	bne.n	80090de <scalbn+0x6e>
 8009118:	a30f      	add	r3, pc, #60	; (adr r3, 8009158 <scalbn+0xe8>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 fa7b 	bl	8000618 <__aeabi_dmul>
 8009122:	e7cb      	b.n	80090bc <scalbn+0x4c>
 8009124:	a10a      	add	r1, pc, #40	; (adr r1, 8009150 <scalbn+0xe0>)
 8009126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0b8      	beq.n	80090a0 <scalbn+0x30>
 800912e:	a10e      	add	r1, pc, #56	; (adr r1, 8009168 <scalbn+0xf8>)
 8009130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009134:	e7b4      	b.n	80090a0 <scalbn+0x30>
 8009136:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800913a:	3236      	adds	r2, #54	; 0x36
 800913c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009140:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009144:	4620      	mov	r0, r4
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <scalbn+0x108>)
 8009148:	2200      	movs	r2, #0
 800914a:	e7e8      	b.n	800911e <scalbn+0xae>
 800914c:	f3af 8000 	nop.w
 8009150:	c2f8f359 	.word	0xc2f8f359
 8009154:	01a56e1f 	.word	0x01a56e1f
 8009158:	8800759c 	.word	0x8800759c
 800915c:	7e37e43c 	.word	0x7e37e43c
 8009160:	8800759c 	.word	0x8800759c
 8009164:	fe37e43c 	.word	0xfe37e43c
 8009168:	c2f8f359 	.word	0xc2f8f359
 800916c:	81a56e1f 	.word	0x81a56e1f
 8009170:	43500000 	.word	0x43500000
 8009174:	ffff3cb0 	.word	0xffff3cb0
 8009178:	3c900000 	.word	0x3c900000

0800917c <_init>:
 800917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917e:	bf00      	nop
 8009180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009182:	bc08      	pop	{r3}
 8009184:	469e      	mov	lr, r3
 8009186:	4770      	bx	lr

08009188 <_fini>:
 8009188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918a:	bf00      	nop
 800918c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800918e:	bc08      	pop	{r3}
 8009190:	469e      	mov	lr, r3
 8009192:	4770      	bx	lr
