
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a29c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800a440  0800a440  0001a440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a900  0800a900  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a900  0800a900  0001a900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a908  0800a908  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a908  0800a908  0001a908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a90c  0800a90c  0001a90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  20000070  0800a980  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  0800a980  000207c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101c5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233a  00000000  00000000  00030265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000325a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  000333c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001761b  00000000  00000000  00034108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb91  00000000  00000000  0004b723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903c3  00000000  00000000  0005b2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d4c  00000000  00000000  000eb6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a424 	.word	0x0800a424

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800a424 	.word	0x0800a424

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <HAL_UART_RxCpltCallback>:
/* reduction values for motors */
const uint8_t reduction1 = 1; //10;
const uint8_t reduction2 = 1; // 5;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    char *cmd, *data, *value;
    uint8_t i = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	74fb      	strb	r3, [r7, #19]
    /* read the first characters */
    cmd = strtok((char*) &rx_data, ":");
 8000f18:	492b      	ldr	r1, [pc, #172]	; (8000fc8 <HAL_UART_RxCpltCallback+0xbc>)
 8000f1a:	482c      	ldr	r0, [pc, #176]	; (8000fcc <HAL_UART_RxCpltCallback+0xc0>)
 8000f1c:	f006 f9ce 	bl	80072bc <strtok>
 8000f20:	60f8      	str	r0, [r7, #12]
    if(strcmp(cmd, "trj")){ /* trj case*/
 8000f22:	492b      	ldr	r1, [pc, #172]	; (8000fd0 <HAL_UART_RxCpltCallback+0xc4>)
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f7ff f95b 	bl	80001e0 <strcmp>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d041      	beq.n	8000fb4 <HAL_UART_RxCpltCallback+0xa8>
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        data = strtok(NULL, ":");
 8000f30:	4925      	ldr	r1, [pc, #148]	; (8000fc8 <HAL_UART_RxCpltCallback+0xbc>)
 8000f32:	2000      	movs	r0, #0
 8000f34:	f006 f9c2 	bl	80072bc <strtok>
 8000f38:	6178      	str	r0, [r7, #20]
        while(data != NULL){
 8000f3a:	e028      	b.n	8000f8e <HAL_UART_RxCpltCallback+0x82>
            if(i == 6) break; /* reading penup */
 8000f3c:	7cfb      	ldrb	r3, [r7, #19]
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d029      	beq.n	8000f96 <HAL_UART_RxCpltCallback+0x8a>
            value = "0x"; /* will contain the value extracted from the received string */
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_UART_RxCpltCallback+0xc8>)
 8000f44:	60bb      	str	r3, [r7, #8]
            strcat(value, data); /* string concatenation REF: https://www.programiz.com/c-programming/library-function/string.h/strcat */
 8000f46:	6979      	ldr	r1, [r7, #20]
 8000f48:	68b8      	ldr	r0, [r7, #8]
 8000f4a:	f006 f9a7 	bl	800729c <strcat>
            rbpush((((ringbuffer_t *) &manip)+i),  strtoull(value, NULL, 16)); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 8000f4e:	7cfb      	ldrb	r3, [r7, #19]
 8000f50:	2258      	movs	r2, #88	; 0x58
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <HAL_UART_RxCpltCallback+0xcc>)
 8000f58:	189c      	adds	r4, r3, r2
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	68b8      	ldr	r0, [r7, #8]
 8000f60:	f006 fb2c 	bl	80075bc <strtoull>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fb1e 	bl	80005ac <__aeabi_ul2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	ec43 2b10 	vmov	d0, r2, r3
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f002 f9a3 	bl	80032c4 <rbpush>
            data = strtok(NULL, ":");
 8000f7e:	4912      	ldr	r1, [pc, #72]	; (8000fc8 <HAL_UART_RxCpltCallback+0xbc>)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f006 f99b 	bl	80072bc <strtok>
 8000f86:	6178      	str	r0, [r7, #20]
            i++;
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	74fb      	strb	r3, [r7, #19]
        while(data != NULL){
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1d3      	bne.n	8000f3c <HAL_UART_RxCpltCallback+0x30>
 8000f94:	e000      	b.n	8000f98 <HAL_UART_RxCpltCallback+0x8c>
            if(i == 6) break; /* reading penup */
 8000f96:	bf00      	nop
        }
        rbpush(&manip.penup, (double) atoi(data));
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	f006 f949 	bl	8007230 <atoi>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff facf 	bl	8000544 <__aeabi_i2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	ec43 2b10 	vmov	d0, r2, r3
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <HAL_UART_RxCpltCallback+0xd0>)
 8000fb0:	f002 f988 	bl	80032c4 <rbpush>
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(huart, rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8000fb4:	2240      	movs	r2, #64	; 0x40
 8000fb6:	4905      	ldr	r1, [pc, #20]	; (8000fcc <HAL_UART_RxCpltCallback+0xc0>)
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f005 f884 	bl	80060c6 <HAL_UART_Receive_DMA>
}
 8000fbe:	bf00      	nop
 8000fc0:	371c      	adds	r7, #28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	0800a440 	.word	0x0800a440
 8000fcc:	2000008c 	.word	0x2000008c
 8000fd0:	0800a444 	.word	0x0800a444
 8000fd4:	0800a448 	.word	0x0800a448
 8000fd8:	200000d0 	.word	0x200000d0
 8000fdc:	200002e0 	.word	0x200002e0

08000fe0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
    // TODO: Implement limit switch handling
    uint32_t now;
    now = HAL_GetTick();
 8000fea:	f002 fdf5 	bl	8003bd8 <HAL_GetTick>
 8000fee:	60f8      	str	r0, [r7, #12]
    if((now - previous_trigger) > DEBOUNCE_DELAY){
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b32      	cmp	r3, #50	; 0x32
 8000ffa:	d913      	bls.n	8001024 <HAL_GPIO_EXTI_Callback+0x44>
        if(!triggered){
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_GPIO_EXTI_Callback+0x50>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d105      	bne.n	8001010 <HAL_GPIO_EXTI_Callback+0x30>
            uint8_t limit_switch = 1;
 8001004:	2301      	movs	r3, #1
 8001006:	72fb      	strb	r3, [r7, #11]
            // SECTION - DEBUG
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001008:	2120      	movs	r1, #32
 800100a:	480a      	ldr	r0, [pc, #40]	; (8001034 <HAL_GPIO_EXTI_Callback+0x54>)
 800100c:	f003 fca1 	bl	8004952 <HAL_GPIO_TogglePin>
            // !SECTION - DEBUG
        }
        triggered = 1-triggered;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_GPIO_EXTI_Callback+0x50>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f1c3 0301 	rsb	r3, r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_GPIO_EXTI_Callback+0x50>)
 800101c:	701a      	strb	r2, [r3, #0]
        previous_trigger = now;
 800101e:	4a03      	ldr	r2, [pc, #12]	; (800102c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6013      	str	r3, [r2, #0]
    }
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200005e0 	.word	0x200005e0
 8001030:	200005e4 	.word	0x200005e4
 8001034:	40020000 	.word	0x40020000

08001038 <init_man>:
- man_t *manip: man_t obj. to initialize;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e00b      	b.n	800105e <init_man+0x26>
        rbclear((((ringbuffer_t *) manip)+i));
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2258      	movs	r2, #88	; 0x58
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fa10 	bl	8003478 <rbclear>
    for(i = 0; i < 14; i++){
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	3301      	adds	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b0d      	cmp	r3, #13
 8001062:	d9f0      	bls.n	8001046 <init_man+0xe>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e018      	b.n	800109c <init_man+0x64>
        manip->B[i] = (double) 0;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	339a      	adds	r3, #154	; 0x9a
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	18d1      	adds	r1, r2, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	e9c1 2300 	strd	r2, r3, [r1]
        manip->C[i] = (double) 0;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	339e      	adds	r3, #158	; 0x9e
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	18d1      	adds	r1, r2, r3
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < 4; i++){
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d9e3      	bls.n	800106a <init_man+0x32>
    }
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <dot>:
- double *C: pointer to a vector of doubles of size nA*mB, which represents the resulting nAxmB matrix -> if the operation cannot be done, it will be NULL;
@outputs: 
- uint8_t: 0 or 1 that shows whether the operation completed successfully or not.
@#
*/
uint8_t dot(double *A, uint8_t nA, uint8_t mA, double* B, uint8_t nB, uint8_t mB, double* C){ /* nAxmA * nBxmB dot product */
 80010ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010b0:	b087      	sub	sp, #28
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	72fb      	strb	r3, [r7, #11]
 80010bc:	4613      	mov	r3, r2
 80010be:	72bb      	strb	r3, [r7, #10]
        this method exists just to make the code more readable and understand what each
        operation actually does instead of having meaningless calculations */
    
    /* C[i, j] = \sum_k A[i, k]*B[k, j] */
    /* given n rows and m columns, the matrix indexes i, j correspond to j+i*m array index */
    if(mA != nB){
 80010c0:	7aba      	ldrb	r2, [r7, #10]
 80010c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d003      	beq.n	80010d2 <dot+0x26>
        C = NULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
        return 0; /* matrix multiplication cannot be done */
 80010ce:	2300      	movs	r3, #0
 80010d0:	e074      	b.n	80011bc <dot+0x110>
    }
    uint8_t i, j, k;
    for(i = 0; i < nA*mB; i++){
 80010d2:	2300      	movs	r3, #0
 80010d4:	75fb      	strb	r3, [r7, #23]
 80010d6:	e00c      	b.n	80010f2 <dot+0x46>
        C[i] = (double) 0.0;
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010de:	18d1      	adds	r1, r2, r3
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < nA*mB; i++){
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	3301      	adds	r3, #1
 80010f0:	75fb      	strb	r3, [r7, #23]
 80010f2:	7dfa      	ldrb	r2, [r7, #23]
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 80010fa:	fb01 f303 	mul.w	r3, r1, r3
 80010fe:	429a      	cmp	r2, r3
 8001100:	dbea      	blt.n	80010d8 <dot+0x2c>
    }

    for( i = 0; i < nA; i++){
 8001102:	2300      	movs	r3, #0
 8001104:	75fb      	strb	r3, [r7, #23]
 8001106:	e054      	b.n	80011b2 <dot+0x106>
        for( j = 0; j < mB; j++){
 8001108:	2300      	movs	r3, #0
 800110a:	75bb      	strb	r3, [r7, #22]
 800110c:	e049      	b.n	80011a2 <dot+0xf6>
            for( k = 0; k < mA; k++){
 800110e:	2300      	movs	r3, #0
 8001110:	757b      	strb	r3, [r7, #21]
 8001112:	e03f      	b.n	8001194 <dot+0xe8>
                C[j+i*mB] += (double) (A[k+i*mA]*B[j+k*mB]);
 8001114:	7dba      	ldrb	r2, [r7, #22]
 8001116:	7dfb      	ldrb	r3, [r7, #23]
 8001118:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800111c:	fb01 f303 	mul.w	r3, r1, r3
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001126:	4413      	add	r3, r2
 8001128:	e9d3 4500 	ldrd	r4, r5, [r3]
 800112c:	7d7a      	ldrb	r2, [r7, #21]
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	7ab9      	ldrb	r1, [r7, #10]
 8001132:	fb01 f303 	mul.w	r3, r1, r3
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001142:	7dba      	ldrb	r2, [r7, #22]
 8001144:	7d7b      	ldrb	r3, [r7, #21]
 8001146:	f897 603c 	ldrb.w	r6, [r7, #60]	; 0x3c
 800114a:	fb06 f303 	mul.w	r3, r6, r3
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff fa5d 	bl	8000618 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4690      	mov	r8, r2
 8001164:	4699      	mov	r9, r3
 8001166:	7dba      	ldrb	r2, [r7, #22]
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800116e:	fb01 f303 	mul.w	r3, r1, r3
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001178:	18d6      	adds	r6, r2, r3
 800117a:	4642      	mov	r2, r8
 800117c:	464b      	mov	r3, r9
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f893 	bl	80002ac <__adddf3>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	e9c6 2300 	strd	r2, r3, [r6]
            for( k = 0; k < mA; k++){
 800118e:	7d7b      	ldrb	r3, [r7, #21]
 8001190:	3301      	adds	r3, #1
 8001192:	757b      	strb	r3, [r7, #21]
 8001194:	7d7a      	ldrb	r2, [r7, #21]
 8001196:	7abb      	ldrb	r3, [r7, #10]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3bb      	bcc.n	8001114 <dot+0x68>
        for( j = 0; j < mB; j++){
 800119c:	7dbb      	ldrb	r3, [r7, #22]
 800119e:	3301      	adds	r3, #1
 80011a0:	75bb      	strb	r3, [r7, #22]
 80011a2:	7dba      	ldrb	r2, [r7, #22]
 80011a4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3b0      	bcc.n	800110e <dot+0x62>
    for( i = 0; i < nA; i++){
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	3301      	adds	r3, #1
 80011b0:	75fb      	strb	r3, [r7, #23]
 80011b2:	7dfa      	ldrb	r2, [r7, #23]
 80011b4:	7afb      	ldrb	r3, [r7, #11]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3a6      	bcc.n	8001108 <dot+0x5c>
            }
        }
    }
    return 1; // matrix multiplication successfully completed
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080011c6 <inv2x2>:
- double *invM: pointer to the inverted matrix (NULL if inversion is not possible);
@outputs: 
- uint8_t: shows whether the inversion was completed or not
@#
*/
uint8_t inv2x2(double *M, double *invM){
 80011c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
    double d = DET(M);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3318      	adds	r3, #24
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa1a 	bl	8000618 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4692      	mov	sl, r2
 80011ea:	469b      	mov	fp, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3308      	adds	r3, #8
 80011f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3310      	adds	r3, #16
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fa0c 	bl	8000618 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4650      	mov	r0, sl
 8001206:	4659      	mov	r1, fp
 8001208:	f7ff f84e 	bl	80002a8 <__aeabi_dsub>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if(d == 0){
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001220:	f7ff fc62 	bl	8000ae8 <__aeabi_dcmpeq>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <inv2x2+0x6c>
        invM = NULL;
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
        return 0; /* Inversion not possible */
 800122e:	2300      	movs	r3, #0
 8001230:	e043      	b.n	80012ba <inv2x2+0xf4>
    }
    invM[0] =  M[3]/d;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3318      	adds	r3, #24
 8001236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800123a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800123e:	f7ff fb15 	bl	800086c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	6839      	ldr	r1, [r7, #0]
 8001248:	e9c1 2300 	strd	r2, r3, [r1]
    invM[3] =  M[0]/d;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	f103 0618 	add.w	r6, r3, #24
 8001258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800125c:	f7ff fb06 	bl	800086c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	e9c6 2300 	strd	r2, r3, [r6]
    invM[1] = -M[1]/d;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3308      	adds	r3, #8
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	4690      	mov	r8, r2
 8001272:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f103 0608 	add.w	r6, r3, #8
 800127c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001280:	4640      	mov	r0, r8
 8001282:	4649      	mov	r1, r9
 8001284:	f7ff faf2 	bl	800086c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9c6 2300 	strd	r2, r3, [r6]
    invM[2] = -M[2]/d;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3310      	adds	r3, #16
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	4614      	mov	r4, r2
 800129a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f103 0610 	add.w	r6, r3, #16
 80012a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012a8:	4620      	mov	r0, r4
 80012aa:	4629      	mov	r1, r5
 80012ac:	f7ff fade 	bl	800086c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c6 2300 	strd	r2, r3, [r6]
    return 1; /* Inversion completed successfully */
 80012b8:	2301      	movs	r3, #1
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080012c4 <sum>:
- double *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void sum(double *A, double *B, uint8_t n, double *C){
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 80012d4:	2300      	movs	r3, #0
 80012d6:	75fb      	strb	r3, [r7, #23]
 80012d8:	e018      	b.n	800130c <sum+0x48>
        C[i] = A[i] + B[i];
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	7dfc      	ldrb	r4, [r7, #23]
 80012f4:	00e4      	lsls	r4, r4, #3
 80012f6:	683d      	ldr	r5, [r7, #0]
 80012f8:	442c      	add	r4, r5
 80012fa:	f7fe ffd7 	bl	80002ac <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	e9c4 2300 	strd	r2, r3, [r4]
    for(i = 0; i < n; i++){
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	3301      	adds	r3, #1
 800130a:	75fb      	strb	r3, [r7, #23]
 800130c:	7dfa      	ldrb	r2, [r7, #23]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	429a      	cmp	r2, r3
 8001312:	d3e2      	bcc.n	80012da <sum+0x16>
    }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bdb0      	pop	{r4, r5, r7, pc}

0800131e <diff>:
- double *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void diff(double *A, double *B, uint8_t n, double *C){
 800131e:	b5b0      	push	{r4, r5, r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
 8001332:	e018      	b.n	8001366 <diff+0x48>
        C[i] = A[i] - B[i];
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	4413      	add	r3, r2
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	7dfc      	ldrb	r4, [r7, #23]
 800134e:	00e4      	lsls	r4, r4, #3
 8001350:	683d      	ldr	r5, [r7, #0]
 8001352:	442c      	add	r4, r5
 8001354:	f7fe ffa8 	bl	80002a8 <__aeabi_dsub>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	e9c4 2300 	strd	r2, r3, [r4]
    for(i = 0; i < n; i++){
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	3301      	adds	r3, #1
 8001364:	75fb      	strb	r3, [r7, #23]
 8001366:	7dfa      	ldrb	r2, [r7, #23]
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	429a      	cmp	r2, r3
 800136c:	d3e2      	bcc.n	8001334 <diff+0x16>
    }
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}

08001378 <det>:
- double *d: pointer to the variable that will hold the resulting determinant;
@outputs: 
- void;
@#
*/
void det(double *M, uint8_t n, double *d){
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	b08b      	sub	sp, #44	; 0x2c
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	460b      	mov	r3, r1
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	72fb      	strb	r3, [r7, #11]
    uint8_t i,j,k,found;
    int8_t det_sign;
    double temp, factor;
    if(n == 1){
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d106      	bne.n	800139a <det+0x22>
        *d = M[0];
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	e9c1 2300 	strd	r2, r3, [r1]
        return;
 8001398:	e16b      	b.n	8001672 <det+0x2fa>
    }
    if(n == 2){
 800139a:	7afb      	ldrb	r3, [r7, #11]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d121      	bne.n	80013e4 <det+0x6c>
        *d = DET(M);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3318      	adds	r3, #24
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7ff f933 	bl	8000618 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4614      	mov	r4, r2
 80013b8:	461d      	mov	r5, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3308      	adds	r3, #8
 80013be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3310      	adds	r3, #16
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f925 	bl	8000618 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7fe ff67 	bl	80002a8 <__aeabi_dsub>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	e9c1 2300 	strd	r2, r3, [r1]
        through the multiplication of its diagonal.
        If matrix A is transformed into matrix B via elementary row operations:
        1. row exchange: A_j exchanged with A_i-> detB = -detA;
        2. row subtraction: A_j -= k*A_i -> detB = detA;
    */
    found = 0; 
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    det_sign = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    for(k = 0; k < n; k++){
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80013f6:	e0f8      	b.n	80015ea <det+0x272>
        for(i = k; i < n; i++){
 80013f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001400:	e079      	b.n	80014f6 <det+0x17e>
            if(M[i*n] != 0){
 8001402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001406:	7afa      	ldrb	r2, [r7, #11]
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	f7ff fb63 	bl	8000ae8 <__aeabi_dcmpeq>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d155      	bne.n	80014d4 <det+0x15c>
                found = 1;
 8001428:	2301      	movs	r3, #1
 800142a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                if(i != k){
 800142e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001432:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001436:	429a      	cmp	r2, r3
 8001438:	d04c      	beq.n	80014d4 <det+0x15c>
                    det_sign *=-1; /* keep track of sign change */
 800143a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800143e:	425b      	negs	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    /* exchange rows */
                    for(j = k; j < n; j++){
 8001446:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800144a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800144e:	e03c      	b.n	80014ca <det+0x152>
                        temp = M[i*n+j];
 8001450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001454:	7afa      	ldrb	r2, [r7, #11]
 8001456:	fb03 f202 	mul.w	r2, r3, r2
 800145a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	e9c7 2304 	strd	r2, r3, [r7, #16]
                        M[i*n+j] = M[k*n+j];
 800146e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001472:	7afa      	ldrb	r2, [r7, #11]
 8001474:	fb03 f202 	mul.w	r2, r3, r2
 8001478:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001488:	7af9      	ldrb	r1, [r7, #11]
 800148a:	fb02 f101 	mul.w	r1, r2, r1
 800148e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001492:	440a      	add	r2, r1
 8001494:	00d2      	lsls	r2, r2, #3
 8001496:	68f9      	ldr	r1, [r7, #12]
 8001498:	4411      	add	r1, r2
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	e9c1 2300 	strd	r2, r3, [r1]
                        M[k*n+j] = temp;
 80014a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014a6:	7afa      	ldrb	r2, [r7, #11]
 80014a8:	fb03 f202 	mul.w	r2, r3, r2
 80014ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	18d1      	adds	r1, r2, r3
 80014b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014bc:	e9c1 2300 	strd	r2, r3, [r1]
                    for(j = k; j < n; j++){
 80014c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014c4:	3301      	adds	r3, #1
 80014c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3bd      	bcc.n	8001450 <det+0xd8>
                    }
                }
            }
            if(!found){
 80014d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d107      	bne.n	80014ec <det+0x174>
                *d = 0;
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	e9c1 2300 	strd	r2, r3, [r1]
                return;
 80014ea:	e0c2      	b.n	8001672 <det+0x2fa>
        for(i = k; i < n; i++){
 80014ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f0:	3301      	adds	r3, #1
 80014f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d380      	bcc.n	8001402 <det+0x8a>
            }
        }
        /* row subtraction */
        for(i = k+1; i < n; i++){
 8001500:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001504:	3301      	adds	r3, #1
 8001506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800150a:	e064      	b.n	80015d6 <det+0x25e>
            factor = (double) (M[i*n]/M[k*n]);
 800150c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001510:	7afa      	ldrb	r2, [r7, #11]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001520:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001524:	7afa      	ldrb	r2, [r7, #11]
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	f7ff f99a 	bl	800086c <__aeabi_ddiv>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for(j = k; j < n; j++){
 8001540:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001548:	e03b      	b.n	80015c2 <det+0x24a>
                M[i*n+j] -= M[k*n+j]*factor;
 800154a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800154e:	7afa      	ldrb	r2, [r7, #11]
 8001550:	fb03 f202 	mul.w	r2, r3, r2
 8001554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001564:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001568:	7afa      	ldrb	r2, [r7, #11]
 800156a:	fb03 f202 	mul.w	r2, r3, r2
 800156e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001582:	f7ff f849 	bl	8000618 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001592:	7afa      	ldrb	r2, [r7, #11]
 8001594:	fb03 f202 	mul.w	r2, r3, r2
 8001598:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	18d6      	adds	r6, r2, r3
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7fe fe7c 	bl	80002a8 <__aeabi_dsub>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	e9c6 2300 	strd	r2, r3, [r6]
            for(j = k; j < n; j++){
 80015b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015bc:	3301      	adds	r3, #1
 80015be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3be      	bcc.n	800154a <det+0x1d2>
        for(i = k+1; i < n; i++){
 80015cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d0:	3301      	adds	r3, #1
 80015d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015da:	7afb      	ldrb	r3, [r7, #11]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d395      	bcc.n	800150c <det+0x194>
    for(k = 0; k < n; k++){
 80015e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015e4:	3301      	adds	r3, #1
 80015e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80015ea:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f4ff af01 	bcc.w	80013f8 <det+0x80>
            }
        }
    }
    /* multiply elements on main diagonal */
    *d = 1;
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <det+0x300>)
 80015fe:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < n; i++){
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001608:	e01b      	b.n	8001642 <det+0x2ca>
        *d *= M[i*n+i];
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001614:	7afa      	ldrb	r2, [r7, #11]
 8001616:	fb03 f202 	mul.w	r2, r3, r2
 800161a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4413      	add	r3, r2
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7fe fff5 	bl	8000618 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < n; i++){
 8001638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800163c:	3301      	adds	r3, #1
 800163e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001642:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3de      	bcc.n	800160a <det+0x292>
    }
    *d *= det_sign; /* each row exchange changes the determinant sign */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001652:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff74 	bl	8000544 <__aeabi_i2d>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4620      	mov	r0, r4
 8001662:	4629      	mov	r1, r5
 8001664:	f7fe ffd8 	bl	8000618 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001672:	372c      	adds	r7, #44	; 0x2c
 8001674:	46bd      	mov	sp, r7
 8001676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001678:	3ff00000 	.word	0x3ff00000

0800167c <inv>:
- double *invM: pointer to the temporary variable that will hold the inverse matrix of M;
@outputs: 
- uint8_t: it is a boolean value that shows whether the inversion is completed successfully or not.
@#
*/
uint8_t inv(double *M, double *adjM, double *subM, double *trM, uint8_t n, double *invM){
 800167c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8001680:	b089      	sub	sp, #36	; 0x24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
    /* cofM and trM are passed by the user so that the size of the arrays are controlled by the user */
    uint8_t i;
    double d;
    for(i = 0; i < n*n; i++){
 800168c:	2300      	movs	r3, #0
 800168e:	77fb      	strb	r3, [r7, #31]
 8001690:	e00e      	b.n	80016b0 <inv+0x34>
        trM[i] = M[i]; // copy temporarily matrix M in trM
 8001692:	7ffb      	ldrb	r3, [r7, #31]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	7ffa      	ldrb	r2, [r7, #31]
 800169c:	00d2      	lsls	r2, r2, #3
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	4411      	add	r1, r2
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < n*n; i++){
 80016aa:	7ffb      	ldrb	r3, [r7, #31]
 80016ac:	3301      	adds	r3, #1
 80016ae:	77fb      	strb	r3, [r7, #31]
 80016b0:	7ffa      	ldrb	r2, [r7, #31]
 80016b2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80016b6:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	429a      	cmp	r2, r3
 80016c0:	dbe7      	blt.n	8001692 <inv+0x16>
    }
    det(trM, n, &d);
 80016c2:	f107 0210 	add.w	r2, r7, #16
 80016c6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80016ca:	4619      	mov	r1, r3
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f7ff fe53 	bl	8001378 <det>
    if(d == 0) return 0;
 80016d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	f7ff fa03 	bl	8000ae8 <__aeabi_dcmpeq>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <inv+0x70>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e03b      	b.n	8001764 <inv+0xe8>
    adj(M, subM, n, adjM);
 80016ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f83d 	bl	8001774 <adj>
    tr(adjM, n, n, trM);
 80016fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80016fe:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68b8      	ldr	r0, [r7, #8]
 8001706:	f000 f8ae 	bl	8001866 <tr>
    for(i = 0; i < n*n; i++){
 800170a:	2300      	movs	r3, #0
 800170c:	77fb      	strb	r3, [r7, #31]
 800170e:	e01f      	b.n	8001750 <inv+0xd4>
        invM[i] = (double) (1/d)*trM[i];
 8001710:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001714:	f04f 0000 	mov.w	r0, #0
 8001718:	4915      	ldr	r1, [pc, #84]	; (8001770 <inv+0xf4>)
 800171a:	f7ff f8a7 	bl	800086c <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4690      	mov	r8, r2
 8001724:	4699      	mov	r9, r3
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	4413      	add	r3, r2
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	7ff9      	ldrb	r1, [r7, #31]
 8001734:	00c9      	lsls	r1, r1, #3
 8001736:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001738:	1844      	adds	r4, r0, r1
 800173a:	4640      	mov	r0, r8
 800173c:	4649      	mov	r1, r9
 800173e:	f7fe ff6b 	bl	8000618 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	e9c4 2300 	strd	r2, r3, [r4]
    for(i = 0; i < n*n; i++){
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	3301      	adds	r3, #1
 800174e:	77fb      	strb	r3, [r7, #31]
 8001750:	7ffa      	ldrb	r2, [r7, #31]
 8001752:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001756:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	429a      	cmp	r2, r3
 8001760:	dbd6      	blt.n	8001710 <inv+0x94>
    }
    return 1;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3724      	adds	r7, #36	; 0x24
 8001768:	46bd      	mov	sp, r7
 800176a:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 800176e:	bf00      	nop
 8001770:	3ff00000 	.word	0x3ff00000

08001774 <adj>:
- double *adjM: pointer to the variable that will hold the resulting adjugate matrix;
@outputs: 
- void;
@#
*/
void adj(double *M, double *subM, uint8_t n, double *adjM){
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	71fb      	strb	r3, [r7, #7]
    uint8_t i,j,w,k;
    double d;
    for( i = 0; i < n; i++){
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
 8001788:	e064      	b.n	8001854 <adj+0xe0>
        for(j = 0; j < n; j++){
 800178a:	2300      	movs	r3, #0
 800178c:	77bb      	strb	r3, [r7, #30]
 800178e:	e05a      	b.n	8001846 <adj+0xd2>
            k=0;
 8001790:	2300      	movs	r3, #0
 8001792:	773b      	strb	r3, [r7, #28]
            w=0;
 8001794:	2300      	movs	r3, #0
 8001796:	777b      	strb	r3, [r7, #29]
            while(w < (n-1)*(n-1)){
 8001798:	e024      	b.n	80017e4 <adj+0x70>
                if(k%n != j && (uint8_t) (k/n) != i){
 800179a:	7f3b      	ldrb	r3, [r7, #28]
 800179c:	79fa      	ldrb	r2, [r7, #7]
 800179e:	fbb3 f1f2 	udiv	r1, r3, r2
 80017a2:	fb01 f202 	mul.w	r2, r1, r2
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	7fba      	ldrb	r2, [r7, #30]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d016      	beq.n	80017de <adj+0x6a>
 80017b0:	7f3a      	ldrb	r2, [r7, #28]
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	7ffa      	ldrb	r2, [r7, #31]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d00e      	beq.n	80017de <adj+0x6a>
                    subM[w] = M[k];
 80017c0:	7f3b      	ldrb	r3, [r7, #28]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	7f7a      	ldrb	r2, [r7, #29]
 80017ca:	00d2      	lsls	r2, r2, #3
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	4411      	add	r1, r2
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	e9c1 2300 	strd	r2, r3, [r1]
                    w++;
 80017d8:	7f7b      	ldrb	r3, [r7, #29]
 80017da:	3301      	adds	r3, #1
 80017dc:	777b      	strb	r3, [r7, #29]
                }
                k++;
 80017de:	7f3b      	ldrb	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	773b      	strb	r3, [r7, #28]
            while(w < (n-1)*(n-1)){
 80017e4:	7f7a      	ldrb	r2, [r7, #29]
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	79f9      	ldrb	r1, [r7, #7]
 80017ec:	3901      	subs	r1, #1
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	429a      	cmp	r2, r3
 80017f4:	dbd1      	blt.n	800179a <adj+0x26>
            }
            det(subM, n-1, &d);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f107 0210 	add.w	r2, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	68b8      	ldr	r0, [r7, #8]
 8001804:	f7ff fdb8 	bl	8001378 <det>
            if((i+j) % 2 != 0){
 8001808:	7ffa      	ldrb	r2, [r7, #31]
 800180a:	7fbb      	ldrb	r3, [r7, #30]
 800180c:	4413      	add	r3, r2
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <adj+0xb2>
                d *= -1;
 8001818:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800181c:	4614      	mov	r4, r2
 800181e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001822:	e9c7 4504 	strd	r4, r5, [r7, #16]
            }
            adjM[i*n+j] = d;
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	79fa      	ldrb	r2, [r7, #7]
 800182a:	fb03 f202 	mul.w	r2, r3, r2
 800182e:	7fbb      	ldrb	r3, [r7, #30]
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	18d1      	adds	r1, r2, r3
 8001838:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800183c:	e9c1 2300 	strd	r2, r3, [r1]
        for(j = 0; j < n; j++){
 8001840:	7fbb      	ldrb	r3, [r7, #30]
 8001842:	3301      	adds	r3, #1
 8001844:	77bb      	strb	r3, [r7, #30]
 8001846:	7fba      	ldrb	r2, [r7, #30]
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	429a      	cmp	r2, r3
 800184c:	d3a0      	bcc.n	8001790 <adj+0x1c>
    for( i = 0; i < n; i++){
 800184e:	7ffb      	ldrb	r3, [r7, #31]
 8001850:	3301      	adds	r3, #1
 8001852:	77fb      	strb	r3, [r7, #31]
 8001854:	7ffa      	ldrb	r2, [r7, #31]
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	429a      	cmp	r2, r3
 800185a:	d396      	bcc.n	800178a <adj+0x16>
        }
    }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bdb0      	pop	{r4, r5, r7, pc}

08001866 <tr>:
- double *trM: pointer to the variable that will hold the transposed matrix;
@outputs: 
- void;
@#
*/
void tr(double *M, uint8_t n, uint8_t m, double *trM){
 8001866:	b480      	push	{r7}
 8001868:	b087      	sub	sp, #28
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	72fb      	strb	r3, [r7, #11]
 8001874:	4613      	mov	r3, r2
 8001876:	72bb      	strb	r3, [r7, #10]
    uint8_t i,j;
    for(i = 0; i < n; i++){
 8001878:	2300      	movs	r3, #0
 800187a:	75fb      	strb	r3, [r7, #23]
 800187c:	e022      	b.n	80018c4 <tr+0x5e>
        for(j=0; j < m; j++){
 800187e:	2300      	movs	r3, #0
 8001880:	75bb      	strb	r3, [r7, #22]
 8001882:	e018      	b.n	80018b6 <tr+0x50>
            trM[j*n+i] = M[i*m+j];
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	7aba      	ldrb	r2, [r7, #10]
 8001888:	fb03 f202 	mul.w	r2, r3, r2
 800188c:	7dbb      	ldrb	r3, [r7, #22]
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	7dba      	ldrb	r2, [r7, #22]
 8001898:	7af9      	ldrb	r1, [r7, #11]
 800189a:	fb02 f101 	mul.w	r1, r2, r1
 800189e:	7dfa      	ldrb	r2, [r7, #23]
 80018a0:	440a      	add	r2, r1
 80018a2:	00d2      	lsls	r2, r2, #3
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4411      	add	r1, r2
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	e9c1 2300 	strd	r2, r3, [r1]
        for(j=0; j < m; j++){
 80018b0:	7dbb      	ldrb	r3, [r7, #22]
 80018b2:	3301      	adds	r3, #1
 80018b4:	75bb      	strb	r3, [r7, #22]
 80018b6:	7dba      	ldrb	r2, [r7, #22]
 80018b8:	7abb      	ldrb	r3, [r7, #10]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3e2      	bcc.n	8001884 <tr+0x1e>
    for(i = 0; i < n; i++){
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	3301      	adds	r3, #1
 80018c2:	75fb      	strb	r3, [r7, #23]
 80018c4:	7dfa      	ldrb	r2, [r7, #23]
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d3d8      	bcc.n	800187e <tr+0x18>
        }
    }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <pseudo_inv>:
- double *psinvM: pointer to the variable that will hold the pseudo-inverse;
@outputs: 
- void;
@#
*/
void pseudo_inv(double *M, double *trM, double *tempM, double *adjM, double *subM, double *invM, double *dotM, uint8_t n, double *psinvM){
 80018da:	b580      	push	{r7, lr}
 80018dc:	b088      	sub	sp, #32
 80018de:	af04      	add	r7, sp, #16
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]
    /* (M^T*M)^(-1)*M^T */
    tr(M, n, n, trM);
 80018e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018ec:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7ff ffb7 	bl	8001866 <tr>
    dot(trM, n, n, M, n, n, dotM);
 80018f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018fc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f7ff fbca 	bl	80010ac <dot>
    inv(dotM, adjM, subM, tempM, n, invM);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	6a38      	ldr	r0, [r7, #32]
 800192a:	f7ff fea7 	bl	800167c <inv>
    dot(invM, n, n, trM, n, n, psinvM);
 800192e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001932:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	9302      	str	r3, [sp, #8]
 800193a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	69f8      	ldr	r0, [r7, #28]
 800194a:	f7ff fbaf 	bl	80010ac <dot>
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <B_calc>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void B_calc(man_t *manip){
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    double q1,q2;
    rblast(&manip->q0_actual, &q1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001966:	f107 0210 	add.w	r2, r7, #16
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f001 fd2f 	bl	80033d0 <rblast>
    rblast(&manip->q1_actual, &q2);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001978:	f107 0208 	add.w	r2, r7, #8
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f001 fd26 	bl	80033d0 <rblast>
    manip->B[0] = (double) (0.024938*cos(q1 + 2*q2) + 0.12469*cos(q1 + q2) + 0.26194*cos(q1) + 0.074812*cos(q2) + 0.16349);
 8001984:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	f7fe fc8e 	bl	80002ac <__adddf3>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800199c:	f7fe fc86 	bl	80002ac <__adddf3>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	ec43 2b17 	vmov	d7, r2, r3
 80019a8:	eeb0 0a47 	vmov.f32	s0, s14
 80019ac:	eef0 0a67 	vmov.f32	s1, s15
 80019b0:	f006 fe0a 	bl	80085c8 <cos>
 80019b4:	ec51 0b10 	vmov	r0, r1, d0
 80019b8:	a3a9      	add	r3, pc, #676	; (adr r3, 8001c60 <B_calc+0x308>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fe2b 	bl	8000618 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4614      	mov	r4, r2
 80019c8:	461d      	mov	r5, r3
 80019ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d2:	f7fe fc6b 	bl	80002ac <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	ec43 2b17 	vmov	d7, r2, r3
 80019de:	eeb0 0a47 	vmov.f32	s0, s14
 80019e2:	eef0 0a67 	vmov.f32	s1, s15
 80019e6:	f006 fdef 	bl	80085c8 <cos>
 80019ea:	ec51 0b10 	vmov	r0, r1, d0
 80019ee:	a39e      	add	r3, pc, #632	; (adr r3, 8001c68 <B_calc+0x310>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fe10 	bl	8000618 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fc54 	bl	80002ac <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4614      	mov	r4, r2
 8001a0a:	461d      	mov	r5, r3
 8001a0c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a10:	eeb0 0a47 	vmov.f32	s0, s14
 8001a14:	eef0 0a67 	vmov.f32	s1, s15
 8001a18:	f006 fdd6 	bl	80085c8 <cos>
 8001a1c:	ec51 0b10 	vmov	r0, r1, d0
 8001a20:	a393      	add	r3, pc, #588	; (adr r3, 8001c70 <B_calc+0x318>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fdf7 	bl	8000618 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4620      	mov	r0, r4
 8001a30:	4629      	mov	r1, r5
 8001a32:	f7fe fc3b 	bl	80002ac <__adddf3>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4614      	mov	r4, r2
 8001a3c:	461d      	mov	r5, r3
 8001a3e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a42:	eeb0 0a47 	vmov.f32	s0, s14
 8001a46:	eef0 0a67 	vmov.f32	s1, s15
 8001a4a:	f006 fdbd 	bl	80085c8 <cos>
 8001a4e:	ec51 0b10 	vmov	r0, r1, d0
 8001a52:	a389      	add	r3, pc, #548	; (adr r3, 8001c78 <B_calc+0x320>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fdde 	bl	8000618 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fc22 	bl	80002ac <__adddf3>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	a383      	add	r3, pc, #524	; (adr r3, 8001c80 <B_calc+0x328>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fc19 	bl	80002ac <__adddf3>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f501 619a 	add.w	r1, r1, #1232	; 0x4d0
 8001a84:	e9c1 2300 	strd	r2, r3, [r1]
    manip->B[1] = (double) (0.012469*cos(q1 + 2*q2) + 0.09975*cos(q1 + q2) + 0.14962*cos(q1) + 0.049875*cos(q2) + 0.058307);
 8001a88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	f7fe fc0c 	bl	80002ac <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aa0:	f7fe fc04 	bl	80002ac <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ec43 2b17 	vmov	d7, r2, r3
 8001aac:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab0:	eef0 0a67 	vmov.f32	s1, s15
 8001ab4:	f006 fd88 	bl	80085c8 <cos>
 8001ab8:	ec51 0b10 	vmov	r0, r1, d0
 8001abc:	a372      	add	r3, pc, #456	; (adr r3, 8001c88 <B_calc+0x330>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fda9 	bl	8000618 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4614      	mov	r4, r2
 8001acc:	461d      	mov	r5, r3
 8001ace:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ad6:	f7fe fbe9 	bl	80002ac <__adddf3>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	ec43 2b17 	vmov	d7, r2, r3
 8001ae2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae6:	eef0 0a67 	vmov.f32	s1, s15
 8001aea:	f006 fd6d 	bl	80085c8 <cos>
 8001aee:	ec51 0b10 	vmov	r0, r1, d0
 8001af2:	a367      	add	r3, pc, #412	; (adr r3, 8001c90 <B_calc+0x338>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fd8e 	bl	8000618 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fbd2 	bl	80002ac <__adddf3>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b14:	eeb0 0a47 	vmov.f32	s0, s14
 8001b18:	eef0 0a67 	vmov.f32	s1, s15
 8001b1c:	f006 fd54 	bl	80085c8 <cos>
 8001b20:	ec51 0b10 	vmov	r0, r1, d0
 8001b24:	a35c      	add	r3, pc, #368	; (adr r3, 8001c98 <B_calc+0x340>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fd75 	bl	8000618 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f7fe fbb9 	bl	80002ac <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4614      	mov	r4, r2
 8001b40:	461d      	mov	r5, r3
 8001b42:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b46:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4a:	eef0 0a67 	vmov.f32	s1, s15
 8001b4e:	f006 fd3b 	bl	80085c8 <cos>
 8001b52:	ec51 0b10 	vmov	r0, r1, d0
 8001b56:	a352      	add	r3, pc, #328	; (adr r3, 8001ca0 <B_calc+0x348>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fd5c 	bl	8000618 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4620      	mov	r0, r4
 8001b66:	4629      	mov	r1, r5
 8001b68:	f7fe fba0 	bl	80002ac <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	a34c      	add	r3, pc, #304	; (adr r3, 8001ca8 <B_calc+0x350>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f7fe fb97 	bl	80002ac <__adddf3>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 8001b88:	e941 2302 	strd	r2, r3, [r1, #-8]
    manip->B[2] = manip->B[1]; // the matrix is symmetrical
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8001b92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 8001b9c:	e9c1 2300 	strd	r2, r3, [r1]
    manip->B[3] = (double) (0.074812*cos(q1 + q2) + 0.14962*cos(q1) + 0.024938*cos(q2) + 0.058309);
 8001ba0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ba8:	f7fe fb80 	bl	80002ac <__adddf3>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	ec43 2b17 	vmov	d7, r2, r3
 8001bb4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb8:	eef0 0a67 	vmov.f32	s1, s15
 8001bbc:	f006 fd04 	bl	80085c8 <cos>
 8001bc0:	ec51 0b10 	vmov	r0, r1, d0
 8001bc4:	a32c      	add	r3, pc, #176	; (adr r3, 8001c78 <B_calc+0x320>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fd25 	bl	8000618 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bda:	eeb0 0a47 	vmov.f32	s0, s14
 8001bde:	eef0 0a67 	vmov.f32	s1, s15
 8001be2:	f006 fcf1 	bl	80085c8 <cos>
 8001be6:	ec51 0b10 	vmov	r0, r1, d0
 8001bea:	a32b      	add	r3, pc, #172	; (adr r3, 8001c98 <B_calc+0x340>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	f7fe fd12 	bl	8000618 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	f7fe fb56 	bl	80002ac <__adddf3>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4614      	mov	r4, r2
 8001c06:	461d      	mov	r5, r3
 8001c08:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c10:	eef0 0a67 	vmov.f32	s1, s15
 8001c14:	f006 fcd8 	bl	80085c8 <cos>
 8001c18:	ec51 0b10 	vmov	r0, r1, d0
 8001c1c:	a310      	add	r3, pc, #64	; (adr r3, 8001c60 <B_calc+0x308>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fcf9 	bl	8000618 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe fb3d 	bl	80002ac <__adddf3>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	a31d      	add	r3, pc, #116	; (adr r3, 8001cb0 <B_calc+0x358>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fb34 	bl	80002ac <__adddf3>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 8001c4e:	e941 2302 	strd	r2, r3, [r1, #-8]
    /*  manip::B is actually a vector, but it can be seen as follows: 
        [B[0], B[1]]
        [B[2], B[3]] */
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	f3af 8000 	nop.w
 8001c60:	d9b5e95b 	.word	0xd9b5e95b
 8001c64:	3f998958 	.word	0x3f998958
 8001c68:	102363b2 	.word	0x102363b2
 8001c6c:	3fbfebaf 	.word	0x3fbfebaf
 8001c70:	fd60e94f 	.word	0xfd60e94f
 8001c74:	3fd0c39f 	.word	0x3fd0c39f
 8001c78:	15592d99 	.word	0x15592d99
 8001c7c:	3fb326e1 	.word	0x3fb326e1
 8001c80:	859c8c93 	.word	0x859c8c93
 8001c84:	3fc4ed3d 	.word	0x3fc4ed3d
 8001c88:	d9b5e95b 	.word	0xd9b5e95b
 8001c8c:	3f898958 	.word	0x3f898958
 8001c90:	4bc6a7f0 	.word	0x4bc6a7f0
 8001c94:	3fb98937 	.word	0x3fb98937
 8001c98:	8769ec2d 	.word	0x8769ec2d
 8001c9c:	3fc326bf 	.word	0x3fc326bf
 8001ca0:	4bc6a7f0 	.word	0x4bc6a7f0
 8001ca4:	3fa98937 	.word	0x3fa98937
 8001ca8:	44417870 	.word	0x44417870
 8001cac:	3fadda6a 	.word	0x3fadda6a
 8001cb0:	601ffb48 	.word	0x601ffb48
 8001cb4:	3faddaad 	.word	0x3faddaad

08001cb8 <C_calc>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void C_calc(man_t *manip){
 8001cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cbc:	b08a      	sub	sp, #40	; 0x28
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
    double q1, q2, dq1, dq2;
    rblast(&manip->q0_actual, &q1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001cc8:	f107 0220 	add.w	r2, r7, #32
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f001 fb7e 	bl	80033d0 <rblast>
    rblast(&manip->q1_actual, &q2);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001cda:	f107 0218 	add.w	r2, r7, #24
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f001 fb75 	bl	80033d0 <rblast>
    rblast(&manip->dq0_actual, &dq1);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001cec:	f107 0210 	add.w	r2, r7, #16
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f001 fb6c 	bl	80033d0 <rblast>
    rblast(&manip->dq1_actual, &dq2);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8001cfe:	f107 0208 	add.w	r2, r7, #8
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 fb63 	bl	80033d0 <rblast>
    manip->C[0] = (double) ( - 0.5*dq2*(0.024938*sin(q1 + 2*q2) + 0.049875*sin(q1 + q2) + 0.049875*sin(q2)));
 8001d0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4bb1      	ldr	r3, [pc, #708]	; (8001fd8 <C_calc+0x320>)
 8001d14:	f7fe fc80 	bl	8000618 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4614      	mov	r4, r2
 8001d1e:	461d      	mov	r5, r3
 8001d20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	f7fe fac0 	bl	80002ac <__adddf3>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d38:	f7fe fab8 	bl	80002ac <__adddf3>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	ec43 2b17 	vmov	d7, r2, r3
 8001d44:	eeb0 0a47 	vmov.f32	s0, s14
 8001d48:	eef0 0a67 	vmov.f32	s1, s15
 8001d4c:	f006 fc90 	bl	8008670 <sin>
 8001d50:	ec51 0b10 	vmov	r0, r1, d0
 8001d54:	a398      	add	r3, pc, #608	; (adr r3, 8001fb8 <C_calc+0x300>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fc5d 	bl	8000618 <__aeabi_dmul>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4690      	mov	r8, r2
 8001d64:	4699      	mov	r9, r3
 8001d66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6e:	f7fe fa9d 	bl	80002ac <__adddf3>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	ec43 2b17 	vmov	d7, r2, r3
 8001d7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d7e:	eef0 0a67 	vmov.f32	s1, s15
 8001d82:	f006 fc75 	bl	8008670 <sin>
 8001d86:	ec51 0b10 	vmov	r0, r1, d0
 8001d8a:	a38d      	add	r3, pc, #564	; (adr r3, 8001fc0 <C_calc+0x308>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	f7fe fc42 	bl	8000618 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4640      	mov	r0, r8
 8001d9a:	4649      	mov	r1, r9
 8001d9c:	f7fe fa86 	bl	80002ac <__adddf3>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4690      	mov	r8, r2
 8001da6:	4699      	mov	r9, r3
 8001da8:	ed97 7b06 	vldr	d7, [r7, #24]
 8001dac:	eeb0 0a47 	vmov.f32	s0, s14
 8001db0:	eef0 0a67 	vmov.f32	s1, s15
 8001db4:	f006 fc5c 	bl	8008670 <sin>
 8001db8:	ec51 0b10 	vmov	r0, r1, d0
 8001dbc:	a380      	add	r3, pc, #512	; (adr r3, 8001fc0 <C_calc+0x308>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fc29 	bl	8000618 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4640      	mov	r0, r8
 8001dcc:	4649      	mov	r1, r9
 8001dce:	f7fe fa6d 	bl	80002ac <__adddf3>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	4629      	mov	r1, r5
 8001dda:	f7fe fc1d 	bl	8000618 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 8001de8:	e9c1 2300 	strd	r2, r3, [r1]
    manip->C[1] = (double) ( - 0.012469*(dq1 + dq2)*(sin(q1 + 2*q2) + 2*sin(q1 + q2) + 2*sin(q2)));
 8001dec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001df4:	f7fe fa5a 	bl	80002ac <__adddf3>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	a371      	add	r3, pc, #452	; (adr r3, 8001fc8 <C_calc+0x310>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fc07 	bl	8000618 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	461d      	mov	r5, r3
 8001e12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	f7fe fa47 	bl	80002ac <__adddf3>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e2a:	f7fe fa3f 	bl	80002ac <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	ec43 2b17 	vmov	d7, r2, r3
 8001e36:	eeb0 0a47 	vmov.f32	s0, s14
 8001e3a:	eef0 0a67 	vmov.f32	s1, s15
 8001e3e:	f006 fc17 	bl	8008670 <sin>
 8001e42:	ec59 8b10 	vmov	r8, r9, d0
 8001e46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e4e:	f7fe fa2d 	bl	80002ac <__adddf3>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	ec43 2b17 	vmov	d7, r2, r3
 8001e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e5e:	eef0 0a67 	vmov.f32	s1, s15
 8001e62:	f006 fc05 	bl	8008670 <sin>
 8001e66:	ec51 0b10 	vmov	r0, r1, d0
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	f7fe fa1d 	bl	80002ac <__adddf3>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4640      	mov	r0, r8
 8001e78:	4649      	mov	r1, r9
 8001e7a:	f7fe fa17 	bl	80002ac <__adddf3>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4690      	mov	r8, r2
 8001e84:	4699      	mov	r9, r3
 8001e86:	ed97 7b06 	vldr	d7, [r7, #24]
 8001e8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e8e:	eef0 0a67 	vmov.f32	s1, s15
 8001e92:	f006 fbed 	bl	8008670 <sin>
 8001e96:	ec51 0b10 	vmov	r0, r1, d0
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	f7fe fa05 	bl	80002ac <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4640      	mov	r0, r8
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	f7fe f9ff 	bl	80002ac <__adddf3>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	4629      	mov	r1, r5
 8001eb6:	f7fe fbaf 	bl	8000618 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8001ec4:	e941 2302 	strd	r2, r3, [r1, #-8]
    manip->C[2] = (double) (dq1*(0.012469*sin(q1 + 2*q2) + 0.024938*sin(q1 + q2) + 0.024938*sin(q2)));
 8001ec8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	f7fe f9ec 	bl	80002ac <__adddf3>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ee0:	f7fe f9e4 	bl	80002ac <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	ec43 2b17 	vmov	d7, r2, r3
 8001eec:	eeb0 0a47 	vmov.f32	s0, s14
 8001ef0:	eef0 0a67 	vmov.f32	s1, s15
 8001ef4:	f006 fbbc 	bl	8008670 <sin>
 8001ef8:	ec51 0b10 	vmov	r0, r1, d0
 8001efc:	a334      	add	r3, pc, #208	; (adr r3, 8001fd0 <C_calc+0x318>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	f7fe fb89 	bl	8000618 <__aeabi_dmul>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4614      	mov	r4, r2
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f16:	f7fe f9c9 	bl	80002ac <__adddf3>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	ec43 2b17 	vmov	d7, r2, r3
 8001f22:	eeb0 0a47 	vmov.f32	s0, s14
 8001f26:	eef0 0a67 	vmov.f32	s1, s15
 8001f2a:	f006 fba1 	bl	8008670 <sin>
 8001f2e:	ec51 0b10 	vmov	r0, r1, d0
 8001f32:	a321      	add	r3, pc, #132	; (adr r3, 8001fb8 <C_calc+0x300>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb6e 	bl	8000618 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f9b2 	bl	80002ac <__adddf3>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4614      	mov	r4, r2
 8001f4e:	461d      	mov	r5, r3
 8001f50:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f54:	eeb0 0a47 	vmov.f32	s0, s14
 8001f58:	eef0 0a67 	vmov.f32	s1, s15
 8001f5c:	f006 fb88 	bl	8008670 <sin>
 8001f60:	ec51 0b10 	vmov	r0, r1, d0
 8001f64:	a314      	add	r3, pc, #80	; (adr r3, 8001fb8 <C_calc+0x300>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe fb55 	bl	8000618 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4620      	mov	r0, r4
 8001f74:	4629      	mov	r1, r5
 8001f76:	f7fe f999 	bl	80002ac <__adddf3>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f86:	f7fe fb47 	bl	8000618 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8001f94:	e9c1 2300 	strd	r2, r3, [r1]
    manip->C[3] = (double) 0.0;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e941 2302 	strd	r2, r3, [r1, #-8]
    /*  manip::C is actually a vector, but it can be seen as follows: 
        [C[0], C[1]]
        [C[2], C[3]] */
}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fb6:	bf00      	nop
 8001fb8:	d9b5e95b 	.word	0xd9b5e95b
 8001fbc:	3f998958 	.word	0x3f998958
 8001fc0:	4bc6a7f0 	.word	0x4bc6a7f0
 8001fc4:	3fa98937 	.word	0x3fa98937
 8001fc8:	d9b5e95b 	.word	0xd9b5e95b
 8001fcc:	bf898958 	.word	0xbf898958
 8001fd0:	d9b5e95b 	.word	0xd9b5e95b
 8001fd4:	3f898958 	.word	0x3f898958
 8001fd8:	bfe00000 	.word	0xbfe00000

08001fdc <controller>:
- double *u: double[2] vector pointer that holds the control input to apply to motors (speed control);
@outputs: 
- void;
@#
*/
void controller(man_t *manip, double *u){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b0ce      	sub	sp, #312	; 0x138
 8001fe0:	af04      	add	r7, sp, #16
 8001fe2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001fe6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001fea:	6018      	str	r0, [r3, #0]
 8001fec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ff0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ff4:	6019      	str	r1, [r3, #0]
    double q[2], dq[2], ddq[2], q_actual[2], dq_actual[2], ddq_actual[2];
    double ep[2], ed[2], y[2], tau[2], Kpep[2], Kded[2], By[2], Cdq[2];
    double Bddq[2], invC[4], result[2];

    /* data preparation */
    rbpop(&manip->q0, &q[0]);
 8001ff6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ffa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f001 f9a8 	bl	800335c <rbpop>
    rbpop(&manip->q1, &q[1]);
 800200c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002010:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800201a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800201e:	3308      	adds	r3, #8
 8002020:	4619      	mov	r1, r3
 8002022:	4610      	mov	r0, r2
 8002024:	f001 f99a 	bl	800335c <rbpop>
    rbpop(&manip->dq0, &dq[0]);
 8002028:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800202c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	33b0      	adds	r3, #176	; 0xb0
 8002034:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f001 f98e 	bl	800335c <rbpop>
    rbpop(&manip->dq1, &dq[1]);
 8002040:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002044:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800204e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002052:	3308      	adds	r3, #8
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f001 f980 	bl	800335c <rbpop>
    rbpop(&manip->ddq0, &ddq[0]);
 800205c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002060:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800206a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f001 f973 	bl	800335c <rbpop>
    rbpop(&manip->ddq1, &ddq[1]);
 8002076:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800207a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8002084:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002088:	3308      	adds	r3, #8
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f001 f965 	bl	800335c <rbpop>
    rblast(&manip->q0_actual, &q_actual[0]);
 8002092:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002096:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80020a0:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 f992 	bl	80033d0 <rblast>
    rblast(&manip->q1_actual, &q_actual[1]);
 80020ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80020b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 80020ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020be:	3308      	adds	r3, #8
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f001 f984 	bl	80033d0 <rblast>
    rblast(&manip->dq0_actual, &dq_actual[0]);
 80020c8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80020cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80020d6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f001 f977 	bl	80033d0 <rblast>
    rblast(&manip->dq1_actual, &dq_actual[1]);
 80020e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80020e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f503 725c 	add.w	r2, r3, #880	; 0x370
 80020f0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020f4:	3308      	adds	r3, #8
 80020f6:	4619      	mov	r1, r3
 80020f8:	4610      	mov	r0, r2
 80020fa:	f001 f969 	bl	80033d0 <rblast>
    rblast(&manip->ddq0_actual, &ddq_actual[0]);
 80020fe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002102:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800210c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f001 f95c 	bl	80033d0 <rblast>
    rblast(&manip->ddq1_actual, &ddq_actual[1]);
 8002118:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800211c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 8002126:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800212a:	3308      	adds	r3, #8
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f001 f94e 	bl	80033d0 <rblast>
    B_calc(manip);
 8002134:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002138:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	f7ff fc0b 	bl	8001958 <B_calc>
    C_calc(manip);
 8002142:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002146:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	f7ff fdb4 	bl	8001cb8 <C_calc>

    diff(q, q_actual, 2, ep); /* q - q_d */
 8002150:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002154:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8002158:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800215c:	2202      	movs	r2, #2
 800215e:	f7ff f8de 	bl	800131e <diff>
    diff(dq, dq_actual, 2, ed); /* dq - dq_d */
 8002162:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002166:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800216a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800216e:	2202      	movs	r2, #2
 8002170:	f7ff f8d5 	bl	800131e <diff>

    dot((double *) Kp, 2, 2, ep, 2, 1, Kpep); /* Kp*ep */
 8002174:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8002178:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800217c:	9302      	str	r3, [sp, #8]
 800217e:	2301      	movs	r3, #1
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	2302      	movs	r3, #2
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	4613      	mov	r3, r2
 8002188:	2202      	movs	r2, #2
 800218a:	2102      	movs	r1, #2
 800218c:	484c      	ldr	r0, [pc, #304]	; (80022c0 <controller+0x2e4>)
 800218e:	f7fe ff8d 	bl	80010ac <dot>
    dot((double *) Kd, 2, 2, ed, 2, 1, Kded); /* Kd*ed */
 8002192:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002196:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800219a:	9302      	str	r3, [sp, #8]
 800219c:	2301      	movs	r3, #1
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	2302      	movs	r3, #2
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	2202      	movs	r2, #2
 80021a8:	2102      	movs	r1, #2
 80021aa:	4846      	ldr	r0, [pc, #280]	; (80022c4 <controller+0x2e8>)
 80021ac:	f7fe ff7e 	bl	80010ac <dot>

    /* y = Kp*e_p + Kd*e_d + ddq */
    sum(Kpep, Kded, 2, y);
 80021b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021b4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80021b8:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80021bc:	2202      	movs	r2, #2
 80021be:	f7ff f881 	bl	80012c4 <sum>
    sum(y, ddq, 2, y);
 80021c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021c6:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80021ca:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80021ce:	2202      	movs	r2, #2
 80021d0:	f7ff f878 	bl	80012c4 <sum>

    dot(manip->B, 2, 2, y, 2, 1, By); /* B*y */
 80021d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80021d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f503 609a 	add.w	r0, r3, #1232	; 0x4d0
 80021e2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80021e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021ea:	9302      	str	r3, [sp, #8]
 80021ec:	2301      	movs	r3, #1
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	2302      	movs	r3, #2
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	2202      	movs	r2, #2
 80021f8:	2102      	movs	r1, #2
 80021fa:	f7fe ff57 	bl	80010ac <dot>
    dot(manip->C, 2, 2, dq_actual, 2, 1, Cdq); /* C*dq */
 80021fe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002202:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f503 609e 	add.w	r0, r3, #1264	; 0x4f0
 800220c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8002210:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	2301      	movs	r3, #1
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	2302      	movs	r3, #2
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	2202      	movs	r2, #2
 8002222:	2102      	movs	r1, #2
 8002224:	f7fe ff42 	bl	80010ac <dot>
    sum(By, Cdq, 2, tau); /* tau = B*y+C*dq  */
 8002228:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800222c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002230:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002234:	2202      	movs	r2, #2
 8002236:	f7ff f845 	bl	80012c4 <sum>

    dot(manip->B, 2, 2, ddq_actual, 2, 1, Bddq); /* B*ddq */
 800223a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800223e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 609a 	add.w	r0, r3, #1232	; 0x4d0
 8002248:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800224c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	2301      	movs	r3, #1
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	2302      	movs	r3, #2
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	2202      	movs	r2, #2
 800225e:	2102      	movs	r1, #2
 8002260:	f7fe ff24 	bl	80010ac <dot>
    diff(tau, Bddq, 2, result); /* tau - B*ddq */
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800226c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002270:	2202      	movs	r2, #2
 8002272:	f7ff f854 	bl	800131e <diff>
    inv2x2(manip->C, invC); /* inv(C) */
 8002276:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800227a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8002284:	f107 0218 	add.w	r2, r7, #24
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe ff9b 	bl	80011c6 <inv2x2>
    dot(invC, 2, 2, result, 2, 1, u); /* u = inv(C) * (tau - B*ddq) */
 8002290:	f107 0208 	add.w	r2, r7, #8
 8002294:	f107 0018 	add.w	r0, r7, #24
 8002298:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800229c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	2301      	movs	r3, #1
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	2302      	movs	r3, #2
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	2202      	movs	r2, #2
 80022b0:	2102      	movs	r1, #2
 80022b2:	f7fe fefb 	bl	80010ac <dot>
}
 80022b6:	bf00      	nop
 80022b8:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	0800a450 	.word	0x0800a450
 80022c4:	0800a470 	.word	0x0800a470

080022c8 <rad2stepdir>:
- int8_t *dir: pointer to the variable that will hold the direction (+1 means counterclockwise, -1 means clockwise);
@outputs: 
- void;
@#
*/
void rad2stepdir(double dq, double resolution, double frequency, uint32_t *steps, int8_t *dir){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	ed87 0b06 	vstr	d0, [r7, #24]
 80022d2:	ed87 1b04 	vstr	d1, [r7, #16]
 80022d6:	ed87 2b02 	vstr	d2, [r7, #8]
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
    dq = delta_q/delta_t = delta_q*f -> stepdir*Resolution*f
    stepdir = dq/(Resolution*f)
    dir = sign(stepdir)
    step = abs(stepdir)
    */
    int32_t stepdir = (int32_t) (dq/(resolution*frequency));
 80022de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022e6:	f7fe f997 	bl	8000618 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022f2:	f7fe fabb 	bl	800086c <__aeabi_ddiv>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fc3b 	bl	8000b78 <__aeabi_d2iz>
 8002302:	4603      	mov	r3, r0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
    *dir = SIGN(stepdir);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	43db      	mvns	r3, r3
 800230a:	0fdb      	lsrs	r3, r3, #31
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	2b00      	cmp	r3, #0
 8002314:	bfd4      	ite	le
 8002316:	2301      	movle	r3, #1
 8002318:	2300      	movgt	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	b25a      	sxtb	r2, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	701a      	strb	r2, [r3, #0]
    *steps = abs(stepdir);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	2b00      	cmp	r3, #0
 800232a:	bfb8      	it	lt
 800232c:	425b      	neglt	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	0000      	movs	r0, r0
	...

08002340 <speed_estimation>:
- double *a_est: pointer to the variable that will hold the acceleration estimation;
@outputs: 
- void;
@#
*/
void speed_estimation(ringbuffer_t *q_actual, double *v_est, double *a_est){
 8002340:	b5b0      	push	{r4, r5, r7, lr}
 8002342:	ed2d 8b02 	vpush	{d8}
 8002346:	f5ad 5dca 	sub.w	sp, sp, #6464	; 0x1940
 800234a:	b082      	sub	sp, #8
 800234c:	af06      	add	r7, sp, #24
 800234e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8002352:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8002356:	6018      	str	r0, [r3, #0]
 8002358:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800235c:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 8002360:	6019      	str	r1, [r3, #0]
 8002362:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8002366:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800236a:	601a      	str	r2, [r3, #0]
    /* temp matrices */
    double trM[ESTIMATION_STEPS*ESTIMATION_STEPS], tempM[ESTIMATION_STEPS*ESTIMATION_STEPS];
    double adjM[ESTIMATION_STEPS*ESTIMATION_STEPS], subM[(ESTIMATION_STEPS-1)*(ESTIMATION_STEPS-1)];
    double invM[ESTIMATION_STEPS*ESTIMATION_STEPS], dotM[ESTIMATION_STEPS*ESTIMATION_STEPS];

    now = (double) HAL_GetTick(); /* time passed from when the process launch */
 800236c:	f001 fc34 	bl	8003bd8 <HAL_GetTick>
 8002370:	4603      	mov	r3, r0
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f8d6 	bl	8000524 <__aeabi_ui2d>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	f507 51c9 	add.w	r1, r7, #6432	; 0x1920
 8002380:	e9c1 2300 	strd	r2, r3, [r1]
    uint8_t i,j;
    for(i = 0; i < ESTIMATION_STEPS; i++){
 8002384:	2300      	movs	r3, #0
 8002386:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 800238a:	f102 020f 	add.w	r2, r2, #15
 800238e:	7013      	strb	r3, [r2, #0]
 8002390:	e07f      	b.n	8002492 <speed_estimation+0x152>
        for(j = 0; j < ESTIMATION_STEPS; j++){
 8002392:	2300      	movs	r3, #0
 8002394:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 8002398:	f102 020e 	add.w	r2, r2, #14
 800239c:	7013      	strb	r3, [r2, #0]
 800239e:	e066      	b.n	800246e <speed_estimation+0x12e>
            A[j+i*ESTIMATION_STEPS] = pow((double)(now - i*T_C), (double) ESTIMATION_STEPS-i-1);
 80023a0:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80023a4:	f103 030f 	add.w	r3, r3, #15
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8ca 	bl	8000544 <__aeabi_i2d>
 80023b0:	a37f      	add	r3, pc, #508	; (adr r3, 80025b0 <speed_estimation+0x270>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe f92f 	bl	8000618 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	f507 51c9 	add.w	r1, r7, #6432	; 0x1920
 80023c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023c6:	f7fd ff6f 	bl	80002a8 <__aeabi_dsub>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	ec43 2b18 	vmov	d8, r2, r3
 80023d2:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80023d6:	f103 030f 	add.w	r3, r3, #15
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f8b1 	bl	8000544 <__aeabi_i2d>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	f04f 0000 	mov.w	r0, #0
 80023ea:	496f      	ldr	r1, [pc, #444]	; (80025a8 <speed_estimation+0x268>)
 80023ec:	f7fd ff5c 	bl	80002a8 <__aeabi_dsub>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b6b      	ldr	r3, [pc, #428]	; (80025ac <speed_estimation+0x26c>)
 80023fe:	f7fd ff53 	bl	80002a8 <__aeabi_dsub>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	ec43 2b17 	vmov	d7, r2, r3
 800240a:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800240e:	f103 030e 	add.w	r3, r3, #14
 8002412:	7819      	ldrb	r1, [r3, #0]
 8002414:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002418:	f103 030f 	add.w	r3, r3, #15
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	18cc      	adds	r4, r1, r3
 8002428:	eeb0 1a47 	vmov.f32	s2, s14
 800242c:	eef0 1a67 	vmov.f32	s3, s15
 8002430:	eeb0 0a48 	vmov.f32	s0, s16
 8002434:	eef0 0a68 	vmov.f32	s1, s17
 8002438:	f006 f972 	bl	8008720 <pow>
 800243c:	eeb0 7a40 	vmov.f32	s14, s0
 8002440:	eef0 7a60 	vmov.f32	s15, s1
 8002444:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002448:	f103 0310 	add.w	r3, r3, #16
 800244c:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8002450:	00e3      	lsls	r3, r4, #3
 8002452:	4413      	add	r3, r2
 8002454:	ed83 7b00 	vstr	d7, [r3]
        for(j = 0; j < ESTIMATION_STEPS; j++){
 8002458:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800245c:	f103 030e 	add.w	r3, r3, #14
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 8002468:	f102 020e 	add.w	r2, r2, #14
 800246c:	7013      	strb	r3, [r2, #0]
 800246e:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002472:	f103 030e 	add.w	r3, r3, #14
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b09      	cmp	r3, #9
 800247a:	d991      	bls.n	80023a0 <speed_estimation+0x60>
    for(i = 0; i < ESTIMATION_STEPS; i++){
 800247c:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002480:	f103 030f 	add.w	r3, r3, #15
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 800248c:	f102 020f 	add.w	r2, r2, #15
 8002490:	7013      	strb	r3, [r2, #0]
 8002492:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002496:	f103 030f 	add.w	r3, r3, #15
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b09      	cmp	r3, #9
 800249e:	f67f af78 	bls.w	8002392 <speed_estimation+0x52>
        }
    }

    for(i = 0; i < ESTIMATION_STEPS; i++){
 80024a2:	2300      	movs	r3, #0
 80024a4:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 80024a8:	f102 020f 	add.w	r2, r2, #15
 80024ac:	7013      	strb	r3, [r2, #0]
 80024ae:	e021      	b.n	80024f4 <speed_estimation+0x1b4>
        rbget(q_actual, i, &X[i]);
 80024b0:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80024b4:	f103 030f 	add.w	r3, r3, #15
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	f507 52ad 	add.w	r2, r7, #5536	; 0x15a0
 80024be:	f102 0208 	add.w	r2, r2, #8
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	441a      	add	r2, r3
 80024c6:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80024ca:	f103 030f 	add.w	r3, r3, #15
 80024ce:	7819      	ldrb	r1, [r3, #0]
 80024d0:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80024d4:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	f000 ff99 	bl	8003410 <rbget>
    for(i = 0; i < ESTIMATION_STEPS; i++){
 80024de:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80024e2:	f103 030f 	add.w	r3, r3, #15
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 80024ee:	f102 020f 	add.w	r2, r2, #15
 80024f2:	7013      	strb	r3, [r2, #0]
 80024f4:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80024f8:	f103 030f 	add.w	r3, r3, #15
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b09      	cmp	r3, #9
 8002500:	d9d6      	bls.n	80024b0 <speed_estimation+0x170>
        ---
        p_i -> P[i]
        x_i=A_i*P -> X = [x_0; x_1; ...; x_n] = [A_0; A_1; ...; A_n]*P = A*P -> P = A^(-1)*X = (A^T*A)^(-1)*A^T*X
    */

    pseudo_inv(A, trM, tempM, adjM, subM, invM, dotM, ESTIMATION_STEPS, invA);
 8002502:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8002506:	3b18      	subs	r3, #24
 8002508:	f607 34f8 	addw	r4, r7, #3064	; 0xbf8
 800250c:	f607 7118 	addw	r1, r7, #3864	; 0xf18
 8002510:	f507 50af 	add.w	r0, r7, #5600	; 0x15e0
 8002514:	f100 0018 	add.w	r0, r0, #24
 8002518:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800251c:	f102 0218 	add.w	r2, r2, #24
 8002520:	9204      	str	r2, [sp, #16]
 8002522:	220a      	movs	r2, #10
 8002524:	9203      	str	r2, [sp, #12]
 8002526:	f107 0210 	add.w	r2, r7, #16
 800252a:	9202      	str	r2, [sp, #8]
 800252c:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8002530:	9201      	str	r2, [sp, #4]
 8002532:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8002536:	9200      	str	r2, [sp, #0]
 8002538:	4622      	mov	r2, r4
 800253a:	f7ff f9ce 	bl	80018da <pseudo_inv>
    dot(invA, ESTIMATION_STEPS, ESTIMATION_STEPS, X, ESTIMATION_STEPS, 1, P);
 800253e:	f507 52ad 	add.w	r2, r7, #5536	; 0x15a0
 8002542:	f102 0208 	add.w	r2, r2, #8
 8002546:	f507 5091 	add.w	r0, r7, #4640	; 0x1220
 800254a:	f100 0018 	add.w	r0, r0, #24
 800254e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8002552:	f103 0318 	add.w	r3, r3, #24
 8002556:	9302      	str	r3, [sp, #8]
 8002558:	2301      	movs	r3, #1
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	230a      	movs	r3, #10
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	220a      	movs	r2, #10
 8002564:	210a      	movs	r1, #10
 8002566:	f7fe fda1 	bl	80010ac <dot>
    *v_est = 0;
 800256a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800256e:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	e9c1 2300 	strd	r2, r3, [r1]
    *a_est = 0;
 8002580:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8002584:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < ESTIMATION_STEPS; i++){
 8002596:	2300      	movs	r3, #0
 8002598:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 800259c:	f102 020f 	add.w	r2, r2, #15
 80025a0:	7013      	strb	r3, [r2, #0]
 80025a2:	e10b      	b.n	80027bc <speed_estimation+0x47c>
 80025a4:	f3af 8000 	nop.w
 80025a8:	40240000 	.word	0x40240000
 80025ac:	3ff00000 	.word	0x3ff00000
 80025b0:	47ae147b 	.word	0x47ae147b
 80025b4:	3f847ae1 	.word	0x3f847ae1
        esp = (ESTIMATION_STEPS-i-1);
 80025b8:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80025bc:	f103 030f 	add.w	r3, r3, #15
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	f1c3 0309 	rsb	r3, r3, #9
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ffbc 	bl	8000544 <__aeabi_i2d>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80025d4:	f101 0118 	add.w	r1, r1, #24
 80025d8:	e9c1 2300 	strd	r2, r3, [r1]
        /* the derivation of constant values is 0 -> exclude the derivative of the constant values from the computation otherwise it would be now^i with i < 0 */
        if(esp-1 >= 0){
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	4b7f      	ldr	r3, [pc, #508]	; (80027e0 <speed_estimation+0x4a0>)
 80025e2:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80025e6:	f101 0118 	add.w	r1, r1, #24
 80025ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025ee:	f7fd fe5b 	bl	80002a8 <__aeabi_dsub>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	f7fe fa8f 	bl	8000b24 <__aeabi_dcmpge>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d04d      	beq.n	80026a8 <speed_estimation+0x368>
            *v_est += esp*pow(now, esp-1)*P[i];
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <speed_estimation+0x4a0>)
 8002612:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8002616:	f101 0118 	add.w	r1, r1, #24
 800261a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800261e:	f7fd fe43 	bl	80002a8 <__aeabi_dsub>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	ec43 2b17 	vmov	d7, r2, r3
 800262a:	eeb0 1a47 	vmov.f32	s2, s14
 800262e:	eef0 1a67 	vmov.f32	s3, s15
 8002632:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 8002636:	ed93 0b00 	vldr	d0, [r3]
 800263a:	f006 f871 	bl	8008720 <pow>
 800263e:	ec51 0b10 	vmov	r0, r1, d0
 8002642:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8002646:	f103 0318 	add.w	r3, r3, #24
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	f7fd ffe3 	bl	8000618 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800265e:	f103 030f 	add.w	r3, r3, #15
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 8002668:	f102 0210 	add.w	r2, r2, #16
 800266c:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f7fd ffce 	bl	8000618 <__aeabi_dmul>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8002688:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	f7fd fe0b 	bl	80002ac <__adddf3>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 800269e:	f6a1 1128 	subw	r1, r1, #2344	; 0x928
 80026a2:	6809      	ldr	r1, [r1, #0]
 80026a4:	e9c1 2300 	strd	r2, r3, [r1]
        }
        if(esp-2 >= 0){ 
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026b0:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80026b4:	f101 0118 	add.w	r1, r1, #24
 80026b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026bc:	f7fd fdf4 	bl	80002a8 <__aeabi_dsub>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	f7fe fa28 	bl	8000b24 <__aeabi_dcmpge>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d065      	beq.n	80027a6 <speed_estimation+0x466>
            *a_est += esp*(esp-1)*pow(now, esp-2)*P[i];
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <speed_estimation+0x4a0>)
 80026e0:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80026e4:	f101 0118 	add.w	r1, r1, #24
 80026e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ec:	f7fd fddc 	bl	80002a8 <__aeabi_dsub>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80026fc:	f103 0318 	add.w	r3, r3, #24
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f7fd ff88 	bl	8000618 <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4614      	mov	r4, r2
 800270e:	461d      	mov	r5, r3
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002718:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 800271c:	f101 0118 	add.w	r1, r1, #24
 8002720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002724:	f7fd fdc0 	bl	80002a8 <__aeabi_dsub>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	ec43 2b17 	vmov	d7, r2, r3
 8002730:	eeb0 1a47 	vmov.f32	s2, s14
 8002734:	eef0 1a67 	vmov.f32	s3, s15
 8002738:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800273c:	ed93 0b00 	vldr	d0, [r3]
 8002740:	f005 ffee 	bl	8008720 <pow>
 8002744:	ec53 2b10 	vmov	r2, r3, d0
 8002748:	4620      	mov	r0, r4
 800274a:	4629      	mov	r1, r5
 800274c:	f7fd ff64 	bl	8000618 <__aeabi_dmul>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800275c:	f103 030f 	add.w	r3, r3, #15
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 8002766:	f102 0210 	add.w	r2, r2, #16
 800276a:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fd ff4f 	bl	8000618 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8002786:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd fd8c 	bl	80002ac <__adddf3>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 800279c:	f6a1 112c 	subw	r1, r1, #2348	; 0x92c
 80027a0:	6809      	ldr	r1, [r1, #0]
 80027a2:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < ESTIMATION_STEPS; i++){
 80027a6:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80027aa:	f103 030f 	add.w	r3, r3, #15
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	f507 52c9 	add.w	r2, r7, #6432	; 0x1920
 80027b6:	f102 020f 	add.w	r2, r2, #15
 80027ba:	7013      	strb	r3, [r2, #0]
 80027bc:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 80027c0:	f103 030f 	add.w	r3, r3, #15
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b09      	cmp	r3, #9
 80027c8:	f67f aef6 	bls.w	80025b8 <speed_estimation+0x278>
        }
    }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	f507 57c9 	add.w	r7, r7, #6432	; 0x1920
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	ecbd 8b02 	vpop	{d8}
 80027dc:	bdb0      	pop	{r4, r5, r7, pc}
 80027de:	bf00      	nop
 80027e0:	3ff00000 	.word	0x3ff00000

080027e4 <init_rate>:
- uint32_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint32_t ms){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
    rate->last_time = HAL_GetTick();
 80027ee:	f001 f9f3 	bl	8003bd8 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	601a      	str	r2, [r3, #0]
    rate->delta_time = ms;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	605a      	str	r2, [r3, #4]
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <rate_sleep>:
- rate_t *rate: pointer to the rate struct;
@outputs: 
- void;
@#
*/
void rate_sleep(rate_t *rate){
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
    double now, interval;
    now = HAL_GetTick();
 800280e:	f001 f9e3 	bl	8003bd8 <HAL_GetTick>
 8002812:	4603      	mov	r3, r0
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fe85 	bl	8000524 <__aeabi_ui2d>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    interval = (uint32_t) (now - rate->last_time); /* time passed from the last rate_sleep call */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fe7c 	bl	8000524 <__aeabi_ui2d>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002834:	f7fd fd38 	bl	80002a8 <__aeabi_dsub>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f7fe f9c2 	bl	8000bc8 <__aeabi_d2uiz>
 8002844:	4603      	mov	r3, r0
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fe6c 	bl	8000524 <__aeabi_ui2d>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	e9c7 2302 	strd	r2, r3, [r7, #8]
    /* wait until enough time has passed from the last rate_sleep call */
    while( interval < rate->delta_time){
 8002854:	e022      	b.n	800289c <rate_sleep+0x96>
        now = HAL_GetTick();
 8002856:	f001 f9bf 	bl	8003bd8 <HAL_GetTick>
 800285a:	4603      	mov	r3, r0
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe61 	bl	8000524 <__aeabi_ui2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	e9c7 2304 	strd	r2, r3, [r7, #16]
        interval = (uint32_t) (now - rate->last_time);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe58 	bl	8000524 <__aeabi_ui2d>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800287c:	f7fd fd14 	bl	80002a8 <__aeabi_dsub>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f7fe f99e 	bl	8000bc8 <__aeabi_d2uiz>
 800288c:	4603      	mov	r3, r0
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe48 	bl	8000524 <__aeabi_ui2d>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while( interval < rate->delta_time){
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fe3f 	bl	8000524 <__aeabi_ui2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ae:	f7fe f925 	bl	8000afc <__aeabi_dcmplt>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ce      	bne.n	8002856 <rate_sleep+0x50>
    }
    /* if enough time has passed, save the time stamp and go on with the process */
    rate->last_time = now;
 80028b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028bc:	f7fe f984 	bl	8000bc8 <__aeabi_d2uiz>
 80028c0:	4602      	mov	r2, r0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
    return;
 80028c6:	bf00      	nop
}
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <read_encoders>:
- TIM_HandleTypeDef *htim2: pointer to the timer struct that decodes the second encoder;
- man_t *manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void read_encoders(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, man_t *manip){
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b08c      	sub	sp, #48	; 0x30
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
    CNT/ARR returns a value between 0 and 1: by multiplying it by 2*pi the resulting value shows the position of the motor
    the reduction of the motor is already taken care of in the ARR value: ARR=CPR*REDUCTION -> 4x1000xreduction
    4x is caused by the timer mode (TI1 and TI2)
    */
    double v_est, a_est; /* used to hold temporarily the estimations of speed and acceleration */
    double displacement1 = (double) (2*M_PI*(htim1->Instance->CNT)/(htim1->Instance->ARR));
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fe1e 	bl	8000524 <__aeabi_ui2d>
 80028e8:	a36f      	add	r3, pc, #444	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f7fd fe93 	bl	8000618 <__aeabi_dmul>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4614      	mov	r4, r2
 80028f8:	461d      	mov	r5, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fe0f 	bl	8000524 <__aeabi_ui2d>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4620      	mov	r0, r4
 800290c:	4629      	mov	r1, r5
 800290e:	f7fd ffad 	bl	800086c <__aeabi_ddiv>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double displacement2 = (double) (2*M_PI) - (2*M_PI*(htim2->Instance->CNT)/(htim2->Instance->ARR)); /* the motor is upside down */
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fdff 	bl	8000524 <__aeabi_ui2d>
 8002926:	a360      	add	r3, pc, #384	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fe74 	bl	8000618 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4614      	mov	r4, r2
 8002936:	461d      	mov	r5, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fdf0 	bl	8000524 <__aeabi_ui2d>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4620      	mov	r0, r4
 800294a:	4629      	mov	r1, r5
 800294c:	f7fd ff8e 	bl	800086c <__aeabi_ddiv>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	a154      	add	r1, pc, #336	; (adr r1, 8002aa8 <read_encoders+0x1d8>)
 8002956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800295a:	f7fd fca5 	bl	80002a8 <__aeabi_dsub>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if(displacement1 > 2*M_PI){
 8002966:	a350      	add	r3, pc, #320	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002970:	f7fe f8e2 	bl	8000b38 <__aeabi_dcmpgt>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d004      	beq.n	8002984 <read_encoders+0xb4>
    	displacement1 = 2*M_PI; /* clamping */
 800297a:	a34b      	add	r3, pc, #300	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}
	if(displacement2 > 2*M_PI){
 8002984:	a348      	add	r3, pc, #288	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800298e:	f7fe f8d3 	bl	8000b38 <__aeabi_dcmpgt>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <read_encoders+0xd2>
		displacement2 = 2*M_PI; /* clamping */
 8002998:	a343      	add	r3, pc, #268	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}
    if(displacement1 > M_PI){
 80029a2:	a343      	add	r3, pc, #268	; (adr r3, 8002ab0 <read_encoders+0x1e0>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029ac:	f7fe f8c4 	bl	8000b38 <__aeabi_dcmpgt>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <read_encoders+0xfc>
    	displacement1 = displacement1 - (2*M_PI); /* redefining the domain between -PI and +PI */
 80029b6:	a33c      	add	r3, pc, #240	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029c0:	f7fd fc72 	bl	80002a8 <__aeabi_dsub>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }
    if(displacement2 > M_PI){
 80029cc:	a338      	add	r3, pc, #224	; (adr r3, 8002ab0 <read_encoders+0x1e0>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029d6:	f7fe f8af 	bl	8000b38 <__aeabi_dcmpgt>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <read_encoders+0x126>
    	displacement2 = displacement2 - (2*M_PI); /* redefining the domain between -PI and +PI */
 80029e0:	a331      	add	r3, pc, #196	; (adr r3, 8002aa8 <read_encoders+0x1d8>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029ea:	f7fd fc5d 	bl	80002a8 <__aeabi_dsub>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    /* the 5th bit of the CR1 register is the DIR bit */
    /*
    uint8_t dir1 = (uint8_t) (htim1->Instance->CR1 >> 4) & 1;
    uint8_t dir2 = (uint8_t) (htim2->Instance->CR1 >> 4) & 1;
    */
    rbpush(&manip->q0_actual, displacement1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80029fc:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fc5f 	bl	80032c4 <rbpush>
    rbpush(&manip->q1_actual, displacement2);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002a0c:	ed97 0b08 	vldr	d0, [r7, #32]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fc57 	bl	80032c4 <rbpush>
    /* TODO: do logging of data */

    /* speed and acceleration estimations for both motors*/
    speed_estimation(&manip->q0_actual, &v_est, &a_est);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002a1c:	f107 0210 	add.w	r2, r7, #16
 8002a20:	f107 0118 	add.w	r1, r7, #24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc8b 	bl	8002340 <speed_estimation>
    rbpush(&manip->dq0_actual, v_est);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002a30:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a34:	eeb0 0a47 	vmov.f32	s0, s14
 8002a38:	eef0 0a67 	vmov.f32	s1, s15
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fc41 	bl	80032c4 <rbpush>
    rbpush(&manip->ddq0_actual, a_est);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8002a48:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a50:	eef0 0a67 	vmov.f32	s1, s15
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fc35 	bl	80032c4 <rbpush>

    speed_estimation(&manip->q1_actual, &v_est, &a_est);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002a60:	f107 0210 	add.w	r2, r7, #16
 8002a64:	f107 0118 	add.w	r1, r7, #24
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fc69 	bl	8002340 <speed_estimation>
    rbpush(&manip->dq1_actual, v_est);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8002a74:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a78:	eeb0 0a47 	vmov.f32	s0, s14
 8002a7c:	eef0 0a67 	vmov.f32	s1, s15
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fc1f 	bl	80032c4 <rbpush>
    rbpush(&manip->ddq1_actual, a_est);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8002a8c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a90:	eeb0 0a47 	vmov.f32	s0, s14
 8002a94:	eef0 0a67 	vmov.f32	s1, s15
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fc13 	bl	80032c4 <rbpush>

}
 8002a9e:	bf00      	nop
 8002aa0:	3730      	adds	r7, #48	; 0x30
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	54442d18 	.word	0x54442d18
 8002aac:	401921fb 	.word	0x401921fb
 8002ab0:	54442d18 	.word	0x54442d18
 8002ab4:	400921fb 	.word	0x400921fb

08002ab8 <apply_input>:

void apply_input(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, double *u){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
    /* T_C = steps*clock_period */
    int8_t dir;
    uint32_t steps, ARR, CCR;
    double clock_period;

    rad2stepdir(u[0], RESOLUTION, (double) 1/T_C, &steps, &dir);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	ed93 7b00 	vldr	d7, [r3]
 8002aca:	f107 0217 	add.w	r2, r7, #23
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	ed9f 2b44 	vldr	d2, [pc, #272]	; 8002be8 <apply_input+0x130>
 8002ada:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8002bf0 <apply_input+0x138>
 8002ade:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae2:	eef0 0a67 	vmov.f32	s1, s15
 8002ae6:	f7ff fbef 	bl	80022c8 <rad2stepdir>
    clock_period = T_C/steps;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd19 	bl	8000524 <__aeabi_ui2d>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	a140      	add	r1, pc, #256	; (adr r1, 8002bf8 <apply_input+0x140>)
 8002af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002afc:	f7fd feb6 	bl	800086c <__aeabi_ddiv>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ARR = (uint32_t) (HAL_RCC_GetPCLK1Freq()*clock_period); /* read clock frequency for APB1 */
 8002b08:	f002 fbc6 	bl	8005298 <HAL_RCC_GetPCLK1Freq>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fd08 	bl	8000524 <__aeabi_ui2d>
 8002b14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b18:	f7fd fd7e 	bl	8000618 <__aeabi_dmul>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	f7fe f850 	bl	8000bc8 <__aeabi_d2uiz>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	61fb      	str	r3, [r7, #28]
    CCR = (uint32_t) ARR/2;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]

    __HAL_TIM_SET_AUTORELOAD(htim1, ARR);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34
    htim1->Instance->EGR = TIM_EGR_UG;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	615a      	str	r2, [r3, #20]

    rad2stepdir(u[1], RESOLUTION, (double) 1/T_C, &steps, &dir);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3308      	adds	r3, #8
 8002b54:	ed93 7b00 	vldr	d7, [r3]
 8002b58:	f107 0217 	add.w	r2, r7, #23
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	ed9f 2b20 	vldr	d2, [pc, #128]	; 8002be8 <apply_input+0x130>
 8002b68:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002bf0 <apply_input+0x138>
 8002b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b70:	eef0 0a67 	vmov.f32	s1, s15
 8002b74:	f7ff fba8 	bl	80022c8 <rad2stepdir>
    clock_period = T_C/steps;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fcd2 	bl	8000524 <__aeabi_ui2d>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	a11c      	add	r1, pc, #112	; (adr r1, 8002bf8 <apply_input+0x140>)
 8002b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b8a:	f7fd fe6f 	bl	800086c <__aeabi_ddiv>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ARR = (uint32_t) (HAL_RCC_GetPCLK1Freq()*clock_period); /* read clock frequency for APB1 */
 8002b96:	f002 fb7f 	bl	8005298 <HAL_RCC_GetPCLK1Freq>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fcc1 	bl	8000524 <__aeabi_ui2d>
 8002ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ba6:	f7fd fd37 	bl	8000618 <__aeabi_dmul>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7fe f809 	bl	8000bc8 <__aeabi_d2uiz>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	61fb      	str	r3, [r7, #28]
    CCR = (uint32_t) ARR/2;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	085b      	lsrs	r3, r3, #1
 8002bbe:	61bb      	str	r3, [r7, #24]

    __HAL_TIM_SET_AUTORELOAD(htim2, ARR);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
    htim2->Instance->EGR = TIM_EGR_UG;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	615a      	str	r2, [r3, #20]
}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	00000000 	.word	0x00000000
 8002bec:	40590000 	.word	0x40590000
 8002bf0:	2a305532 	.word	0x2a305532
 8002bf4:	3fa013a9 	.word	0x3fa013a9
 8002bf8:	47ae147b 	.word	0x47ae147b
 8002bfc:	3f847ae1 	.word	0x3f847ae1

08002c00 <start_timers>:

void start_timers(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, TIM_HandleTypeDef *htim4){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
    HAL_TIM_Base_Start_IT(htim1);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f002 fb6a 	bl	80052e8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim2);
 8002c14:	68b8      	ldr	r0, [r7, #8]
 8002c16:	f002 fb67 	bl	80052e8 <HAL_TIM_Base_Start_IT>
    /* start motor PWM */
    HAL_TIM_Base_Start_IT(htim3);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f002 fb64 	bl	80052e8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim4);
 8002c20:	6838      	ldr	r0, [r7, #0]
 8002c22:	f002 fb61 	bl	80052e8 <HAL_TIM_Base_Start_IT>
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c36:	f000 ff69 	bl	8003b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c3a:	f000 f847 	bl	8002ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c3e:	f000 faa1 	bl	8003184 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c42:	f000 fa7f 	bl	8003144 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002c46:	f000 fa53 	bl	80030f0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002c4a:	f000 f929 	bl	8002ea0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c4e:	f000 f97b 	bl	8002f48 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002c52:	f000 f8a5 	bl	8002da0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002c56:	f000 f9cb 	bl	8002ff0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip); /* initialize the manipulator struct */
 8002c5a:	4815      	ldr	r0, [pc, #84]	; (8002cb0 <main+0x80>)
 8002c5c:	f7fe f9ec 	bl	8001038 <init_man>
  init_rate(&rate, (uint32_t) (T_C*1000)); /* initialize the rate struct */
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	210a      	movs	r1, #10
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fdbc 	bl	80027e4 <init_rate>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8002c6c:	2240      	movs	r2, #64	; 0x40
 8002c6e:	4911      	ldr	r1, [pc, #68]	; (8002cb4 <main+0x84>)
 8002c70:	4811      	ldr	r0, [pc, #68]	; (8002cb8 <main+0x88>)
 8002c72:	f003 fa28 	bl	80060c6 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* start timers */
  start_timers(&htim3, &htim4, &htim2, &htim5);
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <main+0x8c>)
 8002c78:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <main+0x90>)
 8002c7a:	4912      	ldr	r1, [pc, #72]	; (8002cc4 <main+0x94>)
 8002c7c:	4812      	ldr	r0, [pc, #72]	; (8002cc8 <main+0x98>)
 8002c7e:	f7ff ffbf 	bl	8002c00 <start_timers>
  while (1)
  {
    read_encoders(&htim3, &htim4, &manip);
 8002c82:	4a0b      	ldr	r2, [pc, #44]	; (8002cb0 <main+0x80>)
 8002c84:	490f      	ldr	r1, [pc, #60]	; (8002cc4 <main+0x94>)
 8002c86:	4810      	ldr	r0, [pc, #64]	; (8002cc8 <main+0x98>)
 8002c88:	f7ff fe22 	bl	80028d0 <read_encoders>
    controller(&manip, v); /* apply the control law to find the input */
 8002c8c:	463b      	mov	r3, r7
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4807      	ldr	r0, [pc, #28]	; (8002cb0 <main+0x80>)
 8002c92:	f7ff f9a3 	bl	8001fdc <controller>
    /* change the input from [rad/s] to [steps] and [direction] (stepdir) */
    //rad2stepdir(v[0], (double) RESOLUTION, (double) 1/T_C, &steps0, &dir0); /* first motor */
    //rad2stepdir(v[1], (double) RESOLUTION, (double) 1/T_C, &steps1, &dir1); /* second motor */
    /* apply the inputs to the motors */
    // TODO: implement methods to apply inputs to motors !!
    apply_input(&htim2, &htim5, v);
 8002c96:	463b      	mov	r3, r7
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4908      	ldr	r1, [pc, #32]	; (8002cbc <main+0x8c>)
 8002c9c:	4808      	ldr	r0, [pc, #32]	; (8002cc0 <main+0x90>)
 8002c9e:	f7ff ff0b 	bl	8002ab8 <apply_input>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    rate_sleep(&rate); /* wait with a fixed frequency */
 8002ca2:	f107 0310 	add.w	r3, r7, #16
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fdad 	bl	8002806 <rate_sleep>
    read_encoders(&htim3, &htim4, &manip);
 8002cac:	e7e9      	b.n	8002c82 <main+0x52>
 8002cae:	bf00      	nop
 8002cb0:	200000d0 	.word	0x200000d0
 8002cb4:	2000008c 	.word	0x2000008c
 8002cb8:	20000708 	.word	0x20000708
 8002cbc:	200006c0 	.word	0x200006c0
 8002cc0:	200005e8 	.word	0x200005e8
 8002cc4:	20000678 	.word	0x20000678
 8002cc8:	20000630 	.word	0x20000630

08002ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b094      	sub	sp, #80	; 0x50
 8002cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cd2:	f107 0320 	add.w	r3, r7, #32
 8002cd6:	2230      	movs	r2, #48	; 0x30
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f004 fad6 	bl	800728c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ce0:	f107 030c 	add.w	r3, r7, #12
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <SystemClock_Config+0xcc>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	4a27      	ldr	r2, [pc, #156]	; (8002d98 <SystemClock_Config+0xcc>)
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8002d00:	4b25      	ldr	r3, [pc, #148]	; (8002d98 <SystemClock_Config+0xcc>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <SystemClock_Config+0xd0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <SystemClock_Config+0xd0>)
 8002d16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <SystemClock_Config+0xd0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d30:	2310      	movs	r3, #16
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d34:	2302      	movs	r3, #2
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d40:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002d44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002d46:	2304      	movs	r3, #4
 8002d48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d4e:	f107 0320 	add.w	r3, r7, #32
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 fe30 	bl	80049b8 <HAL_RCC_OscConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002d5e:	f000 faab 	bl	80032b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d62:	230f      	movs	r3, #15
 8002d64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d66:	2302      	movs	r3, #2
 8002d68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 f892 	bl	8004ea8 <HAL_RCC_ClockConfig>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d8a:	f000 fa95 	bl	80032b8 <Error_Handler>
  }
}
 8002d8e:	bf00      	nop
 8002d90:	3750      	adds	r7, #80	; 0x50
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40007000 	.word	0x40007000

08002da0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08c      	sub	sp, #48	; 0x30
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002da6:	f107 031c 	add.w	r3, r7, #28
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002db6:	f107 030c 	add.w	r3, r7, #12
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dcc:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <MX_TIM2_Init+0xfc>)
 8002dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <MX_TIM2_Init+0xfc>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dda:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <MX_TIM2_Init+0xfc>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <MX_TIM2_Init+0xfc>)
 8002de2:	f04f 32ff 	mov.w	r2, #4294967295
 8002de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de8:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <MX_TIM2_Init+0xfc>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dee:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <MX_TIM2_Init+0xfc>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002df4:	4829      	ldr	r0, [pc, #164]	; (8002e9c <MX_TIM2_Init+0xfc>)
 8002df6:	f002 fad9 	bl	80053ac <HAL_TIM_IC_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002e00:	f000 fa5a 	bl	80032b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002e04:	2304      	movs	r3, #4
 8002e06:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002e08:	2350      	movs	r3, #80	; 0x50
 8002e0a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002e10:	2300      	movs	r3, #0
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002e18:	f107 031c 	add.w	r3, r7, #28
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	481f      	ldr	r0, [pc, #124]	; (8002e9c <MX_TIM2_Init+0xfc>)
 8002e20:	f002 fd5d 	bl	80058de <HAL_TIM_SlaveConfigSynchro>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e2a:	f000 fa45 	bl	80032b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e32:	2301      	movs	r3, #1
 8002e34:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	2200      	movs	r2, #0
 8002e44:	4619      	mov	r1, r3
 8002e46:	4815      	ldr	r0, [pc, #84]	; (8002e9c <MX_TIM2_Init+0xfc>)
 8002e48:	f002 fcad 	bl	80057a6 <HAL_TIM_IC_ConfigChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002e52:	f000 fa31 	bl	80032b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002e56:	2302      	movs	r3, #2
 8002e58:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	2204      	movs	r2, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	480d      	ldr	r0, [pc, #52]	; (8002e9c <MX_TIM2_Init+0xfc>)
 8002e68:	f002 fc9d 	bl	80057a6 <HAL_TIM_IC_ConfigChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002e72:	f000 fa21 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4806      	ldr	r0, [pc, #24]	; (8002e9c <MX_TIM2_Init+0xfc>)
 8002e84:	f003 f850 	bl	8005f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8002e8e:	f000 fa13 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e92:	bf00      	nop
 8002e94:	3730      	adds	r7, #48	; 0x30
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200005e8 	.word	0x200005e8

08002ea0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08c      	sub	sp, #48	; 0x30
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	2224      	movs	r2, #36	; 0x24
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 f9ec 	bl	800728c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <MX_TIM3_Init+0xa0>)
 8002ebe:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <MX_TIM3_Init+0xa4>)
 8002ec0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <MX_TIM3_Init+0xa0>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <MX_TIM3_Init+0xa0>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <MX_TIM3_Init+0xa0>)
 8002ed0:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002ed4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <MX_TIM3_Init+0xa0>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <MX_TIM3_Init+0xa0>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002eea:	2301      	movs	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002efa:	2301      	movs	r3, #1
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002efe:	2300      	movs	r3, #0
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f06:	f107 030c 	add.w	r3, r7, #12
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	480c      	ldr	r0, [pc, #48]	; (8002f40 <MX_TIM3_Init+0xa0>)
 8002f0e:	f002 fa9c 	bl	800544a <HAL_TIM_Encoder_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002f18:	f000 f9ce 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	4619      	mov	r1, r3
 8002f28:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_TIM3_Init+0xa0>)
 8002f2a:	f002 fffd 	bl	8005f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002f34:	f000 f9c0 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f38:	bf00      	nop
 8002f3a:	3730      	adds	r7, #48	; 0x30
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000630 	.word	0x20000630
 8002f44:	40000400 	.word	0x40000400

08002f48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08c      	sub	sp, #48	; 0x30
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	2224      	movs	r2, #36	; 0x24
 8002f54:	2100      	movs	r1, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f004 f998 	bl	800728c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <MX_TIM4_Init+0xa0>)
 8002f66:	4a21      	ldr	r2, [pc, #132]	; (8002fec <MX_TIM4_Init+0xa4>)
 8002f68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002f6a:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <MX_TIM4_Init+0xa0>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <MX_TIM4_Init+0xa0>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <MX_TIM4_Init+0xa0>)
 8002f78:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002f7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <MX_TIM4_Init+0xa0>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f84:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <MX_TIM4_Init+0xa0>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f92:	2301      	movs	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002fae:	f107 030c 	add.w	r3, r7, #12
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	480c      	ldr	r0, [pc, #48]	; (8002fe8 <MX_TIM4_Init+0xa0>)
 8002fb6:	f002 fa48 	bl	800544a <HAL_TIM_Encoder_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002fc0:	f000 f97a 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <MX_TIM4_Init+0xa0>)
 8002fd2:	f002 ffa9 	bl	8005f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002fdc:	f000 f96c 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002fe0:	bf00      	nop
 8002fe2:	3730      	adds	r7, #48	; 0x30
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000678 	.word	0x20000678
 8002fec:	40000800 	.word	0x40000800

08002ff0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08c      	sub	sp, #48	; 0x30
 8002ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002ff6:	f107 031c 	add.w	r3, r7, #28
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	60da      	str	r2, [r3, #12]
 8003004:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003006:	f107 030c 	add.w	r3, r7, #12
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003014:	1d3b      	adds	r3, r7, #4
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800301c:	4b32      	ldr	r3, [pc, #200]	; (80030e8 <MX_TIM5_Init+0xf8>)
 800301e:	4a33      	ldr	r2, [pc, #204]	; (80030ec <MX_TIM5_Init+0xfc>)
 8003020:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003022:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <MX_TIM5_Init+0xf8>)
 8003024:	2200      	movs	r2, #0
 8003026:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003028:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <MX_TIM5_Init+0xf8>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800302e:	4b2e      	ldr	r3, [pc, #184]	; (80030e8 <MX_TIM5_Init+0xf8>)
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <MX_TIM5_Init+0xf8>)
 8003038:	2200      	movs	r2, #0
 800303a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800303c:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <MX_TIM5_Init+0xf8>)
 800303e:	2200      	movs	r2, #0
 8003040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003042:	4829      	ldr	r0, [pc, #164]	; (80030e8 <MX_TIM5_Init+0xf8>)
 8003044:	f002 f9b2 	bl	80053ac <HAL_TIM_IC_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800304e:	f000 f933 	bl	80032b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003052:	2304      	movs	r3, #4
 8003054:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003056:	2350      	movs	r3, #80	; 0x50
 8003058:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800305e:	2300      	movs	r3, #0
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8003066:	f107 031c 	add.w	r3, r7, #28
 800306a:	4619      	mov	r1, r3
 800306c:	481e      	ldr	r0, [pc, #120]	; (80030e8 <MX_TIM5_Init+0xf8>)
 800306e:	f002 fc36 	bl	80058de <HAL_TIM_SlaveConfigSynchro>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003078:	f000 f91e 	bl	80032b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003080:	2301      	movs	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800308c:	f107 030c 	add.w	r3, r7, #12
 8003090:	2200      	movs	r2, #0
 8003092:	4619      	mov	r1, r3
 8003094:	4814      	ldr	r0, [pc, #80]	; (80030e8 <MX_TIM5_Init+0xf8>)
 8003096:	f002 fb86 	bl	80057a6 <HAL_TIM_IC_ConfigChannel>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80030a0:	f000 f90a 	bl	80032b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80030a4:	2302      	movs	r3, #2
 80030a6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80030a8:	2302      	movs	r3, #2
 80030aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80030ac:	f107 030c 	add.w	r3, r7, #12
 80030b0:	2204      	movs	r2, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	480c      	ldr	r0, [pc, #48]	; (80030e8 <MX_TIM5_Init+0xf8>)
 80030b6:	f002 fb76 	bl	80057a6 <HAL_TIM_IC_ConfigChannel>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80030c0:	f000 f8fa 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c4:	2300      	movs	r3, #0
 80030c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	4619      	mov	r1, r3
 80030d0:	4805      	ldr	r0, [pc, #20]	; (80030e8 <MX_TIM5_Init+0xf8>)
 80030d2:	f002 ff29 	bl	8005f28 <HAL_TIMEx_MasterConfigSynchronization>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 80030dc:	f000 f8ec 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80030e0:	bf00      	nop
 80030e2:	3730      	adds	r7, #48	; 0x30
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	200006c0 	.word	0x200006c0
 80030ec:	40000c00 	.word	0x40000c00

080030f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <MX_USART2_UART_Init+0x4c>)
 80030f6:	4a12      	ldr	r2, [pc, #72]	; (8003140 <MX_USART2_UART_Init+0x50>)
 80030f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <MX_USART2_UART_Init+0x4c>)
 80030fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <MX_USART2_UART_Init+0x4c>)
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <MX_USART2_UART_Init+0x4c>)
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <MX_USART2_UART_Init+0x4c>)
 8003110:	2200      	movs	r2, #0
 8003112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <MX_USART2_UART_Init+0x4c>)
 8003116:	220c      	movs	r2, #12
 8003118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <MX_USART2_UART_Init+0x4c>)
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <MX_USART2_UART_Init+0x4c>)
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003126:	4805      	ldr	r0, [pc, #20]	; (800313c <MX_USART2_UART_Init+0x4c>)
 8003128:	f002 ff80 	bl	800602c <HAL_UART_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003132:	f000 f8c1 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000708 	.word	0x20000708
 8003140:	40004400 	.word	0x40004400

08003144 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <MX_DMA_Init+0x3c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <MX_DMA_Init+0x3c>)
 8003154:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <MX_DMA_Init+0x3c>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	2010      	movs	r0, #16
 800316c:	f000 fe1b 	bl	8003da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003170:	2010      	movs	r0, #16
 8003172:	f000 fe34 	bl	8003dde <HAL_NVIC_EnableIRQ>

}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800

08003184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	4b43      	ldr	r3, [pc, #268]	; (80032ac <MX_GPIO_Init+0x128>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a42      	ldr	r2, [pc, #264]	; (80032ac <MX_GPIO_Init+0x128>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b40      	ldr	r3, [pc, #256]	; (80032ac <MX_GPIO_Init+0x128>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <MX_GPIO_Init+0x128>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a3b      	ldr	r2, [pc, #236]	; (80032ac <MX_GPIO_Init+0x128>)
 80031c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b39      	ldr	r3, [pc, #228]	; (80032ac <MX_GPIO_Init+0x128>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	4b35      	ldr	r3, [pc, #212]	; (80032ac <MX_GPIO_Init+0x128>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a34      	ldr	r2, [pc, #208]	; (80032ac <MX_GPIO_Init+0x128>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b32      	ldr	r3, [pc, #200]	; (80032ac <MX_GPIO_Init+0x128>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	4b2e      	ldr	r3, [pc, #184]	; (80032ac <MX_GPIO_Init+0x128>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a2d      	ldr	r2, [pc, #180]	; (80032ac <MX_GPIO_Init+0x128>)
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <MX_GPIO_Init+0x128>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 800320a:	2200      	movs	r2, #0
 800320c:	2122      	movs	r1, #34	; 0x22
 800320e:	4828      	ldr	r0, [pc, #160]	; (80032b0 <MX_GPIO_Init+0x12c>)
 8003210:	f001 fb86 	bl	8004920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8003214:	2200      	movs	r2, #0
 8003216:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800321a:	4826      	ldr	r0, [pc, #152]	; (80032b4 <MX_GPIO_Init+0x130>)
 800321c:	f001 fb80 	bl	8004920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003226:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800322a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4619      	mov	r1, r3
 8003236:	481f      	ldr	r0, [pc, #124]	; (80032b4 <MX_GPIO_Init+0x130>)
 8003238:	f001 f9ee 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|LD2_Pin;
 800323c:	2322      	movs	r3, #34	; 0x22
 800323e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003240:	2301      	movs	r3, #1
 8003242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003248:	2300      	movs	r3, #0
 800324a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	4619      	mov	r1, r3
 8003252:	4817      	ldr	r0, [pc, #92]	; (80032b0 <MX_GPIO_Init+0x12c>)
 8003254:	f001 f9e0 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|LIMIT_SWITCH_2_Pin;
 8003258:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800325c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800325e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003264:	2301      	movs	r3, #1
 8003266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	4619      	mov	r1, r3
 800326e:	4810      	ldr	r0, [pc, #64]	; (80032b0 <MX_GPIO_Init+0x12c>)
 8003270:	f001 f9d2 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_1_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin;
 8003274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800327a:	2301      	movs	r3, #1
 800327c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	4619      	mov	r1, r3
 800328c:	4809      	ldr	r0, [pc, #36]	; (80032b4 <MX_GPIO_Init+0x130>)
 800328e:	f001 f9c3 	bl	8004618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	2028      	movs	r0, #40	; 0x28
 8003298:	f000 fd85 	bl	8003da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800329c:	2028      	movs	r0, #40	; 0x28
 800329e:	f000 fd9e 	bl	8003dde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032a2:	bf00      	nop
 80032a4:	3728      	adds	r7, #40	; 0x28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020000 	.word	0x40020000
 80032b4:	40020800 	.word	0x40020800

080032b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032bc:	b672      	cpsid	i
}
 80032be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <Error_Handler+0x8>
	...

080032c4 <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	ed87 0b00 	vstr	d0, [r7]
    buffer->buffer[buffer->tail] = data;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	3301      	adds	r3, #1
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	18d1      	adds	r1, r2, r3
 80032dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032e0:	e9c1 2300 	strd	r2, r3, [r1]
    buffer->tail++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	781a      	ldrb	r2, [r3, #0]
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <rbpush+0x94>)
 80032f6:	fba3 1302 	umull	r1, r3, r3, r2
 80032fa:	08d9      	lsrs	r1, r3, #3
 80032fc:	460b      	mov	r3, r1
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	b2da      	uxtb	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	789b      	ldrb	r3, [r3, #2]
 8003310:	2b0a      	cmp	r3, #10
 8003312:	d114      	bne.n	800333e <rbpush+0x7a>
        /* overwriting data: also move head forward */
        buffer->head++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	785b      	ldrb	r3, [r3, #1]
 8003318:	3301      	adds	r3, #1
 800331a:	b2da      	uxtb	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	785a      	ldrb	r2, [r3, #1]
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <rbpush+0x94>)
 8003326:	fba3 1302 	umull	r1, r3, r3, r2
 800332a:	08d9      	lsrs	r1, r3, #3
 800332c:	460b      	mov	r3, r1
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	b2da      	uxtb	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	705a      	strb	r2, [r3, #1]
 800333c:	e005      	b.n	800334a <rbpush+0x86>
    }else{
        buffer->length++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	789b      	ldrb	r3, [r3, #2]
 8003342:	3301      	adds	r3, #1
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 800334a:	2301      	movs	r3, #1
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	cccccccd 	.word	0xcccccccd

0800335c <rbpop>:
- rbelement_t *data: pointer to the variable that will hold the popped value;
@outputs: 
- rberror_t: whether the popping procedure was concluded successfully.
@#
*/
rberror_t rbpop(ringbuffer_t *buffer, rbelement_t *data){
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	789b      	ldrb	r3, [r3, #2]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <rbpop+0x16>
        return 0; /* pop operation could not be completed because the buffer is empty */
 800336e:	2300      	movs	r3, #0
 8003370:	e025      	b.n	80033be <rbpop+0x62>
    }
    *data = buffer->buffer[buffer->head];
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	785b      	ldrb	r3, [r3, #1]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	3301      	adds	r3, #1
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	6839      	ldr	r1, [r7, #0]
 8003384:	e9c1 2300 	strd	r2, r3, [r1]
    buffer->head++;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	3301      	adds	r3, #1
 800338e:	b2da      	uxtb	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	705a      	strb	r2, [r3, #1]
    buffer->head %= RBUF_SZ;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	785a      	ldrb	r2, [r3, #1]
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <rbpop+0x70>)
 800339a:	fba3 1302 	umull	r1, r3, r3, r2
 800339e:	08d9      	lsrs	r1, r3, #3
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	705a      	strb	r2, [r3, #1]
    buffer->length--;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	789b      	ldrb	r3, [r3, #2]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	709a      	strb	r2, [r3, #2]
    return 1;
 80033bc:	2301      	movs	r3, #1
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	cccccccd 	.word	0xcccccccd

080033d0 <rblast>:
- rbelement_t *data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	789b      	ldrb	r3, [r3, #2]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <rblast+0x16>
        return 0; // operation failed
 80033e2:	2300      	movs	r3, #0
 80033e4:	e00e      	b.n	8003404 <rblast+0x34>
    }
    uint8_t index = buffer->tail-1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
        index += RBUF_SZ;
    }
    *data = buffer->buffer[index];
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	3301      	adds	r3, #1
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	6839      	ldr	r1, [r7, #0]
 80033fe:	e9c1 2300 	strd	r2, r3, [r1]
    return 1;
 8003402:	2301      	movs	r3, #1
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <rbget>:

rberror_t rbget(ringbuffer_t *buffer, uint8_t i, rbelement_t *element){
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	460b      	mov	r3, r1
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	789b      	ldrb	r3, [r3, #2]
 8003422:	7afa      	ldrb	r2, [r7, #11]
 8003424:	429a      	cmp	r2, r3
 8003426:	d301      	bcc.n	800342c <rbget+0x1c>
        /* out of bounds */
        return 0;
 8003428:	2300      	movs	r3, #0
 800342a:	e01c      	b.n	8003466 <rbget+0x56>
    }
    uint8_t index = (buffer->head+i) % RBUF_SZ;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	785b      	ldrb	r3, [r3, #1]
 8003430:	461a      	mov	r2, r3
 8003432:	7afb      	ldrb	r3, [r7, #11]
 8003434:	441a      	add	r2, r3
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <rbget+0x64>)
 8003438:	fb83 1302 	smull	r1, r3, r3, r2
 800343c:	1099      	asrs	r1, r3, #2
 800343e:	17d3      	asrs	r3, r2, #31
 8003440:	1ac9      	subs	r1, r1, r3
 8003442:	460b      	mov	r3, r1
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	1ad1      	subs	r1, r2, r3
 800344c:	460b      	mov	r3, r1
 800344e:	75fb      	strb	r3, [r7, #23]
    *element = buffer->buffer[index];
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	3301      	adds	r3, #1
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	e9c1 2300 	strd	r2, r3, [r1]
    return 1;
 8003464:	2301      	movs	r3, #1
}
 8003466:	4618      	mov	r0, r3
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	66666667 	.word	0x66666667

08003478 <rbclear>:
- ringbuffer_t *buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8003484:	2300      	movs	r3, #0
 8003486:	73fb      	strb	r3, [r7, #15]
 8003488:	e00d      	b.n	80034a6 <rbclear+0x2e>
        buffer->buffer[i] = 0;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	3301      	adds	r3, #1
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	18d1      	adds	r1, r2, r3
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < RBUF_SZ; i++){
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	3301      	adds	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	d9ee      	bls.n	800348a <rbclear+0x12>
    }
    buffer->length = 0;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_MspInit+0x4c>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	4a0f      	ldr	r2, [pc, #60]	; (8003518 <HAL_MspInit+0x4c>)
 80034dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e0:	6453      	str	r3, [r2, #68]	; 0x44
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <HAL_MspInit+0x4c>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_MspInit+0x4c>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a08      	ldr	r2, [pc, #32]	; (8003518 <HAL_MspInit+0x4c>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_MspInit+0x4c>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800350a:	2007      	movs	r0, #7
 800350c:	f000 fc40 	bl	8003d90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800

0800351c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08c      	sub	sp, #48	; 0x30
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	f107 031c 	add.w	r3, r7, #28
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353c:	d12d      	bne.n	800359a <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
 800354e:	4b2d      	ldr	r3, [pc, #180]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a28      	ldr	r2, [pc, #160]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b26      	ldr	r3, [pc, #152]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800357a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	2302      	movs	r3, #2
 800357e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003584:	2300      	movs	r3, #0
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003588:	2301      	movs	r3, #1
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358c:	f107 031c 	add.w	r3, r7, #28
 8003590:	4619      	mov	r1, r3
 8003592:	481d      	ldr	r0, [pc, #116]	; (8003608 <HAL_TIM_IC_MspInit+0xec>)
 8003594:	f001 f840 	bl	8004618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003598:	e030      	b.n	80035fc <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM5)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1b      	ldr	r2, [pc, #108]	; (800360c <HAL_TIM_IC_MspInit+0xf0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d12b      	bne.n	80035fc <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	4a15      	ldr	r2, [pc, #84]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 80035ae:	f043 0308 	orr.w	r3, r3, #8
 80035b2:	6413      	str	r3, [r2, #64]	; 0x40
 80035b4:	4b13      	ldr	r3, [pc, #76]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6313      	str	r3, [r2, #48]	; 0x30
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_TIM_IC_MspInit+0xe8>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035dc:	2301      	movs	r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e0:	2302      	movs	r3, #2
 80035e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e8:	2300      	movs	r3, #0
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80035ec:	2302      	movs	r3, #2
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f0:	f107 031c 	add.w	r3, r7, #28
 80035f4:	4619      	mov	r1, r3
 80035f6:	4804      	ldr	r0, [pc, #16]	; (8003608 <HAL_TIM_IC_MspInit+0xec>)
 80035f8:	f001 f80e 	bl	8004618 <HAL_GPIO_Init>
}
 80035fc:	bf00      	nop
 80035fe:	3730      	adds	r7, #48	; 0x30
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	40020000 	.word	0x40020000
 800360c:	40000c00 	.word	0x40000c00

08003610 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a3a      	ldr	r2, [pc, #232]	; (8003718 <HAL_TIM_Encoder_MspInit+0x108>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d134      	bne.n	800369c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	4b39      	ldr	r3, [pc, #228]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a38      	ldr	r2, [pc, #224]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 800363c:	f043 0302 	orr.w	r3, r3, #2
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	4b32      	ldr	r3, [pc, #200]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a31      	ldr	r2, [pc, #196]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b2f      	ldr	r3, [pc, #188]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800366a:	23c0      	movs	r3, #192	; 0xc0
 800366c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003676:	2300      	movs	r3, #0
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800367a:	2302      	movs	r3, #2
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367e:	f107 031c 	add.w	r3, r7, #28
 8003682:	4619      	mov	r1, r3
 8003684:	4826      	ldr	r0, [pc, #152]	; (8003720 <HAL_TIM_Encoder_MspInit+0x110>)
 8003686:	f000 ffc7 	bl	8004618 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800368a:	2200      	movs	r2, #0
 800368c:	2100      	movs	r1, #0
 800368e:	201d      	movs	r0, #29
 8003690:	f000 fb89 	bl	8003da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003694:	201d      	movs	r0, #29
 8003696:	f000 fba2 	bl	8003dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800369a:	e038      	b.n	800370e <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a20      	ldr	r2, [pc, #128]	; (8003724 <HAL_TIM_Encoder_MspInit+0x114>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d133      	bne.n	800370e <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	4a1b      	ldr	r2, [pc, #108]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 80036b0:	f043 0304 	orr.w	r3, r3, #4
 80036b4:	6413      	str	r3, [r2, #64]	; 0x40
 80036b6:	4b19      	ldr	r3, [pc, #100]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a14      	ldr	r2, [pc, #80]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_TIM_Encoder_MspInit+0x10c>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036de:	23c0      	movs	r3, #192	; 0xc0
 80036e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ea:	2300      	movs	r3, #0
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036ee:	2302      	movs	r3, #2
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f2:	f107 031c 	add.w	r3, r7, #28
 80036f6:	4619      	mov	r1, r3
 80036f8:	480b      	ldr	r0, [pc, #44]	; (8003728 <HAL_TIM_Encoder_MspInit+0x118>)
 80036fa:	f000 ff8d 	bl	8004618 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	201e      	movs	r0, #30
 8003704:	f000 fb4f 	bl	8003da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003708:	201e      	movs	r0, #30
 800370a:	f000 fb68 	bl	8003dde <HAL_NVIC_EnableIRQ>
}
 800370e:	bf00      	nop
 8003710:	3730      	adds	r7, #48	; 0x30
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40000400 	.word	0x40000400
 800371c:	40023800 	.word	0x40023800
 8003720:	40020000 	.word	0x40020000
 8003724:	40000800 	.word	0x40000800
 8003728:	40020400 	.word	0x40020400

0800372c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a39      	ldr	r2, [pc, #228]	; (8003830 <HAL_UART_MspInit+0x104>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d16b      	bne.n	8003826 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	4b38      	ldr	r3, [pc, #224]	; (8003834 <HAL_UART_MspInit+0x108>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a37      	ldr	r2, [pc, #220]	; (8003834 <HAL_UART_MspInit+0x108>)
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b35      	ldr	r3, [pc, #212]	; (8003834 <HAL_UART_MspInit+0x108>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	4b31      	ldr	r3, [pc, #196]	; (8003834 <HAL_UART_MspInit+0x108>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	4a30      	ldr	r2, [pc, #192]	; (8003834 <HAL_UART_MspInit+0x108>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6313      	str	r3, [r2, #48]	; 0x30
 800377a:	4b2e      	ldr	r3, [pc, #184]	; (8003834 <HAL_UART_MspInit+0x108>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003786:	230c      	movs	r3, #12
 8003788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378a:	2302      	movs	r3, #2
 800378c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003792:	2303      	movs	r3, #3
 8003794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003796:	2307      	movs	r3, #7
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379a:	f107 0314 	add.w	r3, r7, #20
 800379e:	4619      	mov	r1, r3
 80037a0:	4825      	ldr	r0, [pc, #148]	; (8003838 <HAL_UART_MspInit+0x10c>)
 80037a2:	f000 ff39 	bl	8004618 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80037a6:	4b25      	ldr	r3, [pc, #148]	; (800383c <HAL_UART_MspInit+0x110>)
 80037a8:	4a25      	ldr	r2, [pc, #148]	; (8003840 <HAL_UART_MspInit+0x114>)
 80037aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80037ac:	4b23      	ldr	r3, [pc, #140]	; (800383c <HAL_UART_MspInit+0x110>)
 80037ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037b4:	4b21      	ldr	r3, [pc, #132]	; (800383c <HAL_UART_MspInit+0x110>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_UART_MspInit+0x110>)
 80037bc:	2200      	movs	r2, #0
 80037be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037c0:	4b1e      	ldr	r3, [pc, #120]	; (800383c <HAL_UART_MspInit+0x110>)
 80037c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037c8:	4b1c      	ldr	r3, [pc, #112]	; (800383c <HAL_UART_MspInit+0x110>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_UART_MspInit+0x110>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_UART_MspInit+0x110>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <HAL_UART_MspInit+0x110>)
 80037dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80037e2:	4b16      	ldr	r3, [pc, #88]	; (800383c <HAL_UART_MspInit+0x110>)
 80037e4:	2204      	movs	r2, #4
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <HAL_UART_MspInit+0x110>)
 80037ea:	2203      	movs	r2, #3
 80037ec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_UART_MspInit+0x110>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <HAL_UART_MspInit+0x110>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80037fa:	4810      	ldr	r0, [pc, #64]	; (800383c <HAL_UART_MspInit+0x110>)
 80037fc:	f000 fb0a 	bl	8003e14 <HAL_DMA_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8003806:	f7ff fd57 	bl	80032b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a0b      	ldr	r2, [pc, #44]	; (800383c <HAL_UART_MspInit+0x110>)
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
 8003810:	4a0a      	ldr	r2, [pc, #40]	; (800383c <HAL_UART_MspInit+0x110>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003816:	2200      	movs	r2, #0
 8003818:	2100      	movs	r1, #0
 800381a:	2026      	movs	r0, #38	; 0x26
 800381c:	f000 fac3 	bl	8003da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003820:	2026      	movs	r0, #38	; 0x26
 8003822:	f000 fadc 	bl	8003dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003826:	bf00      	nop
 8003828:	3728      	adds	r7, #40	; 0x28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40004400 	.word	0x40004400
 8003834:	40023800 	.word	0x40023800
 8003838:	40020000 	.word	0x40020000
 800383c:	2000074c 	.word	0x2000074c
 8003840:	40026088 	.word	0x40026088

08003844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003848:	e7fe      	b.n	8003848 <NMI_Handler+0x4>

0800384a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800384a:	b480      	push	{r7}
 800384c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800384e:	e7fe      	b.n	800384e <HardFault_Handler+0x4>

08003850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003854:	e7fe      	b.n	8003854 <MemManage_Handler+0x4>

08003856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800385a:	e7fe      	b.n	800385a <BusFault_Handler+0x4>

0800385c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003860:	e7fe      	b.n	8003860 <UsageFault_Handler+0x4>

08003862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003890:	f000 f98e 	bl	8003bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}

08003898 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800389c:	4802      	ldr	r0, [pc, #8]	; (80038a8 <DMA1_Stream5_IRQHandler+0x10>)
 800389e:	f000 fc51 	bl	8004144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	2000074c 	.word	0x2000074c

080038ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038b0:	4802      	ldr	r0, [pc, #8]	; (80038bc <TIM3_IRQHandler+0x10>)
 80038b2:	f001 fe70 	bl	8005596 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000630 	.word	0x20000630

080038c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038c4:	4802      	ldr	r0, [pc, #8]	; (80038d0 <TIM4_IRQHandler+0x10>)
 80038c6:	f001 fe66 	bl	8005596 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000678 	.word	0x20000678

080038d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038d8:	4802      	ldr	r0, [pc, #8]	; (80038e4 <USART2_IRQHandler+0x10>)
 80038da:	f002 fc25 	bl	8006128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000708 	.word	0x20000708

080038e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_1_Pin);
 80038ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80038f0:	f001 f84a 	bl	8004988 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_2_Pin);
 80038f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80038f8:	f001 f846 	bl	8004988 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80038fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003900:	f001 f842 	bl	8004988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003904:	bf00      	nop
 8003906:	bd80      	pop	{r7, pc}

08003908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
	return 1;
 800390c:	2301      	movs	r3, #1
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_kill>:

int _kill(int pid, int sig)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003922:	f003 fc89 	bl	8007238 <__errno>
 8003926:	4603      	mov	r3, r0
 8003928:	2216      	movs	r2, #22
 800392a:	601a      	str	r2, [r3, #0]
	return -1;
 800392c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <_exit>:

void _exit (int status)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ffe7 	bl	8003918 <_kill>
	while (1) {}		/* Make sure we hang here */
 800394a:	e7fe      	b.n	800394a <_exit+0x12>

0800394c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	e00a      	b.n	8003974 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800395e:	f3af 8000 	nop.w
 8003962:	4601      	mov	r1, r0
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	60ba      	str	r2, [r7, #8]
 800396a:	b2ca      	uxtb	r2, r1
 800396c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3301      	adds	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	dbf0      	blt.n	800395e <_read+0x12>
	}

return len;
 800397c:	687b      	ldr	r3, [r7, #4]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	e009      	b.n	80039ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	60ba      	str	r2, [r7, #8]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	3301      	adds	r3, #1
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	dbf1      	blt.n	8003998 <_write+0x12>
	}
	return len;
 80039b4:	687b      	ldr	r3, [r7, #4]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <_close>:

int _close(int file)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
	return -1;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039e6:	605a      	str	r2, [r3, #4]
	return 0;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <_isatty>:

int _isatty(int file)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
	return 1;
 80039fe:	2301      	movs	r3, #1
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
	return 0;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a30:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <_sbrk+0x5c>)
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <_sbrk+0x60>)
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a3c:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <_sbrk+0x64>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <_sbrk+0x64>)
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <_sbrk+0x68>)
 8003a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a4a:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <_sbrk+0x64>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d207      	bcs.n	8003a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a58:	f003 fbee 	bl	8007238 <__errno>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	220c      	movs	r2, #12
 8003a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	e009      	b.n	8003a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <_sbrk+0x64>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a6e:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <_sbrk+0x64>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <_sbrk+0x64>)
 8003a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20020000 	.word	0x20020000
 8003a88:	00000400 	.word	0x00000400
 8003a8c:	200007ac 	.word	0x200007ac
 8003a90:	200007c8 	.word	0x200007c8

08003a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <SystemInit+0x20>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <SystemInit+0x20>)
 8003aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003abc:	480d      	ldr	r0, [pc, #52]	; (8003af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003abe:	490e      	ldr	r1, [pc, #56]	; (8003af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ac0:	4a0e      	ldr	r2, [pc, #56]	; (8003afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ac4:	e002      	b.n	8003acc <LoopCopyDataInit>

08003ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aca:	3304      	adds	r3, #4

08003acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ad0:	d3f9      	bcc.n	8003ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ad2:	4a0b      	ldr	r2, [pc, #44]	; (8003b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ad4:	4c0b      	ldr	r4, [pc, #44]	; (8003b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ad8:	e001      	b.n	8003ade <LoopFillZerobss>

08003ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003adc:	3204      	adds	r2, #4

08003ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ae0:	d3fb      	bcc.n	8003ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ae2:	f7ff ffd7 	bl	8003a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ae6:	f003 fbad 	bl	8007244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aea:	f7ff f8a1 	bl	8002c30 <main>
  bx  lr    
 8003aee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003af8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003afc:	0800a910 	.word	0x0800a910
  ldr r2, =_sbss
 8003b00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003b04:	200007c4 	.word	0x200007c4

08003b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b08:	e7fe      	b.n	8003b08 <ADC_IRQHandler>
	...

08003b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_Init+0x40>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <HAL_Init+0x40>)
 8003b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_Init+0x40>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <HAL_Init+0x40>)
 8003b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b28:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <HAL_Init+0x40>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <HAL_Init+0x40>)
 8003b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b34:	2003      	movs	r0, #3
 8003b36:	f000 f92b 	bl	8003d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f000 f808 	bl	8003b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b40:	f7ff fcc4 	bl	80034cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023c00 	.word	0x40023c00

08003b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_InitTick+0x54>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_InitTick+0x58>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	4619      	mov	r1, r3
 8003b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f943 	bl	8003dfa <HAL_SYSTICK_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e00e      	b.n	8003b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b0f      	cmp	r3, #15
 8003b82:	d80a      	bhi.n	8003b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b84:	2200      	movs	r2, #0
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	f000 f90b 	bl	8003da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b90:	4a06      	ldr	r2, [pc, #24]	; (8003bac <HAL_InitTick+0x5c>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e000      	b.n	8003b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	20000008 	.word	0x20000008
 8003bac:	20000004 	.word	0x20000004

08003bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_IncTick+0x20>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <HAL_IncTick+0x24>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <HAL_IncTick+0x24>)
 8003bc2:	6013      	str	r3, [r2, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000008 	.word	0x20000008
 8003bd4:	200007b0 	.word	0x200007b0

08003bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return uwTick;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <HAL_GetTick+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	200007b0 	.word	0x200007b0

08003bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <__NVIC_SetPriorityGrouping+0x44>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c22:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <__NVIC_SetPriorityGrouping+0x44>)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	60d3      	str	r3, [r2, #12]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <__NVIC_GetPriorityGrouping+0x18>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	f003 0307 	and.w	r3, r3, #7
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	db0b      	blt.n	8003c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	f003 021f 	and.w	r2, r3, #31
 8003c6c:	4907      	ldr	r1, [pc, #28]	; (8003c8c <__NVIC_EnableIRQ+0x38>)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	2001      	movs	r0, #1
 8003c76:	fa00 f202 	lsl.w	r2, r0, r2
 8003c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000e100 	.word	0xe000e100

08003c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	6039      	str	r1, [r7, #0]
 8003c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	db0a      	blt.n	8003cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	490c      	ldr	r1, [pc, #48]	; (8003cdc <__NVIC_SetPriority+0x4c>)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	0112      	lsls	r2, r2, #4
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb8:	e00a      	b.n	8003cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	4908      	ldr	r1, [pc, #32]	; (8003ce0 <__NVIC_SetPriority+0x50>)
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	3b04      	subs	r3, #4
 8003cc8:	0112      	lsls	r2, r2, #4
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	440b      	add	r3, r1
 8003cce:	761a      	strb	r2, [r3, #24]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000e100 	.word	0xe000e100
 8003ce0:	e000ed00 	.word	0xe000ed00

08003ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f1c3 0307 	rsb	r3, r3, #7
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	bf28      	it	cs
 8003d02:	2304      	movcs	r3, #4
 8003d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	2b06      	cmp	r3, #6
 8003d0c:	d902      	bls.n	8003d14 <NVIC_EncodePriority+0x30>
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3b03      	subs	r3, #3
 8003d12:	e000      	b.n	8003d16 <NVIC_EncodePriority+0x32>
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d18:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43da      	mvns	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	401a      	ands	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	43d9      	mvns	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d3c:	4313      	orrs	r3, r2
         );
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3724      	adds	r7, #36	; 0x24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d5c:	d301      	bcc.n	8003d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e00f      	b.n	8003d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <SysTick_Config+0x40>)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d6a:	210f      	movs	r1, #15
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	f7ff ff8e 	bl	8003c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <SysTick_Config+0x40>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d7a:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <SysTick_Config+0x40>)
 8003d7c:	2207      	movs	r2, #7
 8003d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	e000e010 	.word	0xe000e010

08003d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff29 	bl	8003bf0 <__NVIC_SetPriorityGrouping>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db8:	f7ff ff3e 	bl	8003c38 <__NVIC_GetPriorityGrouping>
 8003dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	6978      	ldr	r0, [r7, #20]
 8003dc4:	f7ff ff8e 	bl	8003ce4 <NVIC_EncodePriority>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff5d 	bl	8003c90 <__NVIC_SetPriority>
}
 8003dd6:	bf00      	nop
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff31 	bl	8003c54 <__NVIC_EnableIRQ>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff ffa2 	bl	8003d4c <SysTick_Config>
 8003e08:	4603      	mov	r3, r0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e20:	f7ff feda 	bl	8003bd8 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e099      	b.n	8003f64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e50:	e00f      	b.n	8003e72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e52:	f7ff fec1 	bl	8003bd8 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b05      	cmp	r3, #5
 8003e5e:	d908      	bls.n	8003e72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2203      	movs	r2, #3
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e078      	b.n	8003f64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e8      	bne.n	8003e52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4b38      	ldr	r3, [pc, #224]	; (8003f6c <HAL_DMA_Init+0x158>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d107      	bne.n	8003edc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 0307 	bic.w	r3, r3, #7
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d117      	bne.n	8003f36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00e      	beq.n	8003f36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fb01 	bl	8004520 <DMA_CheckFifoParam>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2240      	movs	r2, #64	; 0x40
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f32:	2301      	movs	r3, #1
 8003f34:	e016      	b.n	8003f64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fab8 	bl	80044b4 <DMA_CalcBaseAndBitshift>
 8003f44:	4603      	mov	r3, r0
 8003f46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	223f      	movs	r2, #63	; 0x3f
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	f010803f 	.word	0xf010803f

08003f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_DMA_Start_IT+0x26>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e040      	b.n	8004018 <HAL_DMA_Start_IT+0xa8>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d12f      	bne.n	800400a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fa4a 	bl	8004458 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc8:	223f      	movs	r2, #63	; 0x3f
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0216 	orr.w	r2, r2, #22
 8003fde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0208 	orr.w	r2, r2, #8
 8003ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e005      	b.n	8004016 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004012:	2302      	movs	r3, #2
 8004014:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004016:	7dfb      	ldrb	r3, [r7, #23]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800402e:	f7ff fdd3 	bl	8003bd8 <HAL_GetTick>
 8004032:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d008      	beq.n	8004052 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2280      	movs	r2, #128	; 0x80
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e052      	b.n	80040f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0216 	bic.w	r2, r2, #22
 8004060:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004070:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <HAL_DMA_Abort+0x62>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0208 	bic.w	r2, r2, #8
 8004090:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040a2:	e013      	b.n	80040cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040a4:	f7ff fd98 	bl	8003bd8 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b05      	cmp	r3, #5
 80040b0:	d90c      	bls.n	80040cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2203      	movs	r2, #3
 80040bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e015      	b.n	80040f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e4      	bne.n	80040a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	223f      	movs	r2, #63	; 0x3f
 80040e0:	409a      	lsls	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d004      	beq.n	800411e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2280      	movs	r2, #128	; 0x80
 8004118:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e00c      	b.n	8004138 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2205      	movs	r2, #5
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004150:	4b8e      	ldr	r3, [pc, #568]	; (800438c <HAL_DMA_IRQHandler+0x248>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a8e      	ldr	r2, [pc, #568]	; (8004390 <HAL_DMA_IRQHandler+0x24c>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	0a9b      	lsrs	r3, r3, #10
 800415c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416e:	2208      	movs	r2, #8
 8004170:	409a      	lsls	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01a      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0204 	bic.w	r2, r2, #4
 8004196:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	2208      	movs	r2, #8
 800419e:	409a      	lsls	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	f043 0201 	orr.w	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b4:	2201      	movs	r2, #1
 80041b6:	409a      	lsls	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d012      	beq.n	80041e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d2:	2201      	movs	r2, #1
 80041d4:	409a      	lsls	r2, r3
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f043 0202 	orr.w	r2, r3, #2
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ea:	2204      	movs	r2, #4
 80041ec:	409a      	lsls	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d012      	beq.n	800421c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	2204      	movs	r2, #4
 800420a:	409a      	lsls	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	f043 0204 	orr.w	r2, r3, #4
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	2210      	movs	r2, #16
 8004222:	409a      	lsls	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d043      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d03c      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423e:	2210      	movs	r2, #16
 8004240:	409a      	lsls	r2, r3
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d018      	beq.n	8004286 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d108      	bne.n	8004274 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d024      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
 8004272:	e01f      	b.n	80042b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01b      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
 8004284:	e016      	b.n	80042b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d107      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0208 	bic.w	r2, r2, #8
 80042a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b8:	2220      	movs	r2, #32
 80042ba:	409a      	lsls	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 808f 	beq.w	80043e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8087 	beq.w	80043e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042da:	2220      	movs	r2, #32
 80042dc:	409a      	lsls	r2, r3
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d136      	bne.n	800435c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0216 	bic.w	r2, r2, #22
 80042fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800430c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <HAL_DMA_IRQHandler+0x1da>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0208 	bic.w	r2, r2, #8
 800432c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	223f      	movs	r2, #63	; 0x3f
 8004334:	409a      	lsls	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434e:	2b00      	cmp	r3, #0
 8004350:	d07e      	beq.n	8004450 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	4798      	blx	r3
        }
        return;
 800435a:	e079      	b.n	8004450 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01d      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10d      	bne.n	8004394 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	2b00      	cmp	r3, #0
 800437e:	d031      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
 8004388:	e02c      	b.n	80043e4 <HAL_DMA_IRQHandler+0x2a0>
 800438a:	bf00      	nop
 800438c:	20000000 	.word	0x20000000
 8004390:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d023      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
 80043a4:	e01e      	b.n	80043e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10f      	bne.n	80043d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0210 	bic.w	r2, r2, #16
 80043c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d032      	beq.n	8004452 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d022      	beq.n	800443e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2205      	movs	r2, #5
 80043fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	3301      	adds	r3, #1
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	429a      	cmp	r2, r3
 800441a:	d307      	bcc.n	800442c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f2      	bne.n	8004410 <HAL_DMA_IRQHandler+0x2cc>
 800442a:	e000      	b.n	800442e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800442c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
 800444e:	e000      	b.n	8004452 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004450:	bf00      	nop
    }
  }
}
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004474:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d108      	bne.n	8004498 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004496:	e007      	b.n	80044a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	60da      	str	r2, [r3, #12]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	3b10      	subs	r3, #16
 80044c4:	4a14      	ldr	r2, [pc, #80]	; (8004518 <DMA_CalcBaseAndBitshift+0x64>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044ce:	4a13      	ldr	r2, [pc, #76]	; (800451c <DMA_CalcBaseAndBitshift+0x68>)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d909      	bls.n	80044f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	1d1a      	adds	r2, r3, #4
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	659a      	str	r2, [r3, #88]	; 0x58
 80044f4:	e007      	b.n	8004506 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	aaaaaaab 	.word	0xaaaaaaab
 800451c:	0800a4a8 	.word	0x0800a4a8

08004520 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d11f      	bne.n	800457a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b03      	cmp	r3, #3
 800453e:	d856      	bhi.n	80045ee <DMA_CheckFifoParam+0xce>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <DMA_CheckFifoParam+0x28>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	08004559 	.word	0x08004559
 800454c:	0800456b 	.word	0x0800456b
 8004550:	08004559 	.word	0x08004559
 8004554:	080045ef 	.word	0x080045ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d046      	beq.n	80045f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004568:	e043      	b.n	80045f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004572:	d140      	bne.n	80045f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004578:	e03d      	b.n	80045f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004582:	d121      	bne.n	80045c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b03      	cmp	r3, #3
 8004588:	d837      	bhi.n	80045fa <DMA_CheckFifoParam+0xda>
 800458a:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <DMA_CheckFifoParam+0x70>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045a7 	.word	0x080045a7
 8004598:	080045a1 	.word	0x080045a1
 800459c:	080045b9 	.word	0x080045b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      break;
 80045a4:	e030      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d025      	beq.n	80045fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b6:	e022      	b.n	80045fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045c0:	d11f      	bne.n	8004602 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045c6:	e01c      	b.n	8004602 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d903      	bls.n	80045d6 <DMA_CheckFifoParam+0xb6>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d003      	beq.n	80045dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045d4:	e018      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
      break;
 80045da:	e015      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
      break;
 80045ec:	e00b      	b.n	8004606 <DMA_CheckFifoParam+0xe6>
      break;
 80045ee:	bf00      	nop
 80045f0:	e00a      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
      break;
 80045f2:	bf00      	nop
 80045f4:	e008      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
      break;
 80045f6:	bf00      	nop
 80045f8:	e006      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
      break;
 80045fa:	bf00      	nop
 80045fc:	e004      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
      break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
      break;   
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
      break;
 8004606:	bf00      	nop
    }
  } 
  
  return status; 
 8004608:	7bfb      	ldrb	r3, [r7, #15]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop

08004618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004618:	b480      	push	{r7}
 800461a:	b089      	sub	sp, #36	; 0x24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800462a:	2300      	movs	r3, #0
 800462c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	e159      	b.n	80048e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004634:	2201      	movs	r2, #1
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	429a      	cmp	r2, r3
 800464e:	f040 8148 	bne.w	80048e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d005      	beq.n	800466a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004666:	2b02      	cmp	r3, #2
 8004668:	d130      	bne.n	80046cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	2203      	movs	r2, #3
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4313      	orrs	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046a0:	2201      	movs	r2, #1
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 0201 	and.w	r2, r3, #1
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d017      	beq.n	8004708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	2203      	movs	r2, #3
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d123      	bne.n	800475c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	08da      	lsrs	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3208      	adds	r2, #8
 800471c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	220f      	movs	r2, #15
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	08da      	lsrs	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3208      	adds	r2, #8
 8004756:	69b9      	ldr	r1, [r7, #24]
 8004758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	2203      	movs	r2, #3
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0203 	and.w	r2, r3, #3
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4313      	orrs	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80a2 	beq.w	80048e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	4b57      	ldr	r3, [pc, #348]	; (8004900 <HAL_GPIO_Init+0x2e8>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	4a56      	ldr	r2, [pc, #344]	; (8004900 <HAL_GPIO_Init+0x2e8>)
 80047a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ac:	6453      	str	r3, [r2, #68]	; 0x44
 80047ae:	4b54      	ldr	r3, [pc, #336]	; (8004900 <HAL_GPIO_Init+0x2e8>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ba:	4a52      	ldr	r2, [pc, #328]	; (8004904 <HAL_GPIO_Init+0x2ec>)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	3302      	adds	r3, #2
 80047c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	220f      	movs	r2, #15
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43db      	mvns	r3, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4013      	ands	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a49      	ldr	r2, [pc, #292]	; (8004908 <HAL_GPIO_Init+0x2f0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d019      	beq.n	800481a <HAL_GPIO_Init+0x202>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a48      	ldr	r2, [pc, #288]	; (800490c <HAL_GPIO_Init+0x2f4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_GPIO_Init+0x1fe>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a47      	ldr	r2, [pc, #284]	; (8004910 <HAL_GPIO_Init+0x2f8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00d      	beq.n	8004812 <HAL_GPIO_Init+0x1fa>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a46      	ldr	r2, [pc, #280]	; (8004914 <HAL_GPIO_Init+0x2fc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <HAL_GPIO_Init+0x1f6>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a45      	ldr	r2, [pc, #276]	; (8004918 <HAL_GPIO_Init+0x300>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_GPIO_Init+0x1f2>
 8004806:	2304      	movs	r3, #4
 8004808:	e008      	b.n	800481c <HAL_GPIO_Init+0x204>
 800480a:	2307      	movs	r3, #7
 800480c:	e006      	b.n	800481c <HAL_GPIO_Init+0x204>
 800480e:	2303      	movs	r3, #3
 8004810:	e004      	b.n	800481c <HAL_GPIO_Init+0x204>
 8004812:	2302      	movs	r3, #2
 8004814:	e002      	b.n	800481c <HAL_GPIO_Init+0x204>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_GPIO_Init+0x204>
 800481a:	2300      	movs	r3, #0
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	f002 0203 	and.w	r2, r2, #3
 8004822:	0092      	lsls	r2, r2, #2
 8004824:	4093      	lsls	r3, r2
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800482c:	4935      	ldr	r1, [pc, #212]	; (8004904 <HAL_GPIO_Init+0x2ec>)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	3302      	adds	r3, #2
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800483a:	4b38      	ldr	r3, [pc, #224]	; (800491c <HAL_GPIO_Init+0x304>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	43db      	mvns	r3, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4013      	ands	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800485e:	4a2f      	ldr	r2, [pc, #188]	; (800491c <HAL_GPIO_Init+0x304>)
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004864:	4b2d      	ldr	r3, [pc, #180]	; (800491c <HAL_GPIO_Init+0x304>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	43db      	mvns	r3, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4013      	ands	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004888:	4a24      	ldr	r2, [pc, #144]	; (800491c <HAL_GPIO_Init+0x304>)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800488e:	4b23      	ldr	r3, [pc, #140]	; (800491c <HAL_GPIO_Init+0x304>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048b2:	4a1a      	ldr	r2, [pc, #104]	; (800491c <HAL_GPIO_Init+0x304>)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048b8:	4b18      	ldr	r3, [pc, #96]	; (800491c <HAL_GPIO_Init+0x304>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048dc:	4a0f      	ldr	r2, [pc, #60]	; (800491c <HAL_GPIO_Init+0x304>)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3301      	adds	r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2b0f      	cmp	r3, #15
 80048ec:	f67f aea2 	bls.w	8004634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	3724      	adds	r7, #36	; 0x24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40023800 	.word	0x40023800
 8004904:	40013800 	.word	0x40013800
 8004908:	40020000 	.word	0x40020000
 800490c:	40020400 	.word	0x40020400
 8004910:	40020800 	.word	0x40020800
 8004914:	40020c00 	.word	0x40020c00
 8004918:	40021000 	.word	0x40021000
 800491c:	40013c00 	.word	0x40013c00

08004920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
 800492c:	4613      	mov	r3, r2
 800492e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004930:	787b      	ldrb	r3, [r7, #1]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004936:	887a      	ldrh	r2, [r7, #2]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800493c:	e003      	b.n	8004946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	041a      	lsls	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	619a      	str	r2, [r3, #24]
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	460b      	mov	r3, r1
 800495c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004964:	887a      	ldrh	r2, [r7, #2]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4013      	ands	r3, r2
 800496a:	041a      	lsls	r2, r3, #16
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	43d9      	mvns	r1, r3
 8004970:	887b      	ldrh	r3, [r7, #2]
 8004972:	400b      	ands	r3, r1
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	619a      	str	r2, [r3, #24]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d006      	beq.n	80049ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800499e:	4a05      	ldr	r2, [pc, #20]	; (80049b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049a4:	88fb      	ldrh	r3, [r7, #6]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc fb1a 	bl	8000fe0 <HAL_GPIO_EXTI_Callback>
  }
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40013c00 	.word	0x40013c00

080049b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e267      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d075      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049d6:	4b88      	ldr	r3, [pc, #544]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d00c      	beq.n	80049fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e2:	4b85      	ldr	r3, [pc, #532]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d112      	bne.n	8004a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ee:	4b82      	ldr	r3, [pc, #520]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049fa:	d10b      	bne.n	8004a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	4b7e      	ldr	r3, [pc, #504]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d05b      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x108>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d157      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e242      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d106      	bne.n	8004a2c <HAL_RCC_OscConfig+0x74>
 8004a1e:	4b76      	ldr	r3, [pc, #472]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a75      	ldr	r2, [pc, #468]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e01d      	b.n	8004a68 <HAL_RCC_OscConfig+0xb0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCC_OscConfig+0x98>
 8004a36:	4b70      	ldr	r3, [pc, #448]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a6f      	ldr	r2, [pc, #444]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b6d      	ldr	r3, [pc, #436]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a6c      	ldr	r2, [pc, #432]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e00b      	b.n	8004a68 <HAL_RCC_OscConfig+0xb0>
 8004a50:	4b69      	ldr	r3, [pc, #420]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a68      	ldr	r2, [pc, #416]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	4b66      	ldr	r3, [pc, #408]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a65      	ldr	r2, [pc, #404]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d013      	beq.n	8004a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7ff f8b2 	bl	8003bd8 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a78:	f7ff f8ae 	bl	8003bd8 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	; 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e207      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8a:	4b5b      	ldr	r3, [pc, #364]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0xc0>
 8004a96:	e014      	b.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7ff f89e 	bl	8003bd8 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7ff f89a 	bl	8003bd8 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e1f3      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab2:	4b51      	ldr	r3, [pc, #324]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0xe8>
 8004abe:	e000      	b.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d063      	beq.n	8004b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ace:	4b4a      	ldr	r3, [pc, #296]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ada:	4b47      	ldr	r3, [pc, #284]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d11c      	bne.n	8004b20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae6:	4b44      	ldr	r3, [pc, #272]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d116      	bne.n	8004b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af2:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_RCC_OscConfig+0x152>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d001      	beq.n	8004b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e1c7      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0a:	4b3b      	ldr	r3, [pc, #236]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4937      	ldr	r1, [pc, #220]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1e:	e03a      	b.n	8004b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b28:	4b34      	ldr	r3, [pc, #208]	; (8004bfc <HAL_RCC_OscConfig+0x244>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2e:	f7ff f853 	bl	8003bd8 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b36:	f7ff f84f 	bl	8003bd8 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e1a8      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b48:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b54:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4925      	ldr	r1, [pc, #148]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]
 8004b68:	e015      	b.n	8004b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b6a:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <HAL_RCC_OscConfig+0x244>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7ff f832 	bl	8003bd8 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b78:	f7ff f82e 	bl	8003bd8 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e187      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b8a:	4b1b      	ldr	r3, [pc, #108]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d036      	beq.n	8004c10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d016      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004baa:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <HAL_RCC_OscConfig+0x248>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7ff f812 	bl	8003bd8 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb8:	f7ff f80e 	bl	8003bd8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e167      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x200>
 8004bd6:	e01b      	b.n	8004c10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <HAL_RCC_OscConfig+0x248>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bde:	f7fe fffb 	bl	8003bd8 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be4:	e00e      	b.n	8004c04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be6:	f7fe fff7 	bl	8003bd8 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d907      	bls.n	8004c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e150      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	42470000 	.word	0x42470000
 8004c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c04:	4b88      	ldr	r3, [pc, #544]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1ea      	bne.n	8004be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8097 	beq.w	8004d4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c22:	4b81      	ldr	r3, [pc, #516]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10f      	bne.n	8004c4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	4b7d      	ldr	r3, [pc, #500]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	4a7c      	ldr	r2, [pc, #496]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c3e:	4b7a      	ldr	r3, [pc, #488]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4e:	4b77      	ldr	r3, [pc, #476]	; (8004e2c <HAL_RCC_OscConfig+0x474>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d118      	bne.n	8004c8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c5a:	4b74      	ldr	r3, [pc, #464]	; (8004e2c <HAL_RCC_OscConfig+0x474>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a73      	ldr	r2, [pc, #460]	; (8004e2c <HAL_RCC_OscConfig+0x474>)
 8004c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c66:	f7fe ffb7 	bl	8003bd8 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6e:	f7fe ffb3 	bl	8003bd8 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e10c      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c80:	4b6a      	ldr	r3, [pc, #424]	; (8004e2c <HAL_RCC_OscConfig+0x474>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x2ea>
 8004c94:	4b64      	ldr	r3, [pc, #400]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	4a63      	ldr	r2, [pc, #396]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca0:	e01c      	b.n	8004cdc <HAL_RCC_OscConfig+0x324>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b05      	cmp	r3, #5
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x30c>
 8004caa:	4b5f      	ldr	r3, [pc, #380]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	4a5e      	ldr	r2, [pc, #376]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004cb0:	f043 0304 	orr.w	r3, r3, #4
 8004cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb6:	4b5c      	ldr	r3, [pc, #368]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	4a5b      	ldr	r2, [pc, #364]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc2:	e00b      	b.n	8004cdc <HAL_RCC_OscConfig+0x324>
 8004cc4:	4b58      	ldr	r3, [pc, #352]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	4a57      	ldr	r2, [pc, #348]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd0:	4b55      	ldr	r3, [pc, #340]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd4:	4a54      	ldr	r2, [pc, #336]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004cd6:	f023 0304 	bic.w	r3, r3, #4
 8004cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d015      	beq.n	8004d10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fe ff78 	bl	8003bd8 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cec:	f7fe ff74 	bl	8003bd8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e0cb      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d02:	4b49      	ldr	r3, [pc, #292]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0ee      	beq.n	8004cec <HAL_RCC_OscConfig+0x334>
 8004d0e:	e014      	b.n	8004d3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d10:	f7fe ff62 	bl	8003bd8 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d16:	e00a      	b.n	8004d2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d18:	f7fe ff5e 	bl	8003bd8 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e0b5      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2e:	4b3e      	ldr	r3, [pc, #248]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1ee      	bne.n	8004d18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d3a:	7dfb      	ldrb	r3, [r7, #23]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d105      	bne.n	8004d4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d40:	4b39      	ldr	r3, [pc, #228]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	4a38      	ldr	r2, [pc, #224]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 80a1 	beq.w	8004e98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d56:	4b34      	ldr	r3, [pc, #208]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d05c      	beq.n	8004e1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d141      	bne.n	8004dee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6a:	4b31      	ldr	r3, [pc, #196]	; (8004e30 <HAL_RCC_OscConfig+0x478>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fe ff32 	bl	8003bd8 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fe ff2e 	bl	8003bd8 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e087      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8a:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	019b      	lsls	r3, r3, #6
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	3b01      	subs	r3, #1
 8004db0:	041b      	lsls	r3, r3, #16
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	491b      	ldr	r1, [pc, #108]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc0:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <HAL_RCC_OscConfig+0x478>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc6:	f7fe ff07 	bl	8003bd8 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dce:	f7fe ff03 	bl	8003bd8 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e05c      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de0:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCC_OscConfig+0x416>
 8004dec:	e054      	b.n	8004e98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <HAL_RCC_OscConfig+0x478>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df4:	f7fe fef0 	bl	8003bd8 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dfc:	f7fe feec 	bl	8003bd8 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e045      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0e:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <HAL_RCC_OscConfig+0x470>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x444>
 8004e1a:	e03d      	b.n	8004e98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d107      	bne.n	8004e34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e038      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	40007000 	.word	0x40007000
 8004e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e34:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <HAL_RCC_OscConfig+0x4ec>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d028      	beq.n	8004e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d121      	bne.n	8004e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d11a      	bne.n	8004e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e64:	4013      	ands	r3, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d111      	bne.n	8004e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d107      	bne.n	8004e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d001      	beq.n	8004e98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800

08004ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0cc      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b68      	ldr	r3, [pc, #416]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d90c      	bls.n	8004ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b65      	ldr	r3, [pc, #404]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b63      	ldr	r3, [pc, #396]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0b8      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d020      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004efc:	4b59      	ldr	r3, [pc, #356]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4a58      	ldr	r2, [pc, #352]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f14:	4b53      	ldr	r3, [pc, #332]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a52      	ldr	r2, [pc, #328]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f20:	4b50      	ldr	r3, [pc, #320]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	494d      	ldr	r1, [pc, #308]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d044      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d107      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	4b47      	ldr	r3, [pc, #284]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d119      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e07f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d003      	beq.n	8004f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d107      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f66:	4b3f      	ldr	r3, [pc, #252]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e06f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f76:	4b3b      	ldr	r3, [pc, #236]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e067      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f86:	4b37      	ldr	r3, [pc, #220]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 0203 	bic.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4934      	ldr	r1, [pc, #208]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f98:	f7fe fe1e 	bl	8003bd8 <HAL_GetTick>
 8004f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa0:	f7fe fe1a 	bl	8003bd8 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e04f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	4b2b      	ldr	r3, [pc, #172]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 020c 	and.w	r2, r3, #12
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d1eb      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b25      	ldr	r3, [pc, #148]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d20c      	bcs.n	8004ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b22      	ldr	r3, [pc, #136]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b20      	ldr	r3, [pc, #128]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e032      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ffc:	4b19      	ldr	r3, [pc, #100]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4916      	ldr	r1, [pc, #88]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800501a:	4b12      	ldr	r3, [pc, #72]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	490e      	ldr	r1, [pc, #56]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800502e:	f000 f821 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 8005032:	4602      	mov	r2, r0
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	490a      	ldr	r1, [pc, #40]	; (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8005040:	5ccb      	ldrb	r3, [r1, r3]
 8005042:	fa22 f303 	lsr.w	r3, r2, r3
 8005046:	4a09      	ldr	r2, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800504a:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_RCC_ClockConfig+0x1c8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe fd7e 	bl	8003b50 <HAL_InitTick>

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40023c00 	.word	0x40023c00
 8005064:	40023800 	.word	0x40023800
 8005068:	0800a490 	.word	0x0800a490
 800506c:	20000000 	.word	0x20000000
 8005070:	20000004 	.word	0x20000004

08005074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005078:	b094      	sub	sp, #80	; 0x50
 800507a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	647b      	str	r3, [r7, #68]	; 0x44
 8005080:	2300      	movs	r3, #0
 8005082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005084:	2300      	movs	r3, #0
 8005086:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800508c:	4b79      	ldr	r3, [pc, #484]	; (8005274 <HAL_RCC_GetSysClockFreq+0x200>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 030c 	and.w	r3, r3, #12
 8005094:	2b08      	cmp	r3, #8
 8005096:	d00d      	beq.n	80050b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005098:	2b08      	cmp	r3, #8
 800509a:	f200 80e1 	bhi.w	8005260 <HAL_RCC_GetSysClockFreq+0x1ec>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x34>
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d003      	beq.n	80050ae <HAL_RCC_GetSysClockFreq+0x3a>
 80050a6:	e0db      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a8:	4b73      	ldr	r3, [pc, #460]	; (8005278 <HAL_RCC_GetSysClockFreq+0x204>)
 80050aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80050ac:	e0db      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050ae:	4b73      	ldr	r3, [pc, #460]	; (800527c <HAL_RCC_GetSysClockFreq+0x208>)
 80050b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050b2:	e0d8      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050b4:	4b6f      	ldr	r3, [pc, #444]	; (8005274 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050be:	4b6d      	ldr	r3, [pc, #436]	; (8005274 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d063      	beq.n	8005192 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ca:	4b6a      	ldr	r3, [pc, #424]	; (8005274 <HAL_RCC_GetSysClockFreq+0x200>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	099b      	lsrs	r3, r3, #6
 80050d0:	2200      	movs	r2, #0
 80050d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
 80050de:	2300      	movs	r3, #0
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
 80050e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050e6:	4622      	mov	r2, r4
 80050e8:	462b      	mov	r3, r5
 80050ea:	f04f 0000 	mov.w	r0, #0
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	0159      	lsls	r1, r3, #5
 80050f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050f8:	0150      	lsls	r0, r2, #5
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4621      	mov	r1, r4
 8005100:	1a51      	subs	r1, r2, r1
 8005102:	6139      	str	r1, [r7, #16]
 8005104:	4629      	mov	r1, r5
 8005106:	eb63 0301 	sbc.w	r3, r3, r1
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005118:	4659      	mov	r1, fp
 800511a:	018b      	lsls	r3, r1, #6
 800511c:	4651      	mov	r1, sl
 800511e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005122:	4651      	mov	r1, sl
 8005124:	018a      	lsls	r2, r1, #6
 8005126:	4651      	mov	r1, sl
 8005128:	ebb2 0801 	subs.w	r8, r2, r1
 800512c:	4659      	mov	r1, fp
 800512e:	eb63 0901 	sbc.w	r9, r3, r1
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800513e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005146:	4690      	mov	r8, r2
 8005148:	4699      	mov	r9, r3
 800514a:	4623      	mov	r3, r4
 800514c:	eb18 0303 	adds.w	r3, r8, r3
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	462b      	mov	r3, r5
 8005154:	eb49 0303 	adc.w	r3, r9, r3
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005166:	4629      	mov	r1, r5
 8005168:	024b      	lsls	r3, r1, #9
 800516a:	4621      	mov	r1, r4
 800516c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005170:	4621      	mov	r1, r4
 8005172:	024a      	lsls	r2, r1, #9
 8005174:	4610      	mov	r0, r2
 8005176:	4619      	mov	r1, r3
 8005178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517a:	2200      	movs	r2, #0
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
 800517e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005180:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005184:	f7fb fd40 	bl	8000c08 <__aeabi_uldivmod>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4613      	mov	r3, r2
 800518e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005190:	e058      	b.n	8005244 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005192:	4b38      	ldr	r3, [pc, #224]	; (8005274 <HAL_RCC_GetSysClockFreq+0x200>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	099b      	lsrs	r3, r3, #6
 8005198:	2200      	movs	r2, #0
 800519a:	4618      	mov	r0, r3
 800519c:	4611      	mov	r1, r2
 800519e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	2300      	movs	r3, #0
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
 80051a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051ac:	4642      	mov	r2, r8
 80051ae:	464b      	mov	r3, r9
 80051b0:	f04f 0000 	mov.w	r0, #0
 80051b4:	f04f 0100 	mov.w	r1, #0
 80051b8:	0159      	lsls	r1, r3, #5
 80051ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051be:	0150      	lsls	r0, r2, #5
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4641      	mov	r1, r8
 80051c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80051ca:	4649      	mov	r1, r9
 80051cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051e4:	ebb2 040a 	subs.w	r4, r2, sl
 80051e8:	eb63 050b 	sbc.w	r5, r3, fp
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	00eb      	lsls	r3, r5, #3
 80051f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051fa:	00e2      	lsls	r2, r4, #3
 80051fc:	4614      	mov	r4, r2
 80051fe:	461d      	mov	r5, r3
 8005200:	4643      	mov	r3, r8
 8005202:	18e3      	adds	r3, r4, r3
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	464b      	mov	r3, r9
 8005208:	eb45 0303 	adc.w	r3, r5, r3
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800521a:	4629      	mov	r1, r5
 800521c:	028b      	lsls	r3, r1, #10
 800521e:	4621      	mov	r1, r4
 8005220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005224:	4621      	mov	r1, r4
 8005226:	028a      	lsls	r2, r1, #10
 8005228:	4610      	mov	r0, r2
 800522a:	4619      	mov	r1, r3
 800522c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522e:	2200      	movs	r2, #0
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	61fa      	str	r2, [r7, #28]
 8005234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005238:	f7fb fce6 	bl	8000c08 <__aeabi_uldivmod>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4613      	mov	r3, r2
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005244:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <HAL_RCC_GetSysClockFreq+0x200>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	0c1b      	lsrs	r3, r3, #16
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	3301      	adds	r3, #1
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005254:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005258:	fbb2 f3f3 	udiv	r3, r2, r3
 800525c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800525e:	e002      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_RCC_GetSysClockFreq+0x204>)
 8005262:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005268:	4618      	mov	r0, r3
 800526a:	3750      	adds	r7, #80	; 0x50
 800526c:	46bd      	mov	sp, r7
 800526e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005272:	bf00      	nop
 8005274:	40023800 	.word	0x40023800
 8005278:	00f42400 	.word	0x00f42400
 800527c:	007a1200 	.word	0x007a1200

08005280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005284:	4b03      	ldr	r3, [pc, #12]	; (8005294 <HAL_RCC_GetHCLKFreq+0x14>)
 8005286:	681b      	ldr	r3, [r3, #0]
}
 8005288:	4618      	mov	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	20000000 	.word	0x20000000

08005298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800529c:	f7ff fff0 	bl	8005280 <HAL_RCC_GetHCLKFreq>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	0a9b      	lsrs	r3, r3, #10
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4903      	ldr	r1, [pc, #12]	; (80052bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40023800 	.word	0x40023800
 80052bc:	0800a4a0 	.word	0x0800a4a0

080052c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052c4:	f7ff ffdc 	bl	8005280 <HAL_RCC_GetHCLKFreq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	0b5b      	lsrs	r3, r3, #13
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4903      	ldr	r1, [pc, #12]	; (80052e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40023800 	.word	0x40023800
 80052e4:	0800a4a0 	.word	0x0800a4a0

080052e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d001      	beq.n	8005300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e044      	b.n	800538a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1e      	ldr	r2, [pc, #120]	; (8005398 <HAL_TIM_Base_Start_IT+0xb0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d018      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x6c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532a:	d013      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x6c>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1a      	ldr	r2, [pc, #104]	; (800539c <HAL_TIM_Base_Start_IT+0xb4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00e      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x6c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a19      	ldr	r2, [pc, #100]	; (80053a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d009      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x6c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a17      	ldr	r2, [pc, #92]	; (80053a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x6c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a16      	ldr	r2, [pc, #88]	; (80053a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d111      	bne.n	8005378 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b06      	cmp	r3, #6
 8005364:	d010      	beq.n	8005388 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0201 	orr.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005376:	e007      	b.n	8005388 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40010000 	.word	0x40010000
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800
 80053a4:	40000c00 	.word	0x40000c00
 80053a8:	40014000 	.word	0x40014000

080053ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e041      	b.n	8005442 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fe f8a2 	bl	800351c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f000 faec 	bl	80059c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b086      	sub	sp, #24
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e097      	b.n	800558e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fe f8cc 	bl	8003610 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800548e:	f023 0307 	bic.w	r3, r3, #7
 8005492:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3304      	adds	r3, #4
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f000 fa92 	bl	80059c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054cc:	f023 0303 	bic.w	r3, r3, #3
 80054d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	4313      	orrs	r3, r2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054ea:	f023 030c 	bic.w	r3, r3, #12
 80054ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	4313      	orrs	r3, r2
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	011a      	lsls	r2, r3, #4
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	031b      	lsls	r3, r3, #12
 800551a:	4313      	orrs	r3, r2
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005528:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005530:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	4313      	orrs	r3, r2
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d122      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d11b      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f06f 0202 	mvn.w	r2, #2
 80055c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f9d6 	bl	800598a <HAL_TIM_IC_CaptureCallback>
 80055de:	e005      	b.n	80055ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f9c8 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f9d9 	bl	800599e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d122      	bne.n	8005646 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b04      	cmp	r3, #4
 800560c:	d11b      	bne.n	8005646 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f06f 0204 	mvn.w	r2, #4
 8005616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f9ac 	bl	800598a <HAL_TIM_IC_CaptureCallback>
 8005632:	e005      	b.n	8005640 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f99e 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9af 	bl	800599e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b08      	cmp	r3, #8
 8005652:	d122      	bne.n	800569a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b08      	cmp	r3, #8
 8005660:	d11b      	bne.n	800569a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f06f 0208 	mvn.w	r2, #8
 800566a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2204      	movs	r2, #4
 8005670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f982 	bl	800598a <HAL_TIM_IC_CaptureCallback>
 8005686:	e005      	b.n	8005694 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f974 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f985 	bl	800599e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d122      	bne.n	80056ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d11b      	bne.n	80056ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f06f 0210 	mvn.w	r2, #16
 80056be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2208      	movs	r2, #8
 80056c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f958 	bl	800598a <HAL_TIM_IC_CaptureCallback>
 80056da:	e005      	b.n	80056e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f94a 	bl	8005976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f95b 	bl	800599e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d10e      	bne.n	800571a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d107      	bne.n	800571a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f06f 0201 	mvn.w	r2, #1
 8005712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f924 	bl	8005962 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005724:	2b80      	cmp	r3, #128	; 0x80
 8005726:	d10e      	bne.n	8005746 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b80      	cmp	r3, #128	; 0x80
 8005734:	d107      	bne.n	8005746 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fc69 	bl	8006018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d10e      	bne.n	8005772 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d107      	bne.n	8005772 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800576a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f920 	bl	80059b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b20      	cmp	r3, #32
 800577e:	d10e      	bne.n	800579e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b20      	cmp	r3, #32
 800578c:	d107      	bne.n	800579e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f06f 0220 	mvn.w	r2, #32
 8005796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fc33 	bl	8006004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e088      	b.n	80058d6 <HAL_TIM_IC_ConfigChannel+0x130>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d11b      	bne.n	800580a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6819      	ldr	r1, [r3, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f000 fa03 	bl	8005bec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 020c 	bic.w	r2, r2, #12
 80057f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6999      	ldr	r1, [r3, #24]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	619a      	str	r2, [r3, #24]
 8005808:	e060      	b.n	80058cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b04      	cmp	r3, #4
 800580e:	d11c      	bne.n	800584a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6819      	ldr	r1, [r3, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f000 fa7b 	bl	8005d1a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005832:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6999      	ldr	r1, [r3, #24]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	021a      	lsls	r2, r3, #8
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	619a      	str	r2, [r3, #24]
 8005848:	e040      	b.n	80058cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d11b      	bne.n	8005888 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	6819      	ldr	r1, [r3, #0]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f000 fac8 	bl	8005df4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69da      	ldr	r2, [r3, #28]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 020c 	bic.w	r2, r2, #12
 8005872:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69d9      	ldr	r1, [r3, #28]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	61da      	str	r2, [r3, #28]
 8005886:	e021      	b.n	80058cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b0c      	cmp	r3, #12
 800588c:	d11c      	bne.n	80058c8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6819      	ldr	r1, [r3, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f000 fae5 	bl	8005e6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69d9      	ldr	r1, [r3, #28]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	021a      	lsls	r2, r3, #8
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	61da      	str	r2, [r3, #28]
 80058c6:	e001      	b.n	80058cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e031      	b.n	800595a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f8dd 	bl	8005ac8 <TIM_SlaveTimer_SetConfig>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d009      	beq.n	8005928 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e018      	b.n	800595a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005936:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005946:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a34      	ldr	r2, [pc, #208]	; (8005aac <TIM_Base_SetConfig+0xe4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00f      	beq.n	8005a00 <TIM_Base_SetConfig+0x38>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e6:	d00b      	beq.n	8005a00 <TIM_Base_SetConfig+0x38>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a31      	ldr	r2, [pc, #196]	; (8005ab0 <TIM_Base_SetConfig+0xe8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_Base_SetConfig+0x38>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a30      	ldr	r2, [pc, #192]	; (8005ab4 <TIM_Base_SetConfig+0xec>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_Base_SetConfig+0x38>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a2f      	ldr	r2, [pc, #188]	; (8005ab8 <TIM_Base_SetConfig+0xf0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d108      	bne.n	8005a12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a25      	ldr	r2, [pc, #148]	; (8005aac <TIM_Base_SetConfig+0xe4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d01b      	beq.n	8005a52 <TIM_Base_SetConfig+0x8a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a20:	d017      	beq.n	8005a52 <TIM_Base_SetConfig+0x8a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <TIM_Base_SetConfig+0xe8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <TIM_Base_SetConfig+0x8a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a21      	ldr	r2, [pc, #132]	; (8005ab4 <TIM_Base_SetConfig+0xec>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00f      	beq.n	8005a52 <TIM_Base_SetConfig+0x8a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a20      	ldr	r2, [pc, #128]	; (8005ab8 <TIM_Base_SetConfig+0xf0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <TIM_Base_SetConfig+0x8a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <TIM_Base_SetConfig+0xf4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d007      	beq.n	8005a52 <TIM_Base_SetConfig+0x8a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a1e      	ldr	r2, [pc, #120]	; (8005ac0 <TIM_Base_SetConfig+0xf8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_Base_SetConfig+0x8a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <TIM_Base_SetConfig+0xfc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d108      	bne.n	8005a64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a08      	ldr	r2, [pc, #32]	; (8005aac <TIM_Base_SetConfig+0xe4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d103      	bne.n	8005a98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	615a      	str	r2, [r3, #20]
}
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40000c00 	.word	0x40000c00
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800

08005ac8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f023 0307 	bic.w	r3, r3, #7
 8005af6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b70      	cmp	r3, #112	; 0x70
 8005b10:	d01a      	beq.n	8005b48 <TIM_SlaveTimer_SetConfig+0x80>
 8005b12:	2b70      	cmp	r3, #112	; 0x70
 8005b14:	d860      	bhi.n	8005bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8005b16:	2b60      	cmp	r3, #96	; 0x60
 8005b18:	d054      	beq.n	8005bc4 <TIM_SlaveTimer_SetConfig+0xfc>
 8005b1a:	2b60      	cmp	r3, #96	; 0x60
 8005b1c:	d85c      	bhi.n	8005bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8005b1e:	2b50      	cmp	r3, #80	; 0x50
 8005b20:	d046      	beq.n	8005bb0 <TIM_SlaveTimer_SetConfig+0xe8>
 8005b22:	2b50      	cmp	r3, #80	; 0x50
 8005b24:	d858      	bhi.n	8005bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d019      	beq.n	8005b5e <TIM_SlaveTimer_SetConfig+0x96>
 8005b2a:	2b40      	cmp	r3, #64	; 0x40
 8005b2c:	d854      	bhi.n	8005bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8005b2e:	2b30      	cmp	r3, #48	; 0x30
 8005b30:	d055      	beq.n	8005bde <TIM_SlaveTimer_SetConfig+0x116>
 8005b32:	2b30      	cmp	r3, #48	; 0x30
 8005b34:	d850      	bhi.n	8005bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d051      	beq.n	8005bde <TIM_SlaveTimer_SetConfig+0x116>
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d84c      	bhi.n	8005bd8 <TIM_SlaveTimer_SetConfig+0x110>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d04d      	beq.n	8005bde <TIM_SlaveTimer_SetConfig+0x116>
 8005b42:	2b10      	cmp	r3, #16
 8005b44:	d04b      	beq.n	8005bde <TIM_SlaveTimer_SetConfig+0x116>
 8005b46:	e047      	b.n	8005bd8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	68d9      	ldr	r1, [r3, #12]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f000 f9c5 	bl	8005ee6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005b5c:	e040      	b.n	8005be0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b05      	cmp	r3, #5
 8005b64:	d101      	bne.n	8005b6a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e03b      	b.n	8005be2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b90:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	621a      	str	r2, [r3, #32]
      break;
 8005bae:	e017      	b.n	8005be0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	6899      	ldr	r1, [r3, #8]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f000 f87d 	bl	8005cbc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005bc2:	e00d      	b.n	8005be0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6899      	ldr	r1, [r3, #8]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f000 f8df 	bl	8005d94 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005bd6:	e003      	b.n	8005be0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	75fb      	strb	r3, [r7, #23]
      break;
 8005bdc:	e000      	b.n	8005be0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005bde:	bf00      	nop
  }

  return status;
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0201 	bic.w	r2, r3, #1
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a24      	ldr	r2, [pc, #144]	; (8005ca8 <TIM_TI1_SetConfig+0xbc>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <TIM_TI1_SetConfig+0x56>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c20:	d00f      	beq.n	8005c42 <TIM_TI1_SetConfig+0x56>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a21      	ldr	r2, [pc, #132]	; (8005cac <TIM_TI1_SetConfig+0xc0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00b      	beq.n	8005c42 <TIM_TI1_SetConfig+0x56>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a20      	ldr	r2, [pc, #128]	; (8005cb0 <TIM_TI1_SetConfig+0xc4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <TIM_TI1_SetConfig+0x56>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a1f      	ldr	r2, [pc, #124]	; (8005cb4 <TIM_TI1_SetConfig+0xc8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_TI1_SetConfig+0x56>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <TIM_TI1_SetConfig+0xcc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d101      	bne.n	8005c46 <TIM_TI1_SetConfig+0x5a>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <TIM_TI1_SetConfig+0x5c>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	e003      	b.n	8005c66 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f023 030a 	bic.w	r3, r3, #10
 8005c80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f003 030a 	and.w	r3, r3, #10
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40014000 	.word	0x40014000

08005cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f023 0201 	bic.w	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f023 030a 	bic.w	r3, r3, #10
 8005cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b087      	sub	sp, #28
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
 8005d26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	f023 0210 	bic.w	r2, r3, #16
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	031b      	lsls	r3, r3, #12
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	621a      	str	r2, [r3, #32]
}
 8005d88:	bf00      	nop
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	f023 0210 	bic.w	r2, r3, #16
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	031b      	lsls	r3, r3, #12
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	621a      	str	r2, [r3, #32]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f023 0303 	bic.w	r3, r3, #3
 8005e20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	621a      	str	r2, [r3, #32]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eaa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	031b      	lsls	r3, r3, #12
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ebe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	031b      	lsls	r3, r3, #12
 8005ec4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	621a      	str	r2, [r3, #32]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b087      	sub	sp, #28
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	021a      	lsls	r2, r3, #8
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	609a      	str	r2, [r3, #8]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e050      	b.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8c:	d013      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a15      	ldr	r2, [pc, #84]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a13      	ldr	r2, [pc, #76]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d10c      	bne.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40010000 	.word	0x40010000
 8005ff4:	40000400 	.word	0x40000400
 8005ff8:	40000800 	.word	0x40000800
 8005ffc:	40000c00 	.word	0x40000c00
 8006000:	40014000 	.word	0x40014000

08006004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e03f      	b.n	80060be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fd fb6a 	bl	800372c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2224      	movs	r2, #36	; 0x24
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800606e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fe69 	bl	8006d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695a      	ldr	r2, [r3, #20]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	4613      	mov	r3, r2
 80060d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d11d      	bne.n	800611c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_UART_Receive_DMA+0x26>
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e016      	b.n	800611e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <HAL_UART_Receive_DMA+0x38>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e00f      	b.n	800611e <HAL_UART_Receive_DMA+0x58>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800610c:	88fb      	ldrh	r3, [r7, #6]
 800610e:	461a      	mov	r2, r3
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 fbb8 	bl	8006888 <UART_Start_Receive_DMA>
 8006118:	4603      	mov	r3, r0
 800611a:	e000      	b.n	800611e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b0ba      	sub	sp, #232	; 0xe8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800614e:	2300      	movs	r3, #0
 8006150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10f      	bne.n	800618e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800616e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_UART_IRQHandler+0x66>
 800617a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fd23 	bl	8006bd2 <UART_Receive_IT>
      return;
 800618c:	e256      	b.n	800663c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800618e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 80de 	beq.w	8006354 <HAL_UART_IRQHandler+0x22c>
 8006198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80d1 	beq.w	8006354 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00b      	beq.n	80061d6 <HAL_UART_IRQHandler+0xae>
 80061be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f043 0201 	orr.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00b      	beq.n	80061fa <HAL_UART_IRQHandler+0xd2>
 80061e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f043 0202 	orr.w	r2, r3, #2
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <HAL_UART_IRQHandler+0xf6>
 8006206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	f043 0204 	orr.w	r2, r3, #4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800621e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d011      	beq.n	800624e <HAL_UART_IRQHandler+0x126>
 800622a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d105      	bne.n	8006242 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f043 0208 	orr.w	r2, r3, #8
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 81ed 	beq.w	8006632 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <HAL_UART_IRQHandler+0x14e>
 8006264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fcae 	bl	8006bd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <HAL_UART_IRQHandler+0x17a>
 800629a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d04f      	beq.n	8006342 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fbb6 	bl	8006a14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d141      	bne.n	800633a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3314      	adds	r3, #20
 80062bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3314      	adds	r3, #20
 80062de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1d9      	bne.n	80062b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	2b00      	cmp	r3, #0
 8006308:	d013      	beq.n	8006332 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	4a7d      	ldr	r2, [pc, #500]	; (8006504 <HAL_UART_IRQHandler+0x3dc>)
 8006310:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	4618      	mov	r0, r3
 8006318:	f7fd fef2 	bl	8004100 <HAL_DMA_Abort_IT>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d016      	beq.n	8006350 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800632c:	4610      	mov	r0, r2
 800632e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	e00e      	b.n	8006350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f99a 	bl	800666c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	e00a      	b.n	8006350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f996 	bl	800666c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	e006      	b.n	8006350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f992 	bl	800666c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800634e:	e170      	b.n	8006632 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006350:	bf00      	nop
    return;
 8006352:	e16e      	b.n	8006632 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	2b01      	cmp	r3, #1
 800635a:	f040 814a 	bne.w	80065f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800635e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 8143 	beq.w	80065f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800636c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 813c 	beq.w	80065f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639a:	2b40      	cmp	r3, #64	; 0x40
 800639c:	f040 80b4 	bne.w	8006508 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 8140 	beq.w	8006636 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063be:	429a      	cmp	r2, r3
 80063c0:	f080 8139 	bcs.w	8006636 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d6:	f000 8088 	beq.w	80064ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006406:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800640a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006412:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800641e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1d9      	bne.n	80063da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3314      	adds	r3, #20
 800642c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3314      	adds	r3, #20
 8006446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800644a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800644e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006452:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800645c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e1      	bne.n	8006426 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3314      	adds	r3, #20
 8006482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006486:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006488:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800648c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e3      	bne.n	8006462 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ba:	f023 0310 	bic.w	r3, r3, #16
 80064be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80064ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e3      	bne.n	80064a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fd fd9b 	bl	8004020 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8c0 	bl	8006680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006500:	e099      	b.n	8006636 <HAL_UART_IRQHandler+0x50e>
 8006502:	bf00      	nop
 8006504:	08006adb 	.word	0x08006adb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006510:	b29b      	uxth	r3, r3
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 808b 	beq.w	800663a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 8086 	beq.w	800663a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	330c      	adds	r3, #12
 8006534:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006544:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006552:	647a      	str	r2, [r7, #68]	; 0x44
 8006554:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e3      	bne.n	800652e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3314      	adds	r3, #20
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	623b      	str	r3, [r7, #32]
   return(result);
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	f023 0301 	bic.w	r3, r3, #1
 800657c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3314      	adds	r3, #20
 8006586:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800658a:	633a      	str	r2, [r7, #48]	; 0x30
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e3      	bne.n	8006566 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0310 	bic.w	r3, r3, #16
 80065c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065d0:	61fa      	str	r2, [r7, #28]
 80065d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	69b9      	ldr	r1, [r7, #24]
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	617b      	str	r3, [r7, #20]
   return(result);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e3      	bne.n	80065ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f848 	bl	8006680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065f0:	e023      	b.n	800663a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <HAL_UART_IRQHandler+0x4ea>
 80065fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa79 	bl	8006b02 <UART_Transmit_IT>
    return;
 8006610:	e014      	b.n	800663c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00e      	beq.n	800663c <HAL_UART_IRQHandler+0x514>
 800661e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d008      	beq.n	800663c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fab9 	bl	8006ba2 <UART_EndTransmit_IT>
    return;
 8006630:	e004      	b.n	800663c <HAL_UART_IRQHandler+0x514>
    return;
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <HAL_UART_IRQHandler+0x514>
      return;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <HAL_UART_IRQHandler+0x514>
      return;
 800663a:	bf00      	nop
  }
}
 800663c:	37e8      	adds	r7, #232	; 0xe8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop

08006644 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b09c      	sub	sp, #112	; 0x70
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d172      	bne.n	800679a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80066b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b6:	2200      	movs	r2, #0
 80066b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	330c      	adds	r3, #12
 80066c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80066d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	330c      	adds	r3, #12
 80066d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066da:	65ba      	str	r2, [r7, #88]	; 0x58
 80066dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e5      	bne.n	80066ba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3314      	adds	r3, #20
 80066f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006700:	f023 0301 	bic.w	r3, r3, #1
 8006704:	667b      	str	r3, [r7, #100]	; 0x64
 8006706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3314      	adds	r3, #20
 800670c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800670e:	647a      	str	r2, [r7, #68]	; 0x44
 8006710:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800671c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e5      	bne.n	80066ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3314      	adds	r3, #20
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	623b      	str	r3, [r7, #32]
   return(result);
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006738:	663b      	str	r3, [r7, #96]	; 0x60
 800673a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3314      	adds	r3, #20
 8006740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006742:	633a      	str	r2, [r7, #48]	; 0x30
 8006744:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e5      	bne.n	8006722 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006758:	2220      	movs	r2, #32
 800675a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800675e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	2b01      	cmp	r3, #1
 8006764:	d119      	bne.n	800679a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	330c      	adds	r3, #12
 800676c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	60fb      	str	r3, [r7, #12]
   return(result);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f023 0310 	bic.w	r3, r3, #16
 800677c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800677e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	330c      	adds	r3, #12
 8006784:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006786:	61fa      	str	r2, [r7, #28]
 8006788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	69b9      	ldr	r1, [r7, #24]
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	617b      	str	r3, [r7, #20]
   return(result);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e5      	bne.n	8006766 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800679a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d106      	bne.n	80067b0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067a6:	4619      	mov	r1, r3
 80067a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067aa:	f7ff ff69 	bl	8006680 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067ae:	e002      	b.n	80067b6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80067b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067b2:	f7fa fbab 	bl	8000f0c <HAL_UART_RxCpltCallback>
}
 80067b6:	bf00      	nop
 80067b8:	3770      	adds	r7, #112	; 0x70
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d108      	bne.n	80067e6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067d8:	085b      	lsrs	r3, r3, #1
 80067da:	b29b      	uxth	r3, r3
 80067dc:	4619      	mov	r1, r3
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7ff ff4e 	bl	8006680 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067e4:	e002      	b.n	80067ec <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff ff36 	bl	8006658 <HAL_UART_RxHalfCpltCallback>
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	bf0c      	ite	eq
 8006814:	2301      	moveq	r3, #1
 8006816:	2300      	movne	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b21      	cmp	r3, #33	; 0x21
 8006826:	d108      	bne.n	800683a <UART_DMAError+0x46>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2200      	movs	r2, #0
 8006832:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006834:	68b8      	ldr	r0, [r7, #8]
 8006836:	f000 f8c5 	bl	80069c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	2b40      	cmp	r3, #64	; 0x40
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b22      	cmp	r3, #34	; 0x22
 800685a:	d108      	bne.n	800686e <UART_DMAError+0x7a>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2200      	movs	r2, #0
 8006866:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006868:	68b8      	ldr	r0, [r7, #8]
 800686a:	f000 f8d3 	bl	8006a14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f043 0210 	orr.w	r2, r3, #16
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800687a:	68b8      	ldr	r0, [r7, #8]
 800687c:	f7ff fef6 	bl	800666c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b098      	sub	sp, #96	; 0x60
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	88fa      	ldrh	r2, [r7, #6]
 80068a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2222      	movs	r2, #34	; 0x22
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	4a40      	ldr	r2, [pc, #256]	; (80069b8 <UART_Start_Receive_DMA+0x130>)
 80068b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	4a3f      	ldr	r2, [pc, #252]	; (80069bc <UART_Start_Receive_DMA+0x134>)
 80068be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	4a3e      	ldr	r2, [pc, #248]	; (80069c0 <UART_Start_Receive_DMA+0x138>)
 80068c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	2200      	movs	r2, #0
 80068ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80068d0:	f107 0308 	add.w	r3, r7, #8
 80068d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3304      	adds	r3, #4
 80068e0:	4619      	mov	r1, r3
 80068e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	f7fd fb42 	bl	8003f70 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d019      	beq.n	8006946 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	330c      	adds	r3, #12
 8006918:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006928:	65bb      	str	r3, [r7, #88]	; 0x58
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006932:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006934:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e5      	bne.n	8006912 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3314      	adds	r3, #20
 800694c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	657b      	str	r3, [r7, #84]	; 0x54
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3314      	adds	r3, #20
 8006964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006966:	63ba      	str	r2, [r7, #56]	; 0x38
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800696c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e5      	bne.n	8006946 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3314      	adds	r3, #20
 8006980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	617b      	str	r3, [r7, #20]
   return(result);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006990:	653b      	str	r3, [r7, #80]	; 0x50
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3314      	adds	r3, #20
 8006998:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800699a:	627a      	str	r2, [r7, #36]	; 0x24
 800699c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6a39      	ldr	r1, [r7, #32]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e5      	bne.n	800697a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3760      	adds	r7, #96	; 0x60
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	08006699 	.word	0x08006699
 80069bc:	080067bf 	.word	0x080067bf
 80069c0:	080067f5 	.word	0x080067f5

080069c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b089      	sub	sp, #36	; 0x24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	60bb      	str	r3, [r7, #8]
   return(result);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	61ba      	str	r2, [r7, #24]
 80069ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6979      	ldr	r1, [r7, #20]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	613b      	str	r3, [r7, #16]
   return(result);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e5      	bne.n	80069cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a08:	bf00      	nop
 8006a0a:	3724      	adds	r7, #36	; 0x24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b095      	sub	sp, #84	; 0x54
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	330c      	adds	r3, #12
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a3c:	643a      	str	r2, [r7, #64]	; 0x40
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e5      	bne.n	8006a50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d119      	bne.n	8006ac0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 0310 	bic.w	r3, r3, #16
 8006aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aac:	61ba      	str	r2, [r7, #24]
 8006aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ace:	bf00      	nop
 8006ad0:	3754      	adds	r7, #84	; 0x54
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff fdb9 	bl	800666c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b21      	cmp	r3, #33	; 0x21
 8006b14:	d13e      	bne.n	8006b94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d114      	bne.n	8006b4a <UART_Transmit_IT+0x48>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d110      	bne.n	8006b4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	621a      	str	r2, [r3, #32]
 8006b48:	e008      	b.n	8006b5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6211      	str	r1, [r2, #32]
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10f      	bne.n	8006b90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fd3e 	bl	8006644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b08c      	sub	sp, #48	; 0x30
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b22      	cmp	r3, #34	; 0x22
 8006be4:	f040 80ab 	bne.w	8006d3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf0:	d117      	bne.n	8006c22 <UART_Receive_IT+0x50>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d113      	bne.n	8006c22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	1c9a      	adds	r2, r3, #2
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c20:	e026      	b.n	8006c70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c34:	d007      	beq.n	8006c46 <UART_Receive_IT+0x74>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <UART_Receive_IT+0x82>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e008      	b.n	8006c66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d15a      	bne.n	8006d3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0220 	bic.w	r2, r2, #32
 8006c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d135      	bne.n	8006d30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cea:	623a      	str	r2, [r7, #32]
 8006cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	69f9      	ldr	r1, [r7, #28]
 8006cf0:	6a3a      	ldr	r2, [r7, #32]
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d10a      	bne.n	8006d22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff fca9 	bl	8006680 <HAL_UARTEx_RxEventCallback>
 8006d2e:	e002      	b.n	8006d36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7fa f8eb 	bl	8000f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e002      	b.n	8006d40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e000      	b.n	8006d40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d3e:	2302      	movs	r3, #2
  }
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3730      	adds	r7, #48	; 0x30
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d4c:	b0c0      	sub	sp, #256	; 0x100
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d64:	68d9      	ldr	r1, [r3, #12]
 8006d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	ea40 0301 	orr.w	r3, r0, r1
 8006d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006da0:	f021 010c 	bic.w	r1, r1, #12
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dae:	430b      	orrs	r3, r1
 8006db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc2:	6999      	ldr	r1, [r3, #24]
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	ea40 0301 	orr.w	r3, r0, r1
 8006dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4b8f      	ldr	r3, [pc, #572]	; (8007014 <UART_SetConfig+0x2cc>)
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d005      	beq.n	8006de8 <UART_SetConfig+0xa0>
 8006ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4b8d      	ldr	r3, [pc, #564]	; (8007018 <UART_SetConfig+0x2d0>)
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d104      	bne.n	8006df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006de8:	f7fe fa6a 	bl	80052c0 <HAL_RCC_GetPCLK2Freq>
 8006dec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006df0:	e003      	b.n	8006dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006df2:	f7fe fa51 	bl	8005298 <HAL_RCC_GetPCLK1Freq>
 8006df6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e04:	f040 810c 	bne.w	8007020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	1891      	adds	r1, r2, r2
 8006e20:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e22:	415b      	adcs	r3, r3
 8006e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	eb12 0801 	adds.w	r8, r2, r1
 8006e30:	4629      	mov	r1, r5
 8006e32:	eb43 0901 	adc.w	r9, r3, r1
 8006e36:	f04f 0200 	mov.w	r2, #0
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e4a:	4690      	mov	r8, r2
 8006e4c:	4699      	mov	r9, r3
 8006e4e:	4623      	mov	r3, r4
 8006e50:	eb18 0303 	adds.w	r3, r8, r3
 8006e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e58:	462b      	mov	r3, r5
 8006e5a:	eb49 0303 	adc.w	r3, r9, r3
 8006e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e76:	460b      	mov	r3, r1
 8006e78:	18db      	adds	r3, r3, r3
 8006e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	eb42 0303 	adc.w	r3, r2, r3
 8006e82:	657b      	str	r3, [r7, #84]	; 0x54
 8006e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e8c:	f7f9 febc 	bl	8000c08 <__aeabi_uldivmod>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4b61      	ldr	r3, [pc, #388]	; (800701c <UART_SetConfig+0x2d4>)
 8006e96:	fba3 2302 	umull	r2, r3, r3, r2
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	011c      	lsls	r4, r3, #4
 8006e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	1891      	adds	r1, r2, r2
 8006eb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006eb8:	415b      	adcs	r3, r3
 8006eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ee0:	4692      	mov	sl, r2
 8006ee2:	469b      	mov	fp, r3
 8006ee4:	4643      	mov	r3, r8
 8006ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8006eea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	18db      	adds	r3, r3, r3
 8006f10:	643b      	str	r3, [r7, #64]	; 0x40
 8006f12:	4613      	mov	r3, r2
 8006f14:	eb42 0303 	adc.w	r3, r2, r3
 8006f18:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f22:	f7f9 fe71 	bl	8000c08 <__aeabi_uldivmod>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4b3b      	ldr	r3, [pc, #236]	; (800701c <UART_SetConfig+0x2d4>)
 8006f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f32:	095b      	lsrs	r3, r3, #5
 8006f34:	2264      	movs	r2, #100	; 0x64
 8006f36:	fb02 f303 	mul.w	r3, r2, r3
 8006f3a:	1acb      	subs	r3, r1, r3
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f42:	4b36      	ldr	r3, [pc, #216]	; (800701c <UART_SetConfig+0x2d4>)
 8006f44:	fba3 2302 	umull	r2, r3, r3, r2
 8006f48:	095b      	lsrs	r3, r3, #5
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f50:	441c      	add	r4, r3
 8006f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f64:	4642      	mov	r2, r8
 8006f66:	464b      	mov	r3, r9
 8006f68:	1891      	adds	r1, r2, r2
 8006f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f6c:	415b      	adcs	r3, r3
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f74:	4641      	mov	r1, r8
 8006f76:	1851      	adds	r1, r2, r1
 8006f78:	6339      	str	r1, [r7, #48]	; 0x30
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	414b      	adcs	r3, r1
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f8c:	4659      	mov	r1, fp
 8006f8e:	00cb      	lsls	r3, r1, #3
 8006f90:	4651      	mov	r1, sl
 8006f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f96:	4651      	mov	r1, sl
 8006f98:	00ca      	lsls	r2, r1, #3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fa8:	464b      	mov	r3, r9
 8006faa:	460a      	mov	r2, r1
 8006fac:	eb42 0303 	adc.w	r3, r2, r3
 8006fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fc8:	460b      	mov	r3, r1
 8006fca:	18db      	adds	r3, r3, r3
 8006fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fce:	4613      	mov	r3, r2
 8006fd0:	eb42 0303 	adc.w	r3, r2, r3
 8006fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fde:	f7f9 fe13 	bl	8000c08 <__aeabi_uldivmod>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	; (800701c <UART_SetConfig+0x2d4>)
 8006fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	2164      	movs	r1, #100	; 0x64
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	3332      	adds	r3, #50	; 0x32
 8006ffa:	4a08      	ldr	r2, [pc, #32]	; (800701c <UART_SetConfig+0x2d4>)
 8006ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	f003 0207 	and.w	r2, r3, #7
 8007006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4422      	add	r2, r4
 800700e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007010:	e105      	b.n	800721e <UART_SetConfig+0x4d6>
 8007012:	bf00      	nop
 8007014:	40011000 	.word	0x40011000
 8007018:	40011400 	.word	0x40011400
 800701c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007024:	2200      	movs	r2, #0
 8007026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800702a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800702e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007032:	4642      	mov	r2, r8
 8007034:	464b      	mov	r3, r9
 8007036:	1891      	adds	r1, r2, r2
 8007038:	6239      	str	r1, [r7, #32]
 800703a:	415b      	adcs	r3, r3
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
 800703e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007042:	4641      	mov	r1, r8
 8007044:	1854      	adds	r4, r2, r1
 8007046:	4649      	mov	r1, r9
 8007048:	eb43 0501 	adc.w	r5, r3, r1
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	00eb      	lsls	r3, r5, #3
 8007056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800705a:	00e2      	lsls	r2, r4, #3
 800705c:	4614      	mov	r4, r2
 800705e:	461d      	mov	r5, r3
 8007060:	4643      	mov	r3, r8
 8007062:	18e3      	adds	r3, r4, r3
 8007064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007068:	464b      	mov	r3, r9
 800706a:	eb45 0303 	adc.w	r3, r5, r3
 800706e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800707e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800708e:	4629      	mov	r1, r5
 8007090:	008b      	lsls	r3, r1, #2
 8007092:	4621      	mov	r1, r4
 8007094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007098:	4621      	mov	r1, r4
 800709a:	008a      	lsls	r2, r1, #2
 800709c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070a0:	f7f9 fdb2 	bl	8000c08 <__aeabi_uldivmod>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4b60      	ldr	r3, [pc, #384]	; (800722c <UART_SetConfig+0x4e4>)
 80070aa:	fba3 2302 	umull	r2, r3, r3, r2
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	011c      	lsls	r4, r3, #4
 80070b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070c4:	4642      	mov	r2, r8
 80070c6:	464b      	mov	r3, r9
 80070c8:	1891      	adds	r1, r2, r2
 80070ca:	61b9      	str	r1, [r7, #24]
 80070cc:	415b      	adcs	r3, r3
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070d4:	4641      	mov	r1, r8
 80070d6:	1851      	adds	r1, r2, r1
 80070d8:	6139      	str	r1, [r7, #16]
 80070da:	4649      	mov	r1, r9
 80070dc:	414b      	adcs	r3, r1
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070ec:	4659      	mov	r1, fp
 80070ee:	00cb      	lsls	r3, r1, #3
 80070f0:	4651      	mov	r1, sl
 80070f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f6:	4651      	mov	r1, sl
 80070f8:	00ca      	lsls	r2, r1, #3
 80070fa:	4610      	mov	r0, r2
 80070fc:	4619      	mov	r1, r3
 80070fe:	4603      	mov	r3, r0
 8007100:	4642      	mov	r2, r8
 8007102:	189b      	adds	r3, r3, r2
 8007104:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007108:	464b      	mov	r3, r9
 800710a:	460a      	mov	r2, r1
 800710c:	eb42 0303 	adc.w	r3, r2, r3
 8007110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	67bb      	str	r3, [r7, #120]	; 0x78
 800711e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800712c:	4649      	mov	r1, r9
 800712e:	008b      	lsls	r3, r1, #2
 8007130:	4641      	mov	r1, r8
 8007132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007136:	4641      	mov	r1, r8
 8007138:	008a      	lsls	r2, r1, #2
 800713a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800713e:	f7f9 fd63 	bl	8000c08 <__aeabi_uldivmod>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4b39      	ldr	r3, [pc, #228]	; (800722c <UART_SetConfig+0x4e4>)
 8007148:	fba3 1302 	umull	r1, r3, r3, r2
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	2164      	movs	r1, #100	; 0x64
 8007150:	fb01 f303 	mul.w	r3, r1, r3
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	3332      	adds	r3, #50	; 0x32
 800715a:	4a34      	ldr	r2, [pc, #208]	; (800722c <UART_SetConfig+0x4e4>)
 800715c:	fba2 2303 	umull	r2, r3, r2, r3
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007166:	441c      	add	r4, r3
 8007168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800716c:	2200      	movs	r2, #0
 800716e:	673b      	str	r3, [r7, #112]	; 0x70
 8007170:	677a      	str	r2, [r7, #116]	; 0x74
 8007172:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007176:	4642      	mov	r2, r8
 8007178:	464b      	mov	r3, r9
 800717a:	1891      	adds	r1, r2, r2
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	415b      	adcs	r3, r3
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007186:	4641      	mov	r1, r8
 8007188:	1851      	adds	r1, r2, r1
 800718a:	6039      	str	r1, [r7, #0]
 800718c:	4649      	mov	r1, r9
 800718e:	414b      	adcs	r3, r1
 8007190:	607b      	str	r3, [r7, #4]
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	f04f 0300 	mov.w	r3, #0
 800719a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800719e:	4659      	mov	r1, fp
 80071a0:	00cb      	lsls	r3, r1, #3
 80071a2:	4651      	mov	r1, sl
 80071a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071a8:	4651      	mov	r1, sl
 80071aa:	00ca      	lsls	r2, r1, #3
 80071ac:	4610      	mov	r0, r2
 80071ae:	4619      	mov	r1, r3
 80071b0:	4603      	mov	r3, r0
 80071b2:	4642      	mov	r2, r8
 80071b4:	189b      	adds	r3, r3, r2
 80071b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071b8:	464b      	mov	r3, r9
 80071ba:	460a      	mov	r2, r1
 80071bc:	eb42 0303 	adc.w	r3, r2, r3
 80071c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	663b      	str	r3, [r7, #96]	; 0x60
 80071cc:	667a      	str	r2, [r7, #100]	; 0x64
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071da:	4649      	mov	r1, r9
 80071dc:	008b      	lsls	r3, r1, #2
 80071de:	4641      	mov	r1, r8
 80071e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071e4:	4641      	mov	r1, r8
 80071e6:	008a      	lsls	r2, r1, #2
 80071e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071ec:	f7f9 fd0c 	bl	8000c08 <__aeabi_uldivmod>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4b0d      	ldr	r3, [pc, #52]	; (800722c <UART_SetConfig+0x4e4>)
 80071f6:	fba3 1302 	umull	r1, r3, r3, r2
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	2164      	movs	r1, #100	; 0x64
 80071fe:	fb01 f303 	mul.w	r3, r1, r3
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	3332      	adds	r3, #50	; 0x32
 8007208:	4a08      	ldr	r2, [pc, #32]	; (800722c <UART_SetConfig+0x4e4>)
 800720a:	fba2 2303 	umull	r2, r3, r2, r3
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	f003 020f 	and.w	r2, r3, #15
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4422      	add	r2, r4
 800721c:	609a      	str	r2, [r3, #8]
}
 800721e:	bf00      	nop
 8007220:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007224:	46bd      	mov	sp, r7
 8007226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800722a:	bf00      	nop
 800722c:	51eb851f 	.word	0x51eb851f

08007230 <atoi>:
 8007230:	220a      	movs	r2, #10
 8007232:	2100      	movs	r1, #0
 8007234:	f000 b920 	b.w	8007478 <strtol>

08007238 <__errno>:
 8007238:	4b01      	ldr	r3, [pc, #4]	; (8007240 <__errno+0x8>)
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	2000000c 	.word	0x2000000c

08007244 <__libc_init_array>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	4d0d      	ldr	r5, [pc, #52]	; (800727c <__libc_init_array+0x38>)
 8007248:	4c0d      	ldr	r4, [pc, #52]	; (8007280 <__libc_init_array+0x3c>)
 800724a:	1b64      	subs	r4, r4, r5
 800724c:	10a4      	asrs	r4, r4, #2
 800724e:	2600      	movs	r6, #0
 8007250:	42a6      	cmp	r6, r4
 8007252:	d109      	bne.n	8007268 <__libc_init_array+0x24>
 8007254:	4d0b      	ldr	r5, [pc, #44]	; (8007284 <__libc_init_array+0x40>)
 8007256:	4c0c      	ldr	r4, [pc, #48]	; (8007288 <__libc_init_array+0x44>)
 8007258:	f003 f8e4 	bl	800a424 <_init>
 800725c:	1b64      	subs	r4, r4, r5
 800725e:	10a4      	asrs	r4, r4, #2
 8007260:	2600      	movs	r6, #0
 8007262:	42a6      	cmp	r6, r4
 8007264:	d105      	bne.n	8007272 <__libc_init_array+0x2e>
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	f855 3b04 	ldr.w	r3, [r5], #4
 800726c:	4798      	blx	r3
 800726e:	3601      	adds	r6, #1
 8007270:	e7ee      	b.n	8007250 <__libc_init_array+0xc>
 8007272:	f855 3b04 	ldr.w	r3, [r5], #4
 8007276:	4798      	blx	r3
 8007278:	3601      	adds	r6, #1
 800727a:	e7f2      	b.n	8007262 <__libc_init_array+0x1e>
 800727c:	0800a908 	.word	0x0800a908
 8007280:	0800a908 	.word	0x0800a908
 8007284:	0800a908 	.word	0x0800a908
 8007288:	0800a90c 	.word	0x0800a90c

0800728c <memset>:
 800728c:	4402      	add	r2, r0
 800728e:	4603      	mov	r3, r0
 8007290:	4293      	cmp	r3, r2
 8007292:	d100      	bne.n	8007296 <memset+0xa>
 8007294:	4770      	bx	lr
 8007296:	f803 1b01 	strb.w	r1, [r3], #1
 800729a:	e7f9      	b.n	8007290 <memset+0x4>

0800729c <strcat>:
 800729c:	b510      	push	{r4, lr}
 800729e:	4602      	mov	r2, r0
 80072a0:	7814      	ldrb	r4, [r2, #0]
 80072a2:	4613      	mov	r3, r2
 80072a4:	3201      	adds	r2, #1
 80072a6:	2c00      	cmp	r4, #0
 80072a8:	d1fa      	bne.n	80072a0 <strcat+0x4>
 80072aa:	3b01      	subs	r3, #1
 80072ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072b4:	2a00      	cmp	r2, #0
 80072b6:	d1f9      	bne.n	80072ac <strcat+0x10>
 80072b8:	bd10      	pop	{r4, pc}
	...

080072bc <strtok>:
 80072bc:	4b16      	ldr	r3, [pc, #88]	; (8007318 <strtok+0x5c>)
 80072be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072c0:	681e      	ldr	r6, [r3, #0]
 80072c2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80072c4:	4605      	mov	r5, r0
 80072c6:	b9fc      	cbnz	r4, 8007308 <strtok+0x4c>
 80072c8:	2050      	movs	r0, #80	; 0x50
 80072ca:	9101      	str	r1, [sp, #4]
 80072cc:	f000 f9b0 	bl	8007630 <malloc>
 80072d0:	9901      	ldr	r1, [sp, #4]
 80072d2:	65b0      	str	r0, [r6, #88]	; 0x58
 80072d4:	4602      	mov	r2, r0
 80072d6:	b920      	cbnz	r0, 80072e2 <strtok+0x26>
 80072d8:	4b10      	ldr	r3, [pc, #64]	; (800731c <strtok+0x60>)
 80072da:	4811      	ldr	r0, [pc, #68]	; (8007320 <strtok+0x64>)
 80072dc:	2157      	movs	r1, #87	; 0x57
 80072de:	f000 f977 	bl	80075d0 <__assert_func>
 80072e2:	e9c0 4400 	strd	r4, r4, [r0]
 80072e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80072ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80072ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80072f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80072f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80072fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80072fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007302:	6184      	str	r4, [r0, #24]
 8007304:	7704      	strb	r4, [r0, #28]
 8007306:	6244      	str	r4, [r0, #36]	; 0x24
 8007308:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800730a:	2301      	movs	r3, #1
 800730c:	4628      	mov	r0, r5
 800730e:	b002      	add	sp, #8
 8007310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007314:	f000 b806 	b.w	8007324 <__strtok_r>
 8007318:	2000000c 	.word	0x2000000c
 800731c:	0800a4b4 	.word	0x0800a4b4
 8007320:	0800a4cb 	.word	0x0800a4cb

08007324 <__strtok_r>:
 8007324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007326:	b908      	cbnz	r0, 800732c <__strtok_r+0x8>
 8007328:	6810      	ldr	r0, [r2, #0]
 800732a:	b188      	cbz	r0, 8007350 <__strtok_r+0x2c>
 800732c:	4604      	mov	r4, r0
 800732e:	4620      	mov	r0, r4
 8007330:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007334:	460f      	mov	r7, r1
 8007336:	f817 6b01 	ldrb.w	r6, [r7], #1
 800733a:	b91e      	cbnz	r6, 8007344 <__strtok_r+0x20>
 800733c:	b965      	cbnz	r5, 8007358 <__strtok_r+0x34>
 800733e:	6015      	str	r5, [r2, #0]
 8007340:	4628      	mov	r0, r5
 8007342:	e005      	b.n	8007350 <__strtok_r+0x2c>
 8007344:	42b5      	cmp	r5, r6
 8007346:	d1f6      	bne.n	8007336 <__strtok_r+0x12>
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f0      	bne.n	800732e <__strtok_r+0xa>
 800734c:	6014      	str	r4, [r2, #0]
 800734e:	7003      	strb	r3, [r0, #0]
 8007350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007352:	461c      	mov	r4, r3
 8007354:	e00c      	b.n	8007370 <__strtok_r+0x4c>
 8007356:	b915      	cbnz	r5, 800735e <__strtok_r+0x3a>
 8007358:	f814 3b01 	ldrb.w	r3, [r4], #1
 800735c:	460e      	mov	r6, r1
 800735e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007362:	42ab      	cmp	r3, r5
 8007364:	d1f7      	bne.n	8007356 <__strtok_r+0x32>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f3      	beq.n	8007352 <__strtok_r+0x2e>
 800736a:	2300      	movs	r3, #0
 800736c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007370:	6014      	str	r4, [r2, #0]
 8007372:	e7ed      	b.n	8007350 <__strtok_r+0x2c>

08007374 <_strtol_l.constprop.0>:
 8007374:	2b01      	cmp	r3, #1
 8007376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800737a:	d001      	beq.n	8007380 <_strtol_l.constprop.0+0xc>
 800737c:	2b24      	cmp	r3, #36	; 0x24
 800737e:	d906      	bls.n	800738e <_strtol_l.constprop.0+0x1a>
 8007380:	f7ff ff5a 	bl	8007238 <__errno>
 8007384:	2316      	movs	r3, #22
 8007386:	6003      	str	r3, [r0, #0]
 8007388:	2000      	movs	r0, #0
 800738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007474 <_strtol_l.constprop.0+0x100>
 8007392:	460d      	mov	r5, r1
 8007394:	462e      	mov	r6, r5
 8007396:	f815 4b01 	ldrb.w	r4, [r5], #1
 800739a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800739e:	f017 0708 	ands.w	r7, r7, #8
 80073a2:	d1f7      	bne.n	8007394 <_strtol_l.constprop.0+0x20>
 80073a4:	2c2d      	cmp	r4, #45	; 0x2d
 80073a6:	d132      	bne.n	800740e <_strtol_l.constprop.0+0x9a>
 80073a8:	782c      	ldrb	r4, [r5, #0]
 80073aa:	2701      	movs	r7, #1
 80073ac:	1cb5      	adds	r5, r6, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d05b      	beq.n	800746a <_strtol_l.constprop.0+0xf6>
 80073b2:	2b10      	cmp	r3, #16
 80073b4:	d109      	bne.n	80073ca <_strtol_l.constprop.0+0x56>
 80073b6:	2c30      	cmp	r4, #48	; 0x30
 80073b8:	d107      	bne.n	80073ca <_strtol_l.constprop.0+0x56>
 80073ba:	782c      	ldrb	r4, [r5, #0]
 80073bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80073c0:	2c58      	cmp	r4, #88	; 0x58
 80073c2:	d14d      	bne.n	8007460 <_strtol_l.constprop.0+0xec>
 80073c4:	786c      	ldrb	r4, [r5, #1]
 80073c6:	2310      	movs	r3, #16
 80073c8:	3502      	adds	r5, #2
 80073ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80073ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80073d2:	f04f 0c00 	mov.w	ip, #0
 80073d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80073da:	4666      	mov	r6, ip
 80073dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80073e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80073e4:	f1be 0f09 	cmp.w	lr, #9
 80073e8:	d816      	bhi.n	8007418 <_strtol_l.constprop.0+0xa4>
 80073ea:	4674      	mov	r4, lr
 80073ec:	42a3      	cmp	r3, r4
 80073ee:	dd24      	ble.n	800743a <_strtol_l.constprop.0+0xc6>
 80073f0:	f1bc 0f00 	cmp.w	ip, #0
 80073f4:	db1e      	blt.n	8007434 <_strtol_l.constprop.0+0xc0>
 80073f6:	45b1      	cmp	r9, r6
 80073f8:	d31c      	bcc.n	8007434 <_strtol_l.constprop.0+0xc0>
 80073fa:	d101      	bne.n	8007400 <_strtol_l.constprop.0+0x8c>
 80073fc:	45a2      	cmp	sl, r4
 80073fe:	db19      	blt.n	8007434 <_strtol_l.constprop.0+0xc0>
 8007400:	fb06 4603 	mla	r6, r6, r3, r4
 8007404:	f04f 0c01 	mov.w	ip, #1
 8007408:	f815 4b01 	ldrb.w	r4, [r5], #1
 800740c:	e7e8      	b.n	80073e0 <_strtol_l.constprop.0+0x6c>
 800740e:	2c2b      	cmp	r4, #43	; 0x2b
 8007410:	bf04      	itt	eq
 8007412:	782c      	ldrbeq	r4, [r5, #0]
 8007414:	1cb5      	addeq	r5, r6, #2
 8007416:	e7ca      	b.n	80073ae <_strtol_l.constprop.0+0x3a>
 8007418:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800741c:	f1be 0f19 	cmp.w	lr, #25
 8007420:	d801      	bhi.n	8007426 <_strtol_l.constprop.0+0xb2>
 8007422:	3c37      	subs	r4, #55	; 0x37
 8007424:	e7e2      	b.n	80073ec <_strtol_l.constprop.0+0x78>
 8007426:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800742a:	f1be 0f19 	cmp.w	lr, #25
 800742e:	d804      	bhi.n	800743a <_strtol_l.constprop.0+0xc6>
 8007430:	3c57      	subs	r4, #87	; 0x57
 8007432:	e7db      	b.n	80073ec <_strtol_l.constprop.0+0x78>
 8007434:	f04f 3cff 	mov.w	ip, #4294967295
 8007438:	e7e6      	b.n	8007408 <_strtol_l.constprop.0+0x94>
 800743a:	f1bc 0f00 	cmp.w	ip, #0
 800743e:	da05      	bge.n	800744c <_strtol_l.constprop.0+0xd8>
 8007440:	2322      	movs	r3, #34	; 0x22
 8007442:	6003      	str	r3, [r0, #0]
 8007444:	4646      	mov	r6, r8
 8007446:	b942      	cbnz	r2, 800745a <_strtol_l.constprop.0+0xe6>
 8007448:	4630      	mov	r0, r6
 800744a:	e79e      	b.n	800738a <_strtol_l.constprop.0+0x16>
 800744c:	b107      	cbz	r7, 8007450 <_strtol_l.constprop.0+0xdc>
 800744e:	4276      	negs	r6, r6
 8007450:	2a00      	cmp	r2, #0
 8007452:	d0f9      	beq.n	8007448 <_strtol_l.constprop.0+0xd4>
 8007454:	f1bc 0f00 	cmp.w	ip, #0
 8007458:	d000      	beq.n	800745c <_strtol_l.constprop.0+0xe8>
 800745a:	1e69      	subs	r1, r5, #1
 800745c:	6011      	str	r1, [r2, #0]
 800745e:	e7f3      	b.n	8007448 <_strtol_l.constprop.0+0xd4>
 8007460:	2430      	movs	r4, #48	; 0x30
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1b1      	bne.n	80073ca <_strtol_l.constprop.0+0x56>
 8007466:	2308      	movs	r3, #8
 8007468:	e7af      	b.n	80073ca <_strtol_l.constprop.0+0x56>
 800746a:	2c30      	cmp	r4, #48	; 0x30
 800746c:	d0a5      	beq.n	80073ba <_strtol_l.constprop.0+0x46>
 800746e:	230a      	movs	r3, #10
 8007470:	e7ab      	b.n	80073ca <_strtol_l.constprop.0+0x56>
 8007472:	bf00      	nop
 8007474:	0800a565 	.word	0x0800a565

08007478 <strtol>:
 8007478:	4613      	mov	r3, r2
 800747a:	460a      	mov	r2, r1
 800747c:	4601      	mov	r1, r0
 800747e:	4802      	ldr	r0, [pc, #8]	; (8007488 <strtol+0x10>)
 8007480:	6800      	ldr	r0, [r0, #0]
 8007482:	f7ff bf77 	b.w	8007374 <_strtol_l.constprop.0>
 8007486:	bf00      	nop
 8007488:	2000000c 	.word	0x2000000c

0800748c <_strtoull_l.constprop.0>:
 800748c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	4692      	mov	sl, r2
 8007492:	4a49      	ldr	r2, [pc, #292]	; (80075b8 <_strtoull_l.constprop.0+0x12c>)
 8007494:	9001      	str	r0, [sp, #4]
 8007496:	4689      	mov	r9, r1
 8007498:	461d      	mov	r5, r3
 800749a:	460e      	mov	r6, r1
 800749c:	4633      	mov	r3, r6
 800749e:	f816 4b01 	ldrb.w	r4, [r6], #1
 80074a2:	5ca7      	ldrb	r7, [r4, r2]
 80074a4:	f017 0708 	ands.w	r7, r7, #8
 80074a8:	d1f8      	bne.n	800749c <_strtoull_l.constprop.0+0x10>
 80074aa:	2c2d      	cmp	r4, #45	; 0x2d
 80074ac:	d14a      	bne.n	8007544 <_strtoull_l.constprop.0+0xb8>
 80074ae:	7834      	ldrb	r4, [r6, #0]
 80074b0:	2701      	movs	r7, #1
 80074b2:	1c9e      	adds	r6, r3, #2
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	d07b      	beq.n	80075b0 <_strtoull_l.constprop.0+0x124>
 80074b8:	2d10      	cmp	r5, #16
 80074ba:	d109      	bne.n	80074d0 <_strtoull_l.constprop.0+0x44>
 80074bc:	2c30      	cmp	r4, #48	; 0x30
 80074be:	d107      	bne.n	80074d0 <_strtoull_l.constprop.0+0x44>
 80074c0:	7833      	ldrb	r3, [r6, #0]
 80074c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80074c6:	2b58      	cmp	r3, #88	; 0x58
 80074c8:	d16d      	bne.n	80075a6 <_strtoull_l.constprop.0+0x11a>
 80074ca:	7874      	ldrb	r4, [r6, #1]
 80074cc:	2510      	movs	r5, #16
 80074ce:	3602      	adds	r6, #2
 80074d0:	ea4f 7be5 	mov.w	fp, r5, asr #31
 80074d4:	462a      	mov	r2, r5
 80074d6:	465b      	mov	r3, fp
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	f04f 31ff 	mov.w	r1, #4294967295
 80074e0:	f7f9 fb92 	bl	8000c08 <__aeabi_uldivmod>
 80074e4:	462a      	mov	r2, r5
 80074e6:	9000      	str	r0, [sp, #0]
 80074e8:	4688      	mov	r8, r1
 80074ea:	465b      	mov	r3, fp
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295
 80074f0:	f04f 31ff 	mov.w	r1, #4294967295
 80074f4:	f7f9 fb88 	bl	8000c08 <__aeabi_uldivmod>
 80074f8:	2300      	movs	r3, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	4619      	mov	r1, r3
 80074fe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007502:	f1bc 0f09 	cmp.w	ip, #9
 8007506:	d822      	bhi.n	800754e <_strtoull_l.constprop.0+0xc2>
 8007508:	4664      	mov	r4, ip
 800750a:	42a5      	cmp	r5, r4
 800750c:	dd30      	ble.n	8007570 <_strtoull_l.constprop.0+0xe4>
 800750e:	2b00      	cmp	r3, #0
 8007510:	db2b      	blt.n	800756a <_strtoull_l.constprop.0+0xde>
 8007512:	9b00      	ldr	r3, [sp, #0]
 8007514:	4283      	cmp	r3, r0
 8007516:	eb78 0301 	sbcs.w	r3, r8, r1
 800751a:	d326      	bcc.n	800756a <_strtoull_l.constprop.0+0xde>
 800751c:	9b00      	ldr	r3, [sp, #0]
 800751e:	4588      	cmp	r8, r1
 8007520:	bf08      	it	eq
 8007522:	4283      	cmpeq	r3, r0
 8007524:	d101      	bne.n	800752a <_strtoull_l.constprop.0+0x9e>
 8007526:	42a2      	cmp	r2, r4
 8007528:	db1f      	blt.n	800756a <_strtoull_l.constprop.0+0xde>
 800752a:	4369      	muls	r1, r5
 800752c:	fb00 110b 	mla	r1, r0, fp, r1
 8007530:	fba5 0300 	umull	r0, r3, r5, r0
 8007534:	4419      	add	r1, r3
 8007536:	1820      	adds	r0, r4, r0
 8007538:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800753c:	2301      	movs	r3, #1
 800753e:	f816 4b01 	ldrb.w	r4, [r6], #1
 8007542:	e7dc      	b.n	80074fe <_strtoull_l.constprop.0+0x72>
 8007544:	2c2b      	cmp	r4, #43	; 0x2b
 8007546:	bf04      	itt	eq
 8007548:	7834      	ldrbeq	r4, [r6, #0]
 800754a:	1c9e      	addeq	r6, r3, #2
 800754c:	e7b2      	b.n	80074b4 <_strtoull_l.constprop.0+0x28>
 800754e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007552:	f1bc 0f19 	cmp.w	ip, #25
 8007556:	d801      	bhi.n	800755c <_strtoull_l.constprop.0+0xd0>
 8007558:	3c37      	subs	r4, #55	; 0x37
 800755a:	e7d6      	b.n	800750a <_strtoull_l.constprop.0+0x7e>
 800755c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007560:	f1bc 0f19 	cmp.w	ip, #25
 8007564:	d804      	bhi.n	8007570 <_strtoull_l.constprop.0+0xe4>
 8007566:	3c57      	subs	r4, #87	; 0x57
 8007568:	e7cf      	b.n	800750a <_strtoull_l.constprop.0+0x7e>
 800756a:	f04f 33ff 	mov.w	r3, #4294967295
 800756e:	e7e6      	b.n	800753e <_strtoull_l.constprop.0+0xb2>
 8007570:	2b00      	cmp	r3, #0
 8007572:	da0b      	bge.n	800758c <_strtoull_l.constprop.0+0x100>
 8007574:	9a01      	ldr	r2, [sp, #4]
 8007576:	2322      	movs	r3, #34	; 0x22
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	4601      	mov	r1, r0
 8007580:	f1ba 0f00 	cmp.w	sl, #0
 8007584:	d10a      	bne.n	800759c <_strtoull_l.constprop.0+0x110>
 8007586:	b003      	add	sp, #12
 8007588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758c:	b117      	cbz	r7, 8007594 <_strtoull_l.constprop.0+0x108>
 800758e:	4240      	negs	r0, r0
 8007590:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007594:	f1ba 0f00 	cmp.w	sl, #0
 8007598:	d0f5      	beq.n	8007586 <_strtoull_l.constprop.0+0xfa>
 800759a:	b10b      	cbz	r3, 80075a0 <_strtoull_l.constprop.0+0x114>
 800759c:	f106 39ff 	add.w	r9, r6, #4294967295
 80075a0:	f8ca 9000 	str.w	r9, [sl]
 80075a4:	e7ef      	b.n	8007586 <_strtoull_l.constprop.0+0xfa>
 80075a6:	2430      	movs	r4, #48	; 0x30
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	d191      	bne.n	80074d0 <_strtoull_l.constprop.0+0x44>
 80075ac:	2508      	movs	r5, #8
 80075ae:	e78f      	b.n	80074d0 <_strtoull_l.constprop.0+0x44>
 80075b0:	2c30      	cmp	r4, #48	; 0x30
 80075b2:	d085      	beq.n	80074c0 <_strtoull_l.constprop.0+0x34>
 80075b4:	250a      	movs	r5, #10
 80075b6:	e78b      	b.n	80074d0 <_strtoull_l.constprop.0+0x44>
 80075b8:	0800a565 	.word	0x0800a565

080075bc <strtoull>:
 80075bc:	4613      	mov	r3, r2
 80075be:	460a      	mov	r2, r1
 80075c0:	4601      	mov	r1, r0
 80075c2:	4802      	ldr	r0, [pc, #8]	; (80075cc <strtoull+0x10>)
 80075c4:	6800      	ldr	r0, [r0, #0]
 80075c6:	f7ff bf61 	b.w	800748c <_strtoull_l.constprop.0>
 80075ca:	bf00      	nop
 80075cc:	2000000c 	.word	0x2000000c

080075d0 <__assert_func>:
 80075d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075d2:	4614      	mov	r4, r2
 80075d4:	461a      	mov	r2, r3
 80075d6:	4b09      	ldr	r3, [pc, #36]	; (80075fc <__assert_func+0x2c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4605      	mov	r5, r0
 80075dc:	68d8      	ldr	r0, [r3, #12]
 80075de:	b14c      	cbz	r4, 80075f4 <__assert_func+0x24>
 80075e0:	4b07      	ldr	r3, [pc, #28]	; (8007600 <__assert_func+0x30>)
 80075e2:	9100      	str	r1, [sp, #0]
 80075e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075e8:	4906      	ldr	r1, [pc, #24]	; (8007604 <__assert_func+0x34>)
 80075ea:	462b      	mov	r3, r5
 80075ec:	f000 f80e 	bl	800760c <fiprintf>
 80075f0:	f000 fcc4 	bl	8007f7c <abort>
 80075f4:	4b04      	ldr	r3, [pc, #16]	; (8007608 <__assert_func+0x38>)
 80075f6:	461c      	mov	r4, r3
 80075f8:	e7f3      	b.n	80075e2 <__assert_func+0x12>
 80075fa:	bf00      	nop
 80075fc:	2000000c 	.word	0x2000000c
 8007600:	0800a528 	.word	0x0800a528
 8007604:	0800a535 	.word	0x0800a535
 8007608:	0800a563 	.word	0x0800a563

0800760c <fiprintf>:
 800760c:	b40e      	push	{r1, r2, r3}
 800760e:	b503      	push	{r0, r1, lr}
 8007610:	4601      	mov	r1, r0
 8007612:	ab03      	add	r3, sp, #12
 8007614:	4805      	ldr	r0, [pc, #20]	; (800762c <fiprintf+0x20>)
 8007616:	f853 2b04 	ldr.w	r2, [r3], #4
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	f000 f919 	bl	8007854 <_vfiprintf_r>
 8007622:	b002      	add	sp, #8
 8007624:	f85d eb04 	ldr.w	lr, [sp], #4
 8007628:	b003      	add	sp, #12
 800762a:	4770      	bx	lr
 800762c:	2000000c 	.word	0x2000000c

08007630 <malloc>:
 8007630:	4b02      	ldr	r3, [pc, #8]	; (800763c <malloc+0xc>)
 8007632:	4601      	mov	r1, r0
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	f000 b86f 	b.w	8007718 <_malloc_r>
 800763a:	bf00      	nop
 800763c:	2000000c 	.word	0x2000000c

08007640 <_free_r>:
 8007640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007642:	2900      	cmp	r1, #0
 8007644:	d044      	beq.n	80076d0 <_free_r+0x90>
 8007646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800764a:	9001      	str	r0, [sp, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f1a1 0404 	sub.w	r4, r1, #4
 8007652:	bfb8      	it	lt
 8007654:	18e4      	addlt	r4, r4, r3
 8007656:	f000 feb9 	bl	80083cc <__malloc_lock>
 800765a:	4a1e      	ldr	r2, [pc, #120]	; (80076d4 <_free_r+0x94>)
 800765c:	9801      	ldr	r0, [sp, #4]
 800765e:	6813      	ldr	r3, [r2, #0]
 8007660:	b933      	cbnz	r3, 8007670 <_free_r+0x30>
 8007662:	6063      	str	r3, [r4, #4]
 8007664:	6014      	str	r4, [r2, #0]
 8007666:	b003      	add	sp, #12
 8007668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800766c:	f000 beb4 	b.w	80083d8 <__malloc_unlock>
 8007670:	42a3      	cmp	r3, r4
 8007672:	d908      	bls.n	8007686 <_free_r+0x46>
 8007674:	6825      	ldr	r5, [r4, #0]
 8007676:	1961      	adds	r1, r4, r5
 8007678:	428b      	cmp	r3, r1
 800767a:	bf01      	itttt	eq
 800767c:	6819      	ldreq	r1, [r3, #0]
 800767e:	685b      	ldreq	r3, [r3, #4]
 8007680:	1949      	addeq	r1, r1, r5
 8007682:	6021      	streq	r1, [r4, #0]
 8007684:	e7ed      	b.n	8007662 <_free_r+0x22>
 8007686:	461a      	mov	r2, r3
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	b10b      	cbz	r3, 8007690 <_free_r+0x50>
 800768c:	42a3      	cmp	r3, r4
 800768e:	d9fa      	bls.n	8007686 <_free_r+0x46>
 8007690:	6811      	ldr	r1, [r2, #0]
 8007692:	1855      	adds	r5, r2, r1
 8007694:	42a5      	cmp	r5, r4
 8007696:	d10b      	bne.n	80076b0 <_free_r+0x70>
 8007698:	6824      	ldr	r4, [r4, #0]
 800769a:	4421      	add	r1, r4
 800769c:	1854      	adds	r4, r2, r1
 800769e:	42a3      	cmp	r3, r4
 80076a0:	6011      	str	r1, [r2, #0]
 80076a2:	d1e0      	bne.n	8007666 <_free_r+0x26>
 80076a4:	681c      	ldr	r4, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	6053      	str	r3, [r2, #4]
 80076aa:	4421      	add	r1, r4
 80076ac:	6011      	str	r1, [r2, #0]
 80076ae:	e7da      	b.n	8007666 <_free_r+0x26>
 80076b0:	d902      	bls.n	80076b8 <_free_r+0x78>
 80076b2:	230c      	movs	r3, #12
 80076b4:	6003      	str	r3, [r0, #0]
 80076b6:	e7d6      	b.n	8007666 <_free_r+0x26>
 80076b8:	6825      	ldr	r5, [r4, #0]
 80076ba:	1961      	adds	r1, r4, r5
 80076bc:	428b      	cmp	r3, r1
 80076be:	bf04      	itt	eq
 80076c0:	6819      	ldreq	r1, [r3, #0]
 80076c2:	685b      	ldreq	r3, [r3, #4]
 80076c4:	6063      	str	r3, [r4, #4]
 80076c6:	bf04      	itt	eq
 80076c8:	1949      	addeq	r1, r1, r5
 80076ca:	6021      	streq	r1, [r4, #0]
 80076cc:	6054      	str	r4, [r2, #4]
 80076ce:	e7ca      	b.n	8007666 <_free_r+0x26>
 80076d0:	b003      	add	sp, #12
 80076d2:	bd30      	pop	{r4, r5, pc}
 80076d4:	200007b4 	.word	0x200007b4

080076d8 <sbrk_aligned>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	4e0e      	ldr	r6, [pc, #56]	; (8007714 <sbrk_aligned+0x3c>)
 80076dc:	460c      	mov	r4, r1
 80076de:	6831      	ldr	r1, [r6, #0]
 80076e0:	4605      	mov	r5, r0
 80076e2:	b911      	cbnz	r1, 80076ea <sbrk_aligned+0x12>
 80076e4:	f000 fb7a 	bl	8007ddc <_sbrk_r>
 80076e8:	6030      	str	r0, [r6, #0]
 80076ea:	4621      	mov	r1, r4
 80076ec:	4628      	mov	r0, r5
 80076ee:	f000 fb75 	bl	8007ddc <_sbrk_r>
 80076f2:	1c43      	adds	r3, r0, #1
 80076f4:	d00a      	beq.n	800770c <sbrk_aligned+0x34>
 80076f6:	1cc4      	adds	r4, r0, #3
 80076f8:	f024 0403 	bic.w	r4, r4, #3
 80076fc:	42a0      	cmp	r0, r4
 80076fe:	d007      	beq.n	8007710 <sbrk_aligned+0x38>
 8007700:	1a21      	subs	r1, r4, r0
 8007702:	4628      	mov	r0, r5
 8007704:	f000 fb6a 	bl	8007ddc <_sbrk_r>
 8007708:	3001      	adds	r0, #1
 800770a:	d101      	bne.n	8007710 <sbrk_aligned+0x38>
 800770c:	f04f 34ff 	mov.w	r4, #4294967295
 8007710:	4620      	mov	r0, r4
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	200007b8 	.word	0x200007b8

08007718 <_malloc_r>:
 8007718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771c:	1ccd      	adds	r5, r1, #3
 800771e:	f025 0503 	bic.w	r5, r5, #3
 8007722:	3508      	adds	r5, #8
 8007724:	2d0c      	cmp	r5, #12
 8007726:	bf38      	it	cc
 8007728:	250c      	movcc	r5, #12
 800772a:	2d00      	cmp	r5, #0
 800772c:	4607      	mov	r7, r0
 800772e:	db01      	blt.n	8007734 <_malloc_r+0x1c>
 8007730:	42a9      	cmp	r1, r5
 8007732:	d905      	bls.n	8007740 <_malloc_r+0x28>
 8007734:	230c      	movs	r3, #12
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	2600      	movs	r6, #0
 800773a:	4630      	mov	r0, r6
 800773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007740:	4e2e      	ldr	r6, [pc, #184]	; (80077fc <_malloc_r+0xe4>)
 8007742:	f000 fe43 	bl	80083cc <__malloc_lock>
 8007746:	6833      	ldr	r3, [r6, #0]
 8007748:	461c      	mov	r4, r3
 800774a:	bb34      	cbnz	r4, 800779a <_malloc_r+0x82>
 800774c:	4629      	mov	r1, r5
 800774e:	4638      	mov	r0, r7
 8007750:	f7ff ffc2 	bl	80076d8 <sbrk_aligned>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	4604      	mov	r4, r0
 8007758:	d14d      	bne.n	80077f6 <_malloc_r+0xde>
 800775a:	6834      	ldr	r4, [r6, #0]
 800775c:	4626      	mov	r6, r4
 800775e:	2e00      	cmp	r6, #0
 8007760:	d140      	bne.n	80077e4 <_malloc_r+0xcc>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	4631      	mov	r1, r6
 8007766:	4638      	mov	r0, r7
 8007768:	eb04 0803 	add.w	r8, r4, r3
 800776c:	f000 fb36 	bl	8007ddc <_sbrk_r>
 8007770:	4580      	cmp	r8, r0
 8007772:	d13a      	bne.n	80077ea <_malloc_r+0xd2>
 8007774:	6821      	ldr	r1, [r4, #0]
 8007776:	3503      	adds	r5, #3
 8007778:	1a6d      	subs	r5, r5, r1
 800777a:	f025 0503 	bic.w	r5, r5, #3
 800777e:	3508      	adds	r5, #8
 8007780:	2d0c      	cmp	r5, #12
 8007782:	bf38      	it	cc
 8007784:	250c      	movcc	r5, #12
 8007786:	4629      	mov	r1, r5
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ffa5 	bl	80076d8 <sbrk_aligned>
 800778e:	3001      	adds	r0, #1
 8007790:	d02b      	beq.n	80077ea <_malloc_r+0xd2>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	442b      	add	r3, r5
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	e00e      	b.n	80077b8 <_malloc_r+0xa0>
 800779a:	6822      	ldr	r2, [r4, #0]
 800779c:	1b52      	subs	r2, r2, r5
 800779e:	d41e      	bmi.n	80077de <_malloc_r+0xc6>
 80077a0:	2a0b      	cmp	r2, #11
 80077a2:	d916      	bls.n	80077d2 <_malloc_r+0xba>
 80077a4:	1961      	adds	r1, r4, r5
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	6025      	str	r5, [r4, #0]
 80077aa:	bf18      	it	ne
 80077ac:	6059      	strne	r1, [r3, #4]
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	bf08      	it	eq
 80077b2:	6031      	streq	r1, [r6, #0]
 80077b4:	5162      	str	r2, [r4, r5]
 80077b6:	604b      	str	r3, [r1, #4]
 80077b8:	4638      	mov	r0, r7
 80077ba:	f104 060b 	add.w	r6, r4, #11
 80077be:	f000 fe0b 	bl	80083d8 <__malloc_unlock>
 80077c2:	f026 0607 	bic.w	r6, r6, #7
 80077c6:	1d23      	adds	r3, r4, #4
 80077c8:	1af2      	subs	r2, r6, r3
 80077ca:	d0b6      	beq.n	800773a <_malloc_r+0x22>
 80077cc:	1b9b      	subs	r3, r3, r6
 80077ce:	50a3      	str	r3, [r4, r2]
 80077d0:	e7b3      	b.n	800773a <_malloc_r+0x22>
 80077d2:	6862      	ldr	r2, [r4, #4]
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	bf0c      	ite	eq
 80077d8:	6032      	streq	r2, [r6, #0]
 80077da:	605a      	strne	r2, [r3, #4]
 80077dc:	e7ec      	b.n	80077b8 <_malloc_r+0xa0>
 80077de:	4623      	mov	r3, r4
 80077e0:	6864      	ldr	r4, [r4, #4]
 80077e2:	e7b2      	b.n	800774a <_malloc_r+0x32>
 80077e4:	4634      	mov	r4, r6
 80077e6:	6876      	ldr	r6, [r6, #4]
 80077e8:	e7b9      	b.n	800775e <_malloc_r+0x46>
 80077ea:	230c      	movs	r3, #12
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	4638      	mov	r0, r7
 80077f0:	f000 fdf2 	bl	80083d8 <__malloc_unlock>
 80077f4:	e7a1      	b.n	800773a <_malloc_r+0x22>
 80077f6:	6025      	str	r5, [r4, #0]
 80077f8:	e7de      	b.n	80077b8 <_malloc_r+0xa0>
 80077fa:	bf00      	nop
 80077fc:	200007b4 	.word	0x200007b4

08007800 <__sfputc_r>:
 8007800:	6893      	ldr	r3, [r2, #8]
 8007802:	3b01      	subs	r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	b410      	push	{r4}
 8007808:	6093      	str	r3, [r2, #8]
 800780a:	da08      	bge.n	800781e <__sfputc_r+0x1e>
 800780c:	6994      	ldr	r4, [r2, #24]
 800780e:	42a3      	cmp	r3, r4
 8007810:	db01      	blt.n	8007816 <__sfputc_r+0x16>
 8007812:	290a      	cmp	r1, #10
 8007814:	d103      	bne.n	800781e <__sfputc_r+0x1e>
 8007816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800781a:	f000 baef 	b.w	8007dfc <__swbuf_r>
 800781e:	6813      	ldr	r3, [r2, #0]
 8007820:	1c58      	adds	r0, r3, #1
 8007822:	6010      	str	r0, [r2, #0]
 8007824:	7019      	strb	r1, [r3, #0]
 8007826:	4608      	mov	r0, r1
 8007828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800782c:	4770      	bx	lr

0800782e <__sfputs_r>:
 800782e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007830:	4606      	mov	r6, r0
 8007832:	460f      	mov	r7, r1
 8007834:	4614      	mov	r4, r2
 8007836:	18d5      	adds	r5, r2, r3
 8007838:	42ac      	cmp	r4, r5
 800783a:	d101      	bne.n	8007840 <__sfputs_r+0x12>
 800783c:	2000      	movs	r0, #0
 800783e:	e007      	b.n	8007850 <__sfputs_r+0x22>
 8007840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007844:	463a      	mov	r2, r7
 8007846:	4630      	mov	r0, r6
 8007848:	f7ff ffda 	bl	8007800 <__sfputc_r>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d1f3      	bne.n	8007838 <__sfputs_r+0xa>
 8007850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007854 <_vfiprintf_r>:
 8007854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007858:	460d      	mov	r5, r1
 800785a:	b09d      	sub	sp, #116	; 0x74
 800785c:	4614      	mov	r4, r2
 800785e:	4698      	mov	r8, r3
 8007860:	4606      	mov	r6, r0
 8007862:	b118      	cbz	r0, 800786c <_vfiprintf_r+0x18>
 8007864:	6983      	ldr	r3, [r0, #24]
 8007866:	b90b      	cbnz	r3, 800786c <_vfiprintf_r+0x18>
 8007868:	f000 fcaa 	bl	80081c0 <__sinit>
 800786c:	4b89      	ldr	r3, [pc, #548]	; (8007a94 <_vfiprintf_r+0x240>)
 800786e:	429d      	cmp	r5, r3
 8007870:	d11b      	bne.n	80078aa <_vfiprintf_r+0x56>
 8007872:	6875      	ldr	r5, [r6, #4]
 8007874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007876:	07d9      	lsls	r1, r3, #31
 8007878:	d405      	bmi.n	8007886 <_vfiprintf_r+0x32>
 800787a:	89ab      	ldrh	r3, [r5, #12]
 800787c:	059a      	lsls	r2, r3, #22
 800787e:	d402      	bmi.n	8007886 <_vfiprintf_r+0x32>
 8007880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007882:	f000 fd3b 	bl	80082fc <__retarget_lock_acquire_recursive>
 8007886:	89ab      	ldrh	r3, [r5, #12]
 8007888:	071b      	lsls	r3, r3, #28
 800788a:	d501      	bpl.n	8007890 <_vfiprintf_r+0x3c>
 800788c:	692b      	ldr	r3, [r5, #16]
 800788e:	b9eb      	cbnz	r3, 80078cc <_vfiprintf_r+0x78>
 8007890:	4629      	mov	r1, r5
 8007892:	4630      	mov	r0, r6
 8007894:	f000 fb04 	bl	8007ea0 <__swsetup_r>
 8007898:	b1c0      	cbz	r0, 80078cc <_vfiprintf_r+0x78>
 800789a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800789c:	07dc      	lsls	r4, r3, #31
 800789e:	d50e      	bpl.n	80078be <_vfiprintf_r+0x6a>
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	b01d      	add	sp, #116	; 0x74
 80078a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078aa:	4b7b      	ldr	r3, [pc, #492]	; (8007a98 <_vfiprintf_r+0x244>)
 80078ac:	429d      	cmp	r5, r3
 80078ae:	d101      	bne.n	80078b4 <_vfiprintf_r+0x60>
 80078b0:	68b5      	ldr	r5, [r6, #8]
 80078b2:	e7df      	b.n	8007874 <_vfiprintf_r+0x20>
 80078b4:	4b79      	ldr	r3, [pc, #484]	; (8007a9c <_vfiprintf_r+0x248>)
 80078b6:	429d      	cmp	r5, r3
 80078b8:	bf08      	it	eq
 80078ba:	68f5      	ldreq	r5, [r6, #12]
 80078bc:	e7da      	b.n	8007874 <_vfiprintf_r+0x20>
 80078be:	89ab      	ldrh	r3, [r5, #12]
 80078c0:	0598      	lsls	r0, r3, #22
 80078c2:	d4ed      	bmi.n	80078a0 <_vfiprintf_r+0x4c>
 80078c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078c6:	f000 fd1a 	bl	80082fe <__retarget_lock_release_recursive>
 80078ca:	e7e9      	b.n	80078a0 <_vfiprintf_r+0x4c>
 80078cc:	2300      	movs	r3, #0
 80078ce:	9309      	str	r3, [sp, #36]	; 0x24
 80078d0:	2320      	movs	r3, #32
 80078d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80078da:	2330      	movs	r3, #48	; 0x30
 80078dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007aa0 <_vfiprintf_r+0x24c>
 80078e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078e4:	f04f 0901 	mov.w	r9, #1
 80078e8:	4623      	mov	r3, r4
 80078ea:	469a      	mov	sl, r3
 80078ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078f0:	b10a      	cbz	r2, 80078f6 <_vfiprintf_r+0xa2>
 80078f2:	2a25      	cmp	r2, #37	; 0x25
 80078f4:	d1f9      	bne.n	80078ea <_vfiprintf_r+0x96>
 80078f6:	ebba 0b04 	subs.w	fp, sl, r4
 80078fa:	d00b      	beq.n	8007914 <_vfiprintf_r+0xc0>
 80078fc:	465b      	mov	r3, fp
 80078fe:	4622      	mov	r2, r4
 8007900:	4629      	mov	r1, r5
 8007902:	4630      	mov	r0, r6
 8007904:	f7ff ff93 	bl	800782e <__sfputs_r>
 8007908:	3001      	adds	r0, #1
 800790a:	f000 80aa 	beq.w	8007a62 <_vfiprintf_r+0x20e>
 800790e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007910:	445a      	add	r2, fp
 8007912:	9209      	str	r2, [sp, #36]	; 0x24
 8007914:	f89a 3000 	ldrb.w	r3, [sl]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 80a2 	beq.w	8007a62 <_vfiprintf_r+0x20e>
 800791e:	2300      	movs	r3, #0
 8007920:	f04f 32ff 	mov.w	r2, #4294967295
 8007924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007928:	f10a 0a01 	add.w	sl, sl, #1
 800792c:	9304      	str	r3, [sp, #16]
 800792e:	9307      	str	r3, [sp, #28]
 8007930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007934:	931a      	str	r3, [sp, #104]	; 0x68
 8007936:	4654      	mov	r4, sl
 8007938:	2205      	movs	r2, #5
 800793a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800793e:	4858      	ldr	r0, [pc, #352]	; (8007aa0 <_vfiprintf_r+0x24c>)
 8007940:	f7f8 fc5e 	bl	8000200 <memchr>
 8007944:	9a04      	ldr	r2, [sp, #16]
 8007946:	b9d8      	cbnz	r0, 8007980 <_vfiprintf_r+0x12c>
 8007948:	06d1      	lsls	r1, r2, #27
 800794a:	bf44      	itt	mi
 800794c:	2320      	movmi	r3, #32
 800794e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007952:	0713      	lsls	r3, r2, #28
 8007954:	bf44      	itt	mi
 8007956:	232b      	movmi	r3, #43	; 0x2b
 8007958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800795c:	f89a 3000 	ldrb.w	r3, [sl]
 8007960:	2b2a      	cmp	r3, #42	; 0x2a
 8007962:	d015      	beq.n	8007990 <_vfiprintf_r+0x13c>
 8007964:	9a07      	ldr	r2, [sp, #28]
 8007966:	4654      	mov	r4, sl
 8007968:	2000      	movs	r0, #0
 800796a:	f04f 0c0a 	mov.w	ip, #10
 800796e:	4621      	mov	r1, r4
 8007970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007974:	3b30      	subs	r3, #48	; 0x30
 8007976:	2b09      	cmp	r3, #9
 8007978:	d94e      	bls.n	8007a18 <_vfiprintf_r+0x1c4>
 800797a:	b1b0      	cbz	r0, 80079aa <_vfiprintf_r+0x156>
 800797c:	9207      	str	r2, [sp, #28]
 800797e:	e014      	b.n	80079aa <_vfiprintf_r+0x156>
 8007980:	eba0 0308 	sub.w	r3, r0, r8
 8007984:	fa09 f303 	lsl.w	r3, r9, r3
 8007988:	4313      	orrs	r3, r2
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	46a2      	mov	sl, r4
 800798e:	e7d2      	b.n	8007936 <_vfiprintf_r+0xe2>
 8007990:	9b03      	ldr	r3, [sp, #12]
 8007992:	1d19      	adds	r1, r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	9103      	str	r1, [sp, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	bfbb      	ittet	lt
 800799c:	425b      	neglt	r3, r3
 800799e:	f042 0202 	orrlt.w	r2, r2, #2
 80079a2:	9307      	strge	r3, [sp, #28]
 80079a4:	9307      	strlt	r3, [sp, #28]
 80079a6:	bfb8      	it	lt
 80079a8:	9204      	strlt	r2, [sp, #16]
 80079aa:	7823      	ldrb	r3, [r4, #0]
 80079ac:	2b2e      	cmp	r3, #46	; 0x2e
 80079ae:	d10c      	bne.n	80079ca <_vfiprintf_r+0x176>
 80079b0:	7863      	ldrb	r3, [r4, #1]
 80079b2:	2b2a      	cmp	r3, #42	; 0x2a
 80079b4:	d135      	bne.n	8007a22 <_vfiprintf_r+0x1ce>
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	1d1a      	adds	r2, r3, #4
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	9203      	str	r2, [sp, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bfb8      	it	lt
 80079c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80079c6:	3402      	adds	r4, #2
 80079c8:	9305      	str	r3, [sp, #20]
 80079ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ab0 <_vfiprintf_r+0x25c>
 80079ce:	7821      	ldrb	r1, [r4, #0]
 80079d0:	2203      	movs	r2, #3
 80079d2:	4650      	mov	r0, sl
 80079d4:	f7f8 fc14 	bl	8000200 <memchr>
 80079d8:	b140      	cbz	r0, 80079ec <_vfiprintf_r+0x198>
 80079da:	2340      	movs	r3, #64	; 0x40
 80079dc:	eba0 000a 	sub.w	r0, r0, sl
 80079e0:	fa03 f000 	lsl.w	r0, r3, r0
 80079e4:	9b04      	ldr	r3, [sp, #16]
 80079e6:	4303      	orrs	r3, r0
 80079e8:	3401      	adds	r4, #1
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f0:	482c      	ldr	r0, [pc, #176]	; (8007aa4 <_vfiprintf_r+0x250>)
 80079f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079f6:	2206      	movs	r2, #6
 80079f8:	f7f8 fc02 	bl	8000200 <memchr>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d03f      	beq.n	8007a80 <_vfiprintf_r+0x22c>
 8007a00:	4b29      	ldr	r3, [pc, #164]	; (8007aa8 <_vfiprintf_r+0x254>)
 8007a02:	bb1b      	cbnz	r3, 8007a4c <_vfiprintf_r+0x1f8>
 8007a04:	9b03      	ldr	r3, [sp, #12]
 8007a06:	3307      	adds	r3, #7
 8007a08:	f023 0307 	bic.w	r3, r3, #7
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	9303      	str	r3, [sp, #12]
 8007a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a12:	443b      	add	r3, r7
 8007a14:	9309      	str	r3, [sp, #36]	; 0x24
 8007a16:	e767      	b.n	80078e8 <_vfiprintf_r+0x94>
 8007a18:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	2001      	movs	r0, #1
 8007a20:	e7a5      	b.n	800796e <_vfiprintf_r+0x11a>
 8007a22:	2300      	movs	r3, #0
 8007a24:	3401      	adds	r4, #1
 8007a26:	9305      	str	r3, [sp, #20]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f04f 0c0a 	mov.w	ip, #10
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a34:	3a30      	subs	r2, #48	; 0x30
 8007a36:	2a09      	cmp	r2, #9
 8007a38:	d903      	bls.n	8007a42 <_vfiprintf_r+0x1ee>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0c5      	beq.n	80079ca <_vfiprintf_r+0x176>
 8007a3e:	9105      	str	r1, [sp, #20]
 8007a40:	e7c3      	b.n	80079ca <_vfiprintf_r+0x176>
 8007a42:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a46:	4604      	mov	r4, r0
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e7f0      	b.n	8007a2e <_vfiprintf_r+0x1da>
 8007a4c:	ab03      	add	r3, sp, #12
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	462a      	mov	r2, r5
 8007a52:	4b16      	ldr	r3, [pc, #88]	; (8007aac <_vfiprintf_r+0x258>)
 8007a54:	a904      	add	r1, sp, #16
 8007a56:	4630      	mov	r0, r6
 8007a58:	f3af 8000 	nop.w
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	1c78      	adds	r0, r7, #1
 8007a60:	d1d6      	bne.n	8007a10 <_vfiprintf_r+0x1bc>
 8007a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a64:	07d9      	lsls	r1, r3, #31
 8007a66:	d405      	bmi.n	8007a74 <_vfiprintf_r+0x220>
 8007a68:	89ab      	ldrh	r3, [r5, #12]
 8007a6a:	059a      	lsls	r2, r3, #22
 8007a6c:	d402      	bmi.n	8007a74 <_vfiprintf_r+0x220>
 8007a6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a70:	f000 fc45 	bl	80082fe <__retarget_lock_release_recursive>
 8007a74:	89ab      	ldrh	r3, [r5, #12]
 8007a76:	065b      	lsls	r3, r3, #25
 8007a78:	f53f af12 	bmi.w	80078a0 <_vfiprintf_r+0x4c>
 8007a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a7e:	e711      	b.n	80078a4 <_vfiprintf_r+0x50>
 8007a80:	ab03      	add	r3, sp, #12
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	462a      	mov	r2, r5
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <_vfiprintf_r+0x258>)
 8007a88:	a904      	add	r1, sp, #16
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f000 f880 	bl	8007b90 <_printf_i>
 8007a90:	e7e4      	b.n	8007a5c <_vfiprintf_r+0x208>
 8007a92:	bf00      	nop
 8007a94:	0800a6b8 	.word	0x0800a6b8
 8007a98:	0800a6d8 	.word	0x0800a6d8
 8007a9c:	0800a698 	.word	0x0800a698
 8007aa0:	0800a665 	.word	0x0800a665
 8007aa4:	0800a66f 	.word	0x0800a66f
 8007aa8:	00000000 	.word	0x00000000
 8007aac:	0800782f 	.word	0x0800782f
 8007ab0:	0800a66b 	.word	0x0800a66b

08007ab4 <_printf_common>:
 8007ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab8:	4616      	mov	r6, r2
 8007aba:	4699      	mov	r9, r3
 8007abc:	688a      	ldr	r2, [r1, #8]
 8007abe:	690b      	ldr	r3, [r1, #16]
 8007ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	bfb8      	it	lt
 8007ac8:	4613      	movlt	r3, r2
 8007aca:	6033      	str	r3, [r6, #0]
 8007acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	b10a      	cbz	r2, 8007ada <_printf_common+0x26>
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	6033      	str	r3, [r6, #0]
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	0699      	lsls	r1, r3, #26
 8007ade:	bf42      	ittt	mi
 8007ae0:	6833      	ldrmi	r3, [r6, #0]
 8007ae2:	3302      	addmi	r3, #2
 8007ae4:	6033      	strmi	r3, [r6, #0]
 8007ae6:	6825      	ldr	r5, [r4, #0]
 8007ae8:	f015 0506 	ands.w	r5, r5, #6
 8007aec:	d106      	bne.n	8007afc <_printf_common+0x48>
 8007aee:	f104 0a19 	add.w	sl, r4, #25
 8007af2:	68e3      	ldr	r3, [r4, #12]
 8007af4:	6832      	ldr	r2, [r6, #0]
 8007af6:	1a9b      	subs	r3, r3, r2
 8007af8:	42ab      	cmp	r3, r5
 8007afa:	dc26      	bgt.n	8007b4a <_printf_common+0x96>
 8007afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b00:	1e13      	subs	r3, r2, #0
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	bf18      	it	ne
 8007b06:	2301      	movne	r3, #1
 8007b08:	0692      	lsls	r2, r2, #26
 8007b0a:	d42b      	bmi.n	8007b64 <_printf_common+0xb0>
 8007b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b10:	4649      	mov	r1, r9
 8007b12:	4638      	mov	r0, r7
 8007b14:	47c0      	blx	r8
 8007b16:	3001      	adds	r0, #1
 8007b18:	d01e      	beq.n	8007b58 <_printf_common+0xa4>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	68e5      	ldr	r5, [r4, #12]
 8007b1e:	6832      	ldr	r2, [r6, #0]
 8007b20:	f003 0306 	and.w	r3, r3, #6
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	bf08      	it	eq
 8007b28:	1aad      	subeq	r5, r5, r2
 8007b2a:	68a3      	ldr	r3, [r4, #8]
 8007b2c:	6922      	ldr	r2, [r4, #16]
 8007b2e:	bf0c      	ite	eq
 8007b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b34:	2500      	movne	r5, #0
 8007b36:	4293      	cmp	r3, r2
 8007b38:	bfc4      	itt	gt
 8007b3a:	1a9b      	subgt	r3, r3, r2
 8007b3c:	18ed      	addgt	r5, r5, r3
 8007b3e:	2600      	movs	r6, #0
 8007b40:	341a      	adds	r4, #26
 8007b42:	42b5      	cmp	r5, r6
 8007b44:	d11a      	bne.n	8007b7c <_printf_common+0xc8>
 8007b46:	2000      	movs	r0, #0
 8007b48:	e008      	b.n	8007b5c <_printf_common+0xa8>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4652      	mov	r2, sl
 8007b4e:	4649      	mov	r1, r9
 8007b50:	4638      	mov	r0, r7
 8007b52:	47c0      	blx	r8
 8007b54:	3001      	adds	r0, #1
 8007b56:	d103      	bne.n	8007b60 <_printf_common+0xac>
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b60:	3501      	adds	r5, #1
 8007b62:	e7c6      	b.n	8007af2 <_printf_common+0x3e>
 8007b64:	18e1      	adds	r1, r4, r3
 8007b66:	1c5a      	adds	r2, r3, #1
 8007b68:	2030      	movs	r0, #48	; 0x30
 8007b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b6e:	4422      	add	r2, r4
 8007b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b78:	3302      	adds	r3, #2
 8007b7a:	e7c7      	b.n	8007b0c <_printf_common+0x58>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4622      	mov	r2, r4
 8007b80:	4649      	mov	r1, r9
 8007b82:	4638      	mov	r0, r7
 8007b84:	47c0      	blx	r8
 8007b86:	3001      	adds	r0, #1
 8007b88:	d0e6      	beq.n	8007b58 <_printf_common+0xa4>
 8007b8a:	3601      	adds	r6, #1
 8007b8c:	e7d9      	b.n	8007b42 <_printf_common+0x8e>
	...

08007b90 <_printf_i>:
 8007b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b94:	7e0f      	ldrb	r7, [r1, #24]
 8007b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b98:	2f78      	cmp	r7, #120	; 0x78
 8007b9a:	4691      	mov	r9, r2
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	469a      	mov	sl, r3
 8007ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ba6:	d807      	bhi.n	8007bb8 <_printf_i+0x28>
 8007ba8:	2f62      	cmp	r7, #98	; 0x62
 8007baa:	d80a      	bhi.n	8007bc2 <_printf_i+0x32>
 8007bac:	2f00      	cmp	r7, #0
 8007bae:	f000 80d8 	beq.w	8007d62 <_printf_i+0x1d2>
 8007bb2:	2f58      	cmp	r7, #88	; 0x58
 8007bb4:	f000 80a3 	beq.w	8007cfe <_printf_i+0x16e>
 8007bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bc0:	e03a      	b.n	8007c38 <_printf_i+0xa8>
 8007bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bc6:	2b15      	cmp	r3, #21
 8007bc8:	d8f6      	bhi.n	8007bb8 <_printf_i+0x28>
 8007bca:	a101      	add	r1, pc, #4	; (adr r1, 8007bd0 <_printf_i+0x40>)
 8007bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bd0:	08007c29 	.word	0x08007c29
 8007bd4:	08007c3d 	.word	0x08007c3d
 8007bd8:	08007bb9 	.word	0x08007bb9
 8007bdc:	08007bb9 	.word	0x08007bb9
 8007be0:	08007bb9 	.word	0x08007bb9
 8007be4:	08007bb9 	.word	0x08007bb9
 8007be8:	08007c3d 	.word	0x08007c3d
 8007bec:	08007bb9 	.word	0x08007bb9
 8007bf0:	08007bb9 	.word	0x08007bb9
 8007bf4:	08007bb9 	.word	0x08007bb9
 8007bf8:	08007bb9 	.word	0x08007bb9
 8007bfc:	08007d49 	.word	0x08007d49
 8007c00:	08007c6d 	.word	0x08007c6d
 8007c04:	08007d2b 	.word	0x08007d2b
 8007c08:	08007bb9 	.word	0x08007bb9
 8007c0c:	08007bb9 	.word	0x08007bb9
 8007c10:	08007d6b 	.word	0x08007d6b
 8007c14:	08007bb9 	.word	0x08007bb9
 8007c18:	08007c6d 	.word	0x08007c6d
 8007c1c:	08007bb9 	.word	0x08007bb9
 8007c20:	08007bb9 	.word	0x08007bb9
 8007c24:	08007d33 	.word	0x08007d33
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	1d1a      	adds	r2, r3, #4
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	602a      	str	r2, [r5, #0]
 8007c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e0a3      	b.n	8007d84 <_printf_i+0x1f4>
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	6829      	ldr	r1, [r5, #0]
 8007c40:	0606      	lsls	r6, r0, #24
 8007c42:	f101 0304 	add.w	r3, r1, #4
 8007c46:	d50a      	bpl.n	8007c5e <_printf_i+0xce>
 8007c48:	680e      	ldr	r6, [r1, #0]
 8007c4a:	602b      	str	r3, [r5, #0]
 8007c4c:	2e00      	cmp	r6, #0
 8007c4e:	da03      	bge.n	8007c58 <_printf_i+0xc8>
 8007c50:	232d      	movs	r3, #45	; 0x2d
 8007c52:	4276      	negs	r6, r6
 8007c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c58:	485e      	ldr	r0, [pc, #376]	; (8007dd4 <_printf_i+0x244>)
 8007c5a:	230a      	movs	r3, #10
 8007c5c:	e019      	b.n	8007c92 <_printf_i+0x102>
 8007c5e:	680e      	ldr	r6, [r1, #0]
 8007c60:	602b      	str	r3, [r5, #0]
 8007c62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c66:	bf18      	it	ne
 8007c68:	b236      	sxthne	r6, r6
 8007c6a:	e7ef      	b.n	8007c4c <_printf_i+0xbc>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	6820      	ldr	r0, [r4, #0]
 8007c70:	1d19      	adds	r1, r3, #4
 8007c72:	6029      	str	r1, [r5, #0]
 8007c74:	0601      	lsls	r1, r0, #24
 8007c76:	d501      	bpl.n	8007c7c <_printf_i+0xec>
 8007c78:	681e      	ldr	r6, [r3, #0]
 8007c7a:	e002      	b.n	8007c82 <_printf_i+0xf2>
 8007c7c:	0646      	lsls	r6, r0, #25
 8007c7e:	d5fb      	bpl.n	8007c78 <_printf_i+0xe8>
 8007c80:	881e      	ldrh	r6, [r3, #0]
 8007c82:	4854      	ldr	r0, [pc, #336]	; (8007dd4 <_printf_i+0x244>)
 8007c84:	2f6f      	cmp	r7, #111	; 0x6f
 8007c86:	bf0c      	ite	eq
 8007c88:	2308      	moveq	r3, #8
 8007c8a:	230a      	movne	r3, #10
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c92:	6865      	ldr	r5, [r4, #4]
 8007c94:	60a5      	str	r5, [r4, #8]
 8007c96:	2d00      	cmp	r5, #0
 8007c98:	bfa2      	ittt	ge
 8007c9a:	6821      	ldrge	r1, [r4, #0]
 8007c9c:	f021 0104 	bicge.w	r1, r1, #4
 8007ca0:	6021      	strge	r1, [r4, #0]
 8007ca2:	b90e      	cbnz	r6, 8007ca8 <_printf_i+0x118>
 8007ca4:	2d00      	cmp	r5, #0
 8007ca6:	d04d      	beq.n	8007d44 <_printf_i+0x1b4>
 8007ca8:	4615      	mov	r5, r2
 8007caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cae:	fb03 6711 	mls	r7, r3, r1, r6
 8007cb2:	5dc7      	ldrb	r7, [r0, r7]
 8007cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cb8:	4637      	mov	r7, r6
 8007cba:	42bb      	cmp	r3, r7
 8007cbc:	460e      	mov	r6, r1
 8007cbe:	d9f4      	bls.n	8007caa <_printf_i+0x11a>
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d10b      	bne.n	8007cdc <_printf_i+0x14c>
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	07de      	lsls	r6, r3, #31
 8007cc8:	d508      	bpl.n	8007cdc <_printf_i+0x14c>
 8007cca:	6923      	ldr	r3, [r4, #16]
 8007ccc:	6861      	ldr	r1, [r4, #4]
 8007cce:	4299      	cmp	r1, r3
 8007cd0:	bfde      	ittt	le
 8007cd2:	2330      	movle	r3, #48	; 0x30
 8007cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cdc:	1b52      	subs	r2, r2, r5
 8007cde:	6122      	str	r2, [r4, #16]
 8007ce0:	f8cd a000 	str.w	sl, [sp]
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	aa03      	add	r2, sp, #12
 8007ce8:	4621      	mov	r1, r4
 8007cea:	4640      	mov	r0, r8
 8007cec:	f7ff fee2 	bl	8007ab4 <_printf_common>
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d14c      	bne.n	8007d8e <_printf_i+0x1fe>
 8007cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf8:	b004      	add	sp, #16
 8007cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfe:	4835      	ldr	r0, [pc, #212]	; (8007dd4 <_printf_i+0x244>)
 8007d00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d04:	6829      	ldr	r1, [r5, #0]
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d0c:	6029      	str	r1, [r5, #0]
 8007d0e:	061d      	lsls	r5, r3, #24
 8007d10:	d514      	bpl.n	8007d3c <_printf_i+0x1ac>
 8007d12:	07df      	lsls	r7, r3, #31
 8007d14:	bf44      	itt	mi
 8007d16:	f043 0320 	orrmi.w	r3, r3, #32
 8007d1a:	6023      	strmi	r3, [r4, #0]
 8007d1c:	b91e      	cbnz	r6, 8007d26 <_printf_i+0x196>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	f023 0320 	bic.w	r3, r3, #32
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	2310      	movs	r3, #16
 8007d28:	e7b0      	b.n	8007c8c <_printf_i+0xfc>
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	f043 0320 	orr.w	r3, r3, #32
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	2378      	movs	r3, #120	; 0x78
 8007d34:	4828      	ldr	r0, [pc, #160]	; (8007dd8 <_printf_i+0x248>)
 8007d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d3a:	e7e3      	b.n	8007d04 <_printf_i+0x174>
 8007d3c:	0659      	lsls	r1, r3, #25
 8007d3e:	bf48      	it	mi
 8007d40:	b2b6      	uxthmi	r6, r6
 8007d42:	e7e6      	b.n	8007d12 <_printf_i+0x182>
 8007d44:	4615      	mov	r5, r2
 8007d46:	e7bb      	b.n	8007cc0 <_printf_i+0x130>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	6826      	ldr	r6, [r4, #0]
 8007d4c:	6961      	ldr	r1, [r4, #20]
 8007d4e:	1d18      	adds	r0, r3, #4
 8007d50:	6028      	str	r0, [r5, #0]
 8007d52:	0635      	lsls	r5, r6, #24
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	d501      	bpl.n	8007d5c <_printf_i+0x1cc>
 8007d58:	6019      	str	r1, [r3, #0]
 8007d5a:	e002      	b.n	8007d62 <_printf_i+0x1d2>
 8007d5c:	0670      	lsls	r0, r6, #25
 8007d5e:	d5fb      	bpl.n	8007d58 <_printf_i+0x1c8>
 8007d60:	8019      	strh	r1, [r3, #0]
 8007d62:	2300      	movs	r3, #0
 8007d64:	6123      	str	r3, [r4, #16]
 8007d66:	4615      	mov	r5, r2
 8007d68:	e7ba      	b.n	8007ce0 <_printf_i+0x150>
 8007d6a:	682b      	ldr	r3, [r5, #0]
 8007d6c:	1d1a      	adds	r2, r3, #4
 8007d6e:	602a      	str	r2, [r5, #0]
 8007d70:	681d      	ldr	r5, [r3, #0]
 8007d72:	6862      	ldr	r2, [r4, #4]
 8007d74:	2100      	movs	r1, #0
 8007d76:	4628      	mov	r0, r5
 8007d78:	f7f8 fa42 	bl	8000200 <memchr>
 8007d7c:	b108      	cbz	r0, 8007d82 <_printf_i+0x1f2>
 8007d7e:	1b40      	subs	r0, r0, r5
 8007d80:	6060      	str	r0, [r4, #4]
 8007d82:	6863      	ldr	r3, [r4, #4]
 8007d84:	6123      	str	r3, [r4, #16]
 8007d86:	2300      	movs	r3, #0
 8007d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d8c:	e7a8      	b.n	8007ce0 <_printf_i+0x150>
 8007d8e:	6923      	ldr	r3, [r4, #16]
 8007d90:	462a      	mov	r2, r5
 8007d92:	4649      	mov	r1, r9
 8007d94:	4640      	mov	r0, r8
 8007d96:	47d0      	blx	sl
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d0ab      	beq.n	8007cf4 <_printf_i+0x164>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	079b      	lsls	r3, r3, #30
 8007da0:	d413      	bmi.n	8007dca <_printf_i+0x23a>
 8007da2:	68e0      	ldr	r0, [r4, #12]
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	4298      	cmp	r0, r3
 8007da8:	bfb8      	it	lt
 8007daa:	4618      	movlt	r0, r3
 8007dac:	e7a4      	b.n	8007cf8 <_printf_i+0x168>
 8007dae:	2301      	movs	r3, #1
 8007db0:	4632      	mov	r2, r6
 8007db2:	4649      	mov	r1, r9
 8007db4:	4640      	mov	r0, r8
 8007db6:	47d0      	blx	sl
 8007db8:	3001      	adds	r0, #1
 8007dba:	d09b      	beq.n	8007cf4 <_printf_i+0x164>
 8007dbc:	3501      	adds	r5, #1
 8007dbe:	68e3      	ldr	r3, [r4, #12]
 8007dc0:	9903      	ldr	r1, [sp, #12]
 8007dc2:	1a5b      	subs	r3, r3, r1
 8007dc4:	42ab      	cmp	r3, r5
 8007dc6:	dcf2      	bgt.n	8007dae <_printf_i+0x21e>
 8007dc8:	e7eb      	b.n	8007da2 <_printf_i+0x212>
 8007dca:	2500      	movs	r5, #0
 8007dcc:	f104 0619 	add.w	r6, r4, #25
 8007dd0:	e7f5      	b.n	8007dbe <_printf_i+0x22e>
 8007dd2:	bf00      	nop
 8007dd4:	0800a676 	.word	0x0800a676
 8007dd8:	0800a687 	.word	0x0800a687

08007ddc <_sbrk_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d06      	ldr	r5, [pc, #24]	; (8007df8 <_sbrk_r+0x1c>)
 8007de0:	2300      	movs	r3, #0
 8007de2:	4604      	mov	r4, r0
 8007de4:	4608      	mov	r0, r1
 8007de6:	602b      	str	r3, [r5, #0]
 8007de8:	f7fb fe1e 	bl	8003a28 <_sbrk>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_sbrk_r+0x1a>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_sbrk_r+0x1a>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	200007c0 	.word	0x200007c0

08007dfc <__swbuf_r>:
 8007dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfe:	460e      	mov	r6, r1
 8007e00:	4614      	mov	r4, r2
 8007e02:	4605      	mov	r5, r0
 8007e04:	b118      	cbz	r0, 8007e0e <__swbuf_r+0x12>
 8007e06:	6983      	ldr	r3, [r0, #24]
 8007e08:	b90b      	cbnz	r3, 8007e0e <__swbuf_r+0x12>
 8007e0a:	f000 f9d9 	bl	80081c0 <__sinit>
 8007e0e:	4b21      	ldr	r3, [pc, #132]	; (8007e94 <__swbuf_r+0x98>)
 8007e10:	429c      	cmp	r4, r3
 8007e12:	d12b      	bne.n	8007e6c <__swbuf_r+0x70>
 8007e14:	686c      	ldr	r4, [r5, #4]
 8007e16:	69a3      	ldr	r3, [r4, #24]
 8007e18:	60a3      	str	r3, [r4, #8]
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	071a      	lsls	r2, r3, #28
 8007e1e:	d52f      	bpl.n	8007e80 <__swbuf_r+0x84>
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	b36b      	cbz	r3, 8007e80 <__swbuf_r+0x84>
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	6820      	ldr	r0, [r4, #0]
 8007e28:	1ac0      	subs	r0, r0, r3
 8007e2a:	6963      	ldr	r3, [r4, #20]
 8007e2c:	b2f6      	uxtb	r6, r6
 8007e2e:	4283      	cmp	r3, r0
 8007e30:	4637      	mov	r7, r6
 8007e32:	dc04      	bgt.n	8007e3e <__swbuf_r+0x42>
 8007e34:	4621      	mov	r1, r4
 8007e36:	4628      	mov	r0, r5
 8007e38:	f000 f92e 	bl	8008098 <_fflush_r>
 8007e3c:	bb30      	cbnz	r0, 8007e8c <__swbuf_r+0x90>
 8007e3e:	68a3      	ldr	r3, [r4, #8]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	60a3      	str	r3, [r4, #8]
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	6022      	str	r2, [r4, #0]
 8007e4a:	701e      	strb	r6, [r3, #0]
 8007e4c:	6963      	ldr	r3, [r4, #20]
 8007e4e:	3001      	adds	r0, #1
 8007e50:	4283      	cmp	r3, r0
 8007e52:	d004      	beq.n	8007e5e <__swbuf_r+0x62>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	07db      	lsls	r3, r3, #31
 8007e58:	d506      	bpl.n	8007e68 <__swbuf_r+0x6c>
 8007e5a:	2e0a      	cmp	r6, #10
 8007e5c:	d104      	bne.n	8007e68 <__swbuf_r+0x6c>
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	f000 f919 	bl	8008098 <_fflush_r>
 8007e66:	b988      	cbnz	r0, 8007e8c <__swbuf_r+0x90>
 8007e68:	4638      	mov	r0, r7
 8007e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <__swbuf_r+0x9c>)
 8007e6e:	429c      	cmp	r4, r3
 8007e70:	d101      	bne.n	8007e76 <__swbuf_r+0x7a>
 8007e72:	68ac      	ldr	r4, [r5, #8]
 8007e74:	e7cf      	b.n	8007e16 <__swbuf_r+0x1a>
 8007e76:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <__swbuf_r+0xa0>)
 8007e78:	429c      	cmp	r4, r3
 8007e7a:	bf08      	it	eq
 8007e7c:	68ec      	ldreq	r4, [r5, #12]
 8007e7e:	e7ca      	b.n	8007e16 <__swbuf_r+0x1a>
 8007e80:	4621      	mov	r1, r4
 8007e82:	4628      	mov	r0, r5
 8007e84:	f000 f80c 	bl	8007ea0 <__swsetup_r>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d0cb      	beq.n	8007e24 <__swbuf_r+0x28>
 8007e8c:	f04f 37ff 	mov.w	r7, #4294967295
 8007e90:	e7ea      	b.n	8007e68 <__swbuf_r+0x6c>
 8007e92:	bf00      	nop
 8007e94:	0800a6b8 	.word	0x0800a6b8
 8007e98:	0800a6d8 	.word	0x0800a6d8
 8007e9c:	0800a698 	.word	0x0800a698

08007ea0 <__swsetup_r>:
 8007ea0:	4b32      	ldr	r3, [pc, #200]	; (8007f6c <__swsetup_r+0xcc>)
 8007ea2:	b570      	push	{r4, r5, r6, lr}
 8007ea4:	681d      	ldr	r5, [r3, #0]
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	b125      	cbz	r5, 8007eb6 <__swsetup_r+0x16>
 8007eac:	69ab      	ldr	r3, [r5, #24]
 8007eae:	b913      	cbnz	r3, 8007eb6 <__swsetup_r+0x16>
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f000 f985 	bl	80081c0 <__sinit>
 8007eb6:	4b2e      	ldr	r3, [pc, #184]	; (8007f70 <__swsetup_r+0xd0>)
 8007eb8:	429c      	cmp	r4, r3
 8007eba:	d10f      	bne.n	8007edc <__swsetup_r+0x3c>
 8007ebc:	686c      	ldr	r4, [r5, #4]
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ec4:	0719      	lsls	r1, r3, #28
 8007ec6:	d42c      	bmi.n	8007f22 <__swsetup_r+0x82>
 8007ec8:	06dd      	lsls	r5, r3, #27
 8007eca:	d411      	bmi.n	8007ef0 <__swsetup_r+0x50>
 8007ecc:	2309      	movs	r3, #9
 8007ece:	6033      	str	r3, [r6, #0]
 8007ed0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eda:	e03e      	b.n	8007f5a <__swsetup_r+0xba>
 8007edc:	4b25      	ldr	r3, [pc, #148]	; (8007f74 <__swsetup_r+0xd4>)
 8007ede:	429c      	cmp	r4, r3
 8007ee0:	d101      	bne.n	8007ee6 <__swsetup_r+0x46>
 8007ee2:	68ac      	ldr	r4, [r5, #8]
 8007ee4:	e7eb      	b.n	8007ebe <__swsetup_r+0x1e>
 8007ee6:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <__swsetup_r+0xd8>)
 8007ee8:	429c      	cmp	r4, r3
 8007eea:	bf08      	it	eq
 8007eec:	68ec      	ldreq	r4, [r5, #12]
 8007eee:	e7e6      	b.n	8007ebe <__swsetup_r+0x1e>
 8007ef0:	0758      	lsls	r0, r3, #29
 8007ef2:	d512      	bpl.n	8007f1a <__swsetup_r+0x7a>
 8007ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ef6:	b141      	cbz	r1, 8007f0a <__swsetup_r+0x6a>
 8007ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007efc:	4299      	cmp	r1, r3
 8007efe:	d002      	beq.n	8007f06 <__swsetup_r+0x66>
 8007f00:	4630      	mov	r0, r6
 8007f02:	f7ff fb9d 	bl	8007640 <_free_r>
 8007f06:	2300      	movs	r3, #0
 8007f08:	6363      	str	r3, [r4, #52]	; 0x34
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	2300      	movs	r3, #0
 8007f14:	6063      	str	r3, [r4, #4]
 8007f16:	6923      	ldr	r3, [r4, #16]
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	f043 0308 	orr.w	r3, r3, #8
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	b94b      	cbnz	r3, 8007f3a <__swsetup_r+0x9a>
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f30:	d003      	beq.n	8007f3a <__swsetup_r+0x9a>
 8007f32:	4621      	mov	r1, r4
 8007f34:	4630      	mov	r0, r6
 8007f36:	f000 fa09 	bl	800834c <__smakebuf_r>
 8007f3a:	89a0      	ldrh	r0, [r4, #12]
 8007f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f40:	f010 0301 	ands.w	r3, r0, #1
 8007f44:	d00a      	beq.n	8007f5c <__swsetup_r+0xbc>
 8007f46:	2300      	movs	r3, #0
 8007f48:	60a3      	str	r3, [r4, #8]
 8007f4a:	6963      	ldr	r3, [r4, #20]
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	61a3      	str	r3, [r4, #24]
 8007f50:	6923      	ldr	r3, [r4, #16]
 8007f52:	b943      	cbnz	r3, 8007f66 <__swsetup_r+0xc6>
 8007f54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f58:	d1ba      	bne.n	8007ed0 <__swsetup_r+0x30>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	0781      	lsls	r1, r0, #30
 8007f5e:	bf58      	it	pl
 8007f60:	6963      	ldrpl	r3, [r4, #20]
 8007f62:	60a3      	str	r3, [r4, #8]
 8007f64:	e7f4      	b.n	8007f50 <__swsetup_r+0xb0>
 8007f66:	2000      	movs	r0, #0
 8007f68:	e7f7      	b.n	8007f5a <__swsetup_r+0xba>
 8007f6a:	bf00      	nop
 8007f6c:	2000000c 	.word	0x2000000c
 8007f70:	0800a6b8 	.word	0x0800a6b8
 8007f74:	0800a6d8 	.word	0x0800a6d8
 8007f78:	0800a698 	.word	0x0800a698

08007f7c <abort>:
 8007f7c:	b508      	push	{r3, lr}
 8007f7e:	2006      	movs	r0, #6
 8007f80:	f000 fa58 	bl	8008434 <raise>
 8007f84:	2001      	movs	r0, #1
 8007f86:	f7fb fcd7 	bl	8003938 <_exit>
	...

08007f8c <__sflush_r>:
 8007f8c:	898a      	ldrh	r2, [r1, #12]
 8007f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f92:	4605      	mov	r5, r0
 8007f94:	0710      	lsls	r0, r2, #28
 8007f96:	460c      	mov	r4, r1
 8007f98:	d458      	bmi.n	800804c <__sflush_r+0xc0>
 8007f9a:	684b      	ldr	r3, [r1, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dc05      	bgt.n	8007fac <__sflush_r+0x20>
 8007fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	dc02      	bgt.n	8007fac <__sflush_r+0x20>
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	d0f9      	beq.n	8007fa6 <__sflush_r+0x1a>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fb8:	682f      	ldr	r7, [r5, #0]
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	d032      	beq.n	8008024 <__sflush_r+0x98>
 8007fbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	075a      	lsls	r2, r3, #29
 8007fc4:	d505      	bpl.n	8007fd2 <__sflush_r+0x46>
 8007fc6:	6863      	ldr	r3, [r4, #4]
 8007fc8:	1ac0      	subs	r0, r0, r3
 8007fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fcc:	b10b      	cbz	r3, 8007fd2 <__sflush_r+0x46>
 8007fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fd0:	1ac0      	subs	r0, r0, r3
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fd8:	6a21      	ldr	r1, [r4, #32]
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b0      	blx	r6
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	d106      	bne.n	8007ff2 <__sflush_r+0x66>
 8007fe4:	6829      	ldr	r1, [r5, #0]
 8007fe6:	291d      	cmp	r1, #29
 8007fe8:	d82c      	bhi.n	8008044 <__sflush_r+0xb8>
 8007fea:	4a2a      	ldr	r2, [pc, #168]	; (8008094 <__sflush_r+0x108>)
 8007fec:	40ca      	lsrs	r2, r1
 8007fee:	07d6      	lsls	r6, r2, #31
 8007ff0:	d528      	bpl.n	8008044 <__sflush_r+0xb8>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	6062      	str	r2, [r4, #4]
 8007ff6:	04d9      	lsls	r1, r3, #19
 8007ff8:	6922      	ldr	r2, [r4, #16]
 8007ffa:	6022      	str	r2, [r4, #0]
 8007ffc:	d504      	bpl.n	8008008 <__sflush_r+0x7c>
 8007ffe:	1c42      	adds	r2, r0, #1
 8008000:	d101      	bne.n	8008006 <__sflush_r+0x7a>
 8008002:	682b      	ldr	r3, [r5, #0]
 8008004:	b903      	cbnz	r3, 8008008 <__sflush_r+0x7c>
 8008006:	6560      	str	r0, [r4, #84]	; 0x54
 8008008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800800a:	602f      	str	r7, [r5, #0]
 800800c:	2900      	cmp	r1, #0
 800800e:	d0ca      	beq.n	8007fa6 <__sflush_r+0x1a>
 8008010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008014:	4299      	cmp	r1, r3
 8008016:	d002      	beq.n	800801e <__sflush_r+0x92>
 8008018:	4628      	mov	r0, r5
 800801a:	f7ff fb11 	bl	8007640 <_free_r>
 800801e:	2000      	movs	r0, #0
 8008020:	6360      	str	r0, [r4, #52]	; 0x34
 8008022:	e7c1      	b.n	8007fa8 <__sflush_r+0x1c>
 8008024:	6a21      	ldr	r1, [r4, #32]
 8008026:	2301      	movs	r3, #1
 8008028:	4628      	mov	r0, r5
 800802a:	47b0      	blx	r6
 800802c:	1c41      	adds	r1, r0, #1
 800802e:	d1c7      	bne.n	8007fc0 <__sflush_r+0x34>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0c4      	beq.n	8007fc0 <__sflush_r+0x34>
 8008036:	2b1d      	cmp	r3, #29
 8008038:	d001      	beq.n	800803e <__sflush_r+0xb2>
 800803a:	2b16      	cmp	r3, #22
 800803c:	d101      	bne.n	8008042 <__sflush_r+0xb6>
 800803e:	602f      	str	r7, [r5, #0]
 8008040:	e7b1      	b.n	8007fa6 <__sflush_r+0x1a>
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008048:	81a3      	strh	r3, [r4, #12]
 800804a:	e7ad      	b.n	8007fa8 <__sflush_r+0x1c>
 800804c:	690f      	ldr	r7, [r1, #16]
 800804e:	2f00      	cmp	r7, #0
 8008050:	d0a9      	beq.n	8007fa6 <__sflush_r+0x1a>
 8008052:	0793      	lsls	r3, r2, #30
 8008054:	680e      	ldr	r6, [r1, #0]
 8008056:	bf08      	it	eq
 8008058:	694b      	ldreq	r3, [r1, #20]
 800805a:	600f      	str	r7, [r1, #0]
 800805c:	bf18      	it	ne
 800805e:	2300      	movne	r3, #0
 8008060:	eba6 0807 	sub.w	r8, r6, r7
 8008064:	608b      	str	r3, [r1, #8]
 8008066:	f1b8 0f00 	cmp.w	r8, #0
 800806a:	dd9c      	ble.n	8007fa6 <__sflush_r+0x1a>
 800806c:	6a21      	ldr	r1, [r4, #32]
 800806e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008070:	4643      	mov	r3, r8
 8008072:	463a      	mov	r2, r7
 8008074:	4628      	mov	r0, r5
 8008076:	47b0      	blx	r6
 8008078:	2800      	cmp	r0, #0
 800807a:	dc06      	bgt.n	800808a <__sflush_r+0xfe>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	e78e      	b.n	8007fa8 <__sflush_r+0x1c>
 800808a:	4407      	add	r7, r0
 800808c:	eba8 0800 	sub.w	r8, r8, r0
 8008090:	e7e9      	b.n	8008066 <__sflush_r+0xda>
 8008092:	bf00      	nop
 8008094:	20400001 	.word	0x20400001

08008098 <_fflush_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	690b      	ldr	r3, [r1, #16]
 800809c:	4605      	mov	r5, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	b913      	cbnz	r3, 80080a8 <_fflush_r+0x10>
 80080a2:	2500      	movs	r5, #0
 80080a4:	4628      	mov	r0, r5
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	b118      	cbz	r0, 80080b2 <_fflush_r+0x1a>
 80080aa:	6983      	ldr	r3, [r0, #24]
 80080ac:	b90b      	cbnz	r3, 80080b2 <_fflush_r+0x1a>
 80080ae:	f000 f887 	bl	80081c0 <__sinit>
 80080b2:	4b14      	ldr	r3, [pc, #80]	; (8008104 <_fflush_r+0x6c>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	d11b      	bne.n	80080f0 <_fflush_r+0x58>
 80080b8:	686c      	ldr	r4, [r5, #4]
 80080ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0ef      	beq.n	80080a2 <_fflush_r+0xa>
 80080c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080c4:	07d0      	lsls	r0, r2, #31
 80080c6:	d404      	bmi.n	80080d2 <_fflush_r+0x3a>
 80080c8:	0599      	lsls	r1, r3, #22
 80080ca:	d402      	bmi.n	80080d2 <_fflush_r+0x3a>
 80080cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ce:	f000 f915 	bl	80082fc <__retarget_lock_acquire_recursive>
 80080d2:	4628      	mov	r0, r5
 80080d4:	4621      	mov	r1, r4
 80080d6:	f7ff ff59 	bl	8007f8c <__sflush_r>
 80080da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080dc:	07da      	lsls	r2, r3, #31
 80080de:	4605      	mov	r5, r0
 80080e0:	d4e0      	bmi.n	80080a4 <_fflush_r+0xc>
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	059b      	lsls	r3, r3, #22
 80080e6:	d4dd      	bmi.n	80080a4 <_fflush_r+0xc>
 80080e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ea:	f000 f908 	bl	80082fe <__retarget_lock_release_recursive>
 80080ee:	e7d9      	b.n	80080a4 <_fflush_r+0xc>
 80080f0:	4b05      	ldr	r3, [pc, #20]	; (8008108 <_fflush_r+0x70>)
 80080f2:	429c      	cmp	r4, r3
 80080f4:	d101      	bne.n	80080fa <_fflush_r+0x62>
 80080f6:	68ac      	ldr	r4, [r5, #8]
 80080f8:	e7df      	b.n	80080ba <_fflush_r+0x22>
 80080fa:	4b04      	ldr	r3, [pc, #16]	; (800810c <_fflush_r+0x74>)
 80080fc:	429c      	cmp	r4, r3
 80080fe:	bf08      	it	eq
 8008100:	68ec      	ldreq	r4, [r5, #12]
 8008102:	e7da      	b.n	80080ba <_fflush_r+0x22>
 8008104:	0800a6b8 	.word	0x0800a6b8
 8008108:	0800a6d8 	.word	0x0800a6d8
 800810c:	0800a698 	.word	0x0800a698

08008110 <std>:
 8008110:	2300      	movs	r3, #0
 8008112:	b510      	push	{r4, lr}
 8008114:	4604      	mov	r4, r0
 8008116:	e9c0 3300 	strd	r3, r3, [r0]
 800811a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800811e:	6083      	str	r3, [r0, #8]
 8008120:	8181      	strh	r1, [r0, #12]
 8008122:	6643      	str	r3, [r0, #100]	; 0x64
 8008124:	81c2      	strh	r2, [r0, #14]
 8008126:	6183      	str	r3, [r0, #24]
 8008128:	4619      	mov	r1, r3
 800812a:	2208      	movs	r2, #8
 800812c:	305c      	adds	r0, #92	; 0x5c
 800812e:	f7ff f8ad 	bl	800728c <memset>
 8008132:	4b05      	ldr	r3, [pc, #20]	; (8008148 <std+0x38>)
 8008134:	6263      	str	r3, [r4, #36]	; 0x24
 8008136:	4b05      	ldr	r3, [pc, #20]	; (800814c <std+0x3c>)
 8008138:	62a3      	str	r3, [r4, #40]	; 0x28
 800813a:	4b05      	ldr	r3, [pc, #20]	; (8008150 <std+0x40>)
 800813c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800813e:	4b05      	ldr	r3, [pc, #20]	; (8008154 <std+0x44>)
 8008140:	6224      	str	r4, [r4, #32]
 8008142:	6323      	str	r3, [r4, #48]	; 0x30
 8008144:	bd10      	pop	{r4, pc}
 8008146:	bf00      	nop
 8008148:	0800846d 	.word	0x0800846d
 800814c:	0800848f 	.word	0x0800848f
 8008150:	080084c7 	.word	0x080084c7
 8008154:	080084eb 	.word	0x080084eb

08008158 <_cleanup_r>:
 8008158:	4901      	ldr	r1, [pc, #4]	; (8008160 <_cleanup_r+0x8>)
 800815a:	f000 b8af 	b.w	80082bc <_fwalk_reent>
 800815e:	bf00      	nop
 8008160:	08008099 	.word	0x08008099

08008164 <__sfmoreglue>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	2268      	movs	r2, #104	; 0x68
 8008168:	1e4d      	subs	r5, r1, #1
 800816a:	4355      	muls	r5, r2
 800816c:	460e      	mov	r6, r1
 800816e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008172:	f7ff fad1 	bl	8007718 <_malloc_r>
 8008176:	4604      	mov	r4, r0
 8008178:	b140      	cbz	r0, 800818c <__sfmoreglue+0x28>
 800817a:	2100      	movs	r1, #0
 800817c:	e9c0 1600 	strd	r1, r6, [r0]
 8008180:	300c      	adds	r0, #12
 8008182:	60a0      	str	r0, [r4, #8]
 8008184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008188:	f7ff f880 	bl	800728c <memset>
 800818c:	4620      	mov	r0, r4
 800818e:	bd70      	pop	{r4, r5, r6, pc}

08008190 <__sfp_lock_acquire>:
 8008190:	4801      	ldr	r0, [pc, #4]	; (8008198 <__sfp_lock_acquire+0x8>)
 8008192:	f000 b8b3 	b.w	80082fc <__retarget_lock_acquire_recursive>
 8008196:	bf00      	nop
 8008198:	200007bd 	.word	0x200007bd

0800819c <__sfp_lock_release>:
 800819c:	4801      	ldr	r0, [pc, #4]	; (80081a4 <__sfp_lock_release+0x8>)
 800819e:	f000 b8ae 	b.w	80082fe <__retarget_lock_release_recursive>
 80081a2:	bf00      	nop
 80081a4:	200007bd 	.word	0x200007bd

080081a8 <__sinit_lock_acquire>:
 80081a8:	4801      	ldr	r0, [pc, #4]	; (80081b0 <__sinit_lock_acquire+0x8>)
 80081aa:	f000 b8a7 	b.w	80082fc <__retarget_lock_acquire_recursive>
 80081ae:	bf00      	nop
 80081b0:	200007be 	.word	0x200007be

080081b4 <__sinit_lock_release>:
 80081b4:	4801      	ldr	r0, [pc, #4]	; (80081bc <__sinit_lock_release+0x8>)
 80081b6:	f000 b8a2 	b.w	80082fe <__retarget_lock_release_recursive>
 80081ba:	bf00      	nop
 80081bc:	200007be 	.word	0x200007be

080081c0 <__sinit>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4604      	mov	r4, r0
 80081c4:	f7ff fff0 	bl	80081a8 <__sinit_lock_acquire>
 80081c8:	69a3      	ldr	r3, [r4, #24]
 80081ca:	b11b      	cbz	r3, 80081d4 <__sinit+0x14>
 80081cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d0:	f7ff bff0 	b.w	80081b4 <__sinit_lock_release>
 80081d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081d8:	6523      	str	r3, [r4, #80]	; 0x50
 80081da:	4b13      	ldr	r3, [pc, #76]	; (8008228 <__sinit+0x68>)
 80081dc:	4a13      	ldr	r2, [pc, #76]	; (800822c <__sinit+0x6c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80081e2:	42a3      	cmp	r3, r4
 80081e4:	bf04      	itt	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	61a3      	streq	r3, [r4, #24]
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 f820 	bl	8008230 <__sfp>
 80081f0:	6060      	str	r0, [r4, #4]
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 f81c 	bl	8008230 <__sfp>
 80081f8:	60a0      	str	r0, [r4, #8]
 80081fa:	4620      	mov	r0, r4
 80081fc:	f000 f818 	bl	8008230 <__sfp>
 8008200:	2200      	movs	r2, #0
 8008202:	60e0      	str	r0, [r4, #12]
 8008204:	2104      	movs	r1, #4
 8008206:	6860      	ldr	r0, [r4, #4]
 8008208:	f7ff ff82 	bl	8008110 <std>
 800820c:	68a0      	ldr	r0, [r4, #8]
 800820e:	2201      	movs	r2, #1
 8008210:	2109      	movs	r1, #9
 8008212:	f7ff ff7d 	bl	8008110 <std>
 8008216:	68e0      	ldr	r0, [r4, #12]
 8008218:	2202      	movs	r2, #2
 800821a:	2112      	movs	r1, #18
 800821c:	f7ff ff78 	bl	8008110 <std>
 8008220:	2301      	movs	r3, #1
 8008222:	61a3      	str	r3, [r4, #24]
 8008224:	e7d2      	b.n	80081cc <__sinit+0xc>
 8008226:	bf00      	nop
 8008228:	0800a4b0 	.word	0x0800a4b0
 800822c:	08008159 	.word	0x08008159

08008230 <__sfp>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	4607      	mov	r7, r0
 8008234:	f7ff ffac 	bl	8008190 <__sfp_lock_acquire>
 8008238:	4b1e      	ldr	r3, [pc, #120]	; (80082b4 <__sfp+0x84>)
 800823a:	681e      	ldr	r6, [r3, #0]
 800823c:	69b3      	ldr	r3, [r6, #24]
 800823e:	b913      	cbnz	r3, 8008246 <__sfp+0x16>
 8008240:	4630      	mov	r0, r6
 8008242:	f7ff ffbd 	bl	80081c0 <__sinit>
 8008246:	3648      	adds	r6, #72	; 0x48
 8008248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800824c:	3b01      	subs	r3, #1
 800824e:	d503      	bpl.n	8008258 <__sfp+0x28>
 8008250:	6833      	ldr	r3, [r6, #0]
 8008252:	b30b      	cbz	r3, 8008298 <__sfp+0x68>
 8008254:	6836      	ldr	r6, [r6, #0]
 8008256:	e7f7      	b.n	8008248 <__sfp+0x18>
 8008258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800825c:	b9d5      	cbnz	r5, 8008294 <__sfp+0x64>
 800825e:	4b16      	ldr	r3, [pc, #88]	; (80082b8 <__sfp+0x88>)
 8008260:	60e3      	str	r3, [r4, #12]
 8008262:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008266:	6665      	str	r5, [r4, #100]	; 0x64
 8008268:	f000 f847 	bl	80082fa <__retarget_lock_init_recursive>
 800826c:	f7ff ff96 	bl	800819c <__sfp_lock_release>
 8008270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008278:	6025      	str	r5, [r4, #0]
 800827a:	61a5      	str	r5, [r4, #24]
 800827c:	2208      	movs	r2, #8
 800827e:	4629      	mov	r1, r5
 8008280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008284:	f7ff f802 	bl	800728c <memset>
 8008288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800828c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008290:	4620      	mov	r0, r4
 8008292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008294:	3468      	adds	r4, #104	; 0x68
 8008296:	e7d9      	b.n	800824c <__sfp+0x1c>
 8008298:	2104      	movs	r1, #4
 800829a:	4638      	mov	r0, r7
 800829c:	f7ff ff62 	bl	8008164 <__sfmoreglue>
 80082a0:	4604      	mov	r4, r0
 80082a2:	6030      	str	r0, [r6, #0]
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d1d5      	bne.n	8008254 <__sfp+0x24>
 80082a8:	f7ff ff78 	bl	800819c <__sfp_lock_release>
 80082ac:	230c      	movs	r3, #12
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	e7ee      	b.n	8008290 <__sfp+0x60>
 80082b2:	bf00      	nop
 80082b4:	0800a4b0 	.word	0x0800a4b0
 80082b8:	ffff0001 	.word	0xffff0001

080082bc <_fwalk_reent>:
 80082bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c0:	4606      	mov	r6, r0
 80082c2:	4688      	mov	r8, r1
 80082c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082c8:	2700      	movs	r7, #0
 80082ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082ce:	f1b9 0901 	subs.w	r9, r9, #1
 80082d2:	d505      	bpl.n	80082e0 <_fwalk_reent+0x24>
 80082d4:	6824      	ldr	r4, [r4, #0]
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	d1f7      	bne.n	80082ca <_fwalk_reent+0xe>
 80082da:	4638      	mov	r0, r7
 80082dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e0:	89ab      	ldrh	r3, [r5, #12]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d907      	bls.n	80082f6 <_fwalk_reent+0x3a>
 80082e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082ea:	3301      	adds	r3, #1
 80082ec:	d003      	beq.n	80082f6 <_fwalk_reent+0x3a>
 80082ee:	4629      	mov	r1, r5
 80082f0:	4630      	mov	r0, r6
 80082f2:	47c0      	blx	r8
 80082f4:	4307      	orrs	r7, r0
 80082f6:	3568      	adds	r5, #104	; 0x68
 80082f8:	e7e9      	b.n	80082ce <_fwalk_reent+0x12>

080082fa <__retarget_lock_init_recursive>:
 80082fa:	4770      	bx	lr

080082fc <__retarget_lock_acquire_recursive>:
 80082fc:	4770      	bx	lr

080082fe <__retarget_lock_release_recursive>:
 80082fe:	4770      	bx	lr

08008300 <__swhatbuf_r>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	460e      	mov	r6, r1
 8008304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008308:	2900      	cmp	r1, #0
 800830a:	b096      	sub	sp, #88	; 0x58
 800830c:	4614      	mov	r4, r2
 800830e:	461d      	mov	r5, r3
 8008310:	da08      	bge.n	8008324 <__swhatbuf_r+0x24>
 8008312:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	602a      	str	r2, [r5, #0]
 800831a:	061a      	lsls	r2, r3, #24
 800831c:	d410      	bmi.n	8008340 <__swhatbuf_r+0x40>
 800831e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008322:	e00e      	b.n	8008342 <__swhatbuf_r+0x42>
 8008324:	466a      	mov	r2, sp
 8008326:	f000 f907 	bl	8008538 <_fstat_r>
 800832a:	2800      	cmp	r0, #0
 800832c:	dbf1      	blt.n	8008312 <__swhatbuf_r+0x12>
 800832e:	9a01      	ldr	r2, [sp, #4]
 8008330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008338:	425a      	negs	r2, r3
 800833a:	415a      	adcs	r2, r3
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	e7ee      	b.n	800831e <__swhatbuf_r+0x1e>
 8008340:	2340      	movs	r3, #64	; 0x40
 8008342:	2000      	movs	r0, #0
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	b016      	add	sp, #88	; 0x58
 8008348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800834c <__smakebuf_r>:
 800834c:	898b      	ldrh	r3, [r1, #12]
 800834e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008350:	079d      	lsls	r5, r3, #30
 8008352:	4606      	mov	r6, r0
 8008354:	460c      	mov	r4, r1
 8008356:	d507      	bpl.n	8008368 <__smakebuf_r+0x1c>
 8008358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	2301      	movs	r3, #1
 8008362:	6163      	str	r3, [r4, #20]
 8008364:	b002      	add	sp, #8
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	ab01      	add	r3, sp, #4
 800836a:	466a      	mov	r2, sp
 800836c:	f7ff ffc8 	bl	8008300 <__swhatbuf_r>
 8008370:	9900      	ldr	r1, [sp, #0]
 8008372:	4605      	mov	r5, r0
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff f9cf 	bl	8007718 <_malloc_r>
 800837a:	b948      	cbnz	r0, 8008390 <__smakebuf_r+0x44>
 800837c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008380:	059a      	lsls	r2, r3, #22
 8008382:	d4ef      	bmi.n	8008364 <__smakebuf_r+0x18>
 8008384:	f023 0303 	bic.w	r3, r3, #3
 8008388:	f043 0302 	orr.w	r3, r3, #2
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	e7e3      	b.n	8008358 <__smakebuf_r+0xc>
 8008390:	4b0d      	ldr	r3, [pc, #52]	; (80083c8 <__smakebuf_r+0x7c>)
 8008392:	62b3      	str	r3, [r6, #40]	; 0x28
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	6020      	str	r0, [r4, #0]
 8008398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	9b00      	ldr	r3, [sp, #0]
 80083a0:	6163      	str	r3, [r4, #20]
 80083a2:	9b01      	ldr	r3, [sp, #4]
 80083a4:	6120      	str	r0, [r4, #16]
 80083a6:	b15b      	cbz	r3, 80083c0 <__smakebuf_r+0x74>
 80083a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083ac:	4630      	mov	r0, r6
 80083ae:	f000 f8d5 	bl	800855c <_isatty_r>
 80083b2:	b128      	cbz	r0, 80083c0 <__smakebuf_r+0x74>
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	f023 0303 	bic.w	r3, r3, #3
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	81a3      	strh	r3, [r4, #12]
 80083c0:	89a0      	ldrh	r0, [r4, #12]
 80083c2:	4305      	orrs	r5, r0
 80083c4:	81a5      	strh	r5, [r4, #12]
 80083c6:	e7cd      	b.n	8008364 <__smakebuf_r+0x18>
 80083c8:	08008159 	.word	0x08008159

080083cc <__malloc_lock>:
 80083cc:	4801      	ldr	r0, [pc, #4]	; (80083d4 <__malloc_lock+0x8>)
 80083ce:	f7ff bf95 	b.w	80082fc <__retarget_lock_acquire_recursive>
 80083d2:	bf00      	nop
 80083d4:	200007bc 	.word	0x200007bc

080083d8 <__malloc_unlock>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__malloc_unlock+0x8>)
 80083da:	f7ff bf90 	b.w	80082fe <__retarget_lock_release_recursive>
 80083de:	bf00      	nop
 80083e0:	200007bc 	.word	0x200007bc

080083e4 <_raise_r>:
 80083e4:	291f      	cmp	r1, #31
 80083e6:	b538      	push	{r3, r4, r5, lr}
 80083e8:	4604      	mov	r4, r0
 80083ea:	460d      	mov	r5, r1
 80083ec:	d904      	bls.n	80083f8 <_raise_r+0x14>
 80083ee:	2316      	movs	r3, #22
 80083f0:	6003      	str	r3, [r0, #0]
 80083f2:	f04f 30ff 	mov.w	r0, #4294967295
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
 80083f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80083fa:	b112      	cbz	r2, 8008402 <_raise_r+0x1e>
 80083fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008400:	b94b      	cbnz	r3, 8008416 <_raise_r+0x32>
 8008402:	4620      	mov	r0, r4
 8008404:	f000 f830 	bl	8008468 <_getpid_r>
 8008408:	462a      	mov	r2, r5
 800840a:	4601      	mov	r1, r0
 800840c:	4620      	mov	r0, r4
 800840e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008412:	f000 b817 	b.w	8008444 <_kill_r>
 8008416:	2b01      	cmp	r3, #1
 8008418:	d00a      	beq.n	8008430 <_raise_r+0x4c>
 800841a:	1c59      	adds	r1, r3, #1
 800841c:	d103      	bne.n	8008426 <_raise_r+0x42>
 800841e:	2316      	movs	r3, #22
 8008420:	6003      	str	r3, [r0, #0]
 8008422:	2001      	movs	r0, #1
 8008424:	e7e7      	b.n	80083f6 <_raise_r+0x12>
 8008426:	2400      	movs	r4, #0
 8008428:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800842c:	4628      	mov	r0, r5
 800842e:	4798      	blx	r3
 8008430:	2000      	movs	r0, #0
 8008432:	e7e0      	b.n	80083f6 <_raise_r+0x12>

08008434 <raise>:
 8008434:	4b02      	ldr	r3, [pc, #8]	; (8008440 <raise+0xc>)
 8008436:	4601      	mov	r1, r0
 8008438:	6818      	ldr	r0, [r3, #0]
 800843a:	f7ff bfd3 	b.w	80083e4 <_raise_r>
 800843e:	bf00      	nop
 8008440:	2000000c 	.word	0x2000000c

08008444 <_kill_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d07      	ldr	r5, [pc, #28]	; (8008464 <_kill_r+0x20>)
 8008448:	2300      	movs	r3, #0
 800844a:	4604      	mov	r4, r0
 800844c:	4608      	mov	r0, r1
 800844e:	4611      	mov	r1, r2
 8008450:	602b      	str	r3, [r5, #0]
 8008452:	f7fb fa61 	bl	8003918 <_kill>
 8008456:	1c43      	adds	r3, r0, #1
 8008458:	d102      	bne.n	8008460 <_kill_r+0x1c>
 800845a:	682b      	ldr	r3, [r5, #0]
 800845c:	b103      	cbz	r3, 8008460 <_kill_r+0x1c>
 800845e:	6023      	str	r3, [r4, #0]
 8008460:	bd38      	pop	{r3, r4, r5, pc}
 8008462:	bf00      	nop
 8008464:	200007c0 	.word	0x200007c0

08008468 <_getpid_r>:
 8008468:	f7fb ba4e 	b.w	8003908 <_getpid>

0800846c <__sread>:
 800846c:	b510      	push	{r4, lr}
 800846e:	460c      	mov	r4, r1
 8008470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008474:	f000 f894 	bl	80085a0 <_read_r>
 8008478:	2800      	cmp	r0, #0
 800847a:	bfab      	itete	ge
 800847c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800847e:	89a3      	ldrhlt	r3, [r4, #12]
 8008480:	181b      	addge	r3, r3, r0
 8008482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008486:	bfac      	ite	ge
 8008488:	6563      	strge	r3, [r4, #84]	; 0x54
 800848a:	81a3      	strhlt	r3, [r4, #12]
 800848c:	bd10      	pop	{r4, pc}

0800848e <__swrite>:
 800848e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008492:	461f      	mov	r7, r3
 8008494:	898b      	ldrh	r3, [r1, #12]
 8008496:	05db      	lsls	r3, r3, #23
 8008498:	4605      	mov	r5, r0
 800849a:	460c      	mov	r4, r1
 800849c:	4616      	mov	r6, r2
 800849e:	d505      	bpl.n	80084ac <__swrite+0x1e>
 80084a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a4:	2302      	movs	r3, #2
 80084a6:	2200      	movs	r2, #0
 80084a8:	f000 f868 	bl	800857c <_lseek_r>
 80084ac:	89a3      	ldrh	r3, [r4, #12]
 80084ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084b6:	81a3      	strh	r3, [r4, #12]
 80084b8:	4632      	mov	r2, r6
 80084ba:	463b      	mov	r3, r7
 80084bc:	4628      	mov	r0, r5
 80084be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084c2:	f000 b817 	b.w	80084f4 <_write_r>

080084c6 <__sseek>:
 80084c6:	b510      	push	{r4, lr}
 80084c8:	460c      	mov	r4, r1
 80084ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ce:	f000 f855 	bl	800857c <_lseek_r>
 80084d2:	1c43      	adds	r3, r0, #1
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	bf15      	itete	ne
 80084d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80084da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084e2:	81a3      	strheq	r3, [r4, #12]
 80084e4:	bf18      	it	ne
 80084e6:	81a3      	strhne	r3, [r4, #12]
 80084e8:	bd10      	pop	{r4, pc}

080084ea <__sclose>:
 80084ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ee:	f000 b813 	b.w	8008518 <_close_r>
	...

080084f4 <_write_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d07      	ldr	r5, [pc, #28]	; (8008514 <_write_r+0x20>)
 80084f8:	4604      	mov	r4, r0
 80084fa:	4608      	mov	r0, r1
 80084fc:	4611      	mov	r1, r2
 80084fe:	2200      	movs	r2, #0
 8008500:	602a      	str	r2, [r5, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	f7fb fa3f 	bl	8003986 <_write>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_write_r+0x1e>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	b103      	cbz	r3, 8008512 <_write_r+0x1e>
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	200007c0 	.word	0x200007c0

08008518 <_close_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4d06      	ldr	r5, [pc, #24]	; (8008534 <_close_r+0x1c>)
 800851c:	2300      	movs	r3, #0
 800851e:	4604      	mov	r4, r0
 8008520:	4608      	mov	r0, r1
 8008522:	602b      	str	r3, [r5, #0]
 8008524:	f7fb fa4b 	bl	80039be <_close>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_close_r+0x1a>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_close_r+0x1a>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	200007c0 	.word	0x200007c0

08008538 <_fstat_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d07      	ldr	r5, [pc, #28]	; (8008558 <_fstat_r+0x20>)
 800853c:	2300      	movs	r3, #0
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	4611      	mov	r1, r2
 8008544:	602b      	str	r3, [r5, #0]
 8008546:	f7fb fa46 	bl	80039d6 <_fstat>
 800854a:	1c43      	adds	r3, r0, #1
 800854c:	d102      	bne.n	8008554 <_fstat_r+0x1c>
 800854e:	682b      	ldr	r3, [r5, #0]
 8008550:	b103      	cbz	r3, 8008554 <_fstat_r+0x1c>
 8008552:	6023      	str	r3, [r4, #0]
 8008554:	bd38      	pop	{r3, r4, r5, pc}
 8008556:	bf00      	nop
 8008558:	200007c0 	.word	0x200007c0

0800855c <_isatty_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d06      	ldr	r5, [pc, #24]	; (8008578 <_isatty_r+0x1c>)
 8008560:	2300      	movs	r3, #0
 8008562:	4604      	mov	r4, r0
 8008564:	4608      	mov	r0, r1
 8008566:	602b      	str	r3, [r5, #0]
 8008568:	f7fb fa45 	bl	80039f6 <_isatty>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_isatty_r+0x1a>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	b103      	cbz	r3, 8008576 <_isatty_r+0x1a>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	200007c0 	.word	0x200007c0

0800857c <_lseek_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4d07      	ldr	r5, [pc, #28]	; (800859c <_lseek_r+0x20>)
 8008580:	4604      	mov	r4, r0
 8008582:	4608      	mov	r0, r1
 8008584:	4611      	mov	r1, r2
 8008586:	2200      	movs	r2, #0
 8008588:	602a      	str	r2, [r5, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	f7fb fa3e 	bl	8003a0c <_lseek>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_lseek_r+0x1e>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_lseek_r+0x1e>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	200007c0 	.word	0x200007c0

080085a0 <_read_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4d07      	ldr	r5, [pc, #28]	; (80085c0 <_read_r+0x20>)
 80085a4:	4604      	mov	r4, r0
 80085a6:	4608      	mov	r0, r1
 80085a8:	4611      	mov	r1, r2
 80085aa:	2200      	movs	r2, #0
 80085ac:	602a      	str	r2, [r5, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	f7fb f9cc 	bl	800394c <_read>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d102      	bne.n	80085be <_read_r+0x1e>
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	b103      	cbz	r3, 80085be <_read_r+0x1e>
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	200007c0 	.word	0x200007c0
 80085c4:	00000000 	.word	0x00000000

080085c8 <cos>:
 80085c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085ca:	ec53 2b10 	vmov	r2, r3, d0
 80085ce:	4826      	ldr	r0, [pc, #152]	; (8008668 <cos+0xa0>)
 80085d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80085d4:	4281      	cmp	r1, r0
 80085d6:	dc06      	bgt.n	80085e6 <cos+0x1e>
 80085d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008660 <cos+0x98>
 80085dc:	b005      	add	sp, #20
 80085de:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e2:	f001 b8fd 	b.w	80097e0 <__kernel_cos>
 80085e6:	4821      	ldr	r0, [pc, #132]	; (800866c <cos+0xa4>)
 80085e8:	4281      	cmp	r1, r0
 80085ea:	dd09      	ble.n	8008600 <cos+0x38>
 80085ec:	ee10 0a10 	vmov	r0, s0
 80085f0:	4619      	mov	r1, r3
 80085f2:	f7f7 fe59 	bl	80002a8 <__aeabi_dsub>
 80085f6:	ec41 0b10 	vmov	d0, r0, r1
 80085fa:	b005      	add	sp, #20
 80085fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8008600:	4668      	mov	r0, sp
 8008602:	f000 fe2d 	bl	8009260 <__ieee754_rem_pio2>
 8008606:	f000 0003 	and.w	r0, r0, #3
 800860a:	2801      	cmp	r0, #1
 800860c:	d00b      	beq.n	8008626 <cos+0x5e>
 800860e:	2802      	cmp	r0, #2
 8008610:	d016      	beq.n	8008640 <cos+0x78>
 8008612:	b9e0      	cbnz	r0, 800864e <cos+0x86>
 8008614:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008618:	ed9d 0b00 	vldr	d0, [sp]
 800861c:	f001 f8e0 	bl	80097e0 <__kernel_cos>
 8008620:	ec51 0b10 	vmov	r0, r1, d0
 8008624:	e7e7      	b.n	80085f6 <cos+0x2e>
 8008626:	ed9d 1b02 	vldr	d1, [sp, #8]
 800862a:	ed9d 0b00 	vldr	d0, [sp]
 800862e:	f001 fcef 	bl	800a010 <__kernel_sin>
 8008632:	ec53 2b10 	vmov	r2, r3, d0
 8008636:	ee10 0a10 	vmov	r0, s0
 800863a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800863e:	e7da      	b.n	80085f6 <cos+0x2e>
 8008640:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008644:	ed9d 0b00 	vldr	d0, [sp]
 8008648:	f001 f8ca 	bl	80097e0 <__kernel_cos>
 800864c:	e7f1      	b.n	8008632 <cos+0x6a>
 800864e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008652:	ed9d 0b00 	vldr	d0, [sp]
 8008656:	2001      	movs	r0, #1
 8008658:	f001 fcda 	bl	800a010 <__kernel_sin>
 800865c:	e7e0      	b.n	8008620 <cos+0x58>
 800865e:	bf00      	nop
	...
 8008668:	3fe921fb 	.word	0x3fe921fb
 800866c:	7fefffff 	.word	0x7fefffff

08008670 <sin>:
 8008670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008672:	ec53 2b10 	vmov	r2, r3, d0
 8008676:	4828      	ldr	r0, [pc, #160]	; (8008718 <sin+0xa8>)
 8008678:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800867c:	4281      	cmp	r1, r0
 800867e:	dc07      	bgt.n	8008690 <sin+0x20>
 8008680:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008710 <sin+0xa0>
 8008684:	2000      	movs	r0, #0
 8008686:	b005      	add	sp, #20
 8008688:	f85d eb04 	ldr.w	lr, [sp], #4
 800868c:	f001 bcc0 	b.w	800a010 <__kernel_sin>
 8008690:	4822      	ldr	r0, [pc, #136]	; (800871c <sin+0xac>)
 8008692:	4281      	cmp	r1, r0
 8008694:	dd09      	ble.n	80086aa <sin+0x3a>
 8008696:	ee10 0a10 	vmov	r0, s0
 800869a:	4619      	mov	r1, r3
 800869c:	f7f7 fe04 	bl	80002a8 <__aeabi_dsub>
 80086a0:	ec41 0b10 	vmov	d0, r0, r1
 80086a4:	b005      	add	sp, #20
 80086a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80086aa:	4668      	mov	r0, sp
 80086ac:	f000 fdd8 	bl	8009260 <__ieee754_rem_pio2>
 80086b0:	f000 0003 	and.w	r0, r0, #3
 80086b4:	2801      	cmp	r0, #1
 80086b6:	d00c      	beq.n	80086d2 <sin+0x62>
 80086b8:	2802      	cmp	r0, #2
 80086ba:	d011      	beq.n	80086e0 <sin+0x70>
 80086bc:	b9f0      	cbnz	r0, 80086fc <sin+0x8c>
 80086be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80086c2:	ed9d 0b00 	vldr	d0, [sp]
 80086c6:	2001      	movs	r0, #1
 80086c8:	f001 fca2 	bl	800a010 <__kernel_sin>
 80086cc:	ec51 0b10 	vmov	r0, r1, d0
 80086d0:	e7e6      	b.n	80086a0 <sin+0x30>
 80086d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80086d6:	ed9d 0b00 	vldr	d0, [sp]
 80086da:	f001 f881 	bl	80097e0 <__kernel_cos>
 80086de:	e7f5      	b.n	80086cc <sin+0x5c>
 80086e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80086e4:	ed9d 0b00 	vldr	d0, [sp]
 80086e8:	2001      	movs	r0, #1
 80086ea:	f001 fc91 	bl	800a010 <__kernel_sin>
 80086ee:	ec53 2b10 	vmov	r2, r3, d0
 80086f2:	ee10 0a10 	vmov	r0, s0
 80086f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80086fa:	e7d1      	b.n	80086a0 <sin+0x30>
 80086fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008700:	ed9d 0b00 	vldr	d0, [sp]
 8008704:	f001 f86c 	bl	80097e0 <__kernel_cos>
 8008708:	e7f1      	b.n	80086ee <sin+0x7e>
 800870a:	bf00      	nop
 800870c:	f3af 8000 	nop.w
	...
 8008718:	3fe921fb 	.word	0x3fe921fb
 800871c:	7fefffff 	.word	0x7fefffff

08008720 <pow>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	ed2d 8b02 	vpush	{d8}
 8008726:	eeb0 8a40 	vmov.f32	s16, s0
 800872a:	eef0 8a60 	vmov.f32	s17, s1
 800872e:	ec55 4b11 	vmov	r4, r5, d1
 8008732:	f000 f865 	bl	8008800 <__ieee754_pow>
 8008736:	4622      	mov	r2, r4
 8008738:	462b      	mov	r3, r5
 800873a:	4620      	mov	r0, r4
 800873c:	4629      	mov	r1, r5
 800873e:	ec57 6b10 	vmov	r6, r7, d0
 8008742:	f7f8 fa03 	bl	8000b4c <__aeabi_dcmpun>
 8008746:	2800      	cmp	r0, #0
 8008748:	d13b      	bne.n	80087c2 <pow+0xa2>
 800874a:	ec51 0b18 	vmov	r0, r1, d8
 800874e:	2200      	movs	r2, #0
 8008750:	2300      	movs	r3, #0
 8008752:	f7f8 f9c9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008756:	b1b8      	cbz	r0, 8008788 <pow+0x68>
 8008758:	2200      	movs	r2, #0
 800875a:	2300      	movs	r3, #0
 800875c:	4620      	mov	r0, r4
 800875e:	4629      	mov	r1, r5
 8008760:	f7f8 f9c2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008764:	2800      	cmp	r0, #0
 8008766:	d146      	bne.n	80087f6 <pow+0xd6>
 8008768:	ec45 4b10 	vmov	d0, r4, r5
 800876c:	f001 fd47 	bl	800a1fe <finite>
 8008770:	b338      	cbz	r0, 80087c2 <pow+0xa2>
 8008772:	2200      	movs	r2, #0
 8008774:	2300      	movs	r3, #0
 8008776:	4620      	mov	r0, r4
 8008778:	4629      	mov	r1, r5
 800877a:	f7f8 f9bf 	bl	8000afc <__aeabi_dcmplt>
 800877e:	b300      	cbz	r0, 80087c2 <pow+0xa2>
 8008780:	f7fe fd5a 	bl	8007238 <__errno>
 8008784:	2322      	movs	r3, #34	; 0x22
 8008786:	e01b      	b.n	80087c0 <pow+0xa0>
 8008788:	ec47 6b10 	vmov	d0, r6, r7
 800878c:	f001 fd37 	bl	800a1fe <finite>
 8008790:	b9e0      	cbnz	r0, 80087cc <pow+0xac>
 8008792:	eeb0 0a48 	vmov.f32	s0, s16
 8008796:	eef0 0a68 	vmov.f32	s1, s17
 800879a:	f001 fd30 	bl	800a1fe <finite>
 800879e:	b1a8      	cbz	r0, 80087cc <pow+0xac>
 80087a0:	ec45 4b10 	vmov	d0, r4, r5
 80087a4:	f001 fd2b 	bl	800a1fe <finite>
 80087a8:	b180      	cbz	r0, 80087cc <pow+0xac>
 80087aa:	4632      	mov	r2, r6
 80087ac:	463b      	mov	r3, r7
 80087ae:	4630      	mov	r0, r6
 80087b0:	4639      	mov	r1, r7
 80087b2:	f7f8 f9cb 	bl	8000b4c <__aeabi_dcmpun>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d0e2      	beq.n	8008780 <pow+0x60>
 80087ba:	f7fe fd3d 	bl	8007238 <__errno>
 80087be:	2321      	movs	r3, #33	; 0x21
 80087c0:	6003      	str	r3, [r0, #0]
 80087c2:	ecbd 8b02 	vpop	{d8}
 80087c6:	ec47 6b10 	vmov	d0, r6, r7
 80087ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087cc:	2200      	movs	r2, #0
 80087ce:	2300      	movs	r3, #0
 80087d0:	4630      	mov	r0, r6
 80087d2:	4639      	mov	r1, r7
 80087d4:	f7f8 f988 	bl	8000ae8 <__aeabi_dcmpeq>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d0f2      	beq.n	80087c2 <pow+0xa2>
 80087dc:	eeb0 0a48 	vmov.f32	s0, s16
 80087e0:	eef0 0a68 	vmov.f32	s1, s17
 80087e4:	f001 fd0b 	bl	800a1fe <finite>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d0ea      	beq.n	80087c2 <pow+0xa2>
 80087ec:	ec45 4b10 	vmov	d0, r4, r5
 80087f0:	f001 fd05 	bl	800a1fe <finite>
 80087f4:	e7c3      	b.n	800877e <pow+0x5e>
 80087f6:	4f01      	ldr	r7, [pc, #4]	; (80087fc <pow+0xdc>)
 80087f8:	2600      	movs	r6, #0
 80087fa:	e7e2      	b.n	80087c2 <pow+0xa2>
 80087fc:	3ff00000 	.word	0x3ff00000

08008800 <__ieee754_pow>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	ed2d 8b06 	vpush	{d8-d10}
 8008808:	b089      	sub	sp, #36	; 0x24
 800880a:	ed8d 1b00 	vstr	d1, [sp]
 800880e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008812:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008816:	ea58 0102 	orrs.w	r1, r8, r2
 800881a:	ec57 6b10 	vmov	r6, r7, d0
 800881e:	d115      	bne.n	800884c <__ieee754_pow+0x4c>
 8008820:	19b3      	adds	r3, r6, r6
 8008822:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008826:	4152      	adcs	r2, r2
 8008828:	4299      	cmp	r1, r3
 800882a:	4b89      	ldr	r3, [pc, #548]	; (8008a50 <__ieee754_pow+0x250>)
 800882c:	4193      	sbcs	r3, r2
 800882e:	f080 84d2 	bcs.w	80091d6 <__ieee754_pow+0x9d6>
 8008832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008836:	4630      	mov	r0, r6
 8008838:	4639      	mov	r1, r7
 800883a:	f7f7 fd37 	bl	80002ac <__adddf3>
 800883e:	ec41 0b10 	vmov	d0, r0, r1
 8008842:	b009      	add	sp, #36	; 0x24
 8008844:	ecbd 8b06 	vpop	{d8-d10}
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	4b81      	ldr	r3, [pc, #516]	; (8008a54 <__ieee754_pow+0x254>)
 800884e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008852:	429c      	cmp	r4, r3
 8008854:	ee10 aa10 	vmov	sl, s0
 8008858:	463d      	mov	r5, r7
 800885a:	dc06      	bgt.n	800886a <__ieee754_pow+0x6a>
 800885c:	d101      	bne.n	8008862 <__ieee754_pow+0x62>
 800885e:	2e00      	cmp	r6, #0
 8008860:	d1e7      	bne.n	8008832 <__ieee754_pow+0x32>
 8008862:	4598      	cmp	r8, r3
 8008864:	dc01      	bgt.n	800886a <__ieee754_pow+0x6a>
 8008866:	d10f      	bne.n	8008888 <__ieee754_pow+0x88>
 8008868:	b172      	cbz	r2, 8008888 <__ieee754_pow+0x88>
 800886a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800886e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008872:	ea55 050a 	orrs.w	r5, r5, sl
 8008876:	d1dc      	bne.n	8008832 <__ieee754_pow+0x32>
 8008878:	e9dd 3200 	ldrd	r3, r2, [sp]
 800887c:	18db      	adds	r3, r3, r3
 800887e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008882:	4152      	adcs	r2, r2
 8008884:	429d      	cmp	r5, r3
 8008886:	e7d0      	b.n	800882a <__ieee754_pow+0x2a>
 8008888:	2d00      	cmp	r5, #0
 800888a:	da3b      	bge.n	8008904 <__ieee754_pow+0x104>
 800888c:	4b72      	ldr	r3, [pc, #456]	; (8008a58 <__ieee754_pow+0x258>)
 800888e:	4598      	cmp	r8, r3
 8008890:	dc51      	bgt.n	8008936 <__ieee754_pow+0x136>
 8008892:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008896:	4598      	cmp	r8, r3
 8008898:	f340 84ac 	ble.w	80091f4 <__ieee754_pow+0x9f4>
 800889c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80088a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088a4:	2b14      	cmp	r3, #20
 80088a6:	dd0f      	ble.n	80088c8 <__ieee754_pow+0xc8>
 80088a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80088ac:	fa22 f103 	lsr.w	r1, r2, r3
 80088b0:	fa01 f303 	lsl.w	r3, r1, r3
 80088b4:	4293      	cmp	r3, r2
 80088b6:	f040 849d 	bne.w	80091f4 <__ieee754_pow+0x9f4>
 80088ba:	f001 0101 	and.w	r1, r1, #1
 80088be:	f1c1 0302 	rsb	r3, r1, #2
 80088c2:	9304      	str	r3, [sp, #16]
 80088c4:	b182      	cbz	r2, 80088e8 <__ieee754_pow+0xe8>
 80088c6:	e05f      	b.n	8008988 <__ieee754_pow+0x188>
 80088c8:	2a00      	cmp	r2, #0
 80088ca:	d15b      	bne.n	8008984 <__ieee754_pow+0x184>
 80088cc:	f1c3 0314 	rsb	r3, r3, #20
 80088d0:	fa48 f103 	asr.w	r1, r8, r3
 80088d4:	fa01 f303 	lsl.w	r3, r1, r3
 80088d8:	4543      	cmp	r3, r8
 80088da:	f040 8488 	bne.w	80091ee <__ieee754_pow+0x9ee>
 80088de:	f001 0101 	and.w	r1, r1, #1
 80088e2:	f1c1 0302 	rsb	r3, r1, #2
 80088e6:	9304      	str	r3, [sp, #16]
 80088e8:	4b5c      	ldr	r3, [pc, #368]	; (8008a5c <__ieee754_pow+0x25c>)
 80088ea:	4598      	cmp	r8, r3
 80088ec:	d132      	bne.n	8008954 <__ieee754_pow+0x154>
 80088ee:	f1b9 0f00 	cmp.w	r9, #0
 80088f2:	f280 8478 	bge.w	80091e6 <__ieee754_pow+0x9e6>
 80088f6:	4959      	ldr	r1, [pc, #356]	; (8008a5c <__ieee754_pow+0x25c>)
 80088f8:	4632      	mov	r2, r6
 80088fa:	463b      	mov	r3, r7
 80088fc:	2000      	movs	r0, #0
 80088fe:	f7f7 ffb5 	bl	800086c <__aeabi_ddiv>
 8008902:	e79c      	b.n	800883e <__ieee754_pow+0x3e>
 8008904:	2300      	movs	r3, #0
 8008906:	9304      	str	r3, [sp, #16]
 8008908:	2a00      	cmp	r2, #0
 800890a:	d13d      	bne.n	8008988 <__ieee754_pow+0x188>
 800890c:	4b51      	ldr	r3, [pc, #324]	; (8008a54 <__ieee754_pow+0x254>)
 800890e:	4598      	cmp	r8, r3
 8008910:	d1ea      	bne.n	80088e8 <__ieee754_pow+0xe8>
 8008912:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008916:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800891a:	ea53 030a 	orrs.w	r3, r3, sl
 800891e:	f000 845a 	beq.w	80091d6 <__ieee754_pow+0x9d6>
 8008922:	4b4f      	ldr	r3, [pc, #316]	; (8008a60 <__ieee754_pow+0x260>)
 8008924:	429c      	cmp	r4, r3
 8008926:	dd08      	ble.n	800893a <__ieee754_pow+0x13a>
 8008928:	f1b9 0f00 	cmp.w	r9, #0
 800892c:	f2c0 8457 	blt.w	80091de <__ieee754_pow+0x9de>
 8008930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008934:	e783      	b.n	800883e <__ieee754_pow+0x3e>
 8008936:	2302      	movs	r3, #2
 8008938:	e7e5      	b.n	8008906 <__ieee754_pow+0x106>
 800893a:	f1b9 0f00 	cmp.w	r9, #0
 800893e:	f04f 0000 	mov.w	r0, #0
 8008942:	f04f 0100 	mov.w	r1, #0
 8008946:	f6bf af7a 	bge.w	800883e <__ieee754_pow+0x3e>
 800894a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800894e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008952:	e774      	b.n	800883e <__ieee754_pow+0x3e>
 8008954:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008958:	d106      	bne.n	8008968 <__ieee754_pow+0x168>
 800895a:	4632      	mov	r2, r6
 800895c:	463b      	mov	r3, r7
 800895e:	4630      	mov	r0, r6
 8008960:	4639      	mov	r1, r7
 8008962:	f7f7 fe59 	bl	8000618 <__aeabi_dmul>
 8008966:	e76a      	b.n	800883e <__ieee754_pow+0x3e>
 8008968:	4b3e      	ldr	r3, [pc, #248]	; (8008a64 <__ieee754_pow+0x264>)
 800896a:	4599      	cmp	r9, r3
 800896c:	d10c      	bne.n	8008988 <__ieee754_pow+0x188>
 800896e:	2d00      	cmp	r5, #0
 8008970:	db0a      	blt.n	8008988 <__ieee754_pow+0x188>
 8008972:	ec47 6b10 	vmov	d0, r6, r7
 8008976:	b009      	add	sp, #36	; 0x24
 8008978:	ecbd 8b06 	vpop	{d8-d10}
 800897c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	f000 be7a 	b.w	8009678 <__ieee754_sqrt>
 8008984:	2300      	movs	r3, #0
 8008986:	9304      	str	r3, [sp, #16]
 8008988:	ec47 6b10 	vmov	d0, r6, r7
 800898c:	f001 fc2e 	bl	800a1ec <fabs>
 8008990:	ec51 0b10 	vmov	r0, r1, d0
 8008994:	f1ba 0f00 	cmp.w	sl, #0
 8008998:	d129      	bne.n	80089ee <__ieee754_pow+0x1ee>
 800899a:	b124      	cbz	r4, 80089a6 <__ieee754_pow+0x1a6>
 800899c:	4b2f      	ldr	r3, [pc, #188]	; (8008a5c <__ieee754_pow+0x25c>)
 800899e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d123      	bne.n	80089ee <__ieee754_pow+0x1ee>
 80089a6:	f1b9 0f00 	cmp.w	r9, #0
 80089aa:	da05      	bge.n	80089b8 <__ieee754_pow+0x1b8>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	2000      	movs	r0, #0
 80089b2:	492a      	ldr	r1, [pc, #168]	; (8008a5c <__ieee754_pow+0x25c>)
 80089b4:	f7f7 ff5a 	bl	800086c <__aeabi_ddiv>
 80089b8:	2d00      	cmp	r5, #0
 80089ba:	f6bf af40 	bge.w	800883e <__ieee754_pow+0x3e>
 80089be:	9b04      	ldr	r3, [sp, #16]
 80089c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80089c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80089c8:	4323      	orrs	r3, r4
 80089ca:	d108      	bne.n	80089de <__ieee754_pow+0x1de>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4610      	mov	r0, r2
 80089d2:	4619      	mov	r1, r3
 80089d4:	f7f7 fc68 	bl	80002a8 <__aeabi_dsub>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	e78f      	b.n	80088fe <__ieee754_pow+0xfe>
 80089de:	9b04      	ldr	r3, [sp, #16]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	f47f af2c 	bne.w	800883e <__ieee754_pow+0x3e>
 80089e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089ea:	4619      	mov	r1, r3
 80089ec:	e727      	b.n	800883e <__ieee754_pow+0x3e>
 80089ee:	0feb      	lsrs	r3, r5, #31
 80089f0:	3b01      	subs	r3, #1
 80089f2:	9306      	str	r3, [sp, #24]
 80089f4:	9a06      	ldr	r2, [sp, #24]
 80089f6:	9b04      	ldr	r3, [sp, #16]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	d102      	bne.n	8008a02 <__ieee754_pow+0x202>
 80089fc:	4632      	mov	r2, r6
 80089fe:	463b      	mov	r3, r7
 8008a00:	e7e6      	b.n	80089d0 <__ieee754_pow+0x1d0>
 8008a02:	4b19      	ldr	r3, [pc, #100]	; (8008a68 <__ieee754_pow+0x268>)
 8008a04:	4598      	cmp	r8, r3
 8008a06:	f340 80fb 	ble.w	8008c00 <__ieee754_pow+0x400>
 8008a0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008a0e:	4598      	cmp	r8, r3
 8008a10:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <__ieee754_pow+0x260>)
 8008a12:	dd0c      	ble.n	8008a2e <__ieee754_pow+0x22e>
 8008a14:	429c      	cmp	r4, r3
 8008a16:	dc0f      	bgt.n	8008a38 <__ieee754_pow+0x238>
 8008a18:	f1b9 0f00 	cmp.w	r9, #0
 8008a1c:	da0f      	bge.n	8008a3e <__ieee754_pow+0x23e>
 8008a1e:	2000      	movs	r0, #0
 8008a20:	b009      	add	sp, #36	; 0x24
 8008a22:	ecbd 8b06 	vpop	{d8-d10}
 8008a26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2a:	f001 bbd6 	b.w	800a1da <__math_oflow>
 8008a2e:	429c      	cmp	r4, r3
 8008a30:	dbf2      	blt.n	8008a18 <__ieee754_pow+0x218>
 8008a32:	4b0a      	ldr	r3, [pc, #40]	; (8008a5c <__ieee754_pow+0x25c>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	dd19      	ble.n	8008a6c <__ieee754_pow+0x26c>
 8008a38:	f1b9 0f00 	cmp.w	r9, #0
 8008a3c:	dcef      	bgt.n	8008a1e <__ieee754_pow+0x21e>
 8008a3e:	2000      	movs	r0, #0
 8008a40:	b009      	add	sp, #36	; 0x24
 8008a42:	ecbd 8b06 	vpop	{d8-d10}
 8008a46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4a:	f001 bbbd 	b.w	800a1c8 <__math_uflow>
 8008a4e:	bf00      	nop
 8008a50:	fff00000 	.word	0xfff00000
 8008a54:	7ff00000 	.word	0x7ff00000
 8008a58:	433fffff 	.word	0x433fffff
 8008a5c:	3ff00000 	.word	0x3ff00000
 8008a60:	3fefffff 	.word	0x3fefffff
 8008a64:	3fe00000 	.word	0x3fe00000
 8008a68:	41e00000 	.word	0x41e00000
 8008a6c:	4b60      	ldr	r3, [pc, #384]	; (8008bf0 <__ieee754_pow+0x3f0>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f7f7 fc1a 	bl	80002a8 <__aeabi_dsub>
 8008a74:	a354      	add	r3, pc, #336	; (adr r3, 8008bc8 <__ieee754_pow+0x3c8>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	460d      	mov	r5, r1
 8008a7e:	f7f7 fdcb 	bl	8000618 <__aeabi_dmul>
 8008a82:	a353      	add	r3, pc, #332	; (adr r3, 8008bd0 <__ieee754_pow+0x3d0>)
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	4606      	mov	r6, r0
 8008a8a:	460f      	mov	r7, r1
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	4629      	mov	r1, r5
 8008a90:	f7f7 fdc2 	bl	8000618 <__aeabi_dmul>
 8008a94:	4b57      	ldr	r3, [pc, #348]	; (8008bf4 <__ieee754_pow+0x3f4>)
 8008a96:	4682      	mov	sl, r0
 8008a98:	468b      	mov	fp, r1
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	f7f7 fdba 	bl	8000618 <__aeabi_dmul>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	a14b      	add	r1, pc, #300	; (adr r1, 8008bd8 <__ieee754_pow+0x3d8>)
 8008aaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aae:	f7f7 fbfb 	bl	80002a8 <__aeabi_dsub>
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	462b      	mov	r3, r5
 8008ab6:	f7f7 fdaf 	bl	8000618 <__aeabi_dmul>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	2000      	movs	r0, #0
 8008ac0:	494d      	ldr	r1, [pc, #308]	; (8008bf8 <__ieee754_pow+0x3f8>)
 8008ac2:	f7f7 fbf1 	bl	80002a8 <__aeabi_dsub>
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	4680      	mov	r8, r0
 8008aca:	4689      	mov	r9, r1
 8008acc:	462b      	mov	r3, r5
 8008ace:	4620      	mov	r0, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	f7f7 fda1 	bl	8000618 <__aeabi_dmul>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4640      	mov	r0, r8
 8008adc:	4649      	mov	r1, r9
 8008ade:	f7f7 fd9b 	bl	8000618 <__aeabi_dmul>
 8008ae2:	a33f      	add	r3, pc, #252	; (adr r3, 8008be0 <__ieee754_pow+0x3e0>)
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	f7f7 fd96 	bl	8000618 <__aeabi_dmul>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4650      	mov	r0, sl
 8008af2:	4659      	mov	r1, fp
 8008af4:	f7f7 fbd8 	bl	80002a8 <__aeabi_dsub>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4680      	mov	r8, r0
 8008afe:	4689      	mov	r9, r1
 8008b00:	4630      	mov	r0, r6
 8008b02:	4639      	mov	r1, r7
 8008b04:	f7f7 fbd2 	bl	80002ac <__adddf3>
 8008b08:	2000      	movs	r0, #0
 8008b0a:	4632      	mov	r2, r6
 8008b0c:	463b      	mov	r3, r7
 8008b0e:	4604      	mov	r4, r0
 8008b10:	460d      	mov	r5, r1
 8008b12:	f7f7 fbc9 	bl	80002a8 <__aeabi_dsub>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	f7f7 fbc3 	bl	80002a8 <__aeabi_dsub>
 8008b22:	9b04      	ldr	r3, [sp, #16]
 8008b24:	9a06      	ldr	r2, [sp, #24]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	4682      	mov	sl, r0
 8008b2c:	468b      	mov	fp, r1
 8008b2e:	f040 81e7 	bne.w	8008f00 <__ieee754_pow+0x700>
 8008b32:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008be8 <__ieee754_pow+0x3e8>
 8008b36:	eeb0 8a47 	vmov.f32	s16, s14
 8008b3a:	eef0 8a67 	vmov.f32	s17, s15
 8008b3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b42:	2600      	movs	r6, #0
 8008b44:	4632      	mov	r2, r6
 8008b46:	463b      	mov	r3, r7
 8008b48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b4c:	f7f7 fbac 	bl	80002a8 <__aeabi_dsub>
 8008b50:	4622      	mov	r2, r4
 8008b52:	462b      	mov	r3, r5
 8008b54:	f7f7 fd60 	bl	8000618 <__aeabi_dmul>
 8008b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b5c:	4680      	mov	r8, r0
 8008b5e:	4689      	mov	r9, r1
 8008b60:	4650      	mov	r0, sl
 8008b62:	4659      	mov	r1, fp
 8008b64:	f7f7 fd58 	bl	8000618 <__aeabi_dmul>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	4649      	mov	r1, r9
 8008b70:	f7f7 fb9c 	bl	80002ac <__adddf3>
 8008b74:	4632      	mov	r2, r6
 8008b76:	463b      	mov	r3, r7
 8008b78:	4680      	mov	r8, r0
 8008b7a:	4689      	mov	r9, r1
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	4629      	mov	r1, r5
 8008b80:	f7f7 fd4a 	bl	8000618 <__aeabi_dmul>
 8008b84:	460b      	mov	r3, r1
 8008b86:	4604      	mov	r4, r0
 8008b88:	460d      	mov	r5, r1
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	4640      	mov	r0, r8
 8008b90:	f7f7 fb8c 	bl	80002ac <__adddf3>
 8008b94:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <__ieee754_pow+0x3fc>)
 8008b96:	4299      	cmp	r1, r3
 8008b98:	ec45 4b19 	vmov	d9, r4, r5
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	460f      	mov	r7, r1
 8008ba0:	468b      	mov	fp, r1
 8008ba2:	f340 82f1 	ble.w	8009188 <__ieee754_pow+0x988>
 8008ba6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008baa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008bae:	4303      	orrs	r3, r0
 8008bb0:	f000 81e4 	beq.w	8008f7c <__ieee754_pow+0x77c>
 8008bb4:	ec51 0b18 	vmov	r0, r1, d8
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f7f7 ff9e 	bl	8000afc <__aeabi_dcmplt>
 8008bc0:	3800      	subs	r0, #0
 8008bc2:	bf18      	it	ne
 8008bc4:	2001      	movne	r0, #1
 8008bc6:	e72b      	b.n	8008a20 <__ieee754_pow+0x220>
 8008bc8:	60000000 	.word	0x60000000
 8008bcc:	3ff71547 	.word	0x3ff71547
 8008bd0:	f85ddf44 	.word	0xf85ddf44
 8008bd4:	3e54ae0b 	.word	0x3e54ae0b
 8008bd8:	55555555 	.word	0x55555555
 8008bdc:	3fd55555 	.word	0x3fd55555
 8008be0:	652b82fe 	.word	0x652b82fe
 8008be4:	3ff71547 	.word	0x3ff71547
 8008be8:	00000000 	.word	0x00000000
 8008bec:	bff00000 	.word	0xbff00000
 8008bf0:	3ff00000 	.word	0x3ff00000
 8008bf4:	3fd00000 	.word	0x3fd00000
 8008bf8:	3fe00000 	.word	0x3fe00000
 8008bfc:	408fffff 	.word	0x408fffff
 8008c00:	4bd5      	ldr	r3, [pc, #852]	; (8008f58 <__ieee754_pow+0x758>)
 8008c02:	402b      	ands	r3, r5
 8008c04:	2200      	movs	r2, #0
 8008c06:	b92b      	cbnz	r3, 8008c14 <__ieee754_pow+0x414>
 8008c08:	4bd4      	ldr	r3, [pc, #848]	; (8008f5c <__ieee754_pow+0x75c>)
 8008c0a:	f7f7 fd05 	bl	8000618 <__aeabi_dmul>
 8008c0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008c12:	460c      	mov	r4, r1
 8008c14:	1523      	asrs	r3, r4, #20
 8008c16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c1a:	4413      	add	r3, r2
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	4bd0      	ldr	r3, [pc, #832]	; (8008f60 <__ieee754_pow+0x760>)
 8008c20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008c24:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008c28:	429c      	cmp	r4, r3
 8008c2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008c2e:	dd08      	ble.n	8008c42 <__ieee754_pow+0x442>
 8008c30:	4bcc      	ldr	r3, [pc, #816]	; (8008f64 <__ieee754_pow+0x764>)
 8008c32:	429c      	cmp	r4, r3
 8008c34:	f340 8162 	ble.w	8008efc <__ieee754_pow+0x6fc>
 8008c38:	9b05      	ldr	r3, [sp, #20]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	9305      	str	r3, [sp, #20]
 8008c3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008c42:	2400      	movs	r4, #0
 8008c44:	00e3      	lsls	r3, r4, #3
 8008c46:	9307      	str	r3, [sp, #28]
 8008c48:	4bc7      	ldr	r3, [pc, #796]	; (8008f68 <__ieee754_pow+0x768>)
 8008c4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c4e:	ed93 7b00 	vldr	d7, [r3]
 8008c52:	4629      	mov	r1, r5
 8008c54:	ec53 2b17 	vmov	r2, r3, d7
 8008c58:	eeb0 9a47 	vmov.f32	s18, s14
 8008c5c:	eef0 9a67 	vmov.f32	s19, s15
 8008c60:	4682      	mov	sl, r0
 8008c62:	f7f7 fb21 	bl	80002a8 <__aeabi_dsub>
 8008c66:	4652      	mov	r2, sl
 8008c68:	4606      	mov	r6, r0
 8008c6a:	460f      	mov	r7, r1
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	ec51 0b19 	vmov	r0, r1, d9
 8008c72:	f7f7 fb1b 	bl	80002ac <__adddf3>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	49bb      	ldr	r1, [pc, #748]	; (8008f6c <__ieee754_pow+0x76c>)
 8008c7e:	f7f7 fdf5 	bl	800086c <__aeabi_ddiv>
 8008c82:	ec41 0b1a 	vmov	d10, r0, r1
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	4639      	mov	r1, r7
 8008c8e:	f7f7 fcc3 	bl	8000618 <__aeabi_dmul>
 8008c92:	2300      	movs	r3, #0
 8008c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c98:	9302      	str	r3, [sp, #8]
 8008c9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c9e:	46ab      	mov	fp, r5
 8008ca0:	106d      	asrs	r5, r5, #1
 8008ca2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008ca6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008caa:	ec41 0b18 	vmov	d8, r0, r1
 8008cae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	4614      	mov	r4, r2
 8008cba:	461d      	mov	r5, r3
 8008cbc:	f7f7 fcac 	bl	8000618 <__aeabi_dmul>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	f7f7 faee 	bl	80002a8 <__aeabi_dsub>
 8008ccc:	ec53 2b19 	vmov	r2, r3, d9
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	460f      	mov	r7, r1
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	f7f7 fae6 	bl	80002a8 <__aeabi_dsub>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4650      	mov	r0, sl
 8008ce2:	4659      	mov	r1, fp
 8008ce4:	f7f7 fae0 	bl	80002a8 <__aeabi_dsub>
 8008ce8:	4642      	mov	r2, r8
 8008cea:	464b      	mov	r3, r9
 8008cec:	f7f7 fc94 	bl	8000618 <__aeabi_dmul>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	4639      	mov	r1, r7
 8008cf8:	f7f7 fad6 	bl	80002a8 <__aeabi_dsub>
 8008cfc:	ec53 2b1a 	vmov	r2, r3, d10
 8008d00:	f7f7 fc8a 	bl	8000618 <__aeabi_dmul>
 8008d04:	ec53 2b18 	vmov	r2, r3, d8
 8008d08:	ec41 0b19 	vmov	d9, r0, r1
 8008d0c:	ec51 0b18 	vmov	r0, r1, d8
 8008d10:	f7f7 fc82 	bl	8000618 <__aeabi_dmul>
 8008d14:	a37c      	add	r3, pc, #496	; (adr r3, 8008f08 <__ieee754_pow+0x708>)
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	460d      	mov	r5, r1
 8008d1e:	f7f7 fc7b 	bl	8000618 <__aeabi_dmul>
 8008d22:	a37b      	add	r3, pc, #492	; (adr r3, 8008f10 <__ieee754_pow+0x710>)
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	f7f7 fac0 	bl	80002ac <__adddf3>
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	462b      	mov	r3, r5
 8008d30:	f7f7 fc72 	bl	8000618 <__aeabi_dmul>
 8008d34:	a378      	add	r3, pc, #480	; (adr r3, 8008f18 <__ieee754_pow+0x718>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f7f7 fab7 	bl	80002ac <__adddf3>
 8008d3e:	4622      	mov	r2, r4
 8008d40:	462b      	mov	r3, r5
 8008d42:	f7f7 fc69 	bl	8000618 <__aeabi_dmul>
 8008d46:	a376      	add	r3, pc, #472	; (adr r3, 8008f20 <__ieee754_pow+0x720>)
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	f7f7 faae 	bl	80002ac <__adddf3>
 8008d50:	4622      	mov	r2, r4
 8008d52:	462b      	mov	r3, r5
 8008d54:	f7f7 fc60 	bl	8000618 <__aeabi_dmul>
 8008d58:	a373      	add	r3, pc, #460	; (adr r3, 8008f28 <__ieee754_pow+0x728>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 faa5 	bl	80002ac <__adddf3>
 8008d62:	4622      	mov	r2, r4
 8008d64:	462b      	mov	r3, r5
 8008d66:	f7f7 fc57 	bl	8000618 <__aeabi_dmul>
 8008d6a:	a371      	add	r3, pc, #452	; (adr r3, 8008f30 <__ieee754_pow+0x730>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f7f7 fa9c 	bl	80002ac <__adddf3>
 8008d74:	4622      	mov	r2, r4
 8008d76:	4606      	mov	r6, r0
 8008d78:	460f      	mov	r7, r1
 8008d7a:	462b      	mov	r3, r5
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	4629      	mov	r1, r5
 8008d80:	f7f7 fc4a 	bl	8000618 <__aeabi_dmul>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4630      	mov	r0, r6
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f7 fc44 	bl	8000618 <__aeabi_dmul>
 8008d90:	4642      	mov	r2, r8
 8008d92:	4604      	mov	r4, r0
 8008d94:	460d      	mov	r5, r1
 8008d96:	464b      	mov	r3, r9
 8008d98:	ec51 0b18 	vmov	r0, r1, d8
 8008d9c:	f7f7 fa86 	bl	80002ac <__adddf3>
 8008da0:	ec53 2b19 	vmov	r2, r3, d9
 8008da4:	f7f7 fc38 	bl	8000618 <__aeabi_dmul>
 8008da8:	4622      	mov	r2, r4
 8008daa:	462b      	mov	r3, r5
 8008dac:	f7f7 fa7e 	bl	80002ac <__adddf3>
 8008db0:	4642      	mov	r2, r8
 8008db2:	4682      	mov	sl, r0
 8008db4:	468b      	mov	fp, r1
 8008db6:	464b      	mov	r3, r9
 8008db8:	4640      	mov	r0, r8
 8008dba:	4649      	mov	r1, r9
 8008dbc:	f7f7 fc2c 	bl	8000618 <__aeabi_dmul>
 8008dc0:	4b6b      	ldr	r3, [pc, #428]	; (8008f70 <__ieee754_pow+0x770>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	460f      	mov	r7, r1
 8008dc8:	f7f7 fa70 	bl	80002ac <__adddf3>
 8008dcc:	4652      	mov	r2, sl
 8008dce:	465b      	mov	r3, fp
 8008dd0:	f7f7 fa6c 	bl	80002ac <__adddf3>
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	460d      	mov	r5, r1
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4640      	mov	r0, r8
 8008de0:	4649      	mov	r1, r9
 8008de2:	f7f7 fc19 	bl	8000618 <__aeabi_dmul>
 8008de6:	4b62      	ldr	r3, [pc, #392]	; (8008f70 <__ieee754_pow+0x770>)
 8008de8:	4680      	mov	r8, r0
 8008dea:	4689      	mov	r9, r1
 8008dec:	2200      	movs	r2, #0
 8008dee:	4620      	mov	r0, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	f7f7 fa59 	bl	80002a8 <__aeabi_dsub>
 8008df6:	4632      	mov	r2, r6
 8008df8:	463b      	mov	r3, r7
 8008dfa:	f7f7 fa55 	bl	80002a8 <__aeabi_dsub>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4650      	mov	r0, sl
 8008e04:	4659      	mov	r1, fp
 8008e06:	f7f7 fa4f 	bl	80002a8 <__aeabi_dsub>
 8008e0a:	ec53 2b18 	vmov	r2, r3, d8
 8008e0e:	f7f7 fc03 	bl	8000618 <__aeabi_dmul>
 8008e12:	4622      	mov	r2, r4
 8008e14:	4606      	mov	r6, r0
 8008e16:	460f      	mov	r7, r1
 8008e18:	462b      	mov	r3, r5
 8008e1a:	ec51 0b19 	vmov	r0, r1, d9
 8008e1e:	f7f7 fbfb 	bl	8000618 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4630      	mov	r0, r6
 8008e28:	4639      	mov	r1, r7
 8008e2a:	f7f7 fa3f 	bl	80002ac <__adddf3>
 8008e2e:	4606      	mov	r6, r0
 8008e30:	460f      	mov	r7, r1
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f7f7 fa37 	bl	80002ac <__adddf3>
 8008e3e:	a33e      	add	r3, pc, #248	; (adr r3, 8008f38 <__ieee754_pow+0x738>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	2000      	movs	r0, #0
 8008e46:	4604      	mov	r4, r0
 8008e48:	460d      	mov	r5, r1
 8008e4a:	f7f7 fbe5 	bl	8000618 <__aeabi_dmul>
 8008e4e:	4642      	mov	r2, r8
 8008e50:	ec41 0b18 	vmov	d8, r0, r1
 8008e54:	464b      	mov	r3, r9
 8008e56:	4620      	mov	r0, r4
 8008e58:	4629      	mov	r1, r5
 8008e5a:	f7f7 fa25 	bl	80002a8 <__aeabi_dsub>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	4630      	mov	r0, r6
 8008e64:	4639      	mov	r1, r7
 8008e66:	f7f7 fa1f 	bl	80002a8 <__aeabi_dsub>
 8008e6a:	a335      	add	r3, pc, #212	; (adr r3, 8008f40 <__ieee754_pow+0x740>)
 8008e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e70:	f7f7 fbd2 	bl	8000618 <__aeabi_dmul>
 8008e74:	a334      	add	r3, pc, #208	; (adr r3, 8008f48 <__ieee754_pow+0x748>)
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	460f      	mov	r7, r1
 8008e7e:	4620      	mov	r0, r4
 8008e80:	4629      	mov	r1, r5
 8008e82:	f7f7 fbc9 	bl	8000618 <__aeabi_dmul>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	f7f7 fa0d 	bl	80002ac <__adddf3>
 8008e92:	9a07      	ldr	r2, [sp, #28]
 8008e94:	4b37      	ldr	r3, [pc, #220]	; (8008f74 <__ieee754_pow+0x774>)
 8008e96:	4413      	add	r3, r2
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f7f7 fa06 	bl	80002ac <__adddf3>
 8008ea0:	4682      	mov	sl, r0
 8008ea2:	9805      	ldr	r0, [sp, #20]
 8008ea4:	468b      	mov	fp, r1
 8008ea6:	f7f7 fb4d 	bl	8000544 <__aeabi_i2d>
 8008eaa:	9a07      	ldr	r2, [sp, #28]
 8008eac:	4b32      	ldr	r3, [pc, #200]	; (8008f78 <__ieee754_pow+0x778>)
 8008eae:	4413      	add	r3, r2
 8008eb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	460f      	mov	r7, r1
 8008eb8:	4652      	mov	r2, sl
 8008eba:	465b      	mov	r3, fp
 8008ebc:	ec51 0b18 	vmov	r0, r1, d8
 8008ec0:	f7f7 f9f4 	bl	80002ac <__adddf3>
 8008ec4:	4642      	mov	r2, r8
 8008ec6:	464b      	mov	r3, r9
 8008ec8:	f7f7 f9f0 	bl	80002ac <__adddf3>
 8008ecc:	4632      	mov	r2, r6
 8008ece:	463b      	mov	r3, r7
 8008ed0:	f7f7 f9ec 	bl	80002ac <__adddf3>
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	4632      	mov	r2, r6
 8008ed8:	463b      	mov	r3, r7
 8008eda:	4604      	mov	r4, r0
 8008edc:	460d      	mov	r5, r1
 8008ede:	f7f7 f9e3 	bl	80002a8 <__aeabi_dsub>
 8008ee2:	4642      	mov	r2, r8
 8008ee4:	464b      	mov	r3, r9
 8008ee6:	f7f7 f9df 	bl	80002a8 <__aeabi_dsub>
 8008eea:	ec53 2b18 	vmov	r2, r3, d8
 8008eee:	f7f7 f9db 	bl	80002a8 <__aeabi_dsub>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4650      	mov	r0, sl
 8008ef8:	4659      	mov	r1, fp
 8008efa:	e610      	b.n	8008b1e <__ieee754_pow+0x31e>
 8008efc:	2401      	movs	r4, #1
 8008efe:	e6a1      	b.n	8008c44 <__ieee754_pow+0x444>
 8008f00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008f50 <__ieee754_pow+0x750>
 8008f04:	e617      	b.n	8008b36 <__ieee754_pow+0x336>
 8008f06:	bf00      	nop
 8008f08:	4a454eef 	.word	0x4a454eef
 8008f0c:	3fca7e28 	.word	0x3fca7e28
 8008f10:	93c9db65 	.word	0x93c9db65
 8008f14:	3fcd864a 	.word	0x3fcd864a
 8008f18:	a91d4101 	.word	0xa91d4101
 8008f1c:	3fd17460 	.word	0x3fd17460
 8008f20:	518f264d 	.word	0x518f264d
 8008f24:	3fd55555 	.word	0x3fd55555
 8008f28:	db6fabff 	.word	0xdb6fabff
 8008f2c:	3fdb6db6 	.word	0x3fdb6db6
 8008f30:	33333303 	.word	0x33333303
 8008f34:	3fe33333 	.word	0x3fe33333
 8008f38:	e0000000 	.word	0xe0000000
 8008f3c:	3feec709 	.word	0x3feec709
 8008f40:	dc3a03fd 	.word	0xdc3a03fd
 8008f44:	3feec709 	.word	0x3feec709
 8008f48:	145b01f5 	.word	0x145b01f5
 8008f4c:	be3e2fe0 	.word	0xbe3e2fe0
 8008f50:	00000000 	.word	0x00000000
 8008f54:	3ff00000 	.word	0x3ff00000
 8008f58:	7ff00000 	.word	0x7ff00000
 8008f5c:	43400000 	.word	0x43400000
 8008f60:	0003988e 	.word	0x0003988e
 8008f64:	000bb679 	.word	0x000bb679
 8008f68:	0800a6f8 	.word	0x0800a6f8
 8008f6c:	3ff00000 	.word	0x3ff00000
 8008f70:	40080000 	.word	0x40080000
 8008f74:	0800a718 	.word	0x0800a718
 8008f78:	0800a708 	.word	0x0800a708
 8008f7c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009254 <__ieee754_pow+0xa54>)
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	f7f7 f991 	bl	80002ac <__adddf3>
 8008f8a:	4622      	mov	r2, r4
 8008f8c:	ec41 0b1a 	vmov	d10, r0, r1
 8008f90:	462b      	mov	r3, r5
 8008f92:	4630      	mov	r0, r6
 8008f94:	4639      	mov	r1, r7
 8008f96:	f7f7 f987 	bl	80002a8 <__aeabi_dsub>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	ec51 0b1a 	vmov	r0, r1, d10
 8008fa2:	f7f7 fdc9 	bl	8000b38 <__aeabi_dcmpgt>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	f47f ae04 	bne.w	8008bb4 <__ieee754_pow+0x3b4>
 8008fac:	4aa4      	ldr	r2, [pc, #656]	; (8009240 <__ieee754_pow+0xa40>)
 8008fae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	f340 8108 	ble.w	80091c8 <__ieee754_pow+0x9c8>
 8008fb8:	151b      	asrs	r3, r3, #20
 8008fba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008fbe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008fc2:	fa4a f303 	asr.w	r3, sl, r3
 8008fc6:	445b      	add	r3, fp
 8008fc8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008fcc:	4e9d      	ldr	r6, [pc, #628]	; (8009244 <__ieee754_pow+0xa44>)
 8008fce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008fd2:	4116      	asrs	r6, r2
 8008fd4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008fd8:	2000      	movs	r0, #0
 8008fda:	ea23 0106 	bic.w	r1, r3, r6
 8008fde:	f1c2 0214 	rsb	r2, r2, #20
 8008fe2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008fe6:	fa4a fa02 	asr.w	sl, sl, r2
 8008fea:	f1bb 0f00 	cmp.w	fp, #0
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	bfb8      	it	lt
 8008ff8:	f1ca 0a00 	rsblt	sl, sl, #0
 8008ffc:	f7f7 f954 	bl	80002a8 <__aeabi_dsub>
 8009000:	ec41 0b19 	vmov	d9, r0, r1
 8009004:	4642      	mov	r2, r8
 8009006:	464b      	mov	r3, r9
 8009008:	ec51 0b19 	vmov	r0, r1, d9
 800900c:	f7f7 f94e 	bl	80002ac <__adddf3>
 8009010:	a37b      	add	r3, pc, #492	; (adr r3, 8009200 <__ieee754_pow+0xa00>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	2000      	movs	r0, #0
 8009018:	4604      	mov	r4, r0
 800901a:	460d      	mov	r5, r1
 800901c:	f7f7 fafc 	bl	8000618 <__aeabi_dmul>
 8009020:	ec53 2b19 	vmov	r2, r3, d9
 8009024:	4606      	mov	r6, r0
 8009026:	460f      	mov	r7, r1
 8009028:	4620      	mov	r0, r4
 800902a:	4629      	mov	r1, r5
 800902c:	f7f7 f93c 	bl	80002a8 <__aeabi_dsub>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4640      	mov	r0, r8
 8009036:	4649      	mov	r1, r9
 8009038:	f7f7 f936 	bl	80002a8 <__aeabi_dsub>
 800903c:	a372      	add	r3, pc, #456	; (adr r3, 8009208 <__ieee754_pow+0xa08>)
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	f7f7 fae9 	bl	8000618 <__aeabi_dmul>
 8009046:	a372      	add	r3, pc, #456	; (adr r3, 8009210 <__ieee754_pow+0xa10>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	4680      	mov	r8, r0
 800904e:	4689      	mov	r9, r1
 8009050:	4620      	mov	r0, r4
 8009052:	4629      	mov	r1, r5
 8009054:	f7f7 fae0 	bl	8000618 <__aeabi_dmul>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4640      	mov	r0, r8
 800905e:	4649      	mov	r1, r9
 8009060:	f7f7 f924 	bl	80002ac <__adddf3>
 8009064:	4604      	mov	r4, r0
 8009066:	460d      	mov	r5, r1
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	4630      	mov	r0, r6
 800906e:	4639      	mov	r1, r7
 8009070:	f7f7 f91c 	bl	80002ac <__adddf3>
 8009074:	4632      	mov	r2, r6
 8009076:	463b      	mov	r3, r7
 8009078:	4680      	mov	r8, r0
 800907a:	4689      	mov	r9, r1
 800907c:	f7f7 f914 	bl	80002a8 <__aeabi_dsub>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4620      	mov	r0, r4
 8009086:	4629      	mov	r1, r5
 8009088:	f7f7 f90e 	bl	80002a8 <__aeabi_dsub>
 800908c:	4642      	mov	r2, r8
 800908e:	4606      	mov	r6, r0
 8009090:	460f      	mov	r7, r1
 8009092:	464b      	mov	r3, r9
 8009094:	4640      	mov	r0, r8
 8009096:	4649      	mov	r1, r9
 8009098:	f7f7 fabe 	bl	8000618 <__aeabi_dmul>
 800909c:	a35e      	add	r3, pc, #376	; (adr r3, 8009218 <__ieee754_pow+0xa18>)
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	4604      	mov	r4, r0
 80090a4:	460d      	mov	r5, r1
 80090a6:	f7f7 fab7 	bl	8000618 <__aeabi_dmul>
 80090aa:	a35d      	add	r3, pc, #372	; (adr r3, 8009220 <__ieee754_pow+0xa20>)
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	f7f7 f8fa 	bl	80002a8 <__aeabi_dsub>
 80090b4:	4622      	mov	r2, r4
 80090b6:	462b      	mov	r3, r5
 80090b8:	f7f7 faae 	bl	8000618 <__aeabi_dmul>
 80090bc:	a35a      	add	r3, pc, #360	; (adr r3, 8009228 <__ieee754_pow+0xa28>)
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	f7f7 f8f3 	bl	80002ac <__adddf3>
 80090c6:	4622      	mov	r2, r4
 80090c8:	462b      	mov	r3, r5
 80090ca:	f7f7 faa5 	bl	8000618 <__aeabi_dmul>
 80090ce:	a358      	add	r3, pc, #352	; (adr r3, 8009230 <__ieee754_pow+0xa30>)
 80090d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d4:	f7f7 f8e8 	bl	80002a8 <__aeabi_dsub>
 80090d8:	4622      	mov	r2, r4
 80090da:	462b      	mov	r3, r5
 80090dc:	f7f7 fa9c 	bl	8000618 <__aeabi_dmul>
 80090e0:	a355      	add	r3, pc, #340	; (adr r3, 8009238 <__ieee754_pow+0xa38>)
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f7f7 f8e1 	bl	80002ac <__adddf3>
 80090ea:	4622      	mov	r2, r4
 80090ec:	462b      	mov	r3, r5
 80090ee:	f7f7 fa93 	bl	8000618 <__aeabi_dmul>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4640      	mov	r0, r8
 80090f8:	4649      	mov	r1, r9
 80090fa:	f7f7 f8d5 	bl	80002a8 <__aeabi_dsub>
 80090fe:	4604      	mov	r4, r0
 8009100:	460d      	mov	r5, r1
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	4640      	mov	r0, r8
 8009108:	4649      	mov	r1, r9
 800910a:	f7f7 fa85 	bl	8000618 <__aeabi_dmul>
 800910e:	2200      	movs	r2, #0
 8009110:	ec41 0b19 	vmov	d9, r0, r1
 8009114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009118:	4620      	mov	r0, r4
 800911a:	4629      	mov	r1, r5
 800911c:	f7f7 f8c4 	bl	80002a8 <__aeabi_dsub>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	ec51 0b19 	vmov	r0, r1, d9
 8009128:	f7f7 fba0 	bl	800086c <__aeabi_ddiv>
 800912c:	4632      	mov	r2, r6
 800912e:	4604      	mov	r4, r0
 8009130:	460d      	mov	r5, r1
 8009132:	463b      	mov	r3, r7
 8009134:	4640      	mov	r0, r8
 8009136:	4649      	mov	r1, r9
 8009138:	f7f7 fa6e 	bl	8000618 <__aeabi_dmul>
 800913c:	4632      	mov	r2, r6
 800913e:	463b      	mov	r3, r7
 8009140:	f7f7 f8b4 	bl	80002ac <__adddf3>
 8009144:	4602      	mov	r2, r0
 8009146:	460b      	mov	r3, r1
 8009148:	4620      	mov	r0, r4
 800914a:	4629      	mov	r1, r5
 800914c:	f7f7 f8ac 	bl	80002a8 <__aeabi_dsub>
 8009150:	4642      	mov	r2, r8
 8009152:	464b      	mov	r3, r9
 8009154:	f7f7 f8a8 	bl	80002a8 <__aeabi_dsub>
 8009158:	460b      	mov	r3, r1
 800915a:	4602      	mov	r2, r0
 800915c:	493a      	ldr	r1, [pc, #232]	; (8009248 <__ieee754_pow+0xa48>)
 800915e:	2000      	movs	r0, #0
 8009160:	f7f7 f8a2 	bl	80002a8 <__aeabi_dsub>
 8009164:	ec41 0b10 	vmov	d0, r0, r1
 8009168:	ee10 3a90 	vmov	r3, s1
 800916c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009174:	da2b      	bge.n	80091ce <__ieee754_pow+0x9ce>
 8009176:	4650      	mov	r0, sl
 8009178:	f001 f8ce 	bl	800a318 <scalbn>
 800917c:	ec51 0b10 	vmov	r0, r1, d0
 8009180:	ec53 2b18 	vmov	r2, r3, d8
 8009184:	f7ff bbed 	b.w	8008962 <__ieee754_pow+0x162>
 8009188:	4b30      	ldr	r3, [pc, #192]	; (800924c <__ieee754_pow+0xa4c>)
 800918a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800918e:	429e      	cmp	r6, r3
 8009190:	f77f af0c 	ble.w	8008fac <__ieee754_pow+0x7ac>
 8009194:	4b2e      	ldr	r3, [pc, #184]	; (8009250 <__ieee754_pow+0xa50>)
 8009196:	440b      	add	r3, r1
 8009198:	4303      	orrs	r3, r0
 800919a:	d009      	beq.n	80091b0 <__ieee754_pow+0x9b0>
 800919c:	ec51 0b18 	vmov	r0, r1, d8
 80091a0:	2200      	movs	r2, #0
 80091a2:	2300      	movs	r3, #0
 80091a4:	f7f7 fcaa 	bl	8000afc <__aeabi_dcmplt>
 80091a8:	3800      	subs	r0, #0
 80091aa:	bf18      	it	ne
 80091ac:	2001      	movne	r0, #1
 80091ae:	e447      	b.n	8008a40 <__ieee754_pow+0x240>
 80091b0:	4622      	mov	r2, r4
 80091b2:	462b      	mov	r3, r5
 80091b4:	f7f7 f878 	bl	80002a8 <__aeabi_dsub>
 80091b8:	4642      	mov	r2, r8
 80091ba:	464b      	mov	r3, r9
 80091bc:	f7f7 fcb2 	bl	8000b24 <__aeabi_dcmpge>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	f43f aef3 	beq.w	8008fac <__ieee754_pow+0x7ac>
 80091c6:	e7e9      	b.n	800919c <__ieee754_pow+0x99c>
 80091c8:	f04f 0a00 	mov.w	sl, #0
 80091cc:	e71a      	b.n	8009004 <__ieee754_pow+0x804>
 80091ce:	ec51 0b10 	vmov	r0, r1, d0
 80091d2:	4619      	mov	r1, r3
 80091d4:	e7d4      	b.n	8009180 <__ieee754_pow+0x980>
 80091d6:	491c      	ldr	r1, [pc, #112]	; (8009248 <__ieee754_pow+0xa48>)
 80091d8:	2000      	movs	r0, #0
 80091da:	f7ff bb30 	b.w	800883e <__ieee754_pow+0x3e>
 80091de:	2000      	movs	r0, #0
 80091e0:	2100      	movs	r1, #0
 80091e2:	f7ff bb2c 	b.w	800883e <__ieee754_pow+0x3e>
 80091e6:	4630      	mov	r0, r6
 80091e8:	4639      	mov	r1, r7
 80091ea:	f7ff bb28 	b.w	800883e <__ieee754_pow+0x3e>
 80091ee:	9204      	str	r2, [sp, #16]
 80091f0:	f7ff bb7a 	b.w	80088e8 <__ieee754_pow+0xe8>
 80091f4:	2300      	movs	r3, #0
 80091f6:	f7ff bb64 	b.w	80088c2 <__ieee754_pow+0xc2>
 80091fa:	bf00      	nop
 80091fc:	f3af 8000 	nop.w
 8009200:	00000000 	.word	0x00000000
 8009204:	3fe62e43 	.word	0x3fe62e43
 8009208:	fefa39ef 	.word	0xfefa39ef
 800920c:	3fe62e42 	.word	0x3fe62e42
 8009210:	0ca86c39 	.word	0x0ca86c39
 8009214:	be205c61 	.word	0xbe205c61
 8009218:	72bea4d0 	.word	0x72bea4d0
 800921c:	3e663769 	.word	0x3e663769
 8009220:	c5d26bf1 	.word	0xc5d26bf1
 8009224:	3ebbbd41 	.word	0x3ebbbd41
 8009228:	af25de2c 	.word	0xaf25de2c
 800922c:	3f11566a 	.word	0x3f11566a
 8009230:	16bebd93 	.word	0x16bebd93
 8009234:	3f66c16c 	.word	0x3f66c16c
 8009238:	5555553e 	.word	0x5555553e
 800923c:	3fc55555 	.word	0x3fc55555
 8009240:	3fe00000 	.word	0x3fe00000
 8009244:	000fffff 	.word	0x000fffff
 8009248:	3ff00000 	.word	0x3ff00000
 800924c:	4090cbff 	.word	0x4090cbff
 8009250:	3f6f3400 	.word	0x3f6f3400
 8009254:	652b82fe 	.word	0x652b82fe
 8009258:	3c971547 	.word	0x3c971547
 800925c:	00000000 	.word	0x00000000

08009260 <__ieee754_rem_pio2>:
 8009260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	ed2d 8b02 	vpush	{d8}
 8009268:	ec55 4b10 	vmov	r4, r5, d0
 800926c:	4bca      	ldr	r3, [pc, #808]	; (8009598 <__ieee754_rem_pio2+0x338>)
 800926e:	b08b      	sub	sp, #44	; 0x2c
 8009270:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009274:	4598      	cmp	r8, r3
 8009276:	4682      	mov	sl, r0
 8009278:	9502      	str	r5, [sp, #8]
 800927a:	dc08      	bgt.n	800928e <__ieee754_rem_pio2+0x2e>
 800927c:	2200      	movs	r2, #0
 800927e:	2300      	movs	r3, #0
 8009280:	ed80 0b00 	vstr	d0, [r0]
 8009284:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009288:	f04f 0b00 	mov.w	fp, #0
 800928c:	e028      	b.n	80092e0 <__ieee754_rem_pio2+0x80>
 800928e:	4bc3      	ldr	r3, [pc, #780]	; (800959c <__ieee754_rem_pio2+0x33c>)
 8009290:	4598      	cmp	r8, r3
 8009292:	dc78      	bgt.n	8009386 <__ieee754_rem_pio2+0x126>
 8009294:	9b02      	ldr	r3, [sp, #8]
 8009296:	4ec2      	ldr	r6, [pc, #776]	; (80095a0 <__ieee754_rem_pio2+0x340>)
 8009298:	2b00      	cmp	r3, #0
 800929a:	ee10 0a10 	vmov	r0, s0
 800929e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009560 <__ieee754_rem_pio2+0x300>)
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	4629      	mov	r1, r5
 80092a6:	dd39      	ble.n	800931c <__ieee754_rem_pio2+0xbc>
 80092a8:	f7f6 fffe 	bl	80002a8 <__aeabi_dsub>
 80092ac:	45b0      	cmp	r8, r6
 80092ae:	4604      	mov	r4, r0
 80092b0:	460d      	mov	r5, r1
 80092b2:	d01b      	beq.n	80092ec <__ieee754_rem_pio2+0x8c>
 80092b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8009568 <__ieee754_rem_pio2+0x308>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	f7f6 fff5 	bl	80002a8 <__aeabi_dsub>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	e9ca 2300 	strd	r2, r3, [sl]
 80092c6:	4620      	mov	r0, r4
 80092c8:	4629      	mov	r1, r5
 80092ca:	f7f6 ffed 	bl	80002a8 <__aeabi_dsub>
 80092ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8009568 <__ieee754_rem_pio2+0x308>)
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	f7f6 ffe8 	bl	80002a8 <__aeabi_dsub>
 80092d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80092dc:	f04f 0b01 	mov.w	fp, #1
 80092e0:	4658      	mov	r0, fp
 80092e2:	b00b      	add	sp, #44	; 0x2c
 80092e4:	ecbd 8b02 	vpop	{d8}
 80092e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8009570 <__ieee754_rem_pio2+0x310>)
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	f7f6 ffd9 	bl	80002a8 <__aeabi_dsub>
 80092f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8009578 <__ieee754_rem_pio2+0x318>)
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	4604      	mov	r4, r0
 80092fe:	460d      	mov	r5, r1
 8009300:	f7f6 ffd2 	bl	80002a8 <__aeabi_dsub>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	e9ca 2300 	strd	r2, r3, [sl]
 800930c:	4620      	mov	r0, r4
 800930e:	4629      	mov	r1, r5
 8009310:	f7f6 ffca 	bl	80002a8 <__aeabi_dsub>
 8009314:	a398      	add	r3, pc, #608	; (adr r3, 8009578 <__ieee754_rem_pio2+0x318>)
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	e7db      	b.n	80092d4 <__ieee754_rem_pio2+0x74>
 800931c:	f7f6 ffc6 	bl	80002ac <__adddf3>
 8009320:	45b0      	cmp	r8, r6
 8009322:	4604      	mov	r4, r0
 8009324:	460d      	mov	r5, r1
 8009326:	d016      	beq.n	8009356 <__ieee754_rem_pio2+0xf6>
 8009328:	a38f      	add	r3, pc, #572	; (adr r3, 8009568 <__ieee754_rem_pio2+0x308>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f7f6 ffbd 	bl	80002ac <__adddf3>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	e9ca 2300 	strd	r2, r3, [sl]
 800933a:	4620      	mov	r0, r4
 800933c:	4629      	mov	r1, r5
 800933e:	f7f6 ffb3 	bl	80002a8 <__aeabi_dsub>
 8009342:	a389      	add	r3, pc, #548	; (adr r3, 8009568 <__ieee754_rem_pio2+0x308>)
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	f7f6 ffb0 	bl	80002ac <__adddf3>
 800934c:	f04f 3bff 	mov.w	fp, #4294967295
 8009350:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009354:	e7c4      	b.n	80092e0 <__ieee754_rem_pio2+0x80>
 8009356:	a386      	add	r3, pc, #536	; (adr r3, 8009570 <__ieee754_rem_pio2+0x310>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f7f6 ffa6 	bl	80002ac <__adddf3>
 8009360:	a385      	add	r3, pc, #532	; (adr r3, 8009578 <__ieee754_rem_pio2+0x318>)
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	4604      	mov	r4, r0
 8009368:	460d      	mov	r5, r1
 800936a:	f7f6 ff9f 	bl	80002ac <__adddf3>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	e9ca 2300 	strd	r2, r3, [sl]
 8009376:	4620      	mov	r0, r4
 8009378:	4629      	mov	r1, r5
 800937a:	f7f6 ff95 	bl	80002a8 <__aeabi_dsub>
 800937e:	a37e      	add	r3, pc, #504	; (adr r3, 8009578 <__ieee754_rem_pio2+0x318>)
 8009380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009384:	e7e0      	b.n	8009348 <__ieee754_rem_pio2+0xe8>
 8009386:	4b87      	ldr	r3, [pc, #540]	; (80095a4 <__ieee754_rem_pio2+0x344>)
 8009388:	4598      	cmp	r8, r3
 800938a:	f300 80d9 	bgt.w	8009540 <__ieee754_rem_pio2+0x2e0>
 800938e:	f000 ff2d 	bl	800a1ec <fabs>
 8009392:	ec55 4b10 	vmov	r4, r5, d0
 8009396:	ee10 0a10 	vmov	r0, s0
 800939a:	a379      	add	r3, pc, #484	; (adr r3, 8009580 <__ieee754_rem_pio2+0x320>)
 800939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a0:	4629      	mov	r1, r5
 80093a2:	f7f7 f939 	bl	8000618 <__aeabi_dmul>
 80093a6:	4b80      	ldr	r3, [pc, #512]	; (80095a8 <__ieee754_rem_pio2+0x348>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	f7f6 ff7f 	bl	80002ac <__adddf3>
 80093ae:	f7f7 fbe3 	bl	8000b78 <__aeabi_d2iz>
 80093b2:	4683      	mov	fp, r0
 80093b4:	f7f7 f8c6 	bl	8000544 <__aeabi_i2d>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	ec43 2b18 	vmov	d8, r2, r3
 80093c0:	a367      	add	r3, pc, #412	; (adr r3, 8009560 <__ieee754_rem_pio2+0x300>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f7 f927 	bl	8000618 <__aeabi_dmul>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4620      	mov	r0, r4
 80093d0:	4629      	mov	r1, r5
 80093d2:	f7f6 ff69 	bl	80002a8 <__aeabi_dsub>
 80093d6:	a364      	add	r3, pc, #400	; (adr r3, 8009568 <__ieee754_rem_pio2+0x308>)
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	4606      	mov	r6, r0
 80093de:	460f      	mov	r7, r1
 80093e0:	ec51 0b18 	vmov	r0, r1, d8
 80093e4:	f7f7 f918 	bl	8000618 <__aeabi_dmul>
 80093e8:	f1bb 0f1f 	cmp.w	fp, #31
 80093ec:	4604      	mov	r4, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	dc0d      	bgt.n	800940e <__ieee754_rem_pio2+0x1ae>
 80093f2:	4b6e      	ldr	r3, [pc, #440]	; (80095ac <__ieee754_rem_pio2+0x34c>)
 80093f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80093f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fc:	4543      	cmp	r3, r8
 80093fe:	d006      	beq.n	800940e <__ieee754_rem_pio2+0x1ae>
 8009400:	4622      	mov	r2, r4
 8009402:	462b      	mov	r3, r5
 8009404:	4630      	mov	r0, r6
 8009406:	4639      	mov	r1, r7
 8009408:	f7f6 ff4e 	bl	80002a8 <__aeabi_dsub>
 800940c:	e00f      	b.n	800942e <__ieee754_rem_pio2+0x1ce>
 800940e:	462b      	mov	r3, r5
 8009410:	4622      	mov	r2, r4
 8009412:	4630      	mov	r0, r6
 8009414:	4639      	mov	r1, r7
 8009416:	f7f6 ff47 	bl	80002a8 <__aeabi_dsub>
 800941a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800941e:	9303      	str	r3, [sp, #12]
 8009420:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009424:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009428:	f1b8 0f10 	cmp.w	r8, #16
 800942c:	dc02      	bgt.n	8009434 <__ieee754_rem_pio2+0x1d4>
 800942e:	e9ca 0100 	strd	r0, r1, [sl]
 8009432:	e039      	b.n	80094a8 <__ieee754_rem_pio2+0x248>
 8009434:	a34e      	add	r3, pc, #312	; (adr r3, 8009570 <__ieee754_rem_pio2+0x310>)
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	ec51 0b18 	vmov	r0, r1, d8
 800943e:	f7f7 f8eb 	bl	8000618 <__aeabi_dmul>
 8009442:	4604      	mov	r4, r0
 8009444:	460d      	mov	r5, r1
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4630      	mov	r0, r6
 800944c:	4639      	mov	r1, r7
 800944e:	f7f6 ff2b 	bl	80002a8 <__aeabi_dsub>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4680      	mov	r8, r0
 8009458:	4689      	mov	r9, r1
 800945a:	4630      	mov	r0, r6
 800945c:	4639      	mov	r1, r7
 800945e:	f7f6 ff23 	bl	80002a8 <__aeabi_dsub>
 8009462:	4622      	mov	r2, r4
 8009464:	462b      	mov	r3, r5
 8009466:	f7f6 ff1f 	bl	80002a8 <__aeabi_dsub>
 800946a:	a343      	add	r3, pc, #268	; (adr r3, 8009578 <__ieee754_rem_pio2+0x318>)
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	4604      	mov	r4, r0
 8009472:	460d      	mov	r5, r1
 8009474:	ec51 0b18 	vmov	r0, r1, d8
 8009478:	f7f7 f8ce 	bl	8000618 <__aeabi_dmul>
 800947c:	4622      	mov	r2, r4
 800947e:	462b      	mov	r3, r5
 8009480:	f7f6 ff12 	bl	80002a8 <__aeabi_dsub>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	4604      	mov	r4, r0
 800948a:	460d      	mov	r5, r1
 800948c:	4640      	mov	r0, r8
 800948e:	4649      	mov	r1, r9
 8009490:	f7f6 ff0a 	bl	80002a8 <__aeabi_dsub>
 8009494:	9a03      	ldr	r2, [sp, #12]
 8009496:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	2b31      	cmp	r3, #49	; 0x31
 800949e:	dc24      	bgt.n	80094ea <__ieee754_rem_pio2+0x28a>
 80094a0:	e9ca 0100 	strd	r0, r1, [sl]
 80094a4:	4646      	mov	r6, r8
 80094a6:	464f      	mov	r7, r9
 80094a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80094ac:	4630      	mov	r0, r6
 80094ae:	4642      	mov	r2, r8
 80094b0:	464b      	mov	r3, r9
 80094b2:	4639      	mov	r1, r7
 80094b4:	f7f6 fef8 	bl	80002a8 <__aeabi_dsub>
 80094b8:	462b      	mov	r3, r5
 80094ba:	4622      	mov	r2, r4
 80094bc:	f7f6 fef4 	bl	80002a8 <__aeabi_dsub>
 80094c0:	9b02      	ldr	r3, [sp, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80094c8:	f6bf af0a 	bge.w	80092e0 <__ieee754_rem_pio2+0x80>
 80094cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80094d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094d8:	f8ca 8000 	str.w	r8, [sl]
 80094dc:	f8ca 0008 	str.w	r0, [sl, #8]
 80094e0:	f8ca 300c 	str.w	r3, [sl, #12]
 80094e4:	f1cb 0b00 	rsb	fp, fp, #0
 80094e8:	e6fa      	b.n	80092e0 <__ieee754_rem_pio2+0x80>
 80094ea:	a327      	add	r3, pc, #156	; (adr r3, 8009588 <__ieee754_rem_pio2+0x328>)
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	ec51 0b18 	vmov	r0, r1, d8
 80094f4:	f7f7 f890 	bl	8000618 <__aeabi_dmul>
 80094f8:	4604      	mov	r4, r0
 80094fa:	460d      	mov	r5, r1
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4640      	mov	r0, r8
 8009502:	4649      	mov	r1, r9
 8009504:	f7f6 fed0 	bl	80002a8 <__aeabi_dsub>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4606      	mov	r6, r0
 800950e:	460f      	mov	r7, r1
 8009510:	4640      	mov	r0, r8
 8009512:	4649      	mov	r1, r9
 8009514:	f7f6 fec8 	bl	80002a8 <__aeabi_dsub>
 8009518:	4622      	mov	r2, r4
 800951a:	462b      	mov	r3, r5
 800951c:	f7f6 fec4 	bl	80002a8 <__aeabi_dsub>
 8009520:	a31b      	add	r3, pc, #108	; (adr r3, 8009590 <__ieee754_rem_pio2+0x330>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	4604      	mov	r4, r0
 8009528:	460d      	mov	r5, r1
 800952a:	ec51 0b18 	vmov	r0, r1, d8
 800952e:	f7f7 f873 	bl	8000618 <__aeabi_dmul>
 8009532:	4622      	mov	r2, r4
 8009534:	462b      	mov	r3, r5
 8009536:	f7f6 feb7 	bl	80002a8 <__aeabi_dsub>
 800953a:	4604      	mov	r4, r0
 800953c:	460d      	mov	r5, r1
 800953e:	e75f      	b.n	8009400 <__ieee754_rem_pio2+0x1a0>
 8009540:	4b1b      	ldr	r3, [pc, #108]	; (80095b0 <__ieee754_rem_pio2+0x350>)
 8009542:	4598      	cmp	r8, r3
 8009544:	dd36      	ble.n	80095b4 <__ieee754_rem_pio2+0x354>
 8009546:	ee10 2a10 	vmov	r2, s0
 800954a:	462b      	mov	r3, r5
 800954c:	4620      	mov	r0, r4
 800954e:	4629      	mov	r1, r5
 8009550:	f7f6 feaa 	bl	80002a8 <__aeabi_dsub>
 8009554:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009558:	e9ca 0100 	strd	r0, r1, [sl]
 800955c:	e694      	b.n	8009288 <__ieee754_rem_pio2+0x28>
 800955e:	bf00      	nop
 8009560:	54400000 	.word	0x54400000
 8009564:	3ff921fb 	.word	0x3ff921fb
 8009568:	1a626331 	.word	0x1a626331
 800956c:	3dd0b461 	.word	0x3dd0b461
 8009570:	1a600000 	.word	0x1a600000
 8009574:	3dd0b461 	.word	0x3dd0b461
 8009578:	2e037073 	.word	0x2e037073
 800957c:	3ba3198a 	.word	0x3ba3198a
 8009580:	6dc9c883 	.word	0x6dc9c883
 8009584:	3fe45f30 	.word	0x3fe45f30
 8009588:	2e000000 	.word	0x2e000000
 800958c:	3ba3198a 	.word	0x3ba3198a
 8009590:	252049c1 	.word	0x252049c1
 8009594:	397b839a 	.word	0x397b839a
 8009598:	3fe921fb 	.word	0x3fe921fb
 800959c:	4002d97b 	.word	0x4002d97b
 80095a0:	3ff921fb 	.word	0x3ff921fb
 80095a4:	413921fb 	.word	0x413921fb
 80095a8:	3fe00000 	.word	0x3fe00000
 80095ac:	0800a728 	.word	0x0800a728
 80095b0:	7fefffff 	.word	0x7fefffff
 80095b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80095b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80095bc:	ee10 0a10 	vmov	r0, s0
 80095c0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80095c4:	ee10 6a10 	vmov	r6, s0
 80095c8:	460f      	mov	r7, r1
 80095ca:	f7f7 fad5 	bl	8000b78 <__aeabi_d2iz>
 80095ce:	f7f6 ffb9 	bl	8000544 <__aeabi_i2d>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4630      	mov	r0, r6
 80095d8:	4639      	mov	r1, r7
 80095da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095de:	f7f6 fe63 	bl	80002a8 <__aeabi_dsub>
 80095e2:	4b23      	ldr	r3, [pc, #140]	; (8009670 <__ieee754_rem_pio2+0x410>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	f7f7 f817 	bl	8000618 <__aeabi_dmul>
 80095ea:	460f      	mov	r7, r1
 80095ec:	4606      	mov	r6, r0
 80095ee:	f7f7 fac3 	bl	8000b78 <__aeabi_d2iz>
 80095f2:	f7f6 ffa7 	bl	8000544 <__aeabi_i2d>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	4630      	mov	r0, r6
 80095fc:	4639      	mov	r1, r7
 80095fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009602:	f7f6 fe51 	bl	80002a8 <__aeabi_dsub>
 8009606:	4b1a      	ldr	r3, [pc, #104]	; (8009670 <__ieee754_rem_pio2+0x410>)
 8009608:	2200      	movs	r2, #0
 800960a:	f7f7 f805 	bl	8000618 <__aeabi_dmul>
 800960e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009612:	ad04      	add	r5, sp, #16
 8009614:	f04f 0803 	mov.w	r8, #3
 8009618:	46a9      	mov	r9, r5
 800961a:	2600      	movs	r6, #0
 800961c:	2700      	movs	r7, #0
 800961e:	4632      	mov	r2, r6
 8009620:	463b      	mov	r3, r7
 8009622:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009626:	46c3      	mov	fp, r8
 8009628:	3d08      	subs	r5, #8
 800962a:	f108 38ff 	add.w	r8, r8, #4294967295
 800962e:	f7f7 fa5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009632:	2800      	cmp	r0, #0
 8009634:	d1f3      	bne.n	800961e <__ieee754_rem_pio2+0x3be>
 8009636:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <__ieee754_rem_pio2+0x414>)
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	2302      	movs	r3, #2
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	4622      	mov	r2, r4
 8009640:	465b      	mov	r3, fp
 8009642:	4651      	mov	r1, sl
 8009644:	4648      	mov	r0, r9
 8009646:	f000 f993 	bl	8009970 <__kernel_rem_pio2>
 800964a:	9b02      	ldr	r3, [sp, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	4683      	mov	fp, r0
 8009650:	f6bf ae46 	bge.w	80092e0 <__ieee754_rem_pio2+0x80>
 8009654:	e9da 2100 	ldrd	r2, r1, [sl]
 8009658:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800965c:	e9ca 2300 	strd	r2, r3, [sl]
 8009660:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009664:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009668:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800966c:	e73a      	b.n	80094e4 <__ieee754_rem_pio2+0x284>
 800966e:	bf00      	nop
 8009670:	41700000 	.word	0x41700000
 8009674:	0800a7a8 	.word	0x0800a7a8

08009678 <__ieee754_sqrt>:
 8009678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967c:	ec55 4b10 	vmov	r4, r5, d0
 8009680:	4e55      	ldr	r6, [pc, #340]	; (80097d8 <__ieee754_sqrt+0x160>)
 8009682:	43ae      	bics	r6, r5
 8009684:	ee10 0a10 	vmov	r0, s0
 8009688:	ee10 3a10 	vmov	r3, s0
 800968c:	462a      	mov	r2, r5
 800968e:	4629      	mov	r1, r5
 8009690:	d110      	bne.n	80096b4 <__ieee754_sqrt+0x3c>
 8009692:	ee10 2a10 	vmov	r2, s0
 8009696:	462b      	mov	r3, r5
 8009698:	f7f6 ffbe 	bl	8000618 <__aeabi_dmul>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4620      	mov	r0, r4
 80096a2:	4629      	mov	r1, r5
 80096a4:	f7f6 fe02 	bl	80002ac <__adddf3>
 80096a8:	4604      	mov	r4, r0
 80096aa:	460d      	mov	r5, r1
 80096ac:	ec45 4b10 	vmov	d0, r4, r5
 80096b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b4:	2d00      	cmp	r5, #0
 80096b6:	dc10      	bgt.n	80096da <__ieee754_sqrt+0x62>
 80096b8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80096bc:	4330      	orrs	r0, r6
 80096be:	d0f5      	beq.n	80096ac <__ieee754_sqrt+0x34>
 80096c0:	b15d      	cbz	r5, 80096da <__ieee754_sqrt+0x62>
 80096c2:	ee10 2a10 	vmov	r2, s0
 80096c6:	462b      	mov	r3, r5
 80096c8:	ee10 0a10 	vmov	r0, s0
 80096cc:	f7f6 fdec 	bl	80002a8 <__aeabi_dsub>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	f7f7 f8ca 	bl	800086c <__aeabi_ddiv>
 80096d8:	e7e6      	b.n	80096a8 <__ieee754_sqrt+0x30>
 80096da:	1512      	asrs	r2, r2, #20
 80096dc:	d074      	beq.n	80097c8 <__ieee754_sqrt+0x150>
 80096de:	07d4      	lsls	r4, r2, #31
 80096e0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80096e4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80096e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80096ec:	bf5e      	ittt	pl
 80096ee:	0fda      	lsrpl	r2, r3, #31
 80096f0:	005b      	lslpl	r3, r3, #1
 80096f2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80096f6:	2400      	movs	r4, #0
 80096f8:	0fda      	lsrs	r2, r3, #31
 80096fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80096fe:	107f      	asrs	r7, r7, #1
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	2516      	movs	r5, #22
 8009704:	4620      	mov	r0, r4
 8009706:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800970a:	1886      	adds	r6, r0, r2
 800970c:	428e      	cmp	r6, r1
 800970e:	bfde      	ittt	le
 8009710:	1b89      	suble	r1, r1, r6
 8009712:	18b0      	addle	r0, r6, r2
 8009714:	18a4      	addle	r4, r4, r2
 8009716:	0049      	lsls	r1, r1, #1
 8009718:	3d01      	subs	r5, #1
 800971a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800971e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009722:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009726:	d1f0      	bne.n	800970a <__ieee754_sqrt+0x92>
 8009728:	462a      	mov	r2, r5
 800972a:	f04f 0e20 	mov.w	lr, #32
 800972e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009732:	4281      	cmp	r1, r0
 8009734:	eb06 0c05 	add.w	ip, r6, r5
 8009738:	dc02      	bgt.n	8009740 <__ieee754_sqrt+0xc8>
 800973a:	d113      	bne.n	8009764 <__ieee754_sqrt+0xec>
 800973c:	459c      	cmp	ip, r3
 800973e:	d811      	bhi.n	8009764 <__ieee754_sqrt+0xec>
 8009740:	f1bc 0f00 	cmp.w	ip, #0
 8009744:	eb0c 0506 	add.w	r5, ip, r6
 8009748:	da43      	bge.n	80097d2 <__ieee754_sqrt+0x15a>
 800974a:	2d00      	cmp	r5, #0
 800974c:	db41      	blt.n	80097d2 <__ieee754_sqrt+0x15a>
 800974e:	f100 0801 	add.w	r8, r0, #1
 8009752:	1a09      	subs	r1, r1, r0
 8009754:	459c      	cmp	ip, r3
 8009756:	bf88      	it	hi
 8009758:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800975c:	eba3 030c 	sub.w	r3, r3, ip
 8009760:	4432      	add	r2, r6
 8009762:	4640      	mov	r0, r8
 8009764:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009768:	f1be 0e01 	subs.w	lr, lr, #1
 800976c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009770:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009774:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009778:	d1db      	bne.n	8009732 <__ieee754_sqrt+0xba>
 800977a:	430b      	orrs	r3, r1
 800977c:	d006      	beq.n	800978c <__ieee754_sqrt+0x114>
 800977e:	1c50      	adds	r0, r2, #1
 8009780:	bf13      	iteet	ne
 8009782:	3201      	addne	r2, #1
 8009784:	3401      	addeq	r4, #1
 8009786:	4672      	moveq	r2, lr
 8009788:	f022 0201 	bicne.w	r2, r2, #1
 800978c:	1063      	asrs	r3, r4, #1
 800978e:	0852      	lsrs	r2, r2, #1
 8009790:	07e1      	lsls	r1, r4, #31
 8009792:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009796:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800979a:	bf48      	it	mi
 800979c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80097a0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80097a4:	4614      	mov	r4, r2
 80097a6:	e781      	b.n	80096ac <__ieee754_sqrt+0x34>
 80097a8:	0ad9      	lsrs	r1, r3, #11
 80097aa:	3815      	subs	r0, #21
 80097ac:	055b      	lsls	r3, r3, #21
 80097ae:	2900      	cmp	r1, #0
 80097b0:	d0fa      	beq.n	80097a8 <__ieee754_sqrt+0x130>
 80097b2:	02cd      	lsls	r5, r1, #11
 80097b4:	d50a      	bpl.n	80097cc <__ieee754_sqrt+0x154>
 80097b6:	f1c2 0420 	rsb	r4, r2, #32
 80097ba:	fa23 f404 	lsr.w	r4, r3, r4
 80097be:	1e55      	subs	r5, r2, #1
 80097c0:	4093      	lsls	r3, r2
 80097c2:	4321      	orrs	r1, r4
 80097c4:	1b42      	subs	r2, r0, r5
 80097c6:	e78a      	b.n	80096de <__ieee754_sqrt+0x66>
 80097c8:	4610      	mov	r0, r2
 80097ca:	e7f0      	b.n	80097ae <__ieee754_sqrt+0x136>
 80097cc:	0049      	lsls	r1, r1, #1
 80097ce:	3201      	adds	r2, #1
 80097d0:	e7ef      	b.n	80097b2 <__ieee754_sqrt+0x13a>
 80097d2:	4680      	mov	r8, r0
 80097d4:	e7bd      	b.n	8009752 <__ieee754_sqrt+0xda>
 80097d6:	bf00      	nop
 80097d8:	7ff00000 	.word	0x7ff00000
 80097dc:	00000000 	.word	0x00000000

080097e0 <__kernel_cos>:
 80097e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	ec57 6b10 	vmov	r6, r7, d0
 80097e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80097ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80097f0:	ed8d 1b00 	vstr	d1, [sp]
 80097f4:	da07      	bge.n	8009806 <__kernel_cos+0x26>
 80097f6:	ee10 0a10 	vmov	r0, s0
 80097fa:	4639      	mov	r1, r7
 80097fc:	f7f7 f9bc 	bl	8000b78 <__aeabi_d2iz>
 8009800:	2800      	cmp	r0, #0
 8009802:	f000 8088 	beq.w	8009916 <__kernel_cos+0x136>
 8009806:	4632      	mov	r2, r6
 8009808:	463b      	mov	r3, r7
 800980a:	4630      	mov	r0, r6
 800980c:	4639      	mov	r1, r7
 800980e:	f7f6 ff03 	bl	8000618 <__aeabi_dmul>
 8009812:	4b51      	ldr	r3, [pc, #324]	; (8009958 <__kernel_cos+0x178>)
 8009814:	2200      	movs	r2, #0
 8009816:	4604      	mov	r4, r0
 8009818:	460d      	mov	r5, r1
 800981a:	f7f6 fefd 	bl	8000618 <__aeabi_dmul>
 800981e:	a340      	add	r3, pc, #256	; (adr r3, 8009920 <__kernel_cos+0x140>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	4682      	mov	sl, r0
 8009826:	468b      	mov	fp, r1
 8009828:	4620      	mov	r0, r4
 800982a:	4629      	mov	r1, r5
 800982c:	f7f6 fef4 	bl	8000618 <__aeabi_dmul>
 8009830:	a33d      	add	r3, pc, #244	; (adr r3, 8009928 <__kernel_cos+0x148>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7f6 fd39 	bl	80002ac <__adddf3>
 800983a:	4622      	mov	r2, r4
 800983c:	462b      	mov	r3, r5
 800983e:	f7f6 feeb 	bl	8000618 <__aeabi_dmul>
 8009842:	a33b      	add	r3, pc, #236	; (adr r3, 8009930 <__kernel_cos+0x150>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fd2e 	bl	80002a8 <__aeabi_dsub>
 800984c:	4622      	mov	r2, r4
 800984e:	462b      	mov	r3, r5
 8009850:	f7f6 fee2 	bl	8000618 <__aeabi_dmul>
 8009854:	a338      	add	r3, pc, #224	; (adr r3, 8009938 <__kernel_cos+0x158>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f7f6 fd27 	bl	80002ac <__adddf3>
 800985e:	4622      	mov	r2, r4
 8009860:	462b      	mov	r3, r5
 8009862:	f7f6 fed9 	bl	8000618 <__aeabi_dmul>
 8009866:	a336      	add	r3, pc, #216	; (adr r3, 8009940 <__kernel_cos+0x160>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f7f6 fd1c 	bl	80002a8 <__aeabi_dsub>
 8009870:	4622      	mov	r2, r4
 8009872:	462b      	mov	r3, r5
 8009874:	f7f6 fed0 	bl	8000618 <__aeabi_dmul>
 8009878:	a333      	add	r3, pc, #204	; (adr r3, 8009948 <__kernel_cos+0x168>)
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	f7f6 fd15 	bl	80002ac <__adddf3>
 8009882:	4622      	mov	r2, r4
 8009884:	462b      	mov	r3, r5
 8009886:	f7f6 fec7 	bl	8000618 <__aeabi_dmul>
 800988a:	4622      	mov	r2, r4
 800988c:	462b      	mov	r3, r5
 800988e:	f7f6 fec3 	bl	8000618 <__aeabi_dmul>
 8009892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009896:	4604      	mov	r4, r0
 8009898:	460d      	mov	r5, r1
 800989a:	4630      	mov	r0, r6
 800989c:	4639      	mov	r1, r7
 800989e:	f7f6 febb 	bl	8000618 <__aeabi_dmul>
 80098a2:	460b      	mov	r3, r1
 80098a4:	4602      	mov	r2, r0
 80098a6:	4629      	mov	r1, r5
 80098a8:	4620      	mov	r0, r4
 80098aa:	f7f6 fcfd 	bl	80002a8 <__aeabi_dsub>
 80098ae:	4b2b      	ldr	r3, [pc, #172]	; (800995c <__kernel_cos+0x17c>)
 80098b0:	4598      	cmp	r8, r3
 80098b2:	4606      	mov	r6, r0
 80098b4:	460f      	mov	r7, r1
 80098b6:	dc10      	bgt.n	80098da <__kernel_cos+0xfa>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	4650      	mov	r0, sl
 80098be:	4659      	mov	r1, fp
 80098c0:	f7f6 fcf2 	bl	80002a8 <__aeabi_dsub>
 80098c4:	460b      	mov	r3, r1
 80098c6:	4926      	ldr	r1, [pc, #152]	; (8009960 <__kernel_cos+0x180>)
 80098c8:	4602      	mov	r2, r0
 80098ca:	2000      	movs	r0, #0
 80098cc:	f7f6 fcec 	bl	80002a8 <__aeabi_dsub>
 80098d0:	ec41 0b10 	vmov	d0, r0, r1
 80098d4:	b003      	add	sp, #12
 80098d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098da:	4b22      	ldr	r3, [pc, #136]	; (8009964 <__kernel_cos+0x184>)
 80098dc:	4920      	ldr	r1, [pc, #128]	; (8009960 <__kernel_cos+0x180>)
 80098de:	4598      	cmp	r8, r3
 80098e0:	bfcc      	ite	gt
 80098e2:	4d21      	ldrgt	r5, [pc, #132]	; (8009968 <__kernel_cos+0x188>)
 80098e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80098e8:	2400      	movs	r4, #0
 80098ea:	4622      	mov	r2, r4
 80098ec:	462b      	mov	r3, r5
 80098ee:	2000      	movs	r0, #0
 80098f0:	f7f6 fcda 	bl	80002a8 <__aeabi_dsub>
 80098f4:	4622      	mov	r2, r4
 80098f6:	4680      	mov	r8, r0
 80098f8:	4689      	mov	r9, r1
 80098fa:	462b      	mov	r3, r5
 80098fc:	4650      	mov	r0, sl
 80098fe:	4659      	mov	r1, fp
 8009900:	f7f6 fcd2 	bl	80002a8 <__aeabi_dsub>
 8009904:	4632      	mov	r2, r6
 8009906:	463b      	mov	r3, r7
 8009908:	f7f6 fcce 	bl	80002a8 <__aeabi_dsub>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4640      	mov	r0, r8
 8009912:	4649      	mov	r1, r9
 8009914:	e7da      	b.n	80098cc <__kernel_cos+0xec>
 8009916:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009950 <__kernel_cos+0x170>
 800991a:	e7db      	b.n	80098d4 <__kernel_cos+0xf4>
 800991c:	f3af 8000 	nop.w
 8009920:	be8838d4 	.word	0xbe8838d4
 8009924:	bda8fae9 	.word	0xbda8fae9
 8009928:	bdb4b1c4 	.word	0xbdb4b1c4
 800992c:	3e21ee9e 	.word	0x3e21ee9e
 8009930:	809c52ad 	.word	0x809c52ad
 8009934:	3e927e4f 	.word	0x3e927e4f
 8009938:	19cb1590 	.word	0x19cb1590
 800993c:	3efa01a0 	.word	0x3efa01a0
 8009940:	16c15177 	.word	0x16c15177
 8009944:	3f56c16c 	.word	0x3f56c16c
 8009948:	5555554c 	.word	0x5555554c
 800994c:	3fa55555 	.word	0x3fa55555
 8009950:	00000000 	.word	0x00000000
 8009954:	3ff00000 	.word	0x3ff00000
 8009958:	3fe00000 	.word	0x3fe00000
 800995c:	3fd33332 	.word	0x3fd33332
 8009960:	3ff00000 	.word	0x3ff00000
 8009964:	3fe90000 	.word	0x3fe90000
 8009968:	3fd20000 	.word	0x3fd20000
 800996c:	00000000 	.word	0x00000000

08009970 <__kernel_rem_pio2>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	ed2d 8b02 	vpush	{d8}
 8009978:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800997c:	f112 0f14 	cmn.w	r2, #20
 8009980:	9308      	str	r3, [sp, #32]
 8009982:	9101      	str	r1, [sp, #4]
 8009984:	4bc4      	ldr	r3, [pc, #784]	; (8009c98 <__kernel_rem_pio2+0x328>)
 8009986:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009988:	900b      	str	r0, [sp, #44]	; 0x2c
 800998a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800998e:	9302      	str	r3, [sp, #8]
 8009990:	9b08      	ldr	r3, [sp, #32]
 8009992:	f103 33ff 	add.w	r3, r3, #4294967295
 8009996:	bfa8      	it	ge
 8009998:	1ed4      	subge	r4, r2, #3
 800999a:	9306      	str	r3, [sp, #24]
 800999c:	bfb2      	itee	lt
 800999e:	2400      	movlt	r4, #0
 80099a0:	2318      	movge	r3, #24
 80099a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80099a6:	f06f 0317 	mvn.w	r3, #23
 80099aa:	fb04 3303 	mla	r3, r4, r3, r3
 80099ae:	eb03 0a02 	add.w	sl, r3, r2
 80099b2:	9b02      	ldr	r3, [sp, #8]
 80099b4:	9a06      	ldr	r2, [sp, #24]
 80099b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009c88 <__kernel_rem_pio2+0x318>
 80099ba:	eb03 0802 	add.w	r8, r3, r2
 80099be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80099c0:	1aa7      	subs	r7, r4, r2
 80099c2:	ae22      	add	r6, sp, #136	; 0x88
 80099c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80099c8:	2500      	movs	r5, #0
 80099ca:	4545      	cmp	r5, r8
 80099cc:	dd13      	ble.n	80099f6 <__kernel_rem_pio2+0x86>
 80099ce:	9b08      	ldr	r3, [sp, #32]
 80099d0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009c88 <__kernel_rem_pio2+0x318>
 80099d4:	aa22      	add	r2, sp, #136	; 0x88
 80099d6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80099da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80099de:	f04f 0800 	mov.w	r8, #0
 80099e2:	9b02      	ldr	r3, [sp, #8]
 80099e4:	4598      	cmp	r8, r3
 80099e6:	dc2f      	bgt.n	8009a48 <__kernel_rem_pio2+0xd8>
 80099e8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80099ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80099f0:	462f      	mov	r7, r5
 80099f2:	2600      	movs	r6, #0
 80099f4:	e01b      	b.n	8009a2e <__kernel_rem_pio2+0xbe>
 80099f6:	42ef      	cmn	r7, r5
 80099f8:	d407      	bmi.n	8009a0a <__kernel_rem_pio2+0x9a>
 80099fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80099fe:	f7f6 fda1 	bl	8000544 <__aeabi_i2d>
 8009a02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009a06:	3501      	adds	r5, #1
 8009a08:	e7df      	b.n	80099ca <__kernel_rem_pio2+0x5a>
 8009a0a:	ec51 0b18 	vmov	r0, r1, d8
 8009a0e:	e7f8      	b.n	8009a02 <__kernel_rem_pio2+0x92>
 8009a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009a18:	f7f6 fdfe 	bl	8000618 <__aeabi_dmul>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a24:	f7f6 fc42 	bl	80002ac <__adddf3>
 8009a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a2c:	3601      	adds	r6, #1
 8009a2e:	9b06      	ldr	r3, [sp, #24]
 8009a30:	429e      	cmp	r6, r3
 8009a32:	f1a7 0708 	sub.w	r7, r7, #8
 8009a36:	ddeb      	ble.n	8009a10 <__kernel_rem_pio2+0xa0>
 8009a38:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a3c:	f108 0801 	add.w	r8, r8, #1
 8009a40:	ecab 7b02 	vstmia	fp!, {d7}
 8009a44:	3508      	adds	r5, #8
 8009a46:	e7cc      	b.n	80099e2 <__kernel_rem_pio2+0x72>
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	aa0e      	add	r2, sp, #56	; 0x38
 8009a4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a50:	930d      	str	r3, [sp, #52]	; 0x34
 8009a52:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009a54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009a58:	9c02      	ldr	r4, [sp, #8]
 8009a5a:	930c      	str	r3, [sp, #48]	; 0x30
 8009a5c:	00e3      	lsls	r3, r4, #3
 8009a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a60:	ab9a      	add	r3, sp, #616	; 0x268
 8009a62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009a6a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009a6e:	ab72      	add	r3, sp, #456	; 0x1c8
 8009a70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009a74:	46c3      	mov	fp, r8
 8009a76:	46a1      	mov	r9, r4
 8009a78:	f1b9 0f00 	cmp.w	r9, #0
 8009a7c:	f1a5 0508 	sub.w	r5, r5, #8
 8009a80:	dc77      	bgt.n	8009b72 <__kernel_rem_pio2+0x202>
 8009a82:	ec47 6b10 	vmov	d0, r6, r7
 8009a86:	4650      	mov	r0, sl
 8009a88:	f000 fc46 	bl	800a318 <scalbn>
 8009a8c:	ec57 6b10 	vmov	r6, r7, d0
 8009a90:	2200      	movs	r2, #0
 8009a92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009a96:	ee10 0a10 	vmov	r0, s0
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	f7f6 fdbc 	bl	8000618 <__aeabi_dmul>
 8009aa0:	ec41 0b10 	vmov	d0, r0, r1
 8009aa4:	f000 fbb8 	bl	800a218 <floor>
 8009aa8:	4b7c      	ldr	r3, [pc, #496]	; (8009c9c <__kernel_rem_pio2+0x32c>)
 8009aaa:	ec51 0b10 	vmov	r0, r1, d0
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f7f6 fdb2 	bl	8000618 <__aeabi_dmul>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4630      	mov	r0, r6
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f6 fbf4 	bl	80002a8 <__aeabi_dsub>
 8009ac0:	460f      	mov	r7, r1
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	f7f7 f858 	bl	8000b78 <__aeabi_d2iz>
 8009ac8:	9004      	str	r0, [sp, #16]
 8009aca:	f7f6 fd3b 	bl	8000544 <__aeabi_i2d>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	f7f6 fbe7 	bl	80002a8 <__aeabi_dsub>
 8009ada:	f1ba 0f00 	cmp.w	sl, #0
 8009ade:	4606      	mov	r6, r0
 8009ae0:	460f      	mov	r7, r1
 8009ae2:	dd6d      	ble.n	8009bc0 <__kernel_rem_pio2+0x250>
 8009ae4:	1e62      	subs	r2, r4, #1
 8009ae6:	ab0e      	add	r3, sp, #56	; 0x38
 8009ae8:	9d04      	ldr	r5, [sp, #16]
 8009aea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009aee:	f1ca 0118 	rsb	r1, sl, #24
 8009af2:	fa40 f301 	asr.w	r3, r0, r1
 8009af6:	441d      	add	r5, r3
 8009af8:	408b      	lsls	r3, r1
 8009afa:	1ac0      	subs	r0, r0, r3
 8009afc:	ab0e      	add	r3, sp, #56	; 0x38
 8009afe:	9504      	str	r5, [sp, #16]
 8009b00:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009b04:	f1ca 0317 	rsb	r3, sl, #23
 8009b08:	fa40 fb03 	asr.w	fp, r0, r3
 8009b0c:	f1bb 0f00 	cmp.w	fp, #0
 8009b10:	dd65      	ble.n	8009bde <__kernel_rem_pio2+0x26e>
 8009b12:	9b04      	ldr	r3, [sp, #16]
 8009b14:	2200      	movs	r2, #0
 8009b16:	3301      	adds	r3, #1
 8009b18:	9304      	str	r3, [sp, #16]
 8009b1a:	4615      	mov	r5, r2
 8009b1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009b20:	4294      	cmp	r4, r2
 8009b22:	f300 809c 	bgt.w	8009c5e <__kernel_rem_pio2+0x2ee>
 8009b26:	f1ba 0f00 	cmp.w	sl, #0
 8009b2a:	dd07      	ble.n	8009b3c <__kernel_rem_pio2+0x1cc>
 8009b2c:	f1ba 0f01 	cmp.w	sl, #1
 8009b30:	f000 80c0 	beq.w	8009cb4 <__kernel_rem_pio2+0x344>
 8009b34:	f1ba 0f02 	cmp.w	sl, #2
 8009b38:	f000 80c6 	beq.w	8009cc8 <__kernel_rem_pio2+0x358>
 8009b3c:	f1bb 0f02 	cmp.w	fp, #2
 8009b40:	d14d      	bne.n	8009bde <__kernel_rem_pio2+0x26e>
 8009b42:	4632      	mov	r2, r6
 8009b44:	463b      	mov	r3, r7
 8009b46:	4956      	ldr	r1, [pc, #344]	; (8009ca0 <__kernel_rem_pio2+0x330>)
 8009b48:	2000      	movs	r0, #0
 8009b4a:	f7f6 fbad 	bl	80002a8 <__aeabi_dsub>
 8009b4e:	4606      	mov	r6, r0
 8009b50:	460f      	mov	r7, r1
 8009b52:	2d00      	cmp	r5, #0
 8009b54:	d043      	beq.n	8009bde <__kernel_rem_pio2+0x26e>
 8009b56:	4650      	mov	r0, sl
 8009b58:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009c90 <__kernel_rem_pio2+0x320>
 8009b5c:	f000 fbdc 	bl	800a318 <scalbn>
 8009b60:	4630      	mov	r0, r6
 8009b62:	4639      	mov	r1, r7
 8009b64:	ec53 2b10 	vmov	r2, r3, d0
 8009b68:	f7f6 fb9e 	bl	80002a8 <__aeabi_dsub>
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	460f      	mov	r7, r1
 8009b70:	e035      	b.n	8009bde <__kernel_rem_pio2+0x26e>
 8009b72:	4b4c      	ldr	r3, [pc, #304]	; (8009ca4 <__kernel_rem_pio2+0x334>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	4630      	mov	r0, r6
 8009b78:	4639      	mov	r1, r7
 8009b7a:	f7f6 fd4d 	bl	8000618 <__aeabi_dmul>
 8009b7e:	f7f6 fffb 	bl	8000b78 <__aeabi_d2iz>
 8009b82:	f7f6 fcdf 	bl	8000544 <__aeabi_i2d>
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	ec43 2b18 	vmov	d8, r2, r3
 8009b8e:	4b46      	ldr	r3, [pc, #280]	; (8009ca8 <__kernel_rem_pio2+0x338>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	f7f6 fd41 	bl	8000618 <__aeabi_dmul>
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	f7f6 fb83 	bl	80002a8 <__aeabi_dsub>
 8009ba2:	f7f6 ffe9 	bl	8000b78 <__aeabi_d2iz>
 8009ba6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009baa:	f84b 0b04 	str.w	r0, [fp], #4
 8009bae:	ec51 0b18 	vmov	r0, r1, d8
 8009bb2:	f7f6 fb7b 	bl	80002ac <__adddf3>
 8009bb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460f      	mov	r7, r1
 8009bbe:	e75b      	b.n	8009a78 <__kernel_rem_pio2+0x108>
 8009bc0:	d106      	bne.n	8009bd0 <__kernel_rem_pio2+0x260>
 8009bc2:	1e63      	subs	r3, r4, #1
 8009bc4:	aa0e      	add	r2, sp, #56	; 0x38
 8009bc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009bca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009bce:	e79d      	b.n	8009b0c <__kernel_rem_pio2+0x19c>
 8009bd0:	4b36      	ldr	r3, [pc, #216]	; (8009cac <__kernel_rem_pio2+0x33c>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f7f6 ffa6 	bl	8000b24 <__aeabi_dcmpge>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d13d      	bne.n	8009c58 <__kernel_rem_pio2+0x2e8>
 8009bdc:	4683      	mov	fp, r0
 8009bde:	2200      	movs	r2, #0
 8009be0:	2300      	movs	r3, #0
 8009be2:	4630      	mov	r0, r6
 8009be4:	4639      	mov	r1, r7
 8009be6:	f7f6 ff7f 	bl	8000ae8 <__aeabi_dcmpeq>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	f000 80c0 	beq.w	8009d70 <__kernel_rem_pio2+0x400>
 8009bf0:	1e65      	subs	r5, r4, #1
 8009bf2:	462b      	mov	r3, r5
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	9902      	ldr	r1, [sp, #8]
 8009bf8:	428b      	cmp	r3, r1
 8009bfa:	da6c      	bge.n	8009cd6 <__kernel_rem_pio2+0x366>
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	f000 8089 	beq.w	8009d14 <__kernel_rem_pio2+0x3a4>
 8009c02:	ab0e      	add	r3, sp, #56	; 0x38
 8009c04:	f1aa 0a18 	sub.w	sl, sl, #24
 8009c08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 80ad 	beq.w	8009d6c <__kernel_rem_pio2+0x3fc>
 8009c12:	4650      	mov	r0, sl
 8009c14:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009c90 <__kernel_rem_pio2+0x320>
 8009c18:	f000 fb7e 	bl	800a318 <scalbn>
 8009c1c:	ab9a      	add	r3, sp, #616	; 0x268
 8009c1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009c22:	ec57 6b10 	vmov	r6, r7, d0
 8009c26:	00ec      	lsls	r4, r5, #3
 8009c28:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009c2c:	46aa      	mov	sl, r5
 8009c2e:	f1ba 0f00 	cmp.w	sl, #0
 8009c32:	f280 80d6 	bge.w	8009de2 <__kernel_rem_pio2+0x472>
 8009c36:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009c88 <__kernel_rem_pio2+0x318>
 8009c3a:	462e      	mov	r6, r5
 8009c3c:	2e00      	cmp	r6, #0
 8009c3e:	f2c0 8104 	blt.w	8009e4a <__kernel_rem_pio2+0x4da>
 8009c42:	ab72      	add	r3, sp, #456	; 0x1c8
 8009c44:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009c48:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009cb0 <__kernel_rem_pio2+0x340>
 8009c4c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009c50:	f04f 0800 	mov.w	r8, #0
 8009c54:	1baf      	subs	r7, r5, r6
 8009c56:	e0ea      	b.n	8009e2e <__kernel_rem_pio2+0x4be>
 8009c58:	f04f 0b02 	mov.w	fp, #2
 8009c5c:	e759      	b.n	8009b12 <__kernel_rem_pio2+0x1a2>
 8009c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c62:	b955      	cbnz	r5, 8009c7a <__kernel_rem_pio2+0x30a>
 8009c64:	b123      	cbz	r3, 8009c70 <__kernel_rem_pio2+0x300>
 8009c66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009c6a:	f8c8 3000 	str.w	r3, [r8]
 8009c6e:	2301      	movs	r3, #1
 8009c70:	3201      	adds	r2, #1
 8009c72:	f108 0804 	add.w	r8, r8, #4
 8009c76:	461d      	mov	r5, r3
 8009c78:	e752      	b.n	8009b20 <__kernel_rem_pio2+0x1b0>
 8009c7a:	1acb      	subs	r3, r1, r3
 8009c7c:	f8c8 3000 	str.w	r3, [r8]
 8009c80:	462b      	mov	r3, r5
 8009c82:	e7f5      	b.n	8009c70 <__kernel_rem_pio2+0x300>
 8009c84:	f3af 8000 	nop.w
	...
 8009c94:	3ff00000 	.word	0x3ff00000
 8009c98:	0800a8f0 	.word	0x0800a8f0
 8009c9c:	40200000 	.word	0x40200000
 8009ca0:	3ff00000 	.word	0x3ff00000
 8009ca4:	3e700000 	.word	0x3e700000
 8009ca8:	41700000 	.word	0x41700000
 8009cac:	3fe00000 	.word	0x3fe00000
 8009cb0:	0800a8b0 	.word	0x0800a8b0
 8009cb4:	1e62      	subs	r2, r4, #1
 8009cb6:	ab0e      	add	r3, sp, #56	; 0x38
 8009cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009cc0:	a90e      	add	r1, sp, #56	; 0x38
 8009cc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009cc6:	e739      	b.n	8009b3c <__kernel_rem_pio2+0x1cc>
 8009cc8:	1e62      	subs	r2, r4, #1
 8009cca:	ab0e      	add	r3, sp, #56	; 0x38
 8009ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009cd4:	e7f4      	b.n	8009cc0 <__kernel_rem_pio2+0x350>
 8009cd6:	a90e      	add	r1, sp, #56	; 0x38
 8009cd8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	e789      	b.n	8009bf6 <__kernel_rem_pio2+0x286>
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	d0fa      	beq.n	8009ce2 <__kernel_rem_pio2+0x372>
 8009cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009cf2:	446a      	add	r2, sp
 8009cf4:	3a98      	subs	r2, #152	; 0x98
 8009cf6:	920a      	str	r2, [sp, #40]	; 0x28
 8009cf8:	9a08      	ldr	r2, [sp, #32]
 8009cfa:	18e3      	adds	r3, r4, r3
 8009cfc:	18a5      	adds	r5, r4, r2
 8009cfe:	aa22      	add	r2, sp, #136	; 0x88
 8009d00:	f104 0801 	add.w	r8, r4, #1
 8009d04:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009d08:	9304      	str	r3, [sp, #16]
 8009d0a:	9b04      	ldr	r3, [sp, #16]
 8009d0c:	4543      	cmp	r3, r8
 8009d0e:	da04      	bge.n	8009d1a <__kernel_rem_pio2+0x3aa>
 8009d10:	461c      	mov	r4, r3
 8009d12:	e6a3      	b.n	8009a5c <__kernel_rem_pio2+0xec>
 8009d14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d16:	2301      	movs	r3, #1
 8009d18:	e7e4      	b.n	8009ce4 <__kernel_rem_pio2+0x374>
 8009d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009d20:	f7f6 fc10 	bl	8000544 <__aeabi_i2d>
 8009d24:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d2a:	46ab      	mov	fp, r5
 8009d2c:	461c      	mov	r4, r3
 8009d2e:	f04f 0900 	mov.w	r9, #0
 8009d32:	2600      	movs	r6, #0
 8009d34:	2700      	movs	r7, #0
 8009d36:	9b06      	ldr	r3, [sp, #24]
 8009d38:	4599      	cmp	r9, r3
 8009d3a:	dd06      	ble.n	8009d4a <__kernel_rem_pio2+0x3da>
 8009d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009d42:	f108 0801 	add.w	r8, r8, #1
 8009d46:	930a      	str	r3, [sp, #40]	; 0x28
 8009d48:	e7df      	b.n	8009d0a <__kernel_rem_pio2+0x39a>
 8009d4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009d4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009d52:	f7f6 fc61 	bl	8000618 <__aeabi_dmul>
 8009d56:	4602      	mov	r2, r0
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	f7f6 faa5 	bl	80002ac <__adddf3>
 8009d62:	f109 0901 	add.w	r9, r9, #1
 8009d66:	4606      	mov	r6, r0
 8009d68:	460f      	mov	r7, r1
 8009d6a:	e7e4      	b.n	8009d36 <__kernel_rem_pio2+0x3c6>
 8009d6c:	3d01      	subs	r5, #1
 8009d6e:	e748      	b.n	8009c02 <__kernel_rem_pio2+0x292>
 8009d70:	ec47 6b10 	vmov	d0, r6, r7
 8009d74:	f1ca 0000 	rsb	r0, sl, #0
 8009d78:	f000 face 	bl	800a318 <scalbn>
 8009d7c:	ec57 6b10 	vmov	r6, r7, d0
 8009d80:	4ba0      	ldr	r3, [pc, #640]	; (800a004 <__kernel_rem_pio2+0x694>)
 8009d82:	ee10 0a10 	vmov	r0, s0
 8009d86:	2200      	movs	r2, #0
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 fecb 	bl	8000b24 <__aeabi_dcmpge>
 8009d8e:	b1f8      	cbz	r0, 8009dd0 <__kernel_rem_pio2+0x460>
 8009d90:	4b9d      	ldr	r3, [pc, #628]	; (800a008 <__kernel_rem_pio2+0x698>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	4630      	mov	r0, r6
 8009d96:	4639      	mov	r1, r7
 8009d98:	f7f6 fc3e 	bl	8000618 <__aeabi_dmul>
 8009d9c:	f7f6 feec 	bl	8000b78 <__aeabi_d2iz>
 8009da0:	4680      	mov	r8, r0
 8009da2:	f7f6 fbcf 	bl	8000544 <__aeabi_i2d>
 8009da6:	4b97      	ldr	r3, [pc, #604]	; (800a004 <__kernel_rem_pio2+0x694>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	f7f6 fc35 	bl	8000618 <__aeabi_dmul>
 8009dae:	460b      	mov	r3, r1
 8009db0:	4602      	mov	r2, r0
 8009db2:	4639      	mov	r1, r7
 8009db4:	4630      	mov	r0, r6
 8009db6:	f7f6 fa77 	bl	80002a8 <__aeabi_dsub>
 8009dba:	f7f6 fedd 	bl	8000b78 <__aeabi_d2iz>
 8009dbe:	1c65      	adds	r5, r4, #1
 8009dc0:	ab0e      	add	r3, sp, #56	; 0x38
 8009dc2:	f10a 0a18 	add.w	sl, sl, #24
 8009dc6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009dca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009dce:	e720      	b.n	8009c12 <__kernel_rem_pio2+0x2a2>
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 fed0 	bl	8000b78 <__aeabi_d2iz>
 8009dd8:	ab0e      	add	r3, sp, #56	; 0x38
 8009dda:	4625      	mov	r5, r4
 8009ddc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009de0:	e717      	b.n	8009c12 <__kernel_rem_pio2+0x2a2>
 8009de2:	ab0e      	add	r3, sp, #56	; 0x38
 8009de4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009de8:	f7f6 fbac 	bl	8000544 <__aeabi_i2d>
 8009dec:	4632      	mov	r2, r6
 8009dee:	463b      	mov	r3, r7
 8009df0:	f7f6 fc12 	bl	8000618 <__aeabi_dmul>
 8009df4:	4b84      	ldr	r3, [pc, #528]	; (800a008 <__kernel_rem_pio2+0x698>)
 8009df6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f7f6 fc0a 	bl	8000618 <__aeabi_dmul>
 8009e04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e08:	4606      	mov	r6, r0
 8009e0a:	460f      	mov	r7, r1
 8009e0c:	e70f      	b.n	8009c2e <__kernel_rem_pio2+0x2be>
 8009e0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009e12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009e16:	f7f6 fbff 	bl	8000618 <__aeabi_dmul>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e22:	f7f6 fa43 	bl	80002ac <__adddf3>
 8009e26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e2a:	f108 0801 	add.w	r8, r8, #1
 8009e2e:	9b02      	ldr	r3, [sp, #8]
 8009e30:	4598      	cmp	r8, r3
 8009e32:	dc01      	bgt.n	8009e38 <__kernel_rem_pio2+0x4c8>
 8009e34:	45b8      	cmp	r8, r7
 8009e36:	ddea      	ble.n	8009e0e <__kernel_rem_pio2+0x49e>
 8009e38:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009e3c:	ab4a      	add	r3, sp, #296	; 0x128
 8009e3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009e42:	ed87 7b00 	vstr	d7, [r7]
 8009e46:	3e01      	subs	r6, #1
 8009e48:	e6f8      	b.n	8009c3c <__kernel_rem_pio2+0x2cc>
 8009e4a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	dc0b      	bgt.n	8009e68 <__kernel_rem_pio2+0x4f8>
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dc35      	bgt.n	8009ec0 <__kernel_rem_pio2+0x550>
 8009e54:	d059      	beq.n	8009f0a <__kernel_rem_pio2+0x59a>
 8009e56:	9b04      	ldr	r3, [sp, #16]
 8009e58:	f003 0007 	and.w	r0, r3, #7
 8009e5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009e60:	ecbd 8b02 	vpop	{d8}
 8009e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d1f3      	bne.n	8009e56 <__kernel_rem_pio2+0x4e6>
 8009e6e:	ab4a      	add	r3, sp, #296	; 0x128
 8009e70:	4423      	add	r3, r4
 8009e72:	9306      	str	r3, [sp, #24]
 8009e74:	461c      	mov	r4, r3
 8009e76:	469a      	mov	sl, r3
 8009e78:	9502      	str	r5, [sp, #8]
 8009e7a:	9b02      	ldr	r3, [sp, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f1aa 0a08 	sub.w	sl, sl, #8
 8009e82:	dc6b      	bgt.n	8009f5c <__kernel_rem_pio2+0x5ec>
 8009e84:	46aa      	mov	sl, r5
 8009e86:	f1ba 0f01 	cmp.w	sl, #1
 8009e8a:	f1a4 0408 	sub.w	r4, r4, #8
 8009e8e:	f300 8085 	bgt.w	8009f9c <__kernel_rem_pio2+0x62c>
 8009e92:	9c06      	ldr	r4, [sp, #24]
 8009e94:	2000      	movs	r0, #0
 8009e96:	3408      	adds	r4, #8
 8009e98:	2100      	movs	r1, #0
 8009e9a:	2d01      	cmp	r5, #1
 8009e9c:	f300 809d 	bgt.w	8009fda <__kernel_rem_pio2+0x66a>
 8009ea0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009ea4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009ea8:	f1bb 0f00 	cmp.w	fp, #0
 8009eac:	f040 809b 	bne.w	8009fe6 <__kernel_rem_pio2+0x676>
 8009eb0:	9b01      	ldr	r3, [sp, #4]
 8009eb2:	e9c3 5600 	strd	r5, r6, [r3]
 8009eb6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009eba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009ebe:	e7ca      	b.n	8009e56 <__kernel_rem_pio2+0x4e6>
 8009ec0:	3408      	adds	r4, #8
 8009ec2:	ab4a      	add	r3, sp, #296	; 0x128
 8009ec4:	441c      	add	r4, r3
 8009ec6:	462e      	mov	r6, r5
 8009ec8:	2000      	movs	r0, #0
 8009eca:	2100      	movs	r1, #0
 8009ecc:	2e00      	cmp	r6, #0
 8009ece:	da36      	bge.n	8009f3e <__kernel_rem_pio2+0x5ce>
 8009ed0:	f1bb 0f00 	cmp.w	fp, #0
 8009ed4:	d039      	beq.n	8009f4a <__kernel_rem_pio2+0x5da>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009edc:	9c01      	ldr	r4, [sp, #4]
 8009ede:	e9c4 2300 	strd	r2, r3, [r4]
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009eea:	f7f6 f9dd 	bl	80002a8 <__aeabi_dsub>
 8009eee:	ae4c      	add	r6, sp, #304	; 0x130
 8009ef0:	2401      	movs	r4, #1
 8009ef2:	42a5      	cmp	r5, r4
 8009ef4:	da2c      	bge.n	8009f50 <__kernel_rem_pio2+0x5e0>
 8009ef6:	f1bb 0f00 	cmp.w	fp, #0
 8009efa:	d002      	beq.n	8009f02 <__kernel_rem_pio2+0x592>
 8009efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f00:	4619      	mov	r1, r3
 8009f02:	9b01      	ldr	r3, [sp, #4]
 8009f04:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009f08:	e7a5      	b.n	8009e56 <__kernel_rem_pio2+0x4e6>
 8009f0a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009f0e:	eb0d 0403 	add.w	r4, sp, r3
 8009f12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009f16:	2000      	movs	r0, #0
 8009f18:	2100      	movs	r1, #0
 8009f1a:	2d00      	cmp	r5, #0
 8009f1c:	da09      	bge.n	8009f32 <__kernel_rem_pio2+0x5c2>
 8009f1e:	f1bb 0f00 	cmp.w	fp, #0
 8009f22:	d002      	beq.n	8009f2a <__kernel_rem_pio2+0x5ba>
 8009f24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f28:	4619      	mov	r1, r3
 8009f2a:	9b01      	ldr	r3, [sp, #4]
 8009f2c:	e9c3 0100 	strd	r0, r1, [r3]
 8009f30:	e791      	b.n	8009e56 <__kernel_rem_pio2+0x4e6>
 8009f32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009f36:	f7f6 f9b9 	bl	80002ac <__adddf3>
 8009f3a:	3d01      	subs	r5, #1
 8009f3c:	e7ed      	b.n	8009f1a <__kernel_rem_pio2+0x5aa>
 8009f3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009f42:	f7f6 f9b3 	bl	80002ac <__adddf3>
 8009f46:	3e01      	subs	r6, #1
 8009f48:	e7c0      	b.n	8009ecc <__kernel_rem_pio2+0x55c>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	e7c5      	b.n	8009edc <__kernel_rem_pio2+0x56c>
 8009f50:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009f54:	f7f6 f9aa 	bl	80002ac <__adddf3>
 8009f58:	3401      	adds	r4, #1
 8009f5a:	e7ca      	b.n	8009ef2 <__kernel_rem_pio2+0x582>
 8009f5c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009f60:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009f64:	9b02      	ldr	r3, [sp, #8]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	9302      	str	r3, [sp, #8]
 8009f6a:	4632      	mov	r2, r6
 8009f6c:	463b      	mov	r3, r7
 8009f6e:	4640      	mov	r0, r8
 8009f70:	4649      	mov	r1, r9
 8009f72:	f7f6 f99b 	bl	80002ac <__adddf3>
 8009f76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4640      	mov	r0, r8
 8009f80:	4649      	mov	r1, r9
 8009f82:	f7f6 f991 	bl	80002a8 <__aeabi_dsub>
 8009f86:	4632      	mov	r2, r6
 8009f88:	463b      	mov	r3, r7
 8009f8a:	f7f6 f98f 	bl	80002ac <__adddf3>
 8009f8e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009f92:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f96:	ed8a 7b00 	vstr	d7, [sl]
 8009f9a:	e76e      	b.n	8009e7a <__kernel_rem_pio2+0x50a>
 8009f9c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009fa0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	4632      	mov	r2, r6
 8009fa8:	463b      	mov	r3, r7
 8009faa:	4649      	mov	r1, r9
 8009fac:	f7f6 f97e 	bl	80002ac <__adddf3>
 8009fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4640      	mov	r0, r8
 8009fba:	4649      	mov	r1, r9
 8009fbc:	f7f6 f974 	bl	80002a8 <__aeabi_dsub>
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	463b      	mov	r3, r7
 8009fc4:	f7f6 f972 	bl	80002ac <__adddf3>
 8009fc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009fcc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009fd0:	ed84 7b00 	vstr	d7, [r4]
 8009fd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fd8:	e755      	b.n	8009e86 <__kernel_rem_pio2+0x516>
 8009fda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009fde:	f7f6 f965 	bl	80002ac <__adddf3>
 8009fe2:	3d01      	subs	r5, #1
 8009fe4:	e759      	b.n	8009e9a <__kernel_rem_pio2+0x52a>
 8009fe6:	9b01      	ldr	r3, [sp, #4]
 8009fe8:	9a01      	ldr	r2, [sp, #4]
 8009fea:	601d      	str	r5, [r3, #0]
 8009fec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009ff0:	605c      	str	r4, [r3, #4]
 8009ff2:	609f      	str	r7, [r3, #8]
 8009ff4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009ff8:	60d3      	str	r3, [r2, #12]
 8009ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ffe:	6110      	str	r0, [r2, #16]
 800a000:	6153      	str	r3, [r2, #20]
 800a002:	e728      	b.n	8009e56 <__kernel_rem_pio2+0x4e6>
 800a004:	41700000 	.word	0x41700000
 800a008:	3e700000 	.word	0x3e700000
 800a00c:	00000000 	.word	0x00000000

0800a010 <__kernel_sin>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	ed2d 8b04 	vpush	{d8-d9}
 800a018:	eeb0 8a41 	vmov.f32	s16, s2
 800a01c:	eef0 8a61 	vmov.f32	s17, s3
 800a020:	ec55 4b10 	vmov	r4, r5, d0
 800a024:	b083      	sub	sp, #12
 800a026:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a02a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a02e:	9001      	str	r0, [sp, #4]
 800a030:	da06      	bge.n	800a040 <__kernel_sin+0x30>
 800a032:	ee10 0a10 	vmov	r0, s0
 800a036:	4629      	mov	r1, r5
 800a038:	f7f6 fd9e 	bl	8000b78 <__aeabi_d2iz>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d051      	beq.n	800a0e4 <__kernel_sin+0xd4>
 800a040:	4622      	mov	r2, r4
 800a042:	462b      	mov	r3, r5
 800a044:	4620      	mov	r0, r4
 800a046:	4629      	mov	r1, r5
 800a048:	f7f6 fae6 	bl	8000618 <__aeabi_dmul>
 800a04c:	4682      	mov	sl, r0
 800a04e:	468b      	mov	fp, r1
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4620      	mov	r0, r4
 800a056:	4629      	mov	r1, r5
 800a058:	f7f6 fade 	bl	8000618 <__aeabi_dmul>
 800a05c:	a341      	add	r3, pc, #260	; (adr r3, 800a164 <__kernel_sin+0x154>)
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	4680      	mov	r8, r0
 800a064:	4689      	mov	r9, r1
 800a066:	4650      	mov	r0, sl
 800a068:	4659      	mov	r1, fp
 800a06a:	f7f6 fad5 	bl	8000618 <__aeabi_dmul>
 800a06e:	a33f      	add	r3, pc, #252	; (adr r3, 800a16c <__kernel_sin+0x15c>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f7f6 f918 	bl	80002a8 <__aeabi_dsub>
 800a078:	4652      	mov	r2, sl
 800a07a:	465b      	mov	r3, fp
 800a07c:	f7f6 facc 	bl	8000618 <__aeabi_dmul>
 800a080:	a33c      	add	r3, pc, #240	; (adr r3, 800a174 <__kernel_sin+0x164>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 f911 	bl	80002ac <__adddf3>
 800a08a:	4652      	mov	r2, sl
 800a08c:	465b      	mov	r3, fp
 800a08e:	f7f6 fac3 	bl	8000618 <__aeabi_dmul>
 800a092:	a33a      	add	r3, pc, #232	; (adr r3, 800a17c <__kernel_sin+0x16c>)
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f7f6 f906 	bl	80002a8 <__aeabi_dsub>
 800a09c:	4652      	mov	r2, sl
 800a09e:	465b      	mov	r3, fp
 800a0a0:	f7f6 faba 	bl	8000618 <__aeabi_dmul>
 800a0a4:	a337      	add	r3, pc, #220	; (adr r3, 800a184 <__kernel_sin+0x174>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 f8ff 	bl	80002ac <__adddf3>
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	460f      	mov	r7, r1
 800a0b4:	b9eb      	cbnz	r3, 800a0f2 <__kernel_sin+0xe2>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4650      	mov	r0, sl
 800a0bc:	4659      	mov	r1, fp
 800a0be:	f7f6 faab 	bl	8000618 <__aeabi_dmul>
 800a0c2:	a325      	add	r3, pc, #148	; (adr r3, 800a158 <__kernel_sin+0x148>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	f7f6 f8ee 	bl	80002a8 <__aeabi_dsub>
 800a0cc:	4642      	mov	r2, r8
 800a0ce:	464b      	mov	r3, r9
 800a0d0:	f7f6 faa2 	bl	8000618 <__aeabi_dmul>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4620      	mov	r0, r4
 800a0da:	4629      	mov	r1, r5
 800a0dc:	f7f6 f8e6 	bl	80002ac <__adddf3>
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	ec45 4b10 	vmov	d0, r4, r5
 800a0e8:	b003      	add	sp, #12
 800a0ea:	ecbd 8b04 	vpop	{d8-d9}
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	4b1b      	ldr	r3, [pc, #108]	; (800a160 <__kernel_sin+0x150>)
 800a0f4:	ec51 0b18 	vmov	r0, r1, d8
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f7f6 fa8d 	bl	8000618 <__aeabi_dmul>
 800a0fe:	4632      	mov	r2, r6
 800a100:	ec41 0b19 	vmov	d9, r0, r1
 800a104:	463b      	mov	r3, r7
 800a106:	4640      	mov	r0, r8
 800a108:	4649      	mov	r1, r9
 800a10a:	f7f6 fa85 	bl	8000618 <__aeabi_dmul>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	ec51 0b19 	vmov	r0, r1, d9
 800a116:	f7f6 f8c7 	bl	80002a8 <__aeabi_dsub>
 800a11a:	4652      	mov	r2, sl
 800a11c:	465b      	mov	r3, fp
 800a11e:	f7f6 fa7b 	bl	8000618 <__aeabi_dmul>
 800a122:	ec53 2b18 	vmov	r2, r3, d8
 800a126:	f7f6 f8bf 	bl	80002a8 <__aeabi_dsub>
 800a12a:	a30b      	add	r3, pc, #44	; (adr r3, 800a158 <__kernel_sin+0x148>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	4606      	mov	r6, r0
 800a132:	460f      	mov	r7, r1
 800a134:	4640      	mov	r0, r8
 800a136:	4649      	mov	r1, r9
 800a138:	f7f6 fa6e 	bl	8000618 <__aeabi_dmul>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	f7f6 f8b2 	bl	80002ac <__adddf3>
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	4620      	mov	r0, r4
 800a14e:	4629      	mov	r1, r5
 800a150:	f7f6 f8aa 	bl	80002a8 <__aeabi_dsub>
 800a154:	e7c4      	b.n	800a0e0 <__kernel_sin+0xd0>
 800a156:	bf00      	nop
 800a158:	55555549 	.word	0x55555549
 800a15c:	3fc55555 	.word	0x3fc55555
 800a160:	3fe00000 	.word	0x3fe00000
 800a164:	5acfd57c 	.word	0x5acfd57c
 800a168:	3de5d93a 	.word	0x3de5d93a
 800a16c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a170:	3e5ae5e6 	.word	0x3e5ae5e6
 800a174:	57b1fe7d 	.word	0x57b1fe7d
 800a178:	3ec71de3 	.word	0x3ec71de3
 800a17c:	19c161d5 	.word	0x19c161d5
 800a180:	3f2a01a0 	.word	0x3f2a01a0
 800a184:	1110f8a6 	.word	0x1110f8a6
 800a188:	3f811111 	.word	0x3f811111

0800a18c <with_errno>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	4604      	mov	r4, r0
 800a190:	460d      	mov	r5, r1
 800a192:	4616      	mov	r6, r2
 800a194:	f7fd f850 	bl	8007238 <__errno>
 800a198:	4629      	mov	r1, r5
 800a19a:	6006      	str	r6, [r0, #0]
 800a19c:	4620      	mov	r0, r4
 800a19e:	bd70      	pop	{r4, r5, r6, pc}

0800a1a0 <xflow>:
 800a1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1a2:	4614      	mov	r4, r2
 800a1a4:	461d      	mov	r5, r3
 800a1a6:	b108      	cbz	r0, 800a1ac <xflow+0xc>
 800a1a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a1ac:	e9cd 2300 	strd	r2, r3, [sp]
 800a1b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	f7f6 fa2e 	bl	8000618 <__aeabi_dmul>
 800a1bc:	2222      	movs	r2, #34	; 0x22
 800a1be:	b003      	add	sp, #12
 800a1c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1c4:	f7ff bfe2 	b.w	800a18c <with_errno>

0800a1c8 <__math_uflow>:
 800a1c8:	b508      	push	{r3, lr}
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a1d0:	f7ff ffe6 	bl	800a1a0 <xflow>
 800a1d4:	ec41 0b10 	vmov	d0, r0, r1
 800a1d8:	bd08      	pop	{r3, pc}

0800a1da <__math_oflow>:
 800a1da:	b508      	push	{r3, lr}
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a1e2:	f7ff ffdd 	bl	800a1a0 <xflow>
 800a1e6:	ec41 0b10 	vmov	d0, r0, r1
 800a1ea:	bd08      	pop	{r3, pc}

0800a1ec <fabs>:
 800a1ec:	ec51 0b10 	vmov	r0, r1, d0
 800a1f0:	ee10 2a10 	vmov	r2, s0
 800a1f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1f8:	ec43 2b10 	vmov	d0, r2, r3
 800a1fc:	4770      	bx	lr

0800a1fe <finite>:
 800a1fe:	b082      	sub	sp, #8
 800a200:	ed8d 0b00 	vstr	d0, [sp]
 800a204:	9801      	ldr	r0, [sp, #4]
 800a206:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a20a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a20e:	0fc0      	lsrs	r0, r0, #31
 800a210:	b002      	add	sp, #8
 800a212:	4770      	bx	lr
 800a214:	0000      	movs	r0, r0
	...

0800a218 <floor>:
 800a218:	ec51 0b10 	vmov	r0, r1, d0
 800a21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a220:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a224:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a228:	2e13      	cmp	r6, #19
 800a22a:	ee10 5a10 	vmov	r5, s0
 800a22e:	ee10 8a10 	vmov	r8, s0
 800a232:	460c      	mov	r4, r1
 800a234:	dc32      	bgt.n	800a29c <floor+0x84>
 800a236:	2e00      	cmp	r6, #0
 800a238:	da14      	bge.n	800a264 <floor+0x4c>
 800a23a:	a333      	add	r3, pc, #204	; (adr r3, 800a308 <floor+0xf0>)
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f7f6 f834 	bl	80002ac <__adddf3>
 800a244:	2200      	movs	r2, #0
 800a246:	2300      	movs	r3, #0
 800a248:	f7f6 fc76 	bl	8000b38 <__aeabi_dcmpgt>
 800a24c:	b138      	cbz	r0, 800a25e <floor+0x46>
 800a24e:	2c00      	cmp	r4, #0
 800a250:	da57      	bge.n	800a302 <floor+0xea>
 800a252:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a256:	431d      	orrs	r5, r3
 800a258:	d001      	beq.n	800a25e <floor+0x46>
 800a25a:	4c2d      	ldr	r4, [pc, #180]	; (800a310 <floor+0xf8>)
 800a25c:	2500      	movs	r5, #0
 800a25e:	4621      	mov	r1, r4
 800a260:	4628      	mov	r0, r5
 800a262:	e025      	b.n	800a2b0 <floor+0x98>
 800a264:	4f2b      	ldr	r7, [pc, #172]	; (800a314 <floor+0xfc>)
 800a266:	4137      	asrs	r7, r6
 800a268:	ea01 0307 	and.w	r3, r1, r7
 800a26c:	4303      	orrs	r3, r0
 800a26e:	d01f      	beq.n	800a2b0 <floor+0x98>
 800a270:	a325      	add	r3, pc, #148	; (adr r3, 800a308 <floor+0xf0>)
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	f7f6 f819 	bl	80002ac <__adddf3>
 800a27a:	2200      	movs	r2, #0
 800a27c:	2300      	movs	r3, #0
 800a27e:	f7f6 fc5b 	bl	8000b38 <__aeabi_dcmpgt>
 800a282:	2800      	cmp	r0, #0
 800a284:	d0eb      	beq.n	800a25e <floor+0x46>
 800a286:	2c00      	cmp	r4, #0
 800a288:	bfbe      	ittt	lt
 800a28a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a28e:	fa43 f606 	asrlt.w	r6, r3, r6
 800a292:	19a4      	addlt	r4, r4, r6
 800a294:	ea24 0407 	bic.w	r4, r4, r7
 800a298:	2500      	movs	r5, #0
 800a29a:	e7e0      	b.n	800a25e <floor+0x46>
 800a29c:	2e33      	cmp	r6, #51	; 0x33
 800a29e:	dd0b      	ble.n	800a2b8 <floor+0xa0>
 800a2a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a2a4:	d104      	bne.n	800a2b0 <floor+0x98>
 800a2a6:	ee10 2a10 	vmov	r2, s0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	f7f5 fffe 	bl	80002ac <__adddf3>
 800a2b0:	ec41 0b10 	vmov	d0, r0, r1
 800a2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c0:	fa23 f707 	lsr.w	r7, r3, r7
 800a2c4:	4207      	tst	r7, r0
 800a2c6:	d0f3      	beq.n	800a2b0 <floor+0x98>
 800a2c8:	a30f      	add	r3, pc, #60	; (adr r3, 800a308 <floor+0xf0>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f7f5 ffed 	bl	80002ac <__adddf3>
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f7f6 fc2f 	bl	8000b38 <__aeabi_dcmpgt>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d0bf      	beq.n	800a25e <floor+0x46>
 800a2de:	2c00      	cmp	r4, #0
 800a2e0:	da02      	bge.n	800a2e8 <floor+0xd0>
 800a2e2:	2e14      	cmp	r6, #20
 800a2e4:	d103      	bne.n	800a2ee <floor+0xd6>
 800a2e6:	3401      	adds	r4, #1
 800a2e8:	ea25 0507 	bic.w	r5, r5, r7
 800a2ec:	e7b7      	b.n	800a25e <floor+0x46>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a2f4:	fa03 f606 	lsl.w	r6, r3, r6
 800a2f8:	4435      	add	r5, r6
 800a2fa:	4545      	cmp	r5, r8
 800a2fc:	bf38      	it	cc
 800a2fe:	18e4      	addcc	r4, r4, r3
 800a300:	e7f2      	b.n	800a2e8 <floor+0xd0>
 800a302:	2500      	movs	r5, #0
 800a304:	462c      	mov	r4, r5
 800a306:	e7aa      	b.n	800a25e <floor+0x46>
 800a308:	8800759c 	.word	0x8800759c
 800a30c:	7e37e43c 	.word	0x7e37e43c
 800a310:	bff00000 	.word	0xbff00000
 800a314:	000fffff 	.word	0x000fffff

0800a318 <scalbn>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	ec55 4b10 	vmov	r4, r5, d0
 800a31e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a322:	4606      	mov	r6, r0
 800a324:	462b      	mov	r3, r5
 800a326:	b99a      	cbnz	r2, 800a350 <scalbn+0x38>
 800a328:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a32c:	4323      	orrs	r3, r4
 800a32e:	d036      	beq.n	800a39e <scalbn+0x86>
 800a330:	4b39      	ldr	r3, [pc, #228]	; (800a418 <scalbn+0x100>)
 800a332:	4629      	mov	r1, r5
 800a334:	ee10 0a10 	vmov	r0, s0
 800a338:	2200      	movs	r2, #0
 800a33a:	f7f6 f96d 	bl	8000618 <__aeabi_dmul>
 800a33e:	4b37      	ldr	r3, [pc, #220]	; (800a41c <scalbn+0x104>)
 800a340:	429e      	cmp	r6, r3
 800a342:	4604      	mov	r4, r0
 800a344:	460d      	mov	r5, r1
 800a346:	da10      	bge.n	800a36a <scalbn+0x52>
 800a348:	a32b      	add	r3, pc, #172	; (adr r3, 800a3f8 <scalbn+0xe0>)
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	e03a      	b.n	800a3c6 <scalbn+0xae>
 800a350:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a354:	428a      	cmp	r2, r1
 800a356:	d10c      	bne.n	800a372 <scalbn+0x5a>
 800a358:	ee10 2a10 	vmov	r2, s0
 800a35c:	4620      	mov	r0, r4
 800a35e:	4629      	mov	r1, r5
 800a360:	f7f5 ffa4 	bl	80002ac <__adddf3>
 800a364:	4604      	mov	r4, r0
 800a366:	460d      	mov	r5, r1
 800a368:	e019      	b.n	800a39e <scalbn+0x86>
 800a36a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a36e:	460b      	mov	r3, r1
 800a370:	3a36      	subs	r2, #54	; 0x36
 800a372:	4432      	add	r2, r6
 800a374:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a378:	428a      	cmp	r2, r1
 800a37a:	dd08      	ble.n	800a38e <scalbn+0x76>
 800a37c:	2d00      	cmp	r5, #0
 800a37e:	a120      	add	r1, pc, #128	; (adr r1, 800a400 <scalbn+0xe8>)
 800a380:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a384:	da1c      	bge.n	800a3c0 <scalbn+0xa8>
 800a386:	a120      	add	r1, pc, #128	; (adr r1, 800a408 <scalbn+0xf0>)
 800a388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a38c:	e018      	b.n	800a3c0 <scalbn+0xa8>
 800a38e:	2a00      	cmp	r2, #0
 800a390:	dd08      	ble.n	800a3a4 <scalbn+0x8c>
 800a392:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a396:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a39a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a39e:	ec45 4b10 	vmov	d0, r4, r5
 800a3a2:	bd70      	pop	{r4, r5, r6, pc}
 800a3a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a3a8:	da19      	bge.n	800a3de <scalbn+0xc6>
 800a3aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a3ae:	429e      	cmp	r6, r3
 800a3b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a3b4:	dd0a      	ble.n	800a3cc <scalbn+0xb4>
 800a3b6:	a112      	add	r1, pc, #72	; (adr r1, 800a400 <scalbn+0xe8>)
 800a3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e2      	bne.n	800a386 <scalbn+0x6e>
 800a3c0:	a30f      	add	r3, pc, #60	; (adr r3, 800a400 <scalbn+0xe8>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7f6 f927 	bl	8000618 <__aeabi_dmul>
 800a3ca:	e7cb      	b.n	800a364 <scalbn+0x4c>
 800a3cc:	a10a      	add	r1, pc, #40	; (adr r1, 800a3f8 <scalbn+0xe0>)
 800a3ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0b8      	beq.n	800a348 <scalbn+0x30>
 800a3d6:	a10e      	add	r1, pc, #56	; (adr r1, 800a410 <scalbn+0xf8>)
 800a3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3dc:	e7b4      	b.n	800a348 <scalbn+0x30>
 800a3de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3e2:	3236      	adds	r2, #54	; 0x36
 800a3e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	4b0c      	ldr	r3, [pc, #48]	; (800a420 <scalbn+0x108>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	e7e8      	b.n	800a3c6 <scalbn+0xae>
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	c2f8f359 	.word	0xc2f8f359
 800a3fc:	01a56e1f 	.word	0x01a56e1f
 800a400:	8800759c 	.word	0x8800759c
 800a404:	7e37e43c 	.word	0x7e37e43c
 800a408:	8800759c 	.word	0x8800759c
 800a40c:	fe37e43c 	.word	0xfe37e43c
 800a410:	c2f8f359 	.word	0xc2f8f359
 800a414:	81a56e1f 	.word	0x81a56e1f
 800a418:	43500000 	.word	0x43500000
 800a41c:	ffff3cb0 	.word	0xffff3cb0
 800a420:	3c900000 	.word	0x3c900000

0800a424 <_init>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr

0800a430 <_fini>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	bf00      	nop
 800a434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a436:	bc08      	pop	{r3}
 800a438:	469e      	mov	lr, r3
 800a43a:	4770      	bx	lr
