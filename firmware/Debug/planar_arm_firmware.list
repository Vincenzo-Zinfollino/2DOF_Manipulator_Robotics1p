
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009b50  08009b50  00019b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f7c  08009f7c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f84  08009f84  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f84  08009f84  00019f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f88  08009f88  00019f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  200001e0  0800a16c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  0800a16c  000208b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110d6  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002509  00000000  00000000  000312e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000337f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  000346b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017916  00000000  00000000  00035498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bab  00000000  00000000  0004cdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009089b  00000000  00000000  0005d959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee1f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e4  00000000  00000000  000ee244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b38 	.word	0x08009b38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009b38 	.word	0x08009b38

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <HAL_UART_RxCpltCallback>:
float ui[2]= {0.0 , 0.0};

float pos_prec[2]={0.f ,0.f};


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b0ab      	sub	sp, #172	; 0xac
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]



    double value;
    unsigned long long encoding;
    uint8_t i = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    /* read the first characters */

    memcpy(str,rx_data,sizeof str);
 8000fca:	4a3f      	ldr	r2, [pc, #252]	; (80010c8 <HAL_UART_RxCpltCallback+0x10c>)
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	2278      	movs	r2, #120	; 0x78
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f005 fe41 	bl	8006c5c <memcpy>

    char  *save_ptr;

    cmd = strtok_r((char*) str, ":", &save_ptr);
 8000fda:	f107 020c 	add.w	r2, r7, #12
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	493a      	ldr	r1, [pc, #232]	; (80010cc <HAL_UART_RxCpltCallback+0x110>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f006 faf9 	bl	80075dc <strtok_r>
 8000fea:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

   // printf("%s %d \n",cmd,!strcmp(cmd, "TRJ"));
    //fflush(stdout);

    if(!strcmp(cmd, "TRJ")){
 8000fee:	4938      	ldr	r1, [pc, #224]	; (80010d0 <HAL_UART_RxCpltCallback+0x114>)
 8000ff0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000ff4:	f7ff f8f4 	bl	80001e0 <strcmp>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d156      	bne.n	80010ac <HAL_UART_RxCpltCallback+0xf0>
    	   count++;
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <HAL_UART_RxCpltCallback+0x118>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <HAL_UART_RxCpltCallback+0x118>)
 8001006:	6013      	str	r3, [r2, #0]

    	/* trj case*/
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        //data = strtok(cmd+sizeof cmd, ":");
	   data = strtok_r(cmd+sizeof cmd, ":",  &save_ptr);
 8001008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800100c:	3304      	adds	r3, #4
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	492e      	ldr	r1, [pc, #184]	; (80010cc <HAL_UART_RxCpltCallback+0x110>)
 8001014:	4618      	mov	r0, r3
 8001016:	f006 fae1 	bl	80075dc <strtok_r>
 800101a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        while(data != NULL){
 800101e:	e032      	b.n	8001086 <HAL_UART_RxCpltCallback+0xca>
            if(i == 6) break; /* reading penup */
 8001020:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001024:	2b06      	cmp	r3, #6
 8001026:	d033      	beq.n	8001090 <HAL_UART_RxCpltCallback+0xd4>
            // value = "0x"; /* will contain the value extracted from the received string */
            encoding = strtoull(data, NULL, 16);
 8001028:	2210      	movs	r2, #16
 800102a:	2100      	movs	r1, #0
 800102c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001030:	f006 fbfc 	bl	800782c <strtoull>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800103c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
            memcpy(&value, &encoding, sizeof value);
 8001040:	e9c7 2306 	strd	r2, r3, [r7, #24]

            // value = strcat(value, data); /* string concatenation REF: https://www.programiz.com/c-programming/library-function/string.h/strcat */
            rbpush((((ringbuffer_t *) &manip)+i), (float) value); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 8001044:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001048:	222c      	movs	r2, #44	; 0x2c
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	4a22      	ldr	r2, [pc, #136]	; (80010d8 <HAL_UART_RxCpltCallback+0x11c>)
 8001050:	189c      	adds	r4, r3, r2
 8001052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fddd 	bl	8000c18 <__aeabi_d2f>
 800105e:	4603      	mov	r3, r0
 8001060:	ee00 3a10 	vmov	s0, r3
 8001064:	4620      	mov	r0, r4
 8001066:	f001 fd2f 	bl	8002ac8 <rbpush>
            data = strtok_r(NULL, ":", &save_ptr);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	461a      	mov	r2, r3
 8001070:	4916      	ldr	r1, [pc, #88]	; (80010cc <HAL_UART_RxCpltCallback+0x110>)
 8001072:	2000      	movs	r0, #0
 8001074:	f006 fab2 	bl	80075dc <strtok_r>
 8001078:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
            i++;
 800107c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001080:	3301      	adds	r3, #1
 8001082:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        while(data != NULL){
 8001086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1c8      	bne.n	8001020 <HAL_UART_RxCpltCallback+0x64>
 800108e:	e000      	b.n	8001092 <HAL_UART_RxCpltCallback+0xd6>
            if(i == 6) break; /* reading penup */
 8001090:	bf00      	nop
        }
        rbpush(&manip.penup, (float) atoi(data));
 8001092:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001096:	f005 fdb3 	bl	8006c00 <atoi>
 800109a:	ee07 0a90 	vmov	s15, r0
 800109e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <HAL_UART_RxCpltCallback+0x120>)
 80010a8:	f001 fd0e 	bl	8002ac8 <rbpush>
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(huart, rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 80010ac:	2278      	movs	r2, #120	; 0x78
 80010ae:	4906      	ldr	r1, [pc, #24]	; (80010c8 <HAL_UART_RxCpltCallback+0x10c>)
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f004 fcf0 	bl	8005a96 <HAL_UART_Receive_DMA>


    //__enable_irq();

       return
	   count++;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <HAL_UART_RxCpltCallback+0x118>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <HAL_UART_RxCpltCallback+0x118>)
 80010be:	6013      	str	r3, [r2, #0]

		  //HAL_UART_Receive_DMA(huart, rx_data, 121);



}
 80010c0:	37ac      	adds	r7, #172	; 0xac
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001fc 	.word	0x200001fc
 80010cc:	08009b50 	.word	0x08009b50
 80010d0:	08009b54 	.word	0x08009b54
 80010d4:	2000062c 	.word	0x2000062c
 80010d8:	20000274 	.word	0x20000274
 80010dc:	2000037c 	.word	0x2000037c

080010e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
    // TODO: Implement limit switch handling
    uint32_t now;
    now = HAL_GetTick();
 80010ea:	f002 f9dd 	bl	80034a8 <HAL_GetTick>
 80010ee:	60f8      	str	r0, [r7, #12]
    if((now - previous_trigger) > DEBOUNCE_DELAY){
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_GPIO_EXTI_Callback+0x54>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b32      	cmp	r3, #50	; 0x32
 80010fa:	d916      	bls.n	800112a <HAL_GPIO_EXTI_Callback+0x4a>
        if(!triggered){
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_GPIO_EXTI_Callback+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d108      	bne.n	8001116 <HAL_GPIO_EXTI_Callback+0x36>
          limit_switch *= -1;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	425b      	negs	r3, r3
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <HAL_GPIO_EXTI_Callback+0x5c>)
 800110c:	6013      	str	r3, [r2, #0]
            // SECTION - DEBUG
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800110e:	2120      	movs	r1, #32
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <HAL_GPIO_EXTI_Callback+0x60>)
 8001112:	f003 f8aa 	bl	800426a <HAL_GPIO_TogglePin>
            // !SECTION - DEBUG
        }
        triggered = 1-triggered;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_GPIO_EXTI_Callback+0x58>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f1c3 0301 	rsb	r3, r3, #1
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_GPIO_EXTI_Callback+0x58>)
 8001122:	701a      	strb	r2, [r3, #0]
        previous_trigger = now;
 8001124:	4a03      	ldr	r2, [pc, #12]	; (8001134 <HAL_GPIO_EXTI_Callback+0x54>)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6013      	str	r3, [r2, #0]
    }
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200005e4 	.word	0x200005e4
 8001138:	200005e8 	.word	0x200005e8
 800113c:	20000000 	.word	0x20000000
 8001140:	40020000 	.word	0x40020000

08001144 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d102      	bne.n	800115c <HAL_TIM_PeriodElapsedCallback+0x18>
		/* check if it is the proper instance */
		read_encoders(&manip);
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001158:	f000 fa4e 	bl	80015f8 <read_encoders>

	}
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40014400 	.word	0x40014400
 8001168:	20000274 	.word	0x20000274

0800116c <ITM_Sendchar>:

#define DEMCR               *((volatile uint32_t*) 0xE000EDFCU)
#define ITM_STIMULUS_PORT0  *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN        *((volatile uint32_t*) 0xE0000E00)

void ITM_Sendchar(uint8_t ch){
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <ITM_Sendchar+0x48>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <ITM_Sendchar+0x48>)
 800117c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001180:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <ITM_Sendchar+0x4c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <ITM_Sendchar+0x4c>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(! (ITM_STIMULUS_PORT0 & 1));
 800118e:	bf00      	nop
 8001190:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f8      	beq.n	8001190 <ITM_Sendchar+0x24>

	// Write to IT Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 800119e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	6013      	str	r3, [r2, #0]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000edfc 	.word	0xe000edfc
 80011b8:	e0000e00 	.word	0xe0000e00

080011bc <_write>:

int _write(int file,char *ptr, int len){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]

	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e009      	b.n	80011e2 <_write+0x26>
	{
		ITM_Sendchar(*ptr++);
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	60ba      	str	r2, [r7, #8]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ffc8 	bl	800116c <ITM_Sendchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbf1      	blt.n	80011ce <_write+0x12>
	}
	return len;
 80011ea:	687b      	ldr	r3, [r7, #4]

}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <init_man>:
- TIM_HandleTypeDef *htim2: pointer to the timer used to decode the output of the second encode;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip, TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 8001200:	2300      	movs	r3, #0
 8001202:	75fb      	strb	r3, [r7, #23]
 8001204:	e00b      	b.n	800121e <init_man+0x2a>
        rbclear((((ringbuffer_t *) manip)+i));
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	222c      	movs	r2, #44	; 0x2c
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fd36 	bl	8002c84 <rbclear>
    for(i = 0; i < 14; i++){
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	3301      	adds	r3, #1
 800121c:	75fb      	strb	r3, [r7, #23]
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	2b0d      	cmp	r3, #13
 8001222:	d9f0      	bls.n	8001206 <init_man+0x12>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 8001224:	2300      	movs	r3, #0
 8001226:	75fb      	strb	r3, [r7, #23]
 8001228:	e012      	b.n	8001250 <init_man+0x5c>
        manip->B[i] = (float) 0;
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	339a      	adds	r3, #154	; 0x9a
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
        manip->C[i] = (float) 0;
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	339e      	adds	r3, #158	; 0x9e
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 4; i++){
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	3301      	adds	r3, #1
 800124e:	75fb      	strb	r3, [r7, #23]
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d9e9      	bls.n	800122a <init_man+0x36>
    }
    manip->htim_encoder1 = htim1;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    manip->htim_encoder2 = htim2;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <speed_estimation>:
- float *a_est: pointer to the variable that will hold the acceleration estimation;
@outputs: 
- void;
@#
*/
void speed_estimation(ringbuffer_t *q_actual, ringbuffer_t *dq_actual, ringbuffer_t *ddq_actual, float reduction, float *v_est, float *a_est){
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b0d6      	sub	sp, #344	; 0x158
 8001274:	af00      	add	r7, sp, #0
 8001276:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 800127a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
 800127e:	6020      	str	r0, [r4, #0]
 8001280:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8001284:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
 8001288:	6001      	str	r1, [r0, #0]
 800128a:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800128e:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8001292:	600a      	str	r2, [r1, #0]
 8001294:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001298:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800129c:	ed82 0a00 	vstr	s0, [r2]
 80012a0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80012a4:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80012a8:	6013      	str	r3, [r2, #0]
	*a_est = (a[3]-a[2])/T_S;
    return;
    */

    float prev, succ, vel,acc, a, b;
    succ=0;
 80012aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
    prev=0;
 80012b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 5; i++){
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 80012cc:	e023      	b.n	8001316 <speed_estimation+0xa6>
    	rbget(q_actual, i, &a);
 80012ce:	f997 1157 	ldrsb.w	r1, [r7, #343]	; 0x157
 80012d2:	f107 021c 	add.w	r2, r7, #28
 80012d6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	f001 fc90 	bl	8002c04 <rbget>
    	prev+=a;
 80012e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001300:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001304:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001308:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < 5; i++){
 800130c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001310:	3301      	adds	r3, #1
 8001312:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001316:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800131a:	2b04      	cmp	r3, #4
 800131c:	d9d7      	bls.n	80012ce <speed_estimation+0x5e>
    }
    for(i = 0; i < 5; i++){
 800131e:	2300      	movs	r3, #0
 8001320:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001324:	e026      	b.n	8001374 <speed_estimation+0x104>
    	rbget(q_actual, 5+i, &a);
 8001326:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800132a:	3305      	adds	r3, #5
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b259      	sxtb	r1, r3
 8001330:	f107 021c 	add.w	r2, r7, #28
 8001334:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001338:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	f001 fc61 	bl	8002c04 <rbget>
    	succ+=a;
 8001342:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001352:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001366:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < 5; i++){
 800136a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800136e:	3301      	adds	r3, #1
 8001370:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001374:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001378:	2b04      	cmp	r3, #4
 800137a:	d9d4      	bls.n	8001326 <speed_estimation+0xb6>
    }
    prev /=5;
 800137c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001380:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001384:	ed93 7a00 	vldr	s14, [r3]
 8001388:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800138c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001390:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001398:	edc3 7a00 	vstr	s15, [r3]
    succ /=5;
 800139c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013a4:	ed93 7a00 	vldr	s14, [r3]
 80013a8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80013ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013b8:	edc3 7a00 	vstr	s15, [r3]



    //rbget(q_actual,RBUF_SZ-1, &pos_succ);
    //rbget(q_actual,RBUF_SZ-2, &pos_prev);
    rblast(dq_actual,&vel);
 80013bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80013c0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80013c8:	4611      	mov	r1, r2
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	f001 fbea 	bl	8002ba4 <rblast>


    *v_est=0.8546*vel+((1-0.8546)*(succ-prev)/(T_C*5) );
 80013d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8cc 	bl	8000578 <__aeabi_f2d>
 80013e0:	a34f      	add	r3, pc, #316	; (adr r3, 8001520 <speed_estimation+0x2b0>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff f91f 	bl	8000628 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	461d      	mov	r5, r3
 80013f2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013fa:	ed93 7a00 	vldr	s14, [r3]
 80013fe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001402:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001406:	edd3 7a00 	vldr	s15, [r3]
 800140a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140e:	ee17 0a90 	vmov	r0, s15
 8001412:	f7ff f8b1 	bl	8000578 <__aeabi_f2d>
 8001416:	a344      	add	r3, pc, #272	; (adr r3, 8001528 <speed_estimation+0x2b8>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f904 	bl	8000628 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	a341      	add	r3, pc, #260	; (adr r3, 8001530 <speed_estimation+0x2c0>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff fa25 	bl	800087c <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7fe ff3f 	bl	80002bc <__adddf3>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fbe7 	bl	8000c18 <__aeabi_d2f>
 800144a:	4602      	mov	r2, r0
 800144c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001450:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	601a      	str	r2, [r3, #0]


    rbget(dq_actual, RBUF_SZ-1, &succ);
 8001458:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800145c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001460:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001464:	2109      	movs	r1, #9
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	f001 fbcc 	bl	8002c04 <rbget>
    rbget(dq_actual, RBUF_SZ-2, &prev);
 800146c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001470:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001474:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001478:	2108      	movs	r1, #8
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	f001 fbc2 	bl	8002c04 <rbget>
    //*a_est = (succ-prev)/T_C;
    rblast(ddq_actual,&acc);
 8001480:	f107 0220 	add.w	r2, r7, #32
 8001484:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001488:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800148c:	4611      	mov	r1, r2
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	f001 fb88 	bl	8002ba4 <rblast>
    *a_est= 0.9245*acc+((1- 0.9245)*(succ-prev)/(T_C) );
 8001494:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001498:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f86a 	bl	8000578 <__aeabi_f2d>
 80014a4:	a324      	add	r3, pc, #144	; (adr r3, 8001538 <speed_estimation+0x2c8>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff f8bd 	bl	8000628 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4614      	mov	r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80014ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80014c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d2:	ee17 0a90 	vmov	r0, s15
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a319      	add	r3, pc, #100	; (adr r3, 8001540 <speed_estimation+0x2d0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	a316      	add	r3, pc, #88	; (adr r3, 8001548 <speed_estimation+0x2d8>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f9c3 	bl	800087c <__aeabi_ddiv>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4620      	mov	r0, r4
 80014fc:	4629      	mov	r1, r5
 80014fe:	f7fe fedd 	bl	80002bc <__adddf3>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb85 	bl	8000c18 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001514:	601a      	str	r2, [r3, #0]


}
 8001516:	bf00      	nop
 8001518:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800151c:	46bd      	mov	sp, r7
 800151e:	bdb0      	pop	{r4, r5, r7, pc}
 8001520:	19652bd4 	.word	0x19652bd4
 8001524:	3feb58e2 	.word	0x3feb58e2
 8001528:	9a6b50b0 	.word	0x9a6b50b0
 800152c:	3fc29c77 	.word	0x3fc29c77
 8001530:	9999999a 	.word	0x9999999a
 8001534:	3fa99999 	.word	0x3fa99999
 8001538:	0624dd2f 	.word	0x0624dd2f
 800153c:	3fed9581 	.word	0x3fed9581
 8001540:	ced91688 	.word	0xced91688
 8001544:	3fb353f7 	.word	0x3fb353f7
 8001548:	47ae147b 	.word	0x47ae147b
 800154c:	3f847ae1 	.word	0x3f847ae1

08001550 <init_rate>:
- uint32_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint32_t ms){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
    rate->last_time = HAL_GetTick();
 800155a:	f001 ffa5 	bl	80034a8 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	601a      	str	r2, [r3, #0]
    rate->delta_time = ms;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	605a      	str	r2, [r3, #4]
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <rate_sleep>:
- rate_t *rate: pointer to the rate struct;
@outputs: 
- void;
@#
*/
void rate_sleep(rate_t *rate){
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
    float now, interval;
    now = HAL_GetTick();
 800157a:	f001 ff95 	bl	80034a8 <HAL_GetTick>
 800157e:	ee07 0a90 	vmov	s15, r0
 8001582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001586:	edc7 7a03 	vstr	s15, [r7, #12]
    interval = (uint32_t) (now - rate->last_time); /* time passed from the last rate_sleep call */
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001596:	ed97 7a03 	vldr	s14, [r7, #12]
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a6:	edc7 7a02 	vstr	s15, [r7, #8]
    /* wait until enough time has passed from the last rate_sleep call */
    if(interval < rate->delta_time){
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80015ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	d50f      	bpl.n	80015e4 <rate_sleep+0x72>
        HAL_Delay(rate->delta_time-interval);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015dc:	ee17 0a90 	vmov	r0, s15
 80015e0:	f001 ff6e 	bl	80034c0 <HAL_Delay>
    }
    /* if enough time has passed, save the time stamp and go on with the process */
    rate->last_time = HAL_GetTick();
 80015e4:	f001 ff60 	bl	80034a8 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	601a      	str	r2, [r3, #0]
    return;
 80015ee:	bf00      	nop
}
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <read_encoders>:
@inputs: 
- man_t *manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void read_encoders(man_t *manip){
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    uint16_t counter; 
    float displacement1, displacement2;
    // float v_est, a_est; /* used to hold temporarily the estimations of speed and acceleration */
    TIM_HandleTypeDef *htim1, *htim2;

    htim1 = manip->htim_encoder1; /* pointer to the timer struct that decodes the first encoder output */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8001606:	613b      	str	r3, [r7, #16]
    htim2 = manip->htim_encoder2; /* pointer to the timer struct that decodes the first encoder output */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800160e:	60fb      	str	r3, [r7, #12]

    /* first encoder */
    counter = (htim1->Instance->CNT);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim1->Instance->ARR){
 8001618:	8bfa      	ldrh	r2, [r7, #30]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	429a      	cmp	r2, r3
 8001622:	d309      	bcc.n	8001638 <read_encoders+0x40>
        counter = (htim1->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	b29b      	uxth	r3, r3
 800162c:	3b01      	subs	r3, #1
 800162e:	83fb      	strh	r3, [r7, #30]
        htim1->Instance->CNT = counter; /* correct cnt value */
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	8bfa      	ldrh	r2, [r7, #30]
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
    }

    displacement1 = (float) (2*M_PI*counter/(htim1->Instance->ARR));
 8001638:	8bfb      	ldrh	r3, [r7, #30]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff8a 	bl	8000554 <__aeabi_i2d>
 8001640:	a35f      	add	r3, pc, #380	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffef 	bl	8000628 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4614      	mov	r4, r2
 8001650:	461d      	mov	r5, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff6b 	bl	8000534 <__aeabi_ui2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	f7ff f909 	bl	800087c <__aeabi_ddiv>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff fad1 	bl	8000c18 <__aeabi_d2f>
 8001676:	4603      	mov	r3, r0
 8001678:	61bb      	str	r3, [r7, #24]

    /* second encoder */
    counter = (htim2->Instance->CNT);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim2->Instance->ARR){
 8001682:	8bfa      	ldrh	r2, [r7, #30]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	429a      	cmp	r2, r3
 800168c:	d309      	bcc.n	80016a2 <read_encoders+0xaa>
        counter = (htim2->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	b29b      	uxth	r3, r3
 8001696:	3b01      	subs	r3, #1
 8001698:	83fb      	strh	r3, [r7, #30]
        htim2->Instance->CNT = counter;  /* correct cnt value */
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	8bfa      	ldrh	r2, [r7, #30]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
    }
    displacement2 = (float) (2*M_PI) - (2*M_PI*counter/(htim2->Instance->ARR)); /* the motor is upside down */
 80016a2:	8bfb      	ldrh	r3, [r7, #30]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff55 	bl	8000554 <__aeabi_i2d>
 80016aa:	a345      	add	r3, pc, #276	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7fe ffba 	bl	8000628 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4614      	mov	r4, r2
 80016ba:	461d      	mov	r5, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff36 	bl	8000534 <__aeabi_ui2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7ff f8d4 	bl	800087c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	a13e      	add	r1, pc, #248	; (adr r1, 80017d4 <read_encoders+0x1dc>)
 80016da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016de:	f7fe fdeb 	bl	80002b8 <__aeabi_dsub>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fa95 	bl	8000c18 <__aeabi_d2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	617b      	str	r3, [r7, #20]

    // SECTION DEBUG
    // rbpush(&timestamps, (float) HAL_GetTick()/1000.0);
    // !SECTION DEBUG

    if(displacement1 > 2*M_PI){
 80016f2:	69b8      	ldr	r0, [r7, #24]
 80016f4:	f7fe ff40 	bl	8000578 <__aeabi_f2d>
 80016f8:	a331      	add	r3, pc, #196	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7ff fa23 	bl	8000b48 <__aeabi_dcmpgt>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <read_encoders+0x114>
    	displacement1 = 2*M_PI; /* clamping */
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <read_encoders+0x1d8>)
 800170a:	61bb      	str	r3, [r7, #24]
	}
	if(displacement2 > 2*M_PI){
 800170c:	6978      	ldr	r0, [r7, #20]
 800170e:	f7fe ff33 	bl	8000578 <__aeabi_f2d>
 8001712:	a32b      	add	r3, pc, #172	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7ff fa16 	bl	8000b48 <__aeabi_dcmpgt>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <read_encoders+0x12e>
		displacement2 = 2*M_PI; /* clamping */
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <read_encoders+0x1d8>)
 8001724:	617b      	str	r3, [r7, #20]
	}
    if(displacement1 > M_PI){
 8001726:	69b8      	ldr	r0, [r7, #24]
 8001728:	f7fe ff26 	bl	8000578 <__aeabi_f2d>
 800172c:	a326      	add	r3, pc, #152	; (adr r3, 80017c8 <read_encoders+0x1d0>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7ff fa09 	bl	8000b48 <__aeabi_dcmpgt>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00f      	beq.n	800175c <read_encoders+0x164>
    	displacement1 = displacement1 - (2*M_PI); /* redefining the domain between -PI and +PI */
 800173c:	69b8      	ldr	r0, [r7, #24]
 800173e:	f7fe ff1b 	bl	8000578 <__aeabi_f2d>
 8001742:	a31f      	add	r3, pc, #124	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe fdb6 	bl	80002b8 <__aeabi_dsub>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f7ff fa60 	bl	8000c18 <__aeabi_d2f>
 8001758:	4603      	mov	r3, r0
 800175a:	61bb      	str	r3, [r7, #24]
    }
    if(displacement2 > M_PI){
 800175c:	6978      	ldr	r0, [r7, #20]
 800175e:	f7fe ff0b 	bl	8000578 <__aeabi_f2d>
 8001762:	a319      	add	r3, pc, #100	; (adr r3, 80017c8 <read_encoders+0x1d0>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f9ee 	bl	8000b48 <__aeabi_dcmpgt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00f      	beq.n	8001792 <read_encoders+0x19a>
    	displacement2 = displacement2 - (2*M_PI); /* redefining the domain between -PI and +PI */
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7fe ff00 	bl	8000578 <__aeabi_f2d>
 8001778:	a311      	add	r3, pc, #68	; (adr r3, 80017c0 <read_encoders+0x1c8>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe fd9b 	bl	80002b8 <__aeabi_dsub>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff fa45 	bl	8000c18 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	617b      	str	r3, [r7, #20]
    /*
    uint8_t dir1 = (uint8_t) (htim1->Instance->CR1 >> 4) & 1;
    uint8_t dir2 = (uint8_t) (htim2->Instance->CR1 >> 4) & 1;
    */
    // SECTION DEBUG
    rbpush(&manip->q0_actual, displacement1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001798:	ed97 0a06 	vldr	s0, [r7, #24]
 800179c:	4618      	mov	r0, r3
 800179e:	f001 f993 	bl	8002ac8 <rbpush>
    rbpush(&manip->q1_actual, displacement2);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80017a8:	ed97 0a05 	vldr	s0, [r7, #20]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 f98b 	bl	8002ac8 <rbpush>

	rbpush(&manip->dq1_actual, v_est);
	rbpush(&manip->ddq1_actual, a_est);
    // !SECTION DEBUG
	*/
}
 80017b2:	bf00      	nop
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	54442d18 	.word	0x54442d18
 80017c4:	401921fb 	.word	0x401921fb
 80017c8:	54442d18 	.word	0x54442d18
 80017cc:	400921fb 	.word	0x400921fb
 80017d0:	40c90fdb 	.word	0x40c90fdb
 80017d4:	60000000 	.word	0x60000000
 80017d8:	401921fb 	.word	0x401921fb

080017dc <update_speeds>:

void update_speeds(man_t *manip){
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b087      	sub	sp, #28
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	6078      	str	r0, [r7, #4]
	float v_est, a_est;
	speed_estimation(&manip->q0_actual, &manip->dq0_actual,&manip->ddq0_actual, reduction1, &v_est, &a_est);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f503 709a 	add.w	r0, r3, #308	; 0x134
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f503 71c6 	add.w	r1, r3, #396	; 0x18c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 80017f6:	eddf 7a28 	vldr	s15, [pc, #160]	; 8001898 <update_speeds+0xbc>
 80017fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017fe:	f107 040c 	add.w	r4, r7, #12
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4623      	mov	r3, r4
 800180a:	eeb0 0a67 	vmov.f32	s0, s15
 800180e:	f7ff fd2f 	bl	8001270 <speed_estimation>
	//disp1 = v_est;
	rbpush(&manip->dq0_actual, v_est);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001818:	edd7 7a03 	vldr	s15, [r7, #12]
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	4618      	mov	r0, r3
 8001822:	f001 f951 	bl	8002ac8 <rbpush>
	rbpush(&manip->ddq0_actual, a_est);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800182c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001830:	eeb0 0a67 	vmov.f32	s0, s15
 8001834:	4618      	mov	r0, r3
 8001836:	f001 f947 	bl	8002ac8 <rbpush>

	speed_estimation(&manip->q1_actual, &manip->dq1_actual,&manip->ddq1_actual, reduction2, &v_est, &a_est);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800184c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800189c <update_speeds+0xc0>
 8001850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001854:	f107 040c 	add.w	r4, r7, #12
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	4623      	mov	r3, r4
 8001860:	eeb0 0a67 	vmov.f32	s0, s15
 8001864:	f7ff fd04 	bl	8001270 <speed_estimation>
	//disp2 = v_est;
	rbpush(&manip->dq1_actual, v_est);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800186e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	4618      	mov	r0, r3
 8001878:	f001 f926 	bl	8002ac8 <rbpush>
	rbpush(&manip->ddq1_actual, a_est);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001882:	edd7 7a02 	vldr	s15, [r7, #8]
 8001886:	eeb0 0a67 	vmov.f32	s0, s15
 800188a:	4618      	mov	r0, r3
 800188c:	f001 f91c 	bl	8002ac8 <rbpush>
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	0000000a 	.word	0x0000000a
 800189c:	00000005 	.word	0x00000005

080018a0 <apply_position_input>:


}


void apply_position_input(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, float *u , float *pos){
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b08e      	sub	sp, #56	; 0x38
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
    __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
    htim1->Instance->EGR = TIM_EGR_UG;
    */
    // rad2stepdir(u[0], RESOLUTION, (float) 1/T_C, &steps, &dir);

    if (ABS(u[0]-pos[0])<0.01){
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	ed93 7a00 	vldr	s14, [r3]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	bfac      	ite	ge
 80018c8:	2301      	movge	r3, #1
 80018ca:	2300      	movlt	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	ed93 7a00 	vldr	s14, [r3]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	bf94      	ite	ls
 80018ea:	2301      	movls	r3, #1
 80018ec:	2300      	movhi	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001912:	ee17 0a90 	vmov	r0, s15
 8001916:	f7fe fe2f 	bl	8000578 <__aeabi_f2d>
 800191a:	a3c3      	add	r3, pc, #780	; (adr r3, 8001c28 <apply_position_input+0x388>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7ff f8f4 	bl	8000b0c <__aeabi_dcmplt>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <apply_position_input+0x90>
    	tc0= 1000000;
 800192a:	4bc3      	ldr	r3, [pc, #780]	; (8001c38 <apply_position_input+0x398>)
 800192c:	623b      	str	r3, [r7, #32]
 800192e:	e055      	b.n	80019dc <apply_position_input+0x13c>
    }else{
    tc0 = sqrt(2*M_PI*ABS(u[0]-pos[0])/1.05);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	ed93 7a00 	vldr	s14, [r3]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001940:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	bfac      	ite	ge
 800194a:	2301      	movge	r3, #1
 800194c:	2300      	movlt	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	ed93 7a00 	vldr	s14, [r3]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001962:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	bf94      	ite	ls
 800196c:	2301      	movls	r3, #1
 800196e:	2300      	movhi	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	b25b      	sxtb	r3, r3
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001994:	ee17 0a90 	vmov	r0, s15
 8001998:	f7fe fdee 	bl	8000578 <__aeabi_f2d>
 800199c:	a39e      	add	r3, pc, #632	; (adr r3, 8001c18 <apply_position_input+0x378>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fe41 	bl	8000628 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	a39c      	add	r3, pc, #624	; (adr r3, 8001c20 <apply_position_input+0x380>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	f7fe ff62 	bl	800087c <__aeabi_ddiv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	ec43 2b17 	vmov	d7, r2, r3
 80019c0:	eeb0 0a47 	vmov.f32	s0, s14
 80019c4:	eef0 0a67 	vmov.f32	s1, s15
 80019c8:	f007 ffd8 	bl	800997c <sqrt>
 80019cc:	ec53 2b10 	vmov	r2, r3, d0
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f920 	bl	8000c18 <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	623b      	str	r3, [r7, #32]
    }

    if (ABS(u[1]-pos[1])<0.01){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3304      	adds	r3, #4
 80019e0:	ed93 7a00 	vldr	s14, [r3]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	3304      	adds	r3, #4
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	bfac      	ite	ge
 80019fa:	2301      	movge	r3, #1
 80019fc:	2300      	movlt	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3304      	adds	r3, #4
 8001a06:	ed93 7a00 	vldr	s14, [r3]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	bf94      	ite	ls
 8001a20:	2301      	movls	r3, #1
 8001a22:	2300      	movhi	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3304      	adds	r3, #4
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	3304      	adds	r3, #4
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4c:	ee17 0a90 	vmov	r0, s15
 8001a50:	f7fe fd92 	bl	8000578 <__aeabi_f2d>
 8001a54:	a374      	add	r3, pc, #464	; (adr r3, 8001c28 <apply_position_input+0x388>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7ff f857 	bl	8000b0c <__aeabi_dcmplt>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <apply_position_input+0x1ca>
        	tc1= 1000000;
 8001a64:	4b74      	ldr	r3, [pc, #464]	; (8001c38 <apply_position_input+0x398>)
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	e05b      	b.n	8001b22 <apply_position_input+0x282>
        }else{
        tc1 = sqrt(2*M_PI*ABS(u[1]-pos[1])/0.85);   //1.5 ----> come se fosse un jerk
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	3304      	adds	r3, #4
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a86:	bfac      	ite	ge
 8001a88:	2301      	movge	r3, #1
 8001a8a:	2300      	movlt	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3304      	adds	r3, #4
 8001a94:	ed93 7a00 	vldr	s14, [r3]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	bf94      	ite	ls
 8001aae:	2301      	movls	r3, #1
 8001ab0:	2300      	movhi	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	edd3 7a00 	vldr	s15, [r3]
 8001ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ada:	ee17 0a90 	vmov	r0, s15
 8001ade:	f7fe fd4b 	bl	8000578 <__aeabi_f2d>
 8001ae2:	a34d      	add	r3, pc, #308	; (adr r3, 8001c18 <apply_position_input+0x378>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fd9e 	bl	8000628 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	a34e      	add	r3, pc, #312	; (adr r3, 8001c30 <apply_position_input+0x390>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe febf 	bl	800087c <__aeabi_ddiv>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	ec43 2b17 	vmov	d7, r2, r3
 8001b06:	eeb0 0a47 	vmov.f32	s0, s14
 8001b0a:	eef0 0a67 	vmov.f32	s1, s15
 8001b0e:	f007 ff35 	bl	800997c <sqrt>
 8001b12:	ec53 2b10 	vmov	r2, r3, d0
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f87d 	bl	8000c18 <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	61fb      	str	r3, [r7, #28]
        }


    u0=(u[0]-pos[0])/tc0;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b32:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b3a:	edc7 7a06 	vstr	s15, [r7, #24]
    u1=(u[1]-pos[1])/tc1;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b52:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b5a:	edc7 7a05 	vstr	s15, [r7, #20]

    //printf("%d ;%f ; %f \n",count ,u1, tc1 );
    //fflush(stdout);

        dir1 = u0 < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 8001b5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6a:	bf4c      	ite	mi
 8001b6c:	2301      	movmi	r3, #1
 8001b6e:	2300      	movpl	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
       // dir1 = 1; // DEBUG
       HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, dir1);
 8001b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b80:	482e      	ldr	r0, [pc, #184]	; (8001c3c <apply_position_input+0x39c>)
 8001b82:	f002 fb59 	bl	8004238 <HAL_GPIO_WritePin>

       dir2 = u1 > 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 8001b86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	bfcc      	ite	gt
 8001b94:	2301      	movgt	r3, #1
 8001b96:	2300      	movle	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	74fb      	strb	r3, [r7, #19]
       // dir2 = 1; // DEBUG
       HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, dir2);
 8001b9c:	7cfb      	ldrb	r3, [r7, #19]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4827      	ldr	r0, [pc, #156]	; (8001c40 <apply_position_input+0x3a0>)
 8001ba4:	f002 fb48 	bl	8004238 <HAL_GPIO_WritePin>




		   prescaler1= (uint16_t) 8400;//12000 ;//8400;
 8001ba8:	f242 03d0 	movw	r3, #8400	; 0x20d0
 8001bac:	823b      	strh	r3, [r7, #16]
		   f=HAL_RCC_GetPCLK1Freq()*2;
 8001bae:	f002 ffff 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
		   ARR= ABS(u0) < 0.01 ? 0:(uint32_t)  (RESOLUTION*f/(ABS(u0)*reduction1*16*prescaler1));
 8001bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	bfac      	ite	ge
 8001bc6:	2301      	movge	r3, #1
 8001bc8:	2300      	movlt	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	bf94      	ite	ls
 8001bdc:	2301      	movls	r3, #1
 8001bde:	2300      	movhi	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf8:	ee17 0a90 	vmov	r0, s15
 8001bfc:	f7fe fcbc 	bl	8000578 <__aeabi_f2d>
 8001c00:	a309      	add	r3, pc, #36	; (adr r3, 8001c28 <apply_position_input+0x388>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe ff81 	bl	8000b0c <__aeabi_dcmplt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d019      	beq.n	8001c44 <apply_position_input+0x3a4>
 8001c10:	2300      	movs	r3, #0
 8001c12:	e066      	b.n	8001ce2 <apply_position_input+0x442>
 8001c14:	f3af 8000 	nop.w
 8001c18:	54442d18 	.word	0x54442d18
 8001c1c:	401921fb 	.word	0x401921fb
 8001c20:	cccccccd 	.word	0xcccccccd
 8001c24:	3ff0cccc 	.word	0x3ff0cccc
 8001c28:	47ae147b 	.word	0x47ae147b
 8001c2c:	3f847ae1 	.word	0x3f847ae1
 8001c30:	33333333 	.word	0x33333333
 8001c34:	3feb3333 	.word	0x3feb3333
 8001c38:	49742400 	.word	0x49742400
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c46:	f7fe fc75 	bl	8000534 <__aeabi_ui2d>
 8001c4a:	a387      	add	r3, pc, #540	; (adr r3, 8001e68 <apply_position_input+0x5c8>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fcea 	bl	8000628 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	bfac      	ite	ge
 8001c6a:	2301      	movge	r3, #1
 8001c6c:	2300      	movlt	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7e:	bf94      	ite	ls
 8001c80:	2301      	movls	r3, #1
 8001c82:	2300      	movhi	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c94:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001cae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cb2:	8a3b      	ldrh	r3, [r7, #16]
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc0:	ee17 0a90 	vmov	r0, s15
 8001cc4:	f7fe fc58 	bl	8000578 <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f7fe fdd4 	bl	800087c <__aeabi_ddiv>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f7fe ff7c 	bl	8000bd8 <__aeabi_d2uiz>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
		   CCR= ARR /2;
 8001ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce6:	085b      	lsrs	r3, r3, #1
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
		   __HAL_TIM_SET_PRESCALER(htim1, prescaler1);//2625
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	8a3a      	ldrh	r2, [r7, #16]
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_AUTORELOAD(htim1, ARR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cfe:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34
		htim1->Instance->EGR = TIM_EGR_UG;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	615a      	str	r2, [r3, #20]

   	prescaler2= (uint16_t) 8400;//12000 ;//8400;
 8001d10:	f242 03d0 	movw	r3, #8400	; 0x20d0
 8001d14:	86fb      	strh	r3, [r7, #54]	; 0x36
   	f=HAL_RCC_GetPCLK1Freq()*2;
 8001d16:	f002 ff4b 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
   	ARR=  ABS(u1) < 0.01 ? 0:(uint32_t)  (RESOLUTION*f/(ABS(u1)*reduction2*16*prescaler2));
 8001d20:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	bfac      	ite	ge
 8001d2e:	2301      	movge	r3, #1
 8001d30:	2300      	movlt	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	bf94      	ite	ls
 8001d44:	2301      	movls	r3, #1
 8001d46:	2300      	movhi	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d60:	ee17 0a90 	vmov	r0, s15
 8001d64:	f7fe fc08 	bl	8000578 <__aeabi_f2d>
 8001d68:	a341      	add	r3, pc, #260	; (adr r3, 8001e70 <apply_position_input+0x5d0>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fecd 	bl	8000b0c <__aeabi_dcmplt>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <apply_position_input+0x4dc>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e04e      	b.n	8001e1a <apply_position_input+0x57a>
 8001d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d7e:	f7fe fbd9 	bl	8000534 <__aeabi_ui2d>
 8001d82:	a339      	add	r3, pc, #228	; (adr r3, 8001e68 <apply_position_input+0x5c8>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fc4e 	bl	8000628 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4614      	mov	r4, r2
 8001d92:	461d      	mov	r5, r3
 8001d94:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	bfac      	ite	ge
 8001da2:	2301      	movge	r3, #1
 8001da4:	2300      	movlt	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	bf94      	ite	ls
 8001db8:	2301      	movls	r3, #1
 8001dba:	2300      	movhi	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd4:	2305      	movs	r3, #5
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001de6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df8:	ee17 0a90 	vmov	r0, s15
 8001dfc:	f7fe fbbc 	bl	8000578 <__aeabi_f2d>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4620      	mov	r0, r4
 8001e06:	4629      	mov	r1, r5
 8001e08:	f7fe fd38 	bl	800087c <__aeabi_ddiv>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fee0 	bl	8000bd8 <__aeabi_d2uiz>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   	CCR= ARR /2;
 8001e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
   	__HAL_TIM_SET_PRESCALER(htim2, prescaler2);//2625
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
   	__HAL_TIM_SET_AUTORELOAD(htim2, ARR);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e36:	60da      	str	r2, [r3, #12]
   	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34
   	htim2->Instance->EGR = TIM_EGR_UG;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2201      	movs	r2, #1
 8001e46:	615a      	str	r2, [r3, #20]



    return

    dir1 = u[0] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	bf4c      	ite	mi
 8001e58:	2301      	movmi	r3, #1
 8001e5a:	2300      	movpl	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return;



}
 8001e62:	3738      	adds	r7, #56	; 0x38
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bdb0      	pop	{r4, r5, r7, pc}
 8001e68:	ae261898 	.word	0xae261898
 8001e6c:	3fa015be 	.word	0x3fa015be
 8001e70:	47ae147b 	.word	0x47ae147b
 8001e74:	3f847ae1 	.word	0x3f847ae1

08001e78 <start_timers>:



void start_timers(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, TIM_HandleTypeDef *htim4){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
    HAL_TIM_Base_Start_IT(htim1);
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f002 ff0a 	bl	8004ca0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim2);
 8001e8c:	68b8      	ldr	r0, [r7, #8]
 8001e8e:	f002 ff07 	bl	8004ca0 <HAL_TIM_Base_Start_IT>
    /* start motor PWM */
    HAL_TIM_Base_Start_IT(htim3);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f002 ff04 	bl	8004ca0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim4);
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f002 ff01 	bl	8004ca0 <HAL_TIM_Base_Start_IT>
    /* start PWM */
    if(HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1) != HAL_OK){
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f002 ffaf 	bl	8004e04 <HAL_TIM_PWM_Start>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <start_timers+0x38>
        HardFault_Handler();
 8001eac:	f001 f93d 	bl	800312a <HardFault_Handler>
    }
    if(HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_1) != HAL_OK){
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	6838      	ldr	r0, [r7, #0]
 8001eb4:	f002 ffa6 	bl	8004e04 <HAL_TIM_PWM_Start>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <start_timers+0x4a>
        HardFault_Handler();
 8001ebe:	f001 f934 	bl	800312a <HardFault_Handler>
    }
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	0000      	movs	r0, r0
 8001ecc:	0000      	movs	r0, r0
	...

08001ed0 <setup_encoders>:
    sprintf(tx_data, "%X:%X:%X:%X:%X\n", (unsigned long long int) timestamp, encoding_q0, encoding_q1, encoding_q0_d, encoding_q1_d); /*Timestamp:q0:q1*/
    HAL_UART_Transmit_DMA(huart, (uint8_t *) tx_data, sizeof tx_data); /* send encoder data for logging purposes */
}


void setup_encoders(TIM_HandleTypeDef *htim){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	const uint32_t clock_freq = 84000000;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <setup_encoders+0x78>)
 8001eda:	60fb      	str	r3, [r7, #12]
	uint16_t ARR;
	ARR = (T_S*clock_freq)/PRESCALER_ENCODER;
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7fe fb29 	bl	8000534 <__aeabi_ui2d>
 8001ee2:	a317      	add	r3, pc, #92	; (adr r3, 8001f40 <setup_encoders+0x70>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	f7fe fb9e 	bl	8000628 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <setup_encoders+0x7c>)
 8001efa:	f7fe fcbf 	bl	800087c <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	f7fe fe67 	bl	8000bd8 <__aeabi_d2uiz>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_PRESCALER(htim, PRESCALER_ENCODER);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2210      	movs	r2, #16
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	897a      	ldrh	r2, [r7, #10]
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f1e:	897a      	ldrh	r2, [r7, #10]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60da      	str	r2, [r3, #12]
	htim->Instance->EGR = TIM_EGR_UG;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f002 feb7 	bl	8004ca0 <HAL_TIM_Base_Start_IT>
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	f3af 8000 	nop.w
 8001f40:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f44:	3f60624d 	.word	0x3f60624d
 8001f48:	0501bd00 	.word	0x0501bd00
 8001f4c:	40300000 	.word	0x40300000

08001f50 <PID_controller_position>:




void PID_controller_position(man_t *manip, pid_controller_t *pid1,pid_controller_t *pid2, float *u , float setpoint){
 8001f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f54:	b08f      	sub	sp, #60	; 0x3c
 8001f56:	af04      	add	r7, sp, #16
 8001f58:	6178      	str	r0, [r7, #20]
 8001f5a:	6139      	str	r1, [r7, #16]
 8001f5c:	60fa      	str	r2, [r7, #12]
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	ed87 0a01 	vstr	s0, [r7, #4]

	float set_point1,set_point2,measure1, measure2;

	rbpeek(&manip->q0,&set_point1);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fdf5 	bl	8002b5c <rbpeek>
	rbpeek(&manip->q1,&set_point2);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	332c      	adds	r3, #44	; 0x2c
 8001f76:	f107 0220 	add.w	r2, r7, #32
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fded 	bl	8002b5c <rbpeek>

	//set_point1 = 0;
	//set_point2 = setpoint;

	dq_actual0=set_point1;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	4a33      	ldr	r2, [pc, #204]	; (8002054 <PID_controller_position+0x104>)
 8001f86:	6013      	str	r3, [r2, #0]





	rblast(&manip->q0_actual,&measure1);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001f8e:	f107 021c 	add.w	r2, r7, #28
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fe05 	bl	8002ba4 <rblast>
	rblast(&manip->q1_actual,&measure2);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001fa0:	f107 0218 	add.w	r2, r7, #24
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fdfc 	bl	8002ba4 <rblast>

	disp1=measure1;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	4a2a      	ldr	r2, [pc, #168]	; (8002058 <PID_controller_position+0x108>)
 8001fb0:	6013      	str	r3, [r2, #0]
	disp2=measure2;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4a29      	ldr	r2, [pc, #164]	; (800205c <PID_controller_position+0x10c>)
 8001fb6:	6013      	str	r3, [r2, #0]




	PID_update(pid1,set_point1, measure1,T_C);
 8001fb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fbc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fc0:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8002060 <PID_controller_position+0x110>
 8001fc4:	eef0 0a47 	vmov.f32	s1, s14
 8001fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fcc:	6938      	ldr	r0, [r7, #16]
 8001fce:	f000 fc90 	bl	80028f2 <PID_update>
	PID_update(pid2,set_point2, measure2,T_C);
 8001fd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fda:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8002060 <PID_controller_position+0x110>
 8001fde:	eef0 0a47 	vmov.f32	s1, s14
 8001fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fc83 	bl	80028f2 <PID_update>

	ddq_actual0=pid1->out;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	; (8002064 <PID_controller_position+0x114>)
 8001ff2:	6013      	str	r3, [r2, #0]
	ddq_actual1=pid2->out;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <PID_controller_position+0x118>)
 8001ffa:	6013      	str	r3, [r2, #0]


	printf("%d ;%f ; %f ; %f \n",count ,setpoint ,measure2 ,pid1->out );
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <PID_controller_position+0x11c>)
 8001ffe:	681e      	ldr	r6, [r3, #0]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7fe fab9 	bl	8000578 <__aeabi_f2d>
 8002006:	4680      	mov	r8, r0
 8002008:	4689      	mov	r9, r1
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fab3 	bl	8000578 <__aeabi_f2d>
 8002012:	4604      	mov	r4, r0
 8002014:	460d      	mov	r5, r1
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe faac 	bl	8000578 <__aeabi_f2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002028:	e9cd 4500 	strd	r4, r5, [sp]
 800202c:	4642      	mov	r2, r8
 800202e:	464b      	mov	r3, r9
 8002030:	4631      	mov	r1, r6
 8002032:	480f      	ldr	r0, [pc, #60]	; (8002070 <PID_controller_position+0x120>)
 8002034:	f005 fa92 	bl	800755c <iprintf>

	*u=pid1->out;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	601a      	str	r2, [r3, #0]
	*(u+1)=pid2->out;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	3304      	adds	r3, #4
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002048:	601a      	str	r2, [r3, #0]
	//*(u)=0;


}
 800204a:	bf00      	nop
 800204c:	372c      	adds	r7, #44	; 0x2c
 800204e:	46bd      	mov	sp, r7
 8002050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002054:	20000620 	.word	0x20000620
 8002058:	20000618 	.word	0x20000618
 800205c:	2000061c 	.word	0x2000061c
 8002060:	3c23d70a 	.word	0x3c23d70a
 8002064:	20000624 	.word	0x20000624
 8002068:	20000628 	.word	0x20000628
 800206c:	2000062c 	.word	0x2000062c
 8002070:	08009b68 	.word	0x08009b68

08002074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  rate_t rate;
  float v[2], v_est, a_est;
  char *data = "\n";
 800207a:	4b5e      	ldr	r3, [pc, #376]	; (80021f4 <main+0x180>)
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  float i = 1*T_C;
 800207e:	4b5e      	ldr	r3, [pc, #376]	; (80021f8 <main+0x184>)
 8002080:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002082:	f001 f9ab 	bl	80033dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002086:	f000 f8f9 	bl	800227c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800208a:	f000 fb31 	bl	80026f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800208e:	f000 fb07 	bl	80026a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002092:	f000 fadb 	bl	800264c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002096:	f000 f9b3 	bl	8002400 <MX_TIM3_Init>
  MX_TIM4_Init();
 800209a:	f000 fa05 	bl	80024a8 <MX_TIM4_Init>
  MX_TIM2_Init();
 800209e:	f000 f957 	bl	8002350 <MX_TIM2_Init>
  MX_TIM5_Init();
 80020a2:	f000 fa55 	bl	8002550 <MX_TIM5_Init>
  MX_TIM10_Init();
 80020a6:	f000 faad 	bl	8002604 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip, &htim3, &htim4); /* initialize the manipulator struct */
 80020aa:	4a54      	ldr	r2, [pc, #336]	; (80021fc <main+0x188>)
 80020ac:	4954      	ldr	r1, [pc, #336]	; (8002200 <main+0x18c>)
 80020ae:	4855      	ldr	r0, [pc, #340]	; (8002204 <main+0x190>)
 80020b0:	f7ff f8a0 	bl	80011f4 <init_man>

  /* PID controllers*/

  PID_init(&pid_pos1,KP_P1,TI_P1,TD_P1,N1,0); /*initialize the PID controllers for position*/
 80020b4:	2100      	movs	r1, #0
 80020b6:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80020ba:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8002208 <main+0x194>
 80020be:	eddf 0a53 	vldr	s1, [pc, #332]	; 800220c <main+0x198>
 80020c2:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002210 <main+0x19c>
 80020c6:	4853      	ldr	r0, [pc, #332]	; (8002214 <main+0x1a0>)
 80020c8:	f000 fbb1 	bl	800282e <PID_init>
  PID_init(&pid_pos2,KP_P2,TI_P2,TD_P2,N2,0);
 80020cc:	2100      	movs	r1, #0
 80020ce:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80020d2:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8002208 <main+0x194>
 80020d6:	eddf 0a50 	vldr	s1, [pc, #320]	; 8002218 <main+0x1a4>
 80020da:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800221c <main+0x1a8>
 80020de:	4850      	ldr	r0, [pc, #320]	; (8002220 <main+0x1ac>)
 80020e0:	f000 fba5 	bl	800282e <PID_init>

  set_limit(&pid_pos1,-4*M_PI,4*M_PI,-M_PI/2,M_PI/2);/*initialize the PID controllers output limits*/
 80020e4:	eddf 1a4f 	vldr	s3, [pc, #316]	; 8002224 <main+0x1b0>
 80020e8:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8002228 <main+0x1b4>
 80020ec:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800222c <main+0x1b8>
 80020f0:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8002230 <main+0x1bc>
 80020f4:	4847      	ldr	r0, [pc, #284]	; (8002214 <main+0x1a0>)
 80020f6:	f000 fbdd 	bl	80028b4 <set_limit>
  set_limit(&pid_pos2,-8*M_PI,8*M_PI,-6*(M_PI/2),6*(M_PI/2));
 80020fa:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8002234 <main+0x1c0>
 80020fe:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8002238 <main+0x1c4>
 8002102:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800223c <main+0x1c8>
 8002106:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8002240 <main+0x1cc>
 800210a:	4845      	ldr	r0, [pc, #276]	; (8002220 <main+0x1ac>)
 800210c:	f000 fbd2 	bl	80028b4 <set_limit>

  /* PI controllers*/
  PID_init(&pid_vel1,KP_V1,TI_V1,0,N1,1); /*initialize the PI controllers for velocity*/
 8002110:	2101      	movs	r1, #1
 8002112:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8002116:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8002244 <main+0x1d0>
 800211a:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8002248 <main+0x1d4>
 800211e:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800224c <main+0x1d8>
 8002122:	484b      	ldr	r0, [pc, #300]	; (8002250 <main+0x1dc>)
 8002124:	f000 fb83 	bl	800282e <PID_init>
  PID_init(&pid_vel2,KP_V2,TI_V2,0,N2,1);
 8002128:	2101      	movs	r1, #1
 800212a:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 800212e:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8002244 <main+0x1d0>
 8002132:	eddf 0a45 	vldr	s1, [pc, #276]	; 8002248 <main+0x1d4>
 8002136:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800224c <main+0x1d8>
 800213a:	4846      	ldr	r0, [pc, #280]	; (8002254 <main+0x1e0>)
 800213c:	f000 fb77 	bl	800282e <PID_init>

  set_limit(&pid_vel1,-4*M_PI,4*M_PI,-M_PI/2,M_PI/2);/*initialize the PI controllers output limits*/
 8002140:	eddf 1a38 	vldr	s3, [pc, #224]	; 8002224 <main+0x1b0>
 8002144:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8002228 <main+0x1b4>
 8002148:	eddf 0a38 	vldr	s1, [pc, #224]	; 800222c <main+0x1b8>
 800214c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8002230 <main+0x1bc>
 8002150:	483f      	ldr	r0, [pc, #252]	; (8002250 <main+0x1dc>)
 8002152:	f000 fbaf 	bl	80028b4 <set_limit>
  set_limit(&pid_vel2,-8*M_PI,8*M_PI,-6*(M_PI/2),6*(M_PI/2));
 8002156:	eddf 1a37 	vldr	s3, [pc, #220]	; 8002234 <main+0x1c0>
 800215a:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8002238 <main+0x1c4>
 800215e:	eddf 0a37 	vldr	s1, [pc, #220]	; 800223c <main+0x1c8>
 8002162:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8002240 <main+0x1cc>
 8002166:	483b      	ldr	r0, [pc, #236]	; (8002254 <main+0x1e0>)
 8002168:	f000 fba4 	bl	80028b4 <set_limit>



  init_rate(&rate, (uint32_t) (T_C*1000)); /* initialize the rate struct */
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	210a      	movs	r1, #10
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f9ec 	bl	8001550 <init_rate>
  rbclear(&timestamps);
 8002178:	4837      	ldr	r0, [pc, #220]	; (8002258 <main+0x1e4>)
 800217a:	f000 fd83 	bl	8002c84 <rbclear>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 800217e:	2278      	movs	r2, #120	; 0x78
 8002180:	4936      	ldr	r1, [pc, #216]	; (800225c <main+0x1e8>)
 8002182:	4837      	ldr	r0, [pc, #220]	; (8002260 <main+0x1ec>)
 8002184:	f003 fc87 	bl	8005a96 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* start timers */
  start_timers(&htim3, &htim4, &htim2, &htim5);
 8002188:	4b36      	ldr	r3, [pc, #216]	; (8002264 <main+0x1f0>)
 800218a:	4a37      	ldr	r2, [pc, #220]	; (8002268 <main+0x1f4>)
 800218c:	491b      	ldr	r1, [pc, #108]	; (80021fc <main+0x188>)
 800218e:	481c      	ldr	r0, [pc, #112]	; (8002200 <main+0x18c>)
 8002190:	f7ff fe72 	bl	8001e78 <start_timers>
  setup_encoders(&htim10);
 8002194:	4835      	ldr	r0, [pc, #212]	; (800226c <main+0x1f8>)
 8002196:	f7ff fe9b 	bl	8001ed0 <setup_encoders>

  while (1)
  {
    // read_encoders(&htim3, &htim4, &manip);
    update_speeds(&manip);
 800219a:	481a      	ldr	r0, [pc, #104]	; (8002204 <main+0x190>)
 800219c:	f7ff fb1e 	bl	80017dc <update_speeds>

    	//setpoint= 0.5;


    //}else{
    	setpoint=0;
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
    //}
    // ! debug NB ricorda di togliere il setpoint dal valore passato a pid e prenderlo direttamente da manip

     PID_controller_position( &manip, &pid_pos1, &pid_pos2, v ,setpoint);
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	ed97 0a07 	vldr	s0, [r7, #28]
 80021ae:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <main+0x1ac>)
 80021b0:	4918      	ldr	r1, [pc, #96]	; (8002214 <main+0x1a0>)
 80021b2:	4814      	ldr	r0, [pc, #80]	; (8002204 <main+0x190>)
 80021b4:	f7ff fecc 	bl	8001f50 <PID_controller_position>
    // *((float *) tx_data+1) = v[1];
    // tx_data[16] = '\n';
    // HAL_UART_Transmit_DMA(&huart2, &tx_data, 17);
    // !SECTION DEBUG

    rblast(&manip.q0_actual,&pos[0]);
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	482c      	ldr	r0, [pc, #176]	; (8002270 <main+0x1fc>)
 80021be:	f000 fcf1 	bl	8002ba4 <rblast>
    rblast(&manip.q1_actual,&pos[1]);
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	3304      	adds	r3, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	482a      	ldr	r0, [pc, #168]	; (8002274 <main+0x200>)
 80021ca:	f000 fceb 	bl	8002ba4 <rblast>

    apply_position_input(&htim2, &htim5, v, pos);
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	f107 020c 	add.w	r2, r7, #12
 80021d4:	4923      	ldr	r1, [pc, #140]	; (8002264 <main+0x1f0>)
 80021d6:	4824      	ldr	r0, [pc, #144]	; (8002268 <main+0x1f4>)
 80021d8:	f7ff fb62 	bl	80018a0 <apply_position_input>
    //disp1=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15);
    //disp2=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    rate_sleep(&rate); /* wait with a fixed frequency */
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff f9c6 	bl	8001572 <rate_sleep>
    //HAL_Delay((uint32_t) (T_C*1000));
    count++;
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <main+0x204>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	4a22      	ldr	r2, [pc, #136]	; (8002278 <main+0x204>)
 80021ee:	6013      	str	r3, [r2, #0]
    update_speeds(&manip);
 80021f0:	e7d3      	b.n	800219a <main+0x126>
 80021f2:	bf00      	nop
 80021f4:	08009b7c 	.word	0x08009b7c
 80021f8:	3c23d70a 	.word	0x3c23d70a
 80021fc:	200006c0 	.word	0x200006c0
 8002200:	20000678 	.word	0x20000678
 8002204:	20000274 	.word	0x20000274
 8002208:	3bf5c28f 	.word	0x3bf5c28f
 800220c:	3d072b02 	.word	0x3d072b02
 8002210:	4019999a 	.word	0x4019999a
 8002214:	20000504 	.word	0x20000504
 8002218:	3d3020c5 	.word	0x3d3020c5
 800221c:	400acd9f 	.word	0x400acd9f
 8002220:	2000053c 	.word	0x2000053c
 8002224:	3fc90fdb 	.word	0x3fc90fdb
 8002228:	bfc90fdb 	.word	0xbfc90fdb
 800222c:	41490fdb 	.word	0x41490fdb
 8002230:	c1490fdb 	.word	0xc1490fdb
 8002234:	4116cbe4 	.word	0x4116cbe4
 8002238:	c116cbe4 	.word	0xc116cbe4
 800223c:	41c90fdb 	.word	0x41c90fdb
 8002240:	c1c90fdb 	.word	0xc1c90fdb
 8002244:	00000000 	.word	0x00000000
 8002248:	3f23d70a 	.word	0x3f23d70a
 800224c:	3e94fdf4 	.word	0x3e94fdf4
 8002250:	20000574 	.word	0x20000574
 8002254:	200005ac 	.word	0x200005ac
 8002258:	200005ec 	.word	0x200005ec
 800225c:	200001fc 	.word	0x200001fc
 8002260:	20000798 	.word	0x20000798
 8002264:	20000708 	.word	0x20000708
 8002268:	20000630 	.word	0x20000630
 800226c:	20000750 	.word	0x20000750
 8002270:	200003a8 	.word	0x200003a8
 8002274:	200003d4 	.word	0x200003d4
 8002278:	2000062c 	.word	0x2000062c

0800227c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b094      	sub	sp, #80	; 0x50
 8002280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002282:	f107 0320 	add.w	r3, r7, #32
 8002286:	2230      	movs	r2, #48	; 0x30
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f004 fcf4 	bl	8006c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <SystemClock_Config+0xcc>)
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	4a27      	ldr	r2, [pc, #156]	; (8002348 <SystemClock_Config+0xcc>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6413      	str	r3, [r2, #64]	; 0x40
 80022b0:	4b25      	ldr	r3, [pc, #148]	; (8002348 <SystemClock_Config+0xcc>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022bc:	2300      	movs	r3, #0
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <SystemClock_Config+0xd0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a21      	ldr	r2, [pc, #132]	; (800234c <SystemClock_Config+0xd0>)
 80022c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <SystemClock_Config+0xd0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022d8:	2302      	movs	r3, #2
 80022da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022dc:	2301      	movs	r3, #1
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022e0:	2310      	movs	r3, #16
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e4:	2302      	movs	r3, #2
 80022e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022e8:	2300      	movs	r3, #0
 80022ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80022ec:	2310      	movs	r3, #16
 80022ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80022f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022f6:	2304      	movs	r3, #4
 80022f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022fa:	2304      	movs	r3, #4
 80022fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022fe:	f107 0320 	add.w	r3, r7, #32
 8002302:	4618      	mov	r0, r3
 8002304:	f001 ffe4 	bl	80042d0 <HAL_RCC_OscConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800230e:	f000 fa89 	bl	8002824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002312:	230f      	movs	r3, #15
 8002314:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002316:	2302      	movs	r3, #2
 8002318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002322:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	2102      	movs	r1, #2
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fa46 	bl	80047c0 <HAL_RCC_ClockConfig>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800233a:	f000 fa73 	bl	8002824 <Error_Handler>
  }
}
 800233e:	bf00      	nop
 8002340:	3750      	adds	r7, #80	; 0x50
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	40007000 	.word	0x40007000

08002350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002356:	f107 0320 	add.w	r3, r7, #32
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	611a      	str	r2, [r3, #16]
 800236e:	615a      	str	r2, [r3, #20]
 8002370:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002372:	4b22      	ldr	r3, [pc, #136]	; (80023fc <MX_TIM2_Init+0xac>)
 8002374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002378:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <MX_TIM2_Init+0xac>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002380:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <MX_TIM2_Init+0xac>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <MX_TIM2_Init+0xac>)
 8002388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800238c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <MX_TIM2_Init+0xac>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <MX_TIM2_Init+0xac>)
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800239a:	4818      	ldr	r0, [pc, #96]	; (80023fc <MX_TIM2_Init+0xac>)
 800239c:	f002 fce2 	bl	8004d64 <HAL_TIM_PWM_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80023a6:	f000 fa3d 	bl	8002824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023b2:	f107 0320 	add.w	r3, r7, #32
 80023b6:	4619      	mov	r1, r3
 80023b8:	4810      	ldr	r0, [pc, #64]	; (80023fc <MX_TIM2_Init+0xac>)
 80023ba:	f003 fa9d 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80023c4:	f000 fa2e 	bl	8002824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023c8:	2360      	movs	r3, #96	; 0x60
 80023ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	2200      	movs	r2, #0
 80023dc:	4619      	mov	r1, r3
 80023de:	4807      	ldr	r0, [pc, #28]	; (80023fc <MX_TIM2_Init+0xac>)
 80023e0:	f002 ff6e 	bl	80052c0 <HAL_TIM_PWM_ConfigChannel>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80023ea:	f000 fa1b 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023ee:	4803      	ldr	r0, [pc, #12]	; (80023fc <MX_TIM2_Init+0xac>)
 80023f0:	f000 fd82 	bl	8002ef8 <HAL_TIM_MspPostInit>

}
 80023f4:	bf00      	nop
 80023f6:	3728      	adds	r7, #40	; 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000630 	.word	0x20000630

08002400 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f004 fc32 	bl	8006c78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800241c:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <MX_TIM3_Init+0xa0>)
 800241e:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <MX_TIM3_Init+0xa4>)
 8002420:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002422:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <MX_TIM3_Init+0xa0>)
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <MX_TIM3_Init+0xa0>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <MX_TIM3_Init+0xa0>)
 8002430:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002434:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <MX_TIM3_Init+0xa0>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <MX_TIM3_Init+0xa0>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002442:	2303      	movs	r3, #3
 8002444:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800244a:	2301      	movs	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800245a:	2301      	movs	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	4619      	mov	r1, r3
 800246c:	480c      	ldr	r0, [pc, #48]	; (80024a0 <MX_TIM3_Init+0xa0>)
 800246e:	f002 fd79 	bl	8004f64 <HAL_TIM_Encoder_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002478:	f000 f9d4 	bl	8002824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	4619      	mov	r1, r3
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <MX_TIM3_Init+0xa0>)
 800248a:	f003 fa35 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002494:	f000 f9c6 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	3730      	adds	r7, #48	; 0x30
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000678 	.word	0x20000678
 80024a4:	40000400 	.word	0x40000400

080024a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024ae:	f107 030c 	add.w	r3, r7, #12
 80024b2:	2224      	movs	r2, #36	; 0x24
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 fbde 	bl	8006c78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024c4:	4b20      	ldr	r3, [pc, #128]	; (8002548 <MX_TIM4_Init+0xa0>)
 80024c6:	4a21      	ldr	r2, [pc, #132]	; (800254c <MX_TIM4_Init+0xa4>)
 80024c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <MX_TIM4_Init+0xa0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <MX_TIM4_Init+0xa0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <MX_TIM4_Init+0xa0>)
 80024d8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80024dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <MX_TIM4_Init+0xa0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <MX_TIM4_Init+0xa0>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024ea:	2303      	movs	r3, #3
 80024ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024f2:	2301      	movs	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002502:	2301      	movs	r3, #1
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	4619      	mov	r1, r3
 8002514:	480c      	ldr	r0, [pc, #48]	; (8002548 <MX_TIM4_Init+0xa0>)
 8002516:	f002 fd25 	bl	8004f64 <HAL_TIM_Encoder_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002520:	f000 f980 	bl	8002824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_TIM4_Init+0xa0>)
 8002532:	f003 f9e1 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800253c:	f000 f972 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002540:	bf00      	nop
 8002542:	3730      	adds	r7, #48	; 0x30
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	200006c0 	.word	0x200006c0
 800254c:	40000800 	.word	0x40000800

08002550 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002556:	f107 0320 	add.w	r3, r7, #32
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]
 800256e:	615a      	str	r2, [r3, #20]
 8002570:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <MX_TIM5_Init+0xac>)
 8002574:	4a22      	ldr	r2, [pc, #136]	; (8002600 <MX_TIM5_Init+0xb0>)
 8002576:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002578:	4b20      	ldr	r3, [pc, #128]	; (80025fc <MX_TIM5_Init+0xac>)
 800257a:	2200      	movs	r2, #0
 800257c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <MX_TIM5_Init+0xac>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <MX_TIM5_Init+0xac>)
 8002586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800258a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <MX_TIM5_Init+0xac>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <MX_TIM5_Init+0xac>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002598:	4818      	ldr	r0, [pc, #96]	; (80025fc <MX_TIM5_Init+0xac>)
 800259a:	f002 fbe3 	bl	8004d64 <HAL_TIM_PWM_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80025a4:	f000 f93e 	bl	8002824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025b0:	f107 0320 	add.w	r3, r7, #32
 80025b4:	4619      	mov	r1, r3
 80025b6:	4811      	ldr	r0, [pc, #68]	; (80025fc <MX_TIM5_Init+0xac>)
 80025b8:	f003 f99e 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80025c2:	f000 f92f 	bl	8002824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c6:	2360      	movs	r3, #96	; 0x60
 80025c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2200      	movs	r2, #0
 80025da:	4619      	mov	r1, r3
 80025dc:	4807      	ldr	r0, [pc, #28]	; (80025fc <MX_TIM5_Init+0xac>)
 80025de:	f002 fe6f 	bl	80052c0 <HAL_TIM_PWM_ConfigChannel>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80025e8:	f000 f91c 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80025ec:	4803      	ldr	r0, [pc, #12]	; (80025fc <MX_TIM5_Init+0xac>)
 80025ee:	f000 fc83 	bl	8002ef8 <HAL_TIM_MspPostInit>

}
 80025f2:	bf00      	nop
 80025f4:	3728      	adds	r7, #40	; 0x28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000708 	.word	0x20000708
 8002600:	40000c00 	.word	0x40000c00

08002604 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_TIM10_Init+0x40>)
 800260a:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <MX_TIM10_Init+0x44>)
 800260c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16;
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <MX_TIM10_Init+0x40>)
 8002610:	2210      	movs	r2, #16
 8002612:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <MX_TIM10_Init+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 52500;
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <MX_TIM10_Init+0x40>)
 800261c:	f64c 5214 	movw	r2, #52500	; 0xcd14
 8002620:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_TIM10_Init+0x40>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_TIM10_Init+0x40>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_TIM10_Init+0x40>)
 8002630:	f002 fae6 	bl	8004c00 <HAL_TIM_Base_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800263a:	f000 f8f3 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000750 	.word	0x20000750
 8002648:	40014400 	.word	0x40014400

0800264c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_USART2_UART_Init+0x4c>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <MX_USART2_UART_Init+0x50>)
 8002654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <MX_USART2_UART_Init+0x4c>)
 8002658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800265c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_USART2_UART_Init+0x4c>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_USART2_UART_Init+0x4c>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <MX_USART2_UART_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_USART2_UART_Init+0x4c>)
 8002672:	220c      	movs	r2, #12
 8002674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <MX_USART2_UART_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_USART2_UART_Init+0x4c>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <MX_USART2_UART_Init+0x4c>)
 8002684:	f003 f9ba 	bl	80059fc <HAL_UART_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800268e:	f000 f8c9 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000798 	.word	0x20000798
 800269c:	40004400 	.word	0x40004400

080026a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <MX_DMA_Init+0x4c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <MX_DMA_Init+0x4c>)
 80026b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <MX_DMA_Init+0x4c>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2010      	movs	r0, #16
 80026c8:	f000 fff9 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026cc:	2010      	movs	r0, #16
 80026ce:	f001 f812 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	2011      	movs	r0, #17
 80026d8:	f000 fff1 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026dc:	2011      	movs	r0, #17
 80026de:	f001 f80a 	bl	80036f6 <HAL_NVIC_EnableIRQ>

}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	4b43      	ldr	r3, [pc, #268]	; (8002818 <MX_GPIO_Init+0x128>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a42      	ldr	r2, [pc, #264]	; (8002818 <MX_GPIO_Init+0x128>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b40      	ldr	r3, [pc, #256]	; (8002818 <MX_GPIO_Init+0x128>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b3c      	ldr	r3, [pc, #240]	; (8002818 <MX_GPIO_Init+0x128>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a3b      	ldr	r2, [pc, #236]	; (8002818 <MX_GPIO_Init+0x128>)
 800272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b39      	ldr	r3, [pc, #228]	; (8002818 <MX_GPIO_Init+0x128>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	4b35      	ldr	r3, [pc, #212]	; (8002818 <MX_GPIO_Init+0x128>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a34      	ldr	r2, [pc, #208]	; (8002818 <MX_GPIO_Init+0x128>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b32      	ldr	r3, [pc, #200]	; (8002818 <MX_GPIO_Init+0x128>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <MX_GPIO_Init+0x128>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a2d      	ldr	r2, [pc, #180]	; (8002818 <MX_GPIO_Init+0x128>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <MX_GPIO_Init+0x128>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002776:	2200      	movs	r2, #0
 8002778:	2122      	movs	r1, #34	; 0x22
 800277a:	4828      	ldr	r0, [pc, #160]	; (800281c <MX_GPIO_Init+0x12c>)
 800277c:	f001 fd5c 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002786:	4826      	ldr	r0, [pc, #152]	; (8002820 <MX_GPIO_Init+0x130>)
 8002788:	f001 fd56 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800278c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002792:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4619      	mov	r1, r3
 80027a2:	481f      	ldr	r0, [pc, #124]	; (8002820 <MX_GPIO_Init+0x130>)
 80027a4:	f001 fbc4 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|LD2_Pin;
 80027a8:	2322      	movs	r3, #34	; 0x22
 80027aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ac:	2301      	movs	r3, #1
 80027ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	4817      	ldr	r0, [pc, #92]	; (800281c <MX_GPIO_Init+0x12c>)
 80027c0:	f001 fbb6 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|LIMIT_SWITCH_2_Pin;
 80027c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	4810      	ldr	r0, [pc, #64]	; (800281c <MX_GPIO_Init+0x12c>)
 80027dc:	f001 fba8 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_1_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin;
 80027e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	4809      	ldr	r0, [pc, #36]	; (8002820 <MX_GPIO_Init+0x130>)
 80027fa:	f001 fb99 	bl	8003f30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	2028      	movs	r0, #40	; 0x28
 8002804:	f000 ff5b 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002808:	2028      	movs	r0, #40	; 0x28
 800280a:	f000 ff74 	bl	80036f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	; 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40020000 	.word	0x40020000
 8002820:	40020800 	.word	0x40020800

08002824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002828:	b672      	cpsid	i
}
 800282a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800282c:	e7fe      	b.n	800282c <Error_Handler+0x8>

0800282e <PID_init>:

*/



int PID_init(pid_controller_t *pid, float KP,float TI, float TD, float N,int Controller_type){
 800282e:	b480      	push	{r7}
 8002830:	b087      	sub	sp, #28
 8002832:	af00      	add	r7, sp, #0
 8002834:	6178      	str	r0, [r7, #20]
 8002836:	ed87 0a04 	vstr	s0, [r7, #16]
 800283a:	edc7 0a03 	vstr	s1, [r7, #12]
 800283e:	ed87 1a02 	vstr	s2, [r7, #8]
 8002842:	edc7 1a01 	vstr	s3, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]


	pid->type=Controller_type;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	601a      	str	r2, [r3, #0]
	pid->Kp= KP;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	605a      	str	r2, [r3, #4]
	pid->Ti=TI;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	609a      	str	r2, [r3, #8]
	pid->Td=TD;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	60da      	str	r2, [r3, #12]
	pid->N=N;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]

	pid->integrator=0.f;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	61da      	str	r2, [r3, #28]
	pid->derivative=0.f;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
	pid->prev_err=0.f;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	615a      	str	r2, [r3, #20]

	pid->out=0.f;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	635a      	str	r2, [r3, #52]	; 0x34


	/*NB the limit must be set using the proper method */
	pid->lim_out_min=0.f;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lim_out_max=0.f;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	629a      	str	r2, [r3, #40]	; 0x28

	pid->lim_integ_min=0.f;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->lim_integ_max=0.f;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30




	return 0;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <set_limit>:
- float lim_out_max;
- float lim_integ_min;
- float lim_integ_max ;

*/
int set_limit(pid_controller_t *pid, float lim_out_min, float lim_out_max, float lim_integ_min,float lim_integ_max ){
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6178      	str	r0, [r7, #20]
 80028bc:	ed87 0a04 	vstr	s0, [r7, #16]
 80028c0:	edc7 0a03 	vstr	s1, [r7, #12]
 80028c4:	ed87 1a02 	vstr	s2, [r7, #8]
 80028c8:	edc7 1a01 	vstr	s3, [r7, #4]

	pid->lim_out_min=lim_out_min;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lim_out_max=lim_out_max;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28

	pid->lim_integ_min=lim_integ_min;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->lim_integ_max=lim_integ_max;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30


	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <PID_update>:
@outputs:
pid->out: contain the value calculated by the controller

*/

int PID_update(pid_controller_t *pid, float set_point , float measure, float T_C){
 80028f2:	b480      	push	{r7}
 80028f4:	b089      	sub	sp, #36	; 0x24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80028fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8002902:	ed87 1a00 	vstr	s2, [r7]

	float u=0.f;
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
	float error=0.f;
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
	float proportional=0.f;
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
	float alpha= pid->Td/T_C;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	edd3 6a03 	vldr	s13, [r3, #12]
 800291e:	ed97 7a00 	vldr	s14, [r7]
 8002922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002926:	edc7 7a04 	vstr	s15, [r7, #16]


    /* calculate the error*/
	error=set_point-measure;
 800292a:	ed97 7a02 	vldr	s14, [r7, #8]
 800292e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002936:	edc7 7a06 	vstr	s15, [r7, #24]



	/* proportional contribute*/

	proportional= pid->Kp*error;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002940:	ed97 7a06 	vldr	s14, [r7, #24]
 8002944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002948:	edc7 7a05 	vstr	s15, [r7, #20]

	/*integral contribute*/



	pid->integrator+=(pid->Kp/pid->Ti)*0.5f*T_C*(error-pid->prev_err);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	ed93 6a01 	vldr	s12, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	edd3 6a02 	vldr	s13, [r3, #8]
 800295e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002962:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002966:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800296a:	edd7 7a00 	vldr	s15, [r7]
 800296e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	edd3 7a05 	vldr	s15, [r3, #20]
 8002978:	ed97 6a06 	vldr	s12, [r7, #24]
 800297c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	edc3 7a07 	vstr	s15, [r3, #28]

	/* try of anti wind-up*/

	if(pid->integrator > pid->lim_integ_max){
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	ed93 7a07 	vldr	s14, [r3, #28]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800299a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a2:	dd04      	ble.n	80029ae <PID_update+0xbc>

		pid->integrator=pid->lim_integ_max;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	61da      	str	r2, [r3, #28]
 80029ac:	e00e      	b.n	80029cc <PID_update+0xda>

	}else if(pid->integrator < pid->lim_integ_min)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	ed93 7a07 	vldr	s14, [r3, #28]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80029ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	d503      	bpl.n	80029cc <PID_update+0xda>
	{
		pid->integrator=pid->lim_integ_min;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	61da      	str	r2, [r3, #28]


	/* output  */


	if (pid->type>0){
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	dd09      	ble.n	80029e8 <PID_update+0xf6>

	u=proportional+pid->integrator;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80029da:	ed97 7a05 	vldr	s14, [r7, #20]
 80029de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e2:	edc7 7a07 	vstr	s15, [r7, #28]
 80029e6:	e040      	b.n	8002a6a <PID_update+0x178>

	}else{

	/*derivative contribute*/
	pid->derivative= (2*(pid->Kp)*alpha*error - pid->derivative*(1-(2*alpha)/pid->N))/(1+(2*alpha)/pid->N);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80029ee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80029f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80029f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80029fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	edd3 6a08 	vldr	s13, [r3, #32]
 8002a08:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a0c:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	ed93 6a04 	vldr	s12, [r3, #16]
 8002a16:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002a1a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002a1e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a26:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a2e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a38:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8002a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	edc3 7a08 	vstr	s15, [r3, #32]
	u=proportional+pid->integrator+pid->derivative;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a54:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a66:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if(u>pid->lim_out_max)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002a70:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7c:	dd04      	ble.n	8002a88 <PID_update+0x196>
	{
		pid->out=pid->lim_out_max;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	635a      	str	r2, [r3, #52]	; 0x34
 8002a86:	e011      	b.n	8002aac <PID_update+0x1ba>
	}else if(u<pid->lim_out_min){
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	d504      	bpl.n	8002aa6 <PID_update+0x1b4>

		pid->out=pid->lim_out_min;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	635a      	str	r2, [r3, #52]	; 0x34
 8002aa4:	e002      	b.n	8002aac <PID_update+0x1ba>

	}else{
		pid->out=u;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34
	}


	pid->prev_err=error;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	615a      	str	r2, [r3, #20]
	pid->prev_meas=measure;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	619a      	str	r2, [r3, #24]

	return 0;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	3304      	adds	r3, #4
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <rbpush+0x90>)
 8002af6:	fba3 1302 	umull	r1, r3, r3, r2
 8002afa:	08d9      	lsrs	r1, r3, #3
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	789b      	ldrb	r3, [r3, #2]
 8002b10:	2b0a      	cmp	r3, #10
 8002b12:	d114      	bne.n	8002b3e <rbpush+0x76>
        /* overwriting data: also move head forward */
        buffer->head++;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	785a      	ldrb	r2, [r3, #1]
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <rbpush+0x90>)
 8002b26:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2a:	08d9      	lsrs	r1, r3, #3
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	705a      	strb	r2, [r3, #1]
 8002b3c:	e005      	b.n	8002b4a <rbpush+0x82>
    }else{
        buffer->length++;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	789b      	ldrb	r3, [r3, #2]
 8002b42:	3301      	adds	r3, #1
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 8002b4a:	2301      	movs	r3, #1
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	cccccccd 	.word	0xcccccccd

08002b5c <rbpeek>:
- rbelement_t *data: pointer to the variable that will hold the value;
@outputs: 
- rberror_t: whether the operation was concluded successfully or not;
@#
*/
rberror_t rbpeek(ringbuffer_t *buffer, rbelement_t *data){
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	789b      	ldrb	r3, [r3, #2]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <rbpeek+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	601a      	str	r2, [r3, #0]
        return 0; /* peek operation could not be completed because the buffer is empty */
 8002b80:	2300      	movs	r3, #0
 8002b82:	e009      	b.n	8002b98 <rbpeek+0x3c>
    }
    *data = buffer->buffer[buffer->head];
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	785b      	ldrb	r3, [r3, #1]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3304      	adds	r3, #4
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	601a      	str	r2, [r3, #0]
    return 1;
 8002b96:	2301      	movs	r3, #1
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <rblast>:
- rbelement_t *data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	789b      	ldrb	r3, [r3, #2]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <rblast+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	601a      	str	r2, [r3, #0]
        return 0; // operation failed
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e015      	b.n	8002bf8 <rblast+0x54>
    }
    // uint8_t index = (uint8_t) ((buffer->tail-1+RBUF_SZ)%RBUF_SZ);
    int8_t index = buffer->tail-1;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
 8002bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	da03      	bge.n	8002be6 <rblast+0x42>
    	index += RBUF_SZ;
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	330a      	adds	r3, #10
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	73fb      	strb	r3, [r7, #15]
    }
    *data = buffer->buffer[(uint8_t) index];
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	601a      	str	r2, [r3, #0]
    return 1;
 8002bf6:	2301      	movs	r3, #1
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <rbget>:


rberror_t rbget(ringbuffer_t *buffer, int8_t i, rbelement_t *data){
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 8002c12:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	db05      	blt.n	8002c26 <rbget+0x22>
 8002c1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	7892      	ldrb	r2, [r2, #2]
 8002c22:	4293      	cmp	r3, r2
 8002c24:	db0a      	blt.n	8002c3c <rbget+0x38>
        /* out of bounds */
    	*data =  buffer->buffer[buffer->head];
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	785b      	ldrb	r3, [r3, #1]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	3304      	adds	r3, #4
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	601a      	str	r2, [r3, #0]
        return 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e01b      	b.n	8002c74 <rbget+0x70>
    }
    uint8_t index = (uint8_t) ((buffer->head+i) % RBUF_SZ);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	461a      	mov	r2, r3
 8002c42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002c46:	441a      	add	r2, r3
 8002c48:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <rbget+0x7c>)
 8002c4a:	fb83 1302 	smull	r1, r3, r3, r2
 8002c4e:	1099      	asrs	r1, r3, #2
 8002c50:	17d3      	asrs	r3, r2, #31
 8002c52:	1ac9      	subs	r1, r1, r3
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	1ad1      	subs	r1, r2, r3
 8002c5e:	460b      	mov	r3, r1
 8002c60:	75fb      	strb	r3, [r7, #23]
    *data = buffer->buffer[index];
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	601a      	str	r2, [r3, #0]
    return 1;
 8002c72:	2301      	movs	r3, #1
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	66666667 	.word	0x66666667

08002c84 <rbclear>:
- ringbuffer_t *buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e00a      	b.n	8002cac <rbclear+0x28>
        buffer->buffer[i] = 0;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b09      	cmp	r3, #9
 8002cb0:	d9f1      	bls.n	8002c96 <rbclear+0x12>
    }
    buffer->length = 0;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_MspInit+0x4c>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a0f      	ldr	r2, [pc, #60]	; (8002d1c <HAL_MspInit+0x4c>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <HAL_MspInit+0x4c>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_MspInit+0x4c>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a08      	ldr	r2, [pc, #32]	; (8002d1c <HAL_MspInit+0x4c>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_MspInit+0x4c>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d0e:	2007      	movs	r0, #7
 8002d10:	f000 fcca 	bl	80036a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40023800 	.word	0x40023800

08002d20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_TIM_PWM_MspInit+0x64>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <HAL_TIM_PWM_MspInit+0x64>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_TIM_PWM_MspInit+0x64>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002d4e:	e012      	b.n	8002d76 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0c      	ldr	r2, [pc, #48]	; (8002d88 <HAL_TIM_PWM_MspInit+0x68>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10d      	bne.n	8002d76 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_TIM_PWM_MspInit+0x64>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_TIM_PWM_MspInit+0x64>)
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_TIM_PWM_MspInit+0x64>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40000c00 	.word	0x40000c00

08002d8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08c      	sub	sp, #48	; 0x30
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a3a      	ldr	r2, [pc, #232]	; (8002e94 <HAL_TIM_Encoder_MspInit+0x108>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d134      	bne.n	8002e18 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a38      	ldr	r2, [pc, #224]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a31      	ldr	r2, [pc, #196]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002de6:	23c0      	movs	r3, #192	; 0xc0
 8002de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002df6:	2302      	movs	r3, #2
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	f107 031c 	add.w	r3, r7, #28
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4826      	ldr	r0, [pc, #152]	; (8002e9c <HAL_TIM_Encoder_MspInit+0x110>)
 8002e02:	f001 f895 	bl	8003f30 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	201d      	movs	r0, #29
 8002e0c:	f000 fc57 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e10:	201d      	movs	r0, #29
 8002e12:	f000 fc70 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e16:	e038      	b.n	8002e8a <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <HAL_TIM_Encoder_MspInit+0x114>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d133      	bne.n	8002e8a <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e5a:	23c0      	movs	r3, #192	; 0xc0
 8002e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6e:	f107 031c 	add.w	r3, r7, #28
 8002e72:	4619      	mov	r1, r3
 8002e74:	480b      	ldr	r0, [pc, #44]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e76:	f001 f85b 	bl	8003f30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	201e      	movs	r0, #30
 8002e80:	f000 fc1d 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e84:	201e      	movs	r0, #30
 8002e86:	f000 fc36 	bl	80036f6 <HAL_NVIC_EnableIRQ>
}
 8002e8a:	bf00      	nop
 8002e8c:	3730      	adds	r7, #48	; 0x30
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	40000800 	.word	0x40000800
 8002ea4:	40020400 	.word	0x40020400

08002ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <HAL_TIM_Base_MspInit+0x48>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d115      	bne.n	8002ee6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_TIM_Base_MspInit+0x4c>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	; (8002ef4 <HAL_TIM_Base_MspInit+0x4c>)
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <HAL_TIM_Base_MspInit+0x4c>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2100      	movs	r1, #0
 8002eda:	2019      	movs	r0, #25
 8002edc:	f000 fbef 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ee0:	2019      	movs	r0, #25
 8002ee2:	f000 fc08 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40014400 	.word	0x40014400
 8002ef4:	40023800 	.word	0x40023800

08002ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f18:	d11f      	bne.n	8002f5a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_TIM_MspPostInit+0xb0>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <HAL_TIM_MspPostInit+0xb0>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <HAL_TIM_MspPostInit+0xb0>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	4619      	mov	r1, r3
 8002f52:	4816      	ldr	r0, [pc, #88]	; (8002fac <HAL_TIM_MspPostInit+0xb4>)
 8002f54:	f000 ffec 	bl	8003f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002f58:	e022      	b.n	8002fa0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <HAL_TIM_MspPostInit+0xb8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d11d      	bne.n	8002fa0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_TIM_MspPostInit+0xb0>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <HAL_TIM_MspPostInit+0xb0>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6313      	str	r3, [r2, #48]	; 0x30
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <HAL_TIM_MspPostInit+0xb0>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f80:	2301      	movs	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f84:	2302      	movs	r3, #2
 8002f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f90:	2302      	movs	r3, #2
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4804      	ldr	r0, [pc, #16]	; (8002fac <HAL_TIM_MspPostInit+0xb4>)
 8002f9c:	f000 ffc8 	bl	8003f30 <HAL_GPIO_Init>
}
 8002fa0:	bf00      	nop
 8002fa2:	3728      	adds	r7, #40	; 0x28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40020000 	.word	0x40020000
 8002fb0:	40000c00 	.word	0x40000c00

08002fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a4d      	ldr	r2, [pc, #308]	; (8003108 <HAL_UART_MspInit+0x154>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	f040 8094 	bne.w	8003100 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_UART_MspInit+0x158>)
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	4a4a      	ldr	r2, [pc, #296]	; (800310c <HAL_UART_MspInit+0x158>)
 8002fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe8:	4b48      	ldr	r3, [pc, #288]	; (800310c <HAL_UART_MspInit+0x158>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	4b44      	ldr	r3, [pc, #272]	; (800310c <HAL_UART_MspInit+0x158>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	4a43      	ldr	r2, [pc, #268]	; (800310c <HAL_UART_MspInit+0x158>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6313      	str	r3, [r2, #48]	; 0x30
 8003004:	4b41      	ldr	r3, [pc, #260]	; (800310c <HAL_UART_MspInit+0x158>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003010:	230c      	movs	r3, #12
 8003012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301c:	2303      	movs	r3, #3
 800301e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003020:	2307      	movs	r3, #7
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4619      	mov	r1, r3
 800302a:	4839      	ldr	r0, [pc, #228]	; (8003110 <HAL_UART_MspInit+0x15c>)
 800302c:	f000 ff80 	bl	8003f30 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003030:	4b38      	ldr	r3, [pc, #224]	; (8003114 <HAL_UART_MspInit+0x160>)
 8003032:	4a39      	ldr	r2, [pc, #228]	; (8003118 <HAL_UART_MspInit+0x164>)
 8003034:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003036:	4b37      	ldr	r3, [pc, #220]	; (8003114 <HAL_UART_MspInit+0x160>)
 8003038:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800303c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800303e:	4b35      	ldr	r3, [pc, #212]	; (8003114 <HAL_UART_MspInit+0x160>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003044:	4b33      	ldr	r3, [pc, #204]	; (8003114 <HAL_UART_MspInit+0x160>)
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800304a:	4b32      	ldr	r3, [pc, #200]	; (8003114 <HAL_UART_MspInit+0x160>)
 800304c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003050:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003052:	4b30      	ldr	r3, [pc, #192]	; (8003114 <HAL_UART_MspInit+0x160>)
 8003054:	2200      	movs	r2, #0
 8003056:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003058:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <HAL_UART_MspInit+0x160>)
 800305a:	2200      	movs	r2, #0
 800305c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_UART_MspInit+0x160>)
 8003060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003064:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003066:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <HAL_UART_MspInit+0x160>)
 8003068:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800306c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800306e:	4b29      	ldr	r3, [pc, #164]	; (8003114 <HAL_UART_MspInit+0x160>)
 8003070:	2200      	movs	r2, #0
 8003072:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003074:	4827      	ldr	r0, [pc, #156]	; (8003114 <HAL_UART_MspInit+0x160>)
 8003076:	f000 fb59 	bl	800372c <HAL_DMA_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003080:	f7ff fbd0 	bl	8002824 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a23      	ldr	r2, [pc, #140]	; (8003114 <HAL_UART_MspInit+0x160>)
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
 800308a:	4a22      	ldr	r2, [pc, #136]	; (8003114 <HAL_UART_MspInit+0x160>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003090:	4b22      	ldr	r3, [pc, #136]	; (800311c <HAL_UART_MspInit+0x168>)
 8003092:	4a23      	ldr	r2, [pc, #140]	; (8003120 <HAL_UART_MspInit+0x16c>)
 8003094:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003096:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_UART_MspInit+0x168>)
 8003098:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800309c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800309e:	4b1f      	ldr	r3, [pc, #124]	; (800311c <HAL_UART_MspInit+0x168>)
 80030a0:	2240      	movs	r2, #64	; 0x40
 80030a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_UART_MspInit+0x168>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030aa:	4b1c      	ldr	r3, [pc, #112]	; (800311c <HAL_UART_MspInit+0x168>)
 80030ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_UART_MspInit+0x168>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_UART_MspInit+0x168>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_UART_MspInit+0x168>)
 80030c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <HAL_UART_MspInit+0x168>)
 80030c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_UART_MspInit+0x168>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80030d4:	4811      	ldr	r0, [pc, #68]	; (800311c <HAL_UART_MspInit+0x168>)
 80030d6:	f000 fb29 	bl	800372c <HAL_DMA_Init>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 80030e0:	f7ff fba0 	bl	8002824 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a0d      	ldr	r2, [pc, #52]	; (800311c <HAL_UART_MspInit+0x168>)
 80030e8:	635a      	str	r2, [r3, #52]	; 0x34
 80030ea:	4a0c      	ldr	r2, [pc, #48]	; (800311c <HAL_UART_MspInit+0x168>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	2100      	movs	r1, #0
 80030f4:	2026      	movs	r0, #38	; 0x26
 80030f6:	f000 fae2 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030fa:	2026      	movs	r0, #38	; 0x26
 80030fc:	f000 fafb 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003100:	bf00      	nop
 8003102:	3728      	adds	r7, #40	; 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40004400 	.word	0x40004400
 800310c:	40023800 	.word	0x40023800
 8003110:	40020000 	.word	0x40020000
 8003114:	200007dc 	.word	0x200007dc
 8003118:	40026088 	.word	0x40026088
 800311c:	2000083c 	.word	0x2000083c
 8003120:	400260a0 	.word	0x400260a0

08003124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <NMI_Handler+0x4>

0800312a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800312e:	e7fe      	b.n	800312e <HardFault_Handler+0x4>

08003130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003134:	e7fe      	b.n	8003134 <MemManage_Handler+0x4>

08003136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800313a:	e7fe      	b.n	800313a <BusFault_Handler+0x4>

0800313c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003140:	e7fe      	b.n	8003140 <UsageFault_Handler+0x4>

08003142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003170:	f000 f986 	bl	8003480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}

08003178 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800317c:	4802      	ldr	r0, [pc, #8]	; (8003188 <DMA1_Stream5_IRQHandler+0x10>)
 800317e:	f000 fc6d 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	200007dc 	.word	0x200007dc

0800318c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <DMA1_Stream6_IRQHandler+0x10>)
 8003192:	f000 fc63 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000083c 	.word	0x2000083c

080031a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80031a4:	4802      	ldr	r0, [pc, #8]	; (80031b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80031a6:	f001 ff83 	bl	80050b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000750 	.word	0x20000750

080031b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031b8:	4802      	ldr	r0, [pc, #8]	; (80031c4 <TIM3_IRQHandler+0x10>)
 80031ba:	f001 ff79 	bl	80050b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000678 	.word	0x20000678

080031c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031cc:	4802      	ldr	r0, [pc, #8]	; (80031d8 <TIM4_IRQHandler+0x10>)
 80031ce:	f001 ff6f 	bl	80050b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	200006c0 	.word	0x200006c0

080031dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031e0:	4802      	ldr	r0, [pc, #8]	; (80031ec <USART2_IRQHandler+0x10>)
 80031e2:	f002 fc89 	bl	8005af8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000798 	.word	0x20000798

080031f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_1_Pin);
 80031f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80031f8:	f001 f852 	bl	80042a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_2_Pin);
 80031fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003200:	f001 f84e 	bl	80042a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003204:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003208:	f001 f84a 	bl	80042a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}

08003210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
	return 1;
 8003214:	2301      	movs	r3, #1
}
 8003216:	4618      	mov	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_kill>:

int _kill(int pid, int sig)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800322a:	f003 fced 	bl	8006c08 <__errno>
 800322e:	4603      	mov	r3, r0
 8003230:	2216      	movs	r2, #22
 8003232:	601a      	str	r2, [r3, #0]
	return -1;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <_exit>:

void _exit (int status)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff ffe7 	bl	8003220 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003252:	e7fe      	b.n	8003252 <_exit+0x12>

08003254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e00a      	b.n	800327c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003266:	f3af 8000 	nop.w
 800326a:	4601      	mov	r1, r0
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	60ba      	str	r2, [r7, #8]
 8003272:	b2ca      	uxtb	r2, r1
 8003274:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3301      	adds	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	dbf0      	blt.n	8003266 <_read+0x12>
	}

return len;
 8003284:	687b      	ldr	r3, [r7, #4]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <_close>:
	}
	return len;
}

int _close(int file)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
	return -1;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032b6:	605a      	str	r2, [r3, #4]
	return 0;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <_isatty>:

int _isatty(int file)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
	return 1;
 80032ce:	2301      	movs	r3, #1
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
	return 0;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <_sbrk+0x5c>)
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <_sbrk+0x60>)
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <_sbrk+0x64>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <_sbrk+0x64>)
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <_sbrk+0x68>)
 8003318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <_sbrk+0x64>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	429a      	cmp	r2, r3
 8003326:	d207      	bcs.n	8003338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003328:	f003 fc6e 	bl	8006c08 <__errno>
 800332c:	4603      	mov	r3, r0
 800332e:	220c      	movs	r2, #12
 8003330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003336:	e009      	b.n	800334c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <_sbrk+0x64>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <_sbrk+0x64>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	4a05      	ldr	r2, [pc, #20]	; (800335c <_sbrk+0x64>)
 8003348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20020000 	.word	0x20020000
 8003358:	00000400 	.word	0x00000400
 800335c:	2000089c 	.word	0x2000089c
 8003360:	200008b8 	.word	0x200008b8

08003364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <SystemInit+0x20>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <SystemInit+0x20>)
 8003370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <Reset_Handler>:
 8003388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c0 <LoopFillZerobss+0x12>
 800338c:	480d      	ldr	r0, [pc, #52]	; (80033c4 <LoopFillZerobss+0x16>)
 800338e:	490e      	ldr	r1, [pc, #56]	; (80033c8 <LoopFillZerobss+0x1a>)
 8003390:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <LoopFillZerobss+0x1e>)
 8003392:	2300      	movs	r3, #0
 8003394:	e002      	b.n	800339c <LoopCopyDataInit>

08003396 <CopyDataInit>:
 8003396:	58d4      	ldr	r4, [r2, r3]
 8003398:	50c4      	str	r4, [r0, r3]
 800339a:	3304      	adds	r3, #4

0800339c <LoopCopyDataInit>:
 800339c:	18c4      	adds	r4, r0, r3
 800339e:	428c      	cmp	r4, r1
 80033a0:	d3f9      	bcc.n	8003396 <CopyDataInit>
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <LoopFillZerobss+0x22>)
 80033a4:	4c0b      	ldr	r4, [pc, #44]	; (80033d4 <LoopFillZerobss+0x26>)
 80033a6:	2300      	movs	r3, #0
 80033a8:	e001      	b.n	80033ae <LoopFillZerobss>

080033aa <FillZerobss>:
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	3204      	adds	r2, #4

080033ae <LoopFillZerobss>:
 80033ae:	42a2      	cmp	r2, r4
 80033b0:	d3fb      	bcc.n	80033aa <FillZerobss>
 80033b2:	f7ff ffd7 	bl	8003364 <SystemInit>
 80033b6:	f003 fc2d 	bl	8006c14 <__libc_init_array>
 80033ba:	f7fe fe5b 	bl	8002074 <main>
 80033be:	4770      	bx	lr
 80033c0:	20020000 	.word	0x20020000
 80033c4:	20000000 	.word	0x20000000
 80033c8:	200001e0 	.word	0x200001e0
 80033cc:	08009f8c 	.word	0x08009f8c
 80033d0:	200001e0 	.word	0x200001e0
 80033d4:	200008b4 	.word	0x200008b4

080033d8 <ADC_IRQHandler>:
 80033d8:	e7fe      	b.n	80033d8 <ADC_IRQHandler>
	...

080033dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_Init+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_Init+0x40>)
 80033e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_Init+0x40>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_Init+0x40>)
 80033f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_Init+0x40>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_Init+0x40>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003404:	2003      	movs	r0, #3
 8003406:	f000 f94f 	bl	80036a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800340a:	2000      	movs	r0, #0
 800340c:	f000 f808 	bl	8003420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003410:	f7ff fc5e 	bl	8002cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023c00 	.word	0x40023c00

08003420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_InitTick+0x54>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_InitTick+0x58>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4619      	mov	r1, r3
 8003432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003436:	fbb3 f3f1 	udiv	r3, r3, r1
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f967 	bl	8003712 <HAL_SYSTICK_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e00e      	b.n	800346c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b0f      	cmp	r3, #15
 8003452:	d80a      	bhi.n	800346a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003454:	2200      	movs	r2, #0
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800345c:	f000 f92f 	bl	80036be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003460:	4a06      	ldr	r2, [pc, #24]	; (800347c <HAL_InitTick+0x5c>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000004 	.word	0x20000004
 8003478:	2000000c 	.word	0x2000000c
 800347c:	20000008 	.word	0x20000008

08003480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_IncTick+0x20>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_IncTick+0x24>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_IncTick+0x24>)
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	2000000c 	.word	0x2000000c
 80034a4:	200008a0 	.word	0x200008a0

080034a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return uwTick;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_GetTick+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	200008a0 	.word	0x200008a0

080034c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c8:	f7ff ffee 	bl	80034a8 <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d8:	d005      	beq.n	80034e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_Delay+0x44>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

 while((HAL_GetTick() - tickstart) < wait)
 80034e6:	bf00      	nop
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d8f7      	bhi.n	80034e8 <HAL_Delay+0x28>
  {
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	2000000c 	.word	0x2000000c

08003508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003524:	4013      	ands	r3, r2
 8003526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353a:	4a04      	ldr	r2, [pc, #16]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	60d3      	str	r3, [r2, #12]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <__NVIC_GetPriorityGrouping+0x18>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 0307 	and.w	r3, r3, #7
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	2b00      	cmp	r3, #0
 800357c:	db0b      	blt.n	8003596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	4907      	ldr	r1, [pc, #28]	; (80035a4 <__NVIC_EnableIRQ+0x38>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2001      	movs	r0, #1
 800358e:	fa00 f202 	lsl.w	r2, r0, r2
 8003592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000e100 	.word	0xe000e100

080035a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	db0a      	blt.n	80035d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	490c      	ldr	r1, [pc, #48]	; (80035f4 <__NVIC_SetPriority+0x4c>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	0112      	lsls	r2, r2, #4
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	440b      	add	r3, r1
 80035cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d0:	e00a      	b.n	80035e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4908      	ldr	r1, [pc, #32]	; (80035f8 <__NVIC_SetPriority+0x50>)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	3b04      	subs	r3, #4
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	440b      	add	r3, r1
 80035e6:	761a      	strb	r2, [r3, #24]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000e100 	.word	0xe000e100
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f1c3 0307 	rsb	r3, r3, #7
 8003616:	2b04      	cmp	r3, #4
 8003618:	bf28      	it	cs
 800361a:	2304      	movcs	r3, #4
 800361c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3304      	adds	r3, #4
 8003622:	2b06      	cmp	r3, #6
 8003624:	d902      	bls.n	800362c <NVIC_EncodePriority+0x30>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3b03      	subs	r3, #3
 800362a:	e000      	b.n	800362e <NVIC_EncodePriority+0x32>
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	401a      	ands	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003644:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	43d9      	mvns	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	4313      	orrs	r3, r2
         );
}
 8003656:	4618      	mov	r0, r3
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003674:	d301      	bcc.n	800367a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003676:	2301      	movs	r3, #1
 8003678:	e00f      	b.n	800369a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <SysTick_Config+0x40>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003682:	210f      	movs	r1, #15
 8003684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003688:	f7ff ff8e 	bl	80035a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <SysTick_Config+0x40>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <SysTick_Config+0x40>)
 8003694:	2207      	movs	r2, #7
 8003696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	e000e010 	.word	0xe000e010

080036a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff29 	bl	8003508 <__NVIC_SetPriorityGrouping>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d0:	f7ff ff3e 	bl	8003550 <__NVIC_GetPriorityGrouping>
 80036d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f7ff ff8e 	bl	80035fc <NVIC_EncodePriority>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff5d 	bl	80035a8 <__NVIC_SetPriority>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff31 	bl	800356c <__NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffa2 	bl	8003664 <SysTick_Config>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff feb6 	bl	80034a8 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e099      	b.n	800387c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003768:	e00f      	b.n	800378a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800376a:	f7ff fe9d 	bl	80034a8 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b05      	cmp	r3, #5
 8003776:	d908      	bls.n	800378a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2203      	movs	r2, #3
 8003782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e078      	b.n	800387c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e8      	bne.n	800376a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4b38      	ldr	r3, [pc, #224]	; (8003884 <HAL_DMA_Init+0x158>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d107      	bne.n	80037f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	4313      	orrs	r3, r2
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0307 	bic.w	r3, r3, #7
 800380a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b04      	cmp	r3, #4
 800381c:	d117      	bne.n	800384e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00e      	beq.n	800384e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fb01 	bl	8003e38 <DMA_CheckFifoParam>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800384a:	2301      	movs	r3, #1
 800384c:	e016      	b.n	800387c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fab8 	bl	8003dcc <DMA_CalcBaseAndBitshift>
 800385c:	4603      	mov	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	223f      	movs	r2, #63	; 0x3f
 8003866:	409a      	lsls	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	f010803f 	.word	0xf010803f

08003888 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_DMA_Start_IT+0x26>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e040      	b.n	8003930 <HAL_DMA_Start_IT+0xa8>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d12f      	bne.n	8003922 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2202      	movs	r2, #2
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa4a 	bl	8003d70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	223f      	movs	r2, #63	; 0x3f
 80038e2:	409a      	lsls	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0216 	orr.w	r2, r2, #22
 80038f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0208 	orr.w	r2, r2, #8
 800390e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e005      	b.n	800392e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800392a:	2302      	movs	r3, #2
 800392c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800392e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003946:	f7ff fdaf 	bl	80034a8 <HAL_GetTick>
 800394a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d008      	beq.n	800396a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e052      	b.n	8003a10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0216 	bic.w	r2, r2, #22
 8003978:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003988:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <HAL_DMA_Abort+0x62>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0208 	bic.w	r2, r2, #8
 80039a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ba:	e013      	b.n	80039e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039bc:	f7ff fd74 	bl	80034a8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b05      	cmp	r3, #5
 80039c8:	d90c      	bls.n	80039e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2203      	movs	r2, #3
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e015      	b.n	8003a10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e4      	bne.n	80039bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	223f      	movs	r2, #63	; 0x3f
 80039f8:	409a      	lsls	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d004      	beq.n	8003a36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e00c      	b.n	8003a50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2205      	movs	r2, #5
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a68:	4b8e      	ldr	r3, [pc, #568]	; (8003ca4 <HAL_DMA_IRQHandler+0x248>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a8e      	ldr	r2, [pc, #568]	; (8003ca8 <HAL_DMA_IRQHandler+0x24c>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0a9b      	lsrs	r3, r3, #10
 8003a74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a86:	2208      	movs	r2, #8
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01a      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0204 	bic.w	r2, r2, #4
 8003aae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	2201      	movs	r2, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d012      	beq.n	8003afe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	2201      	movs	r2, #1
 8003aec:	409a      	lsls	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	f043 0202 	orr.w	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	2204      	movs	r2, #4
 8003b04:	409a      	lsls	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d012      	beq.n	8003b34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	2204      	movs	r2, #4
 8003b22:	409a      	lsls	r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	f043 0204 	orr.w	r2, r3, #4
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	2210      	movs	r2, #16
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d043      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d03c      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	2210      	movs	r2, #16
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d018      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d108      	bne.n	8003b8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d024      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
 8003b8a:	e01f      	b.n	8003bcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01b      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
 8003b9c:	e016      	b.n	8003bcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d107      	bne.n	8003bbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0208 	bic.w	r2, r2, #8
 8003bba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 808f 	beq.w	8003cfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8087 	beq.w	8003cfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d136      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0216 	bic.w	r2, r2, #22
 8003c14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <HAL_DMA_IRQHandler+0x1da>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0208 	bic.w	r2, r2, #8
 8003c44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	223f      	movs	r2, #63	; 0x3f
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d07e      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
        }
        return;
 8003c72:	e079      	b.n	8003d68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01d      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10d      	bne.n	8003cac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d031      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
 8003ca0:	e02c      	b.n	8003cfc <HAL_DMA_IRQHandler+0x2a0>
 8003ca2:	bf00      	nop
 8003ca4:	20000004 	.word	0x20000004
 8003ca8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d023      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	4798      	blx	r3
 8003cbc:	e01e      	b.n	8003cfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10f      	bne.n	8003cec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0210 	bic.w	r2, r2, #16
 8003cda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d032      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d022      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2205      	movs	r2, #5
 8003d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d307      	bcc.n	8003d44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f2      	bne.n	8003d28 <HAL_DMA_IRQHandler+0x2cc>
 8003d42:	e000      	b.n	8003d46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	4798      	blx	r3
 8003d66:	e000      	b.n	8003d6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d68:	bf00      	nop
    }
  }
}
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d108      	bne.n	8003db0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dae:	e007      	b.n	8003dc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	60da      	str	r2, [r3, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	3b10      	subs	r3, #16
 8003ddc:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <DMA_CalcBaseAndBitshift+0x64>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003de6:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <DMA_CalcBaseAndBitshift+0x68>)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d909      	bls.n	8003e0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	1d1a      	adds	r2, r3, #4
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e0c:	e007      	b.n	8003e1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e16:	f023 0303 	bic.w	r3, r3, #3
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	aaaaaaab 	.word	0xaaaaaaab
 8003e34:	08009b98 	.word	0x08009b98

08003e38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d11f      	bne.n	8003e92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d856      	bhi.n	8003f06 <DMA_CheckFifoParam+0xce>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <DMA_CheckFifoParam+0x28>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e71 	.word	0x08003e71
 8003e64:	08003e83 	.word	0x08003e83
 8003e68:	08003e71 	.word	0x08003e71
 8003e6c:	08003f07 	.word	0x08003f07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d046      	beq.n	8003f0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e80:	e043      	b.n	8003f0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e8a:	d140      	bne.n	8003f0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e90:	e03d      	b.n	8003f0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9a:	d121      	bne.n	8003ee0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d837      	bhi.n	8003f12 <DMA_CheckFifoParam+0xda>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <DMA_CheckFifoParam+0x70>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003eb9 	.word	0x08003eb9
 8003eac:	08003ebf 	.word	0x08003ebf
 8003eb0:	08003eb9 	.word	0x08003eb9
 8003eb4:	08003ed1 	.word	0x08003ed1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e030      	b.n	8003f20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d025      	beq.n	8003f16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ece:	e022      	b.n	8003f16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ed8:	d11f      	bne.n	8003f1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ede:	e01c      	b.n	8003f1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d903      	bls.n	8003eee <DMA_CheckFifoParam+0xb6>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d003      	beq.n	8003ef4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003eec:	e018      	b.n	8003f20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef2:	e015      	b.n	8003f20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00e      	beq.n	8003f1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
      break;
 8003f04:	e00b      	b.n	8003f1e <DMA_CheckFifoParam+0xe6>
      break;
 8003f06:	bf00      	nop
 8003f08:	e00a      	b.n	8003f20 <DMA_CheckFifoParam+0xe8>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e008      	b.n	8003f20 <DMA_CheckFifoParam+0xe8>
      break;
 8003f0e:	bf00      	nop
 8003f10:	e006      	b.n	8003f20 <DMA_CheckFifoParam+0xe8>
      break;
 8003f12:	bf00      	nop
 8003f14:	e004      	b.n	8003f20 <DMA_CheckFifoParam+0xe8>
      break;
 8003f16:	bf00      	nop
 8003f18:	e002      	b.n	8003f20 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <DMA_CheckFifoParam+0xe8>
      break;
 8003f1e:	bf00      	nop
    }
  } 
  
  return status; 
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop

08003f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b089      	sub	sp, #36	; 0x24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	e159      	b.n	8004200 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	f040 8148 	bne.w	80041fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d005      	beq.n	8003f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d130      	bne.n	8003fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fb8:	2201      	movs	r2, #1
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 0201 	and.w	r2, r3, #1
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d017      	beq.n	8004020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d123      	bne.n	8004074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	08da      	lsrs	r2, r3, #3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3208      	adds	r2, #8
 8004034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	220f      	movs	r2, #15
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	08da      	lsrs	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3208      	adds	r2, #8
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	2203      	movs	r2, #3
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0203 	and.w	r2, r3, #3
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80a2 	beq.w	80041fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	4b57      	ldr	r3, [pc, #348]	; (8004218 <HAL_GPIO_Init+0x2e8>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	4a56      	ldr	r2, [pc, #344]	; (8004218 <HAL_GPIO_Init+0x2e8>)
 80040c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040c4:	6453      	str	r3, [r2, #68]	; 0x44
 80040c6:	4b54      	ldr	r3, [pc, #336]	; (8004218 <HAL_GPIO_Init+0x2e8>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040d2:	4a52      	ldr	r2, [pc, #328]	; (800421c <HAL_GPIO_Init+0x2ec>)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	089b      	lsrs	r3, r3, #2
 80040d8:	3302      	adds	r3, #2
 80040da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	220f      	movs	r2, #15
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a49      	ldr	r2, [pc, #292]	; (8004220 <HAL_GPIO_Init+0x2f0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d019      	beq.n	8004132 <HAL_GPIO_Init+0x202>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a48      	ldr	r2, [pc, #288]	; (8004224 <HAL_GPIO_Init+0x2f4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_GPIO_Init+0x1fe>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a47      	ldr	r2, [pc, #284]	; (8004228 <HAL_GPIO_Init+0x2f8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00d      	beq.n	800412a <HAL_GPIO_Init+0x1fa>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a46      	ldr	r2, [pc, #280]	; (800422c <HAL_GPIO_Init+0x2fc>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d007      	beq.n	8004126 <HAL_GPIO_Init+0x1f6>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a45      	ldr	r2, [pc, #276]	; (8004230 <HAL_GPIO_Init+0x300>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d101      	bne.n	8004122 <HAL_GPIO_Init+0x1f2>
 800411e:	2304      	movs	r3, #4
 8004120:	e008      	b.n	8004134 <HAL_GPIO_Init+0x204>
 8004122:	2307      	movs	r3, #7
 8004124:	e006      	b.n	8004134 <HAL_GPIO_Init+0x204>
 8004126:	2303      	movs	r3, #3
 8004128:	e004      	b.n	8004134 <HAL_GPIO_Init+0x204>
 800412a:	2302      	movs	r3, #2
 800412c:	e002      	b.n	8004134 <HAL_GPIO_Init+0x204>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <HAL_GPIO_Init+0x204>
 8004132:	2300      	movs	r3, #0
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	f002 0203 	and.w	r2, r2, #3
 800413a:	0092      	lsls	r2, r2, #2
 800413c:	4093      	lsls	r3, r2
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004144:	4935      	ldr	r1, [pc, #212]	; (800421c <HAL_GPIO_Init+0x2ec>)
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	089b      	lsrs	r3, r3, #2
 800414a:	3302      	adds	r3, #2
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004152:	4b38      	ldr	r3, [pc, #224]	; (8004234 <HAL_GPIO_Init+0x304>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004176:	4a2f      	ldr	r2, [pc, #188]	; (8004234 <HAL_GPIO_Init+0x304>)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800417c:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <HAL_GPIO_Init+0x304>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	43db      	mvns	r3, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041a0:	4a24      	ldr	r2, [pc, #144]	; (8004234 <HAL_GPIO_Init+0x304>)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041a6:	4b23      	ldr	r3, [pc, #140]	; (8004234 <HAL_GPIO_Init+0x304>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	43db      	mvns	r3, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4013      	ands	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ca:	4a1a      	ldr	r2, [pc, #104]	; (8004234 <HAL_GPIO_Init+0x304>)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d0:	4b18      	ldr	r3, [pc, #96]	; (8004234 <HAL_GPIO_Init+0x304>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041f4:	4a0f      	ldr	r2, [pc, #60]	; (8004234 <HAL_GPIO_Init+0x304>)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3301      	adds	r3, #1
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b0f      	cmp	r3, #15
 8004204:	f67f aea2 	bls.w	8003f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	3724      	adds	r7, #36	; 0x24
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800
 800421c:	40013800 	.word	0x40013800
 8004220:	40020000 	.word	0x40020000
 8004224:	40020400 	.word	0x40020400
 8004228:	40020800 	.word	0x40020800
 800422c:	40020c00 	.word	0x40020c00
 8004230:	40021000 	.word	0x40021000
 8004234:	40013c00 	.word	0x40013c00

08004238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
 8004244:	4613      	mov	r3, r2
 8004246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004248:	787b      	ldrb	r3, [r7, #1]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004254:	e003      	b.n	800425e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	041a      	lsls	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	619a      	str	r2, [r3, #24]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800427c:	887a      	ldrh	r2, [r7, #2]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4013      	ands	r3, r2
 8004282:	041a      	lsls	r2, r3, #16
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	43d9      	mvns	r1, r3
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	400b      	ands	r3, r1
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	619a      	str	r2, [r3, #24]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042aa:	4b08      	ldr	r3, [pc, #32]	; (80042cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d006      	beq.n	80042c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042b6:	4a05      	ldr	r2, [pc, #20]	; (80042cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042bc:	88fb      	ldrh	r3, [r7, #6]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc ff0e 	bl	80010e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40013c00 	.word	0x40013c00

080042d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e267      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d075      	beq.n	80043da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ee:	4b88      	ldr	r3, [pc, #544]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d00c      	beq.n	8004314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042fa:	4b85      	ldr	r3, [pc, #532]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004302:	2b08      	cmp	r3, #8
 8004304:	d112      	bne.n	800432c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004306:	4b82      	ldr	r3, [pc, #520]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004312:	d10b      	bne.n	800432c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	4b7e      	ldr	r3, [pc, #504]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d05b      	beq.n	80043d8 <HAL_RCC_OscConfig+0x108>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d157      	bne.n	80043d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e242      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004334:	d106      	bne.n	8004344 <HAL_RCC_OscConfig+0x74>
 8004336:	4b76      	ldr	r3, [pc, #472]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a75      	ldr	r2, [pc, #468]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 800433c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	e01d      	b.n	8004380 <HAL_RCC_OscConfig+0xb0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800434c:	d10c      	bne.n	8004368 <HAL_RCC_OscConfig+0x98>
 800434e:	4b70      	ldr	r3, [pc, #448]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6f      	ldr	r2, [pc, #444]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 8004354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	4b6d      	ldr	r3, [pc, #436]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a6c      	ldr	r2, [pc, #432]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e00b      	b.n	8004380 <HAL_RCC_OscConfig+0xb0>
 8004368:	4b69      	ldr	r3, [pc, #420]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a68      	ldr	r2, [pc, #416]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	4b66      	ldr	r3, [pc, #408]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a65      	ldr	r2, [pc, #404]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 800437a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800437e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d013      	beq.n	80043b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7ff f88e 	bl	80034a8 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004390:	f7ff f88a 	bl	80034a8 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	; 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e207      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	4b5b      	ldr	r3, [pc, #364]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0xc0>
 80043ae:	e014      	b.n	80043da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b0:	f7ff f87a 	bl	80034a8 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043b8:	f7ff f876 	bl	80034a8 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b64      	cmp	r3, #100	; 0x64
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e1f3      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ca:	4b51      	ldr	r3, [pc, #324]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0xe8>
 80043d6:	e000      	b.n	80043da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d063      	beq.n	80044ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043e6:	4b4a      	ldr	r3, [pc, #296]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00b      	beq.n	800440a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f2:	4b47      	ldr	r3, [pc, #284]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d11c      	bne.n	8004438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043fe:	4b44      	ldr	r3, [pc, #272]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d116      	bne.n	8004438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440a:	4b41      	ldr	r3, [pc, #260]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <HAL_RCC_OscConfig+0x152>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d001      	beq.n	8004422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e1c7      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004422:	4b3b      	ldr	r3, [pc, #236]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4937      	ldr	r1, [pc, #220]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 8004432:	4313      	orrs	r3, r2
 8004434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004436:	e03a      	b.n	80044ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d020      	beq.n	8004482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004440:	4b34      	ldr	r3, [pc, #208]	; (8004514 <HAL_RCC_OscConfig+0x244>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004446:	f7ff f82f 	bl	80034a8 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800444e:	f7ff f82b 	bl	80034a8 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e1a8      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004460:	4b2b      	ldr	r3, [pc, #172]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0f0      	beq.n	800444e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446c:	4b28      	ldr	r3, [pc, #160]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	4925      	ldr	r1, [pc, #148]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 800447c:	4313      	orrs	r3, r2
 800447e:	600b      	str	r3, [r1, #0]
 8004480:	e015      	b.n	80044ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004482:	4b24      	ldr	r3, [pc, #144]	; (8004514 <HAL_RCC_OscConfig+0x244>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7ff f80e 	bl	80034a8 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004490:	f7ff f80a 	bl	80034a8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e187      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d036      	beq.n	8004528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d016      	beq.n	80044f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044c2:	4b15      	ldr	r3, [pc, #84]	; (8004518 <HAL_RCC_OscConfig+0x248>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c8:	f7fe ffee 	bl	80034a8 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d0:	f7fe ffea 	bl	80034a8 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e167      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_OscConfig+0x240>)
 80044e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x200>
 80044ee:	e01b      	b.n	8004528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <HAL_RCC_OscConfig+0x248>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f6:	f7fe ffd7 	bl	80034a8 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044fc:	e00e      	b.n	800451c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044fe:	f7fe ffd3 	bl	80034a8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d907      	bls.n	800451c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e150      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
 8004510:	40023800 	.word	0x40023800
 8004514:	42470000 	.word	0x42470000
 8004518:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800451c:	4b88      	ldr	r3, [pc, #544]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 800451e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1ea      	bne.n	80044fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8097 	beq.w	8004664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004536:	2300      	movs	r3, #0
 8004538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800453a:	4b81      	ldr	r3, [pc, #516]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10f      	bne.n	8004566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	4b7d      	ldr	r3, [pc, #500]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	4a7c      	ldr	r2, [pc, #496]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 8004550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004554:	6413      	str	r3, [r2, #64]	; 0x40
 8004556:	4b7a      	ldr	r3, [pc, #488]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004562:	2301      	movs	r3, #1
 8004564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004566:	4b77      	ldr	r3, [pc, #476]	; (8004744 <HAL_RCC_OscConfig+0x474>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d118      	bne.n	80045a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004572:	4b74      	ldr	r3, [pc, #464]	; (8004744 <HAL_RCC_OscConfig+0x474>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a73      	ldr	r2, [pc, #460]	; (8004744 <HAL_RCC_OscConfig+0x474>)
 8004578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457e:	f7fe ff93 	bl	80034a8 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004586:	f7fe ff8f 	bl	80034a8 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e10c      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	4b6a      	ldr	r3, [pc, #424]	; (8004744 <HAL_RCC_OscConfig+0x474>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d106      	bne.n	80045ba <HAL_RCC_OscConfig+0x2ea>
 80045ac:	4b64      	ldr	r3, [pc, #400]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4a63      	ldr	r2, [pc, #396]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	6713      	str	r3, [r2, #112]	; 0x70
 80045b8:	e01c      	b.n	80045f4 <HAL_RCC_OscConfig+0x324>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b05      	cmp	r3, #5
 80045c0:	d10c      	bne.n	80045dc <HAL_RCC_OscConfig+0x30c>
 80045c2:	4b5f      	ldr	r3, [pc, #380]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	4a5e      	ldr	r2, [pc, #376]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80045c8:	f043 0304 	orr.w	r3, r3, #4
 80045cc:	6713      	str	r3, [r2, #112]	; 0x70
 80045ce:	4b5c      	ldr	r3, [pc, #368]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	4a5b      	ldr	r2, [pc, #364]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	6713      	str	r3, [r2, #112]	; 0x70
 80045da:	e00b      	b.n	80045f4 <HAL_RCC_OscConfig+0x324>
 80045dc:	4b58      	ldr	r3, [pc, #352]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a57      	ldr	r2, [pc, #348]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
 80045e8:	4b55      	ldr	r3, [pc, #340]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	4a54      	ldr	r2, [pc, #336]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80045ee:	f023 0304 	bic.w	r3, r3, #4
 80045f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d015      	beq.n	8004628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fc:	f7fe ff54 	bl	80034a8 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004602:	e00a      	b.n	800461a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004604:	f7fe ff50 	bl	80034a8 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e0cb      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461a:	4b49      	ldr	r3, [pc, #292]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0ee      	beq.n	8004604 <HAL_RCC_OscConfig+0x334>
 8004626:	e014      	b.n	8004652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004628:	f7fe ff3e 	bl	80034a8 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462e:	e00a      	b.n	8004646 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004630:	f7fe ff3a 	bl	80034a8 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e0b5      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004646:	4b3e      	ldr	r3, [pc, #248]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1ee      	bne.n	8004630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004652:	7dfb      	ldrb	r3, [r7, #23]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004658:	4b39      	ldr	r3, [pc, #228]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	4a38      	ldr	r2, [pc, #224]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 800465e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004662:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80a1 	beq.w	80047b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800466e:	4b34      	ldr	r3, [pc, #208]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	2b08      	cmp	r3, #8
 8004678:	d05c      	beq.n	8004734 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d141      	bne.n	8004706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004682:	4b31      	ldr	r3, [pc, #196]	; (8004748 <HAL_RCC_OscConfig+0x478>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004688:	f7fe ff0e 	bl	80034a8 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004690:	f7fe ff0a 	bl	80034a8 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e087      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a2:	4b27      	ldr	r3, [pc, #156]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69da      	ldr	r2, [r3, #28]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	019b      	lsls	r3, r3, #6
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	085b      	lsrs	r3, r3, #1
 80046c6:	3b01      	subs	r3, #1
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	491b      	ldr	r1, [pc, #108]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d8:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_RCC_OscConfig+0x478>)
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046de:	f7fe fee3 	bl	80034a8 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e6:	f7fe fedf 	bl	80034a8 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e05c      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f8:	4b11      	ldr	r3, [pc, #68]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x416>
 8004704:	e054      	b.n	80047b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <HAL_RCC_OscConfig+0x478>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fe fecc 	bl	80034a8 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004714:	f7fe fec8 	bl	80034a8 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e045      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_RCC_OscConfig+0x470>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x444>
 8004732:	e03d      	b.n	80047b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d107      	bne.n	800474c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e038      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
 8004740:	40023800 	.word	0x40023800
 8004744:	40007000 	.word	0x40007000
 8004748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800474c:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <HAL_RCC_OscConfig+0x4ec>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d028      	beq.n	80047ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d121      	bne.n	80047ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d11a      	bne.n	80047ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800477c:	4013      	ands	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004784:	4293      	cmp	r3, r2
 8004786:	d111      	bne.n	80047ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	3b01      	subs	r3, #1
 8004796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d107      	bne.n	80047ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40023800 	.word	0x40023800

080047c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0cc      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047d4:	4b68      	ldr	r3, [pc, #416]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d90c      	bls.n	80047fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b65      	ldr	r3, [pc, #404]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b63      	ldr	r3, [pc, #396]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0b8      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d020      	beq.n	800484a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004814:	4b59      	ldr	r3, [pc, #356]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4a58      	ldr	r2, [pc, #352]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800481e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800482c:	4b53      	ldr	r3, [pc, #332]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4a52      	ldr	r2, [pc, #328]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004838:	4b50      	ldr	r3, [pc, #320]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	494d      	ldr	r1, [pc, #308]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	4313      	orrs	r3, r2
 8004848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d044      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485e:	4b47      	ldr	r3, [pc, #284]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d119      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e07f      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d003      	beq.n	800487e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800487a:	2b03      	cmp	r3, #3
 800487c:	d107      	bne.n	800488e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487e:	4b3f      	ldr	r3, [pc, #252]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e06f      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488e:	4b3b      	ldr	r3, [pc, #236]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e067      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489e:	4b37      	ldr	r3, [pc, #220]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f023 0203 	bic.w	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4934      	ldr	r1, [pc, #208]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048b0:	f7fe fdfa 	bl	80034a8 <HAL_GetTick>
 80048b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b8:	f7fe fdf6 	bl	80034a8 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e04f      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	4b2b      	ldr	r3, [pc, #172]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 020c 	and.w	r2, r3, #12
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1eb      	bne.n	80048b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048e0:	4b25      	ldr	r3, [pc, #148]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d20c      	bcs.n	8004908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b22      	ldr	r3, [pc, #136]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	4b20      	ldr	r3, [pc, #128]	; (8004978 <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e032      	b.n	800496e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4916      	ldr	r1, [pc, #88]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	490e      	ldr	r1, [pc, #56]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004946:	f000 f821 	bl	800498c <HAL_RCC_GetSysClockFreq>
 800494a:	4602      	mov	r2, r0
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	490a      	ldr	r1, [pc, #40]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 8004958:	5ccb      	ldrb	r3, [r1, r3]
 800495a:	fa22 f303 	lsr.w	r3, r2, r3
 800495e:	4a09      	ldr	r2, [pc, #36]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <HAL_RCC_ClockConfig+0x1c8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe fd5a 	bl	8003420 <HAL_InitTick>

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40023c00 	.word	0x40023c00
 800497c:	40023800 	.word	0x40023800
 8004980:	08009b80 	.word	0x08009b80
 8004984:	20000004 	.word	0x20000004
 8004988:	20000008 	.word	0x20000008

0800498c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800498c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004990:	b094      	sub	sp, #80	; 0x50
 8004992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	647b      	str	r3, [r7, #68]	; 0x44
 8004998:	2300      	movs	r3, #0
 800499a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800499c:	2300      	movs	r3, #0
 800499e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049a4:	4b79      	ldr	r3, [pc, #484]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 030c 	and.w	r3, r3, #12
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d00d      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x40>
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	f200 80e1 	bhi.w	8004b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x34>
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d003      	beq.n	80049c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049be:	e0db      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049c0:	4b73      	ldr	r3, [pc, #460]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80049c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049c4:	e0db      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049c6:	4b73      	ldr	r3, [pc, #460]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80049c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ca:	e0d8      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049cc:	4b6f      	ldr	r3, [pc, #444]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049d6:	4b6d      	ldr	r3, [pc, #436]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d063      	beq.n	8004aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e2:	4b6a      	ldr	r3, [pc, #424]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	2200      	movs	r2, #0
 80049ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f4:	633b      	str	r3, [r7, #48]	; 0x30
 80049f6:	2300      	movs	r3, #0
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34
 80049fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049fe:	4622      	mov	r2, r4
 8004a00:	462b      	mov	r3, r5
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f04f 0100 	mov.w	r1, #0
 8004a0a:	0159      	lsls	r1, r3, #5
 8004a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a10:	0150      	lsls	r0, r2, #5
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4621      	mov	r1, r4
 8004a18:	1a51      	subs	r1, r2, r1
 8004a1a:	6139      	str	r1, [r7, #16]
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a30:	4659      	mov	r1, fp
 8004a32:	018b      	lsls	r3, r1, #6
 8004a34:	4651      	mov	r1, sl
 8004a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a3a:	4651      	mov	r1, sl
 8004a3c:	018a      	lsls	r2, r1, #6
 8004a3e:	4651      	mov	r1, sl
 8004a40:	ebb2 0801 	subs.w	r8, r2, r1
 8004a44:	4659      	mov	r1, fp
 8004a46:	eb63 0901 	sbc.w	r9, r3, r1
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a5e:	4690      	mov	r8, r2
 8004a60:	4699      	mov	r9, r3
 8004a62:	4623      	mov	r3, r4
 8004a64:	eb18 0303 	adds.w	r3, r8, r3
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	462b      	mov	r3, r5
 8004a6c:	eb49 0303 	adc.w	r3, r9, r3
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a7e:	4629      	mov	r1, r5
 8004a80:	024b      	lsls	r3, r1, #9
 8004a82:	4621      	mov	r1, r4
 8004a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a88:	4621      	mov	r1, r4
 8004a8a:	024a      	lsls	r2, r1, #9
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a92:	2200      	movs	r2, #0
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a9c:	f7fc f90c 	bl	8000cb8 <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa8:	e058      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aaa:	4b38      	ldr	r3, [pc, #224]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	099b      	lsrs	r3, r3, #6
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aba:	623b      	str	r3, [r7, #32]
 8004abc:	2300      	movs	r3, #0
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	f04f 0000 	mov.w	r0, #0
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	0159      	lsls	r1, r3, #5
 8004ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad6:	0150      	lsls	r0, r2, #5
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4641      	mov	r1, r8
 8004ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004afc:	ebb2 040a 	subs.w	r4, r2, sl
 8004b00:	eb63 050b 	sbc.w	r5, r3, fp
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	00eb      	lsls	r3, r5, #3
 8004b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b12:	00e2      	lsls	r2, r4, #3
 8004b14:	4614      	mov	r4, r2
 8004b16:	461d      	mov	r5, r3
 8004b18:	4643      	mov	r3, r8
 8004b1a:	18e3      	adds	r3, r4, r3
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	464b      	mov	r3, r9
 8004b20:	eb45 0303 	adc.w	r3, r5, r3
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b32:	4629      	mov	r1, r5
 8004b34:	028b      	lsls	r3, r1, #10
 8004b36:	4621      	mov	r1, r4
 8004b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	028a      	lsls	r2, r1, #10
 8004b40:	4610      	mov	r0, r2
 8004b42:	4619      	mov	r1, r3
 8004b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b46:	2200      	movs	r2, #0
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	61fa      	str	r2, [r7, #28]
 8004b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b50:	f7fc f8b2 	bl	8000cb8 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	3301      	adds	r3, #1
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b76:	e002      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3750      	adds	r7, #80	; 0x50
 8004b84:	46bd      	mov	sp, r7
 8004b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	00f42400 	.word	0x00f42400
 8004b94:	007a1200 	.word	0x007a1200

08004b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	; (8004bac <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000004 	.word	0x20000004

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bb4:	f7ff fff0 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	0a9b      	lsrs	r3, r3, #10
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4903      	ldr	r1, [pc, #12]	; (8004bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	08009b90 	.word	0x08009b90

08004bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bdc:	f7ff ffdc 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	0b5b      	lsrs	r3, r3, #13
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4903      	ldr	r1, [pc, #12]	; (8004bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	08009b90 	.word	0x08009b90

08004c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e041      	b.n	8004c96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fe f93e 	bl	8002ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	f000 fc28 	bl	8005494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d001      	beq.n	8004cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e044      	b.n	8004d42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1e      	ldr	r2, [pc, #120]	; (8004d50 <HAL_TIM_Base_Start_IT+0xb0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x6c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce2:	d013      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x6c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1a      	ldr	r2, [pc, #104]	; (8004d54 <HAL_TIM_Base_Start_IT+0xb4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x6c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <HAL_TIM_Base_Start_IT+0xb8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x6c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a17      	ldr	r2, [pc, #92]	; (8004d5c <HAL_TIM_Base_Start_IT+0xbc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x6c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d111      	bne.n	8004d30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d010      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2e:	e007      	b.n	8004d40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40014000 	.word	0x40014000

08004d64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e041      	b.n	8004dfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fd ffc8 	bl	8002d20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f000 fb76 	bl	8005494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <HAL_TIM_PWM_Start+0x24>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e022      	b.n	8004e6e <HAL_TIM_PWM_Start+0x6a>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d109      	bne.n	8004e42 <HAL_TIM_PWM_Start+0x3e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	e015      	b.n	8004e6e <HAL_TIM_PWM_Start+0x6a>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d109      	bne.n	8004e5c <HAL_TIM_PWM_Start+0x58>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e008      	b.n	8004e6e <HAL_TIM_PWM_Start+0x6a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e068      	b.n	8004f48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_PWM_Start+0x82>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e84:	e013      	b.n	8004eae <HAL_TIM_PWM_Start+0xaa>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_PWM_Start+0x92>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e94:	e00b      	b.n	8004eae <HAL_TIM_PWM_Start+0xaa>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0xa2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea4:	e003      	b.n	8004eae <HAL_TIM_PWM_Start+0xaa>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	6839      	ldr	r1, [r7, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fcf8 	bl	80058ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <HAL_TIM_PWM_Start+0x14c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d107      	bne.n	8004ed6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <HAL_TIM_PWM_Start+0x14c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d018      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x10e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee8:	d013      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x10e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <HAL_TIM_PWM_Start+0x150>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x10e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <HAL_TIM_PWM_Start+0x154>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x10e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <HAL_TIM_PWM_Start+0x158>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x10e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <HAL_TIM_PWM_Start+0x15c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d111      	bne.n	8004f36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b06      	cmp	r3, #6
 8004f22:	d010      	beq.n	8004f46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f34:	e007      	b.n	8004f46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0201 	orr.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40014000 	.word	0x40014000

08004f64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e097      	b.n	80050a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d106      	bne.n	8004f92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7fd fefd 	bl	8002d8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2202      	movs	r2, #2
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fa8:	f023 0307 	bic.w	r3, r3, #7
 8004fac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f000 fa6b 	bl	8005494 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005004:	f023 030c 	bic.w	r3, r3, #12
 8005008:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005014:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	4313      	orrs	r3, r2
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	011a      	lsls	r2, r3, #4
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	031b      	lsls	r3, r3, #12
 8005034:	4313      	orrs	r3, r2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005042:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	4313      	orrs	r3, r2
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d122      	bne.n	800510c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d11b      	bne.n	800510c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0202 	mvn.w	r2, #2
 80050dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9b0 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9a2 	bl	8005444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f9b3 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b04      	cmp	r3, #4
 8005118:	d122      	bne.n	8005160 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b04      	cmp	r3, #4
 8005126:	d11b      	bne.n	8005160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0204 	mvn.w	r2, #4
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2202      	movs	r2, #2
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f986 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f978 	bl	8005444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f989 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b08      	cmp	r3, #8
 800516c:	d122      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0308 	and.w	r3, r3, #8
 8005178:	2b08      	cmp	r3, #8
 800517a:	d11b      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0208 	mvn.w	r2, #8
 8005184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2204      	movs	r2, #4
 800518a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f95c 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f94e 	bl	8005444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f95f 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d122      	bne.n	8005208 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d11b      	bne.n	8005208 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0210 	mvn.w	r2, #16
 80051d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2208      	movs	r2, #8
 80051de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f932 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 80051f4:	e005      	b.n	8005202 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f924 	bl	8005444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f935 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b01      	cmp	r3, #1
 8005214:	d10e      	bne.n	8005234 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b01      	cmp	r3, #1
 8005222:	d107      	bne.n	8005234 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0201 	mvn.w	r2, #1
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7fb ff88 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	d10e      	bne.n	8005260 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524c:	2b80      	cmp	r3, #128	; 0x80
 800524e:	d107      	bne.n	8005260 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fbc4 	bl	80059e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b40      	cmp	r3, #64	; 0x40
 800526c:	d10e      	bne.n	800528c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d107      	bne.n	800528c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f8fa 	bl	8005480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b20      	cmp	r3, #32
 8005298:	d10e      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d107      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0220 	mvn.w	r2, #32
 80052b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fb8e 	bl	80059d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052da:	2302      	movs	r3, #2
 80052dc:	e0ae      	b.n	800543c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b0c      	cmp	r3, #12
 80052ea:	f200 809f 	bhi.w	800542c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052ee:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005329 	.word	0x08005329
 80052f8:	0800542d 	.word	0x0800542d
 80052fc:	0800542d 	.word	0x0800542d
 8005300:	0800542d 	.word	0x0800542d
 8005304:	08005369 	.word	0x08005369
 8005308:	0800542d 	.word	0x0800542d
 800530c:	0800542d 	.word	0x0800542d
 8005310:	0800542d 	.word	0x0800542d
 8005314:	080053ab 	.word	0x080053ab
 8005318:	0800542d 	.word	0x0800542d
 800531c:	0800542d 	.word	0x0800542d
 8005320:	0800542d 	.word	0x0800542d
 8005324:	080053eb 	.word	0x080053eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f930 	bl	8005594 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0208 	orr.w	r2, r2, #8
 8005342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0204 	bic.w	r2, r2, #4
 8005352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6999      	ldr	r1, [r3, #24]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	691a      	ldr	r2, [r3, #16]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	619a      	str	r2, [r3, #24]
      break;
 8005366:	e064      	b.n	8005432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f976 	bl	8005660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6999      	ldr	r1, [r3, #24]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	021a      	lsls	r2, r3, #8
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	619a      	str	r2, [r3, #24]
      break;
 80053a8:	e043      	b.n	8005432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 f9c1 	bl	8005738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0208 	orr.w	r2, r2, #8
 80053c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0204 	bic.w	r2, r2, #4
 80053d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69d9      	ldr	r1, [r3, #28]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	61da      	str	r2, [r3, #28]
      break;
 80053e8:	e023      	b.n	8005432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fa0b 	bl	800580c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69d9      	ldr	r1, [r3, #28]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	021a      	lsls	r2, r3, #8
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	61da      	str	r2, [r3, #28]
      break;
 800542a:	e002      	b.n	8005432 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	75fb      	strb	r3, [r7, #23]
      break;
 8005430:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800543a:	7dfb      	ldrb	r3, [r7, #23]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a34      	ldr	r2, [pc, #208]	; (8005578 <TIM_Base_SetConfig+0xe4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00f      	beq.n	80054cc <TIM_Base_SetConfig+0x38>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b2:	d00b      	beq.n	80054cc <TIM_Base_SetConfig+0x38>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a31      	ldr	r2, [pc, #196]	; (800557c <TIM_Base_SetConfig+0xe8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <TIM_Base_SetConfig+0x38>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a30      	ldr	r2, [pc, #192]	; (8005580 <TIM_Base_SetConfig+0xec>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_Base_SetConfig+0x38>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a2f      	ldr	r2, [pc, #188]	; (8005584 <TIM_Base_SetConfig+0xf0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d108      	bne.n	80054de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <TIM_Base_SetConfig+0xe4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01b      	beq.n	800551e <TIM_Base_SetConfig+0x8a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ec:	d017      	beq.n	800551e <TIM_Base_SetConfig+0x8a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a22      	ldr	r2, [pc, #136]	; (800557c <TIM_Base_SetConfig+0xe8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d013      	beq.n	800551e <TIM_Base_SetConfig+0x8a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a21      	ldr	r2, [pc, #132]	; (8005580 <TIM_Base_SetConfig+0xec>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00f      	beq.n	800551e <TIM_Base_SetConfig+0x8a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a20      	ldr	r2, [pc, #128]	; (8005584 <TIM_Base_SetConfig+0xf0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00b      	beq.n	800551e <TIM_Base_SetConfig+0x8a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <TIM_Base_SetConfig+0xf4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d007      	beq.n	800551e <TIM_Base_SetConfig+0x8a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a1e      	ldr	r2, [pc, #120]	; (800558c <TIM_Base_SetConfig+0xf8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_Base_SetConfig+0x8a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <TIM_Base_SetConfig+0xfc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d108      	bne.n	8005530 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a08      	ldr	r2, [pc, #32]	; (8005578 <TIM_Base_SetConfig+0xe4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d103      	bne.n	8005564 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	615a      	str	r2, [r3, #20]
}
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40010000 	.word	0x40010000
 800557c:	40000400 	.word	0x40000400
 8005580:	40000800 	.word	0x40000800
 8005584:	40000c00 	.word	0x40000c00
 8005588:	40014000 	.word	0x40014000
 800558c:	40014400 	.word	0x40014400
 8005590:	40014800 	.word	0x40014800

08005594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f023 0201 	bic.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0303 	bic.w	r3, r3, #3
 80055ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f023 0302 	bic.w	r3, r3, #2
 80055dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a1c      	ldr	r2, [pc, #112]	; (800565c <TIM_OC1_SetConfig+0xc8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10c      	bne.n	800560a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 0308 	bic.w	r3, r3, #8
 80055f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 0304 	bic.w	r3, r3, #4
 8005608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a13      	ldr	r2, [pc, #76]	; (800565c <TIM_OC1_SetConfig+0xc8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d111      	bne.n	8005636 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40010000 	.word	0x40010000

08005660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0210 	bic.w	r2, r3, #16
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 0320 	bic.w	r3, r3, #32
 80056aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <TIM_OC2_SetConfig+0xd4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10d      	bne.n	80056dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a15      	ldr	r2, [pc, #84]	; (8005734 <TIM_OC2_SetConfig+0xd4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d113      	bne.n	800570c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	621a      	str	r2, [r3, #32]
}
 8005726:	bf00      	nop
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40010000 	.word	0x40010000

08005738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0303 	bic.w	r3, r3, #3
 800576e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <TIM_OC3_SetConfig+0xd0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d10d      	bne.n	80057b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800579c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	021b      	lsls	r3, r3, #8
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a14      	ldr	r2, [pc, #80]	; (8005808 <TIM_OC3_SetConfig+0xd0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d113      	bne.n	80057e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	621a      	str	r2, [r3, #32]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40010000 	.word	0x40010000

0800580c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	031b      	lsls	r3, r3, #12
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a10      	ldr	r2, [pc, #64]	; (80058a8 <TIM_OC4_SetConfig+0x9c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d109      	bne.n	8005880 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40010000 	.word	0x40010000

080058ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	2201      	movs	r2, #1
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1a      	ldr	r2, [r3, #32]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	401a      	ands	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1a      	ldr	r2, [r3, #32]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	fa01 f303 	lsl.w	r3, r1, r3
 80058e4:	431a      	orrs	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800590c:	2302      	movs	r3, #2
 800590e:	e050      	b.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d018      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595c:	d013      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a18      	ldr	r2, [pc, #96]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00e      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a16      	ldr	r2, [pc, #88]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d009      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a15      	ldr	r2, [pc, #84]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10c      	bne.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800598c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	4313      	orrs	r3, r2
 8005996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40000c00 	.word	0x40000c00
 80059d0:	40014000 	.word	0x40014000

080059d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e03f      	b.n	8005a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fd fac6 	bl	8002fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2224      	movs	r2, #36	; 0x24
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fe69 	bl	8006718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695a      	ldr	r2, [r3, #20]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d11d      	bne.n	8005aec <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_UART_Receive_DMA+0x26>
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e016      	b.n	8005aee <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_UART_Receive_DMA+0x38>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e00f      	b.n	8005aee <HAL_UART_Receive_DMA+0x58>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 fbb8 	bl	8006258 <UART_Start_Receive_DMA>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	e000      	b.n	8005aee <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005aec:	2302      	movs	r3, #2
  }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b0ba      	sub	sp, #232	; 0xe8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10f      	bne.n	8005b5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <HAL_UART_IRQHandler+0x66>
 8005b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fd23 	bl	80065a2 <UART_Receive_IT>
      return;
 8005b5c:	e256      	b.n	800600c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80de 	beq.w	8005d24 <HAL_UART_IRQHandler+0x22c>
 8005b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80d1 	beq.w	8005d24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <HAL_UART_IRQHandler+0xae>
 8005b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f043 0201 	orr.w	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00b      	beq.n	8005bca <HAL_UART_IRQHandler+0xd2>
 8005bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d005      	beq.n	8005bca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f043 0202 	orr.w	r2, r3, #2
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <HAL_UART_IRQHandler+0xf6>
 8005bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f043 0204 	orr.w	r2, r3, #4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d011      	beq.n	8005c1e <HAL_UART_IRQHandler+0x126>
 8005bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d105      	bne.n	8005c12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f043 0208 	orr.w	r2, r3, #8
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 81ed 	beq.w	8006002 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_UART_IRQHandler+0x14e>
 8005c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fcae 	bl	80065a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	bf0c      	ite	eq
 8005c54:	2301      	moveq	r3, #1
 8005c56:	2300      	movne	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <HAL_UART_IRQHandler+0x17a>
 8005c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d04f      	beq.n	8005d12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fbb6 	bl	80063e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d141      	bne.n	8005d0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3314      	adds	r3, #20
 8005cae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1d9      	bne.n	8005c86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d013      	beq.n	8005d02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	4a7d      	ldr	r2, [pc, #500]	; (8005ed4 <HAL_UART_IRQHandler+0x3dc>)
 8005ce0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fd fe96 	bl	8003a18 <HAL_DMA_Abort_IT>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d016      	beq.n	8005d20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	e00e      	b.n	8005d20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f99a 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	e00a      	b.n	8005d20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f996 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d10:	e006      	b.n	8005d20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f992 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d1e:	e170      	b.n	8006002 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d20:	bf00      	nop
    return;
 8005d22:	e16e      	b.n	8006002 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	f040 814a 	bne.w	8005fc2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8143 	beq.w	8005fc2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 813c 	beq.w	8005fc2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60bb      	str	r3, [r7, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b40      	cmp	r3, #64	; 0x40
 8005d6c:	f040 80b4 	bne.w	8005ed8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8140 	beq.w	8006006 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	f080 8139 	bcs.w	8006006 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da6:	f000 8088 	beq.w	8005eba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005dd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005de2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1d9      	bne.n	8005daa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3314      	adds	r3, #20
 8005dfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3314      	adds	r3, #20
 8005e16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e1      	bne.n	8005df6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3314      	adds	r3, #20
 8005e38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3314      	adds	r3, #20
 8005e52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e3      	bne.n	8005e32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e8a:	f023 0310 	bic.w	r3, r3, #16
 8005e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ea2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e3      	bne.n	8005e78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fd fd3f 	bl	8003938 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f8c0 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ed0:	e099      	b.n	8006006 <HAL_UART_IRQHandler+0x50e>
 8005ed2:	bf00      	nop
 8005ed4:	080064ab 	.word	0x080064ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 808b 	beq.w	800600a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8086 	beq.w	800600a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f22:	647a      	str	r2, [r7, #68]	; 0x44
 8005f24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e3      	bne.n	8005efe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3314      	adds	r3, #20
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	623b      	str	r3, [r7, #32]
   return(result);
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3314      	adds	r3, #20
 8005f56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f5a:	633a      	str	r2, [r7, #48]	; 0x30
 8005f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e3      	bne.n	8005f36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0310 	bic.w	r3, r3, #16
 8005f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fa0:	61fa      	str	r2, [r7, #28]
 8005fa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	69b9      	ldr	r1, [r7, #24]
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	617b      	str	r3, [r7, #20]
   return(result);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e3      	bne.n	8005f7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f848 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fc0:	e023      	b.n	800600a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d009      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x4ea>
 8005fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fa79 	bl	80064d2 <UART_Transmit_IT>
    return;
 8005fe0:	e014      	b.n	800600c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00e      	beq.n	800600c <HAL_UART_IRQHandler+0x514>
 8005fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fab9 	bl	8006572 <UART_EndTransmit_IT>
    return;
 8006000:	e004      	b.n	800600c <HAL_UART_IRQHandler+0x514>
    return;
 8006002:	bf00      	nop
 8006004:	e002      	b.n	800600c <HAL_UART_IRQHandler+0x514>
      return;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <HAL_UART_IRQHandler+0x514>
      return;
 800600a:	bf00      	nop
  }
}
 800600c:	37e8      	adds	r7, #232	; 0xe8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop

08006014 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b09c      	sub	sp, #112	; 0x70
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006080:	2b00      	cmp	r3, #0
 8006082:	d172      	bne.n	800616a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006086:	2200      	movs	r2, #0
 8006088:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800608a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800609a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80060a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e5      	bne.n	800608a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3314      	adds	r3, #20
 80060c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	667b      	str	r3, [r7, #100]	; 0x64
 80060d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3314      	adds	r3, #20
 80060dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80060de:	647a      	str	r2, [r7, #68]	; 0x44
 80060e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e5      	bne.n	80060be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3314      	adds	r3, #20
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	623b      	str	r3, [r7, #32]
   return(result);
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006108:	663b      	str	r3, [r7, #96]	; 0x60
 800610a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3314      	adds	r3, #20
 8006110:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006112:	633a      	str	r2, [r7, #48]	; 0x30
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e5      	bne.n	80060f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006128:	2220      	movs	r2, #32
 800612a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800612e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	2b01      	cmp	r3, #1
 8006134:	d119      	bne.n	800616a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	60fb      	str	r3, [r7, #12]
   return(result);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f023 0310 	bic.w	r3, r3, #16
 800614c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800614e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	330c      	adds	r3, #12
 8006154:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006156:	61fa      	str	r2, [r7, #28]
 8006158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	69b9      	ldr	r1, [r7, #24]
 800615c:	69fa      	ldr	r2, [r7, #28]
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	617b      	str	r3, [r7, #20]
   return(result);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e5      	bne.n	8006136 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	2b01      	cmp	r3, #1
 8006170:	d106      	bne.n	8006180 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006174:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006176:	4619      	mov	r1, r3
 8006178:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800617a:	f7ff ff69 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800617e:	e002      	b.n	8006186 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006180:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006182:	f7fa ff1b 	bl	8000fbc <HAL_UART_RxCpltCallback>
}
 8006186:	bf00      	nop
 8006188:	3770      	adds	r7, #112	; 0x70
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d108      	bne.n	80061b6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061a8:	085b      	lsrs	r3, r3, #1
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	4619      	mov	r1, r3
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff ff4e 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061b4:	e002      	b.n	80061bc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff ff36 	bl	8006028 <HAL_UART_RxHalfCpltCallback>
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e0:	2b80      	cmp	r3, #128	; 0x80
 80061e2:	bf0c      	ite	eq
 80061e4:	2301      	moveq	r3, #1
 80061e6:	2300      	movne	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b21      	cmp	r3, #33	; 0x21
 80061f6:	d108      	bne.n	800620a <UART_DMAError+0x46>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2200      	movs	r2, #0
 8006202:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006204:	68b8      	ldr	r0, [r7, #8]
 8006206:	f000 f8c5 	bl	8006394 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	bf0c      	ite	eq
 8006218:	2301      	moveq	r3, #1
 800621a:	2300      	movne	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b22      	cmp	r3, #34	; 0x22
 800622a:	d108      	bne.n	800623e <UART_DMAError+0x7a>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2200      	movs	r2, #0
 8006236:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006238:	68b8      	ldr	r0, [r7, #8]
 800623a:	f000 f8d3 	bl	80063e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f043 0210 	orr.w	r2, r3, #16
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800624a:	68b8      	ldr	r0, [r7, #8]
 800624c:	f7ff fef6 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b098      	sub	sp, #96	; 0x60
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	88fa      	ldrh	r2, [r7, #6]
 8006270:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2222      	movs	r2, #34	; 0x22
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	4a40      	ldr	r2, [pc, #256]	; (8006388 <UART_Start_Receive_DMA+0x130>)
 8006286:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	4a3f      	ldr	r2, [pc, #252]	; (800638c <UART_Start_Receive_DMA+0x134>)
 800628e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	4a3e      	ldr	r2, [pc, #248]	; (8006390 <UART_Start_Receive_DMA+0x138>)
 8006296:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	2200      	movs	r2, #0
 800629e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80062a0:	f107 0308 	add.w	r3, r7, #8
 80062a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	f7fd fae6 	bl	8003888 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d019      	beq.n	8006316 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	330c      	adds	r3, #12
 80062e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	330c      	adds	r3, #12
 8006300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006302:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006304:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e5      	bne.n	80062e2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3314      	adds	r3, #20
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	657b      	str	r3, [r7, #84]	; 0x54
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3314      	adds	r3, #20
 8006334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006336:	63ba      	str	r2, [r7, #56]	; 0x38
 8006338:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800633c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e5      	bne.n	8006316 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3314      	adds	r3, #20
 8006350:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	617b      	str	r3, [r7, #20]
   return(result);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006360:	653b      	str	r3, [r7, #80]	; 0x50
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3314      	adds	r3, #20
 8006368:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800636a:	627a      	str	r2, [r7, #36]	; 0x24
 800636c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6a39      	ldr	r1, [r7, #32]
 8006370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	61fb      	str	r3, [r7, #28]
   return(result);
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e5      	bne.n	800634a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3760      	adds	r7, #96	; 0x60
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	08006069 	.word	0x08006069
 800638c:	0800618f 	.word	0x0800618f
 8006390:	080061c5 	.word	0x080061c5

08006394 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b089      	sub	sp, #36	; 0x24
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063b2:	61fb      	str	r3, [r7, #28]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	61ba      	str	r2, [r7, #24]
 80063be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6979      	ldr	r1, [r7, #20]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	613b      	str	r3, [r7, #16]
   return(result);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e5      	bne.n	800639c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80063d8:	bf00      	nop
 80063da:	3724      	adds	r7, #36	; 0x24
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b095      	sub	sp, #84	; 0x54
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	330c      	adds	r3, #12
 800640a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800640c:	643a      	str	r2, [r7, #64]	; 0x40
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e5      	bne.n	80063ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3314      	adds	r3, #20
 8006426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	64bb      	str	r3, [r7, #72]	; 0x48
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3314      	adds	r3, #20
 800643e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e5      	bne.n	8006420 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	2b01      	cmp	r3, #1
 800645a:	d119      	bne.n	8006490 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	60bb      	str	r3, [r7, #8]
   return(result);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f023 0310 	bic.w	r3, r3, #16
 8006472:	647b      	str	r3, [r7, #68]	; 0x44
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330c      	adds	r3, #12
 800647a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800647c:	61ba      	str	r2, [r7, #24]
 800647e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6979      	ldr	r1, [r7, #20]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	613b      	str	r3, [r7, #16]
   return(result);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800649e:	bf00      	nop
 80064a0:	3754      	adds	r7, #84	; 0x54
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff fdb9 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b085      	sub	sp, #20
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b21      	cmp	r3, #33	; 0x21
 80064e4:	d13e      	bne.n	8006564 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ee:	d114      	bne.n	800651a <UART_Transmit_IT+0x48>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d110      	bne.n	800651a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800650c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	1c9a      	adds	r2, r3, #2
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	621a      	str	r2, [r3, #32]
 8006518:	e008      	b.n	800652c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	1c59      	adds	r1, r3, #1
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6211      	str	r1, [r2, #32]
 8006524:	781a      	ldrb	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29b      	uxth	r3, r3
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	4619      	mov	r1, r3
 800653a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10f      	bne.n	8006560 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800654e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800655e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	e000      	b.n	8006566 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006564:	2302      	movs	r3, #2
  }
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006588:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff fd3e 	bl	8006014 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b08c      	sub	sp, #48	; 0x30
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b22      	cmp	r3, #34	; 0x22
 80065b4:	f040 80ab 	bne.w	800670e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c0:	d117      	bne.n	80065f2 <UART_Receive_IT+0x50>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d113      	bne.n	80065f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	1c9a      	adds	r2, r3, #2
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28
 80065f0:	e026      	b.n	8006640 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006604:	d007      	beq.n	8006616 <UART_Receive_IT+0x74>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <UART_Receive_IT+0x82>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	e008      	b.n	8006636 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006630:	b2da      	uxtb	r2, r3
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29b      	uxth	r3, r3
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	4619      	mov	r1, r3
 800664e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006650:	2b00      	cmp	r3, #0
 8006652:	d15a      	bne.n	800670a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0220 	bic.w	r2, r2, #32
 8006662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0201 	bic.w	r2, r2, #1
 8006682:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	2b01      	cmp	r3, #1
 8006692:	d135      	bne.n	8006700 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	613b      	str	r3, [r7, #16]
   return(result);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f023 0310 	bic.w	r3, r3, #16
 80066b0:	627b      	str	r3, [r7, #36]	; 0x24
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	330c      	adds	r3, #12
 80066b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ba:	623a      	str	r2, [r7, #32]
 80066bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	69f9      	ldr	r1, [r7, #28]
 80066c0:	6a3a      	ldr	r2, [r7, #32]
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e5      	bne.n	800669a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b10      	cmp	r3, #16
 80066da:	d10a      	bne.n	80066f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff fca9 	bl	8006050 <HAL_UARTEx_RxEventCallback>
 80066fe:	e002      	b.n	8006706 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7fa fc5b 	bl	8000fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	e002      	b.n	8006710 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e000      	b.n	8006710 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800670e:	2302      	movs	r3, #2
  }
}
 8006710:	4618      	mov	r0, r3
 8006712:	3730      	adds	r7, #48	; 0x30
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800671c:	b0c0      	sub	sp, #256	; 0x100
 800671e:	af00      	add	r7, sp, #0
 8006720:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006734:	68d9      	ldr	r1, [r3, #12]
 8006736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	ea40 0301 	orr.w	r3, r0, r1
 8006740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	431a      	orrs	r2, r3
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	431a      	orrs	r2, r3
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	4313      	orrs	r3, r2
 8006760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006770:	f021 010c 	bic.w	r1, r1, #12
 8006774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800677e:	430b      	orrs	r3, r1
 8006780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800678e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006792:	6999      	ldr	r1, [r3, #24]
 8006794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	ea40 0301 	orr.w	r3, r0, r1
 800679e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4b8f      	ldr	r3, [pc, #572]	; (80069e4 <UART_SetConfig+0x2cc>)
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d005      	beq.n	80067b8 <UART_SetConfig+0xa0>
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b8d      	ldr	r3, [pc, #564]	; (80069e8 <UART_SetConfig+0x2d0>)
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d104      	bne.n	80067c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067b8:	f7fe fa0e 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 80067bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80067c0:	e003      	b.n	80067ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067c2:	f7fe f9f5 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 80067c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d4:	f040 810c 	bne.w	80069f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067dc:	2200      	movs	r2, #0
 80067de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80067ea:	4622      	mov	r2, r4
 80067ec:	462b      	mov	r3, r5
 80067ee:	1891      	adds	r1, r2, r2
 80067f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80067f2:	415b      	adcs	r3, r3
 80067f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067fa:	4621      	mov	r1, r4
 80067fc:	eb12 0801 	adds.w	r8, r2, r1
 8006800:	4629      	mov	r1, r5
 8006802:	eb43 0901 	adc.w	r9, r3, r1
 8006806:	f04f 0200 	mov.w	r2, #0
 800680a:	f04f 0300 	mov.w	r3, #0
 800680e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800681a:	4690      	mov	r8, r2
 800681c:	4699      	mov	r9, r3
 800681e:	4623      	mov	r3, r4
 8006820:	eb18 0303 	adds.w	r3, r8, r3
 8006824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006828:	462b      	mov	r3, r5
 800682a:	eb49 0303 	adc.w	r3, r9, r3
 800682e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800683e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006846:	460b      	mov	r3, r1
 8006848:	18db      	adds	r3, r3, r3
 800684a:	653b      	str	r3, [r7, #80]	; 0x50
 800684c:	4613      	mov	r3, r2
 800684e:	eb42 0303 	adc.w	r3, r2, r3
 8006852:	657b      	str	r3, [r7, #84]	; 0x54
 8006854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800685c:	f7fa fa2c 	bl	8000cb8 <__aeabi_uldivmod>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4b61      	ldr	r3, [pc, #388]	; (80069ec <UART_SetConfig+0x2d4>)
 8006866:	fba3 2302 	umull	r2, r3, r3, r2
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	011c      	lsls	r4, r3, #4
 800686e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006872:	2200      	movs	r2, #0
 8006874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800687c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	1891      	adds	r1, r2, r2
 8006886:	64b9      	str	r1, [r7, #72]	; 0x48
 8006888:	415b      	adcs	r3, r3
 800688a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800688c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006890:	4641      	mov	r1, r8
 8006892:	eb12 0a01 	adds.w	sl, r2, r1
 8006896:	4649      	mov	r1, r9
 8006898:	eb43 0b01 	adc.w	fp, r3, r1
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068b0:	4692      	mov	sl, r2
 80068b2:	469b      	mov	fp, r3
 80068b4:	4643      	mov	r3, r8
 80068b6:	eb1a 0303 	adds.w	r3, sl, r3
 80068ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068be:	464b      	mov	r3, r9
 80068c0:	eb4b 0303 	adc.w	r3, fp, r3
 80068c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068dc:	460b      	mov	r3, r1
 80068de:	18db      	adds	r3, r3, r3
 80068e0:	643b      	str	r3, [r7, #64]	; 0x40
 80068e2:	4613      	mov	r3, r2
 80068e4:	eb42 0303 	adc.w	r3, r2, r3
 80068e8:	647b      	str	r3, [r7, #68]	; 0x44
 80068ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068f2:	f7fa f9e1 	bl	8000cb8 <__aeabi_uldivmod>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4611      	mov	r1, r2
 80068fc:	4b3b      	ldr	r3, [pc, #236]	; (80069ec <UART_SetConfig+0x2d4>)
 80068fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	2264      	movs	r2, #100	; 0x64
 8006906:	fb02 f303 	mul.w	r3, r2, r3
 800690a:	1acb      	subs	r3, r1, r3
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006912:	4b36      	ldr	r3, [pc, #216]	; (80069ec <UART_SetConfig+0x2d4>)
 8006914:	fba3 2302 	umull	r2, r3, r3, r2
 8006918:	095b      	lsrs	r3, r3, #5
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006920:	441c      	add	r4, r3
 8006922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006926:	2200      	movs	r2, #0
 8006928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800692c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006934:	4642      	mov	r2, r8
 8006936:	464b      	mov	r3, r9
 8006938:	1891      	adds	r1, r2, r2
 800693a:	63b9      	str	r1, [r7, #56]	; 0x38
 800693c:	415b      	adcs	r3, r3
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006944:	4641      	mov	r1, r8
 8006946:	1851      	adds	r1, r2, r1
 8006948:	6339      	str	r1, [r7, #48]	; 0x30
 800694a:	4649      	mov	r1, r9
 800694c:	414b      	adcs	r3, r1
 800694e:	637b      	str	r3, [r7, #52]	; 0x34
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800695c:	4659      	mov	r1, fp
 800695e:	00cb      	lsls	r3, r1, #3
 8006960:	4651      	mov	r1, sl
 8006962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006966:	4651      	mov	r1, sl
 8006968:	00ca      	lsls	r2, r1, #3
 800696a:	4610      	mov	r0, r2
 800696c:	4619      	mov	r1, r3
 800696e:	4603      	mov	r3, r0
 8006970:	4642      	mov	r2, r8
 8006972:	189b      	adds	r3, r3, r2
 8006974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006978:	464b      	mov	r3, r9
 800697a:	460a      	mov	r2, r1
 800697c:	eb42 0303 	adc.w	r3, r2, r3
 8006980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006998:	460b      	mov	r3, r1
 800699a:	18db      	adds	r3, r3, r3
 800699c:	62bb      	str	r3, [r7, #40]	; 0x28
 800699e:	4613      	mov	r3, r2
 80069a0:	eb42 0303 	adc.w	r3, r2, r3
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069ae:	f7fa f983 	bl	8000cb8 <__aeabi_uldivmod>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <UART_SetConfig+0x2d4>)
 80069b8:	fba3 1302 	umull	r1, r3, r3, r2
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	2164      	movs	r1, #100	; 0x64
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	3332      	adds	r3, #50	; 0x32
 80069ca:	4a08      	ldr	r2, [pc, #32]	; (80069ec <UART_SetConfig+0x2d4>)
 80069cc:	fba2 2303 	umull	r2, r3, r2, r3
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	f003 0207 	and.w	r2, r3, #7
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4422      	add	r2, r4
 80069de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069e0:	e105      	b.n	8006bee <UART_SetConfig+0x4d6>
 80069e2:	bf00      	nop
 80069e4:	40011000 	.word	0x40011000
 80069e8:	40011400 	.word	0x40011400
 80069ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80069fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a02:	4642      	mov	r2, r8
 8006a04:	464b      	mov	r3, r9
 8006a06:	1891      	adds	r1, r2, r2
 8006a08:	6239      	str	r1, [r7, #32]
 8006a0a:	415b      	adcs	r3, r3
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a12:	4641      	mov	r1, r8
 8006a14:	1854      	adds	r4, r2, r1
 8006a16:	4649      	mov	r1, r9
 8006a18:	eb43 0501 	adc.w	r5, r3, r1
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	00eb      	lsls	r3, r5, #3
 8006a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a2a:	00e2      	lsls	r2, r4, #3
 8006a2c:	4614      	mov	r4, r2
 8006a2e:	461d      	mov	r5, r3
 8006a30:	4643      	mov	r3, r8
 8006a32:	18e3      	adds	r3, r4, r3
 8006a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a38:	464b      	mov	r3, r9
 8006a3a:	eb45 0303 	adc.w	r3, r5, r3
 8006a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a52:	f04f 0200 	mov.w	r2, #0
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a5e:	4629      	mov	r1, r5
 8006a60:	008b      	lsls	r3, r1, #2
 8006a62:	4621      	mov	r1, r4
 8006a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a68:	4621      	mov	r1, r4
 8006a6a:	008a      	lsls	r2, r1, #2
 8006a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a70:	f7fa f922 	bl	8000cb8 <__aeabi_uldivmod>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4b60      	ldr	r3, [pc, #384]	; (8006bfc <UART_SetConfig+0x4e4>)
 8006a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	011c      	lsls	r4, r3, #4
 8006a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a94:	4642      	mov	r2, r8
 8006a96:	464b      	mov	r3, r9
 8006a98:	1891      	adds	r1, r2, r2
 8006a9a:	61b9      	str	r1, [r7, #24]
 8006a9c:	415b      	adcs	r3, r3
 8006a9e:	61fb      	str	r3, [r7, #28]
 8006aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aa4:	4641      	mov	r1, r8
 8006aa6:	1851      	adds	r1, r2, r1
 8006aa8:	6139      	str	r1, [r7, #16]
 8006aaa:	4649      	mov	r1, r9
 8006aac:	414b      	adcs	r3, r1
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	f04f 0300 	mov.w	r3, #0
 8006ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006abc:	4659      	mov	r1, fp
 8006abe:	00cb      	lsls	r3, r1, #3
 8006ac0:	4651      	mov	r1, sl
 8006ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ac6:	4651      	mov	r1, sl
 8006ac8:	00ca      	lsls	r2, r1, #3
 8006aca:	4610      	mov	r0, r2
 8006acc:	4619      	mov	r1, r3
 8006ace:	4603      	mov	r3, r0
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	189b      	adds	r3, r3, r2
 8006ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ad8:	464b      	mov	r3, r9
 8006ada:	460a      	mov	r2, r1
 8006adc:	eb42 0303 	adc.w	r3, r2, r3
 8006ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006af0:	f04f 0200 	mov.w	r2, #0
 8006af4:	f04f 0300 	mov.w	r3, #0
 8006af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006afc:	4649      	mov	r1, r9
 8006afe:	008b      	lsls	r3, r1, #2
 8006b00:	4641      	mov	r1, r8
 8006b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b06:	4641      	mov	r1, r8
 8006b08:	008a      	lsls	r2, r1, #2
 8006b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b0e:	f7fa f8d3 	bl	8000cb8 <__aeabi_uldivmod>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4b39      	ldr	r3, [pc, #228]	; (8006bfc <UART_SetConfig+0x4e4>)
 8006b18:	fba3 1302 	umull	r1, r3, r3, r2
 8006b1c:	095b      	lsrs	r3, r3, #5
 8006b1e:	2164      	movs	r1, #100	; 0x64
 8006b20:	fb01 f303 	mul.w	r3, r1, r3
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	3332      	adds	r3, #50	; 0x32
 8006b2a:	4a34      	ldr	r2, [pc, #208]	; (8006bfc <UART_SetConfig+0x4e4>)
 8006b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b30:	095b      	lsrs	r3, r3, #5
 8006b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b36:	441c      	add	r4, r3
 8006b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8006b40:	677a      	str	r2, [r7, #116]	; 0x74
 8006b42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b46:	4642      	mov	r2, r8
 8006b48:	464b      	mov	r3, r9
 8006b4a:	1891      	adds	r1, r2, r2
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	415b      	adcs	r3, r3
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b56:	4641      	mov	r1, r8
 8006b58:	1851      	adds	r1, r2, r1
 8006b5a:	6039      	str	r1, [r7, #0]
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	414b      	adcs	r3, r1
 8006b60:	607b      	str	r3, [r7, #4]
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b6e:	4659      	mov	r1, fp
 8006b70:	00cb      	lsls	r3, r1, #3
 8006b72:	4651      	mov	r1, sl
 8006b74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b78:	4651      	mov	r1, sl
 8006b7a:	00ca      	lsls	r2, r1, #3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4603      	mov	r3, r0
 8006b82:	4642      	mov	r2, r8
 8006b84:	189b      	adds	r3, r3, r2
 8006b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b88:	464b      	mov	r3, r9
 8006b8a:	460a      	mov	r2, r1
 8006b8c:	eb42 0303 	adc.w	r3, r2, r3
 8006b90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8006b9c:	667a      	str	r2, [r7, #100]	; 0x64
 8006b9e:	f04f 0200 	mov.w	r2, #0
 8006ba2:	f04f 0300 	mov.w	r3, #0
 8006ba6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006baa:	4649      	mov	r1, r9
 8006bac:	008b      	lsls	r3, r1, #2
 8006bae:	4641      	mov	r1, r8
 8006bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bb4:	4641      	mov	r1, r8
 8006bb6:	008a      	lsls	r2, r1, #2
 8006bb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006bbc:	f7fa f87c 	bl	8000cb8 <__aeabi_uldivmod>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <UART_SetConfig+0x4e4>)
 8006bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	2164      	movs	r1, #100	; 0x64
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	3332      	adds	r3, #50	; 0x32
 8006bd8:	4a08      	ldr	r2, [pc, #32]	; (8006bfc <UART_SetConfig+0x4e4>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	f003 020f 	and.w	r2, r3, #15
 8006be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4422      	add	r2, r4
 8006bec:	609a      	str	r2, [r3, #8]
}
 8006bee:	bf00      	nop
 8006bf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bfa:	bf00      	nop
 8006bfc:	51eb851f 	.word	0x51eb851f

08006c00 <atoi>:
 8006c00:	220a      	movs	r2, #10
 8006c02:	2100      	movs	r1, #0
 8006c04:	f000 bd70 	b.w	80076e8 <strtol>

08006c08 <__errno>:
 8006c08:	4b01      	ldr	r3, [pc, #4]	; (8006c10 <__errno+0x8>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	20000010 	.word	0x20000010

08006c14 <__libc_init_array>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	4d0d      	ldr	r5, [pc, #52]	; (8006c4c <__libc_init_array+0x38>)
 8006c18:	4c0d      	ldr	r4, [pc, #52]	; (8006c50 <__libc_init_array+0x3c>)
 8006c1a:	1b64      	subs	r4, r4, r5
 8006c1c:	10a4      	asrs	r4, r4, #2
 8006c1e:	2600      	movs	r6, #0
 8006c20:	42a6      	cmp	r6, r4
 8006c22:	d109      	bne.n	8006c38 <__libc_init_array+0x24>
 8006c24:	4d0b      	ldr	r5, [pc, #44]	; (8006c54 <__libc_init_array+0x40>)
 8006c26:	4c0c      	ldr	r4, [pc, #48]	; (8006c58 <__libc_init_array+0x44>)
 8006c28:	f002 ff86 	bl	8009b38 <_init>
 8006c2c:	1b64      	subs	r4, r4, r5
 8006c2e:	10a4      	asrs	r4, r4, #2
 8006c30:	2600      	movs	r6, #0
 8006c32:	42a6      	cmp	r6, r4
 8006c34:	d105      	bne.n	8006c42 <__libc_init_array+0x2e>
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3c:	4798      	blx	r3
 8006c3e:	3601      	adds	r6, #1
 8006c40:	e7ee      	b.n	8006c20 <__libc_init_array+0xc>
 8006c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c46:	4798      	blx	r3
 8006c48:	3601      	adds	r6, #1
 8006c4a:	e7f2      	b.n	8006c32 <__libc_init_array+0x1e>
 8006c4c:	08009f84 	.word	0x08009f84
 8006c50:	08009f84 	.word	0x08009f84
 8006c54:	08009f84 	.word	0x08009f84
 8006c58:	08009f88 	.word	0x08009f88

08006c5c <memcpy>:
 8006c5c:	440a      	add	r2, r1
 8006c5e:	4291      	cmp	r1, r2
 8006c60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c64:	d100      	bne.n	8006c68 <memcpy+0xc>
 8006c66:	4770      	bx	lr
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c72:	4291      	cmp	r1, r2
 8006c74:	d1f9      	bne.n	8006c6a <memcpy+0xe>
 8006c76:	bd10      	pop	{r4, pc}

08006c78 <memset>:
 8006c78:	4402      	add	r2, r0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d100      	bne.n	8006c82 <memset+0xa>
 8006c80:	4770      	bx	lr
 8006c82:	f803 1b01 	strb.w	r1, [r3], #1
 8006c86:	e7f9      	b.n	8006c7c <memset+0x4>

08006c88 <__cvt>:
 8006c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c8c:	ec55 4b10 	vmov	r4, r5, d0
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	460e      	mov	r6, r1
 8006c94:	4619      	mov	r1, r3
 8006c96:	462b      	mov	r3, r5
 8006c98:	bfbb      	ittet	lt
 8006c9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c9e:	461d      	movlt	r5, r3
 8006ca0:	2300      	movge	r3, #0
 8006ca2:	232d      	movlt	r3, #45	; 0x2d
 8006ca4:	700b      	strb	r3, [r1, #0]
 8006ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cac:	4691      	mov	r9, r2
 8006cae:	f023 0820 	bic.w	r8, r3, #32
 8006cb2:	bfbc      	itt	lt
 8006cb4:	4622      	movlt	r2, r4
 8006cb6:	4614      	movlt	r4, r2
 8006cb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cbc:	d005      	beq.n	8006cca <__cvt+0x42>
 8006cbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cc2:	d100      	bne.n	8006cc6 <__cvt+0x3e>
 8006cc4:	3601      	adds	r6, #1
 8006cc6:	2102      	movs	r1, #2
 8006cc8:	e000      	b.n	8006ccc <__cvt+0x44>
 8006cca:	2103      	movs	r1, #3
 8006ccc:	ab03      	add	r3, sp, #12
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	ab02      	add	r3, sp, #8
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	ec45 4b10 	vmov	d0, r4, r5
 8006cd8:	4653      	mov	r3, sl
 8006cda:	4632      	mov	r2, r6
 8006cdc:	f000 fe3c 	bl	8007958 <_dtoa_r>
 8006ce0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ce4:	4607      	mov	r7, r0
 8006ce6:	d102      	bne.n	8006cee <__cvt+0x66>
 8006ce8:	f019 0f01 	tst.w	r9, #1
 8006cec:	d022      	beq.n	8006d34 <__cvt+0xac>
 8006cee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cf2:	eb07 0906 	add.w	r9, r7, r6
 8006cf6:	d110      	bne.n	8006d1a <__cvt+0x92>
 8006cf8:	783b      	ldrb	r3, [r7, #0]
 8006cfa:	2b30      	cmp	r3, #48	; 0x30
 8006cfc:	d10a      	bne.n	8006d14 <__cvt+0x8c>
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2300      	movs	r3, #0
 8006d02:	4620      	mov	r0, r4
 8006d04:	4629      	mov	r1, r5
 8006d06:	f7f9 fef7 	bl	8000af8 <__aeabi_dcmpeq>
 8006d0a:	b918      	cbnz	r0, 8006d14 <__cvt+0x8c>
 8006d0c:	f1c6 0601 	rsb	r6, r6, #1
 8006d10:	f8ca 6000 	str.w	r6, [sl]
 8006d14:	f8da 3000 	ldr.w	r3, [sl]
 8006d18:	4499      	add	r9, r3
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7f9 fee9 	bl	8000af8 <__aeabi_dcmpeq>
 8006d26:	b108      	cbz	r0, 8006d2c <__cvt+0xa4>
 8006d28:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d2c:	2230      	movs	r2, #48	; 0x30
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	454b      	cmp	r3, r9
 8006d32:	d307      	bcc.n	8006d44 <__cvt+0xbc>
 8006d34:	9b03      	ldr	r3, [sp, #12]
 8006d36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d38:	1bdb      	subs	r3, r3, r7
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	b004      	add	sp, #16
 8006d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d44:	1c59      	adds	r1, r3, #1
 8006d46:	9103      	str	r1, [sp, #12]
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	e7f0      	b.n	8006d2e <__cvt+0xa6>

08006d4c <__exponent>:
 8006d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2900      	cmp	r1, #0
 8006d52:	bfb8      	it	lt
 8006d54:	4249      	neglt	r1, r1
 8006d56:	f803 2b02 	strb.w	r2, [r3], #2
 8006d5a:	bfb4      	ite	lt
 8006d5c:	222d      	movlt	r2, #45	; 0x2d
 8006d5e:	222b      	movge	r2, #43	; 0x2b
 8006d60:	2909      	cmp	r1, #9
 8006d62:	7042      	strb	r2, [r0, #1]
 8006d64:	dd2a      	ble.n	8006dbc <__exponent+0x70>
 8006d66:	f10d 0407 	add.w	r4, sp, #7
 8006d6a:	46a4      	mov	ip, r4
 8006d6c:	270a      	movs	r7, #10
 8006d6e:	46a6      	mov	lr, r4
 8006d70:	460a      	mov	r2, r1
 8006d72:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d76:	fb07 1516 	mls	r5, r7, r6, r1
 8006d7a:	3530      	adds	r5, #48	; 0x30
 8006d7c:	2a63      	cmp	r2, #99	; 0x63
 8006d7e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006d82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d86:	4631      	mov	r1, r6
 8006d88:	dcf1      	bgt.n	8006d6e <__exponent+0x22>
 8006d8a:	3130      	adds	r1, #48	; 0x30
 8006d8c:	f1ae 0502 	sub.w	r5, lr, #2
 8006d90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d94:	1c44      	adds	r4, r0, #1
 8006d96:	4629      	mov	r1, r5
 8006d98:	4561      	cmp	r1, ip
 8006d9a:	d30a      	bcc.n	8006db2 <__exponent+0x66>
 8006d9c:	f10d 0209 	add.w	r2, sp, #9
 8006da0:	eba2 020e 	sub.w	r2, r2, lr
 8006da4:	4565      	cmp	r5, ip
 8006da6:	bf88      	it	hi
 8006da8:	2200      	movhi	r2, #0
 8006daa:	4413      	add	r3, r2
 8006dac:	1a18      	subs	r0, r3, r0
 8006dae:	b003      	add	sp, #12
 8006db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006db6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dba:	e7ed      	b.n	8006d98 <__exponent+0x4c>
 8006dbc:	2330      	movs	r3, #48	; 0x30
 8006dbe:	3130      	adds	r1, #48	; 0x30
 8006dc0:	7083      	strb	r3, [r0, #2]
 8006dc2:	70c1      	strb	r1, [r0, #3]
 8006dc4:	1d03      	adds	r3, r0, #4
 8006dc6:	e7f1      	b.n	8006dac <__exponent+0x60>

08006dc8 <_printf_float>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	ed2d 8b02 	vpush	{d8}
 8006dd0:	b08d      	sub	sp, #52	; 0x34
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006dd8:	4616      	mov	r6, r2
 8006dda:	461f      	mov	r7, r3
 8006ddc:	4605      	mov	r5, r0
 8006dde:	f001 fc9f 	bl	8008720 <_localeconv_r>
 8006de2:	f8d0 a000 	ldr.w	sl, [r0]
 8006de6:	4650      	mov	r0, sl
 8006de8:	f7f9 fa04 	bl	80001f4 <strlen>
 8006dec:	2300      	movs	r3, #0
 8006dee:	930a      	str	r3, [sp, #40]	; 0x28
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	9305      	str	r3, [sp, #20]
 8006df4:	f8d8 3000 	ldr.w	r3, [r8]
 8006df8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006dfc:	3307      	adds	r3, #7
 8006dfe:	f023 0307 	bic.w	r3, r3, #7
 8006e02:	f103 0208 	add.w	r2, r3, #8
 8006e06:	f8c8 2000 	str.w	r2, [r8]
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e1a:	9307      	str	r3, [sp, #28]
 8006e1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e20:	ee08 0a10 	vmov	s16, r0
 8006e24:	4b9f      	ldr	r3, [pc, #636]	; (80070a4 <_printf_float+0x2dc>)
 8006e26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e2e:	f7f9 fe95 	bl	8000b5c <__aeabi_dcmpun>
 8006e32:	bb88      	cbnz	r0, 8006e98 <_printf_float+0xd0>
 8006e34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e38:	4b9a      	ldr	r3, [pc, #616]	; (80070a4 <_printf_float+0x2dc>)
 8006e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e3e:	f7f9 fe6f 	bl	8000b20 <__aeabi_dcmple>
 8006e42:	bb48      	cbnz	r0, 8006e98 <_printf_float+0xd0>
 8006e44:	2200      	movs	r2, #0
 8006e46:	2300      	movs	r3, #0
 8006e48:	4640      	mov	r0, r8
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	f7f9 fe5e 	bl	8000b0c <__aeabi_dcmplt>
 8006e50:	b110      	cbz	r0, 8006e58 <_printf_float+0x90>
 8006e52:	232d      	movs	r3, #45	; 0x2d
 8006e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e58:	4b93      	ldr	r3, [pc, #588]	; (80070a8 <_printf_float+0x2e0>)
 8006e5a:	4894      	ldr	r0, [pc, #592]	; (80070ac <_printf_float+0x2e4>)
 8006e5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e60:	bf94      	ite	ls
 8006e62:	4698      	movls	r8, r3
 8006e64:	4680      	movhi	r8, r0
 8006e66:	2303      	movs	r3, #3
 8006e68:	6123      	str	r3, [r4, #16]
 8006e6a:	9b05      	ldr	r3, [sp, #20]
 8006e6c:	f023 0204 	bic.w	r2, r3, #4
 8006e70:	6022      	str	r2, [r4, #0]
 8006e72:	f04f 0900 	mov.w	r9, #0
 8006e76:	9700      	str	r7, [sp, #0]
 8006e78:	4633      	mov	r3, r6
 8006e7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 f9d8 	bl	8007234 <_printf_common>
 8006e84:	3001      	adds	r0, #1
 8006e86:	f040 8090 	bne.w	8006faa <_printf_float+0x1e2>
 8006e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e8e:	b00d      	add	sp, #52	; 0x34
 8006e90:	ecbd 8b02 	vpop	{d8}
 8006e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e98:	4642      	mov	r2, r8
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	f7f9 fe5c 	bl	8000b5c <__aeabi_dcmpun>
 8006ea4:	b140      	cbz	r0, 8006eb8 <_printf_float+0xf0>
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bfbc      	itt	lt
 8006eac:	232d      	movlt	r3, #45	; 0x2d
 8006eae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006eb2:	487f      	ldr	r0, [pc, #508]	; (80070b0 <_printf_float+0x2e8>)
 8006eb4:	4b7f      	ldr	r3, [pc, #508]	; (80070b4 <_printf_float+0x2ec>)
 8006eb6:	e7d1      	b.n	8006e5c <_printf_float+0x94>
 8006eb8:	6863      	ldr	r3, [r4, #4]
 8006eba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ebe:	9206      	str	r2, [sp, #24]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	d13f      	bne.n	8006f44 <_printf_float+0x17c>
 8006ec4:	2306      	movs	r3, #6
 8006ec6:	6063      	str	r3, [r4, #4]
 8006ec8:	9b05      	ldr	r3, [sp, #20]
 8006eca:	6861      	ldr	r1, [r4, #4]
 8006ecc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	ab0a      	add	r3, sp, #40	; 0x28
 8006ed6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006eda:	ab09      	add	r3, sp, #36	; 0x24
 8006edc:	ec49 8b10 	vmov	d0, r8, r9
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	6022      	str	r2, [r4, #0]
 8006ee4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f7ff fecd 	bl	8006c88 <__cvt>
 8006eee:	9b06      	ldr	r3, [sp, #24]
 8006ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ef2:	2b47      	cmp	r3, #71	; 0x47
 8006ef4:	4680      	mov	r8, r0
 8006ef6:	d108      	bne.n	8006f0a <_printf_float+0x142>
 8006ef8:	1cc8      	adds	r0, r1, #3
 8006efa:	db02      	blt.n	8006f02 <_printf_float+0x13a>
 8006efc:	6863      	ldr	r3, [r4, #4]
 8006efe:	4299      	cmp	r1, r3
 8006f00:	dd41      	ble.n	8006f86 <_printf_float+0x1be>
 8006f02:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f06:	fa5f fb8b 	uxtb.w	fp, fp
 8006f0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f0e:	d820      	bhi.n	8006f52 <_printf_float+0x18a>
 8006f10:	3901      	subs	r1, #1
 8006f12:	465a      	mov	r2, fp
 8006f14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f18:	9109      	str	r1, [sp, #36]	; 0x24
 8006f1a:	f7ff ff17 	bl	8006d4c <__exponent>
 8006f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f20:	1813      	adds	r3, r2, r0
 8006f22:	2a01      	cmp	r2, #1
 8006f24:	4681      	mov	r9, r0
 8006f26:	6123      	str	r3, [r4, #16]
 8006f28:	dc02      	bgt.n	8006f30 <_printf_float+0x168>
 8006f2a:	6822      	ldr	r2, [r4, #0]
 8006f2c:	07d2      	lsls	r2, r2, #31
 8006f2e:	d501      	bpl.n	8006f34 <_printf_float+0x16c>
 8006f30:	3301      	adds	r3, #1
 8006f32:	6123      	str	r3, [r4, #16]
 8006f34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d09c      	beq.n	8006e76 <_printf_float+0xae>
 8006f3c:	232d      	movs	r3, #45	; 0x2d
 8006f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f42:	e798      	b.n	8006e76 <_printf_float+0xae>
 8006f44:	9a06      	ldr	r2, [sp, #24]
 8006f46:	2a47      	cmp	r2, #71	; 0x47
 8006f48:	d1be      	bne.n	8006ec8 <_printf_float+0x100>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1bc      	bne.n	8006ec8 <_printf_float+0x100>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e7b9      	b.n	8006ec6 <_printf_float+0xfe>
 8006f52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f56:	d118      	bne.n	8006f8a <_printf_float+0x1c2>
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	6863      	ldr	r3, [r4, #4]
 8006f5c:	dd0b      	ble.n	8006f76 <_printf_float+0x1ae>
 8006f5e:	6121      	str	r1, [r4, #16]
 8006f60:	b913      	cbnz	r3, 8006f68 <_printf_float+0x1a0>
 8006f62:	6822      	ldr	r2, [r4, #0]
 8006f64:	07d0      	lsls	r0, r2, #31
 8006f66:	d502      	bpl.n	8006f6e <_printf_float+0x1a6>
 8006f68:	3301      	adds	r3, #1
 8006f6a:	440b      	add	r3, r1
 8006f6c:	6123      	str	r3, [r4, #16]
 8006f6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f70:	f04f 0900 	mov.w	r9, #0
 8006f74:	e7de      	b.n	8006f34 <_printf_float+0x16c>
 8006f76:	b913      	cbnz	r3, 8006f7e <_printf_float+0x1b6>
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	07d2      	lsls	r2, r2, #31
 8006f7c:	d501      	bpl.n	8006f82 <_printf_float+0x1ba>
 8006f7e:	3302      	adds	r3, #2
 8006f80:	e7f4      	b.n	8006f6c <_printf_float+0x1a4>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e7f2      	b.n	8006f6c <_printf_float+0x1a4>
 8006f86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f8c:	4299      	cmp	r1, r3
 8006f8e:	db05      	blt.n	8006f9c <_printf_float+0x1d4>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	6121      	str	r1, [r4, #16]
 8006f94:	07d8      	lsls	r0, r3, #31
 8006f96:	d5ea      	bpl.n	8006f6e <_printf_float+0x1a6>
 8006f98:	1c4b      	adds	r3, r1, #1
 8006f9a:	e7e7      	b.n	8006f6c <_printf_float+0x1a4>
 8006f9c:	2900      	cmp	r1, #0
 8006f9e:	bfd4      	ite	le
 8006fa0:	f1c1 0202 	rsble	r2, r1, #2
 8006fa4:	2201      	movgt	r2, #1
 8006fa6:	4413      	add	r3, r2
 8006fa8:	e7e0      	b.n	8006f6c <_printf_float+0x1a4>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	055a      	lsls	r2, r3, #21
 8006fae:	d407      	bmi.n	8006fc0 <_printf_float+0x1f8>
 8006fb0:	6923      	ldr	r3, [r4, #16]
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b8      	blx	r7
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d12c      	bne.n	8007018 <_printf_float+0x250>
 8006fbe:	e764      	b.n	8006e8a <_printf_float+0xc2>
 8006fc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fc4:	f240 80e0 	bls.w	8007188 <_printf_float+0x3c0>
 8006fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f7f9 fd92 	bl	8000af8 <__aeabi_dcmpeq>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d034      	beq.n	8007042 <_printf_float+0x27a>
 8006fd8:	4a37      	ldr	r2, [pc, #220]	; (80070b8 <_printf_float+0x2f0>)
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4631      	mov	r1, r6
 8006fde:	4628      	mov	r0, r5
 8006fe0:	47b8      	blx	r7
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	f43f af51 	beq.w	8006e8a <_printf_float+0xc2>
 8006fe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fec:	429a      	cmp	r2, r3
 8006fee:	db02      	blt.n	8006ff6 <_printf_float+0x22e>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	07d8      	lsls	r0, r3, #31
 8006ff4:	d510      	bpl.n	8007018 <_printf_float+0x250>
 8006ff6:	ee18 3a10 	vmov	r3, s16
 8006ffa:	4652      	mov	r2, sl
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	f43f af41 	beq.w	8006e8a <_printf_float+0xc2>
 8007008:	f04f 0800 	mov.w	r8, #0
 800700c:	f104 091a 	add.w	r9, r4, #26
 8007010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007012:	3b01      	subs	r3, #1
 8007014:	4543      	cmp	r3, r8
 8007016:	dc09      	bgt.n	800702c <_printf_float+0x264>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	079b      	lsls	r3, r3, #30
 800701c:	f100 8105 	bmi.w	800722a <_printf_float+0x462>
 8007020:	68e0      	ldr	r0, [r4, #12]
 8007022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007024:	4298      	cmp	r0, r3
 8007026:	bfb8      	it	lt
 8007028:	4618      	movlt	r0, r3
 800702a:	e730      	b.n	8006e8e <_printf_float+0xc6>
 800702c:	2301      	movs	r3, #1
 800702e:	464a      	mov	r2, r9
 8007030:	4631      	mov	r1, r6
 8007032:	4628      	mov	r0, r5
 8007034:	47b8      	blx	r7
 8007036:	3001      	adds	r0, #1
 8007038:	f43f af27 	beq.w	8006e8a <_printf_float+0xc2>
 800703c:	f108 0801 	add.w	r8, r8, #1
 8007040:	e7e6      	b.n	8007010 <_printf_float+0x248>
 8007042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007044:	2b00      	cmp	r3, #0
 8007046:	dc39      	bgt.n	80070bc <_printf_float+0x2f4>
 8007048:	4a1b      	ldr	r2, [pc, #108]	; (80070b8 <_printf_float+0x2f0>)
 800704a:	2301      	movs	r3, #1
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	47b8      	blx	r7
 8007052:	3001      	adds	r0, #1
 8007054:	f43f af19 	beq.w	8006e8a <_printf_float+0xc2>
 8007058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800705c:	4313      	orrs	r3, r2
 800705e:	d102      	bne.n	8007066 <_printf_float+0x29e>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	07d9      	lsls	r1, r3, #31
 8007064:	d5d8      	bpl.n	8007018 <_printf_float+0x250>
 8007066:	ee18 3a10 	vmov	r3, s16
 800706a:	4652      	mov	r2, sl
 800706c:	4631      	mov	r1, r6
 800706e:	4628      	mov	r0, r5
 8007070:	47b8      	blx	r7
 8007072:	3001      	adds	r0, #1
 8007074:	f43f af09 	beq.w	8006e8a <_printf_float+0xc2>
 8007078:	f04f 0900 	mov.w	r9, #0
 800707c:	f104 0a1a 	add.w	sl, r4, #26
 8007080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007082:	425b      	negs	r3, r3
 8007084:	454b      	cmp	r3, r9
 8007086:	dc01      	bgt.n	800708c <_printf_float+0x2c4>
 8007088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708a:	e792      	b.n	8006fb2 <_printf_float+0x1ea>
 800708c:	2301      	movs	r3, #1
 800708e:	4652      	mov	r2, sl
 8007090:	4631      	mov	r1, r6
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	f43f aef7 	beq.w	8006e8a <_printf_float+0xc2>
 800709c:	f109 0901 	add.w	r9, r9, #1
 80070a0:	e7ee      	b.n	8007080 <_printf_float+0x2b8>
 80070a2:	bf00      	nop
 80070a4:	7fefffff 	.word	0x7fefffff
 80070a8:	08009ba4 	.word	0x08009ba4
 80070ac:	08009ba8 	.word	0x08009ba8
 80070b0:	08009bb0 	.word	0x08009bb0
 80070b4:	08009bac 	.word	0x08009bac
 80070b8:	08009bb4 	.word	0x08009bb4
 80070bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070c0:	429a      	cmp	r2, r3
 80070c2:	bfa8      	it	ge
 80070c4:	461a      	movge	r2, r3
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	4691      	mov	r9, r2
 80070ca:	dc37      	bgt.n	800713c <_printf_float+0x374>
 80070cc:	f04f 0b00 	mov.w	fp, #0
 80070d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070d4:	f104 021a 	add.w	r2, r4, #26
 80070d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070da:	9305      	str	r3, [sp, #20]
 80070dc:	eba3 0309 	sub.w	r3, r3, r9
 80070e0:	455b      	cmp	r3, fp
 80070e2:	dc33      	bgt.n	800714c <_printf_float+0x384>
 80070e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070e8:	429a      	cmp	r2, r3
 80070ea:	db3b      	blt.n	8007164 <_printf_float+0x39c>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	07da      	lsls	r2, r3, #31
 80070f0:	d438      	bmi.n	8007164 <_printf_float+0x39c>
 80070f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f4:	9a05      	ldr	r2, [sp, #20]
 80070f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070f8:	1a9a      	subs	r2, r3, r2
 80070fa:	eba3 0901 	sub.w	r9, r3, r1
 80070fe:	4591      	cmp	r9, r2
 8007100:	bfa8      	it	ge
 8007102:	4691      	movge	r9, r2
 8007104:	f1b9 0f00 	cmp.w	r9, #0
 8007108:	dc35      	bgt.n	8007176 <_printf_float+0x3ae>
 800710a:	f04f 0800 	mov.w	r8, #0
 800710e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007112:	f104 0a1a 	add.w	sl, r4, #26
 8007116:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	eba3 0309 	sub.w	r3, r3, r9
 8007120:	4543      	cmp	r3, r8
 8007122:	f77f af79 	ble.w	8007018 <_printf_float+0x250>
 8007126:	2301      	movs	r3, #1
 8007128:	4652      	mov	r2, sl
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	f43f aeaa 	beq.w	8006e8a <_printf_float+0xc2>
 8007136:	f108 0801 	add.w	r8, r8, #1
 800713a:	e7ec      	b.n	8007116 <_printf_float+0x34e>
 800713c:	4613      	mov	r3, r2
 800713e:	4631      	mov	r1, r6
 8007140:	4642      	mov	r2, r8
 8007142:	4628      	mov	r0, r5
 8007144:	47b8      	blx	r7
 8007146:	3001      	adds	r0, #1
 8007148:	d1c0      	bne.n	80070cc <_printf_float+0x304>
 800714a:	e69e      	b.n	8006e8a <_printf_float+0xc2>
 800714c:	2301      	movs	r3, #1
 800714e:	4631      	mov	r1, r6
 8007150:	4628      	mov	r0, r5
 8007152:	9205      	str	r2, [sp, #20]
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f ae97 	beq.w	8006e8a <_printf_float+0xc2>
 800715c:	9a05      	ldr	r2, [sp, #20]
 800715e:	f10b 0b01 	add.w	fp, fp, #1
 8007162:	e7b9      	b.n	80070d8 <_printf_float+0x310>
 8007164:	ee18 3a10 	vmov	r3, s16
 8007168:	4652      	mov	r2, sl
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	47b8      	blx	r7
 8007170:	3001      	adds	r0, #1
 8007172:	d1be      	bne.n	80070f2 <_printf_float+0x32a>
 8007174:	e689      	b.n	8006e8a <_printf_float+0xc2>
 8007176:	9a05      	ldr	r2, [sp, #20]
 8007178:	464b      	mov	r3, r9
 800717a:	4442      	add	r2, r8
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	d1c1      	bne.n	800710a <_printf_float+0x342>
 8007186:	e680      	b.n	8006e8a <_printf_float+0xc2>
 8007188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800718a:	2a01      	cmp	r2, #1
 800718c:	dc01      	bgt.n	8007192 <_printf_float+0x3ca>
 800718e:	07db      	lsls	r3, r3, #31
 8007190:	d538      	bpl.n	8007204 <_printf_float+0x43c>
 8007192:	2301      	movs	r3, #1
 8007194:	4642      	mov	r2, r8
 8007196:	4631      	mov	r1, r6
 8007198:	4628      	mov	r0, r5
 800719a:	47b8      	blx	r7
 800719c:	3001      	adds	r0, #1
 800719e:	f43f ae74 	beq.w	8006e8a <_printf_float+0xc2>
 80071a2:	ee18 3a10 	vmov	r3, s16
 80071a6:	4652      	mov	r2, sl
 80071a8:	4631      	mov	r1, r6
 80071aa:	4628      	mov	r0, r5
 80071ac:	47b8      	blx	r7
 80071ae:	3001      	adds	r0, #1
 80071b0:	f43f ae6b 	beq.w	8006e8a <_printf_float+0xc2>
 80071b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071b8:	2200      	movs	r2, #0
 80071ba:	2300      	movs	r3, #0
 80071bc:	f7f9 fc9c 	bl	8000af8 <__aeabi_dcmpeq>
 80071c0:	b9d8      	cbnz	r0, 80071fa <_printf_float+0x432>
 80071c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c4:	f108 0201 	add.w	r2, r8, #1
 80071c8:	3b01      	subs	r3, #1
 80071ca:	4631      	mov	r1, r6
 80071cc:	4628      	mov	r0, r5
 80071ce:	47b8      	blx	r7
 80071d0:	3001      	adds	r0, #1
 80071d2:	d10e      	bne.n	80071f2 <_printf_float+0x42a>
 80071d4:	e659      	b.n	8006e8a <_printf_float+0xc2>
 80071d6:	2301      	movs	r3, #1
 80071d8:	4652      	mov	r2, sl
 80071da:	4631      	mov	r1, r6
 80071dc:	4628      	mov	r0, r5
 80071de:	47b8      	blx	r7
 80071e0:	3001      	adds	r0, #1
 80071e2:	f43f ae52 	beq.w	8006e8a <_printf_float+0xc2>
 80071e6:	f108 0801 	add.w	r8, r8, #1
 80071ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ec:	3b01      	subs	r3, #1
 80071ee:	4543      	cmp	r3, r8
 80071f0:	dcf1      	bgt.n	80071d6 <_printf_float+0x40e>
 80071f2:	464b      	mov	r3, r9
 80071f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071f8:	e6dc      	b.n	8006fb4 <_printf_float+0x1ec>
 80071fa:	f04f 0800 	mov.w	r8, #0
 80071fe:	f104 0a1a 	add.w	sl, r4, #26
 8007202:	e7f2      	b.n	80071ea <_printf_float+0x422>
 8007204:	2301      	movs	r3, #1
 8007206:	4642      	mov	r2, r8
 8007208:	e7df      	b.n	80071ca <_printf_float+0x402>
 800720a:	2301      	movs	r3, #1
 800720c:	464a      	mov	r2, r9
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	47b8      	blx	r7
 8007214:	3001      	adds	r0, #1
 8007216:	f43f ae38 	beq.w	8006e8a <_printf_float+0xc2>
 800721a:	f108 0801 	add.w	r8, r8, #1
 800721e:	68e3      	ldr	r3, [r4, #12]
 8007220:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007222:	1a5b      	subs	r3, r3, r1
 8007224:	4543      	cmp	r3, r8
 8007226:	dcf0      	bgt.n	800720a <_printf_float+0x442>
 8007228:	e6fa      	b.n	8007020 <_printf_float+0x258>
 800722a:	f04f 0800 	mov.w	r8, #0
 800722e:	f104 0919 	add.w	r9, r4, #25
 8007232:	e7f4      	b.n	800721e <_printf_float+0x456>

08007234 <_printf_common>:
 8007234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007238:	4616      	mov	r6, r2
 800723a:	4699      	mov	r9, r3
 800723c:	688a      	ldr	r2, [r1, #8]
 800723e:	690b      	ldr	r3, [r1, #16]
 8007240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007244:	4293      	cmp	r3, r2
 8007246:	bfb8      	it	lt
 8007248:	4613      	movlt	r3, r2
 800724a:	6033      	str	r3, [r6, #0]
 800724c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007250:	4607      	mov	r7, r0
 8007252:	460c      	mov	r4, r1
 8007254:	b10a      	cbz	r2, 800725a <_printf_common+0x26>
 8007256:	3301      	adds	r3, #1
 8007258:	6033      	str	r3, [r6, #0]
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	0699      	lsls	r1, r3, #26
 800725e:	bf42      	ittt	mi
 8007260:	6833      	ldrmi	r3, [r6, #0]
 8007262:	3302      	addmi	r3, #2
 8007264:	6033      	strmi	r3, [r6, #0]
 8007266:	6825      	ldr	r5, [r4, #0]
 8007268:	f015 0506 	ands.w	r5, r5, #6
 800726c:	d106      	bne.n	800727c <_printf_common+0x48>
 800726e:	f104 0a19 	add.w	sl, r4, #25
 8007272:	68e3      	ldr	r3, [r4, #12]
 8007274:	6832      	ldr	r2, [r6, #0]
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	42ab      	cmp	r3, r5
 800727a:	dc26      	bgt.n	80072ca <_printf_common+0x96>
 800727c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007280:	1e13      	subs	r3, r2, #0
 8007282:	6822      	ldr	r2, [r4, #0]
 8007284:	bf18      	it	ne
 8007286:	2301      	movne	r3, #1
 8007288:	0692      	lsls	r2, r2, #26
 800728a:	d42b      	bmi.n	80072e4 <_printf_common+0xb0>
 800728c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007290:	4649      	mov	r1, r9
 8007292:	4638      	mov	r0, r7
 8007294:	47c0      	blx	r8
 8007296:	3001      	adds	r0, #1
 8007298:	d01e      	beq.n	80072d8 <_printf_common+0xa4>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	68e5      	ldr	r5, [r4, #12]
 800729e:	6832      	ldr	r2, [r6, #0]
 80072a0:	f003 0306 	and.w	r3, r3, #6
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	bf08      	it	eq
 80072a8:	1aad      	subeq	r5, r5, r2
 80072aa:	68a3      	ldr	r3, [r4, #8]
 80072ac:	6922      	ldr	r2, [r4, #16]
 80072ae:	bf0c      	ite	eq
 80072b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072b4:	2500      	movne	r5, #0
 80072b6:	4293      	cmp	r3, r2
 80072b8:	bfc4      	itt	gt
 80072ba:	1a9b      	subgt	r3, r3, r2
 80072bc:	18ed      	addgt	r5, r5, r3
 80072be:	2600      	movs	r6, #0
 80072c0:	341a      	adds	r4, #26
 80072c2:	42b5      	cmp	r5, r6
 80072c4:	d11a      	bne.n	80072fc <_printf_common+0xc8>
 80072c6:	2000      	movs	r0, #0
 80072c8:	e008      	b.n	80072dc <_printf_common+0xa8>
 80072ca:	2301      	movs	r3, #1
 80072cc:	4652      	mov	r2, sl
 80072ce:	4649      	mov	r1, r9
 80072d0:	4638      	mov	r0, r7
 80072d2:	47c0      	blx	r8
 80072d4:	3001      	adds	r0, #1
 80072d6:	d103      	bne.n	80072e0 <_printf_common+0xac>
 80072d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e0:	3501      	adds	r5, #1
 80072e2:	e7c6      	b.n	8007272 <_printf_common+0x3e>
 80072e4:	18e1      	adds	r1, r4, r3
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	2030      	movs	r0, #48	; 0x30
 80072ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ee:	4422      	add	r2, r4
 80072f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072f8:	3302      	adds	r3, #2
 80072fa:	e7c7      	b.n	800728c <_printf_common+0x58>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4622      	mov	r2, r4
 8007300:	4649      	mov	r1, r9
 8007302:	4638      	mov	r0, r7
 8007304:	47c0      	blx	r8
 8007306:	3001      	adds	r0, #1
 8007308:	d0e6      	beq.n	80072d8 <_printf_common+0xa4>
 800730a:	3601      	adds	r6, #1
 800730c:	e7d9      	b.n	80072c2 <_printf_common+0x8e>
	...

08007310 <_printf_i>:
 8007310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	7e0f      	ldrb	r7, [r1, #24]
 8007316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007318:	2f78      	cmp	r7, #120	; 0x78
 800731a:	4691      	mov	r9, r2
 800731c:	4680      	mov	r8, r0
 800731e:	460c      	mov	r4, r1
 8007320:	469a      	mov	sl, r3
 8007322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007326:	d807      	bhi.n	8007338 <_printf_i+0x28>
 8007328:	2f62      	cmp	r7, #98	; 0x62
 800732a:	d80a      	bhi.n	8007342 <_printf_i+0x32>
 800732c:	2f00      	cmp	r7, #0
 800732e:	f000 80d8 	beq.w	80074e2 <_printf_i+0x1d2>
 8007332:	2f58      	cmp	r7, #88	; 0x58
 8007334:	f000 80a3 	beq.w	800747e <_printf_i+0x16e>
 8007338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800733c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007340:	e03a      	b.n	80073b8 <_printf_i+0xa8>
 8007342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007346:	2b15      	cmp	r3, #21
 8007348:	d8f6      	bhi.n	8007338 <_printf_i+0x28>
 800734a:	a101      	add	r1, pc, #4	; (adr r1, 8007350 <_printf_i+0x40>)
 800734c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007350:	080073a9 	.word	0x080073a9
 8007354:	080073bd 	.word	0x080073bd
 8007358:	08007339 	.word	0x08007339
 800735c:	08007339 	.word	0x08007339
 8007360:	08007339 	.word	0x08007339
 8007364:	08007339 	.word	0x08007339
 8007368:	080073bd 	.word	0x080073bd
 800736c:	08007339 	.word	0x08007339
 8007370:	08007339 	.word	0x08007339
 8007374:	08007339 	.word	0x08007339
 8007378:	08007339 	.word	0x08007339
 800737c:	080074c9 	.word	0x080074c9
 8007380:	080073ed 	.word	0x080073ed
 8007384:	080074ab 	.word	0x080074ab
 8007388:	08007339 	.word	0x08007339
 800738c:	08007339 	.word	0x08007339
 8007390:	080074eb 	.word	0x080074eb
 8007394:	08007339 	.word	0x08007339
 8007398:	080073ed 	.word	0x080073ed
 800739c:	08007339 	.word	0x08007339
 80073a0:	08007339 	.word	0x08007339
 80073a4:	080074b3 	.word	0x080074b3
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	1d1a      	adds	r2, r3, #4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	602a      	str	r2, [r5, #0]
 80073b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0a3      	b.n	8007504 <_printf_i+0x1f4>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	6829      	ldr	r1, [r5, #0]
 80073c0:	0606      	lsls	r6, r0, #24
 80073c2:	f101 0304 	add.w	r3, r1, #4
 80073c6:	d50a      	bpl.n	80073de <_printf_i+0xce>
 80073c8:	680e      	ldr	r6, [r1, #0]
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	2e00      	cmp	r6, #0
 80073ce:	da03      	bge.n	80073d8 <_printf_i+0xc8>
 80073d0:	232d      	movs	r3, #45	; 0x2d
 80073d2:	4276      	negs	r6, r6
 80073d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d8:	485e      	ldr	r0, [pc, #376]	; (8007554 <_printf_i+0x244>)
 80073da:	230a      	movs	r3, #10
 80073dc:	e019      	b.n	8007412 <_printf_i+0x102>
 80073de:	680e      	ldr	r6, [r1, #0]
 80073e0:	602b      	str	r3, [r5, #0]
 80073e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073e6:	bf18      	it	ne
 80073e8:	b236      	sxthne	r6, r6
 80073ea:	e7ef      	b.n	80073cc <_printf_i+0xbc>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	6820      	ldr	r0, [r4, #0]
 80073f0:	1d19      	adds	r1, r3, #4
 80073f2:	6029      	str	r1, [r5, #0]
 80073f4:	0601      	lsls	r1, r0, #24
 80073f6:	d501      	bpl.n	80073fc <_printf_i+0xec>
 80073f8:	681e      	ldr	r6, [r3, #0]
 80073fa:	e002      	b.n	8007402 <_printf_i+0xf2>
 80073fc:	0646      	lsls	r6, r0, #25
 80073fe:	d5fb      	bpl.n	80073f8 <_printf_i+0xe8>
 8007400:	881e      	ldrh	r6, [r3, #0]
 8007402:	4854      	ldr	r0, [pc, #336]	; (8007554 <_printf_i+0x244>)
 8007404:	2f6f      	cmp	r7, #111	; 0x6f
 8007406:	bf0c      	ite	eq
 8007408:	2308      	moveq	r3, #8
 800740a:	230a      	movne	r3, #10
 800740c:	2100      	movs	r1, #0
 800740e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007412:	6865      	ldr	r5, [r4, #4]
 8007414:	60a5      	str	r5, [r4, #8]
 8007416:	2d00      	cmp	r5, #0
 8007418:	bfa2      	ittt	ge
 800741a:	6821      	ldrge	r1, [r4, #0]
 800741c:	f021 0104 	bicge.w	r1, r1, #4
 8007420:	6021      	strge	r1, [r4, #0]
 8007422:	b90e      	cbnz	r6, 8007428 <_printf_i+0x118>
 8007424:	2d00      	cmp	r5, #0
 8007426:	d04d      	beq.n	80074c4 <_printf_i+0x1b4>
 8007428:	4615      	mov	r5, r2
 800742a:	fbb6 f1f3 	udiv	r1, r6, r3
 800742e:	fb03 6711 	mls	r7, r3, r1, r6
 8007432:	5dc7      	ldrb	r7, [r0, r7]
 8007434:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007438:	4637      	mov	r7, r6
 800743a:	42bb      	cmp	r3, r7
 800743c:	460e      	mov	r6, r1
 800743e:	d9f4      	bls.n	800742a <_printf_i+0x11a>
 8007440:	2b08      	cmp	r3, #8
 8007442:	d10b      	bne.n	800745c <_printf_i+0x14c>
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	07de      	lsls	r6, r3, #31
 8007448:	d508      	bpl.n	800745c <_printf_i+0x14c>
 800744a:	6923      	ldr	r3, [r4, #16]
 800744c:	6861      	ldr	r1, [r4, #4]
 800744e:	4299      	cmp	r1, r3
 8007450:	bfde      	ittt	le
 8007452:	2330      	movle	r3, #48	; 0x30
 8007454:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007458:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800745c:	1b52      	subs	r2, r2, r5
 800745e:	6122      	str	r2, [r4, #16]
 8007460:	f8cd a000 	str.w	sl, [sp]
 8007464:	464b      	mov	r3, r9
 8007466:	aa03      	add	r2, sp, #12
 8007468:	4621      	mov	r1, r4
 800746a:	4640      	mov	r0, r8
 800746c:	f7ff fee2 	bl	8007234 <_printf_common>
 8007470:	3001      	adds	r0, #1
 8007472:	d14c      	bne.n	800750e <_printf_i+0x1fe>
 8007474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007478:	b004      	add	sp, #16
 800747a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747e:	4835      	ldr	r0, [pc, #212]	; (8007554 <_printf_i+0x244>)
 8007480:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007484:	6829      	ldr	r1, [r5, #0]
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	f851 6b04 	ldr.w	r6, [r1], #4
 800748c:	6029      	str	r1, [r5, #0]
 800748e:	061d      	lsls	r5, r3, #24
 8007490:	d514      	bpl.n	80074bc <_printf_i+0x1ac>
 8007492:	07df      	lsls	r7, r3, #31
 8007494:	bf44      	itt	mi
 8007496:	f043 0320 	orrmi.w	r3, r3, #32
 800749a:	6023      	strmi	r3, [r4, #0]
 800749c:	b91e      	cbnz	r6, 80074a6 <_printf_i+0x196>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	f023 0320 	bic.w	r3, r3, #32
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	2310      	movs	r3, #16
 80074a8:	e7b0      	b.n	800740c <_printf_i+0xfc>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	f043 0320 	orr.w	r3, r3, #32
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	2378      	movs	r3, #120	; 0x78
 80074b4:	4828      	ldr	r0, [pc, #160]	; (8007558 <_printf_i+0x248>)
 80074b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ba:	e7e3      	b.n	8007484 <_printf_i+0x174>
 80074bc:	0659      	lsls	r1, r3, #25
 80074be:	bf48      	it	mi
 80074c0:	b2b6      	uxthmi	r6, r6
 80074c2:	e7e6      	b.n	8007492 <_printf_i+0x182>
 80074c4:	4615      	mov	r5, r2
 80074c6:	e7bb      	b.n	8007440 <_printf_i+0x130>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	6826      	ldr	r6, [r4, #0]
 80074cc:	6961      	ldr	r1, [r4, #20]
 80074ce:	1d18      	adds	r0, r3, #4
 80074d0:	6028      	str	r0, [r5, #0]
 80074d2:	0635      	lsls	r5, r6, #24
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	d501      	bpl.n	80074dc <_printf_i+0x1cc>
 80074d8:	6019      	str	r1, [r3, #0]
 80074da:	e002      	b.n	80074e2 <_printf_i+0x1d2>
 80074dc:	0670      	lsls	r0, r6, #25
 80074de:	d5fb      	bpl.n	80074d8 <_printf_i+0x1c8>
 80074e0:	8019      	strh	r1, [r3, #0]
 80074e2:	2300      	movs	r3, #0
 80074e4:	6123      	str	r3, [r4, #16]
 80074e6:	4615      	mov	r5, r2
 80074e8:	e7ba      	b.n	8007460 <_printf_i+0x150>
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	1d1a      	adds	r2, r3, #4
 80074ee:	602a      	str	r2, [r5, #0]
 80074f0:	681d      	ldr	r5, [r3, #0]
 80074f2:	6862      	ldr	r2, [r4, #4]
 80074f4:	2100      	movs	r1, #0
 80074f6:	4628      	mov	r0, r5
 80074f8:	f7f8 fe8a 	bl	8000210 <memchr>
 80074fc:	b108      	cbz	r0, 8007502 <_printf_i+0x1f2>
 80074fe:	1b40      	subs	r0, r0, r5
 8007500:	6060      	str	r0, [r4, #4]
 8007502:	6863      	ldr	r3, [r4, #4]
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	2300      	movs	r3, #0
 8007508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750c:	e7a8      	b.n	8007460 <_printf_i+0x150>
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	462a      	mov	r2, r5
 8007512:	4649      	mov	r1, r9
 8007514:	4640      	mov	r0, r8
 8007516:	47d0      	blx	sl
 8007518:	3001      	adds	r0, #1
 800751a:	d0ab      	beq.n	8007474 <_printf_i+0x164>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	079b      	lsls	r3, r3, #30
 8007520:	d413      	bmi.n	800754a <_printf_i+0x23a>
 8007522:	68e0      	ldr	r0, [r4, #12]
 8007524:	9b03      	ldr	r3, [sp, #12]
 8007526:	4298      	cmp	r0, r3
 8007528:	bfb8      	it	lt
 800752a:	4618      	movlt	r0, r3
 800752c:	e7a4      	b.n	8007478 <_printf_i+0x168>
 800752e:	2301      	movs	r3, #1
 8007530:	4632      	mov	r2, r6
 8007532:	4649      	mov	r1, r9
 8007534:	4640      	mov	r0, r8
 8007536:	47d0      	blx	sl
 8007538:	3001      	adds	r0, #1
 800753a:	d09b      	beq.n	8007474 <_printf_i+0x164>
 800753c:	3501      	adds	r5, #1
 800753e:	68e3      	ldr	r3, [r4, #12]
 8007540:	9903      	ldr	r1, [sp, #12]
 8007542:	1a5b      	subs	r3, r3, r1
 8007544:	42ab      	cmp	r3, r5
 8007546:	dcf2      	bgt.n	800752e <_printf_i+0x21e>
 8007548:	e7eb      	b.n	8007522 <_printf_i+0x212>
 800754a:	2500      	movs	r5, #0
 800754c:	f104 0619 	add.w	r6, r4, #25
 8007550:	e7f5      	b.n	800753e <_printf_i+0x22e>
 8007552:	bf00      	nop
 8007554:	08009bb6 	.word	0x08009bb6
 8007558:	08009bc7 	.word	0x08009bc7

0800755c <iprintf>:
 800755c:	b40f      	push	{r0, r1, r2, r3}
 800755e:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <iprintf+0x2c>)
 8007560:	b513      	push	{r0, r1, r4, lr}
 8007562:	681c      	ldr	r4, [r3, #0]
 8007564:	b124      	cbz	r4, 8007570 <iprintf+0x14>
 8007566:	69a3      	ldr	r3, [r4, #24]
 8007568:	b913      	cbnz	r3, 8007570 <iprintf+0x14>
 800756a:	4620      	mov	r0, r4
 800756c:	f001 f83a 	bl	80085e4 <__sinit>
 8007570:	ab05      	add	r3, sp, #20
 8007572:	9a04      	ldr	r2, [sp, #16]
 8007574:	68a1      	ldr	r1, [r4, #8]
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	4620      	mov	r0, r4
 800757a:	f001 fd85 	bl	8009088 <_vfiprintf_r>
 800757e:	b002      	add	sp, #8
 8007580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007584:	b004      	add	sp, #16
 8007586:	4770      	bx	lr
 8007588:	20000010 	.word	0x20000010

0800758c <__strtok_r>:
 800758c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800758e:	b908      	cbnz	r0, 8007594 <__strtok_r+0x8>
 8007590:	6810      	ldr	r0, [r2, #0]
 8007592:	b188      	cbz	r0, 80075b8 <__strtok_r+0x2c>
 8007594:	4604      	mov	r4, r0
 8007596:	4620      	mov	r0, r4
 8007598:	f814 5b01 	ldrb.w	r5, [r4], #1
 800759c:	460f      	mov	r7, r1
 800759e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80075a2:	b91e      	cbnz	r6, 80075ac <__strtok_r+0x20>
 80075a4:	b965      	cbnz	r5, 80075c0 <__strtok_r+0x34>
 80075a6:	6015      	str	r5, [r2, #0]
 80075a8:	4628      	mov	r0, r5
 80075aa:	e005      	b.n	80075b8 <__strtok_r+0x2c>
 80075ac:	42b5      	cmp	r5, r6
 80075ae:	d1f6      	bne.n	800759e <__strtok_r+0x12>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f0      	bne.n	8007596 <__strtok_r+0xa>
 80075b4:	6014      	str	r4, [r2, #0]
 80075b6:	7003      	strb	r3, [r0, #0]
 80075b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ba:	461c      	mov	r4, r3
 80075bc:	e00c      	b.n	80075d8 <__strtok_r+0x4c>
 80075be:	b915      	cbnz	r5, 80075c6 <__strtok_r+0x3a>
 80075c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075c4:	460e      	mov	r6, r1
 80075c6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80075ca:	42ab      	cmp	r3, r5
 80075cc:	d1f7      	bne.n	80075be <__strtok_r+0x32>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0f3      	beq.n	80075ba <__strtok_r+0x2e>
 80075d2:	2300      	movs	r3, #0
 80075d4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80075d8:	6014      	str	r4, [r2, #0]
 80075da:	e7ed      	b.n	80075b8 <__strtok_r+0x2c>

080075dc <strtok_r>:
 80075dc:	2301      	movs	r3, #1
 80075de:	f7ff bfd5 	b.w	800758c <__strtok_r>
	...

080075e4 <_strtol_l.constprop.0>:
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ea:	d001      	beq.n	80075f0 <_strtol_l.constprop.0+0xc>
 80075ec:	2b24      	cmp	r3, #36	; 0x24
 80075ee:	d906      	bls.n	80075fe <_strtol_l.constprop.0+0x1a>
 80075f0:	f7ff fb0a 	bl	8006c08 <__errno>
 80075f4:	2316      	movs	r3, #22
 80075f6:	6003      	str	r3, [r0, #0]
 80075f8:	2000      	movs	r0, #0
 80075fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80076e4 <_strtol_l.constprop.0+0x100>
 8007602:	460d      	mov	r5, r1
 8007604:	462e      	mov	r6, r5
 8007606:	f815 4b01 	ldrb.w	r4, [r5], #1
 800760a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800760e:	f017 0708 	ands.w	r7, r7, #8
 8007612:	d1f7      	bne.n	8007604 <_strtol_l.constprop.0+0x20>
 8007614:	2c2d      	cmp	r4, #45	; 0x2d
 8007616:	d132      	bne.n	800767e <_strtol_l.constprop.0+0x9a>
 8007618:	782c      	ldrb	r4, [r5, #0]
 800761a:	2701      	movs	r7, #1
 800761c:	1cb5      	adds	r5, r6, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d05b      	beq.n	80076da <_strtol_l.constprop.0+0xf6>
 8007622:	2b10      	cmp	r3, #16
 8007624:	d109      	bne.n	800763a <_strtol_l.constprop.0+0x56>
 8007626:	2c30      	cmp	r4, #48	; 0x30
 8007628:	d107      	bne.n	800763a <_strtol_l.constprop.0+0x56>
 800762a:	782c      	ldrb	r4, [r5, #0]
 800762c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007630:	2c58      	cmp	r4, #88	; 0x58
 8007632:	d14d      	bne.n	80076d0 <_strtol_l.constprop.0+0xec>
 8007634:	786c      	ldrb	r4, [r5, #1]
 8007636:	2310      	movs	r3, #16
 8007638:	3502      	adds	r5, #2
 800763a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800763e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007642:	f04f 0c00 	mov.w	ip, #0
 8007646:	fbb8 f9f3 	udiv	r9, r8, r3
 800764a:	4666      	mov	r6, ip
 800764c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007650:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007654:	f1be 0f09 	cmp.w	lr, #9
 8007658:	d816      	bhi.n	8007688 <_strtol_l.constprop.0+0xa4>
 800765a:	4674      	mov	r4, lr
 800765c:	42a3      	cmp	r3, r4
 800765e:	dd24      	ble.n	80076aa <_strtol_l.constprop.0+0xc6>
 8007660:	f1bc 0f00 	cmp.w	ip, #0
 8007664:	db1e      	blt.n	80076a4 <_strtol_l.constprop.0+0xc0>
 8007666:	45b1      	cmp	r9, r6
 8007668:	d31c      	bcc.n	80076a4 <_strtol_l.constprop.0+0xc0>
 800766a:	d101      	bne.n	8007670 <_strtol_l.constprop.0+0x8c>
 800766c:	45a2      	cmp	sl, r4
 800766e:	db19      	blt.n	80076a4 <_strtol_l.constprop.0+0xc0>
 8007670:	fb06 4603 	mla	r6, r6, r3, r4
 8007674:	f04f 0c01 	mov.w	ip, #1
 8007678:	f815 4b01 	ldrb.w	r4, [r5], #1
 800767c:	e7e8      	b.n	8007650 <_strtol_l.constprop.0+0x6c>
 800767e:	2c2b      	cmp	r4, #43	; 0x2b
 8007680:	bf04      	itt	eq
 8007682:	782c      	ldrbeq	r4, [r5, #0]
 8007684:	1cb5      	addeq	r5, r6, #2
 8007686:	e7ca      	b.n	800761e <_strtol_l.constprop.0+0x3a>
 8007688:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800768c:	f1be 0f19 	cmp.w	lr, #25
 8007690:	d801      	bhi.n	8007696 <_strtol_l.constprop.0+0xb2>
 8007692:	3c37      	subs	r4, #55	; 0x37
 8007694:	e7e2      	b.n	800765c <_strtol_l.constprop.0+0x78>
 8007696:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800769a:	f1be 0f19 	cmp.w	lr, #25
 800769e:	d804      	bhi.n	80076aa <_strtol_l.constprop.0+0xc6>
 80076a0:	3c57      	subs	r4, #87	; 0x57
 80076a2:	e7db      	b.n	800765c <_strtol_l.constprop.0+0x78>
 80076a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80076a8:	e7e6      	b.n	8007678 <_strtol_l.constprop.0+0x94>
 80076aa:	f1bc 0f00 	cmp.w	ip, #0
 80076ae:	da05      	bge.n	80076bc <_strtol_l.constprop.0+0xd8>
 80076b0:	2322      	movs	r3, #34	; 0x22
 80076b2:	6003      	str	r3, [r0, #0]
 80076b4:	4646      	mov	r6, r8
 80076b6:	b942      	cbnz	r2, 80076ca <_strtol_l.constprop.0+0xe6>
 80076b8:	4630      	mov	r0, r6
 80076ba:	e79e      	b.n	80075fa <_strtol_l.constprop.0+0x16>
 80076bc:	b107      	cbz	r7, 80076c0 <_strtol_l.constprop.0+0xdc>
 80076be:	4276      	negs	r6, r6
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	d0f9      	beq.n	80076b8 <_strtol_l.constprop.0+0xd4>
 80076c4:	f1bc 0f00 	cmp.w	ip, #0
 80076c8:	d000      	beq.n	80076cc <_strtol_l.constprop.0+0xe8>
 80076ca:	1e69      	subs	r1, r5, #1
 80076cc:	6011      	str	r1, [r2, #0]
 80076ce:	e7f3      	b.n	80076b8 <_strtol_l.constprop.0+0xd4>
 80076d0:	2430      	movs	r4, #48	; 0x30
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1b1      	bne.n	800763a <_strtol_l.constprop.0+0x56>
 80076d6:	2308      	movs	r3, #8
 80076d8:	e7af      	b.n	800763a <_strtol_l.constprop.0+0x56>
 80076da:	2c30      	cmp	r4, #48	; 0x30
 80076dc:	d0a5      	beq.n	800762a <_strtol_l.constprop.0+0x46>
 80076de:	230a      	movs	r3, #10
 80076e0:	e7ab      	b.n	800763a <_strtol_l.constprop.0+0x56>
 80076e2:	bf00      	nop
 80076e4:	08009bd9 	.word	0x08009bd9

080076e8 <strtol>:
 80076e8:	4613      	mov	r3, r2
 80076ea:	460a      	mov	r2, r1
 80076ec:	4601      	mov	r1, r0
 80076ee:	4802      	ldr	r0, [pc, #8]	; (80076f8 <strtol+0x10>)
 80076f0:	6800      	ldr	r0, [r0, #0]
 80076f2:	f7ff bf77 	b.w	80075e4 <_strtol_l.constprop.0>
 80076f6:	bf00      	nop
 80076f8:	20000010 	.word	0x20000010

080076fc <_strtoull_l.constprop.0>:
 80076fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007700:	4692      	mov	sl, r2
 8007702:	4a49      	ldr	r2, [pc, #292]	; (8007828 <_strtoull_l.constprop.0+0x12c>)
 8007704:	9001      	str	r0, [sp, #4]
 8007706:	4689      	mov	r9, r1
 8007708:	461d      	mov	r5, r3
 800770a:	460e      	mov	r6, r1
 800770c:	4633      	mov	r3, r6
 800770e:	f816 4b01 	ldrb.w	r4, [r6], #1
 8007712:	5ca7      	ldrb	r7, [r4, r2]
 8007714:	f017 0708 	ands.w	r7, r7, #8
 8007718:	d1f8      	bne.n	800770c <_strtoull_l.constprop.0+0x10>
 800771a:	2c2d      	cmp	r4, #45	; 0x2d
 800771c:	d14a      	bne.n	80077b4 <_strtoull_l.constprop.0+0xb8>
 800771e:	7834      	ldrb	r4, [r6, #0]
 8007720:	2701      	movs	r7, #1
 8007722:	1c9e      	adds	r6, r3, #2
 8007724:	2d00      	cmp	r5, #0
 8007726:	d07b      	beq.n	8007820 <_strtoull_l.constprop.0+0x124>
 8007728:	2d10      	cmp	r5, #16
 800772a:	d109      	bne.n	8007740 <_strtoull_l.constprop.0+0x44>
 800772c:	2c30      	cmp	r4, #48	; 0x30
 800772e:	d107      	bne.n	8007740 <_strtoull_l.constprop.0+0x44>
 8007730:	7833      	ldrb	r3, [r6, #0]
 8007732:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007736:	2b58      	cmp	r3, #88	; 0x58
 8007738:	d16d      	bne.n	8007816 <_strtoull_l.constprop.0+0x11a>
 800773a:	7874      	ldrb	r4, [r6, #1]
 800773c:	2510      	movs	r5, #16
 800773e:	3602      	adds	r6, #2
 8007740:	ea4f 7be5 	mov.w	fp, r5, asr #31
 8007744:	462a      	mov	r2, r5
 8007746:	465b      	mov	r3, fp
 8007748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800774c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007750:	f7f9 fab2 	bl	8000cb8 <__aeabi_uldivmod>
 8007754:	462a      	mov	r2, r5
 8007756:	9000      	str	r0, [sp, #0]
 8007758:	4688      	mov	r8, r1
 800775a:	465b      	mov	r3, fp
 800775c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007764:	f7f9 faa8 	bl	8000cb8 <__aeabi_uldivmod>
 8007768:	2300      	movs	r3, #0
 800776a:	4618      	mov	r0, r3
 800776c:	4619      	mov	r1, r3
 800776e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007772:	f1bc 0f09 	cmp.w	ip, #9
 8007776:	d822      	bhi.n	80077be <_strtoull_l.constprop.0+0xc2>
 8007778:	4664      	mov	r4, ip
 800777a:	42a5      	cmp	r5, r4
 800777c:	dd30      	ble.n	80077e0 <_strtoull_l.constprop.0+0xe4>
 800777e:	2b00      	cmp	r3, #0
 8007780:	db2b      	blt.n	80077da <_strtoull_l.constprop.0+0xde>
 8007782:	9b00      	ldr	r3, [sp, #0]
 8007784:	4283      	cmp	r3, r0
 8007786:	eb78 0301 	sbcs.w	r3, r8, r1
 800778a:	d326      	bcc.n	80077da <_strtoull_l.constprop.0+0xde>
 800778c:	9b00      	ldr	r3, [sp, #0]
 800778e:	4588      	cmp	r8, r1
 8007790:	bf08      	it	eq
 8007792:	4283      	cmpeq	r3, r0
 8007794:	d101      	bne.n	800779a <_strtoull_l.constprop.0+0x9e>
 8007796:	42a2      	cmp	r2, r4
 8007798:	db1f      	blt.n	80077da <_strtoull_l.constprop.0+0xde>
 800779a:	4369      	muls	r1, r5
 800779c:	fb00 110b 	mla	r1, r0, fp, r1
 80077a0:	fba5 0300 	umull	r0, r3, r5, r0
 80077a4:	4419      	add	r1, r3
 80077a6:	1820      	adds	r0, r4, r0
 80077a8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80077ac:	2301      	movs	r3, #1
 80077ae:	f816 4b01 	ldrb.w	r4, [r6], #1
 80077b2:	e7dc      	b.n	800776e <_strtoull_l.constprop.0+0x72>
 80077b4:	2c2b      	cmp	r4, #43	; 0x2b
 80077b6:	bf04      	itt	eq
 80077b8:	7834      	ldrbeq	r4, [r6, #0]
 80077ba:	1c9e      	addeq	r6, r3, #2
 80077bc:	e7b2      	b.n	8007724 <_strtoull_l.constprop.0+0x28>
 80077be:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80077c2:	f1bc 0f19 	cmp.w	ip, #25
 80077c6:	d801      	bhi.n	80077cc <_strtoull_l.constprop.0+0xd0>
 80077c8:	3c37      	subs	r4, #55	; 0x37
 80077ca:	e7d6      	b.n	800777a <_strtoull_l.constprop.0+0x7e>
 80077cc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80077d0:	f1bc 0f19 	cmp.w	ip, #25
 80077d4:	d804      	bhi.n	80077e0 <_strtoull_l.constprop.0+0xe4>
 80077d6:	3c57      	subs	r4, #87	; 0x57
 80077d8:	e7cf      	b.n	800777a <_strtoull_l.constprop.0+0x7e>
 80077da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077de:	e7e6      	b.n	80077ae <_strtoull_l.constprop.0+0xb2>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	da0b      	bge.n	80077fc <_strtoull_l.constprop.0+0x100>
 80077e4:	9a01      	ldr	r2, [sp, #4]
 80077e6:	2322      	movs	r3, #34	; 0x22
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	4601      	mov	r1, r0
 80077f0:	f1ba 0f00 	cmp.w	sl, #0
 80077f4:	d10a      	bne.n	800780c <_strtoull_l.constprop.0+0x110>
 80077f6:	b003      	add	sp, #12
 80077f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fc:	b117      	cbz	r7, 8007804 <_strtoull_l.constprop.0+0x108>
 80077fe:	4240      	negs	r0, r0
 8007800:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007804:	f1ba 0f00 	cmp.w	sl, #0
 8007808:	d0f5      	beq.n	80077f6 <_strtoull_l.constprop.0+0xfa>
 800780a:	b10b      	cbz	r3, 8007810 <_strtoull_l.constprop.0+0x114>
 800780c:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8007810:	f8ca 9000 	str.w	r9, [sl]
 8007814:	e7ef      	b.n	80077f6 <_strtoull_l.constprop.0+0xfa>
 8007816:	2430      	movs	r4, #48	; 0x30
 8007818:	2d00      	cmp	r5, #0
 800781a:	d191      	bne.n	8007740 <_strtoull_l.constprop.0+0x44>
 800781c:	2508      	movs	r5, #8
 800781e:	e78f      	b.n	8007740 <_strtoull_l.constprop.0+0x44>
 8007820:	2c30      	cmp	r4, #48	; 0x30
 8007822:	d085      	beq.n	8007730 <_strtoull_l.constprop.0+0x34>
 8007824:	250a      	movs	r5, #10
 8007826:	e78b      	b.n	8007740 <_strtoull_l.constprop.0+0x44>
 8007828:	08009bd9 	.word	0x08009bd9

0800782c <strtoull>:
 800782c:	4613      	mov	r3, r2
 800782e:	460a      	mov	r2, r1
 8007830:	4601      	mov	r1, r0
 8007832:	4802      	ldr	r0, [pc, #8]	; (800783c <strtoull+0x10>)
 8007834:	6800      	ldr	r0, [r0, #0]
 8007836:	f7ff bf61 	b.w	80076fc <_strtoull_l.constprop.0>
 800783a:	bf00      	nop
 800783c:	20000010 	.word	0x20000010

08007840 <quorem>:
 8007840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	6903      	ldr	r3, [r0, #16]
 8007846:	690c      	ldr	r4, [r1, #16]
 8007848:	42a3      	cmp	r3, r4
 800784a:	4607      	mov	r7, r0
 800784c:	f2c0 8081 	blt.w	8007952 <quorem+0x112>
 8007850:	3c01      	subs	r4, #1
 8007852:	f101 0814 	add.w	r8, r1, #20
 8007856:	f100 0514 	add.w	r5, r0, #20
 800785a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007864:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007868:	3301      	adds	r3, #1
 800786a:	429a      	cmp	r2, r3
 800786c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007870:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007874:	fbb2 f6f3 	udiv	r6, r2, r3
 8007878:	d331      	bcc.n	80078de <quorem+0x9e>
 800787a:	f04f 0e00 	mov.w	lr, #0
 800787e:	4640      	mov	r0, r8
 8007880:	46ac      	mov	ip, r5
 8007882:	46f2      	mov	sl, lr
 8007884:	f850 2b04 	ldr.w	r2, [r0], #4
 8007888:	b293      	uxth	r3, r2
 800788a:	fb06 e303 	mla	r3, r6, r3, lr
 800788e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007892:	b29b      	uxth	r3, r3
 8007894:	ebaa 0303 	sub.w	r3, sl, r3
 8007898:	f8dc a000 	ldr.w	sl, [ip]
 800789c:	0c12      	lsrs	r2, r2, #16
 800789e:	fa13 f38a 	uxtah	r3, r3, sl
 80078a2:	fb06 e202 	mla	r2, r6, r2, lr
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	9b00      	ldr	r3, [sp, #0]
 80078aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078ae:	b292      	uxth	r2, r2
 80078b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80078b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80078bc:	4581      	cmp	r9, r0
 80078be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078c2:	f84c 3b04 	str.w	r3, [ip], #4
 80078c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078ca:	d2db      	bcs.n	8007884 <quorem+0x44>
 80078cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80078d0:	b92b      	cbnz	r3, 80078de <quorem+0x9e>
 80078d2:	9b01      	ldr	r3, [sp, #4]
 80078d4:	3b04      	subs	r3, #4
 80078d6:	429d      	cmp	r5, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	d32e      	bcc.n	800793a <quorem+0xfa>
 80078dc:	613c      	str	r4, [r7, #16]
 80078de:	4638      	mov	r0, r7
 80078e0:	f001 f9b0 	bl	8008c44 <__mcmp>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	db24      	blt.n	8007932 <quorem+0xf2>
 80078e8:	3601      	adds	r6, #1
 80078ea:	4628      	mov	r0, r5
 80078ec:	f04f 0c00 	mov.w	ip, #0
 80078f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80078f4:	f8d0 e000 	ldr.w	lr, [r0]
 80078f8:	b293      	uxth	r3, r2
 80078fa:	ebac 0303 	sub.w	r3, ip, r3
 80078fe:	0c12      	lsrs	r2, r2, #16
 8007900:	fa13 f38e 	uxtah	r3, r3, lr
 8007904:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800790c:	b29b      	uxth	r3, r3
 800790e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007912:	45c1      	cmp	r9, r8
 8007914:	f840 3b04 	str.w	r3, [r0], #4
 8007918:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800791c:	d2e8      	bcs.n	80078f0 <quorem+0xb0>
 800791e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007922:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007926:	b922      	cbnz	r2, 8007932 <quorem+0xf2>
 8007928:	3b04      	subs	r3, #4
 800792a:	429d      	cmp	r5, r3
 800792c:	461a      	mov	r2, r3
 800792e:	d30a      	bcc.n	8007946 <quorem+0x106>
 8007930:	613c      	str	r4, [r7, #16]
 8007932:	4630      	mov	r0, r6
 8007934:	b003      	add	sp, #12
 8007936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793a:	6812      	ldr	r2, [r2, #0]
 800793c:	3b04      	subs	r3, #4
 800793e:	2a00      	cmp	r2, #0
 8007940:	d1cc      	bne.n	80078dc <quorem+0x9c>
 8007942:	3c01      	subs	r4, #1
 8007944:	e7c7      	b.n	80078d6 <quorem+0x96>
 8007946:	6812      	ldr	r2, [r2, #0]
 8007948:	3b04      	subs	r3, #4
 800794a:	2a00      	cmp	r2, #0
 800794c:	d1f0      	bne.n	8007930 <quorem+0xf0>
 800794e:	3c01      	subs	r4, #1
 8007950:	e7eb      	b.n	800792a <quorem+0xea>
 8007952:	2000      	movs	r0, #0
 8007954:	e7ee      	b.n	8007934 <quorem+0xf4>
	...

08007958 <_dtoa_r>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	ed2d 8b04 	vpush	{d8-d9}
 8007960:	ec57 6b10 	vmov	r6, r7, d0
 8007964:	b093      	sub	sp, #76	; 0x4c
 8007966:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007968:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800796c:	9106      	str	r1, [sp, #24]
 800796e:	ee10 aa10 	vmov	sl, s0
 8007972:	4604      	mov	r4, r0
 8007974:	9209      	str	r2, [sp, #36]	; 0x24
 8007976:	930c      	str	r3, [sp, #48]	; 0x30
 8007978:	46bb      	mov	fp, r7
 800797a:	b975      	cbnz	r5, 800799a <_dtoa_r+0x42>
 800797c:	2010      	movs	r0, #16
 800797e:	f000 fed7 	bl	8008730 <malloc>
 8007982:	4602      	mov	r2, r0
 8007984:	6260      	str	r0, [r4, #36]	; 0x24
 8007986:	b920      	cbnz	r0, 8007992 <_dtoa_r+0x3a>
 8007988:	4ba7      	ldr	r3, [pc, #668]	; (8007c28 <_dtoa_r+0x2d0>)
 800798a:	21ea      	movs	r1, #234	; 0xea
 800798c:	48a7      	ldr	r0, [pc, #668]	; (8007c2c <_dtoa_r+0x2d4>)
 800798e:	f001 fdd1 	bl	8009534 <__assert_func>
 8007992:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007996:	6005      	str	r5, [r0, #0]
 8007998:	60c5      	str	r5, [r0, #12]
 800799a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800799c:	6819      	ldr	r1, [r3, #0]
 800799e:	b151      	cbz	r1, 80079b6 <_dtoa_r+0x5e>
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	604a      	str	r2, [r1, #4]
 80079a4:	2301      	movs	r3, #1
 80079a6:	4093      	lsls	r3, r2
 80079a8:	608b      	str	r3, [r1, #8]
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 ff08 	bl	80087c0 <_Bfree>
 80079b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	1e3b      	subs	r3, r7, #0
 80079b8:	bfaa      	itet	ge
 80079ba:	2300      	movge	r3, #0
 80079bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80079c0:	f8c8 3000 	strge.w	r3, [r8]
 80079c4:	4b9a      	ldr	r3, [pc, #616]	; (8007c30 <_dtoa_r+0x2d8>)
 80079c6:	bfbc      	itt	lt
 80079c8:	2201      	movlt	r2, #1
 80079ca:	f8c8 2000 	strlt.w	r2, [r8]
 80079ce:	ea33 030b 	bics.w	r3, r3, fp
 80079d2:	d11b      	bne.n	8007a0c <_dtoa_r+0xb4>
 80079d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079e0:	4333      	orrs	r3, r6
 80079e2:	f000 8592 	beq.w	800850a <_dtoa_r+0xbb2>
 80079e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079e8:	b963      	cbnz	r3, 8007a04 <_dtoa_r+0xac>
 80079ea:	4b92      	ldr	r3, [pc, #584]	; (8007c34 <_dtoa_r+0x2dc>)
 80079ec:	e022      	b.n	8007a34 <_dtoa_r+0xdc>
 80079ee:	4b92      	ldr	r3, [pc, #584]	; (8007c38 <_dtoa_r+0x2e0>)
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	3308      	adds	r3, #8
 80079f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	9801      	ldr	r0, [sp, #4]
 80079fa:	b013      	add	sp, #76	; 0x4c
 80079fc:	ecbd 8b04 	vpop	{d8-d9}
 8007a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a04:	4b8b      	ldr	r3, [pc, #556]	; (8007c34 <_dtoa_r+0x2dc>)
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	3303      	adds	r3, #3
 8007a0a:	e7f3      	b.n	80079f4 <_dtoa_r+0x9c>
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4650      	mov	r0, sl
 8007a12:	4659      	mov	r1, fp
 8007a14:	f7f9 f870 	bl	8000af8 <__aeabi_dcmpeq>
 8007a18:	ec4b ab19 	vmov	d9, sl, fp
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	b158      	cbz	r0, 8007a38 <_dtoa_r+0xe0>
 8007a20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a22:	2301      	movs	r3, #1
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 856b 	beq.w	8008504 <_dtoa_r+0xbac>
 8007a2e:	4883      	ldr	r0, [pc, #524]	; (8007c3c <_dtoa_r+0x2e4>)
 8007a30:	6018      	str	r0, [r3, #0]
 8007a32:	1e43      	subs	r3, r0, #1
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	e7df      	b.n	80079f8 <_dtoa_r+0xa0>
 8007a38:	ec4b ab10 	vmov	d0, sl, fp
 8007a3c:	aa10      	add	r2, sp, #64	; 0x40
 8007a3e:	a911      	add	r1, sp, #68	; 0x44
 8007a40:	4620      	mov	r0, r4
 8007a42:	f001 f9a5 	bl	8008d90 <__d2b>
 8007a46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007a4a:	ee08 0a10 	vmov	s16, r0
 8007a4e:	2d00      	cmp	r5, #0
 8007a50:	f000 8084 	beq.w	8007b5c <_dtoa_r+0x204>
 8007a54:	ee19 3a90 	vmov	r3, s19
 8007a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a60:	4656      	mov	r6, sl
 8007a62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007a6e:	4b74      	ldr	r3, [pc, #464]	; (8007c40 <_dtoa_r+0x2e8>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	4630      	mov	r0, r6
 8007a74:	4639      	mov	r1, r7
 8007a76:	f7f8 fc1f 	bl	80002b8 <__aeabi_dsub>
 8007a7a:	a365      	add	r3, pc, #404	; (adr r3, 8007c10 <_dtoa_r+0x2b8>)
 8007a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a80:	f7f8 fdd2 	bl	8000628 <__aeabi_dmul>
 8007a84:	a364      	add	r3, pc, #400	; (adr r3, 8007c18 <_dtoa_r+0x2c0>)
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	f7f8 fc17 	bl	80002bc <__adddf3>
 8007a8e:	4606      	mov	r6, r0
 8007a90:	4628      	mov	r0, r5
 8007a92:	460f      	mov	r7, r1
 8007a94:	f7f8 fd5e 	bl	8000554 <__aeabi_i2d>
 8007a98:	a361      	add	r3, pc, #388	; (adr r3, 8007c20 <_dtoa_r+0x2c8>)
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	f7f8 fdc3 	bl	8000628 <__aeabi_dmul>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	4639      	mov	r1, r7
 8007aaa:	f7f8 fc07 	bl	80002bc <__adddf3>
 8007aae:	4606      	mov	r6, r0
 8007ab0:	460f      	mov	r7, r1
 8007ab2:	f7f9 f869 	bl	8000b88 <__aeabi_d2iz>
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	9000      	str	r0, [sp, #0]
 8007aba:	2300      	movs	r3, #0
 8007abc:	4630      	mov	r0, r6
 8007abe:	4639      	mov	r1, r7
 8007ac0:	f7f9 f824 	bl	8000b0c <__aeabi_dcmplt>
 8007ac4:	b150      	cbz	r0, 8007adc <_dtoa_r+0x184>
 8007ac6:	9800      	ldr	r0, [sp, #0]
 8007ac8:	f7f8 fd44 	bl	8000554 <__aeabi_i2d>
 8007acc:	4632      	mov	r2, r6
 8007ace:	463b      	mov	r3, r7
 8007ad0:	f7f9 f812 	bl	8000af8 <__aeabi_dcmpeq>
 8007ad4:	b910      	cbnz	r0, 8007adc <_dtoa_r+0x184>
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	9b00      	ldr	r3, [sp, #0]
 8007ade:	2b16      	cmp	r3, #22
 8007ae0:	d85a      	bhi.n	8007b98 <_dtoa_r+0x240>
 8007ae2:	9a00      	ldr	r2, [sp, #0]
 8007ae4:	4b57      	ldr	r3, [pc, #348]	; (8007c44 <_dtoa_r+0x2ec>)
 8007ae6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	ec51 0b19 	vmov	r0, r1, d9
 8007af2:	f7f9 f80b 	bl	8000b0c <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d050      	beq.n	8007b9c <_dtoa_r+0x244>
 8007afa:	9b00      	ldr	r3, [sp, #0]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	2300      	movs	r3, #0
 8007b02:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b06:	1b5d      	subs	r5, r3, r5
 8007b08:	1e6b      	subs	r3, r5, #1
 8007b0a:	9305      	str	r3, [sp, #20]
 8007b0c:	bf45      	ittet	mi
 8007b0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007b12:	9304      	strmi	r3, [sp, #16]
 8007b14:	2300      	movpl	r3, #0
 8007b16:	2300      	movmi	r3, #0
 8007b18:	bf4c      	ite	mi
 8007b1a:	9305      	strmi	r3, [sp, #20]
 8007b1c:	9304      	strpl	r3, [sp, #16]
 8007b1e:	9b00      	ldr	r3, [sp, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	db3d      	blt.n	8007ba0 <_dtoa_r+0x248>
 8007b24:	9b05      	ldr	r3, [sp, #20]
 8007b26:	9a00      	ldr	r2, [sp, #0]
 8007b28:	920a      	str	r2, [sp, #40]	; 0x28
 8007b2a:	4413      	add	r3, r2
 8007b2c:	9305      	str	r3, [sp, #20]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9307      	str	r3, [sp, #28]
 8007b32:	9b06      	ldr	r3, [sp, #24]
 8007b34:	2b09      	cmp	r3, #9
 8007b36:	f200 8089 	bhi.w	8007c4c <_dtoa_r+0x2f4>
 8007b3a:	2b05      	cmp	r3, #5
 8007b3c:	bfc4      	itt	gt
 8007b3e:	3b04      	subgt	r3, #4
 8007b40:	9306      	strgt	r3, [sp, #24]
 8007b42:	9b06      	ldr	r3, [sp, #24]
 8007b44:	f1a3 0302 	sub.w	r3, r3, #2
 8007b48:	bfcc      	ite	gt
 8007b4a:	2500      	movgt	r5, #0
 8007b4c:	2501      	movle	r5, #1
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	f200 8087 	bhi.w	8007c62 <_dtoa_r+0x30a>
 8007b54:	e8df f003 	tbb	[pc, r3]
 8007b58:	59383a2d 	.word	0x59383a2d
 8007b5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007b60:	441d      	add	r5, r3
 8007b62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b66:	2b20      	cmp	r3, #32
 8007b68:	bfc1      	itttt	gt
 8007b6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b72:	fa0b f303 	lslgt.w	r3, fp, r3
 8007b76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007b7a:	bfda      	itte	le
 8007b7c:	f1c3 0320 	rsble	r3, r3, #32
 8007b80:	fa06 f003 	lslle.w	r0, r6, r3
 8007b84:	4318      	orrgt	r0, r3
 8007b86:	f7f8 fcd5 	bl	8000534 <__aeabi_ui2d>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007b92:	3d01      	subs	r5, #1
 8007b94:	930e      	str	r3, [sp, #56]	; 0x38
 8007b96:	e76a      	b.n	8007a6e <_dtoa_r+0x116>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e7b2      	b.n	8007b02 <_dtoa_r+0x1aa>
 8007b9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b9e:	e7b1      	b.n	8007b04 <_dtoa_r+0x1ac>
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	9a00      	ldr	r2, [sp, #0]
 8007ba4:	1a9b      	subs	r3, r3, r2
 8007ba6:	9304      	str	r3, [sp, #16]
 8007ba8:	4253      	negs	r3, r2
 8007baa:	9307      	str	r3, [sp, #28]
 8007bac:	2300      	movs	r3, #0
 8007bae:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb0:	e7bf      	b.n	8007b32 <_dtoa_r+0x1da>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9308      	str	r3, [sp, #32]
 8007bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	dc55      	bgt.n	8007c68 <_dtoa_r+0x310>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc6:	e00c      	b.n	8007be2 <_dtoa_r+0x28a>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e7f3      	b.n	8007bb4 <_dtoa_r+0x25c>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bd0:	9308      	str	r3, [sp, #32]
 8007bd2:	9b00      	ldr	r3, [sp, #0]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	9302      	str	r3, [sp, #8]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	9303      	str	r3, [sp, #12]
 8007bde:	bfb8      	it	lt
 8007be0:	2301      	movlt	r3, #1
 8007be2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007be4:	2200      	movs	r2, #0
 8007be6:	6042      	str	r2, [r0, #4]
 8007be8:	2204      	movs	r2, #4
 8007bea:	f102 0614 	add.w	r6, r2, #20
 8007bee:	429e      	cmp	r6, r3
 8007bf0:	6841      	ldr	r1, [r0, #4]
 8007bf2:	d93d      	bls.n	8007c70 <_dtoa_r+0x318>
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f000 fda3 	bl	8008740 <_Balloc>
 8007bfa:	9001      	str	r0, [sp, #4]
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d13b      	bne.n	8007c78 <_dtoa_r+0x320>
 8007c00:	4b11      	ldr	r3, [pc, #68]	; (8007c48 <_dtoa_r+0x2f0>)
 8007c02:	4602      	mov	r2, r0
 8007c04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c08:	e6c0      	b.n	800798c <_dtoa_r+0x34>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e7df      	b.n	8007bce <_dtoa_r+0x276>
 8007c0e:	bf00      	nop
 8007c10:	636f4361 	.word	0x636f4361
 8007c14:	3fd287a7 	.word	0x3fd287a7
 8007c18:	8b60c8b3 	.word	0x8b60c8b3
 8007c1c:	3fc68a28 	.word	0x3fc68a28
 8007c20:	509f79fb 	.word	0x509f79fb
 8007c24:	3fd34413 	.word	0x3fd34413
 8007c28:	08009ce6 	.word	0x08009ce6
 8007c2c:	08009cfd 	.word	0x08009cfd
 8007c30:	7ff00000 	.word	0x7ff00000
 8007c34:	08009ce2 	.word	0x08009ce2
 8007c38:	08009cd9 	.word	0x08009cd9
 8007c3c:	08009bb5 	.word	0x08009bb5
 8007c40:	3ff80000 	.word	0x3ff80000
 8007c44:	08009e50 	.word	0x08009e50
 8007c48:	08009d58 	.word	0x08009d58
 8007c4c:	2501      	movs	r5, #1
 8007c4e:	2300      	movs	r3, #0
 8007c50:	9306      	str	r3, [sp, #24]
 8007c52:	9508      	str	r5, [sp, #32]
 8007c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2312      	movs	r3, #18
 8007c60:	e7b0      	b.n	8007bc4 <_dtoa_r+0x26c>
 8007c62:	2301      	movs	r3, #1
 8007c64:	9308      	str	r3, [sp, #32]
 8007c66:	e7f5      	b.n	8007c54 <_dtoa_r+0x2fc>
 8007c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c6e:	e7b8      	b.n	8007be2 <_dtoa_r+0x28a>
 8007c70:	3101      	adds	r1, #1
 8007c72:	6041      	str	r1, [r0, #4]
 8007c74:	0052      	lsls	r2, r2, #1
 8007c76:	e7b8      	b.n	8007bea <_dtoa_r+0x292>
 8007c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c7a:	9a01      	ldr	r2, [sp, #4]
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	2b0e      	cmp	r3, #14
 8007c82:	f200 809d 	bhi.w	8007dc0 <_dtoa_r+0x468>
 8007c86:	2d00      	cmp	r5, #0
 8007c88:	f000 809a 	beq.w	8007dc0 <_dtoa_r+0x468>
 8007c8c:	9b00      	ldr	r3, [sp, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	dd32      	ble.n	8007cf8 <_dtoa_r+0x3a0>
 8007c92:	4ab7      	ldr	r2, [pc, #732]	; (8007f70 <_dtoa_r+0x618>)
 8007c94:	f003 030f 	and.w	r3, r3, #15
 8007c98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ca0:	9b00      	ldr	r3, [sp, #0]
 8007ca2:	05d8      	lsls	r0, r3, #23
 8007ca4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ca8:	d516      	bpl.n	8007cd8 <_dtoa_r+0x380>
 8007caa:	4bb2      	ldr	r3, [pc, #712]	; (8007f74 <_dtoa_r+0x61c>)
 8007cac:	ec51 0b19 	vmov	r0, r1, d9
 8007cb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cb4:	f7f8 fde2 	bl	800087c <__aeabi_ddiv>
 8007cb8:	f007 070f 	and.w	r7, r7, #15
 8007cbc:	4682      	mov	sl, r0
 8007cbe:	468b      	mov	fp, r1
 8007cc0:	2503      	movs	r5, #3
 8007cc2:	4eac      	ldr	r6, [pc, #688]	; (8007f74 <_dtoa_r+0x61c>)
 8007cc4:	b957      	cbnz	r7, 8007cdc <_dtoa_r+0x384>
 8007cc6:	4642      	mov	r2, r8
 8007cc8:	464b      	mov	r3, r9
 8007cca:	4650      	mov	r0, sl
 8007ccc:	4659      	mov	r1, fp
 8007cce:	f7f8 fdd5 	bl	800087c <__aeabi_ddiv>
 8007cd2:	4682      	mov	sl, r0
 8007cd4:	468b      	mov	fp, r1
 8007cd6:	e028      	b.n	8007d2a <_dtoa_r+0x3d2>
 8007cd8:	2502      	movs	r5, #2
 8007cda:	e7f2      	b.n	8007cc2 <_dtoa_r+0x36a>
 8007cdc:	07f9      	lsls	r1, r7, #31
 8007cde:	d508      	bpl.n	8007cf2 <_dtoa_r+0x39a>
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ce8:	f7f8 fc9e 	bl	8000628 <__aeabi_dmul>
 8007cec:	3501      	adds	r5, #1
 8007cee:	4680      	mov	r8, r0
 8007cf0:	4689      	mov	r9, r1
 8007cf2:	107f      	asrs	r7, r7, #1
 8007cf4:	3608      	adds	r6, #8
 8007cf6:	e7e5      	b.n	8007cc4 <_dtoa_r+0x36c>
 8007cf8:	f000 809b 	beq.w	8007e32 <_dtoa_r+0x4da>
 8007cfc:	9b00      	ldr	r3, [sp, #0]
 8007cfe:	4f9d      	ldr	r7, [pc, #628]	; (8007f74 <_dtoa_r+0x61c>)
 8007d00:	425e      	negs	r6, r3
 8007d02:	4b9b      	ldr	r3, [pc, #620]	; (8007f70 <_dtoa_r+0x618>)
 8007d04:	f006 020f 	and.w	r2, r6, #15
 8007d08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	ec51 0b19 	vmov	r0, r1, d9
 8007d14:	f7f8 fc88 	bl	8000628 <__aeabi_dmul>
 8007d18:	1136      	asrs	r6, r6, #4
 8007d1a:	4682      	mov	sl, r0
 8007d1c:	468b      	mov	fp, r1
 8007d1e:	2300      	movs	r3, #0
 8007d20:	2502      	movs	r5, #2
 8007d22:	2e00      	cmp	r6, #0
 8007d24:	d17a      	bne.n	8007e1c <_dtoa_r+0x4c4>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1d3      	bne.n	8007cd2 <_dtoa_r+0x37a>
 8007d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 8082 	beq.w	8007e36 <_dtoa_r+0x4de>
 8007d32:	4b91      	ldr	r3, [pc, #580]	; (8007f78 <_dtoa_r+0x620>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	4650      	mov	r0, sl
 8007d38:	4659      	mov	r1, fp
 8007d3a:	f7f8 fee7 	bl	8000b0c <__aeabi_dcmplt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d079      	beq.n	8007e36 <_dtoa_r+0x4de>
 8007d42:	9b03      	ldr	r3, [sp, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d076      	beq.n	8007e36 <_dtoa_r+0x4de>
 8007d48:	9b02      	ldr	r3, [sp, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dd36      	ble.n	8007dbc <_dtoa_r+0x464>
 8007d4e:	9b00      	ldr	r3, [sp, #0]
 8007d50:	4650      	mov	r0, sl
 8007d52:	4659      	mov	r1, fp
 8007d54:	1e5f      	subs	r7, r3, #1
 8007d56:	2200      	movs	r2, #0
 8007d58:	4b88      	ldr	r3, [pc, #544]	; (8007f7c <_dtoa_r+0x624>)
 8007d5a:	f7f8 fc65 	bl	8000628 <__aeabi_dmul>
 8007d5e:	9e02      	ldr	r6, [sp, #8]
 8007d60:	4682      	mov	sl, r0
 8007d62:	468b      	mov	fp, r1
 8007d64:	3501      	adds	r5, #1
 8007d66:	4628      	mov	r0, r5
 8007d68:	f7f8 fbf4 	bl	8000554 <__aeabi_i2d>
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	465b      	mov	r3, fp
 8007d70:	f7f8 fc5a 	bl	8000628 <__aeabi_dmul>
 8007d74:	4b82      	ldr	r3, [pc, #520]	; (8007f80 <_dtoa_r+0x628>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	f7f8 faa0 	bl	80002bc <__adddf3>
 8007d7c:	46d0      	mov	r8, sl
 8007d7e:	46d9      	mov	r9, fp
 8007d80:	4682      	mov	sl, r0
 8007d82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007d86:	2e00      	cmp	r6, #0
 8007d88:	d158      	bne.n	8007e3c <_dtoa_r+0x4e4>
 8007d8a:	4b7e      	ldr	r3, [pc, #504]	; (8007f84 <_dtoa_r+0x62c>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4640      	mov	r0, r8
 8007d90:	4649      	mov	r1, r9
 8007d92:	f7f8 fa91 	bl	80002b8 <__aeabi_dsub>
 8007d96:	4652      	mov	r2, sl
 8007d98:	465b      	mov	r3, fp
 8007d9a:	4680      	mov	r8, r0
 8007d9c:	4689      	mov	r9, r1
 8007d9e:	f7f8 fed3 	bl	8000b48 <__aeabi_dcmpgt>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	f040 8295 	bne.w	80082d2 <_dtoa_r+0x97a>
 8007da8:	4652      	mov	r2, sl
 8007daa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007dae:	4640      	mov	r0, r8
 8007db0:	4649      	mov	r1, r9
 8007db2:	f7f8 feab 	bl	8000b0c <__aeabi_dcmplt>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	f040 8289 	bne.w	80082ce <_dtoa_r+0x976>
 8007dbc:	ec5b ab19 	vmov	sl, fp, d9
 8007dc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f2c0 8148 	blt.w	8008058 <_dtoa_r+0x700>
 8007dc8:	9a00      	ldr	r2, [sp, #0]
 8007dca:	2a0e      	cmp	r2, #14
 8007dcc:	f300 8144 	bgt.w	8008058 <_dtoa_r+0x700>
 8007dd0:	4b67      	ldr	r3, [pc, #412]	; (8007f70 <_dtoa_r+0x618>)
 8007dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f280 80d5 	bge.w	8007f8c <_dtoa_r+0x634>
 8007de2:	9b03      	ldr	r3, [sp, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f300 80d1 	bgt.w	8007f8c <_dtoa_r+0x634>
 8007dea:	f040 826f 	bne.w	80082cc <_dtoa_r+0x974>
 8007dee:	4b65      	ldr	r3, [pc, #404]	; (8007f84 <_dtoa_r+0x62c>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	4640      	mov	r0, r8
 8007df4:	4649      	mov	r1, r9
 8007df6:	f7f8 fc17 	bl	8000628 <__aeabi_dmul>
 8007dfa:	4652      	mov	r2, sl
 8007dfc:	465b      	mov	r3, fp
 8007dfe:	f7f8 fe99 	bl	8000b34 <__aeabi_dcmpge>
 8007e02:	9e03      	ldr	r6, [sp, #12]
 8007e04:	4637      	mov	r7, r6
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f040 8245 	bne.w	8008296 <_dtoa_r+0x93e>
 8007e0c:	9d01      	ldr	r5, [sp, #4]
 8007e0e:	2331      	movs	r3, #49	; 0x31
 8007e10:	f805 3b01 	strb.w	r3, [r5], #1
 8007e14:	9b00      	ldr	r3, [sp, #0]
 8007e16:	3301      	adds	r3, #1
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	e240      	b.n	800829e <_dtoa_r+0x946>
 8007e1c:	07f2      	lsls	r2, r6, #31
 8007e1e:	d505      	bpl.n	8007e2c <_dtoa_r+0x4d4>
 8007e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e24:	f7f8 fc00 	bl	8000628 <__aeabi_dmul>
 8007e28:	3501      	adds	r5, #1
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	1076      	asrs	r6, r6, #1
 8007e2e:	3708      	adds	r7, #8
 8007e30:	e777      	b.n	8007d22 <_dtoa_r+0x3ca>
 8007e32:	2502      	movs	r5, #2
 8007e34:	e779      	b.n	8007d2a <_dtoa_r+0x3d2>
 8007e36:	9f00      	ldr	r7, [sp, #0]
 8007e38:	9e03      	ldr	r6, [sp, #12]
 8007e3a:	e794      	b.n	8007d66 <_dtoa_r+0x40e>
 8007e3c:	9901      	ldr	r1, [sp, #4]
 8007e3e:	4b4c      	ldr	r3, [pc, #304]	; (8007f70 <_dtoa_r+0x618>)
 8007e40:	4431      	add	r1, r6
 8007e42:	910d      	str	r1, [sp, #52]	; 0x34
 8007e44:	9908      	ldr	r1, [sp, #32]
 8007e46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e4e:	2900      	cmp	r1, #0
 8007e50:	d043      	beq.n	8007eda <_dtoa_r+0x582>
 8007e52:	494d      	ldr	r1, [pc, #308]	; (8007f88 <_dtoa_r+0x630>)
 8007e54:	2000      	movs	r0, #0
 8007e56:	f7f8 fd11 	bl	800087c <__aeabi_ddiv>
 8007e5a:	4652      	mov	r2, sl
 8007e5c:	465b      	mov	r3, fp
 8007e5e:	f7f8 fa2b 	bl	80002b8 <__aeabi_dsub>
 8007e62:	9d01      	ldr	r5, [sp, #4]
 8007e64:	4682      	mov	sl, r0
 8007e66:	468b      	mov	fp, r1
 8007e68:	4649      	mov	r1, r9
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	f7f8 fe8c 	bl	8000b88 <__aeabi_d2iz>
 8007e70:	4606      	mov	r6, r0
 8007e72:	f7f8 fb6f 	bl	8000554 <__aeabi_i2d>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	4649      	mov	r1, r9
 8007e7e:	f7f8 fa1b 	bl	80002b8 <__aeabi_dsub>
 8007e82:	3630      	adds	r6, #48	; 0x30
 8007e84:	f805 6b01 	strb.w	r6, [r5], #1
 8007e88:	4652      	mov	r2, sl
 8007e8a:	465b      	mov	r3, fp
 8007e8c:	4680      	mov	r8, r0
 8007e8e:	4689      	mov	r9, r1
 8007e90:	f7f8 fe3c 	bl	8000b0c <__aeabi_dcmplt>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d163      	bne.n	8007f60 <_dtoa_r+0x608>
 8007e98:	4642      	mov	r2, r8
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	4936      	ldr	r1, [pc, #216]	; (8007f78 <_dtoa_r+0x620>)
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	f7f8 fa0a 	bl	80002b8 <__aeabi_dsub>
 8007ea4:	4652      	mov	r2, sl
 8007ea6:	465b      	mov	r3, fp
 8007ea8:	f7f8 fe30 	bl	8000b0c <__aeabi_dcmplt>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	f040 80b5 	bne.w	800801c <_dtoa_r+0x6c4>
 8007eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eb4:	429d      	cmp	r5, r3
 8007eb6:	d081      	beq.n	8007dbc <_dtoa_r+0x464>
 8007eb8:	4b30      	ldr	r3, [pc, #192]	; (8007f7c <_dtoa_r+0x624>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	4650      	mov	r0, sl
 8007ebe:	4659      	mov	r1, fp
 8007ec0:	f7f8 fbb2 	bl	8000628 <__aeabi_dmul>
 8007ec4:	4b2d      	ldr	r3, [pc, #180]	; (8007f7c <_dtoa_r+0x624>)
 8007ec6:	4682      	mov	sl, r0
 8007ec8:	468b      	mov	fp, r1
 8007eca:	4640      	mov	r0, r8
 8007ecc:	4649      	mov	r1, r9
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f7f8 fbaa 	bl	8000628 <__aeabi_dmul>
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	4689      	mov	r9, r1
 8007ed8:	e7c6      	b.n	8007e68 <_dtoa_r+0x510>
 8007eda:	4650      	mov	r0, sl
 8007edc:	4659      	mov	r1, fp
 8007ede:	f7f8 fba3 	bl	8000628 <__aeabi_dmul>
 8007ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ee4:	9d01      	ldr	r5, [sp, #4]
 8007ee6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ee8:	4682      	mov	sl, r0
 8007eea:	468b      	mov	fp, r1
 8007eec:	4649      	mov	r1, r9
 8007eee:	4640      	mov	r0, r8
 8007ef0:	f7f8 fe4a 	bl	8000b88 <__aeabi_d2iz>
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	f7f8 fb2d 	bl	8000554 <__aeabi_i2d>
 8007efa:	3630      	adds	r6, #48	; 0x30
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4640      	mov	r0, r8
 8007f02:	4649      	mov	r1, r9
 8007f04:	f7f8 f9d8 	bl	80002b8 <__aeabi_dsub>
 8007f08:	f805 6b01 	strb.w	r6, [r5], #1
 8007f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f0e:	429d      	cmp	r5, r3
 8007f10:	4680      	mov	r8, r0
 8007f12:	4689      	mov	r9, r1
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	d124      	bne.n	8007f64 <_dtoa_r+0x60c>
 8007f1a:	4b1b      	ldr	r3, [pc, #108]	; (8007f88 <_dtoa_r+0x630>)
 8007f1c:	4650      	mov	r0, sl
 8007f1e:	4659      	mov	r1, fp
 8007f20:	f7f8 f9cc 	bl	80002bc <__adddf3>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 fe0c 	bl	8000b48 <__aeabi_dcmpgt>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d173      	bne.n	800801c <_dtoa_r+0x6c4>
 8007f34:	4652      	mov	r2, sl
 8007f36:	465b      	mov	r3, fp
 8007f38:	4913      	ldr	r1, [pc, #76]	; (8007f88 <_dtoa_r+0x630>)
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	f7f8 f9bc 	bl	80002b8 <__aeabi_dsub>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4640      	mov	r0, r8
 8007f46:	4649      	mov	r1, r9
 8007f48:	f7f8 fde0 	bl	8000b0c <__aeabi_dcmplt>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	f43f af35 	beq.w	8007dbc <_dtoa_r+0x464>
 8007f52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007f54:	1e6b      	subs	r3, r5, #1
 8007f56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f5c:	2b30      	cmp	r3, #48	; 0x30
 8007f5e:	d0f8      	beq.n	8007f52 <_dtoa_r+0x5fa>
 8007f60:	9700      	str	r7, [sp, #0]
 8007f62:	e049      	b.n	8007ff8 <_dtoa_r+0x6a0>
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <_dtoa_r+0x624>)
 8007f66:	f7f8 fb5f 	bl	8000628 <__aeabi_dmul>
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	4689      	mov	r9, r1
 8007f6e:	e7bd      	b.n	8007eec <_dtoa_r+0x594>
 8007f70:	08009e50 	.word	0x08009e50
 8007f74:	08009e28 	.word	0x08009e28
 8007f78:	3ff00000 	.word	0x3ff00000
 8007f7c:	40240000 	.word	0x40240000
 8007f80:	401c0000 	.word	0x401c0000
 8007f84:	40140000 	.word	0x40140000
 8007f88:	3fe00000 	.word	0x3fe00000
 8007f8c:	9d01      	ldr	r5, [sp, #4]
 8007f8e:	4656      	mov	r6, sl
 8007f90:	465f      	mov	r7, fp
 8007f92:	4642      	mov	r2, r8
 8007f94:	464b      	mov	r3, r9
 8007f96:	4630      	mov	r0, r6
 8007f98:	4639      	mov	r1, r7
 8007f9a:	f7f8 fc6f 	bl	800087c <__aeabi_ddiv>
 8007f9e:	f7f8 fdf3 	bl	8000b88 <__aeabi_d2iz>
 8007fa2:	4682      	mov	sl, r0
 8007fa4:	f7f8 fad6 	bl	8000554 <__aeabi_i2d>
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	f7f8 fb3c 	bl	8000628 <__aeabi_dmul>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007fbc:	f7f8 f97c 	bl	80002b8 <__aeabi_dsub>
 8007fc0:	f805 6b01 	strb.w	r6, [r5], #1
 8007fc4:	9e01      	ldr	r6, [sp, #4]
 8007fc6:	9f03      	ldr	r7, [sp, #12]
 8007fc8:	1bae      	subs	r6, r5, r6
 8007fca:	42b7      	cmp	r7, r6
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	d135      	bne.n	800803e <_dtoa_r+0x6e6>
 8007fd2:	f7f8 f973 	bl	80002bc <__adddf3>
 8007fd6:	4642      	mov	r2, r8
 8007fd8:	464b      	mov	r3, r9
 8007fda:	4606      	mov	r6, r0
 8007fdc:	460f      	mov	r7, r1
 8007fde:	f7f8 fdb3 	bl	8000b48 <__aeabi_dcmpgt>
 8007fe2:	b9d0      	cbnz	r0, 800801a <_dtoa_r+0x6c2>
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	4630      	mov	r0, r6
 8007fea:	4639      	mov	r1, r7
 8007fec:	f7f8 fd84 	bl	8000af8 <__aeabi_dcmpeq>
 8007ff0:	b110      	cbz	r0, 8007ff8 <_dtoa_r+0x6a0>
 8007ff2:	f01a 0f01 	tst.w	sl, #1
 8007ff6:	d110      	bne.n	800801a <_dtoa_r+0x6c2>
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	ee18 1a10 	vmov	r1, s16
 8007ffe:	f000 fbdf 	bl	80087c0 <_Bfree>
 8008002:	2300      	movs	r3, #0
 8008004:	9800      	ldr	r0, [sp, #0]
 8008006:	702b      	strb	r3, [r5, #0]
 8008008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800800a:	3001      	adds	r0, #1
 800800c:	6018      	str	r0, [r3, #0]
 800800e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008010:	2b00      	cmp	r3, #0
 8008012:	f43f acf1 	beq.w	80079f8 <_dtoa_r+0xa0>
 8008016:	601d      	str	r5, [r3, #0]
 8008018:	e4ee      	b.n	80079f8 <_dtoa_r+0xa0>
 800801a:	9f00      	ldr	r7, [sp, #0]
 800801c:	462b      	mov	r3, r5
 800801e:	461d      	mov	r5, r3
 8008020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008024:	2a39      	cmp	r2, #57	; 0x39
 8008026:	d106      	bne.n	8008036 <_dtoa_r+0x6de>
 8008028:	9a01      	ldr	r2, [sp, #4]
 800802a:	429a      	cmp	r2, r3
 800802c:	d1f7      	bne.n	800801e <_dtoa_r+0x6c6>
 800802e:	9901      	ldr	r1, [sp, #4]
 8008030:	2230      	movs	r2, #48	; 0x30
 8008032:	3701      	adds	r7, #1
 8008034:	700a      	strb	r2, [r1, #0]
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	3201      	adds	r2, #1
 800803a:	701a      	strb	r2, [r3, #0]
 800803c:	e790      	b.n	8007f60 <_dtoa_r+0x608>
 800803e:	4ba6      	ldr	r3, [pc, #664]	; (80082d8 <_dtoa_r+0x980>)
 8008040:	2200      	movs	r2, #0
 8008042:	f7f8 faf1 	bl	8000628 <__aeabi_dmul>
 8008046:	2200      	movs	r2, #0
 8008048:	2300      	movs	r3, #0
 800804a:	4606      	mov	r6, r0
 800804c:	460f      	mov	r7, r1
 800804e:	f7f8 fd53 	bl	8000af8 <__aeabi_dcmpeq>
 8008052:	2800      	cmp	r0, #0
 8008054:	d09d      	beq.n	8007f92 <_dtoa_r+0x63a>
 8008056:	e7cf      	b.n	8007ff8 <_dtoa_r+0x6a0>
 8008058:	9a08      	ldr	r2, [sp, #32]
 800805a:	2a00      	cmp	r2, #0
 800805c:	f000 80d7 	beq.w	800820e <_dtoa_r+0x8b6>
 8008060:	9a06      	ldr	r2, [sp, #24]
 8008062:	2a01      	cmp	r2, #1
 8008064:	f300 80ba 	bgt.w	80081dc <_dtoa_r+0x884>
 8008068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800806a:	2a00      	cmp	r2, #0
 800806c:	f000 80b2 	beq.w	80081d4 <_dtoa_r+0x87c>
 8008070:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008074:	9e07      	ldr	r6, [sp, #28]
 8008076:	9d04      	ldr	r5, [sp, #16]
 8008078:	9a04      	ldr	r2, [sp, #16]
 800807a:	441a      	add	r2, r3
 800807c:	9204      	str	r2, [sp, #16]
 800807e:	9a05      	ldr	r2, [sp, #20]
 8008080:	2101      	movs	r1, #1
 8008082:	441a      	add	r2, r3
 8008084:	4620      	mov	r0, r4
 8008086:	9205      	str	r2, [sp, #20]
 8008088:	f000 fc52 	bl	8008930 <__i2b>
 800808c:	4607      	mov	r7, r0
 800808e:	2d00      	cmp	r5, #0
 8008090:	dd0c      	ble.n	80080ac <_dtoa_r+0x754>
 8008092:	9b05      	ldr	r3, [sp, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	dd09      	ble.n	80080ac <_dtoa_r+0x754>
 8008098:	42ab      	cmp	r3, r5
 800809a:	9a04      	ldr	r2, [sp, #16]
 800809c:	bfa8      	it	ge
 800809e:	462b      	movge	r3, r5
 80080a0:	1ad2      	subs	r2, r2, r3
 80080a2:	9204      	str	r2, [sp, #16]
 80080a4:	9a05      	ldr	r2, [sp, #20]
 80080a6:	1aed      	subs	r5, r5, r3
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	9305      	str	r3, [sp, #20]
 80080ac:	9b07      	ldr	r3, [sp, #28]
 80080ae:	b31b      	cbz	r3, 80080f8 <_dtoa_r+0x7a0>
 80080b0:	9b08      	ldr	r3, [sp, #32]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 80af 	beq.w	8008216 <_dtoa_r+0x8be>
 80080b8:	2e00      	cmp	r6, #0
 80080ba:	dd13      	ble.n	80080e4 <_dtoa_r+0x78c>
 80080bc:	4639      	mov	r1, r7
 80080be:	4632      	mov	r2, r6
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 fcf5 	bl	8008ab0 <__pow5mult>
 80080c6:	ee18 2a10 	vmov	r2, s16
 80080ca:	4601      	mov	r1, r0
 80080cc:	4607      	mov	r7, r0
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 fc44 	bl	800895c <__multiply>
 80080d4:	ee18 1a10 	vmov	r1, s16
 80080d8:	4680      	mov	r8, r0
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fb70 	bl	80087c0 <_Bfree>
 80080e0:	ee08 8a10 	vmov	s16, r8
 80080e4:	9b07      	ldr	r3, [sp, #28]
 80080e6:	1b9a      	subs	r2, r3, r6
 80080e8:	d006      	beq.n	80080f8 <_dtoa_r+0x7a0>
 80080ea:	ee18 1a10 	vmov	r1, s16
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 fcde 	bl	8008ab0 <__pow5mult>
 80080f4:	ee08 0a10 	vmov	s16, r0
 80080f8:	2101      	movs	r1, #1
 80080fa:	4620      	mov	r0, r4
 80080fc:	f000 fc18 	bl	8008930 <__i2b>
 8008100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008102:	2b00      	cmp	r3, #0
 8008104:	4606      	mov	r6, r0
 8008106:	f340 8088 	ble.w	800821a <_dtoa_r+0x8c2>
 800810a:	461a      	mov	r2, r3
 800810c:	4601      	mov	r1, r0
 800810e:	4620      	mov	r0, r4
 8008110:	f000 fcce 	bl	8008ab0 <__pow5mult>
 8008114:	9b06      	ldr	r3, [sp, #24]
 8008116:	2b01      	cmp	r3, #1
 8008118:	4606      	mov	r6, r0
 800811a:	f340 8081 	ble.w	8008220 <_dtoa_r+0x8c8>
 800811e:	f04f 0800 	mov.w	r8, #0
 8008122:	6933      	ldr	r3, [r6, #16]
 8008124:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008128:	6918      	ldr	r0, [r3, #16]
 800812a:	f000 fbb1 	bl	8008890 <__hi0bits>
 800812e:	f1c0 0020 	rsb	r0, r0, #32
 8008132:	9b05      	ldr	r3, [sp, #20]
 8008134:	4418      	add	r0, r3
 8008136:	f010 001f 	ands.w	r0, r0, #31
 800813a:	f000 8092 	beq.w	8008262 <_dtoa_r+0x90a>
 800813e:	f1c0 0320 	rsb	r3, r0, #32
 8008142:	2b04      	cmp	r3, #4
 8008144:	f340 808a 	ble.w	800825c <_dtoa_r+0x904>
 8008148:	f1c0 001c 	rsb	r0, r0, #28
 800814c:	9b04      	ldr	r3, [sp, #16]
 800814e:	4403      	add	r3, r0
 8008150:	9304      	str	r3, [sp, #16]
 8008152:	9b05      	ldr	r3, [sp, #20]
 8008154:	4403      	add	r3, r0
 8008156:	4405      	add	r5, r0
 8008158:	9305      	str	r3, [sp, #20]
 800815a:	9b04      	ldr	r3, [sp, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	dd07      	ble.n	8008170 <_dtoa_r+0x818>
 8008160:	ee18 1a10 	vmov	r1, s16
 8008164:	461a      	mov	r2, r3
 8008166:	4620      	mov	r0, r4
 8008168:	f000 fcfc 	bl	8008b64 <__lshift>
 800816c:	ee08 0a10 	vmov	s16, r0
 8008170:	9b05      	ldr	r3, [sp, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	dd05      	ble.n	8008182 <_dtoa_r+0x82a>
 8008176:	4631      	mov	r1, r6
 8008178:	461a      	mov	r2, r3
 800817a:	4620      	mov	r0, r4
 800817c:	f000 fcf2 	bl	8008b64 <__lshift>
 8008180:	4606      	mov	r6, r0
 8008182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d06e      	beq.n	8008266 <_dtoa_r+0x90e>
 8008188:	ee18 0a10 	vmov	r0, s16
 800818c:	4631      	mov	r1, r6
 800818e:	f000 fd59 	bl	8008c44 <__mcmp>
 8008192:	2800      	cmp	r0, #0
 8008194:	da67      	bge.n	8008266 <_dtoa_r+0x90e>
 8008196:	9b00      	ldr	r3, [sp, #0]
 8008198:	3b01      	subs	r3, #1
 800819a:	ee18 1a10 	vmov	r1, s16
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	220a      	movs	r2, #10
 80081a2:	2300      	movs	r3, #0
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 fb2d 	bl	8008804 <__multadd>
 80081aa:	9b08      	ldr	r3, [sp, #32]
 80081ac:	ee08 0a10 	vmov	s16, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 81b1 	beq.w	8008518 <_dtoa_r+0xbc0>
 80081b6:	2300      	movs	r3, #0
 80081b8:	4639      	mov	r1, r7
 80081ba:	220a      	movs	r2, #10
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 fb21 	bl	8008804 <__multadd>
 80081c2:	9b02      	ldr	r3, [sp, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	4607      	mov	r7, r0
 80081c8:	f300 808e 	bgt.w	80082e8 <_dtoa_r+0x990>
 80081cc:	9b06      	ldr	r3, [sp, #24]
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	dc51      	bgt.n	8008276 <_dtoa_r+0x91e>
 80081d2:	e089      	b.n	80082e8 <_dtoa_r+0x990>
 80081d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80081da:	e74b      	b.n	8008074 <_dtoa_r+0x71c>
 80081dc:	9b03      	ldr	r3, [sp, #12]
 80081de:	1e5e      	subs	r6, r3, #1
 80081e0:	9b07      	ldr	r3, [sp, #28]
 80081e2:	42b3      	cmp	r3, r6
 80081e4:	bfbf      	itttt	lt
 80081e6:	9b07      	ldrlt	r3, [sp, #28]
 80081e8:	9607      	strlt	r6, [sp, #28]
 80081ea:	1af2      	sublt	r2, r6, r3
 80081ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80081ee:	bfb6      	itet	lt
 80081f0:	189b      	addlt	r3, r3, r2
 80081f2:	1b9e      	subge	r6, r3, r6
 80081f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	bfb8      	it	lt
 80081fa:	2600      	movlt	r6, #0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	bfb7      	itett	lt
 8008200:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008204:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008208:	1a9d      	sublt	r5, r3, r2
 800820a:	2300      	movlt	r3, #0
 800820c:	e734      	b.n	8008078 <_dtoa_r+0x720>
 800820e:	9e07      	ldr	r6, [sp, #28]
 8008210:	9d04      	ldr	r5, [sp, #16]
 8008212:	9f08      	ldr	r7, [sp, #32]
 8008214:	e73b      	b.n	800808e <_dtoa_r+0x736>
 8008216:	9a07      	ldr	r2, [sp, #28]
 8008218:	e767      	b.n	80080ea <_dtoa_r+0x792>
 800821a:	9b06      	ldr	r3, [sp, #24]
 800821c:	2b01      	cmp	r3, #1
 800821e:	dc18      	bgt.n	8008252 <_dtoa_r+0x8fa>
 8008220:	f1ba 0f00 	cmp.w	sl, #0
 8008224:	d115      	bne.n	8008252 <_dtoa_r+0x8fa>
 8008226:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800822a:	b993      	cbnz	r3, 8008252 <_dtoa_r+0x8fa>
 800822c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008230:	0d1b      	lsrs	r3, r3, #20
 8008232:	051b      	lsls	r3, r3, #20
 8008234:	b183      	cbz	r3, 8008258 <_dtoa_r+0x900>
 8008236:	9b04      	ldr	r3, [sp, #16]
 8008238:	3301      	adds	r3, #1
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	9b05      	ldr	r3, [sp, #20]
 800823e:	3301      	adds	r3, #1
 8008240:	9305      	str	r3, [sp, #20]
 8008242:	f04f 0801 	mov.w	r8, #1
 8008246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008248:	2b00      	cmp	r3, #0
 800824a:	f47f af6a 	bne.w	8008122 <_dtoa_r+0x7ca>
 800824e:	2001      	movs	r0, #1
 8008250:	e76f      	b.n	8008132 <_dtoa_r+0x7da>
 8008252:	f04f 0800 	mov.w	r8, #0
 8008256:	e7f6      	b.n	8008246 <_dtoa_r+0x8ee>
 8008258:	4698      	mov	r8, r3
 800825a:	e7f4      	b.n	8008246 <_dtoa_r+0x8ee>
 800825c:	f43f af7d 	beq.w	800815a <_dtoa_r+0x802>
 8008260:	4618      	mov	r0, r3
 8008262:	301c      	adds	r0, #28
 8008264:	e772      	b.n	800814c <_dtoa_r+0x7f4>
 8008266:	9b03      	ldr	r3, [sp, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	dc37      	bgt.n	80082dc <_dtoa_r+0x984>
 800826c:	9b06      	ldr	r3, [sp, #24]
 800826e:	2b02      	cmp	r3, #2
 8008270:	dd34      	ble.n	80082dc <_dtoa_r+0x984>
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	9302      	str	r3, [sp, #8]
 8008276:	9b02      	ldr	r3, [sp, #8]
 8008278:	b96b      	cbnz	r3, 8008296 <_dtoa_r+0x93e>
 800827a:	4631      	mov	r1, r6
 800827c:	2205      	movs	r2, #5
 800827e:	4620      	mov	r0, r4
 8008280:	f000 fac0 	bl	8008804 <__multadd>
 8008284:	4601      	mov	r1, r0
 8008286:	4606      	mov	r6, r0
 8008288:	ee18 0a10 	vmov	r0, s16
 800828c:	f000 fcda 	bl	8008c44 <__mcmp>
 8008290:	2800      	cmp	r0, #0
 8008292:	f73f adbb 	bgt.w	8007e0c <_dtoa_r+0x4b4>
 8008296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008298:	9d01      	ldr	r5, [sp, #4]
 800829a:	43db      	mvns	r3, r3
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	f04f 0800 	mov.w	r8, #0
 80082a2:	4631      	mov	r1, r6
 80082a4:	4620      	mov	r0, r4
 80082a6:	f000 fa8b 	bl	80087c0 <_Bfree>
 80082aa:	2f00      	cmp	r7, #0
 80082ac:	f43f aea4 	beq.w	8007ff8 <_dtoa_r+0x6a0>
 80082b0:	f1b8 0f00 	cmp.w	r8, #0
 80082b4:	d005      	beq.n	80082c2 <_dtoa_r+0x96a>
 80082b6:	45b8      	cmp	r8, r7
 80082b8:	d003      	beq.n	80082c2 <_dtoa_r+0x96a>
 80082ba:	4641      	mov	r1, r8
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fa7f 	bl	80087c0 <_Bfree>
 80082c2:	4639      	mov	r1, r7
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 fa7b 	bl	80087c0 <_Bfree>
 80082ca:	e695      	b.n	8007ff8 <_dtoa_r+0x6a0>
 80082cc:	2600      	movs	r6, #0
 80082ce:	4637      	mov	r7, r6
 80082d0:	e7e1      	b.n	8008296 <_dtoa_r+0x93e>
 80082d2:	9700      	str	r7, [sp, #0]
 80082d4:	4637      	mov	r7, r6
 80082d6:	e599      	b.n	8007e0c <_dtoa_r+0x4b4>
 80082d8:	40240000 	.word	0x40240000
 80082dc:	9b08      	ldr	r3, [sp, #32]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 80ca 	beq.w	8008478 <_dtoa_r+0xb20>
 80082e4:	9b03      	ldr	r3, [sp, #12]
 80082e6:	9302      	str	r3, [sp, #8]
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	dd05      	ble.n	80082f8 <_dtoa_r+0x9a0>
 80082ec:	4639      	mov	r1, r7
 80082ee:	462a      	mov	r2, r5
 80082f0:	4620      	mov	r0, r4
 80082f2:	f000 fc37 	bl	8008b64 <__lshift>
 80082f6:	4607      	mov	r7, r0
 80082f8:	f1b8 0f00 	cmp.w	r8, #0
 80082fc:	d05b      	beq.n	80083b6 <_dtoa_r+0xa5e>
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	4620      	mov	r0, r4
 8008302:	f000 fa1d 	bl	8008740 <_Balloc>
 8008306:	4605      	mov	r5, r0
 8008308:	b928      	cbnz	r0, 8008316 <_dtoa_r+0x9be>
 800830a:	4b87      	ldr	r3, [pc, #540]	; (8008528 <_dtoa_r+0xbd0>)
 800830c:	4602      	mov	r2, r0
 800830e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008312:	f7ff bb3b 	b.w	800798c <_dtoa_r+0x34>
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	3202      	adds	r2, #2
 800831a:	0092      	lsls	r2, r2, #2
 800831c:	f107 010c 	add.w	r1, r7, #12
 8008320:	300c      	adds	r0, #12
 8008322:	f7fe fc9b 	bl	8006c5c <memcpy>
 8008326:	2201      	movs	r2, #1
 8008328:	4629      	mov	r1, r5
 800832a:	4620      	mov	r0, r4
 800832c:	f000 fc1a 	bl	8008b64 <__lshift>
 8008330:	9b01      	ldr	r3, [sp, #4]
 8008332:	f103 0901 	add.w	r9, r3, #1
 8008336:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800833a:	4413      	add	r3, r2
 800833c:	9305      	str	r3, [sp, #20]
 800833e:	f00a 0301 	and.w	r3, sl, #1
 8008342:	46b8      	mov	r8, r7
 8008344:	9304      	str	r3, [sp, #16]
 8008346:	4607      	mov	r7, r0
 8008348:	4631      	mov	r1, r6
 800834a:	ee18 0a10 	vmov	r0, s16
 800834e:	f7ff fa77 	bl	8007840 <quorem>
 8008352:	4641      	mov	r1, r8
 8008354:	9002      	str	r0, [sp, #8]
 8008356:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800835a:	ee18 0a10 	vmov	r0, s16
 800835e:	f000 fc71 	bl	8008c44 <__mcmp>
 8008362:	463a      	mov	r2, r7
 8008364:	9003      	str	r0, [sp, #12]
 8008366:	4631      	mov	r1, r6
 8008368:	4620      	mov	r0, r4
 800836a:	f000 fc87 	bl	8008c7c <__mdiff>
 800836e:	68c2      	ldr	r2, [r0, #12]
 8008370:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008374:	4605      	mov	r5, r0
 8008376:	bb02      	cbnz	r2, 80083ba <_dtoa_r+0xa62>
 8008378:	4601      	mov	r1, r0
 800837a:	ee18 0a10 	vmov	r0, s16
 800837e:	f000 fc61 	bl	8008c44 <__mcmp>
 8008382:	4602      	mov	r2, r0
 8008384:	4629      	mov	r1, r5
 8008386:	4620      	mov	r0, r4
 8008388:	9207      	str	r2, [sp, #28]
 800838a:	f000 fa19 	bl	80087c0 <_Bfree>
 800838e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008392:	ea43 0102 	orr.w	r1, r3, r2
 8008396:	9b04      	ldr	r3, [sp, #16]
 8008398:	430b      	orrs	r3, r1
 800839a:	464d      	mov	r5, r9
 800839c:	d10f      	bne.n	80083be <_dtoa_r+0xa66>
 800839e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083a2:	d02a      	beq.n	80083fa <_dtoa_r+0xaa2>
 80083a4:	9b03      	ldr	r3, [sp, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	dd02      	ble.n	80083b0 <_dtoa_r+0xa58>
 80083aa:	9b02      	ldr	r3, [sp, #8]
 80083ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80083b0:	f88b a000 	strb.w	sl, [fp]
 80083b4:	e775      	b.n	80082a2 <_dtoa_r+0x94a>
 80083b6:	4638      	mov	r0, r7
 80083b8:	e7ba      	b.n	8008330 <_dtoa_r+0x9d8>
 80083ba:	2201      	movs	r2, #1
 80083bc:	e7e2      	b.n	8008384 <_dtoa_r+0xa2c>
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	db04      	blt.n	80083ce <_dtoa_r+0xa76>
 80083c4:	9906      	ldr	r1, [sp, #24]
 80083c6:	430b      	orrs	r3, r1
 80083c8:	9904      	ldr	r1, [sp, #16]
 80083ca:	430b      	orrs	r3, r1
 80083cc:	d122      	bne.n	8008414 <_dtoa_r+0xabc>
 80083ce:	2a00      	cmp	r2, #0
 80083d0:	ddee      	ble.n	80083b0 <_dtoa_r+0xa58>
 80083d2:	ee18 1a10 	vmov	r1, s16
 80083d6:	2201      	movs	r2, #1
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 fbc3 	bl	8008b64 <__lshift>
 80083de:	4631      	mov	r1, r6
 80083e0:	ee08 0a10 	vmov	s16, r0
 80083e4:	f000 fc2e 	bl	8008c44 <__mcmp>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	dc03      	bgt.n	80083f4 <_dtoa_r+0xa9c>
 80083ec:	d1e0      	bne.n	80083b0 <_dtoa_r+0xa58>
 80083ee:	f01a 0f01 	tst.w	sl, #1
 80083f2:	d0dd      	beq.n	80083b0 <_dtoa_r+0xa58>
 80083f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083f8:	d1d7      	bne.n	80083aa <_dtoa_r+0xa52>
 80083fa:	2339      	movs	r3, #57	; 0x39
 80083fc:	f88b 3000 	strb.w	r3, [fp]
 8008400:	462b      	mov	r3, r5
 8008402:	461d      	mov	r5, r3
 8008404:	3b01      	subs	r3, #1
 8008406:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800840a:	2a39      	cmp	r2, #57	; 0x39
 800840c:	d071      	beq.n	80084f2 <_dtoa_r+0xb9a>
 800840e:	3201      	adds	r2, #1
 8008410:	701a      	strb	r2, [r3, #0]
 8008412:	e746      	b.n	80082a2 <_dtoa_r+0x94a>
 8008414:	2a00      	cmp	r2, #0
 8008416:	dd07      	ble.n	8008428 <_dtoa_r+0xad0>
 8008418:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800841c:	d0ed      	beq.n	80083fa <_dtoa_r+0xaa2>
 800841e:	f10a 0301 	add.w	r3, sl, #1
 8008422:	f88b 3000 	strb.w	r3, [fp]
 8008426:	e73c      	b.n	80082a2 <_dtoa_r+0x94a>
 8008428:	9b05      	ldr	r3, [sp, #20]
 800842a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800842e:	4599      	cmp	r9, r3
 8008430:	d047      	beq.n	80084c2 <_dtoa_r+0xb6a>
 8008432:	ee18 1a10 	vmov	r1, s16
 8008436:	2300      	movs	r3, #0
 8008438:	220a      	movs	r2, #10
 800843a:	4620      	mov	r0, r4
 800843c:	f000 f9e2 	bl	8008804 <__multadd>
 8008440:	45b8      	cmp	r8, r7
 8008442:	ee08 0a10 	vmov	s16, r0
 8008446:	f04f 0300 	mov.w	r3, #0
 800844a:	f04f 020a 	mov.w	r2, #10
 800844e:	4641      	mov	r1, r8
 8008450:	4620      	mov	r0, r4
 8008452:	d106      	bne.n	8008462 <_dtoa_r+0xb0a>
 8008454:	f000 f9d6 	bl	8008804 <__multadd>
 8008458:	4680      	mov	r8, r0
 800845a:	4607      	mov	r7, r0
 800845c:	f109 0901 	add.w	r9, r9, #1
 8008460:	e772      	b.n	8008348 <_dtoa_r+0x9f0>
 8008462:	f000 f9cf 	bl	8008804 <__multadd>
 8008466:	4639      	mov	r1, r7
 8008468:	4680      	mov	r8, r0
 800846a:	2300      	movs	r3, #0
 800846c:	220a      	movs	r2, #10
 800846e:	4620      	mov	r0, r4
 8008470:	f000 f9c8 	bl	8008804 <__multadd>
 8008474:	4607      	mov	r7, r0
 8008476:	e7f1      	b.n	800845c <_dtoa_r+0xb04>
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	9302      	str	r3, [sp, #8]
 800847c:	9d01      	ldr	r5, [sp, #4]
 800847e:	ee18 0a10 	vmov	r0, s16
 8008482:	4631      	mov	r1, r6
 8008484:	f7ff f9dc 	bl	8007840 <quorem>
 8008488:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800848c:	9b01      	ldr	r3, [sp, #4]
 800848e:	f805 ab01 	strb.w	sl, [r5], #1
 8008492:	1aea      	subs	r2, r5, r3
 8008494:	9b02      	ldr	r3, [sp, #8]
 8008496:	4293      	cmp	r3, r2
 8008498:	dd09      	ble.n	80084ae <_dtoa_r+0xb56>
 800849a:	ee18 1a10 	vmov	r1, s16
 800849e:	2300      	movs	r3, #0
 80084a0:	220a      	movs	r2, #10
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 f9ae 	bl	8008804 <__multadd>
 80084a8:	ee08 0a10 	vmov	s16, r0
 80084ac:	e7e7      	b.n	800847e <_dtoa_r+0xb26>
 80084ae:	9b02      	ldr	r3, [sp, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	bfc8      	it	gt
 80084b4:	461d      	movgt	r5, r3
 80084b6:	9b01      	ldr	r3, [sp, #4]
 80084b8:	bfd8      	it	le
 80084ba:	2501      	movle	r5, #1
 80084bc:	441d      	add	r5, r3
 80084be:	f04f 0800 	mov.w	r8, #0
 80084c2:	ee18 1a10 	vmov	r1, s16
 80084c6:	2201      	movs	r2, #1
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fb4b 	bl	8008b64 <__lshift>
 80084ce:	4631      	mov	r1, r6
 80084d0:	ee08 0a10 	vmov	s16, r0
 80084d4:	f000 fbb6 	bl	8008c44 <__mcmp>
 80084d8:	2800      	cmp	r0, #0
 80084da:	dc91      	bgt.n	8008400 <_dtoa_r+0xaa8>
 80084dc:	d102      	bne.n	80084e4 <_dtoa_r+0xb8c>
 80084de:	f01a 0f01 	tst.w	sl, #1
 80084e2:	d18d      	bne.n	8008400 <_dtoa_r+0xaa8>
 80084e4:	462b      	mov	r3, r5
 80084e6:	461d      	mov	r5, r3
 80084e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084ec:	2a30      	cmp	r2, #48	; 0x30
 80084ee:	d0fa      	beq.n	80084e6 <_dtoa_r+0xb8e>
 80084f0:	e6d7      	b.n	80082a2 <_dtoa_r+0x94a>
 80084f2:	9a01      	ldr	r2, [sp, #4]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d184      	bne.n	8008402 <_dtoa_r+0xaaa>
 80084f8:	9b00      	ldr	r3, [sp, #0]
 80084fa:	3301      	adds	r3, #1
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	2331      	movs	r3, #49	; 0x31
 8008500:	7013      	strb	r3, [r2, #0]
 8008502:	e6ce      	b.n	80082a2 <_dtoa_r+0x94a>
 8008504:	4b09      	ldr	r3, [pc, #36]	; (800852c <_dtoa_r+0xbd4>)
 8008506:	f7ff ba95 	b.w	8007a34 <_dtoa_r+0xdc>
 800850a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800850c:	2b00      	cmp	r3, #0
 800850e:	f47f aa6e 	bne.w	80079ee <_dtoa_r+0x96>
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <_dtoa_r+0xbd8>)
 8008514:	f7ff ba8e 	b.w	8007a34 <_dtoa_r+0xdc>
 8008518:	9b02      	ldr	r3, [sp, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	dcae      	bgt.n	800847c <_dtoa_r+0xb24>
 800851e:	9b06      	ldr	r3, [sp, #24]
 8008520:	2b02      	cmp	r3, #2
 8008522:	f73f aea8 	bgt.w	8008276 <_dtoa_r+0x91e>
 8008526:	e7a9      	b.n	800847c <_dtoa_r+0xb24>
 8008528:	08009d58 	.word	0x08009d58
 800852c:	08009bb4 	.word	0x08009bb4
 8008530:	08009cd9 	.word	0x08009cd9

08008534 <std>:
 8008534:	2300      	movs	r3, #0
 8008536:	b510      	push	{r4, lr}
 8008538:	4604      	mov	r4, r0
 800853a:	e9c0 3300 	strd	r3, r3, [r0]
 800853e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008542:	6083      	str	r3, [r0, #8]
 8008544:	8181      	strh	r1, [r0, #12]
 8008546:	6643      	str	r3, [r0, #100]	; 0x64
 8008548:	81c2      	strh	r2, [r0, #14]
 800854a:	6183      	str	r3, [r0, #24]
 800854c:	4619      	mov	r1, r3
 800854e:	2208      	movs	r2, #8
 8008550:	305c      	adds	r0, #92	; 0x5c
 8008552:	f7fe fb91 	bl	8006c78 <memset>
 8008556:	4b05      	ldr	r3, [pc, #20]	; (800856c <std+0x38>)
 8008558:	6263      	str	r3, [r4, #36]	; 0x24
 800855a:	4b05      	ldr	r3, [pc, #20]	; (8008570 <std+0x3c>)
 800855c:	62a3      	str	r3, [r4, #40]	; 0x28
 800855e:	4b05      	ldr	r3, [pc, #20]	; (8008574 <std+0x40>)
 8008560:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008562:	4b05      	ldr	r3, [pc, #20]	; (8008578 <std+0x44>)
 8008564:	6224      	str	r4, [r4, #32]
 8008566:	6323      	str	r3, [r4, #48]	; 0x30
 8008568:	bd10      	pop	{r4, pc}
 800856a:	bf00      	nop
 800856c:	08009309 	.word	0x08009309
 8008570:	0800932b 	.word	0x0800932b
 8008574:	08009363 	.word	0x08009363
 8008578:	08009387 	.word	0x08009387

0800857c <_cleanup_r>:
 800857c:	4901      	ldr	r1, [pc, #4]	; (8008584 <_cleanup_r+0x8>)
 800857e:	f000 b8af 	b.w	80086e0 <_fwalk_reent>
 8008582:	bf00      	nop
 8008584:	0800969d 	.word	0x0800969d

08008588 <__sfmoreglue>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	2268      	movs	r2, #104	; 0x68
 800858c:	1e4d      	subs	r5, r1, #1
 800858e:	4355      	muls	r5, r2
 8008590:	460e      	mov	r6, r1
 8008592:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008596:	f000 fcd9 	bl	8008f4c <_malloc_r>
 800859a:	4604      	mov	r4, r0
 800859c:	b140      	cbz	r0, 80085b0 <__sfmoreglue+0x28>
 800859e:	2100      	movs	r1, #0
 80085a0:	e9c0 1600 	strd	r1, r6, [r0]
 80085a4:	300c      	adds	r0, #12
 80085a6:	60a0      	str	r0, [r4, #8]
 80085a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085ac:	f7fe fb64 	bl	8006c78 <memset>
 80085b0:	4620      	mov	r0, r4
 80085b2:	bd70      	pop	{r4, r5, r6, pc}

080085b4 <__sfp_lock_acquire>:
 80085b4:	4801      	ldr	r0, [pc, #4]	; (80085bc <__sfp_lock_acquire+0x8>)
 80085b6:	f000 b8b8 	b.w	800872a <__retarget_lock_acquire_recursive>
 80085ba:	bf00      	nop
 80085bc:	200008a5 	.word	0x200008a5

080085c0 <__sfp_lock_release>:
 80085c0:	4801      	ldr	r0, [pc, #4]	; (80085c8 <__sfp_lock_release+0x8>)
 80085c2:	f000 b8b3 	b.w	800872c <__retarget_lock_release_recursive>
 80085c6:	bf00      	nop
 80085c8:	200008a5 	.word	0x200008a5

080085cc <__sinit_lock_acquire>:
 80085cc:	4801      	ldr	r0, [pc, #4]	; (80085d4 <__sinit_lock_acquire+0x8>)
 80085ce:	f000 b8ac 	b.w	800872a <__retarget_lock_acquire_recursive>
 80085d2:	bf00      	nop
 80085d4:	200008a6 	.word	0x200008a6

080085d8 <__sinit_lock_release>:
 80085d8:	4801      	ldr	r0, [pc, #4]	; (80085e0 <__sinit_lock_release+0x8>)
 80085da:	f000 b8a7 	b.w	800872c <__retarget_lock_release_recursive>
 80085de:	bf00      	nop
 80085e0:	200008a6 	.word	0x200008a6

080085e4 <__sinit>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	4604      	mov	r4, r0
 80085e8:	f7ff fff0 	bl	80085cc <__sinit_lock_acquire>
 80085ec:	69a3      	ldr	r3, [r4, #24]
 80085ee:	b11b      	cbz	r3, 80085f8 <__sinit+0x14>
 80085f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f4:	f7ff bff0 	b.w	80085d8 <__sinit_lock_release>
 80085f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085fc:	6523      	str	r3, [r4, #80]	; 0x50
 80085fe:	4b13      	ldr	r3, [pc, #76]	; (800864c <__sinit+0x68>)
 8008600:	4a13      	ldr	r2, [pc, #76]	; (8008650 <__sinit+0x6c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	62a2      	str	r2, [r4, #40]	; 0x28
 8008606:	42a3      	cmp	r3, r4
 8008608:	bf04      	itt	eq
 800860a:	2301      	moveq	r3, #1
 800860c:	61a3      	streq	r3, [r4, #24]
 800860e:	4620      	mov	r0, r4
 8008610:	f000 f820 	bl	8008654 <__sfp>
 8008614:	6060      	str	r0, [r4, #4]
 8008616:	4620      	mov	r0, r4
 8008618:	f000 f81c 	bl	8008654 <__sfp>
 800861c:	60a0      	str	r0, [r4, #8]
 800861e:	4620      	mov	r0, r4
 8008620:	f000 f818 	bl	8008654 <__sfp>
 8008624:	2200      	movs	r2, #0
 8008626:	60e0      	str	r0, [r4, #12]
 8008628:	2104      	movs	r1, #4
 800862a:	6860      	ldr	r0, [r4, #4]
 800862c:	f7ff ff82 	bl	8008534 <std>
 8008630:	68a0      	ldr	r0, [r4, #8]
 8008632:	2201      	movs	r2, #1
 8008634:	2109      	movs	r1, #9
 8008636:	f7ff ff7d 	bl	8008534 <std>
 800863a:	68e0      	ldr	r0, [r4, #12]
 800863c:	2202      	movs	r2, #2
 800863e:	2112      	movs	r1, #18
 8008640:	f7ff ff78 	bl	8008534 <std>
 8008644:	2301      	movs	r3, #1
 8008646:	61a3      	str	r3, [r4, #24]
 8008648:	e7d2      	b.n	80085f0 <__sinit+0xc>
 800864a:	bf00      	nop
 800864c:	08009ba0 	.word	0x08009ba0
 8008650:	0800857d 	.word	0x0800857d

08008654 <__sfp>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	4607      	mov	r7, r0
 8008658:	f7ff ffac 	bl	80085b4 <__sfp_lock_acquire>
 800865c:	4b1e      	ldr	r3, [pc, #120]	; (80086d8 <__sfp+0x84>)
 800865e:	681e      	ldr	r6, [r3, #0]
 8008660:	69b3      	ldr	r3, [r6, #24]
 8008662:	b913      	cbnz	r3, 800866a <__sfp+0x16>
 8008664:	4630      	mov	r0, r6
 8008666:	f7ff ffbd 	bl	80085e4 <__sinit>
 800866a:	3648      	adds	r6, #72	; 0x48
 800866c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008670:	3b01      	subs	r3, #1
 8008672:	d503      	bpl.n	800867c <__sfp+0x28>
 8008674:	6833      	ldr	r3, [r6, #0]
 8008676:	b30b      	cbz	r3, 80086bc <__sfp+0x68>
 8008678:	6836      	ldr	r6, [r6, #0]
 800867a:	e7f7      	b.n	800866c <__sfp+0x18>
 800867c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008680:	b9d5      	cbnz	r5, 80086b8 <__sfp+0x64>
 8008682:	4b16      	ldr	r3, [pc, #88]	; (80086dc <__sfp+0x88>)
 8008684:	60e3      	str	r3, [r4, #12]
 8008686:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800868a:	6665      	str	r5, [r4, #100]	; 0x64
 800868c:	f000 f84c 	bl	8008728 <__retarget_lock_init_recursive>
 8008690:	f7ff ff96 	bl	80085c0 <__sfp_lock_release>
 8008694:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008698:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800869c:	6025      	str	r5, [r4, #0]
 800869e:	61a5      	str	r5, [r4, #24]
 80086a0:	2208      	movs	r2, #8
 80086a2:	4629      	mov	r1, r5
 80086a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086a8:	f7fe fae6 	bl	8006c78 <memset>
 80086ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086b4:	4620      	mov	r0, r4
 80086b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b8:	3468      	adds	r4, #104	; 0x68
 80086ba:	e7d9      	b.n	8008670 <__sfp+0x1c>
 80086bc:	2104      	movs	r1, #4
 80086be:	4638      	mov	r0, r7
 80086c0:	f7ff ff62 	bl	8008588 <__sfmoreglue>
 80086c4:	4604      	mov	r4, r0
 80086c6:	6030      	str	r0, [r6, #0]
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d1d5      	bne.n	8008678 <__sfp+0x24>
 80086cc:	f7ff ff78 	bl	80085c0 <__sfp_lock_release>
 80086d0:	230c      	movs	r3, #12
 80086d2:	603b      	str	r3, [r7, #0]
 80086d4:	e7ee      	b.n	80086b4 <__sfp+0x60>
 80086d6:	bf00      	nop
 80086d8:	08009ba0 	.word	0x08009ba0
 80086dc:	ffff0001 	.word	0xffff0001

080086e0 <_fwalk_reent>:
 80086e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e4:	4606      	mov	r6, r0
 80086e6:	4688      	mov	r8, r1
 80086e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086ec:	2700      	movs	r7, #0
 80086ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086f2:	f1b9 0901 	subs.w	r9, r9, #1
 80086f6:	d505      	bpl.n	8008704 <_fwalk_reent+0x24>
 80086f8:	6824      	ldr	r4, [r4, #0]
 80086fa:	2c00      	cmp	r4, #0
 80086fc:	d1f7      	bne.n	80086ee <_fwalk_reent+0xe>
 80086fe:	4638      	mov	r0, r7
 8008700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008704:	89ab      	ldrh	r3, [r5, #12]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d907      	bls.n	800871a <_fwalk_reent+0x3a>
 800870a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800870e:	3301      	adds	r3, #1
 8008710:	d003      	beq.n	800871a <_fwalk_reent+0x3a>
 8008712:	4629      	mov	r1, r5
 8008714:	4630      	mov	r0, r6
 8008716:	47c0      	blx	r8
 8008718:	4307      	orrs	r7, r0
 800871a:	3568      	adds	r5, #104	; 0x68
 800871c:	e7e9      	b.n	80086f2 <_fwalk_reent+0x12>
	...

08008720 <_localeconv_r>:
 8008720:	4800      	ldr	r0, [pc, #0]	; (8008724 <_localeconv_r+0x4>)
 8008722:	4770      	bx	lr
 8008724:	20000164 	.word	0x20000164

08008728 <__retarget_lock_init_recursive>:
 8008728:	4770      	bx	lr

0800872a <__retarget_lock_acquire_recursive>:
 800872a:	4770      	bx	lr

0800872c <__retarget_lock_release_recursive>:
 800872c:	4770      	bx	lr
	...

08008730 <malloc>:
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <malloc+0xc>)
 8008732:	4601      	mov	r1, r0
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	f000 bc09 	b.w	8008f4c <_malloc_r>
 800873a:	bf00      	nop
 800873c:	20000010 	.word	0x20000010

08008740 <_Balloc>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008744:	4604      	mov	r4, r0
 8008746:	460d      	mov	r5, r1
 8008748:	b976      	cbnz	r6, 8008768 <_Balloc+0x28>
 800874a:	2010      	movs	r0, #16
 800874c:	f7ff fff0 	bl	8008730 <malloc>
 8008750:	4602      	mov	r2, r0
 8008752:	6260      	str	r0, [r4, #36]	; 0x24
 8008754:	b920      	cbnz	r0, 8008760 <_Balloc+0x20>
 8008756:	4b18      	ldr	r3, [pc, #96]	; (80087b8 <_Balloc+0x78>)
 8008758:	4818      	ldr	r0, [pc, #96]	; (80087bc <_Balloc+0x7c>)
 800875a:	2166      	movs	r1, #102	; 0x66
 800875c:	f000 feea 	bl	8009534 <__assert_func>
 8008760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008764:	6006      	str	r6, [r0, #0]
 8008766:	60c6      	str	r6, [r0, #12]
 8008768:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800876a:	68f3      	ldr	r3, [r6, #12]
 800876c:	b183      	cbz	r3, 8008790 <_Balloc+0x50>
 800876e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008776:	b9b8      	cbnz	r0, 80087a8 <_Balloc+0x68>
 8008778:	2101      	movs	r1, #1
 800877a:	fa01 f605 	lsl.w	r6, r1, r5
 800877e:	1d72      	adds	r2, r6, #5
 8008780:	0092      	lsls	r2, r2, #2
 8008782:	4620      	mov	r0, r4
 8008784:	f000 fb60 	bl	8008e48 <_calloc_r>
 8008788:	b160      	cbz	r0, 80087a4 <_Balloc+0x64>
 800878a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800878e:	e00e      	b.n	80087ae <_Balloc+0x6e>
 8008790:	2221      	movs	r2, #33	; 0x21
 8008792:	2104      	movs	r1, #4
 8008794:	4620      	mov	r0, r4
 8008796:	f000 fb57 	bl	8008e48 <_calloc_r>
 800879a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800879c:	60f0      	str	r0, [r6, #12]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e4      	bne.n	800876e <_Balloc+0x2e>
 80087a4:	2000      	movs	r0, #0
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	6802      	ldr	r2, [r0, #0]
 80087aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087ae:	2300      	movs	r3, #0
 80087b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087b4:	e7f7      	b.n	80087a6 <_Balloc+0x66>
 80087b6:	bf00      	nop
 80087b8:	08009ce6 	.word	0x08009ce6
 80087bc:	08009dcc 	.word	0x08009dcc

080087c0 <_Bfree>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087c4:	4605      	mov	r5, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	b976      	cbnz	r6, 80087e8 <_Bfree+0x28>
 80087ca:	2010      	movs	r0, #16
 80087cc:	f7ff ffb0 	bl	8008730 <malloc>
 80087d0:	4602      	mov	r2, r0
 80087d2:	6268      	str	r0, [r5, #36]	; 0x24
 80087d4:	b920      	cbnz	r0, 80087e0 <_Bfree+0x20>
 80087d6:	4b09      	ldr	r3, [pc, #36]	; (80087fc <_Bfree+0x3c>)
 80087d8:	4809      	ldr	r0, [pc, #36]	; (8008800 <_Bfree+0x40>)
 80087da:	218a      	movs	r1, #138	; 0x8a
 80087dc:	f000 feaa 	bl	8009534 <__assert_func>
 80087e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087e4:	6006      	str	r6, [r0, #0]
 80087e6:	60c6      	str	r6, [r0, #12]
 80087e8:	b13c      	cbz	r4, 80087fa <_Bfree+0x3a>
 80087ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087ec:	6862      	ldr	r2, [r4, #4]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087f4:	6021      	str	r1, [r4, #0]
 80087f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	08009ce6 	.word	0x08009ce6
 8008800:	08009dcc 	.word	0x08009dcc

08008804 <__multadd>:
 8008804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008808:	690d      	ldr	r5, [r1, #16]
 800880a:	4607      	mov	r7, r0
 800880c:	460c      	mov	r4, r1
 800880e:	461e      	mov	r6, r3
 8008810:	f101 0c14 	add.w	ip, r1, #20
 8008814:	2000      	movs	r0, #0
 8008816:	f8dc 3000 	ldr.w	r3, [ip]
 800881a:	b299      	uxth	r1, r3
 800881c:	fb02 6101 	mla	r1, r2, r1, r6
 8008820:	0c1e      	lsrs	r6, r3, #16
 8008822:	0c0b      	lsrs	r3, r1, #16
 8008824:	fb02 3306 	mla	r3, r2, r6, r3
 8008828:	b289      	uxth	r1, r1
 800882a:	3001      	adds	r0, #1
 800882c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008830:	4285      	cmp	r5, r0
 8008832:	f84c 1b04 	str.w	r1, [ip], #4
 8008836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800883a:	dcec      	bgt.n	8008816 <__multadd+0x12>
 800883c:	b30e      	cbz	r6, 8008882 <__multadd+0x7e>
 800883e:	68a3      	ldr	r3, [r4, #8]
 8008840:	42ab      	cmp	r3, r5
 8008842:	dc19      	bgt.n	8008878 <__multadd+0x74>
 8008844:	6861      	ldr	r1, [r4, #4]
 8008846:	4638      	mov	r0, r7
 8008848:	3101      	adds	r1, #1
 800884a:	f7ff ff79 	bl	8008740 <_Balloc>
 800884e:	4680      	mov	r8, r0
 8008850:	b928      	cbnz	r0, 800885e <__multadd+0x5a>
 8008852:	4602      	mov	r2, r0
 8008854:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <__multadd+0x84>)
 8008856:	480d      	ldr	r0, [pc, #52]	; (800888c <__multadd+0x88>)
 8008858:	21b5      	movs	r1, #181	; 0xb5
 800885a:	f000 fe6b 	bl	8009534 <__assert_func>
 800885e:	6922      	ldr	r2, [r4, #16]
 8008860:	3202      	adds	r2, #2
 8008862:	f104 010c 	add.w	r1, r4, #12
 8008866:	0092      	lsls	r2, r2, #2
 8008868:	300c      	adds	r0, #12
 800886a:	f7fe f9f7 	bl	8006c5c <memcpy>
 800886e:	4621      	mov	r1, r4
 8008870:	4638      	mov	r0, r7
 8008872:	f7ff ffa5 	bl	80087c0 <_Bfree>
 8008876:	4644      	mov	r4, r8
 8008878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800887c:	3501      	adds	r5, #1
 800887e:	615e      	str	r6, [r3, #20]
 8008880:	6125      	str	r5, [r4, #16]
 8008882:	4620      	mov	r0, r4
 8008884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008888:	08009d58 	.word	0x08009d58
 800888c:	08009dcc 	.word	0x08009dcc

08008890 <__hi0bits>:
 8008890:	0c03      	lsrs	r3, r0, #16
 8008892:	041b      	lsls	r3, r3, #16
 8008894:	b9d3      	cbnz	r3, 80088cc <__hi0bits+0x3c>
 8008896:	0400      	lsls	r0, r0, #16
 8008898:	2310      	movs	r3, #16
 800889a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800889e:	bf04      	itt	eq
 80088a0:	0200      	lsleq	r0, r0, #8
 80088a2:	3308      	addeq	r3, #8
 80088a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088a8:	bf04      	itt	eq
 80088aa:	0100      	lsleq	r0, r0, #4
 80088ac:	3304      	addeq	r3, #4
 80088ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088b2:	bf04      	itt	eq
 80088b4:	0080      	lsleq	r0, r0, #2
 80088b6:	3302      	addeq	r3, #2
 80088b8:	2800      	cmp	r0, #0
 80088ba:	db05      	blt.n	80088c8 <__hi0bits+0x38>
 80088bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088c0:	f103 0301 	add.w	r3, r3, #1
 80088c4:	bf08      	it	eq
 80088c6:	2320      	moveq	r3, #32
 80088c8:	4618      	mov	r0, r3
 80088ca:	4770      	bx	lr
 80088cc:	2300      	movs	r3, #0
 80088ce:	e7e4      	b.n	800889a <__hi0bits+0xa>

080088d0 <__lo0bits>:
 80088d0:	6803      	ldr	r3, [r0, #0]
 80088d2:	f013 0207 	ands.w	r2, r3, #7
 80088d6:	4601      	mov	r1, r0
 80088d8:	d00b      	beq.n	80088f2 <__lo0bits+0x22>
 80088da:	07da      	lsls	r2, r3, #31
 80088dc:	d423      	bmi.n	8008926 <__lo0bits+0x56>
 80088de:	0798      	lsls	r0, r3, #30
 80088e0:	bf49      	itett	mi
 80088e2:	085b      	lsrmi	r3, r3, #1
 80088e4:	089b      	lsrpl	r3, r3, #2
 80088e6:	2001      	movmi	r0, #1
 80088e8:	600b      	strmi	r3, [r1, #0]
 80088ea:	bf5c      	itt	pl
 80088ec:	600b      	strpl	r3, [r1, #0]
 80088ee:	2002      	movpl	r0, #2
 80088f0:	4770      	bx	lr
 80088f2:	b298      	uxth	r0, r3
 80088f4:	b9a8      	cbnz	r0, 8008922 <__lo0bits+0x52>
 80088f6:	0c1b      	lsrs	r3, r3, #16
 80088f8:	2010      	movs	r0, #16
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	b90a      	cbnz	r2, 8008902 <__lo0bits+0x32>
 80088fe:	3008      	adds	r0, #8
 8008900:	0a1b      	lsrs	r3, r3, #8
 8008902:	071a      	lsls	r2, r3, #28
 8008904:	bf04      	itt	eq
 8008906:	091b      	lsreq	r3, r3, #4
 8008908:	3004      	addeq	r0, #4
 800890a:	079a      	lsls	r2, r3, #30
 800890c:	bf04      	itt	eq
 800890e:	089b      	lsreq	r3, r3, #2
 8008910:	3002      	addeq	r0, #2
 8008912:	07da      	lsls	r2, r3, #31
 8008914:	d403      	bmi.n	800891e <__lo0bits+0x4e>
 8008916:	085b      	lsrs	r3, r3, #1
 8008918:	f100 0001 	add.w	r0, r0, #1
 800891c:	d005      	beq.n	800892a <__lo0bits+0x5a>
 800891e:	600b      	str	r3, [r1, #0]
 8008920:	4770      	bx	lr
 8008922:	4610      	mov	r0, r2
 8008924:	e7e9      	b.n	80088fa <__lo0bits+0x2a>
 8008926:	2000      	movs	r0, #0
 8008928:	4770      	bx	lr
 800892a:	2020      	movs	r0, #32
 800892c:	4770      	bx	lr
	...

08008930 <__i2b>:
 8008930:	b510      	push	{r4, lr}
 8008932:	460c      	mov	r4, r1
 8008934:	2101      	movs	r1, #1
 8008936:	f7ff ff03 	bl	8008740 <_Balloc>
 800893a:	4602      	mov	r2, r0
 800893c:	b928      	cbnz	r0, 800894a <__i2b+0x1a>
 800893e:	4b05      	ldr	r3, [pc, #20]	; (8008954 <__i2b+0x24>)
 8008940:	4805      	ldr	r0, [pc, #20]	; (8008958 <__i2b+0x28>)
 8008942:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008946:	f000 fdf5 	bl	8009534 <__assert_func>
 800894a:	2301      	movs	r3, #1
 800894c:	6144      	str	r4, [r0, #20]
 800894e:	6103      	str	r3, [r0, #16]
 8008950:	bd10      	pop	{r4, pc}
 8008952:	bf00      	nop
 8008954:	08009d58 	.word	0x08009d58
 8008958:	08009dcc 	.word	0x08009dcc

0800895c <__multiply>:
 800895c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008960:	4691      	mov	r9, r2
 8008962:	690a      	ldr	r2, [r1, #16]
 8008964:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008968:	429a      	cmp	r2, r3
 800896a:	bfb8      	it	lt
 800896c:	460b      	movlt	r3, r1
 800896e:	460c      	mov	r4, r1
 8008970:	bfbc      	itt	lt
 8008972:	464c      	movlt	r4, r9
 8008974:	4699      	movlt	r9, r3
 8008976:	6927      	ldr	r7, [r4, #16]
 8008978:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800897c:	68a3      	ldr	r3, [r4, #8]
 800897e:	6861      	ldr	r1, [r4, #4]
 8008980:	eb07 060a 	add.w	r6, r7, sl
 8008984:	42b3      	cmp	r3, r6
 8008986:	b085      	sub	sp, #20
 8008988:	bfb8      	it	lt
 800898a:	3101      	addlt	r1, #1
 800898c:	f7ff fed8 	bl	8008740 <_Balloc>
 8008990:	b930      	cbnz	r0, 80089a0 <__multiply+0x44>
 8008992:	4602      	mov	r2, r0
 8008994:	4b44      	ldr	r3, [pc, #272]	; (8008aa8 <__multiply+0x14c>)
 8008996:	4845      	ldr	r0, [pc, #276]	; (8008aac <__multiply+0x150>)
 8008998:	f240 115d 	movw	r1, #349	; 0x15d
 800899c:	f000 fdca 	bl	8009534 <__assert_func>
 80089a0:	f100 0514 	add.w	r5, r0, #20
 80089a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089a8:	462b      	mov	r3, r5
 80089aa:	2200      	movs	r2, #0
 80089ac:	4543      	cmp	r3, r8
 80089ae:	d321      	bcc.n	80089f4 <__multiply+0x98>
 80089b0:	f104 0314 	add.w	r3, r4, #20
 80089b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80089b8:	f109 0314 	add.w	r3, r9, #20
 80089bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80089c0:	9202      	str	r2, [sp, #8]
 80089c2:	1b3a      	subs	r2, r7, r4
 80089c4:	3a15      	subs	r2, #21
 80089c6:	f022 0203 	bic.w	r2, r2, #3
 80089ca:	3204      	adds	r2, #4
 80089cc:	f104 0115 	add.w	r1, r4, #21
 80089d0:	428f      	cmp	r7, r1
 80089d2:	bf38      	it	cc
 80089d4:	2204      	movcc	r2, #4
 80089d6:	9201      	str	r2, [sp, #4]
 80089d8:	9a02      	ldr	r2, [sp, #8]
 80089da:	9303      	str	r3, [sp, #12]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d80c      	bhi.n	80089fa <__multiply+0x9e>
 80089e0:	2e00      	cmp	r6, #0
 80089e2:	dd03      	ble.n	80089ec <__multiply+0x90>
 80089e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d05a      	beq.n	8008aa2 <__multiply+0x146>
 80089ec:	6106      	str	r6, [r0, #16]
 80089ee:	b005      	add	sp, #20
 80089f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f4:	f843 2b04 	str.w	r2, [r3], #4
 80089f8:	e7d8      	b.n	80089ac <__multiply+0x50>
 80089fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80089fe:	f1ba 0f00 	cmp.w	sl, #0
 8008a02:	d024      	beq.n	8008a4e <__multiply+0xf2>
 8008a04:	f104 0e14 	add.w	lr, r4, #20
 8008a08:	46a9      	mov	r9, r5
 8008a0a:	f04f 0c00 	mov.w	ip, #0
 8008a0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a12:	f8d9 1000 	ldr.w	r1, [r9]
 8008a16:	fa1f fb82 	uxth.w	fp, r2
 8008a1a:	b289      	uxth	r1, r1
 8008a1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a24:	f8d9 2000 	ldr.w	r2, [r9]
 8008a28:	4461      	add	r1, ip
 8008a2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a36:	b289      	uxth	r1, r1
 8008a38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a3c:	4577      	cmp	r7, lr
 8008a3e:	f849 1b04 	str.w	r1, [r9], #4
 8008a42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a46:	d8e2      	bhi.n	8008a0e <__multiply+0xb2>
 8008a48:	9a01      	ldr	r2, [sp, #4]
 8008a4a:	f845 c002 	str.w	ip, [r5, r2]
 8008a4e:	9a03      	ldr	r2, [sp, #12]
 8008a50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a54:	3304      	adds	r3, #4
 8008a56:	f1b9 0f00 	cmp.w	r9, #0
 8008a5a:	d020      	beq.n	8008a9e <__multiply+0x142>
 8008a5c:	6829      	ldr	r1, [r5, #0]
 8008a5e:	f104 0c14 	add.w	ip, r4, #20
 8008a62:	46ae      	mov	lr, r5
 8008a64:	f04f 0a00 	mov.w	sl, #0
 8008a68:	f8bc b000 	ldrh.w	fp, [ip]
 8008a6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a70:	fb09 220b 	mla	r2, r9, fp, r2
 8008a74:	4492      	add	sl, r2
 8008a76:	b289      	uxth	r1, r1
 8008a78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a7c:	f84e 1b04 	str.w	r1, [lr], #4
 8008a80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a84:	f8be 1000 	ldrh.w	r1, [lr]
 8008a88:	0c12      	lsrs	r2, r2, #16
 8008a8a:	fb09 1102 	mla	r1, r9, r2, r1
 8008a8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a92:	4567      	cmp	r7, ip
 8008a94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a98:	d8e6      	bhi.n	8008a68 <__multiply+0x10c>
 8008a9a:	9a01      	ldr	r2, [sp, #4]
 8008a9c:	50a9      	str	r1, [r5, r2]
 8008a9e:	3504      	adds	r5, #4
 8008aa0:	e79a      	b.n	80089d8 <__multiply+0x7c>
 8008aa2:	3e01      	subs	r6, #1
 8008aa4:	e79c      	b.n	80089e0 <__multiply+0x84>
 8008aa6:	bf00      	nop
 8008aa8:	08009d58 	.word	0x08009d58
 8008aac:	08009dcc 	.word	0x08009dcc

08008ab0 <__pow5mult>:
 8008ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ab4:	4615      	mov	r5, r2
 8008ab6:	f012 0203 	ands.w	r2, r2, #3
 8008aba:	4606      	mov	r6, r0
 8008abc:	460f      	mov	r7, r1
 8008abe:	d007      	beq.n	8008ad0 <__pow5mult+0x20>
 8008ac0:	4c25      	ldr	r4, [pc, #148]	; (8008b58 <__pow5mult+0xa8>)
 8008ac2:	3a01      	subs	r2, #1
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008aca:	f7ff fe9b 	bl	8008804 <__multadd>
 8008ace:	4607      	mov	r7, r0
 8008ad0:	10ad      	asrs	r5, r5, #2
 8008ad2:	d03d      	beq.n	8008b50 <__pow5mult+0xa0>
 8008ad4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ad6:	b97c      	cbnz	r4, 8008af8 <__pow5mult+0x48>
 8008ad8:	2010      	movs	r0, #16
 8008ada:	f7ff fe29 	bl	8008730 <malloc>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6270      	str	r0, [r6, #36]	; 0x24
 8008ae2:	b928      	cbnz	r0, 8008af0 <__pow5mult+0x40>
 8008ae4:	4b1d      	ldr	r3, [pc, #116]	; (8008b5c <__pow5mult+0xac>)
 8008ae6:	481e      	ldr	r0, [pc, #120]	; (8008b60 <__pow5mult+0xb0>)
 8008ae8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008aec:	f000 fd22 	bl	8009534 <__assert_func>
 8008af0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008af4:	6004      	str	r4, [r0, #0]
 8008af6:	60c4      	str	r4, [r0, #12]
 8008af8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008afc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b00:	b94c      	cbnz	r4, 8008b16 <__pow5mult+0x66>
 8008b02:	f240 2171 	movw	r1, #625	; 0x271
 8008b06:	4630      	mov	r0, r6
 8008b08:	f7ff ff12 	bl	8008930 <__i2b>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b12:	4604      	mov	r4, r0
 8008b14:	6003      	str	r3, [r0, #0]
 8008b16:	f04f 0900 	mov.w	r9, #0
 8008b1a:	07eb      	lsls	r3, r5, #31
 8008b1c:	d50a      	bpl.n	8008b34 <__pow5mult+0x84>
 8008b1e:	4639      	mov	r1, r7
 8008b20:	4622      	mov	r2, r4
 8008b22:	4630      	mov	r0, r6
 8008b24:	f7ff ff1a 	bl	800895c <__multiply>
 8008b28:	4639      	mov	r1, r7
 8008b2a:	4680      	mov	r8, r0
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f7ff fe47 	bl	80087c0 <_Bfree>
 8008b32:	4647      	mov	r7, r8
 8008b34:	106d      	asrs	r5, r5, #1
 8008b36:	d00b      	beq.n	8008b50 <__pow5mult+0xa0>
 8008b38:	6820      	ldr	r0, [r4, #0]
 8008b3a:	b938      	cbnz	r0, 8008b4c <__pow5mult+0x9c>
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4630      	mov	r0, r6
 8008b42:	f7ff ff0b 	bl	800895c <__multiply>
 8008b46:	6020      	str	r0, [r4, #0]
 8008b48:	f8c0 9000 	str.w	r9, [r0]
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	e7e4      	b.n	8008b1a <__pow5mult+0x6a>
 8008b50:	4638      	mov	r0, r7
 8008b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b56:	bf00      	nop
 8008b58:	08009f18 	.word	0x08009f18
 8008b5c:	08009ce6 	.word	0x08009ce6
 8008b60:	08009dcc 	.word	0x08009dcc

08008b64 <__lshift>:
 8008b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b68:	460c      	mov	r4, r1
 8008b6a:	6849      	ldr	r1, [r1, #4]
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b72:	68a3      	ldr	r3, [r4, #8]
 8008b74:	4607      	mov	r7, r0
 8008b76:	4691      	mov	r9, r2
 8008b78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b7c:	f108 0601 	add.w	r6, r8, #1
 8008b80:	42b3      	cmp	r3, r6
 8008b82:	db0b      	blt.n	8008b9c <__lshift+0x38>
 8008b84:	4638      	mov	r0, r7
 8008b86:	f7ff fddb 	bl	8008740 <_Balloc>
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	b948      	cbnz	r0, 8008ba2 <__lshift+0x3e>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	4b2a      	ldr	r3, [pc, #168]	; (8008c3c <__lshift+0xd8>)
 8008b92:	482b      	ldr	r0, [pc, #172]	; (8008c40 <__lshift+0xdc>)
 8008b94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b98:	f000 fccc 	bl	8009534 <__assert_func>
 8008b9c:	3101      	adds	r1, #1
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	e7ee      	b.n	8008b80 <__lshift+0x1c>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f100 0114 	add.w	r1, r0, #20
 8008ba8:	f100 0210 	add.w	r2, r0, #16
 8008bac:	4618      	mov	r0, r3
 8008bae:	4553      	cmp	r3, sl
 8008bb0:	db37      	blt.n	8008c22 <__lshift+0xbe>
 8008bb2:	6920      	ldr	r0, [r4, #16]
 8008bb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bb8:	f104 0314 	add.w	r3, r4, #20
 8008bbc:	f019 091f 	ands.w	r9, r9, #31
 8008bc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008bc8:	d02f      	beq.n	8008c2a <__lshift+0xc6>
 8008bca:	f1c9 0e20 	rsb	lr, r9, #32
 8008bce:	468a      	mov	sl, r1
 8008bd0:	f04f 0c00 	mov.w	ip, #0
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	fa02 f209 	lsl.w	r2, r2, r9
 8008bda:	ea42 020c 	orr.w	r2, r2, ip
 8008bde:	f84a 2b04 	str.w	r2, [sl], #4
 8008be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be6:	4298      	cmp	r0, r3
 8008be8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008bec:	d8f2      	bhi.n	8008bd4 <__lshift+0x70>
 8008bee:	1b03      	subs	r3, r0, r4
 8008bf0:	3b15      	subs	r3, #21
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	f104 0215 	add.w	r2, r4, #21
 8008bfc:	4290      	cmp	r0, r2
 8008bfe:	bf38      	it	cc
 8008c00:	2304      	movcc	r3, #4
 8008c02:	f841 c003 	str.w	ip, [r1, r3]
 8008c06:	f1bc 0f00 	cmp.w	ip, #0
 8008c0a:	d001      	beq.n	8008c10 <__lshift+0xac>
 8008c0c:	f108 0602 	add.w	r6, r8, #2
 8008c10:	3e01      	subs	r6, #1
 8008c12:	4638      	mov	r0, r7
 8008c14:	612e      	str	r6, [r5, #16]
 8008c16:	4621      	mov	r1, r4
 8008c18:	f7ff fdd2 	bl	80087c0 <_Bfree>
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c22:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c26:	3301      	adds	r3, #1
 8008c28:	e7c1      	b.n	8008bae <__lshift+0x4a>
 8008c2a:	3904      	subs	r1, #4
 8008c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c30:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c34:	4298      	cmp	r0, r3
 8008c36:	d8f9      	bhi.n	8008c2c <__lshift+0xc8>
 8008c38:	e7ea      	b.n	8008c10 <__lshift+0xac>
 8008c3a:	bf00      	nop
 8008c3c:	08009d58 	.word	0x08009d58
 8008c40:	08009dcc 	.word	0x08009dcc

08008c44 <__mcmp>:
 8008c44:	b530      	push	{r4, r5, lr}
 8008c46:	6902      	ldr	r2, [r0, #16]
 8008c48:	690c      	ldr	r4, [r1, #16]
 8008c4a:	1b12      	subs	r2, r2, r4
 8008c4c:	d10e      	bne.n	8008c6c <__mcmp+0x28>
 8008c4e:	f100 0314 	add.w	r3, r0, #20
 8008c52:	3114      	adds	r1, #20
 8008c54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c64:	42a5      	cmp	r5, r4
 8008c66:	d003      	beq.n	8008c70 <__mcmp+0x2c>
 8008c68:	d305      	bcc.n	8008c76 <__mcmp+0x32>
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	bd30      	pop	{r4, r5, pc}
 8008c70:	4283      	cmp	r3, r0
 8008c72:	d3f3      	bcc.n	8008c5c <__mcmp+0x18>
 8008c74:	e7fa      	b.n	8008c6c <__mcmp+0x28>
 8008c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c7a:	e7f7      	b.n	8008c6c <__mcmp+0x28>

08008c7c <__mdiff>:
 8008c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c80:	460c      	mov	r4, r1
 8008c82:	4606      	mov	r6, r0
 8008c84:	4611      	mov	r1, r2
 8008c86:	4620      	mov	r0, r4
 8008c88:	4690      	mov	r8, r2
 8008c8a:	f7ff ffdb 	bl	8008c44 <__mcmp>
 8008c8e:	1e05      	subs	r5, r0, #0
 8008c90:	d110      	bne.n	8008cb4 <__mdiff+0x38>
 8008c92:	4629      	mov	r1, r5
 8008c94:	4630      	mov	r0, r6
 8008c96:	f7ff fd53 	bl	8008740 <_Balloc>
 8008c9a:	b930      	cbnz	r0, 8008caa <__mdiff+0x2e>
 8008c9c:	4b3a      	ldr	r3, [pc, #232]	; (8008d88 <__mdiff+0x10c>)
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	f240 2132 	movw	r1, #562	; 0x232
 8008ca4:	4839      	ldr	r0, [pc, #228]	; (8008d8c <__mdiff+0x110>)
 8008ca6:	f000 fc45 	bl	8009534 <__assert_func>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb4:	bfa4      	itt	ge
 8008cb6:	4643      	movge	r3, r8
 8008cb8:	46a0      	movge	r8, r4
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008cc0:	bfa6      	itte	ge
 8008cc2:	461c      	movge	r4, r3
 8008cc4:	2500      	movge	r5, #0
 8008cc6:	2501      	movlt	r5, #1
 8008cc8:	f7ff fd3a 	bl	8008740 <_Balloc>
 8008ccc:	b920      	cbnz	r0, 8008cd8 <__mdiff+0x5c>
 8008cce:	4b2e      	ldr	r3, [pc, #184]	; (8008d88 <__mdiff+0x10c>)
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008cd6:	e7e5      	b.n	8008ca4 <__mdiff+0x28>
 8008cd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008cdc:	6926      	ldr	r6, [r4, #16]
 8008cde:	60c5      	str	r5, [r0, #12]
 8008ce0:	f104 0914 	add.w	r9, r4, #20
 8008ce4:	f108 0514 	add.w	r5, r8, #20
 8008ce8:	f100 0e14 	add.w	lr, r0, #20
 8008cec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008cf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008cf4:	f108 0210 	add.w	r2, r8, #16
 8008cf8:	46f2      	mov	sl, lr
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d04:	fa1f f883 	uxth.w	r8, r3
 8008d08:	fa11 f18b 	uxtah	r1, r1, fp
 8008d0c:	0c1b      	lsrs	r3, r3, #16
 8008d0e:	eba1 0808 	sub.w	r8, r1, r8
 8008d12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d1a:	fa1f f888 	uxth.w	r8, r8
 8008d1e:	1419      	asrs	r1, r3, #16
 8008d20:	454e      	cmp	r6, r9
 8008d22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d26:	f84a 3b04 	str.w	r3, [sl], #4
 8008d2a:	d8e7      	bhi.n	8008cfc <__mdiff+0x80>
 8008d2c:	1b33      	subs	r3, r6, r4
 8008d2e:	3b15      	subs	r3, #21
 8008d30:	f023 0303 	bic.w	r3, r3, #3
 8008d34:	3304      	adds	r3, #4
 8008d36:	3415      	adds	r4, #21
 8008d38:	42a6      	cmp	r6, r4
 8008d3a:	bf38      	it	cc
 8008d3c:	2304      	movcc	r3, #4
 8008d3e:	441d      	add	r5, r3
 8008d40:	4473      	add	r3, lr
 8008d42:	469e      	mov	lr, r3
 8008d44:	462e      	mov	r6, r5
 8008d46:	4566      	cmp	r6, ip
 8008d48:	d30e      	bcc.n	8008d68 <__mdiff+0xec>
 8008d4a:	f10c 0203 	add.w	r2, ip, #3
 8008d4e:	1b52      	subs	r2, r2, r5
 8008d50:	f022 0203 	bic.w	r2, r2, #3
 8008d54:	3d03      	subs	r5, #3
 8008d56:	45ac      	cmp	ip, r5
 8008d58:	bf38      	it	cc
 8008d5a:	2200      	movcc	r2, #0
 8008d5c:	441a      	add	r2, r3
 8008d5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d62:	b17b      	cbz	r3, 8008d84 <__mdiff+0x108>
 8008d64:	6107      	str	r7, [r0, #16]
 8008d66:	e7a3      	b.n	8008cb0 <__mdiff+0x34>
 8008d68:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d6c:	fa11 f288 	uxtah	r2, r1, r8
 8008d70:	1414      	asrs	r4, r2, #16
 8008d72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d76:	b292      	uxth	r2, r2
 8008d78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d7c:	f84e 2b04 	str.w	r2, [lr], #4
 8008d80:	1421      	asrs	r1, r4, #16
 8008d82:	e7e0      	b.n	8008d46 <__mdiff+0xca>
 8008d84:	3f01      	subs	r7, #1
 8008d86:	e7ea      	b.n	8008d5e <__mdiff+0xe2>
 8008d88:	08009d58 	.word	0x08009d58
 8008d8c:	08009dcc 	.word	0x08009dcc

08008d90 <__d2b>:
 8008d90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d94:	4689      	mov	r9, r1
 8008d96:	2101      	movs	r1, #1
 8008d98:	ec57 6b10 	vmov	r6, r7, d0
 8008d9c:	4690      	mov	r8, r2
 8008d9e:	f7ff fccf 	bl	8008740 <_Balloc>
 8008da2:	4604      	mov	r4, r0
 8008da4:	b930      	cbnz	r0, 8008db4 <__d2b+0x24>
 8008da6:	4602      	mov	r2, r0
 8008da8:	4b25      	ldr	r3, [pc, #148]	; (8008e40 <__d2b+0xb0>)
 8008daa:	4826      	ldr	r0, [pc, #152]	; (8008e44 <__d2b+0xb4>)
 8008dac:	f240 310a 	movw	r1, #778	; 0x30a
 8008db0:	f000 fbc0 	bl	8009534 <__assert_func>
 8008db4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008db8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008dbc:	bb35      	cbnz	r5, 8008e0c <__d2b+0x7c>
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	d028      	beq.n	8008e16 <__d2b+0x86>
 8008dc4:	4668      	mov	r0, sp
 8008dc6:	9600      	str	r6, [sp, #0]
 8008dc8:	f7ff fd82 	bl	80088d0 <__lo0bits>
 8008dcc:	9900      	ldr	r1, [sp, #0]
 8008dce:	b300      	cbz	r0, 8008e12 <__d2b+0x82>
 8008dd0:	9a01      	ldr	r2, [sp, #4]
 8008dd2:	f1c0 0320 	rsb	r3, r0, #32
 8008dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dda:	430b      	orrs	r3, r1
 8008ddc:	40c2      	lsrs	r2, r0
 8008dde:	6163      	str	r3, [r4, #20]
 8008de0:	9201      	str	r2, [sp, #4]
 8008de2:	9b01      	ldr	r3, [sp, #4]
 8008de4:	61a3      	str	r3, [r4, #24]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	bf14      	ite	ne
 8008dea:	2202      	movne	r2, #2
 8008dec:	2201      	moveq	r2, #1
 8008dee:	6122      	str	r2, [r4, #16]
 8008df0:	b1d5      	cbz	r5, 8008e28 <__d2b+0x98>
 8008df2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008df6:	4405      	add	r5, r0
 8008df8:	f8c9 5000 	str.w	r5, [r9]
 8008dfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e00:	f8c8 0000 	str.w	r0, [r8]
 8008e04:	4620      	mov	r0, r4
 8008e06:	b003      	add	sp, #12
 8008e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e10:	e7d5      	b.n	8008dbe <__d2b+0x2e>
 8008e12:	6161      	str	r1, [r4, #20]
 8008e14:	e7e5      	b.n	8008de2 <__d2b+0x52>
 8008e16:	a801      	add	r0, sp, #4
 8008e18:	f7ff fd5a 	bl	80088d0 <__lo0bits>
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	6163      	str	r3, [r4, #20]
 8008e20:	2201      	movs	r2, #1
 8008e22:	6122      	str	r2, [r4, #16]
 8008e24:	3020      	adds	r0, #32
 8008e26:	e7e3      	b.n	8008df0 <__d2b+0x60>
 8008e28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e30:	f8c9 0000 	str.w	r0, [r9]
 8008e34:	6918      	ldr	r0, [r3, #16]
 8008e36:	f7ff fd2b 	bl	8008890 <__hi0bits>
 8008e3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e3e:	e7df      	b.n	8008e00 <__d2b+0x70>
 8008e40:	08009d58 	.word	0x08009d58
 8008e44:	08009dcc 	.word	0x08009dcc

08008e48 <_calloc_r>:
 8008e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e4a:	fba1 2402 	umull	r2, r4, r1, r2
 8008e4e:	b94c      	cbnz	r4, 8008e64 <_calloc_r+0x1c>
 8008e50:	4611      	mov	r1, r2
 8008e52:	9201      	str	r2, [sp, #4]
 8008e54:	f000 f87a 	bl	8008f4c <_malloc_r>
 8008e58:	9a01      	ldr	r2, [sp, #4]
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	b930      	cbnz	r0, 8008e6c <_calloc_r+0x24>
 8008e5e:	4628      	mov	r0, r5
 8008e60:	b003      	add	sp, #12
 8008e62:	bd30      	pop	{r4, r5, pc}
 8008e64:	220c      	movs	r2, #12
 8008e66:	6002      	str	r2, [r0, #0]
 8008e68:	2500      	movs	r5, #0
 8008e6a:	e7f8      	b.n	8008e5e <_calloc_r+0x16>
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	f7fd ff03 	bl	8006c78 <memset>
 8008e72:	e7f4      	b.n	8008e5e <_calloc_r+0x16>

08008e74 <_free_r>:
 8008e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d044      	beq.n	8008f04 <_free_r+0x90>
 8008e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7e:	9001      	str	r0, [sp, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f1a1 0404 	sub.w	r4, r1, #4
 8008e86:	bfb8      	it	lt
 8008e88:	18e4      	addlt	r4, r4, r3
 8008e8a:	f000 fcdf 	bl	800984c <__malloc_lock>
 8008e8e:	4a1e      	ldr	r2, [pc, #120]	; (8008f08 <_free_r+0x94>)
 8008e90:	9801      	ldr	r0, [sp, #4]
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	b933      	cbnz	r3, 8008ea4 <_free_r+0x30>
 8008e96:	6063      	str	r3, [r4, #4]
 8008e98:	6014      	str	r4, [r2, #0]
 8008e9a:	b003      	add	sp, #12
 8008e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea0:	f000 bcda 	b.w	8009858 <__malloc_unlock>
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	d908      	bls.n	8008eba <_free_r+0x46>
 8008ea8:	6825      	ldr	r5, [r4, #0]
 8008eaa:	1961      	adds	r1, r4, r5
 8008eac:	428b      	cmp	r3, r1
 8008eae:	bf01      	itttt	eq
 8008eb0:	6819      	ldreq	r1, [r3, #0]
 8008eb2:	685b      	ldreq	r3, [r3, #4]
 8008eb4:	1949      	addeq	r1, r1, r5
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	e7ed      	b.n	8008e96 <_free_r+0x22>
 8008eba:	461a      	mov	r2, r3
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	b10b      	cbz	r3, 8008ec4 <_free_r+0x50>
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	d9fa      	bls.n	8008eba <_free_r+0x46>
 8008ec4:	6811      	ldr	r1, [r2, #0]
 8008ec6:	1855      	adds	r5, r2, r1
 8008ec8:	42a5      	cmp	r5, r4
 8008eca:	d10b      	bne.n	8008ee4 <_free_r+0x70>
 8008ecc:	6824      	ldr	r4, [r4, #0]
 8008ece:	4421      	add	r1, r4
 8008ed0:	1854      	adds	r4, r2, r1
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	6011      	str	r1, [r2, #0]
 8008ed6:	d1e0      	bne.n	8008e9a <_free_r+0x26>
 8008ed8:	681c      	ldr	r4, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	6053      	str	r3, [r2, #4]
 8008ede:	4421      	add	r1, r4
 8008ee0:	6011      	str	r1, [r2, #0]
 8008ee2:	e7da      	b.n	8008e9a <_free_r+0x26>
 8008ee4:	d902      	bls.n	8008eec <_free_r+0x78>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	6003      	str	r3, [r0, #0]
 8008eea:	e7d6      	b.n	8008e9a <_free_r+0x26>
 8008eec:	6825      	ldr	r5, [r4, #0]
 8008eee:	1961      	adds	r1, r4, r5
 8008ef0:	428b      	cmp	r3, r1
 8008ef2:	bf04      	itt	eq
 8008ef4:	6819      	ldreq	r1, [r3, #0]
 8008ef6:	685b      	ldreq	r3, [r3, #4]
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	bf04      	itt	eq
 8008efc:	1949      	addeq	r1, r1, r5
 8008efe:	6021      	streq	r1, [r4, #0]
 8008f00:	6054      	str	r4, [r2, #4]
 8008f02:	e7ca      	b.n	8008e9a <_free_r+0x26>
 8008f04:	b003      	add	sp, #12
 8008f06:	bd30      	pop	{r4, r5, pc}
 8008f08:	200008a8 	.word	0x200008a8

08008f0c <sbrk_aligned>:
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	4e0e      	ldr	r6, [pc, #56]	; (8008f48 <sbrk_aligned+0x3c>)
 8008f10:	460c      	mov	r4, r1
 8008f12:	6831      	ldr	r1, [r6, #0]
 8008f14:	4605      	mov	r5, r0
 8008f16:	b911      	cbnz	r1, 8008f1e <sbrk_aligned+0x12>
 8008f18:	f000 f9e6 	bl	80092e8 <_sbrk_r>
 8008f1c:	6030      	str	r0, [r6, #0]
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4628      	mov	r0, r5
 8008f22:	f000 f9e1 	bl	80092e8 <_sbrk_r>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d00a      	beq.n	8008f40 <sbrk_aligned+0x34>
 8008f2a:	1cc4      	adds	r4, r0, #3
 8008f2c:	f024 0403 	bic.w	r4, r4, #3
 8008f30:	42a0      	cmp	r0, r4
 8008f32:	d007      	beq.n	8008f44 <sbrk_aligned+0x38>
 8008f34:	1a21      	subs	r1, r4, r0
 8008f36:	4628      	mov	r0, r5
 8008f38:	f000 f9d6 	bl	80092e8 <_sbrk_r>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d101      	bne.n	8008f44 <sbrk_aligned+0x38>
 8008f40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f44:	4620      	mov	r0, r4
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	200008ac 	.word	0x200008ac

08008f4c <_malloc_r>:
 8008f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	1ccd      	adds	r5, r1, #3
 8008f52:	f025 0503 	bic.w	r5, r5, #3
 8008f56:	3508      	adds	r5, #8
 8008f58:	2d0c      	cmp	r5, #12
 8008f5a:	bf38      	it	cc
 8008f5c:	250c      	movcc	r5, #12
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	4607      	mov	r7, r0
 8008f62:	db01      	blt.n	8008f68 <_malloc_r+0x1c>
 8008f64:	42a9      	cmp	r1, r5
 8008f66:	d905      	bls.n	8008f74 <_malloc_r+0x28>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	2600      	movs	r6, #0
 8008f6e:	4630      	mov	r0, r6
 8008f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f74:	4e2e      	ldr	r6, [pc, #184]	; (8009030 <_malloc_r+0xe4>)
 8008f76:	f000 fc69 	bl	800984c <__malloc_lock>
 8008f7a:	6833      	ldr	r3, [r6, #0]
 8008f7c:	461c      	mov	r4, r3
 8008f7e:	bb34      	cbnz	r4, 8008fce <_malloc_r+0x82>
 8008f80:	4629      	mov	r1, r5
 8008f82:	4638      	mov	r0, r7
 8008f84:	f7ff ffc2 	bl	8008f0c <sbrk_aligned>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	d14d      	bne.n	800902a <_malloc_r+0xde>
 8008f8e:	6834      	ldr	r4, [r6, #0]
 8008f90:	4626      	mov	r6, r4
 8008f92:	2e00      	cmp	r6, #0
 8008f94:	d140      	bne.n	8009018 <_malloc_r+0xcc>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	eb04 0803 	add.w	r8, r4, r3
 8008fa0:	f000 f9a2 	bl	80092e8 <_sbrk_r>
 8008fa4:	4580      	cmp	r8, r0
 8008fa6:	d13a      	bne.n	800901e <_malloc_r+0xd2>
 8008fa8:	6821      	ldr	r1, [r4, #0]
 8008faa:	3503      	adds	r5, #3
 8008fac:	1a6d      	subs	r5, r5, r1
 8008fae:	f025 0503 	bic.w	r5, r5, #3
 8008fb2:	3508      	adds	r5, #8
 8008fb4:	2d0c      	cmp	r5, #12
 8008fb6:	bf38      	it	cc
 8008fb8:	250c      	movcc	r5, #12
 8008fba:	4629      	mov	r1, r5
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	f7ff ffa5 	bl	8008f0c <sbrk_aligned>
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	d02b      	beq.n	800901e <_malloc_r+0xd2>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	442b      	add	r3, r5
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	e00e      	b.n	8008fec <_malloc_r+0xa0>
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	1b52      	subs	r2, r2, r5
 8008fd2:	d41e      	bmi.n	8009012 <_malloc_r+0xc6>
 8008fd4:	2a0b      	cmp	r2, #11
 8008fd6:	d916      	bls.n	8009006 <_malloc_r+0xba>
 8008fd8:	1961      	adds	r1, r4, r5
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	6025      	str	r5, [r4, #0]
 8008fde:	bf18      	it	ne
 8008fe0:	6059      	strne	r1, [r3, #4]
 8008fe2:	6863      	ldr	r3, [r4, #4]
 8008fe4:	bf08      	it	eq
 8008fe6:	6031      	streq	r1, [r6, #0]
 8008fe8:	5162      	str	r2, [r4, r5]
 8008fea:	604b      	str	r3, [r1, #4]
 8008fec:	4638      	mov	r0, r7
 8008fee:	f104 060b 	add.w	r6, r4, #11
 8008ff2:	f000 fc31 	bl	8009858 <__malloc_unlock>
 8008ff6:	f026 0607 	bic.w	r6, r6, #7
 8008ffa:	1d23      	adds	r3, r4, #4
 8008ffc:	1af2      	subs	r2, r6, r3
 8008ffe:	d0b6      	beq.n	8008f6e <_malloc_r+0x22>
 8009000:	1b9b      	subs	r3, r3, r6
 8009002:	50a3      	str	r3, [r4, r2]
 8009004:	e7b3      	b.n	8008f6e <_malloc_r+0x22>
 8009006:	6862      	ldr	r2, [r4, #4]
 8009008:	42a3      	cmp	r3, r4
 800900a:	bf0c      	ite	eq
 800900c:	6032      	streq	r2, [r6, #0]
 800900e:	605a      	strne	r2, [r3, #4]
 8009010:	e7ec      	b.n	8008fec <_malloc_r+0xa0>
 8009012:	4623      	mov	r3, r4
 8009014:	6864      	ldr	r4, [r4, #4]
 8009016:	e7b2      	b.n	8008f7e <_malloc_r+0x32>
 8009018:	4634      	mov	r4, r6
 800901a:	6876      	ldr	r6, [r6, #4]
 800901c:	e7b9      	b.n	8008f92 <_malloc_r+0x46>
 800901e:	230c      	movs	r3, #12
 8009020:	603b      	str	r3, [r7, #0]
 8009022:	4638      	mov	r0, r7
 8009024:	f000 fc18 	bl	8009858 <__malloc_unlock>
 8009028:	e7a1      	b.n	8008f6e <_malloc_r+0x22>
 800902a:	6025      	str	r5, [r4, #0]
 800902c:	e7de      	b.n	8008fec <_malloc_r+0xa0>
 800902e:	bf00      	nop
 8009030:	200008a8 	.word	0x200008a8

08009034 <__sfputc_r>:
 8009034:	6893      	ldr	r3, [r2, #8]
 8009036:	3b01      	subs	r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	b410      	push	{r4}
 800903c:	6093      	str	r3, [r2, #8]
 800903e:	da08      	bge.n	8009052 <__sfputc_r+0x1e>
 8009040:	6994      	ldr	r4, [r2, #24]
 8009042:	42a3      	cmp	r3, r4
 8009044:	db01      	blt.n	800904a <__sfputc_r+0x16>
 8009046:	290a      	cmp	r1, #10
 8009048:	d103      	bne.n	8009052 <__sfputc_r+0x1e>
 800904a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800904e:	f000 b99f 	b.w	8009390 <__swbuf_r>
 8009052:	6813      	ldr	r3, [r2, #0]
 8009054:	1c58      	adds	r0, r3, #1
 8009056:	6010      	str	r0, [r2, #0]
 8009058:	7019      	strb	r1, [r3, #0]
 800905a:	4608      	mov	r0, r1
 800905c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009060:	4770      	bx	lr

08009062 <__sfputs_r>:
 8009062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009064:	4606      	mov	r6, r0
 8009066:	460f      	mov	r7, r1
 8009068:	4614      	mov	r4, r2
 800906a:	18d5      	adds	r5, r2, r3
 800906c:	42ac      	cmp	r4, r5
 800906e:	d101      	bne.n	8009074 <__sfputs_r+0x12>
 8009070:	2000      	movs	r0, #0
 8009072:	e007      	b.n	8009084 <__sfputs_r+0x22>
 8009074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009078:	463a      	mov	r2, r7
 800907a:	4630      	mov	r0, r6
 800907c:	f7ff ffda 	bl	8009034 <__sfputc_r>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d1f3      	bne.n	800906c <__sfputs_r+0xa>
 8009084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009088 <_vfiprintf_r>:
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	460d      	mov	r5, r1
 800908e:	b09d      	sub	sp, #116	; 0x74
 8009090:	4614      	mov	r4, r2
 8009092:	4698      	mov	r8, r3
 8009094:	4606      	mov	r6, r0
 8009096:	b118      	cbz	r0, 80090a0 <_vfiprintf_r+0x18>
 8009098:	6983      	ldr	r3, [r0, #24]
 800909a:	b90b      	cbnz	r3, 80090a0 <_vfiprintf_r+0x18>
 800909c:	f7ff faa2 	bl	80085e4 <__sinit>
 80090a0:	4b89      	ldr	r3, [pc, #548]	; (80092c8 <_vfiprintf_r+0x240>)
 80090a2:	429d      	cmp	r5, r3
 80090a4:	d11b      	bne.n	80090de <_vfiprintf_r+0x56>
 80090a6:	6875      	ldr	r5, [r6, #4]
 80090a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090aa:	07d9      	lsls	r1, r3, #31
 80090ac:	d405      	bmi.n	80090ba <_vfiprintf_r+0x32>
 80090ae:	89ab      	ldrh	r3, [r5, #12]
 80090b0:	059a      	lsls	r2, r3, #22
 80090b2:	d402      	bmi.n	80090ba <_vfiprintf_r+0x32>
 80090b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090b6:	f7ff fb38 	bl	800872a <__retarget_lock_acquire_recursive>
 80090ba:	89ab      	ldrh	r3, [r5, #12]
 80090bc:	071b      	lsls	r3, r3, #28
 80090be:	d501      	bpl.n	80090c4 <_vfiprintf_r+0x3c>
 80090c0:	692b      	ldr	r3, [r5, #16]
 80090c2:	b9eb      	cbnz	r3, 8009100 <_vfiprintf_r+0x78>
 80090c4:	4629      	mov	r1, r5
 80090c6:	4630      	mov	r0, r6
 80090c8:	f000 f9c6 	bl	8009458 <__swsetup_r>
 80090cc:	b1c0      	cbz	r0, 8009100 <_vfiprintf_r+0x78>
 80090ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090d0:	07dc      	lsls	r4, r3, #31
 80090d2:	d50e      	bpl.n	80090f2 <_vfiprintf_r+0x6a>
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090d8:	b01d      	add	sp, #116	; 0x74
 80090da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090de:	4b7b      	ldr	r3, [pc, #492]	; (80092cc <_vfiprintf_r+0x244>)
 80090e0:	429d      	cmp	r5, r3
 80090e2:	d101      	bne.n	80090e8 <_vfiprintf_r+0x60>
 80090e4:	68b5      	ldr	r5, [r6, #8]
 80090e6:	e7df      	b.n	80090a8 <_vfiprintf_r+0x20>
 80090e8:	4b79      	ldr	r3, [pc, #484]	; (80092d0 <_vfiprintf_r+0x248>)
 80090ea:	429d      	cmp	r5, r3
 80090ec:	bf08      	it	eq
 80090ee:	68f5      	ldreq	r5, [r6, #12]
 80090f0:	e7da      	b.n	80090a8 <_vfiprintf_r+0x20>
 80090f2:	89ab      	ldrh	r3, [r5, #12]
 80090f4:	0598      	lsls	r0, r3, #22
 80090f6:	d4ed      	bmi.n	80090d4 <_vfiprintf_r+0x4c>
 80090f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090fa:	f7ff fb17 	bl	800872c <__retarget_lock_release_recursive>
 80090fe:	e7e9      	b.n	80090d4 <_vfiprintf_r+0x4c>
 8009100:	2300      	movs	r3, #0
 8009102:	9309      	str	r3, [sp, #36]	; 0x24
 8009104:	2320      	movs	r3, #32
 8009106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800910a:	f8cd 800c 	str.w	r8, [sp, #12]
 800910e:	2330      	movs	r3, #48	; 0x30
 8009110:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092d4 <_vfiprintf_r+0x24c>
 8009114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009118:	f04f 0901 	mov.w	r9, #1
 800911c:	4623      	mov	r3, r4
 800911e:	469a      	mov	sl, r3
 8009120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009124:	b10a      	cbz	r2, 800912a <_vfiprintf_r+0xa2>
 8009126:	2a25      	cmp	r2, #37	; 0x25
 8009128:	d1f9      	bne.n	800911e <_vfiprintf_r+0x96>
 800912a:	ebba 0b04 	subs.w	fp, sl, r4
 800912e:	d00b      	beq.n	8009148 <_vfiprintf_r+0xc0>
 8009130:	465b      	mov	r3, fp
 8009132:	4622      	mov	r2, r4
 8009134:	4629      	mov	r1, r5
 8009136:	4630      	mov	r0, r6
 8009138:	f7ff ff93 	bl	8009062 <__sfputs_r>
 800913c:	3001      	adds	r0, #1
 800913e:	f000 80aa 	beq.w	8009296 <_vfiprintf_r+0x20e>
 8009142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009144:	445a      	add	r2, fp
 8009146:	9209      	str	r2, [sp, #36]	; 0x24
 8009148:	f89a 3000 	ldrb.w	r3, [sl]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 80a2 	beq.w	8009296 <_vfiprintf_r+0x20e>
 8009152:	2300      	movs	r3, #0
 8009154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800915c:	f10a 0a01 	add.w	sl, sl, #1
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	9307      	str	r3, [sp, #28]
 8009164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009168:	931a      	str	r3, [sp, #104]	; 0x68
 800916a:	4654      	mov	r4, sl
 800916c:	2205      	movs	r2, #5
 800916e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009172:	4858      	ldr	r0, [pc, #352]	; (80092d4 <_vfiprintf_r+0x24c>)
 8009174:	f7f7 f84c 	bl	8000210 <memchr>
 8009178:	9a04      	ldr	r2, [sp, #16]
 800917a:	b9d8      	cbnz	r0, 80091b4 <_vfiprintf_r+0x12c>
 800917c:	06d1      	lsls	r1, r2, #27
 800917e:	bf44      	itt	mi
 8009180:	2320      	movmi	r3, #32
 8009182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009186:	0713      	lsls	r3, r2, #28
 8009188:	bf44      	itt	mi
 800918a:	232b      	movmi	r3, #43	; 0x2b
 800918c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009190:	f89a 3000 	ldrb.w	r3, [sl]
 8009194:	2b2a      	cmp	r3, #42	; 0x2a
 8009196:	d015      	beq.n	80091c4 <_vfiprintf_r+0x13c>
 8009198:	9a07      	ldr	r2, [sp, #28]
 800919a:	4654      	mov	r4, sl
 800919c:	2000      	movs	r0, #0
 800919e:	f04f 0c0a 	mov.w	ip, #10
 80091a2:	4621      	mov	r1, r4
 80091a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091a8:	3b30      	subs	r3, #48	; 0x30
 80091aa:	2b09      	cmp	r3, #9
 80091ac:	d94e      	bls.n	800924c <_vfiprintf_r+0x1c4>
 80091ae:	b1b0      	cbz	r0, 80091de <_vfiprintf_r+0x156>
 80091b0:	9207      	str	r2, [sp, #28]
 80091b2:	e014      	b.n	80091de <_vfiprintf_r+0x156>
 80091b4:	eba0 0308 	sub.w	r3, r0, r8
 80091b8:	fa09 f303 	lsl.w	r3, r9, r3
 80091bc:	4313      	orrs	r3, r2
 80091be:	9304      	str	r3, [sp, #16]
 80091c0:	46a2      	mov	sl, r4
 80091c2:	e7d2      	b.n	800916a <_vfiprintf_r+0xe2>
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	1d19      	adds	r1, r3, #4
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	9103      	str	r1, [sp, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bfbb      	ittet	lt
 80091d0:	425b      	neglt	r3, r3
 80091d2:	f042 0202 	orrlt.w	r2, r2, #2
 80091d6:	9307      	strge	r3, [sp, #28]
 80091d8:	9307      	strlt	r3, [sp, #28]
 80091da:	bfb8      	it	lt
 80091dc:	9204      	strlt	r2, [sp, #16]
 80091de:	7823      	ldrb	r3, [r4, #0]
 80091e0:	2b2e      	cmp	r3, #46	; 0x2e
 80091e2:	d10c      	bne.n	80091fe <_vfiprintf_r+0x176>
 80091e4:	7863      	ldrb	r3, [r4, #1]
 80091e6:	2b2a      	cmp	r3, #42	; 0x2a
 80091e8:	d135      	bne.n	8009256 <_vfiprintf_r+0x1ce>
 80091ea:	9b03      	ldr	r3, [sp, #12]
 80091ec:	1d1a      	adds	r2, r3, #4
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	9203      	str	r2, [sp, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	bfb8      	it	lt
 80091f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80091fa:	3402      	adds	r4, #2
 80091fc:	9305      	str	r3, [sp, #20]
 80091fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092e4 <_vfiprintf_r+0x25c>
 8009202:	7821      	ldrb	r1, [r4, #0]
 8009204:	2203      	movs	r2, #3
 8009206:	4650      	mov	r0, sl
 8009208:	f7f7 f802 	bl	8000210 <memchr>
 800920c:	b140      	cbz	r0, 8009220 <_vfiprintf_r+0x198>
 800920e:	2340      	movs	r3, #64	; 0x40
 8009210:	eba0 000a 	sub.w	r0, r0, sl
 8009214:	fa03 f000 	lsl.w	r0, r3, r0
 8009218:	9b04      	ldr	r3, [sp, #16]
 800921a:	4303      	orrs	r3, r0
 800921c:	3401      	adds	r4, #1
 800921e:	9304      	str	r3, [sp, #16]
 8009220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009224:	482c      	ldr	r0, [pc, #176]	; (80092d8 <_vfiprintf_r+0x250>)
 8009226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800922a:	2206      	movs	r2, #6
 800922c:	f7f6 fff0 	bl	8000210 <memchr>
 8009230:	2800      	cmp	r0, #0
 8009232:	d03f      	beq.n	80092b4 <_vfiprintf_r+0x22c>
 8009234:	4b29      	ldr	r3, [pc, #164]	; (80092dc <_vfiprintf_r+0x254>)
 8009236:	bb1b      	cbnz	r3, 8009280 <_vfiprintf_r+0x1f8>
 8009238:	9b03      	ldr	r3, [sp, #12]
 800923a:	3307      	adds	r3, #7
 800923c:	f023 0307 	bic.w	r3, r3, #7
 8009240:	3308      	adds	r3, #8
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009246:	443b      	add	r3, r7
 8009248:	9309      	str	r3, [sp, #36]	; 0x24
 800924a:	e767      	b.n	800911c <_vfiprintf_r+0x94>
 800924c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009250:	460c      	mov	r4, r1
 8009252:	2001      	movs	r0, #1
 8009254:	e7a5      	b.n	80091a2 <_vfiprintf_r+0x11a>
 8009256:	2300      	movs	r3, #0
 8009258:	3401      	adds	r4, #1
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	4619      	mov	r1, r3
 800925e:	f04f 0c0a 	mov.w	ip, #10
 8009262:	4620      	mov	r0, r4
 8009264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009268:	3a30      	subs	r2, #48	; 0x30
 800926a:	2a09      	cmp	r2, #9
 800926c:	d903      	bls.n	8009276 <_vfiprintf_r+0x1ee>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0c5      	beq.n	80091fe <_vfiprintf_r+0x176>
 8009272:	9105      	str	r1, [sp, #20]
 8009274:	e7c3      	b.n	80091fe <_vfiprintf_r+0x176>
 8009276:	fb0c 2101 	mla	r1, ip, r1, r2
 800927a:	4604      	mov	r4, r0
 800927c:	2301      	movs	r3, #1
 800927e:	e7f0      	b.n	8009262 <_vfiprintf_r+0x1da>
 8009280:	ab03      	add	r3, sp, #12
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	462a      	mov	r2, r5
 8009286:	4b16      	ldr	r3, [pc, #88]	; (80092e0 <_vfiprintf_r+0x258>)
 8009288:	a904      	add	r1, sp, #16
 800928a:	4630      	mov	r0, r6
 800928c:	f7fd fd9c 	bl	8006dc8 <_printf_float>
 8009290:	4607      	mov	r7, r0
 8009292:	1c78      	adds	r0, r7, #1
 8009294:	d1d6      	bne.n	8009244 <_vfiprintf_r+0x1bc>
 8009296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009298:	07d9      	lsls	r1, r3, #31
 800929a:	d405      	bmi.n	80092a8 <_vfiprintf_r+0x220>
 800929c:	89ab      	ldrh	r3, [r5, #12]
 800929e:	059a      	lsls	r2, r3, #22
 80092a0:	d402      	bmi.n	80092a8 <_vfiprintf_r+0x220>
 80092a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092a4:	f7ff fa42 	bl	800872c <__retarget_lock_release_recursive>
 80092a8:	89ab      	ldrh	r3, [r5, #12]
 80092aa:	065b      	lsls	r3, r3, #25
 80092ac:	f53f af12 	bmi.w	80090d4 <_vfiprintf_r+0x4c>
 80092b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092b2:	e711      	b.n	80090d8 <_vfiprintf_r+0x50>
 80092b4:	ab03      	add	r3, sp, #12
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	462a      	mov	r2, r5
 80092ba:	4b09      	ldr	r3, [pc, #36]	; (80092e0 <_vfiprintf_r+0x258>)
 80092bc:	a904      	add	r1, sp, #16
 80092be:	4630      	mov	r0, r6
 80092c0:	f7fe f826 	bl	8007310 <_printf_i>
 80092c4:	e7e4      	b.n	8009290 <_vfiprintf_r+0x208>
 80092c6:	bf00      	nop
 80092c8:	08009d8c 	.word	0x08009d8c
 80092cc:	08009dac 	.word	0x08009dac
 80092d0:	08009d6c 	.word	0x08009d6c
 80092d4:	08009f24 	.word	0x08009f24
 80092d8:	08009f2e 	.word	0x08009f2e
 80092dc:	08006dc9 	.word	0x08006dc9
 80092e0:	08009063 	.word	0x08009063
 80092e4:	08009f2a 	.word	0x08009f2a

080092e8 <_sbrk_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4d06      	ldr	r5, [pc, #24]	; (8009304 <_sbrk_r+0x1c>)
 80092ec:	2300      	movs	r3, #0
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	602b      	str	r3, [r5, #0]
 80092f4:	f7fa f800 	bl	80032f8 <_sbrk>
 80092f8:	1c43      	adds	r3, r0, #1
 80092fa:	d102      	bne.n	8009302 <_sbrk_r+0x1a>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	b103      	cbz	r3, 8009302 <_sbrk_r+0x1a>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	200008b0 	.word	0x200008b0

08009308 <__sread>:
 8009308:	b510      	push	{r4, lr}
 800930a:	460c      	mov	r4, r1
 800930c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009310:	f000 faa8 	bl	8009864 <_read_r>
 8009314:	2800      	cmp	r0, #0
 8009316:	bfab      	itete	ge
 8009318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800931a:	89a3      	ldrhlt	r3, [r4, #12]
 800931c:	181b      	addge	r3, r3, r0
 800931e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009322:	bfac      	ite	ge
 8009324:	6563      	strge	r3, [r4, #84]	; 0x54
 8009326:	81a3      	strhlt	r3, [r4, #12]
 8009328:	bd10      	pop	{r4, pc}

0800932a <__swrite>:
 800932a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932e:	461f      	mov	r7, r3
 8009330:	898b      	ldrh	r3, [r1, #12]
 8009332:	05db      	lsls	r3, r3, #23
 8009334:	4605      	mov	r5, r0
 8009336:	460c      	mov	r4, r1
 8009338:	4616      	mov	r6, r2
 800933a:	d505      	bpl.n	8009348 <__swrite+0x1e>
 800933c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009340:	2302      	movs	r3, #2
 8009342:	2200      	movs	r2, #0
 8009344:	f000 f9f8 	bl	8009738 <_lseek_r>
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800934e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009352:	81a3      	strh	r3, [r4, #12]
 8009354:	4632      	mov	r2, r6
 8009356:	463b      	mov	r3, r7
 8009358:	4628      	mov	r0, r5
 800935a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800935e:	f000 b869 	b.w	8009434 <_write_r>

08009362 <__sseek>:
 8009362:	b510      	push	{r4, lr}
 8009364:	460c      	mov	r4, r1
 8009366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936a:	f000 f9e5 	bl	8009738 <_lseek_r>
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	bf15      	itete	ne
 8009374:	6560      	strne	r0, [r4, #84]	; 0x54
 8009376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800937a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800937e:	81a3      	strheq	r3, [r4, #12]
 8009380:	bf18      	it	ne
 8009382:	81a3      	strhne	r3, [r4, #12]
 8009384:	bd10      	pop	{r4, pc}

08009386 <__sclose>:
 8009386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938a:	f000 b8f1 	b.w	8009570 <_close_r>
	...

08009390 <__swbuf_r>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	460e      	mov	r6, r1
 8009394:	4614      	mov	r4, r2
 8009396:	4605      	mov	r5, r0
 8009398:	b118      	cbz	r0, 80093a2 <__swbuf_r+0x12>
 800939a:	6983      	ldr	r3, [r0, #24]
 800939c:	b90b      	cbnz	r3, 80093a2 <__swbuf_r+0x12>
 800939e:	f7ff f921 	bl	80085e4 <__sinit>
 80093a2:	4b21      	ldr	r3, [pc, #132]	; (8009428 <__swbuf_r+0x98>)
 80093a4:	429c      	cmp	r4, r3
 80093a6:	d12b      	bne.n	8009400 <__swbuf_r+0x70>
 80093a8:	686c      	ldr	r4, [r5, #4]
 80093aa:	69a3      	ldr	r3, [r4, #24]
 80093ac:	60a3      	str	r3, [r4, #8]
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	071a      	lsls	r2, r3, #28
 80093b2:	d52f      	bpl.n	8009414 <__swbuf_r+0x84>
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	b36b      	cbz	r3, 8009414 <__swbuf_r+0x84>
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	6820      	ldr	r0, [r4, #0]
 80093bc:	1ac0      	subs	r0, r0, r3
 80093be:	6963      	ldr	r3, [r4, #20]
 80093c0:	b2f6      	uxtb	r6, r6
 80093c2:	4283      	cmp	r3, r0
 80093c4:	4637      	mov	r7, r6
 80093c6:	dc04      	bgt.n	80093d2 <__swbuf_r+0x42>
 80093c8:	4621      	mov	r1, r4
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 f966 	bl	800969c <_fflush_r>
 80093d0:	bb30      	cbnz	r0, 8009420 <__swbuf_r+0x90>
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	60a3      	str	r3, [r4, #8]
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	6022      	str	r2, [r4, #0]
 80093de:	701e      	strb	r6, [r3, #0]
 80093e0:	6963      	ldr	r3, [r4, #20]
 80093e2:	3001      	adds	r0, #1
 80093e4:	4283      	cmp	r3, r0
 80093e6:	d004      	beq.n	80093f2 <__swbuf_r+0x62>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	07db      	lsls	r3, r3, #31
 80093ec:	d506      	bpl.n	80093fc <__swbuf_r+0x6c>
 80093ee:	2e0a      	cmp	r6, #10
 80093f0:	d104      	bne.n	80093fc <__swbuf_r+0x6c>
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f000 f951 	bl	800969c <_fflush_r>
 80093fa:	b988      	cbnz	r0, 8009420 <__swbuf_r+0x90>
 80093fc:	4638      	mov	r0, r7
 80093fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009400:	4b0a      	ldr	r3, [pc, #40]	; (800942c <__swbuf_r+0x9c>)
 8009402:	429c      	cmp	r4, r3
 8009404:	d101      	bne.n	800940a <__swbuf_r+0x7a>
 8009406:	68ac      	ldr	r4, [r5, #8]
 8009408:	e7cf      	b.n	80093aa <__swbuf_r+0x1a>
 800940a:	4b09      	ldr	r3, [pc, #36]	; (8009430 <__swbuf_r+0xa0>)
 800940c:	429c      	cmp	r4, r3
 800940e:	bf08      	it	eq
 8009410:	68ec      	ldreq	r4, [r5, #12]
 8009412:	e7ca      	b.n	80093aa <__swbuf_r+0x1a>
 8009414:	4621      	mov	r1, r4
 8009416:	4628      	mov	r0, r5
 8009418:	f000 f81e 	bl	8009458 <__swsetup_r>
 800941c:	2800      	cmp	r0, #0
 800941e:	d0cb      	beq.n	80093b8 <__swbuf_r+0x28>
 8009420:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009424:	e7ea      	b.n	80093fc <__swbuf_r+0x6c>
 8009426:	bf00      	nop
 8009428:	08009d8c 	.word	0x08009d8c
 800942c:	08009dac 	.word	0x08009dac
 8009430:	08009d6c 	.word	0x08009d6c

08009434 <_write_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4d07      	ldr	r5, [pc, #28]	; (8009454 <_write_r+0x20>)
 8009438:	4604      	mov	r4, r0
 800943a:	4608      	mov	r0, r1
 800943c:	4611      	mov	r1, r2
 800943e:	2200      	movs	r2, #0
 8009440:	602a      	str	r2, [r5, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	f7f7 feba 	bl	80011bc <_write>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_write_r+0x1e>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b103      	cbz	r3, 8009452 <_write_r+0x1e>
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	200008b0 	.word	0x200008b0

08009458 <__swsetup_r>:
 8009458:	4b32      	ldr	r3, [pc, #200]	; (8009524 <__swsetup_r+0xcc>)
 800945a:	b570      	push	{r4, r5, r6, lr}
 800945c:	681d      	ldr	r5, [r3, #0]
 800945e:	4606      	mov	r6, r0
 8009460:	460c      	mov	r4, r1
 8009462:	b125      	cbz	r5, 800946e <__swsetup_r+0x16>
 8009464:	69ab      	ldr	r3, [r5, #24]
 8009466:	b913      	cbnz	r3, 800946e <__swsetup_r+0x16>
 8009468:	4628      	mov	r0, r5
 800946a:	f7ff f8bb 	bl	80085e4 <__sinit>
 800946e:	4b2e      	ldr	r3, [pc, #184]	; (8009528 <__swsetup_r+0xd0>)
 8009470:	429c      	cmp	r4, r3
 8009472:	d10f      	bne.n	8009494 <__swsetup_r+0x3c>
 8009474:	686c      	ldr	r4, [r5, #4]
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800947c:	0719      	lsls	r1, r3, #28
 800947e:	d42c      	bmi.n	80094da <__swsetup_r+0x82>
 8009480:	06dd      	lsls	r5, r3, #27
 8009482:	d411      	bmi.n	80094a8 <__swsetup_r+0x50>
 8009484:	2309      	movs	r3, #9
 8009486:	6033      	str	r3, [r6, #0]
 8009488:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800948c:	81a3      	strh	r3, [r4, #12]
 800948e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009492:	e03e      	b.n	8009512 <__swsetup_r+0xba>
 8009494:	4b25      	ldr	r3, [pc, #148]	; (800952c <__swsetup_r+0xd4>)
 8009496:	429c      	cmp	r4, r3
 8009498:	d101      	bne.n	800949e <__swsetup_r+0x46>
 800949a:	68ac      	ldr	r4, [r5, #8]
 800949c:	e7eb      	b.n	8009476 <__swsetup_r+0x1e>
 800949e:	4b24      	ldr	r3, [pc, #144]	; (8009530 <__swsetup_r+0xd8>)
 80094a0:	429c      	cmp	r4, r3
 80094a2:	bf08      	it	eq
 80094a4:	68ec      	ldreq	r4, [r5, #12]
 80094a6:	e7e6      	b.n	8009476 <__swsetup_r+0x1e>
 80094a8:	0758      	lsls	r0, r3, #29
 80094aa:	d512      	bpl.n	80094d2 <__swsetup_r+0x7a>
 80094ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094ae:	b141      	cbz	r1, 80094c2 <__swsetup_r+0x6a>
 80094b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094b4:	4299      	cmp	r1, r3
 80094b6:	d002      	beq.n	80094be <__swsetup_r+0x66>
 80094b8:	4630      	mov	r0, r6
 80094ba:	f7ff fcdb 	bl	8008e74 <_free_r>
 80094be:	2300      	movs	r3, #0
 80094c0:	6363      	str	r3, [r4, #52]	; 0x34
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094c8:	81a3      	strh	r3, [r4, #12]
 80094ca:	2300      	movs	r3, #0
 80094cc:	6063      	str	r3, [r4, #4]
 80094ce:	6923      	ldr	r3, [r4, #16]
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	f043 0308 	orr.w	r3, r3, #8
 80094d8:	81a3      	strh	r3, [r4, #12]
 80094da:	6923      	ldr	r3, [r4, #16]
 80094dc:	b94b      	cbnz	r3, 80094f2 <__swsetup_r+0x9a>
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094e8:	d003      	beq.n	80094f2 <__swsetup_r+0x9a>
 80094ea:	4621      	mov	r1, r4
 80094ec:	4630      	mov	r0, r6
 80094ee:	f000 f95b 	bl	80097a8 <__smakebuf_r>
 80094f2:	89a0      	ldrh	r0, [r4, #12]
 80094f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094f8:	f010 0301 	ands.w	r3, r0, #1
 80094fc:	d00a      	beq.n	8009514 <__swsetup_r+0xbc>
 80094fe:	2300      	movs	r3, #0
 8009500:	60a3      	str	r3, [r4, #8]
 8009502:	6963      	ldr	r3, [r4, #20]
 8009504:	425b      	negs	r3, r3
 8009506:	61a3      	str	r3, [r4, #24]
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	b943      	cbnz	r3, 800951e <__swsetup_r+0xc6>
 800950c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009510:	d1ba      	bne.n	8009488 <__swsetup_r+0x30>
 8009512:	bd70      	pop	{r4, r5, r6, pc}
 8009514:	0781      	lsls	r1, r0, #30
 8009516:	bf58      	it	pl
 8009518:	6963      	ldrpl	r3, [r4, #20]
 800951a:	60a3      	str	r3, [r4, #8]
 800951c:	e7f4      	b.n	8009508 <__swsetup_r+0xb0>
 800951e:	2000      	movs	r0, #0
 8009520:	e7f7      	b.n	8009512 <__swsetup_r+0xba>
 8009522:	bf00      	nop
 8009524:	20000010 	.word	0x20000010
 8009528:	08009d8c 	.word	0x08009d8c
 800952c:	08009dac 	.word	0x08009dac
 8009530:	08009d6c 	.word	0x08009d6c

08009534 <__assert_func>:
 8009534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009536:	4614      	mov	r4, r2
 8009538:	461a      	mov	r2, r3
 800953a:	4b09      	ldr	r3, [pc, #36]	; (8009560 <__assert_func+0x2c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4605      	mov	r5, r0
 8009540:	68d8      	ldr	r0, [r3, #12]
 8009542:	b14c      	cbz	r4, 8009558 <__assert_func+0x24>
 8009544:	4b07      	ldr	r3, [pc, #28]	; (8009564 <__assert_func+0x30>)
 8009546:	9100      	str	r1, [sp, #0]
 8009548:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800954c:	4906      	ldr	r1, [pc, #24]	; (8009568 <__assert_func+0x34>)
 800954e:	462b      	mov	r3, r5
 8009550:	f000 f8e0 	bl	8009714 <fiprintf>
 8009554:	f000 f9a5 	bl	80098a2 <abort>
 8009558:	4b04      	ldr	r3, [pc, #16]	; (800956c <__assert_func+0x38>)
 800955a:	461c      	mov	r4, r3
 800955c:	e7f3      	b.n	8009546 <__assert_func+0x12>
 800955e:	bf00      	nop
 8009560:	20000010 	.word	0x20000010
 8009564:	08009f35 	.word	0x08009f35
 8009568:	08009f42 	.word	0x08009f42
 800956c:	08009f70 	.word	0x08009f70

08009570 <_close_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4d06      	ldr	r5, [pc, #24]	; (800958c <_close_r+0x1c>)
 8009574:	2300      	movs	r3, #0
 8009576:	4604      	mov	r4, r0
 8009578:	4608      	mov	r0, r1
 800957a:	602b      	str	r3, [r5, #0]
 800957c:	f7f9 fe87 	bl	800328e <_close>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_close_r+0x1a>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_close_r+0x1a>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	200008b0 	.word	0x200008b0

08009590 <__sflush_r>:
 8009590:	898a      	ldrh	r2, [r1, #12]
 8009592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009596:	4605      	mov	r5, r0
 8009598:	0710      	lsls	r0, r2, #28
 800959a:	460c      	mov	r4, r1
 800959c:	d458      	bmi.n	8009650 <__sflush_r+0xc0>
 800959e:	684b      	ldr	r3, [r1, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	dc05      	bgt.n	80095b0 <__sflush_r+0x20>
 80095a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	dc02      	bgt.n	80095b0 <__sflush_r+0x20>
 80095aa:	2000      	movs	r0, #0
 80095ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095b2:	2e00      	cmp	r6, #0
 80095b4:	d0f9      	beq.n	80095aa <__sflush_r+0x1a>
 80095b6:	2300      	movs	r3, #0
 80095b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095bc:	682f      	ldr	r7, [r5, #0]
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	d032      	beq.n	8009628 <__sflush_r+0x98>
 80095c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	075a      	lsls	r2, r3, #29
 80095c8:	d505      	bpl.n	80095d6 <__sflush_r+0x46>
 80095ca:	6863      	ldr	r3, [r4, #4]
 80095cc:	1ac0      	subs	r0, r0, r3
 80095ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095d0:	b10b      	cbz	r3, 80095d6 <__sflush_r+0x46>
 80095d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095d4:	1ac0      	subs	r0, r0, r3
 80095d6:	2300      	movs	r3, #0
 80095d8:	4602      	mov	r2, r0
 80095da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095dc:	6a21      	ldr	r1, [r4, #32]
 80095de:	4628      	mov	r0, r5
 80095e0:	47b0      	blx	r6
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	d106      	bne.n	80095f6 <__sflush_r+0x66>
 80095e8:	6829      	ldr	r1, [r5, #0]
 80095ea:	291d      	cmp	r1, #29
 80095ec:	d82c      	bhi.n	8009648 <__sflush_r+0xb8>
 80095ee:	4a2a      	ldr	r2, [pc, #168]	; (8009698 <__sflush_r+0x108>)
 80095f0:	40ca      	lsrs	r2, r1
 80095f2:	07d6      	lsls	r6, r2, #31
 80095f4:	d528      	bpl.n	8009648 <__sflush_r+0xb8>
 80095f6:	2200      	movs	r2, #0
 80095f8:	6062      	str	r2, [r4, #4]
 80095fa:	04d9      	lsls	r1, r3, #19
 80095fc:	6922      	ldr	r2, [r4, #16]
 80095fe:	6022      	str	r2, [r4, #0]
 8009600:	d504      	bpl.n	800960c <__sflush_r+0x7c>
 8009602:	1c42      	adds	r2, r0, #1
 8009604:	d101      	bne.n	800960a <__sflush_r+0x7a>
 8009606:	682b      	ldr	r3, [r5, #0]
 8009608:	b903      	cbnz	r3, 800960c <__sflush_r+0x7c>
 800960a:	6560      	str	r0, [r4, #84]	; 0x54
 800960c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800960e:	602f      	str	r7, [r5, #0]
 8009610:	2900      	cmp	r1, #0
 8009612:	d0ca      	beq.n	80095aa <__sflush_r+0x1a>
 8009614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009618:	4299      	cmp	r1, r3
 800961a:	d002      	beq.n	8009622 <__sflush_r+0x92>
 800961c:	4628      	mov	r0, r5
 800961e:	f7ff fc29 	bl	8008e74 <_free_r>
 8009622:	2000      	movs	r0, #0
 8009624:	6360      	str	r0, [r4, #52]	; 0x34
 8009626:	e7c1      	b.n	80095ac <__sflush_r+0x1c>
 8009628:	6a21      	ldr	r1, [r4, #32]
 800962a:	2301      	movs	r3, #1
 800962c:	4628      	mov	r0, r5
 800962e:	47b0      	blx	r6
 8009630:	1c41      	adds	r1, r0, #1
 8009632:	d1c7      	bne.n	80095c4 <__sflush_r+0x34>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0c4      	beq.n	80095c4 <__sflush_r+0x34>
 800963a:	2b1d      	cmp	r3, #29
 800963c:	d001      	beq.n	8009642 <__sflush_r+0xb2>
 800963e:	2b16      	cmp	r3, #22
 8009640:	d101      	bne.n	8009646 <__sflush_r+0xb6>
 8009642:	602f      	str	r7, [r5, #0]
 8009644:	e7b1      	b.n	80095aa <__sflush_r+0x1a>
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	e7ad      	b.n	80095ac <__sflush_r+0x1c>
 8009650:	690f      	ldr	r7, [r1, #16]
 8009652:	2f00      	cmp	r7, #0
 8009654:	d0a9      	beq.n	80095aa <__sflush_r+0x1a>
 8009656:	0793      	lsls	r3, r2, #30
 8009658:	680e      	ldr	r6, [r1, #0]
 800965a:	bf08      	it	eq
 800965c:	694b      	ldreq	r3, [r1, #20]
 800965e:	600f      	str	r7, [r1, #0]
 8009660:	bf18      	it	ne
 8009662:	2300      	movne	r3, #0
 8009664:	eba6 0807 	sub.w	r8, r6, r7
 8009668:	608b      	str	r3, [r1, #8]
 800966a:	f1b8 0f00 	cmp.w	r8, #0
 800966e:	dd9c      	ble.n	80095aa <__sflush_r+0x1a>
 8009670:	6a21      	ldr	r1, [r4, #32]
 8009672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009674:	4643      	mov	r3, r8
 8009676:	463a      	mov	r2, r7
 8009678:	4628      	mov	r0, r5
 800967a:	47b0      	blx	r6
 800967c:	2800      	cmp	r0, #0
 800967e:	dc06      	bgt.n	800968e <__sflush_r+0xfe>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009686:	81a3      	strh	r3, [r4, #12]
 8009688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800968c:	e78e      	b.n	80095ac <__sflush_r+0x1c>
 800968e:	4407      	add	r7, r0
 8009690:	eba8 0800 	sub.w	r8, r8, r0
 8009694:	e7e9      	b.n	800966a <__sflush_r+0xda>
 8009696:	bf00      	nop
 8009698:	20400001 	.word	0x20400001

0800969c <_fflush_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	690b      	ldr	r3, [r1, #16]
 80096a0:	4605      	mov	r5, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	b913      	cbnz	r3, 80096ac <_fflush_r+0x10>
 80096a6:	2500      	movs	r5, #0
 80096a8:	4628      	mov	r0, r5
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	b118      	cbz	r0, 80096b6 <_fflush_r+0x1a>
 80096ae:	6983      	ldr	r3, [r0, #24]
 80096b0:	b90b      	cbnz	r3, 80096b6 <_fflush_r+0x1a>
 80096b2:	f7fe ff97 	bl	80085e4 <__sinit>
 80096b6:	4b14      	ldr	r3, [pc, #80]	; (8009708 <_fflush_r+0x6c>)
 80096b8:	429c      	cmp	r4, r3
 80096ba:	d11b      	bne.n	80096f4 <_fflush_r+0x58>
 80096bc:	686c      	ldr	r4, [r5, #4]
 80096be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0ef      	beq.n	80096a6 <_fflush_r+0xa>
 80096c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096c8:	07d0      	lsls	r0, r2, #31
 80096ca:	d404      	bmi.n	80096d6 <_fflush_r+0x3a>
 80096cc:	0599      	lsls	r1, r3, #22
 80096ce:	d402      	bmi.n	80096d6 <_fflush_r+0x3a>
 80096d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096d2:	f7ff f82a 	bl	800872a <__retarget_lock_acquire_recursive>
 80096d6:	4628      	mov	r0, r5
 80096d8:	4621      	mov	r1, r4
 80096da:	f7ff ff59 	bl	8009590 <__sflush_r>
 80096de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096e0:	07da      	lsls	r2, r3, #31
 80096e2:	4605      	mov	r5, r0
 80096e4:	d4e0      	bmi.n	80096a8 <_fflush_r+0xc>
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	059b      	lsls	r3, r3, #22
 80096ea:	d4dd      	bmi.n	80096a8 <_fflush_r+0xc>
 80096ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ee:	f7ff f81d 	bl	800872c <__retarget_lock_release_recursive>
 80096f2:	e7d9      	b.n	80096a8 <_fflush_r+0xc>
 80096f4:	4b05      	ldr	r3, [pc, #20]	; (800970c <_fflush_r+0x70>)
 80096f6:	429c      	cmp	r4, r3
 80096f8:	d101      	bne.n	80096fe <_fflush_r+0x62>
 80096fa:	68ac      	ldr	r4, [r5, #8]
 80096fc:	e7df      	b.n	80096be <_fflush_r+0x22>
 80096fe:	4b04      	ldr	r3, [pc, #16]	; (8009710 <_fflush_r+0x74>)
 8009700:	429c      	cmp	r4, r3
 8009702:	bf08      	it	eq
 8009704:	68ec      	ldreq	r4, [r5, #12]
 8009706:	e7da      	b.n	80096be <_fflush_r+0x22>
 8009708:	08009d8c 	.word	0x08009d8c
 800970c:	08009dac 	.word	0x08009dac
 8009710:	08009d6c 	.word	0x08009d6c

08009714 <fiprintf>:
 8009714:	b40e      	push	{r1, r2, r3}
 8009716:	b503      	push	{r0, r1, lr}
 8009718:	4601      	mov	r1, r0
 800971a:	ab03      	add	r3, sp, #12
 800971c:	4805      	ldr	r0, [pc, #20]	; (8009734 <fiprintf+0x20>)
 800971e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009722:	6800      	ldr	r0, [r0, #0]
 8009724:	9301      	str	r3, [sp, #4]
 8009726:	f7ff fcaf 	bl	8009088 <_vfiprintf_r>
 800972a:	b002      	add	sp, #8
 800972c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009730:	b003      	add	sp, #12
 8009732:	4770      	bx	lr
 8009734:	20000010 	.word	0x20000010

08009738 <_lseek_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4d07      	ldr	r5, [pc, #28]	; (8009758 <_lseek_r+0x20>)
 800973c:	4604      	mov	r4, r0
 800973e:	4608      	mov	r0, r1
 8009740:	4611      	mov	r1, r2
 8009742:	2200      	movs	r2, #0
 8009744:	602a      	str	r2, [r5, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	f7f9 fdc8 	bl	80032dc <_lseek>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	d102      	bne.n	8009756 <_lseek_r+0x1e>
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	b103      	cbz	r3, 8009756 <_lseek_r+0x1e>
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	200008b0 	.word	0x200008b0

0800975c <__swhatbuf_r>:
 800975c:	b570      	push	{r4, r5, r6, lr}
 800975e:	460e      	mov	r6, r1
 8009760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009764:	2900      	cmp	r1, #0
 8009766:	b096      	sub	sp, #88	; 0x58
 8009768:	4614      	mov	r4, r2
 800976a:	461d      	mov	r5, r3
 800976c:	da08      	bge.n	8009780 <__swhatbuf_r+0x24>
 800976e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	602a      	str	r2, [r5, #0]
 8009776:	061a      	lsls	r2, r3, #24
 8009778:	d410      	bmi.n	800979c <__swhatbuf_r+0x40>
 800977a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800977e:	e00e      	b.n	800979e <__swhatbuf_r+0x42>
 8009780:	466a      	mov	r2, sp
 8009782:	f000 f895 	bl	80098b0 <_fstat_r>
 8009786:	2800      	cmp	r0, #0
 8009788:	dbf1      	blt.n	800976e <__swhatbuf_r+0x12>
 800978a:	9a01      	ldr	r2, [sp, #4]
 800978c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009790:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009794:	425a      	negs	r2, r3
 8009796:	415a      	adcs	r2, r3
 8009798:	602a      	str	r2, [r5, #0]
 800979a:	e7ee      	b.n	800977a <__swhatbuf_r+0x1e>
 800979c:	2340      	movs	r3, #64	; 0x40
 800979e:	2000      	movs	r0, #0
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	b016      	add	sp, #88	; 0x58
 80097a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080097a8 <__smakebuf_r>:
 80097a8:	898b      	ldrh	r3, [r1, #12]
 80097aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097ac:	079d      	lsls	r5, r3, #30
 80097ae:	4606      	mov	r6, r0
 80097b0:	460c      	mov	r4, r1
 80097b2:	d507      	bpl.n	80097c4 <__smakebuf_r+0x1c>
 80097b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	6123      	str	r3, [r4, #16]
 80097bc:	2301      	movs	r3, #1
 80097be:	6163      	str	r3, [r4, #20]
 80097c0:	b002      	add	sp, #8
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	ab01      	add	r3, sp, #4
 80097c6:	466a      	mov	r2, sp
 80097c8:	f7ff ffc8 	bl	800975c <__swhatbuf_r>
 80097cc:	9900      	ldr	r1, [sp, #0]
 80097ce:	4605      	mov	r5, r0
 80097d0:	4630      	mov	r0, r6
 80097d2:	f7ff fbbb 	bl	8008f4c <_malloc_r>
 80097d6:	b948      	cbnz	r0, 80097ec <__smakebuf_r+0x44>
 80097d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097dc:	059a      	lsls	r2, r3, #22
 80097de:	d4ef      	bmi.n	80097c0 <__smakebuf_r+0x18>
 80097e0:	f023 0303 	bic.w	r3, r3, #3
 80097e4:	f043 0302 	orr.w	r3, r3, #2
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	e7e3      	b.n	80097b4 <__smakebuf_r+0xc>
 80097ec:	4b0d      	ldr	r3, [pc, #52]	; (8009824 <__smakebuf_r+0x7c>)
 80097ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	6020      	str	r0, [r4, #0]
 80097f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	9b00      	ldr	r3, [sp, #0]
 80097fc:	6163      	str	r3, [r4, #20]
 80097fe:	9b01      	ldr	r3, [sp, #4]
 8009800:	6120      	str	r0, [r4, #16]
 8009802:	b15b      	cbz	r3, 800981c <__smakebuf_r+0x74>
 8009804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009808:	4630      	mov	r0, r6
 800980a:	f000 f863 	bl	80098d4 <_isatty_r>
 800980e:	b128      	cbz	r0, 800981c <__smakebuf_r+0x74>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	f023 0303 	bic.w	r3, r3, #3
 8009816:	f043 0301 	orr.w	r3, r3, #1
 800981a:	81a3      	strh	r3, [r4, #12]
 800981c:	89a0      	ldrh	r0, [r4, #12]
 800981e:	4305      	orrs	r5, r0
 8009820:	81a5      	strh	r5, [r4, #12]
 8009822:	e7cd      	b.n	80097c0 <__smakebuf_r+0x18>
 8009824:	0800857d 	.word	0x0800857d

08009828 <__ascii_mbtowc>:
 8009828:	b082      	sub	sp, #8
 800982a:	b901      	cbnz	r1, 800982e <__ascii_mbtowc+0x6>
 800982c:	a901      	add	r1, sp, #4
 800982e:	b142      	cbz	r2, 8009842 <__ascii_mbtowc+0x1a>
 8009830:	b14b      	cbz	r3, 8009846 <__ascii_mbtowc+0x1e>
 8009832:	7813      	ldrb	r3, [r2, #0]
 8009834:	600b      	str	r3, [r1, #0]
 8009836:	7812      	ldrb	r2, [r2, #0]
 8009838:	1e10      	subs	r0, r2, #0
 800983a:	bf18      	it	ne
 800983c:	2001      	movne	r0, #1
 800983e:	b002      	add	sp, #8
 8009840:	4770      	bx	lr
 8009842:	4610      	mov	r0, r2
 8009844:	e7fb      	b.n	800983e <__ascii_mbtowc+0x16>
 8009846:	f06f 0001 	mvn.w	r0, #1
 800984a:	e7f8      	b.n	800983e <__ascii_mbtowc+0x16>

0800984c <__malloc_lock>:
 800984c:	4801      	ldr	r0, [pc, #4]	; (8009854 <__malloc_lock+0x8>)
 800984e:	f7fe bf6c 	b.w	800872a <__retarget_lock_acquire_recursive>
 8009852:	bf00      	nop
 8009854:	200008a4 	.word	0x200008a4

08009858 <__malloc_unlock>:
 8009858:	4801      	ldr	r0, [pc, #4]	; (8009860 <__malloc_unlock+0x8>)
 800985a:	f7fe bf67 	b.w	800872c <__retarget_lock_release_recursive>
 800985e:	bf00      	nop
 8009860:	200008a4 	.word	0x200008a4

08009864 <_read_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4d07      	ldr	r5, [pc, #28]	; (8009884 <_read_r+0x20>)
 8009868:	4604      	mov	r4, r0
 800986a:	4608      	mov	r0, r1
 800986c:	4611      	mov	r1, r2
 800986e:	2200      	movs	r2, #0
 8009870:	602a      	str	r2, [r5, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	f7f9 fcee 	bl	8003254 <_read>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_read_r+0x1e>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_read_r+0x1e>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	200008b0 	.word	0x200008b0

08009888 <__ascii_wctomb>:
 8009888:	b149      	cbz	r1, 800989e <__ascii_wctomb+0x16>
 800988a:	2aff      	cmp	r2, #255	; 0xff
 800988c:	bf85      	ittet	hi
 800988e:	238a      	movhi	r3, #138	; 0x8a
 8009890:	6003      	strhi	r3, [r0, #0]
 8009892:	700a      	strbls	r2, [r1, #0]
 8009894:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009898:	bf98      	it	ls
 800989a:	2001      	movls	r0, #1
 800989c:	4770      	bx	lr
 800989e:	4608      	mov	r0, r1
 80098a0:	4770      	bx	lr

080098a2 <abort>:
 80098a2:	b508      	push	{r3, lr}
 80098a4:	2006      	movs	r0, #6
 80098a6:	f000 f84d 	bl	8009944 <raise>
 80098aa:	2001      	movs	r0, #1
 80098ac:	f7f9 fcc8 	bl	8003240 <_exit>

080098b0 <_fstat_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	4d07      	ldr	r5, [pc, #28]	; (80098d0 <_fstat_r+0x20>)
 80098b4:	2300      	movs	r3, #0
 80098b6:	4604      	mov	r4, r0
 80098b8:	4608      	mov	r0, r1
 80098ba:	4611      	mov	r1, r2
 80098bc:	602b      	str	r3, [r5, #0]
 80098be:	f7f9 fcf2 	bl	80032a6 <_fstat>
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	d102      	bne.n	80098cc <_fstat_r+0x1c>
 80098c6:	682b      	ldr	r3, [r5, #0]
 80098c8:	b103      	cbz	r3, 80098cc <_fstat_r+0x1c>
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	bd38      	pop	{r3, r4, r5, pc}
 80098ce:	bf00      	nop
 80098d0:	200008b0 	.word	0x200008b0

080098d4 <_isatty_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d06      	ldr	r5, [pc, #24]	; (80098f0 <_isatty_r+0x1c>)
 80098d8:	2300      	movs	r3, #0
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	f7f9 fcf1 	bl	80032c6 <_isatty>
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	d102      	bne.n	80098ee <_isatty_r+0x1a>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	b103      	cbz	r3, 80098ee <_isatty_r+0x1a>
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
 80098f0:	200008b0 	.word	0x200008b0

080098f4 <_raise_r>:
 80098f4:	291f      	cmp	r1, #31
 80098f6:	b538      	push	{r3, r4, r5, lr}
 80098f8:	4604      	mov	r4, r0
 80098fa:	460d      	mov	r5, r1
 80098fc:	d904      	bls.n	8009908 <_raise_r+0x14>
 80098fe:	2316      	movs	r3, #22
 8009900:	6003      	str	r3, [r0, #0]
 8009902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800990a:	b112      	cbz	r2, 8009912 <_raise_r+0x1e>
 800990c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009910:	b94b      	cbnz	r3, 8009926 <_raise_r+0x32>
 8009912:	4620      	mov	r0, r4
 8009914:	f000 f830 	bl	8009978 <_getpid_r>
 8009918:	462a      	mov	r2, r5
 800991a:	4601      	mov	r1, r0
 800991c:	4620      	mov	r0, r4
 800991e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009922:	f000 b817 	b.w	8009954 <_kill_r>
 8009926:	2b01      	cmp	r3, #1
 8009928:	d00a      	beq.n	8009940 <_raise_r+0x4c>
 800992a:	1c59      	adds	r1, r3, #1
 800992c:	d103      	bne.n	8009936 <_raise_r+0x42>
 800992e:	2316      	movs	r3, #22
 8009930:	6003      	str	r3, [r0, #0]
 8009932:	2001      	movs	r0, #1
 8009934:	e7e7      	b.n	8009906 <_raise_r+0x12>
 8009936:	2400      	movs	r4, #0
 8009938:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800993c:	4628      	mov	r0, r5
 800993e:	4798      	blx	r3
 8009940:	2000      	movs	r0, #0
 8009942:	e7e0      	b.n	8009906 <_raise_r+0x12>

08009944 <raise>:
 8009944:	4b02      	ldr	r3, [pc, #8]	; (8009950 <raise+0xc>)
 8009946:	4601      	mov	r1, r0
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	f7ff bfd3 	b.w	80098f4 <_raise_r>
 800994e:	bf00      	nop
 8009950:	20000010 	.word	0x20000010

08009954 <_kill_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4d07      	ldr	r5, [pc, #28]	; (8009974 <_kill_r+0x20>)
 8009958:	2300      	movs	r3, #0
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	4611      	mov	r1, r2
 8009960:	602b      	str	r3, [r5, #0]
 8009962:	f7f9 fc5d 	bl	8003220 <_kill>
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	d102      	bne.n	8009970 <_kill_r+0x1c>
 800996a:	682b      	ldr	r3, [r5, #0]
 800996c:	b103      	cbz	r3, 8009970 <_kill_r+0x1c>
 800996e:	6023      	str	r3, [r4, #0]
 8009970:	bd38      	pop	{r3, r4, r5, pc}
 8009972:	bf00      	nop
 8009974:	200008b0 	.word	0x200008b0

08009978 <_getpid_r>:
 8009978:	f7f9 bc4a 	b.w	8003210 <_getpid>

0800997c <sqrt>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	ed2d 8b02 	vpush	{d8}
 8009982:	ec55 4b10 	vmov	r4, r5, d0
 8009986:	f000 f825 	bl	80099d4 <__ieee754_sqrt>
 800998a:	4622      	mov	r2, r4
 800998c:	462b      	mov	r3, r5
 800998e:	4620      	mov	r0, r4
 8009990:	4629      	mov	r1, r5
 8009992:	eeb0 8a40 	vmov.f32	s16, s0
 8009996:	eef0 8a60 	vmov.f32	s17, s1
 800999a:	f7f7 f8df 	bl	8000b5c <__aeabi_dcmpun>
 800999e:	b990      	cbnz	r0, 80099c6 <sqrt+0x4a>
 80099a0:	2200      	movs	r2, #0
 80099a2:	2300      	movs	r3, #0
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f7f7 f8b0 	bl	8000b0c <__aeabi_dcmplt>
 80099ac:	b158      	cbz	r0, 80099c6 <sqrt+0x4a>
 80099ae:	f7fd f92b 	bl	8006c08 <__errno>
 80099b2:	2321      	movs	r3, #33	; 0x21
 80099b4:	6003      	str	r3, [r0, #0]
 80099b6:	2200      	movs	r2, #0
 80099b8:	2300      	movs	r3, #0
 80099ba:	4610      	mov	r0, r2
 80099bc:	4619      	mov	r1, r3
 80099be:	f7f6 ff5d 	bl	800087c <__aeabi_ddiv>
 80099c2:	ec41 0b18 	vmov	d8, r0, r1
 80099c6:	eeb0 0a48 	vmov.f32	s0, s16
 80099ca:	eef0 0a68 	vmov.f32	s1, s17
 80099ce:	ecbd 8b02 	vpop	{d8}
 80099d2:	bd38      	pop	{r3, r4, r5, pc}

080099d4 <__ieee754_sqrt>:
 80099d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d8:	ec55 4b10 	vmov	r4, r5, d0
 80099dc:	4e55      	ldr	r6, [pc, #340]	; (8009b34 <__ieee754_sqrt+0x160>)
 80099de:	43ae      	bics	r6, r5
 80099e0:	ee10 0a10 	vmov	r0, s0
 80099e4:	ee10 3a10 	vmov	r3, s0
 80099e8:	462a      	mov	r2, r5
 80099ea:	4629      	mov	r1, r5
 80099ec:	d110      	bne.n	8009a10 <__ieee754_sqrt+0x3c>
 80099ee:	ee10 2a10 	vmov	r2, s0
 80099f2:	462b      	mov	r3, r5
 80099f4:	f7f6 fe18 	bl	8000628 <__aeabi_dmul>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4620      	mov	r0, r4
 80099fe:	4629      	mov	r1, r5
 8009a00:	f7f6 fc5c 	bl	80002bc <__adddf3>
 8009a04:	4604      	mov	r4, r0
 8009a06:	460d      	mov	r5, r1
 8009a08:	ec45 4b10 	vmov	d0, r4, r5
 8009a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a10:	2d00      	cmp	r5, #0
 8009a12:	dc10      	bgt.n	8009a36 <__ieee754_sqrt+0x62>
 8009a14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009a18:	4330      	orrs	r0, r6
 8009a1a:	d0f5      	beq.n	8009a08 <__ieee754_sqrt+0x34>
 8009a1c:	b15d      	cbz	r5, 8009a36 <__ieee754_sqrt+0x62>
 8009a1e:	ee10 2a10 	vmov	r2, s0
 8009a22:	462b      	mov	r3, r5
 8009a24:	ee10 0a10 	vmov	r0, s0
 8009a28:	f7f6 fc46 	bl	80002b8 <__aeabi_dsub>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	f7f6 ff24 	bl	800087c <__aeabi_ddiv>
 8009a34:	e7e6      	b.n	8009a04 <__ieee754_sqrt+0x30>
 8009a36:	1512      	asrs	r2, r2, #20
 8009a38:	d074      	beq.n	8009b24 <__ieee754_sqrt+0x150>
 8009a3a:	07d4      	lsls	r4, r2, #31
 8009a3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009a40:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009a44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009a48:	bf5e      	ittt	pl
 8009a4a:	0fda      	lsrpl	r2, r3, #31
 8009a4c:	005b      	lslpl	r3, r3, #1
 8009a4e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009a52:	2400      	movs	r4, #0
 8009a54:	0fda      	lsrs	r2, r3, #31
 8009a56:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009a5a:	107f      	asrs	r7, r7, #1
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	2516      	movs	r5, #22
 8009a60:	4620      	mov	r0, r4
 8009a62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009a66:	1886      	adds	r6, r0, r2
 8009a68:	428e      	cmp	r6, r1
 8009a6a:	bfde      	ittt	le
 8009a6c:	1b89      	suble	r1, r1, r6
 8009a6e:	18b0      	addle	r0, r6, r2
 8009a70:	18a4      	addle	r4, r4, r2
 8009a72:	0049      	lsls	r1, r1, #1
 8009a74:	3d01      	subs	r5, #1
 8009a76:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009a7a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009a7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a82:	d1f0      	bne.n	8009a66 <__ieee754_sqrt+0x92>
 8009a84:	462a      	mov	r2, r5
 8009a86:	f04f 0e20 	mov.w	lr, #32
 8009a8a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009a8e:	4281      	cmp	r1, r0
 8009a90:	eb06 0c05 	add.w	ip, r6, r5
 8009a94:	dc02      	bgt.n	8009a9c <__ieee754_sqrt+0xc8>
 8009a96:	d113      	bne.n	8009ac0 <__ieee754_sqrt+0xec>
 8009a98:	459c      	cmp	ip, r3
 8009a9a:	d811      	bhi.n	8009ac0 <__ieee754_sqrt+0xec>
 8009a9c:	f1bc 0f00 	cmp.w	ip, #0
 8009aa0:	eb0c 0506 	add.w	r5, ip, r6
 8009aa4:	da43      	bge.n	8009b2e <__ieee754_sqrt+0x15a>
 8009aa6:	2d00      	cmp	r5, #0
 8009aa8:	db41      	blt.n	8009b2e <__ieee754_sqrt+0x15a>
 8009aaa:	f100 0801 	add.w	r8, r0, #1
 8009aae:	1a09      	subs	r1, r1, r0
 8009ab0:	459c      	cmp	ip, r3
 8009ab2:	bf88      	it	hi
 8009ab4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009ab8:	eba3 030c 	sub.w	r3, r3, ip
 8009abc:	4432      	add	r2, r6
 8009abe:	4640      	mov	r0, r8
 8009ac0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009ac4:	f1be 0e01 	subs.w	lr, lr, #1
 8009ac8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ad0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009ad4:	d1db      	bne.n	8009a8e <__ieee754_sqrt+0xba>
 8009ad6:	430b      	orrs	r3, r1
 8009ad8:	d006      	beq.n	8009ae8 <__ieee754_sqrt+0x114>
 8009ada:	1c50      	adds	r0, r2, #1
 8009adc:	bf13      	iteet	ne
 8009ade:	3201      	addne	r2, #1
 8009ae0:	3401      	addeq	r4, #1
 8009ae2:	4672      	moveq	r2, lr
 8009ae4:	f022 0201 	bicne.w	r2, r2, #1
 8009ae8:	1063      	asrs	r3, r4, #1
 8009aea:	0852      	lsrs	r2, r2, #1
 8009aec:	07e1      	lsls	r1, r4, #31
 8009aee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009af2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009af6:	bf48      	it	mi
 8009af8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009afc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009b00:	4614      	mov	r4, r2
 8009b02:	e781      	b.n	8009a08 <__ieee754_sqrt+0x34>
 8009b04:	0ad9      	lsrs	r1, r3, #11
 8009b06:	3815      	subs	r0, #21
 8009b08:	055b      	lsls	r3, r3, #21
 8009b0a:	2900      	cmp	r1, #0
 8009b0c:	d0fa      	beq.n	8009b04 <__ieee754_sqrt+0x130>
 8009b0e:	02cd      	lsls	r5, r1, #11
 8009b10:	d50a      	bpl.n	8009b28 <__ieee754_sqrt+0x154>
 8009b12:	f1c2 0420 	rsb	r4, r2, #32
 8009b16:	fa23 f404 	lsr.w	r4, r3, r4
 8009b1a:	1e55      	subs	r5, r2, #1
 8009b1c:	4093      	lsls	r3, r2
 8009b1e:	4321      	orrs	r1, r4
 8009b20:	1b42      	subs	r2, r0, r5
 8009b22:	e78a      	b.n	8009a3a <__ieee754_sqrt+0x66>
 8009b24:	4610      	mov	r0, r2
 8009b26:	e7f0      	b.n	8009b0a <__ieee754_sqrt+0x136>
 8009b28:	0049      	lsls	r1, r1, #1
 8009b2a:	3201      	adds	r2, #1
 8009b2c:	e7ef      	b.n	8009b0e <__ieee754_sqrt+0x13a>
 8009b2e:	4680      	mov	r8, r0
 8009b30:	e7bd      	b.n	8009aae <__ieee754_sqrt+0xda>
 8009b32:	bf00      	nop
 8009b34:	7ff00000 	.word	0x7ff00000

08009b38 <_init>:
 8009b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3a:	bf00      	nop
 8009b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b3e:	bc08      	pop	{r3}
 8009b40:	469e      	mov	lr, r3
 8009b42:	4770      	bx	lr

08009b44 <_fini>:
 8009b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b46:	bf00      	nop
 8009b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4a:	bc08      	pop	{r3}
 8009b4c:	469e      	mov	lr, r3
 8009b4e:	4770      	bx	lr
