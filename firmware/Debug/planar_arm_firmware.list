
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000919c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08009340  08009340  00019340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c0  080097c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080097c0  080097c0  000197c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c8  080097c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080097d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  20000074  08009844  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  08009844  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107d2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002433  00000000  00000000  00030876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00032cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00033b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176aa  00000000  00000000  000348b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010202  00000000  00000000  0004bf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905a7  00000000  00000000  0005c164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec70b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf4  00000000  00000000  000ec75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009324 	.word	0x08009324

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08009324 	.word	0x08009324

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c90:	f000 b974 	b.w	8000f7c <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9d08      	ldr	r5, [sp, #32]
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	468e      	mov	lr, r1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d14d      	bne.n	8000d56 <__udivmoddi4+0xaa>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	d969      	bls.n	8000d94 <__udivmoddi4+0xe8>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b152      	cbz	r2, 8000cdc <__udivmoddi4+0x30>
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	f1c2 0120 	rsb	r1, r2, #32
 8000cce:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cda:	4094      	lsls	r4, r2
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	0c21      	lsrs	r1, r4, #16
 8000ce2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce6:	fa1f f78c 	uxth.w	r7, ip
 8000cea:	fb08 e316 	mls	r3, r8, r6, lr
 8000cee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cf2:	fb06 f107 	mul.w	r1, r6, r7
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d02:	f080 811f 	bcs.w	8000f44 <__udivmoddi4+0x298>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 811c 	bls.w	8000f44 <__udivmoddi4+0x298>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d18:	fb08 3310 	mls	r3, r8, r0, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb00 f707 	mul.w	r7, r0, r7
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	d90a      	bls.n	8000d3e <__udivmoddi4+0x92>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d30:	f080 810a 	bcs.w	8000f48 <__udivmoddi4+0x29c>
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	f240 8107 	bls.w	8000f48 <__udivmoddi4+0x29c>
 8000d3a:	4464      	add	r4, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	1be4      	subs	r4, r4, r7
 8000d44:	2600      	movs	r6, #0
 8000d46:	b11d      	cbz	r5, 8000d50 <__udivmoddi4+0xa4>
 8000d48:	40d4      	lsrs	r4, r2
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0xc2>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80ef 	beq.w	8000f3e <__udivmoddi4+0x292>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x160>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xd4>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80f9 	bhi.w	8000f72 <__udivmoddi4+0x2c6>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0303 	sbc.w	r3, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	469e      	mov	lr, r3
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e0      	beq.n	8000d50 <__udivmoddi4+0xa4>
 8000d8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d92:	e7dd      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000d94:	b902      	cbnz	r2, 8000d98 <__udivmoddi4+0xec>
 8000d96:	deff      	udf	#255	; 0xff
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	f040 8092 	bne.w	8000ec6 <__udivmoddi4+0x21a>
 8000da2:	eba1 010c 	sub.w	r1, r1, ip
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f fe8c 	uxth.w	lr, ip
 8000dae:	2601      	movs	r6, #1
 8000db0:	0c20      	lsrs	r0, r4, #16
 8000db2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbe:	fb0e f003 	mul.w	r0, lr, r3
 8000dc2:	4288      	cmp	r0, r1
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x12c>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x12a>
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	f200 80cb 	bhi.w	8000f6c <__udivmoddi4+0x2c0>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	1a09      	subs	r1, r1, r0
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de0:	fb07 1110 	mls	r1, r7, r0, r1
 8000de4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x156>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x154>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f200 80bb 	bhi.w	8000f76 <__udivmoddi4+0x2ca>
 8000e00:	4608      	mov	r0, r1
 8000e02:	eba4 040e 	sub.w	r4, r4, lr
 8000e06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0a:	e79c      	b.n	8000d46 <__udivmoddi4+0x9a>
 8000e0c:	f1c6 0720 	rsb	r7, r6, #32
 8000e10:	40b3      	lsls	r3, r6
 8000e12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	40f9      	lsrs	r1, r7
 8000e26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e32:	0c20      	lsrs	r0, r4, #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fb09 1118 	mls	r1, r9, r8, r1
 8000e3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e40:	fb08 f00e 	mul.w	r0, r8, lr
 8000e44:	4288      	cmp	r0, r1
 8000e46:	fa02 f206 	lsl.w	r2, r2, r6
 8000e4a:	d90b      	bls.n	8000e64 <__udivmoddi4+0x1b8>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e54:	f080 8088 	bcs.w	8000f68 <__udivmoddi4+0x2bc>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f240 8085 	bls.w	8000f68 <__udivmoddi4+0x2bc>
 8000e5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	458e      	cmp	lr, r1
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x1e2>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e84:	d26c      	bcs.n	8000f60 <__udivmoddi4+0x2b4>
 8000e86:	458e      	cmp	lr, r1
 8000e88:	d96a      	bls.n	8000f60 <__udivmoddi4+0x2b4>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4461      	add	r1, ip
 8000e8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e92:	fba0 9402 	umull	r9, r4, r0, r2
 8000e96:	eba1 010e 	sub.w	r1, r1, lr
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	46c8      	mov	r8, r9
 8000e9e:	46a6      	mov	lr, r4
 8000ea0:	d356      	bcc.n	8000f50 <__udivmoddi4+0x2a4>
 8000ea2:	d053      	beq.n	8000f4c <__udivmoddi4+0x2a0>
 8000ea4:	b15d      	cbz	r5, 8000ebe <__udivmoddi4+0x212>
 8000ea6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000eae:	fa01 f707 	lsl.w	r7, r1, r7
 8000eb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb6:	40f1      	lsrs	r1, r6
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	e9c5 7100 	strd	r7, r1, [r5]
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	f1c2 0320 	rsb	r3, r2, #32
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee8:	0c0b      	lsrs	r3, r1, #16
 8000eea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eee:	fb00 f60e 	mul.w	r6, r0, lr
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x260>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f02:	d22f      	bcs.n	8000f64 <__udivmoddi4+0x2b8>
 8000f04:	429e      	cmp	r6, r3
 8000f06:	d92d      	bls.n	8000f64 <__udivmoddi4+0x2b8>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	1b9b      	subs	r3, r3, r6
 8000f0e:	b289      	uxth	r1, r1
 8000f10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f14:	fb07 3316 	mls	r3, r7, r6, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x28a>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f2c:	d216      	bcs.n	8000f5c <__udivmoddi4+0x2b0>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d914      	bls.n	8000f5c <__udivmoddi4+0x2b0>
 8000f32:	3e02      	subs	r6, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f3c:	e738      	b.n	8000db0 <__udivmoddi4+0x104>
 8000f3e:	462e      	mov	r6, r5
 8000f40:	4628      	mov	r0, r5
 8000f42:	e705      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000f44:	4606      	mov	r6, r0
 8000f46:	e6e3      	b.n	8000d10 <__udivmoddi4+0x64>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6f8      	b.n	8000d3e <__udivmoddi4+0x92>
 8000f4c:	454b      	cmp	r3, r9
 8000f4e:	d2a9      	bcs.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f50:	ebb9 0802 	subs.w	r8, r9, r2
 8000f54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f58:	3801      	subs	r0, #1
 8000f5a:	e7a3      	b.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f5c:	4646      	mov	r6, r8
 8000f5e:	e7ea      	b.n	8000f36 <__udivmoddi4+0x28a>
 8000f60:	4620      	mov	r0, r4
 8000f62:	e794      	b.n	8000e8e <__udivmoddi4+0x1e2>
 8000f64:	4640      	mov	r0, r8
 8000f66:	e7d1      	b.n	8000f0c <__udivmoddi4+0x260>
 8000f68:	46d0      	mov	r8, sl
 8000f6a:	e77b      	b.n	8000e64 <__udivmoddi4+0x1b8>
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	e732      	b.n	8000dd8 <__udivmoddi4+0x12c>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e709      	b.n	8000d8a <__udivmoddi4+0xde>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	e742      	b.n	8000e02 <__udivmoddi4+0x156>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <HAL_UART_RxCpltCallback>:
float ddq_actual0, ddq_actual1;
uint32_t count = 0;
int limit_switch = 1;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b08b      	sub	sp, #44	; 0x2c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    char *cmd, *data;
    double value;
    unsigned long long encoding;
    uint8_t i = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /* read the first characters */
    cmd = strtok((char*) rx_data, ":");
 8000f8e:	492d      	ldr	r1, [pc, #180]	; (8001044 <HAL_UART_RxCpltCallback+0xc4>)
 8000f90:	482d      	ldr	r0, [pc, #180]	; (8001048 <HAL_UART_RxCpltCallback+0xc8>)
 8000f92:	f005 ffa5 	bl	8006ee0 <strtok>
 8000f96:	61f8      	str	r0, [r7, #28]
    if(strcmp(cmd, "TRJ")){ /* trj case*/
 8000f98:	492c      	ldr	r1, [pc, #176]	; (800104c <HAL_UART_RxCpltCallback+0xcc>)
 8000f9a:	69f8      	ldr	r0, [r7, #28]
 8000f9c:	f7ff f920 	bl	80001e0 <strcmp>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d044      	beq.n	8001030 <HAL_UART_RxCpltCallback+0xb0>
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        data = strtok(NULL, ":");
 8000fa6:	4927      	ldr	r1, [pc, #156]	; (8001044 <HAL_UART_RxCpltCallback+0xc4>)
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f005 ff99 	bl	8006ee0 <strtok>
 8000fae:	6278      	str	r0, [r7, #36]	; 0x24
        while(data != NULL){
 8000fb0:	e02d      	b.n	800100e <HAL_UART_RxCpltCallback+0x8e>
            if(i == 6) break; /* reading penup */
 8000fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d02d      	beq.n	8001016 <HAL_UART_RxCpltCallback+0x96>
            // value = "0x"; /* will contain the value extracted from the received string */
            encoding = strtoull(data, NULL, 16);
 8000fba:	2210      	movs	r2, #16
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fc0:	f006 f90e 	bl	80071e0 <strtoull>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
            memcpy(&value, &encoding, sizeof value);
 8000fd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // value = strcat(value, data); /* string concatenation REF: https://www.programiz.com/c-programming/library-function/string.h/strcat */
            rbpush((((ringbuffer_t *) &manip)+i), (float) value); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 8000fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fd8:	222c      	movs	r2, #44	; 0x2c
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <HAL_UART_RxCpltCallback+0xd0>)
 8000fe0:	189c      	adds	r4, r3, r2
 8000fe2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fdf7 	bl	8000bdc <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	ee00 3a10 	vmov	s0, r3
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f001 fe6b 	bl	8002cd0 <rbpush>
            data = strtok(NULL, ":");
 8000ffa:	4912      	ldr	r1, [pc, #72]	; (8001044 <HAL_UART_RxCpltCallback+0xc4>)
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f005 ff6f 	bl	8006ee0 <strtok>
 8001002:	6278      	str	r0, [r7, #36]	; 0x24
            i++;
 8001004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001008:	3301      	adds	r3, #1
 800100a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        while(data != NULL){
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1ce      	bne.n	8000fb2 <HAL_UART_RxCpltCallback+0x32>
 8001014:	e000      	b.n	8001018 <HAL_UART_RxCpltCallback+0x98>
            if(i == 6) break; /* reading penup */
 8001016:	bf00      	nop
        }
        rbpush(&manip.penup, (float) atoi(data));
 8001018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800101a:	f005 ff2b 	bl	8006e74 <atoi>
 800101e:	ee07 0a90 	vmov	s15, r0
 8001022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001026:	eeb0 0a67 	vmov.f32	s0, s15
 800102a:	480a      	ldr	r0, [pc, #40]	; (8001054 <HAL_UART_RxCpltCallback+0xd4>)
 800102c:	f001 fe50 	bl	8002cd0 <rbpush>
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(huart, rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	4905      	ldr	r1, [pc, #20]	; (8001048 <HAL_UART_RxCpltCallback+0xc8>)
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f004 fe68 	bl	8005d0a <HAL_UART_Receive_DMA>
}
 800103a:	bf00      	nop
 800103c:	372c      	adds	r7, #44	; 0x2c
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}
 8001042:	bf00      	nop
 8001044:	08009340 	.word	0x08009340
 8001048:	20000090 	.word	0x20000090
 800104c:	08009344 	.word	0x08009344
 8001050:	20000110 	.word	0x20000110
 8001054:	20000218 	.word	0x20000218

08001058 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
    // TODO: Implement limit switch handling
    uint32_t now;
    now = HAL_GetTick();
 8001062:	f002 fb5b 	bl	800371c <HAL_GetTick>
 8001066:	60f8      	str	r0, [r7, #12]
    if((now - previous_trigger) > DEBOUNCE_DELAY){
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_GPIO_EXTI_Callback+0x54>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b32      	cmp	r3, #50	; 0x32
 8001072:	d916      	bls.n	80010a2 <HAL_GPIO_EXTI_Callback+0x4a>
        if(!triggered){
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d108      	bne.n	800108e <HAL_GPIO_EXTI_Callback+0x36>
          limit_switch *= -1;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	425b      	negs	r3, r3
 8001082:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001084:	6013      	str	r3, [r2, #0]
            // SECTION - DEBUG
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001086:	2120      	movs	r1, #32
 8001088:	480b      	ldr	r0, [pc, #44]	; (80010b8 <HAL_GPIO_EXTI_Callback+0x60>)
 800108a:	f003 fa28 	bl	80044de <HAL_GPIO_TogglePin>
            // !SECTION - DEBUG
        }
        triggered = 1-triggered;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	f1c3 0301 	rsb	r3, r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x58>)
 800109a:	701a      	strb	r2, [r3, #0]
        previous_trigger = now;
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <HAL_GPIO_EXTI_Callback+0x54>)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6013      	str	r3, [r2, #0]
    }
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200003a0 	.word	0x200003a0
 80010b0:	200003a4 	.word	0x200003a4
 80010b4:	20000000 	.word	0x20000000
 80010b8:	40020000 	.word	0x40020000

080010bc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d102      	bne.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x18>
		/* check if it is the proper instance */
		read_encoders(&manip);
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010d0:	f000 ffca 	bl	8002068 <read_encoders>

	}
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40014400 	.word	0x40014400
 80010e0:	20000110 	.word	0x20000110

080010e4 <init_man>:
- TIM_HandleTypeDef *htim2: pointer to the timer used to decode the output of the second encode;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip, TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 80010f0:	2300      	movs	r3, #0
 80010f2:	75fb      	strb	r3, [r7, #23]
 80010f4:	e00b      	b.n	800110e <init_man+0x2a>
        rbclear((((ringbuffer_t *) manip)+i));
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	222c      	movs	r2, #44	; 0x2c
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f001 fede 	bl	8002ec4 <rbclear>
    for(i = 0; i < 14; i++){
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	3301      	adds	r3, #1
 800110c:	75fb      	strb	r3, [r7, #23]
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	2b0d      	cmp	r3, #13
 8001112:	d9f0      	bls.n	80010f6 <init_man+0x12>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 8001114:	2300      	movs	r3, #0
 8001116:	75fb      	strb	r3, [r7, #23]
 8001118:	e012      	b.n	8001140 <init_man+0x5c>
        manip->B[i] = (float) 0;
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	339a      	adds	r3, #154	; 0x9a
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
        manip->C[i] = (float) 0;
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	339e      	adds	r3, #158	; 0x9e
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 4; i++){
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	3301      	adds	r3, #1
 800113e:	75fb      	strb	r3, [r7, #23]
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d9e9      	bls.n	800111a <init_man+0x36>
    }
    manip->htim_encoder1 = htim1;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    manip->htim_encoder2 = htim2;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <dot>:
- float *C: pointer to a vector of floats of size nA*mB, which represents the resulting nAxmB matrix -> if the operation cannot be done, it will be NULL;
@outputs: 
- uint8_t: 0 or 1 that shows whether the operation completed successfully or not.
@#
*/
uint8_t dot(float *A, uint8_t nA, uint8_t mA, float* B, uint8_t nB, uint8_t mB, float* C){ /* nAxmA * nBxmB dot product */
 800115e:	b480      	push	{r7}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	72fb      	strb	r3, [r7, #11]
 800116c:	4613      	mov	r3, r2
 800116e:	72bb      	strb	r3, [r7, #10]
        this method exists just to make the code more readable and understand what each
        operation actually does instead of having meaningless calculations */
    
    /* C[i, j] = \sum_k A[i, k]*B[k, j] */
    /* given n rows and m columns, the matrix indexes i, j correspond to j+i*m array index */
    if(mA != nB){
 8001170:	7aba      	ldrb	r2, [r7, #10]
 8001172:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001176:	429a      	cmp	r2, r3
 8001178:	d003      	beq.n	8001182 <dot+0x24>
        C = NULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
        return 0; /* matrix multiplication cannot be done */
 800117e:	2300      	movs	r3, #0
 8001180:	e067      	b.n	8001252 <dot+0xf4>
    }
    uint8_t i, j, k;
    for(i = 0; i < nA*mB; i++){
 8001182:	2300      	movs	r3, #0
 8001184:	75fb      	strb	r3, [r7, #23]
 8001186:	e009      	b.n	800119c <dot+0x3e>
        C[i] = (float) 0.0;
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800118e:	4413      	add	r3, r2
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
    for(i = 0; i < nA*mB; i++){
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	3301      	adds	r3, #1
 800119a:	75fb      	strb	r3, [r7, #23]
 800119c:	7dfa      	ldrb	r2, [r7, #23]
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80011a4:	fb01 f303 	mul.w	r3, r1, r3
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dbed      	blt.n	8001188 <dot+0x2a>
    }

    for( i = 0; i < nA; i++){
 80011ac:	2300      	movs	r3, #0
 80011ae:	75fb      	strb	r3, [r7, #23]
 80011b0:	e04a      	b.n	8001248 <dot+0xea>
        for( j = 0; j < mB; j++){
 80011b2:	2300      	movs	r3, #0
 80011b4:	75bb      	strb	r3, [r7, #22]
 80011b6:	e03f      	b.n	8001238 <dot+0xda>
            for( k = 0; k < mA; k++){
 80011b8:	2300      	movs	r3, #0
 80011ba:	757b      	strb	r3, [r7, #21]
 80011bc:	e035      	b.n	800122a <dot+0xcc>
                C[j+i*mB] += (float) (A[k+i*mA]*B[j+k*mB]);
 80011be:	7dba      	ldrb	r2, [r7, #22]
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80011c6:	fb01 f303 	mul.w	r3, r1, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011d0:	4413      	add	r3, r2
 80011d2:	ed93 7a00 	vldr	s14, [r3]
 80011d6:	7d7a      	ldrb	r2, [r7, #21]
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	7ab9      	ldrb	r1, [r7, #10]
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	edd3 6a00 	vldr	s13, [r3]
 80011ec:	7dba      	ldrb	r2, [r7, #22]
 80011ee:	7d7b      	ldrb	r3, [r7, #21]
 80011f0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80011f4:	fb01 f303 	mul.w	r3, r1, r3
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001208:	7dba      	ldrb	r2, [r7, #22]
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001210:	fb01 f303 	mul.w	r3, r1, r3
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800121a:	4413      	add	r3, r2
 800121c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001220:	edc3 7a00 	vstr	s15, [r3]
            for( k = 0; k < mA; k++){
 8001224:	7d7b      	ldrb	r3, [r7, #21]
 8001226:	3301      	adds	r3, #1
 8001228:	757b      	strb	r3, [r7, #21]
 800122a:	7d7a      	ldrb	r2, [r7, #21]
 800122c:	7abb      	ldrb	r3, [r7, #10]
 800122e:	429a      	cmp	r2, r3
 8001230:	d3c5      	bcc.n	80011be <dot+0x60>
        for( j = 0; j < mB; j++){
 8001232:	7dbb      	ldrb	r3, [r7, #22]
 8001234:	3301      	adds	r3, #1
 8001236:	75bb      	strb	r3, [r7, #22]
 8001238:	7dba      	ldrb	r2, [r7, #22]
 800123a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800123e:	429a      	cmp	r2, r3
 8001240:	d3ba      	bcc.n	80011b8 <dot+0x5a>
    for( i = 0; i < nA; i++){
 8001242:	7dfb      	ldrb	r3, [r7, #23]
 8001244:	3301      	adds	r3, #1
 8001246:	75fb      	strb	r3, [r7, #23]
 8001248:	7dfa      	ldrb	r2, [r7, #23]
 800124a:	7afb      	ldrb	r3, [r7, #11]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3b0      	bcc.n	80011b2 <dot+0x54>
            }
        }
    }
    return 1; // matrix multiplication successfully completed
 8001250:	2301      	movs	r3, #1
}
 8001252:	4618      	mov	r0, r3
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <inv2x2>:
- float *invM: pointer to the inverted matrix (NULL if inversion is not possible);
@outputs: 
- uint8_t: shows whether the inversion was completed or not
@#
*/
uint8_t inv2x2(float *M, float *invM){
 800125e:	b480      	push	{r7}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
    float d = DET(M);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a00 	vldr	s14, [r3]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	330c      	adds	r3, #12
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3304      	adds	r3, #4
 800127e:	edd3 6a00 	vldr	s13, [r3]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3308      	adds	r3, #8
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001292:	edc7 7a03 	vstr	s15, [r7, #12]
    if(d == 0){
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d103      	bne.n	80012ac <inv2x2+0x4e>
        invM = NULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
        return 0; /* Inversion not possible */
 80012a8:	2300      	movs	r3, #0
 80012aa:	e032      	b.n	8001312 <inv2x2+0xb4>
    }
    invM[0] =  M[3]/d;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	330c      	adds	r3, #12
 80012b0:	edd3 6a00 	vldr	s13, [r3]
 80012b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80012b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	edc3 7a00 	vstr	s15, [r3]
    invM[3] =  M[0]/d;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	edd3 6a00 	vldr	s13, [r3]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	330c      	adds	r3, #12
 80012cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d4:	edc3 7a00 	vstr	s15, [r3]
    invM[1] = -M[1]/d;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3304      	adds	r3, #4
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	eef1 6a67 	vneg.f32	s13, s15
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3304      	adds	r3, #4
 80012e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80012ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f0:	edc3 7a00 	vstr	s15, [r3]
    invM[2] = -M[2]/d;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3308      	adds	r3, #8
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	eef1 6a67 	vneg.f32	s13, s15
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3308      	adds	r3, #8
 8001304:	ed97 7a03 	vldr	s14, [r7, #12]
 8001308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130c:	edc3 7a00 	vstr	s15, [r3]
    return 1; /* Inversion completed successfully */
 8001310:	2301      	movs	r3, #1
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <sum>:
- float *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void sum(float *A, float *B, uint8_t n, float *C){
 800131e:	b480      	push	{r7}
 8001320:	b087      	sub	sp, #28
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
 8001332:	e016      	b.n	8001362 <sum+0x44>
        C[i] = A[i] + B[i];
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	ed93 7a00 	vldr	s14, [r3]
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	4413      	add	r3, r2
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < n; i++){
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	3301      	adds	r3, #1
 8001360:	75fb      	strb	r3, [r7, #23]
 8001362:	7dfa      	ldrb	r2, [r7, #23]
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	429a      	cmp	r2, r3
 8001368:	d3e4      	bcc.n	8001334 <sum+0x16>
    }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <diff>:
- float *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void diff(float *A, float *B, uint8_t n, float *C){
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 8001388:	2300      	movs	r3, #0
 800138a:	75fb      	strb	r3, [r7, #23]
 800138c:	e016      	b.n	80013bc <diff+0x44>
        C[i] = A[i] - B[i];
 800138e:	7dfb      	ldrb	r3, [r7, #23]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	ed93 7a00 	vldr	s14, [r3]
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	4413      	add	r3, r2
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b2:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < n; i++){
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	3301      	adds	r3, #1
 80013ba:	75fb      	strb	r3, [r7, #23]
 80013bc:	7dfa      	ldrb	r2, [r7, #23]
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3e4      	bcc.n	800138e <diff+0x16>
    }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	0000      	movs	r0, r0
 80013d4:	0000      	movs	r0, r0
	...

080013d8 <B_calc>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void B_calc(man_t *manip){
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    float q1,q2;
    rblast(&manip->q0_actual, &q1);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80013e6:	f107 020c 	add.w	r2, r7, #12
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 fcf9 	bl	8002de4 <rblast>
    rblast(&manip->q1_actual, &q2);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80013f8:	f107 0208 	add.w	r2, r7, #8
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fcf0 	bl	8002de4 <rblast>

    manip->B[0] = (float) (0.0047413*cos(q1 + 2*q2) + 0.028554*cos(q1 + q2) + 0.078463*cos(q1) + 0.014224*cos(q2) + 0.045182); // (0.024938*cos(q1 + 2*q2) + 0.12469*cos(q1 + q2) + 0.26194*cos(q1) + 0.074812*cos(q2) + 0.16349);
 8001404:	edd7 7a02 	vldr	s15, [r7, #8]
 8001408:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800140c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001414:	ee17 0a90 	vmov	r0, s15
 8001418:	f7ff f8a6 	bl	8000568 <__aeabi_f2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	ec43 2b10 	vmov	d0, r2, r3
 8001424:	f006 fee0 	bl	80081e8 <cos>
 8001428:	ec51 0b10 	vmov	r0, r1, d0
 800142c:	a3ae      	add	r3, pc, #696	; (adr r3, 80016e8 <B_calc+0x310>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f8f1 	bl	8000618 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4614      	mov	r4, r2
 800143c:	461d      	mov	r5, r3
 800143e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001442:	edd7 7a02 	vldr	s15, [r7, #8]
 8001446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144a:	ee17 0a90 	vmov	r0, s15
 800144e:	f7ff f88b 	bl	8000568 <__aeabi_f2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	ec43 2b10 	vmov	d0, r2, r3
 800145a:	f006 fec5 	bl	80081e8 <cos>
 800145e:	ec51 0b10 	vmov	r0, r1, d0
 8001462:	a3a3      	add	r3, pc, #652	; (adr r3, 80016f0 <B_calc+0x318>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f8d6 	bl	8000618 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f7fe ff1a 	bl	80002ac <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4614      	mov	r4, r2
 800147e:	461d      	mov	r5, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f870 	bl	8000568 <__aeabi_f2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	ec43 2b10 	vmov	d0, r2, r3
 8001490:	f006 feaa 	bl	80081e8 <cos>
 8001494:	ec51 0b10 	vmov	r0, r1, d0
 8001498:	a397      	add	r3, pc, #604	; (adr r3, 80016f8 <B_calc+0x320>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff f8bb 	bl	8000618 <__aeabi_dmul>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4620      	mov	r0, r4
 80014a8:	4629      	mov	r1, r5
 80014aa:	f7fe feff 	bl	80002ac <__adddf3>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4614      	mov	r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f855 	bl	8000568 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	ec43 2b10 	vmov	d0, r2, r3
 80014c6:	f006 fe8f 	bl	80081e8 <cos>
 80014ca:	ec51 0b10 	vmov	r0, r1, d0
 80014ce:	a38c      	add	r3, pc, #560	; (adr r3, 8001700 <B_calc+0x328>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7ff f8a0 	bl	8000618 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4620      	mov	r0, r4
 80014de:	4629      	mov	r1, r5
 80014e0:	f7fe fee4 	bl	80002ac <__adddf3>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	a386      	add	r3, pc, #536	; (adr r3, 8001708 <B_calc+0x330>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7fe fedb 	bl	80002ac <__adddf3>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fb6d 	bl	8000bdc <__aeabi_d2f>
 8001502:	4602      	mov	r2, r0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    manip->B[1] = (float) (0.0023706*cos(q1 + 2*q2) + 0.023453*cos(q1 + q2) + 0.039491*cos(q1) + 0.0094825*cos(q2) + 0.01103); // (0.012469*cos(q1 + 2*q2) + 0.09975*cos(q1 + q2) + 0.14962*cos(q1) + 0.049875*cos(q2) + 0.058307);
 800150a:	edd7 7a02 	vldr	s15, [r7, #8]
 800150e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001512:	edd7 7a03 	vldr	s15, [r7, #12]
 8001516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151a:	ee17 0a90 	vmov	r0, s15
 800151e:	f7ff f823 	bl	8000568 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	ec43 2b10 	vmov	d0, r2, r3
 800152a:	f006 fe5d 	bl	80081e8 <cos>
 800152e:	ec51 0b10 	vmov	r0, r1, d0
 8001532:	a377      	add	r3, pc, #476	; (adr r3, 8001710 <B_calc+0x338>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f86e 	bl	8000618 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4614      	mov	r4, r2
 8001542:	461d      	mov	r5, r3
 8001544:	ed97 7a03 	vldr	s14, [r7, #12]
 8001548:	edd7 7a02 	vldr	s15, [r7, #8]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	ee17 0a90 	vmov	r0, s15
 8001554:	f7ff f808 	bl	8000568 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	ec43 2b10 	vmov	d0, r2, r3
 8001560:	f006 fe42 	bl	80081e8 <cos>
 8001564:	ec51 0b10 	vmov	r0, r1, d0
 8001568:	a36b      	add	r3, pc, #428	; (adr r3, 8001718 <B_calc+0x340>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f853 	bl	8000618 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4620      	mov	r0, r4
 8001578:	4629      	mov	r1, r5
 800157a:	f7fe fe97 	bl	80002ac <__adddf3>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4614      	mov	r4, r2
 8001584:	461d      	mov	r5, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffed 	bl	8000568 <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	ec43 2b10 	vmov	d0, r2, r3
 8001596:	f006 fe27 	bl	80081e8 <cos>
 800159a:	ec51 0b10 	vmov	r0, r1, d0
 800159e:	a360      	add	r3, pc, #384	; (adr r3, 8001720 <B_calc+0x348>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f838 	bl	8000618 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fe7c 	bl	80002ac <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4614      	mov	r4, r2
 80015ba:	461d      	mov	r5, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ffd2 	bl	8000568 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	ec43 2b10 	vmov	d0, r2, r3
 80015cc:	f006 fe0c 	bl	80081e8 <cos>
 80015d0:	ec51 0b10 	vmov	r0, r1, d0
 80015d4:	a354      	add	r3, pc, #336	; (adr r3, 8001728 <B_calc+0x350>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f81d 	bl	8000618 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7fe fe61 	bl	80002ac <__adddf3>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	a34f      	add	r3, pc, #316	; (adr r3, 8001730 <B_calc+0x358>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7fe fe58 	bl	80002ac <__adddf3>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff faea 	bl	8000bdc <__aeabi_d2f>
 8001608:	4602      	mov	r2, r0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
    manip->B[2] = manip->B[1]; // the matrix is symmetrical
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    manip->B[3] = (float) (0.018351*cos(q1 + q2) + 0.039491*cos(q1) + 0.0047413*cos(q2) + 0.011032); // (0.074812*cos(q1 + q2) + 0.14962*cos(q1) + 0.024938*cos(q2) + 0.058309);
 800161c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001620:	edd7 7a02 	vldr	s15, [r7, #8]
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	ee17 0a90 	vmov	r0, s15
 800162c:	f7fe ff9c 	bl	8000568 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	ec43 2b10 	vmov	d0, r2, r3
 8001638:	f006 fdd6 	bl	80081e8 <cos>
 800163c:	ec51 0b10 	vmov	r0, r1, d0
 8001640:	a33d      	add	r3, pc, #244	; (adr r3, 8001738 <B_calc+0x360>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffe7 	bl	8000618 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4614      	mov	r4, r2
 8001650:	461d      	mov	r5, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff87 	bl	8000568 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ec43 2b10 	vmov	d0, r2, r3
 8001662:	f006 fdc1 	bl	80081e8 <cos>
 8001666:	ec51 0b10 	vmov	r0, r1, d0
 800166a:	a32d      	add	r3, pc, #180	; (adr r3, 8001720 <B_calc+0x348>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ffd2 	bl	8000618 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fe16 	bl	80002ac <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4614      	mov	r4, r2
 8001686:	461d      	mov	r5, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff6c 	bl	8000568 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	ec43 2b10 	vmov	d0, r2, r3
 8001698:	f006 fda6 	bl	80081e8 <cos>
 800169c:	ec51 0b10 	vmov	r0, r1, d0
 80016a0:	a311      	add	r3, pc, #68	; (adr r3, 80016e8 <B_calc+0x310>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe ffb7 	bl	8000618 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe fdfb 	bl	80002ac <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	a320      	add	r3, pc, #128	; (adr r3, 8001740 <B_calc+0x368>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe fdf2 	bl	80002ac <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa84 	bl	8000bdc <__aeabi_d2f>
 80016d4:	4602      	mov	r2, r0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
    /*  manip::B is actually a vector, but it can be seen as follows: 
        [B[0], B[1]]
        [B[2], B[3]] */
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	f3af 8000 	nop.w
 80016e8:	070c63bc 	.word	0x070c63bc
 80016ec:	3f736b9d 	.word	0x3f736b9d
 80016f0:	80ae1049 	.word	0x80ae1049
 80016f4:	3f9d3d42 	.word	0x3f9d3d42
 80016f8:	b2f23034 	.word	0xb2f23034
 80016fc:	3fb41626 	.word	0x3fb41626
 8001700:	f68be2f8 	.word	0xf68be2f8
 8001704:	3f8d2178 	.word	0x3f8d2178
 8001708:	58bc59b8 	.word	0x58bc59b8
 800170c:	3fa72218 	.word	0x3fa72218
 8001710:	2f19c8ff 	.word	0x2f19c8ff
 8001714:	3f636b82 	.word	0x3f636b82
 8001718:	2ff8ec10 	.word	0x2ff8ec10
 800171c:	3f980410 	.word	0x3f980410
 8001720:	12f90108 	.word	0x12f90108
 8001724:	3fa4382a 	.word	0x3fa4382a
 8001728:	9b13165d 	.word	0x9b13165d
 800172c:	3f836b8f 	.word	0x3f836b8f
 8001730:	8a32f449 	.word	0x8a32f449
 8001734:	3f8696e5 	.word	0x3f8696e5
 8001738:	c36544fe 	.word	0xc36544fe
 800173c:	3f92ca9a 	.word	0x3f92ca9a
 8001740:	f9acffa8 	.word	0xf9acffa8
 8001744:	3f8697f1 	.word	0x3f8697f1

08001748 <C_calc>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void C_calc(man_t *manip){
 8001748:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
    float q1, q2, dq1, dq2;
    rblast(&manip->q0_actual, &q1);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001758:	f107 0214 	add.w	r2, r7, #20
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fb40 	bl	8002de4 <rblast>
    rblast(&manip->q1_actual, &q2);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800176a:	f107 0210 	add.w	r2, r7, #16
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f001 fb37 	bl	8002de4 <rblast>
    rblast(&manip->dq0_actual, &dq1);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800177c:	f107 020c 	add.w	r2, r7, #12
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fb2e 	bl	8002de4 <rblast>
    rblast(&manip->dq1_actual, &dq2);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800178e:	f107 0208 	add.w	r2, r7, #8
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f001 fb25 	bl	8002de4 <rblast>
    // SECTION DEBUG
	// dq1 = dq_actual0;
	// dq2 = dq_actual1;
	// !SECTION DEBUG

    manip->C[0] = (float) ( - 0.5*dq2*(0.0047413*sin(q1 + 2*q2) + 0.010203*sin(q1 + q2) + 0.0094825*sin(q2))); // ( - 0.5*dq2*(0.024938*sin(q1 + 2*q2) + 0.049875*sin(q1 + q2) + 0.049875*sin(q2)));
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fee3 	bl	8000568 <__aeabi_f2d>
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4bbc      	ldr	r3, [pc, #752]	; (8001a98 <C_calc+0x350>)
 80017a8:	f7fe ff36 	bl	8000618 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4614      	mov	r4, r2
 80017b2:	461d      	mov	r5, r3
 80017b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	ee17 0a90 	vmov	r0, s15
 80017c8:	f7fe fece 	bl	8000568 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	ec43 2b10 	vmov	d0, r2, r3
 80017d4:	f006 fd5c 	bl	8008290 <sin>
 80017d8:	ec51 0b10 	vmov	r0, r1, d0
 80017dc:	a39e      	add	r3, pc, #632	; (adr r3, 8001a58 <C_calc+0x310>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe ff19 	bl	8000618 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4690      	mov	r8, r2
 80017ec:	4699      	mov	r9, r3
 80017ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80017f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fa:	ee17 0a90 	vmov	r0, s15
 80017fe:	f7fe feb3 	bl	8000568 <__aeabi_f2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	ec43 2b10 	vmov	d0, r2, r3
 800180a:	f006 fd41 	bl	8008290 <sin>
 800180e:	ec51 0b10 	vmov	r0, r1, d0
 8001812:	a393      	add	r3, pc, #588	; (adr r3, 8001a60 <C_calc+0x318>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe fefe 	bl	8000618 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4640      	mov	r0, r8
 8001822:	4649      	mov	r1, r9
 8001824:	f7fe fd42 	bl	80002ac <__adddf3>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4690      	mov	r8, r2
 800182e:	4699      	mov	r9, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe98 	bl	8000568 <__aeabi_f2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	ec43 2b10 	vmov	d0, r2, r3
 8001840:	f006 fd26 	bl	8008290 <sin>
 8001844:	ec51 0b10 	vmov	r0, r1, d0
 8001848:	a387      	add	r3, pc, #540	; (adr r3, 8001a68 <C_calc+0x320>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fee3 	bl	8000618 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4640      	mov	r0, r8
 8001858:	4649      	mov	r1, r9
 800185a:	f7fe fd27 	bl	80002ac <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4620      	mov	r0, r4
 8001864:	4629      	mov	r1, r5
 8001866:	f7fe fed7 	bl	8000618 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f7ff f9b3 	bl	8000bdc <__aeabi_d2f>
 8001876:	4602      	mov	r2, r0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
    manip->C[1] = (float) ( - 0.000030008*(dq1 + dq2)*(79.0*sin(q1 + 2*q2) + 170*sin(q1 + q2) + 158*sin(q2))); // ( - 0.012469*(dq1 + dq2)*(sin(q1 + 2*q2) + 2*sin(q1 + q2) + 2*sin(q2)));
 800187e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001882:	edd7 7a02 	vldr	s15, [r7, #8]
 8001886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188a:	ee17 0a90 	vmov	r0, s15
 800188e:	f7fe fe6b 	bl	8000568 <__aeabi_f2d>
 8001892:	a377      	add	r3, pc, #476	; (adr r3, 8001a70 <C_calc+0x328>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe febe 	bl	8000618 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4614      	mov	r4, r2
 80018a2:	461d      	mov	r5, r3
 80018a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b4:	ee17 0a90 	vmov	r0, s15
 80018b8:	f7fe fe56 	bl	8000568 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	ec43 2b10 	vmov	d0, r2, r3
 80018c4:	f006 fce4 	bl	8008290 <sin>
 80018c8:	ec51 0b10 	vmov	r0, r1, d0
 80018cc:	a36a      	add	r3, pc, #424	; (adr r3, 8001a78 <C_calc+0x330>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fea1 	bl	8000618 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4690      	mov	r8, r2
 80018dc:	4699      	mov	r9, r3
 80018de:	ed97 7a05 	vldr	s14, [r7, #20]
 80018e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ea:	ee17 0a90 	vmov	r0, s15
 80018ee:	f7fe fe3b 	bl	8000568 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	ec43 2b10 	vmov	d0, r2, r3
 80018fa:	f006 fcc9 	bl	8008290 <sin>
 80018fe:	ec51 0b10 	vmov	r0, r1, d0
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <C_calc+0x354>)
 8001908:	f7fe fe86 	bl	8000618 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4640      	mov	r0, r8
 8001912:	4649      	mov	r1, r9
 8001914:	f7fe fcca 	bl	80002ac <__adddf3>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4690      	mov	r8, r2
 800191e:	4699      	mov	r9, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe20 	bl	8000568 <__aeabi_f2d>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	ec43 2b10 	vmov	d0, r2, r3
 8001930:	f006 fcae 	bl	8008290 <sin>
 8001934:	ec51 0b10 	vmov	r0, r1, d0
 8001938:	a351      	add	r3, pc, #324	; (adr r3, 8001a80 <C_calc+0x338>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fe6b 	bl	8000618 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4640      	mov	r0, r8
 8001948:	4649      	mov	r1, r9
 800194a:	f7fe fcaf 	bl	80002ac <__adddf3>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4620      	mov	r0, r4
 8001954:	4629      	mov	r1, r5
 8001956:	f7fe fe5f 	bl	8000618 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff f93b 	bl	8000bdc <__aeabi_d2f>
 8001966:	4602      	mov	r2, r0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    manip->C[2] = (float) (   dq1*(0.0023706*sin(q1 + 2*q2) + 0.0051014*sin(q1 + q2) + 0.0047413*sin(q2))); // (dq1*(0.012469*sin(q1 + 2*q2) + 0.024938*sin(q1 + q2) + 0.024938*sin(q2)));
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdf9 	bl	8000568 <__aeabi_f2d>
 8001976:	4604      	mov	r4, r0
 8001978:	460d      	mov	r5, r1
 800197a:	edd7 7a04 	vldr	s15, [r7, #16]
 800197e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001982:	edd7 7a05 	vldr	s15, [r7, #20]
 8001986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198a:	ee17 0a90 	vmov	r0, s15
 800198e:	f7fe fdeb 	bl	8000568 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	ec43 2b10 	vmov	d0, r2, r3
 800199a:	f006 fc79 	bl	8008290 <sin>
 800199e:	ec51 0b10 	vmov	r0, r1, d0
 80019a2:	a339      	add	r3, pc, #228	; (adr r3, 8001a88 <C_calc+0x340>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fe36 	bl	8000618 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4690      	mov	r8, r2
 80019b2:	4699      	mov	r9, r3
 80019b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80019b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c0:	ee17 0a90 	vmov	r0, s15
 80019c4:	f7fe fdd0 	bl	8000568 <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	ec43 2b10 	vmov	d0, r2, r3
 80019d0:	f006 fc5e 	bl	8008290 <sin>
 80019d4:	ec51 0b10 	vmov	r0, r1, d0
 80019d8:	a32d      	add	r3, pc, #180	; (adr r3, 8001a90 <C_calc+0x348>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fe1b 	bl	8000618 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4640      	mov	r0, r8
 80019e8:	4649      	mov	r1, r9
 80019ea:	f7fe fc5f 	bl	80002ac <__adddf3>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4690      	mov	r8, r2
 80019f4:	4699      	mov	r9, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fdb5 	bl	8000568 <__aeabi_f2d>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	ec43 2b10 	vmov	d0, r2, r3
 8001a06:	f006 fc43 	bl	8008290 <sin>
 8001a0a:	ec51 0b10 	vmov	r0, r1, d0
 8001a0e:	a312      	add	r3, pc, #72	; (adr r3, 8001a58 <C_calc+0x310>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe fe00 	bl	8000618 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4640      	mov	r0, r8
 8001a1e:	4649      	mov	r1, r9
 8001a20:	f7fe fc44 	bl	80002ac <__adddf3>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	f7fe fdf4 	bl	8000618 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7ff f8d0 	bl	8000bdc <__aeabi_d2f>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    manip->C[3] = (float) 0.0;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
    /*  manip::C is actually a vector, but it can be seen as follows: 
        [C[0], C[1]]
        [C[2], C[3]] */
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a58:	070c63bc 	.word	0x070c63bc
 8001a5c:	3f736b9d 	.word	0x3f736b9d
 8001a60:	7a919696 	.word	0x7a919696
 8001a64:	3f84e54f 	.word	0x3f84e54f
 8001a68:	9b13165d 	.word	0x9b13165d
 8001a6c:	3f836b8f 	.word	0x3f836b8f
 8001a70:	0ed22244 	.word	0x0ed22244
 8001a74:	beff7736 	.word	0xbeff7736
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	4053c000 	.word	0x4053c000
 8001a80:	00000000 	.word	0x00000000
 8001a84:	4063c000 	.word	0x4063c000
 8001a88:	2f19c8ff 	.word	0x2f19c8ff
 8001a8c:	3f636b82 	.word	0x3f636b82
 8001a90:	a29efbd9 	.word	0xa29efbd9
 8001a94:	3f74e534 	.word	0x3f74e534
 8001a98:	bfe00000 	.word	0xbfe00000
 8001a9c:	40654000 	.word	0x40654000

08001aa0 <controller>:
- float *u: float[2] vector pointer that holds the control input to apply to motors (speed control);
@outputs: 
- void;
@#
*/
void controller(man_t *manip, float *u){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b0ac      	sub	sp, #176	; 0xb0
 8001aa4:	af04      	add	r7, sp, #16
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
    float Bddq[2], invC[4], result[2];
    float d;
    uint8_t i;

    /* data preparation */
    rbpop(&manip->q0, &q[0]);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 f956 	bl	8002d64 <rbpop>
    rbpop(&manip->q1, &q[1]);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001abe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f001 f94c 	bl	8002d64 <rbpop>
    rbpop(&manip->dq0, &dq[0]);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3358      	adds	r3, #88	; 0x58
 8001ad0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 f944 	bl	8002d64 <rbpop>
    rbpop(&manip->dq1, &dq[1]);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8001ae2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4610      	mov	r0, r2
 8001aec:	f001 f93a 	bl	8002d64 <rbpop>
    rbpop(&manip->ddq0, &ddq[0]);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	33b0      	adds	r3, #176	; 0xb0
 8001af4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 f932 	bl	8002d64 <rbpop>
    rbpop(&manip->ddq1, &ddq[1]);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8001b06:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f001 f928 	bl	8002d64 <rbpop>
    rblast(&manip->q0_actual, &q_actual[0]);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001b1a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f001 f95f 	bl	8002de4 <rblast>
    rblast(&manip->q1_actual, &q_actual[1]);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 8001b2c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b30:	3304      	adds	r3, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f001 f955 	bl	8002de4 <rblast>
    rblast(&manip->dq0_actual, &dq_actual[0]);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b40:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 f94c 	bl	8002de4 <rblast>
    rblast(&manip->dq1_actual, &dq_actual[1]);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8001b52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b56:	3304      	adds	r3, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f001 f942 	bl	8002de4 <rblast>
    rblast(&manip->ddq0_actual, &ddq_actual[0]);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001b66:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 f939 	bl	8002de4 <rblast>
    rblast(&manip->ddq1_actual, &ddq_actual[1]);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8001b78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4610      	mov	r0, r2
 8001b82:	f001 f92f 	bl	8002de4 <rblast>
    B_calc(manip);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fc26 	bl	80013d8 <B_calc>
    C_calc(manip);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fddb 	bl	8001748 <C_calc>
		s3 += a;
		rbget(&manip->ddq1_actual, i, &a);
		s4 += a;
	}
	*/
    dq_actual0 = dq_actual[0];
 8001b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b94:	4a6c      	ldr	r2, [pc, #432]	; (8001d48 <controller+0x2a8>)
 8001b96:	6013      	str	r3, [r2, #0]
    dq_actual1 = dq_actual[1];
 8001b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b9a:	4a6c      	ldr	r2, [pc, #432]	; (8001d4c <controller+0x2ac>)
 8001b9c:	6013      	str	r3, [r2, #0]
    ddq_actual0 = ddq_actual[0];
 8001b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba0:	4a6b      	ldr	r2, [pc, #428]	; (8001d50 <controller+0x2b0>)
 8001ba2:	6013      	str	r3, [r2, #0]
    ddq_actual1 = ddq_actual[1];
 8001ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba6:	4a6b      	ldr	r2, [pc, #428]	; (8001d54 <controller+0x2b4>)
 8001ba8:	6013      	str	r3, [r2, #0]
	ddq_actual[1] = ddq_actual1;
	*/
	
    // !SECTION DEBUG

    diff(q, q_actual, 2, ep); /* q - q_d */
 8001baa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bae:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001bb2:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f7ff fbde 	bl	8001378 <diff>
    diff(dq, dq_actual, 2, ed); /* dq - dq_d */
 8001bbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bc0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001bc4:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f7ff fbd5 	bl	8001378 <diff>

    ep[0] = abs(ep[0]) < THRESHOLD ? 0:ep[0];
 8001bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bd0:	667b      	str	r3, [r7, #100]	; 0x64
    ep[1] = abs(ep[1]) < THRESHOLD ? 0:ep[1];
 8001bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bd4:	66bb      	str	r3, [r7, #104]	; 0x68

    ed[0] = abs(ed[0]) < THRESHOLD ? 0:ed[0];
 8001bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    ed[1] = abs(ed[1]) < THRESHOLD ? 0:ed[1];
 8001bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bdc:	663b      	str	r3, [r7, #96]	; 0x60

    dot((float *) Kp, 2, 2, ep, 2, 1, Kpep); /* Kp*ep */
 8001bde:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001be2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001be6:	9302      	str	r3, [sp, #8]
 8001be8:	2301      	movs	r3, #1
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	2302      	movs	r3, #2
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	4858      	ldr	r0, [pc, #352]	; (8001d58 <controller+0x2b8>)
 8001bf8:	f7ff fab1 	bl	800115e <dot>
    dot((float *) Kd, 2, 2, ed, 2, 1, Kded); /* Kd*ed */
 8001bfc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c04:	9302      	str	r3, [sp, #8]
 8001c06:	2301      	movs	r3, #1
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	2202      	movs	r2, #2
 8001c12:	2102      	movs	r1, #2
 8001c14:	4851      	ldr	r0, [pc, #324]	; (8001d5c <controller+0x2bc>)
 8001c16:	f7ff faa2 	bl	800115e <dot>

    /* y = Kp*e_p + Kd*e_d + ddq */
    sum(Kpep, Kded, 2, y);
 8001c1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c1e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001c22:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001c26:	2202      	movs	r2, #2
 8001c28:	f7ff fb79 	bl	800131e <sum>
    sum(y, ddq, 2, y);
 8001c2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c30:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001c34:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f7ff fb70 	bl	800131e <sum>

    dot(manip->B, 2, 2, y, 2, 1, By); /* B*y */
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8001c44:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001c48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	2302      	movs	r3, #2
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	4613      	mov	r3, r2
 8001c58:	2202      	movs	r2, #2
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	f7ff fa7f 	bl	800115e <dot>
    dot(manip->C, 2, 2, dq_actual, 2, 1, Cdq); /* C*dq */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f503 701e 	add.w	r0, r3, #632	; 0x278
 8001c66:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2301      	movs	r3, #1
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2302      	movs	r3, #2
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	f7ff fa6e 	bl	800115e <dot>
    sum(By, Cdq, 2, tau); /* tau = B*y+C*dq  */
 8001c82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c86:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001c8a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f7ff fb45 	bl	800131e <sum>

    // TODO: TEST THIS SHIT

    d = DET(manip->C);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	ed93 7a9e 	vldr	s14, [r3, #632]	; 0x278
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	edd3 7aa1 	vldr	s15, [r3, #644]	; 0x284
 8001ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	edd3 6a9f 	vldr	s13, [r3, #636]	; 0x27c
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	edd3 7aa0 	vldr	s15, [r3, #640]	; 0x280
 8001cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    if(d == 0){
 8001cbc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001cc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc8:	d109      	bne.n	8001cde <controller+0x23e>
        /* if C is not invertible, use the desired values as inputs */
        // TODO: Test and see if it works, otherwise use discrete integration
        *u = dq[0];
 8001cca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	601a      	str	r2, [r3, #0]
        *(u+1) = dq[1];
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e031      	b.n	8001d42 <controller+0x2a2>
        return;
    }

    dot(manip->B, 2, 2, ddq_actual, 2, 1, Bddq); /* B*ddq */
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8001ce4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	2301      	movs	r3, #1
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	f7ff fa2f 	bl	800115e <dot>
    diff(tau, Bddq, 2, result); /* tau - B*ddq */
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001d08:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f7ff fb33 	bl	8001378 <diff>
    inv2x2(manip->C, invC); /* inv(C) */
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d18:	f107 0214 	add.w	r2, r7, #20
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fa9d 	bl	800125e <inv2x2>
    dot(invC, 2, 2, result, 2, 1, u); /* u = inv(C) * (tau - B*ddq) */
 8001d24:	f107 020c 	add.w	r2, r7, #12
 8001d28:	f107 0014 	add.w	r0, r7, #20
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	9302      	str	r3, [sp, #8]
 8001d30:	2301      	movs	r3, #1
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	2302      	movs	r3, #2
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	f7ff fa0e 	bl	800115e <dot>
}
 8001d42:	37a0      	adds	r7, #160	; 0xa0
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200003d8 	.word	0x200003d8
 8001d4c:	200003dc 	.word	0x200003dc
 8001d50:	200003e0 	.word	0x200003e0
 8001d54:	200003e4 	.word	0x200003e4
 8001d58:	0800935c 	.word	0x0800935c
 8001d5c:	0800936c 	.word	0x0800936c

08001d60 <speed_estimation>:
- float *a_est: pointer to the variable that will hold the acceleration estimation;
@outputs: 
- void;
@#
*/
void speed_estimation(ringbuffer_t *q_actual, ringbuffer_t *dq_actual, ringbuffer_t *ddq_actual, float reduction, float *v_est, float *a_est){
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	b0d6      	sub	sp, #344	; 0x158
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 8001d6a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
 8001d6e:	6020      	str	r0, [r4, #0]
 8001d70:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8001d74:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
 8001d78:	6001      	str	r1, [r0, #0]
 8001d7a:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8001d7e:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8001d82:	600a      	str	r2, [r1, #0]
 8001d84:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001d88:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8001d8c:	ed82 0a00 	vstr	s0, [r2]
 8001d90:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001d94:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8001d98:	6013      	str	r3, [r2, #0]
	*a_est = (a[3]-a[2])/T_S;
    return;
    */

    float prev, succ, vel,acc, a, b;
    succ=0;
 8001d9a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
    prev=0;
 8001da8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 5; i++){
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001dbc:	e023      	b.n	8001e06 <speed_estimation+0xa6>
    	rbget(q_actual, i, &a);
 8001dbe:	f997 1157 	ldrsb.w	r1, [r7, #343]	; 0x157
 8001dc2:	f107 021c 	add.w	r2, r7, #28
 8001dc6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001dca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	f001 f838 	bl	8002e44 <rbget>
    	prev+=a;
 8001dd4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001dd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ddc:	ed93 7a00 	vldr	s14, [r3]
 8001de0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001de4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001df8:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < 5; i++){
 8001dfc:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001e00:	3301      	adds	r3, #1
 8001e02:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001e06:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d9d7      	bls.n	8001dbe <speed_estimation+0x5e>
    }
    for(i = 0; i < 5; i++){
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001e14:	e026      	b.n	8001e64 <speed_estimation+0x104>
    	rbget(q_actual, 5+i, &a);
 8001e16:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001e1a:	3305      	adds	r3, #5
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	b259      	sxtb	r1, r3
 8001e20:	f107 021c 	add.w	r2, r7, #28
 8001e24:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001e28:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	f001 f809 	bl	8002e44 <rbget>
    	succ+=a;
 8001e32:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e3a:	ed93 7a00 	vldr	s14, [r3]
 8001e3e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001e42:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e56:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < 5; i++){
 8001e5a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001e64:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d9d4      	bls.n	8001e16 <speed_estimation+0xb6>
    }
    prev /=5;
 8001e6c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e74:	ed93 7a00 	vldr	s14, [r3]
 8001e78:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001e7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e80:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001e84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e88:	edc3 7a00 	vstr	s15, [r3]
    succ /=5;
 8001e8c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e94:	ed93 7a00 	vldr	s14, [r3]
 8001e98:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ea8:	edc3 7a00 	vstr	s15, [r3]



    //rbget(q_actual,RBUF_SZ-1, &pos_succ);
    //rbget(q_actual,RBUF_SZ-2, &pos_prev);
    rblast(dq_actual,&vel);
 8001eac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001eb0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001eb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001eb8:	4611      	mov	r1, r2
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	f000 ff92 	bl	8002de4 <rblast>


    *v_est=0.8546*vel+((1-0.8546)*(succ-prev)/(T_C*5) );
 8001ec0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001ec4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fb4c 	bl	8000568 <__aeabi_f2d>
 8001ed0:	a34f      	add	r3, pc, #316	; (adr r3, 8002010 <speed_estimation+0x2b0>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe fb9f 	bl	8000618 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4614      	mov	r4, r2
 8001ee0:	461d      	mov	r5, r3
 8001ee2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001eea:	ed93 7a00 	vldr	s14, [r3]
 8001eee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001ef2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efe:	ee17 0a90 	vmov	r0, s15
 8001f02:	f7fe fb31 	bl	8000568 <__aeabi_f2d>
 8001f06:	a344      	add	r3, pc, #272	; (adr r3, 8002018 <speed_estimation+0x2b8>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb84 	bl	8000618 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	a341      	add	r3, pc, #260	; (adr r3, 8002020 <speed_estimation+0x2c0>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fca5 	bl	800086c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4620      	mov	r0, r4
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f7fe f9bf 	bl	80002ac <__adddf3>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	f7fe fe51 	bl	8000bdc <__aeabi_d2f>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001f40:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	601a      	str	r2, [r3, #0]


    rbget(dq_actual, RBUF_SZ-1, &succ);
 8001f48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f4c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001f50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f54:	2109      	movs	r1, #9
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	f000 ff74 	bl	8002e44 <rbget>
    rbget(dq_actual, RBUF_SZ-2, &prev);
 8001f5c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001f60:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001f64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f68:	2108      	movs	r1, #8
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	f000 ff6a 	bl	8002e44 <rbget>
    //*a_est = (succ-prev)/T_C;
    rblast(ddq_actual,&acc);
 8001f70:	f107 0220 	add.w	r2, r7, #32
 8001f74:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001f78:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	f000 ff30 	bl	8002de4 <rblast>
    *a_est= 0.9245*acc+((1- 0.9245)*(succ-prev)/(T_C) );
 8001f84:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001f88:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe faea 	bl	8000568 <__aeabi_f2d>
 8001f94:	a324      	add	r3, pc, #144	; (adr r3, 8002028 <speed_estimation+0x2c8>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fb3d 	bl	8000618 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4614      	mov	r4, r2
 8001fa4:	461d      	mov	r5, r3
 8001fa6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fae:	ed93 7a00 	vldr	s14, [r3]
 8001fb2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc2:	ee17 0a90 	vmov	r0, s15
 8001fc6:	f7fe facf 	bl	8000568 <__aeabi_f2d>
 8001fca:	a319      	add	r3, pc, #100	; (adr r3, 8002030 <speed_estimation+0x2d0>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fb22 	bl	8000618 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	a316      	add	r3, pc, #88	; (adr r3, 8002038 <speed_estimation+0x2d8>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe fc43 	bl	800086c <__aeabi_ddiv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7fe f95d 	bl	80002ac <__adddf3>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f7fe fdef 	bl	8000bdc <__aeabi_d2f>
 8001ffe:	4602      	mov	r2, r0
 8002000:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002004:	601a      	str	r2, [r3, #0]


}
 8002006:	bf00      	nop
 8002008:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}
 8002010:	19652bd4 	.word	0x19652bd4
 8002014:	3feb58e2 	.word	0x3feb58e2
 8002018:	9a6b50b0 	.word	0x9a6b50b0
 800201c:	3fc29c77 	.word	0x3fc29c77
 8002020:	47ae147b 	.word	0x47ae147b
 8002024:	3f747ae1 	.word	0x3f747ae1
 8002028:	0624dd2f 	.word	0x0624dd2f
 800202c:	3fed9581 	.word	0x3fed9581
 8002030:	ced91688 	.word	0xced91688
 8002034:	3fb353f7 	.word	0x3fb353f7
 8002038:	d2f1a9fc 	.word	0xd2f1a9fc
 800203c:	3f50624d 	.word	0x3f50624d

08002040 <init_rate>:
- uint32_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint32_t ms){
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
    rate->last_time = HAL_GetTick();
 800204a:	f001 fb67 	bl	800371c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	601a      	str	r2, [r3, #0]
    rate->delta_time = ms;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	605a      	str	r2, [r3, #4]
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	0000      	movs	r0, r0
 8002064:	0000      	movs	r0, r0
	...

08002068 <read_encoders>:
@inputs: 
- man_t *manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void read_encoders(man_t *manip){
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
    uint16_t counter; 
    float displacement1, displacement2;
    // float v_est, a_est; /* used to hold temporarily the estimations of speed and acceleration */
    TIM_HandleTypeDef *htim1, *htim2;

    htim1 = manip->htim_encoder1; /* pointer to the timer struct that decodes the first encoder output */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8002076:	613b      	str	r3, [r7, #16]
    htim2 = manip->htim_encoder2; /* pointer to the timer struct that decodes the first encoder output */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800207e:	60fb      	str	r3, [r7, #12]

    /* first encoder */
    counter = (htim1->Instance->CNT);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim1->Instance->ARR){
 8002088:	8bfa      	ldrh	r2, [r7, #30]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	429a      	cmp	r2, r3
 8002092:	d309      	bcc.n	80020a8 <read_encoders+0x40>
        counter = (htim1->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	83fb      	strh	r3, [r7, #30]
        htim1->Instance->CNT = counter; /* correct cnt value */
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	8bfa      	ldrh	r2, [r7, #30]
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    displacement1 = (float) (2*M_PI*counter/(htim1->Instance->ARR));
 80020a8:	8bfb      	ldrh	r3, [r7, #30]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa4a 	bl	8000544 <__aeabi_i2d>
 80020b0:	a35f      	add	r3, pc, #380	; (adr r3, 8002230 <read_encoders+0x1c8>)
 80020b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b6:	f7fe faaf 	bl	8000618 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4614      	mov	r4, r2
 80020c0:	461d      	mov	r5, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fa2b 	bl	8000524 <__aeabi_ui2d>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4620      	mov	r0, r4
 80020d4:	4629      	mov	r1, r5
 80020d6:	f7fe fbc9 	bl	800086c <__aeabi_ddiv>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7fe fd7b 	bl	8000bdc <__aeabi_d2f>
 80020e6:	4603      	mov	r3, r0
 80020e8:	61bb      	str	r3, [r7, #24]

    /* second encoder */
    counter = (htim2->Instance->CNT);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim2->Instance->ARR){
 80020f2:	8bfa      	ldrh	r2, [r7, #30]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d309      	bcc.n	8002112 <read_encoders+0xaa>
        counter = (htim2->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	83fb      	strh	r3, [r7, #30]
        htim2->Instance->CNT = counter;  /* correct cnt value */
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	8bfa      	ldrh	r2, [r7, #30]
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
    }
    displacement2 = (float) (2*M_PI) - (2*M_PI*counter/(htim2->Instance->ARR)); /* the motor is upside down */
 8002112:	8bfb      	ldrh	r3, [r7, #30]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fa15 	bl	8000544 <__aeabi_i2d>
 800211a:	a345      	add	r3, pc, #276	; (adr r3, 8002230 <read_encoders+0x1c8>)
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	f7fe fa7a 	bl	8000618 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4614      	mov	r4, r2
 800212a:	461d      	mov	r5, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f9f6 	bl	8000524 <__aeabi_ui2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe fb94 	bl	800086c <__aeabi_ddiv>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	a13e      	add	r1, pc, #248	; (adr r1, 8002244 <read_encoders+0x1dc>)
 800214a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800214e:	f7fe f8ab 	bl	80002a8 <__aeabi_dsub>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f7fe fd3f 	bl	8000bdc <__aeabi_d2f>
 800215e:	4603      	mov	r3, r0
 8002160:	617b      	str	r3, [r7, #20]

    // SECTION DEBUG
    // rbpush(&timestamps, (float) HAL_GetTick()/1000.0);
    // !SECTION DEBUG

    if(displacement1 > 2*M_PI){
 8002162:	69b8      	ldr	r0, [r7, #24]
 8002164:	f7fe fa00 	bl	8000568 <__aeabi_f2d>
 8002168:	a331      	add	r3, pc, #196	; (adr r3, 8002230 <read_encoders+0x1c8>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fce3 	bl	8000b38 <__aeabi_dcmpgt>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <read_encoders+0x114>
    	displacement1 = 2*M_PI; /* clamping */
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <read_encoders+0x1d8>)
 800217a:	61bb      	str	r3, [r7, #24]
	}
	if(displacement2 > 2*M_PI){
 800217c:	6978      	ldr	r0, [r7, #20]
 800217e:	f7fe f9f3 	bl	8000568 <__aeabi_f2d>
 8002182:	a32b      	add	r3, pc, #172	; (adr r3, 8002230 <read_encoders+0x1c8>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	f7fe fcd6 	bl	8000b38 <__aeabi_dcmpgt>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <read_encoders+0x12e>
		displacement2 = 2*M_PI; /* clamping */
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <read_encoders+0x1d8>)
 8002194:	617b      	str	r3, [r7, #20]
	}
    if(displacement1 > M_PI){
 8002196:	69b8      	ldr	r0, [r7, #24]
 8002198:	f7fe f9e6 	bl	8000568 <__aeabi_f2d>
 800219c:	a326      	add	r3, pc, #152	; (adr r3, 8002238 <read_encoders+0x1d0>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	f7fe fcc9 	bl	8000b38 <__aeabi_dcmpgt>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00f      	beq.n	80021cc <read_encoders+0x164>
    	displacement1 = displacement1 - (2*M_PI); /* redefining the domain between -PI and +PI */
 80021ac:	69b8      	ldr	r0, [r7, #24]
 80021ae:	f7fe f9db 	bl	8000568 <__aeabi_f2d>
 80021b2:	a31f      	add	r3, pc, #124	; (adr r3, 8002230 <read_encoders+0x1c8>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f7fe f876 	bl	80002a8 <__aeabi_dsub>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f7fe fd0a 	bl	8000bdc <__aeabi_d2f>
 80021c8:	4603      	mov	r3, r0
 80021ca:	61bb      	str	r3, [r7, #24]
    }
    if(displacement2 > M_PI){
 80021cc:	6978      	ldr	r0, [r7, #20]
 80021ce:	f7fe f9cb 	bl	8000568 <__aeabi_f2d>
 80021d2:	a319      	add	r3, pc, #100	; (adr r3, 8002238 <read_encoders+0x1d0>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	f7fe fcae 	bl	8000b38 <__aeabi_dcmpgt>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00f      	beq.n	8002202 <read_encoders+0x19a>
    	displacement2 = displacement2 - (2*M_PI); /* redefining the domain between -PI and +PI */
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f7fe f9c0 	bl	8000568 <__aeabi_f2d>
 80021e8:	a311      	add	r3, pc, #68	; (adr r3, 8002230 <read_encoders+0x1c8>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe f85b 	bl	80002a8 <__aeabi_dsub>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7fe fcef 	bl	8000bdc <__aeabi_d2f>
 80021fe:	4603      	mov	r3, r0
 8002200:	617b      	str	r3, [r7, #20]
    /*
    uint8_t dir1 = (uint8_t) (htim1->Instance->CR1 >> 4) & 1;
    uint8_t dir2 = (uint8_t) (htim2->Instance->CR1 >> 4) & 1;
    */
    // SECTION DEBUG
    rbpush(&manip->q0_actual, displacement1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002208:	ed97 0a06 	vldr	s0, [r7, #24]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fd5f 	bl	8002cd0 <rbpush>
    rbpush(&manip->q1_actual, displacement2);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002218:	ed97 0a05 	vldr	s0, [r7, #20]
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fd57 	bl	8002cd0 <rbpush>

	rbpush(&manip->dq1_actual, v_est);
	rbpush(&manip->ddq1_actual, a_est);
    // !SECTION DEBUG
	*/
}
 8002222:	bf00      	nop
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bdb0      	pop	{r4, r5, r7, pc}
 800222a:	bf00      	nop
 800222c:	f3af 8000 	nop.w
 8002230:	54442d18 	.word	0x54442d18
 8002234:	401921fb 	.word	0x401921fb
 8002238:	54442d18 	.word	0x54442d18
 800223c:	400921fb 	.word	0x400921fb
 8002240:	40c90fdb 	.word	0x40c90fdb
 8002244:	60000000 	.word	0x60000000
 8002248:	401921fb 	.word	0x401921fb

0800224c <update_speeds>:

void update_speeds(man_t *manip){
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b087      	sub	sp, #28
 8002250:	af02      	add	r7, sp, #8
 8002252:	6078      	str	r0, [r7, #4]
	float v_est, a_est;
	speed_estimation(&manip->q0_actual, &manip->dq0_actual,&manip->ddq0_actual, reduction1, &v_est, &a_est);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f503 709a 	add.w	r0, r3, #308	; 0x134
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f503 71c6 	add.w	r1, r3, #396	; 0x18c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 8002266:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002308 <update_speeds+0xbc>
 800226a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800226e:	f107 040c 	add.w	r4, r7, #12
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4623      	mov	r3, r4
 800227a:	eeb0 0a67 	vmov.f32	s0, s15
 800227e:	f7ff fd6f 	bl	8001d60 <speed_estimation>
	//disp1 = v_est;
	rbpush(&manip->dq0_actual, v_est);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002288:	edd7 7a03 	vldr	s15, [r7, #12]
 800228c:	eeb0 0a67 	vmov.f32	s0, s15
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fd1d 	bl	8002cd0 <rbpush>
	rbpush(&manip->ddq0_actual, a_est);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800229c:	edd7 7a02 	vldr	s15, [r7, #8]
 80022a0:	eeb0 0a67 	vmov.f32	s0, s15
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fd13 	bl	8002cd0 <rbpush>

	speed_estimation(&manip->q1_actual, &manip->dq1_actual,&manip->ddq1_actual, reduction2, &v_est, &a_est);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80022bc:	eddf 7a13 	vldr	s15, [pc, #76]	; 800230c <update_speeds+0xc0>
 80022c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c4:	f107 040c 	add.w	r4, r7, #12
 80022c8:	f107 0308 	add.w	r3, r7, #8
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	4623      	mov	r3, r4
 80022d0:	eeb0 0a67 	vmov.f32	s0, s15
 80022d4:	f7ff fd44 	bl	8001d60 <speed_estimation>
	//disp2 = v_est;
	rbpush(&manip->dq1_actual, v_est);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022de:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e2:	eeb0 0a67 	vmov.f32	s0, s15
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fcf2 	bl	8002cd0 <rbpush>
	rbpush(&manip->ddq1_actual, a_est);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80022f6:	eeb0 0a67 	vmov.f32	s0, s15
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fce8 	bl	8002cd0 <rbpush>
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bd90      	pop	{r4, r7, pc}
 8002308:	0000000a 	.word	0x0000000a
 800230c:	00000005 	.word	0x00000005

08002310 <apply_input>:

void apply_input(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, float *u){
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
    __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
    htim1->Instance->EGR = TIM_EGR_UG;
    */
    // rad2stepdir(u[0], RESOLUTION, (float) 1/T_C, &steps, &dir);

    dir1 = u[0] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	edd3 7a00 	vldr	s15, [r3]
 8002322:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	bf4c      	ite	mi
 800232c:	2301      	movmi	r3, #1
 800232e:	2300      	movpl	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    // dir1 = 1; // DEBUG
    HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, dir1);
 8002336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800233a:	461a      	mov	r2, r3
 800233c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002340:	4871      	ldr	r0, [pc, #452]	; (8002508 <apply_input+0x1f8>)
 8002342:	f002 f8b3 	bl	80044ac <HAL_GPIO_WritePin>

    dir2 = u[1] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002356:	bf4c      	ite	mi
 8002358:	2301      	movmi	r3, #1
 800235a:	2300      	movpl	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    // dir2 = 1; // DEBUG
    HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, dir2);
 8002362:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002366:	461a      	mov	r2, r3
 8002368:	2102      	movs	r1, #2
 800236a:	4868      	ldr	r0, [pc, #416]	; (800250c <apply_input+0x1fc>)
 800236c:	f002 f89e 	bl	80044ac <HAL_GPIO_WritePin>
    //ARR *= 16;
    //ARR /= reduction1;
    //CCR = (uint32_t) ((ABS(u[0])/MAX_SPEED)*(ARR - 1));
    //CCR %= (ARR-1); /* saturate the motor, avoid too high speeds */
    // rad2stepdir(u[0], (float) RESOLUTION, (float) (1/T_S), &steps, &dir1);
    stepdir = (int32_t) (16*reduction1*(u[0]/RESOLUTION)); // 16 -> microstepping
 8002370:	230a      	movs	r3, #10
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f8e5 	bl	8000544 <__aeabi_i2d>
 800237a:	4604      	mov	r4, r0
 800237c:	460d      	mov	r5, r1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f8f0 	bl	8000568 <__aeabi_f2d>
 8002388:	a35d      	add	r3, pc, #372	; (adr r3, 8002500 <apply_input+0x1f0>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	f7fe fa6d 	bl	800086c <__aeabi_ddiv>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4620      	mov	r0, r4
 8002398:	4629      	mov	r1, r5
 800239a:	f7fe f93d 	bl	8000618 <__aeabi_dmul>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fbd1 	bl	8000b4c <__aeabi_d2iz>
 80023aa:	4603      	mov	r3, r0
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
    f = HAL_RCC_GetPCLK1Freq()*2;
 80023ae:	f002 fd39 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 80023b2:	4603      	mov	r3, r0
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    // dir1 = -SIGN(stepdir);
    steps = (uint32_t) ABS(stepdir);
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	43db      	mvns	r3, r3
 80023bc:	0fdb      	lsrs	r3, r3, #31
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bfd4      	ite	le
 80023c8:	2301      	movle	r3, #1
 80023ca:	2300      	movgt	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	623b      	str	r3, [r7, #32]
    ARR = steps == 0 ? 0 : (f/(steps))-1;
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <apply_input+0xe0>
 80023e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	e000      	b.n	80023f2 <apply_input+0xe2>
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
    CCR = steps == 0 ? 0 : (ARR-1)/2;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <apply_input+0xf2>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	e000      	b.n	8002404 <apply_input+0xf4>
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
    __HAL_TIM_SET_AUTORELOAD(htim1, ARR);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	635a      	str	r2, [r3, #52]	; 0x34
    htim1->Instance->EGR = TIM_EGR_UG;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	615a      	str	r2, [r3, #20]
    //ARR *= 16;
    //ARR /= reduction2;
    //CCR = (uint32_t) ((ABS(u[1])/MAX_SPEED)*(ARR - 1));
    //CCR %= (ARR-1); /* saturate the motor, avoid too high speeds */

    if(u[1] > 0){
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002434:	dd05      	ble.n	8002442 <apply_input+0x132>
    	double a;
    	a = 0;
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }

    stepdir = (int32_t) (16*reduction2*(u[1]/RESOLUTION)); // 16 -> microstepping
 8002442:	2305      	movs	r3, #5
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f87c 	bl	8000544 <__aeabi_i2d>
 800244c:	4604      	mov	r4, r0
 800244e:	460d      	mov	r5, r1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f886 	bl	8000568 <__aeabi_f2d>
 800245c:	a328      	add	r3, pc, #160	; (adr r3, 8002500 <apply_input+0x1f0>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fe fa03 	bl	800086c <__aeabi_ddiv>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	f7fe f8d3 	bl	8000618 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fb67 	bl	8000b4c <__aeabi_d2iz>
 800247e:	4603      	mov	r3, r0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
    f = HAL_RCC_GetPCLK1Freq()*2;
 8002482:	f002 fccf 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8002486:	4603      	mov	r3, r0
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
	steps = (uint32_t) ABS(stepdir);
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	43db      	mvns	r3, r3
 8002490:	0fdb      	lsrs	r3, r3, #31
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	bfd4      	ite	le
 800249c:	2301      	movle	r3, #1
 800249e:	2300      	movgt	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	b25b      	sxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	623b      	str	r3, [r7, #32]
	ARR = steps == 0 ? 0 : (f/(steps))-1;
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <apply_input+0x1b4>
 80024b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	e000      	b.n	80024c6 <apply_input+0x1b6>
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
	CCR = steps == 0 ? 0 : (ARR-1)/2;
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <apply_input+0x1c6>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	e000      	b.n	80024d8 <apply_input+0x1c8>
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
    __HAL_TIM_SET_AUTORELOAD(htim2, ARR);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	635a      	str	r2, [r3, #52]	; 0x34
    htim2->Instance->EGR = TIM_EGR_UG;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2201      	movs	r2, #1
 80024f6:	615a      	str	r2, [r3, #20]
    // CCR = (uint32_t) ARR/2;
// 
    // __HAL_TIM_SET_AUTORELOAD(htim2, ARR);
    // __HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
    // htim2->Instance->EGR = TIM_EGR_UG;
}
 80024f8:	bf00      	nop
 80024fa:	3730      	adds	r7, #48	; 0x30
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002500:	ae261898 	.word	0xae261898
 8002504:	3fa015be 	.word	0x3fa015be
 8002508:	40020800 	.word	0x40020800
 800250c:	40020000 	.word	0x40020000

08002510 <start_timers>:

void start_timers(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, TIM_HandleTypeDef *htim4){
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
    HAL_TIM_Base_Start_IT(htim1);
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f002 fcf8 	bl	8004f14 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim2);
 8002524:	68b8      	ldr	r0, [r7, #8]
 8002526:	f002 fcf5 	bl	8004f14 <HAL_TIM_Base_Start_IT>
    /* start motor PWM */
    HAL_TIM_Base_Start_IT(htim3);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f002 fcf2 	bl	8004f14 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim4);
 8002530:	6838      	ldr	r0, [r7, #0]
 8002532:	f002 fcef 	bl	8004f14 <HAL_TIM_Base_Start_IT>
    /* start PWM */
    if(HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1) != HAL_OK){
 8002536:	2100      	movs	r1, #0
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f002 fd9d 	bl	8005078 <HAL_TIM_PWM_Start>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <start_timers+0x38>
        HardFault_Handler();
 8002544:	f000 ff0f 	bl	8003366 <HardFault_Handler>
    }
    if(HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_1) != HAL_OK){
 8002548:	2100      	movs	r1, #0
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	f002 fd94 	bl	8005078 <HAL_TIM_PWM_Start>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <start_timers+0x4a>
        HardFault_Handler();
 8002556:	f000 ff06 	bl	8003366 <HardFault_Handler>
    }
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	0000      	movs	r0, r0
 8002564:	0000      	movs	r0, r0
	...

08002568 <setup_encoders>:
    sprintf(tx_data, "%X:%X:%X:%X:%X\n", (unsigned long long int) timestamp, encoding_q0, encoding_q1, encoding_q0_d, encoding_q1_d); /*Timestamp:q0:q1*/
    HAL_UART_Transmit_DMA(huart, (uint8_t *) tx_data, sizeof tx_data); /* send encoder data for logging purposes */
}


void setup_encoders(TIM_HandleTypeDef *htim){
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	const uint32_t clock_freq = 84000000;
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <setup_encoders+0x78>)
 8002572:	60fb      	str	r3, [r7, #12]
	uint16_t ARR;
	ARR = (T_S*clock_freq)/PRESCALER_ENCODER;
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f7fd ffd5 	bl	8000524 <__aeabi_ui2d>
 800257a:	a317      	add	r3, pc, #92	; (adr r3, 80025d8 <setup_encoders+0x70>)
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f7fe f84a 	bl	8000618 <__aeabi_dmul>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <setup_encoders+0x7c>)
 8002592:	f7fe f96b 	bl	800086c <__aeabi_ddiv>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	f7fe fafd 	bl	8000b9c <__aeabi_d2uiz>
 80025a2:	4603      	mov	r3, r0
 80025a4:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_PRESCALER(htim, PRESCALER_ENCODER);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2210      	movs	r2, #16
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	897a      	ldrh	r2, [r7, #10]
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80025b6:	897a      	ldrh	r2, [r7, #10]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	60da      	str	r2, [r3, #12]
	htim->Instance->EGR = TIM_EGR_UG;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f002 fca5 	bl	8004f14 <HAL_TIM_Base_Start_IT>
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	f3af 8000 	nop.w
 80025d8:	eb1c432d 	.word	0xeb1c432d
 80025dc:	3f2a36e2 	.word	0x3f2a36e2
 80025e0:	0501bd00 	.word	0x0501bd00
 80025e4:	40300000 	.word	0x40300000

080025e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  rate_t rate;
  float v[2], v_est, a_est;
  char *data = "\n";
 80025ee:	4b3c      	ldr	r3, [pc, #240]	; (80026e0 <main+0xf8>)
 80025f0:	617b      	str	r3, [r7, #20]
  float i = 1*T_C;
 80025f2:	4b3c      	ldr	r3, [pc, #240]	; (80026e4 <main+0xfc>)
 80025f4:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025f6:	f001 f82b 	bl	8003650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025fa:	f000 f88f 	bl	800271c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025fe:	f000 fac7 	bl	8002b90 <MX_GPIO_Init>
  MX_DMA_Init();
 8002602:	f000 fa9d 	bl	8002b40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002606:	f000 fa71 	bl	8002aec <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800260a:	f000 f949 	bl	80028a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800260e:	f000 f99b 	bl	8002948 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002612:	f000 f8ed 	bl	80027f0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002616:	f000 f9eb 	bl	80029f0 <MX_TIM5_Init>
  MX_TIM10_Init();
 800261a:	f000 fa43 	bl	8002aa4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip, &htim3, &htim4); /* initialize the manipulator struct */
 800261e:	4a32      	ldr	r2, [pc, #200]	; (80026e8 <main+0x100>)
 8002620:	4932      	ldr	r1, [pc, #200]	; (80026ec <main+0x104>)
 8002622:	4833      	ldr	r0, [pc, #204]	; (80026f0 <main+0x108>)
 8002624:	f7fe fd5e 	bl	80010e4 <init_man>
  init_rate(&rate, (uint32_t) (T_C*1000)); /* initialize the rate struct */
 8002628:	f107 0308 	add.w	r3, r7, #8
 800262c:	2101      	movs	r1, #1
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fd06 	bl	8002040 <init_rate>
  rbclear(&timestamps);
 8002634:	482f      	ldr	r0, [pc, #188]	; (80026f4 <main+0x10c>)
 8002636:	f000 fc45 	bl	8002ec4 <rbclear>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	492e      	ldr	r1, [pc, #184]	; (80026f8 <main+0x110>)
 800263e:	482f      	ldr	r0, [pc, #188]	; (80026fc <main+0x114>)
 8002640:	f003 fb63 	bl	8005d0a <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* start timers */
  start_timers(&htim3, &htim4, &htim2, &htim5);
 8002644:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <main+0x118>)
 8002646:	4a2f      	ldr	r2, [pc, #188]	; (8002704 <main+0x11c>)
 8002648:	4927      	ldr	r1, [pc, #156]	; (80026e8 <main+0x100>)
 800264a:	4828      	ldr	r0, [pc, #160]	; (80026ec <main+0x104>)
 800264c:	f7ff ff60 	bl	8002510 <start_timers>
  setup_encoders(&htim10);
 8002650:	482d      	ldr	r0, [pc, #180]	; (8002708 <main+0x120>)
 8002652:	f7ff ff89 	bl	8002568 <setup_encoders>

  while (1)
  {
    // read_encoders(&htim3, &htim4, &manip);
    update_speeds(&manip);
 8002656:	4826      	ldr	r0, [pc, #152]	; (80026f0 <main+0x108>)
 8002658:	f7ff fdf8 	bl	800224c <update_speeds>
    /* log data */
    //log_data(&huart2, &manip);
    controller(&manip, NULL); /* apply the control law to find the input */
 800265c:	2100      	movs	r1, #0
 800265e:	4824      	ldr	r0, [pc, #144]	; (80026f0 <main+0x108>)
 8002660:	f7ff fa1e 	bl	8001aa0 <controller>
    /* apply the inputs to the motors */

    // v[0] = 0; // 0.8*sin(HAL_GetTick()/1000);
    if (limit_switch == -1){
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <main+0x124>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800266c:	d11f      	bne.n	80026ae <main+0xc6>
    	  v[0] = 0.3*sin(HAL_GetTick()/1000);
 800266e:	f001 f855 	bl	800371c <HAL_GetTick>
 8002672:	4603      	mov	r3, r0
 8002674:	4a26      	ldr	r2, [pc, #152]	; (8002710 <main+0x128>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff51 	bl	8000524 <__aeabi_ui2d>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	ec43 2b10 	vmov	d0, r2, r3
 800268a:	f005 fe01 	bl	8008290 <sin>
 800268e:	ec51 0b10 	vmov	r0, r1, d0
 8002692:	a311      	add	r3, pc, #68	; (adr r3, 80026d8 <main+0xf0>)
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f7fd ffbe 	bl	8000618 <__aeabi_dmul>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	f7fe fa9a 	bl	8000bdc <__aeabi_d2f>
 80026a8:	4603      	mov	r3, r0
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	e002      	b.n	80026b4 <main+0xcc>
    }
    else {
    	v[0]=0;
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	603b      	str	r3, [r7, #0]





    disp1 = v[0];
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4a17      	ldr	r2, [pc, #92]	; (8002714 <main+0x12c>)
 80026b8:	6013      	str	r3, [r2, #0]
    // *((float *) tx_data+1) = v[1];
    // tx_data[16] = '\n';
    // HAL_UART_Transmit_DMA(&huart2, &tx_data, 17);
    // !SECTION DEBUG

    apply_input(&htim2, &htim5, v);
 80026ba:	463b      	mov	r3, r7
 80026bc:	461a      	mov	r2, r3
 80026be:	4910      	ldr	r1, [pc, #64]	; (8002700 <main+0x118>)
 80026c0:	4810      	ldr	r0, [pc, #64]	; (8002704 <main+0x11c>)
 80026c2:	f7ff fe25 	bl	8002310 <apply_input>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //rate_sleep(&rate); /* wait with a fixed frequency */
    HAL_Delay((uint32_t) (T_C*1000));
 80026c6:	2001      	movs	r0, #1
 80026c8:	f001 f834 	bl	8003734 <HAL_Delay>
    count++;
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <main+0x130>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3301      	adds	r3, #1
 80026d2:	4a11      	ldr	r2, [pc, #68]	; (8002718 <main+0x130>)
 80026d4:	6013      	str	r3, [r2, #0]
    update_speeds(&manip);
 80026d6:	e7be      	b.n	8002656 <main+0x6e>
 80026d8:	33333333 	.word	0x33333333
 80026dc:	3fd33333 	.word	0x3fd33333
 80026e0:	08009358 	.word	0x08009358
 80026e4:	3a83126f 	.word	0x3a83126f
 80026e8:	2000047c 	.word	0x2000047c
 80026ec:	20000434 	.word	0x20000434
 80026f0:	20000110 	.word	0x20000110
 80026f4:	200003a8 	.word	0x200003a8
 80026f8:	20000090 	.word	0x20000090
 80026fc:	20000554 	.word	0x20000554
 8002700:	200004c4 	.word	0x200004c4
 8002704:	200003ec 	.word	0x200003ec
 8002708:	2000050c 	.word	0x2000050c
 800270c:	20000000 	.word	0x20000000
 8002710:	10624dd3 	.word	0x10624dd3
 8002714:	200003d4 	.word	0x200003d4
 8002718:	200003e8 	.word	0x200003e8

0800271c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b094      	sub	sp, #80	; 0x50
 8002720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002722:	f107 0320 	add.w	r3, r7, #32
 8002726:	2230      	movs	r2, #48	; 0x30
 8002728:	2100      	movs	r1, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f004 fbd0 	bl	8006ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <SystemClock_Config+0xcc>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <SystemClock_Config+0xcc>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274e:	6413      	str	r3, [r2, #64]	; 0x40
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <SystemClock_Config+0xcc>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800275c:	2300      	movs	r3, #0
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	4b22      	ldr	r3, [pc, #136]	; (80027ec <SystemClock_Config+0xd0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a21      	ldr	r2, [pc, #132]	; (80027ec <SystemClock_Config+0xd0>)
 8002766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <SystemClock_Config+0xd0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002778:	2302      	movs	r3, #2
 800277a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800277c:	2301      	movs	r3, #1
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002780:	2310      	movs	r3, #16
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002784:	2302      	movs	r3, #2
 8002786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002788:	2300      	movs	r3, #0
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800278c:	2310      	movs	r3, #16
 800278e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002790:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002794:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002796:	2304      	movs	r3, #4
 8002798:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800279a:	2304      	movs	r3, #4
 800279c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800279e:	f107 0320 	add.w	r3, r7, #32
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 fece 	bl	8004544 <HAL_RCC_OscConfig>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80027ae:	f000 fa89 	bl	8002cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027b2:	230f      	movs	r3, #15
 80027b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b6:	2302      	movs	r3, #2
 80027b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	2102      	movs	r1, #2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 f930 	bl	8004a34 <HAL_RCC_ClockConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80027da:	f000 fa73 	bl	8002cc4 <Error_Handler>
  }
}
 80027de:	bf00      	nop
 80027e0:	3750      	adds	r7, #80	; 0x50
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40007000 	.word	0x40007000

080027f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f6:	f107 0320 	add.w	r3, r7, #32
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	611a      	str	r2, [r3, #16]
 800280e:	615a      	str	r2, [r3, #20]
 8002810:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <MX_TIM2_Init+0xac>)
 8002814:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002818:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <MX_TIM2_Init+0xac>)
 800281c:	2200      	movs	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <MX_TIM2_Init+0xac>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <MX_TIM2_Init+0xac>)
 8002828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800282c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <MX_TIM2_Init+0xac>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <MX_TIM2_Init+0xac>)
 8002836:	2200      	movs	r2, #0
 8002838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800283a:	4818      	ldr	r0, [pc, #96]	; (800289c <MX_TIM2_Init+0xac>)
 800283c:	f002 fbcc 	bl	8004fd8 <HAL_TIM_PWM_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002846:	f000 fa3d 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002852:	f107 0320 	add.w	r3, r7, #32
 8002856:	4619      	mov	r1, r3
 8002858:	4810      	ldr	r0, [pc, #64]	; (800289c <MX_TIM2_Init+0xac>)
 800285a:	f003 f987 	bl	8005b6c <HAL_TIMEx_MasterConfigSynchronization>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002864:	f000 fa2e 	bl	8002cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002868:	2360      	movs	r3, #96	; 0x60
 800286a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2200      	movs	r2, #0
 800287c:	4619      	mov	r1, r3
 800287e:	4807      	ldr	r0, [pc, #28]	; (800289c <MX_TIM2_Init+0xac>)
 8002880:	f002 fe58 	bl	8005534 <HAL_TIM_PWM_ConfigChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800288a:	f000 fa1b 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800288e:	4803      	ldr	r0, [pc, #12]	; (800289c <MX_TIM2_Init+0xac>)
 8002890:	f000 fc52 	bl	8003138 <HAL_TIM_MspPostInit>

}
 8002894:	bf00      	nop
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200003ec 	.word	0x200003ec

080028a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08c      	sub	sp, #48	; 0x30
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	2224      	movs	r2, #36	; 0x24
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 fb0e 	bl	8006ed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <MX_TIM3_Init+0xa0>)
 80028be:	4a21      	ldr	r2, [pc, #132]	; (8002944 <MX_TIM3_Init+0xa4>)
 80028c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <MX_TIM3_Init+0xa0>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <MX_TIM3_Init+0xa0>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <MX_TIM3_Init+0xa0>)
 80028d0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80028d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <MX_TIM3_Init+0xa0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <MX_TIM3_Init+0xa0>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028e2:	2303      	movs	r3, #3
 80028e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028ea:	2301      	movs	r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028fa:	2301      	movs	r3, #1
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028fe:	2300      	movs	r3, #0
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	4619      	mov	r1, r3
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <MX_TIM3_Init+0xa0>)
 800290e:	f002 fc63 	bl	80051d8 <HAL_TIM_Encoder_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002918:	f000 f9d4 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800291c:	2300      	movs	r3, #0
 800291e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	4619      	mov	r1, r3
 8002928:	4805      	ldr	r0, [pc, #20]	; (8002940 <MX_TIM3_Init+0xa0>)
 800292a:	f003 f91f 	bl	8005b6c <HAL_TIMEx_MasterConfigSynchronization>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002934:	f000 f9c6 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	3730      	adds	r7, #48	; 0x30
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000434 	.word	0x20000434
 8002944:	40000400 	.word	0x40000400

08002948 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f004 faba 	bl	8006ed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002964:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <MX_TIM4_Init+0xa0>)
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <MX_TIM4_Init+0xa4>)
 8002968:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800296a:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <MX_TIM4_Init+0xa0>)
 800296c:	2200      	movs	r2, #0
 800296e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <MX_TIM4_Init+0xa0>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <MX_TIM4_Init+0xa0>)
 8002978:	f644 6220 	movw	r2, #20000	; 0x4e20
 800297c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <MX_TIM4_Init+0xa0>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <MX_TIM4_Init+0xa0>)
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800298a:	2303      	movs	r3, #3
 800298c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002992:	2301      	movs	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800299e:	2300      	movs	r3, #0
 80029a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029a2:	2301      	movs	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	4619      	mov	r1, r3
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <MX_TIM4_Init+0xa0>)
 80029b6:	f002 fc0f 	bl	80051d8 <HAL_TIM_Encoder_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80029c0:	f000 f980 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c4:	2300      	movs	r3, #0
 80029c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	4805      	ldr	r0, [pc, #20]	; (80029e8 <MX_TIM4_Init+0xa0>)
 80029d2:	f003 f8cb 	bl	8005b6c <HAL_TIMEx_MasterConfigSynchronization>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80029dc:	f000 f972 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	3730      	adds	r7, #48	; 0x30
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	2000047c 	.word	0x2000047c
 80029ec:	40000800 	.word	0x40000800

080029f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f6:	f107 0320 	add.w	r3, r7, #32
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	611a      	str	r2, [r3, #16]
 8002a0e:	615a      	str	r2, [r3, #20]
 8002a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <MX_TIM5_Init+0xac>)
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <MX_TIM5_Init+0xb0>)
 8002a16:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a18:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <MX_TIM5_Init+0xac>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <MX_TIM5_Init+0xac>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <MX_TIM5_Init+0xac>)
 8002a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a2a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <MX_TIM5_Init+0xac>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <MX_TIM5_Init+0xac>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002a38:	4818      	ldr	r0, [pc, #96]	; (8002a9c <MX_TIM5_Init+0xac>)
 8002a3a:	f002 facd 	bl	8004fd8 <HAL_TIM_PWM_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002a44:	f000 f93e 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a50:	f107 0320 	add.w	r3, r7, #32
 8002a54:	4619      	mov	r1, r3
 8002a56:	4811      	ldr	r0, [pc, #68]	; (8002a9c <MX_TIM5_Init+0xac>)
 8002a58:	f003 f888 	bl	8005b6c <HAL_TIMEx_MasterConfigSynchronization>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002a62:	f000 f92f 	bl	8002cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a66:	2360      	movs	r3, #96	; 0x60
 8002a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4807      	ldr	r0, [pc, #28]	; (8002a9c <MX_TIM5_Init+0xac>)
 8002a7e:	f002 fd59 	bl	8005534 <HAL_TIM_PWM_ConfigChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002a88:	f000 f91c 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002a8c:	4803      	ldr	r0, [pc, #12]	; (8002a9c <MX_TIM5_Init+0xac>)
 8002a8e:	f000 fb53 	bl	8003138 <HAL_TIM_MspPostInit>

}
 8002a92:	bf00      	nop
 8002a94:	3728      	adds	r7, #40	; 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200004c4 	.word	0x200004c4
 8002aa0:	40000c00 	.word	0x40000c00

08002aa4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <MX_TIM10_Init+0x40>)
 8002aaa:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <MX_TIM10_Init+0x44>)
 8002aac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16;
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <MX_TIM10_Init+0x40>)
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <MX_TIM10_Init+0x40>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 52500;
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <MX_TIM10_Init+0x40>)
 8002abc:	f64c 5214 	movw	r2, #52500	; 0xcd14
 8002ac0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <MX_TIM10_Init+0x40>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <MX_TIM10_Init+0x40>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002ace:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_TIM10_Init+0x40>)
 8002ad0:	f002 f9d0 	bl	8004e74 <HAL_TIM_Base_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002ada:	f000 f8f3 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000050c 	.word	0x2000050c
 8002ae8:	40014400 	.word	0x40014400

08002aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <MX_USART2_UART_Init+0x4c>)
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <MX_USART2_UART_Init+0x50>)
 8002af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <MX_USART2_UART_Init+0x4c>)
 8002af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <MX_USART2_UART_Init+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_USART2_UART_Init+0x4c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <MX_USART2_UART_Init+0x4c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <MX_USART2_UART_Init+0x4c>)
 8002b12:	220c      	movs	r2, #12
 8002b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <MX_USART2_UART_Init+0x4c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <MX_USART2_UART_Init+0x4c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b22:	4805      	ldr	r0, [pc, #20]	; (8002b38 <MX_USART2_UART_Init+0x4c>)
 8002b24:	f003 f8a4 	bl	8005c70 <HAL_UART_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b2e:	f000 f8c9 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000554 	.word	0x20000554
 8002b3c:	40004400 	.word	0x40004400

08002b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <MX_DMA_Init+0x4c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <MX_DMA_Init+0x4c>)
 8002b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <MX_DMA_Init+0x4c>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2100      	movs	r1, #0
 8002b66:	2010      	movs	r0, #16
 8002b68:	f000 fee3 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b6c:	2010      	movs	r0, #16
 8002b6e:	f000 fefc 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	2011      	movs	r0, #17
 8002b78:	f000 fedb 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b7c:	2011      	movs	r0, #17
 8002b7e:	f000 fef4 	bl	800396a <HAL_NVIC_EnableIRQ>

}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800

08002b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	60da      	str	r2, [r3, #12]
 8002ba4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a42      	ldr	r2, [pc, #264]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a3b      	ldr	r2, [pc, #236]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	4b35      	ldr	r3, [pc, #212]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a34      	ldr	r2, [pc, #208]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a2d      	ldr	r2, [pc, #180]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <MX_GPIO_Init+0x128>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2122      	movs	r1, #34	; 0x22
 8002c1a:	4828      	ldr	r0, [pc, #160]	; (8002cbc <MX_GPIO_Init+0x12c>)
 8002c1c:	f001 fc46 	bl	80044ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8002c20:	2200      	movs	r2, #0
 8002c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c26:	4826      	ldr	r0, [pc, #152]	; (8002cc0 <MX_GPIO_Init+0x130>)
 8002c28:	f001 fc40 	bl	80044ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	481f      	ldr	r0, [pc, #124]	; (8002cc0 <MX_GPIO_Init+0x130>)
 8002c44:	f001 faae 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|LD2_Pin;
 8002c48:	2322      	movs	r3, #34	; 0x22
 8002c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	2300      	movs	r3, #0
 8002c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4817      	ldr	r0, [pc, #92]	; (8002cbc <MX_GPIO_Init+0x12c>)
 8002c60:	f001 faa0 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|LIMIT_SWITCH_2_Pin;
 8002c64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c70:	2301      	movs	r3, #1
 8002c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4810      	ldr	r0, [pc, #64]	; (8002cbc <MX_GPIO_Init+0x12c>)
 8002c7c:	f001 fa92 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_1_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin;
 8002c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c86:	2301      	movs	r3, #1
 8002c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	4619      	mov	r1, r3
 8002c98:	4809      	ldr	r0, [pc, #36]	; (8002cc0 <MX_GPIO_Init+0x130>)
 8002c9a:	f001 fa83 	bl	80041a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	2028      	movs	r0, #40	; 0x28
 8002ca4:	f000 fe45 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ca8:	2028      	movs	r0, #40	; 0x28
 8002caa:	f000 fe5e 	bl	800396a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40020800 	.word	0x40020800

08002cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc8:	b672      	cpsid	i
}
 8002cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <Error_Handler+0x8>
	...

08002cd0 <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <rbpush+0x90>)
 8002cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8002d02:	08d9      	lsrs	r1, r3, #3
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	789b      	ldrb	r3, [r3, #2]
 8002d18:	2b0a      	cmp	r3, #10
 8002d1a:	d114      	bne.n	8002d46 <rbpush+0x76>
        /* overwriting data: also move head forward */
        buffer->head++;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	3301      	adds	r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	785a      	ldrb	r2, [r3, #1]
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <rbpush+0x90>)
 8002d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d32:	08d9      	lsrs	r1, r3, #3
 8002d34:	460b      	mov	r3, r1
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	705a      	strb	r2, [r3, #1]
 8002d44:	e005      	b.n	8002d52 <rbpush+0x82>
    }else{
        buffer->length++;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	789b      	ldrb	r3, [r3, #2]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 8002d52:	2301      	movs	r3, #1
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	cccccccd 	.word	0xcccccccd

08002d64 <rbpop>:
- rbelement_t *data: pointer to the variable that will hold the popped value;
@outputs: 
- rberror_t: whether the popping procedure was concluded successfully.
@#
*/
rberror_t rbpop(ringbuffer_t *buffer, rbelement_t *data){
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	789b      	ldrb	r3, [r3, #2]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <rbpop+0x28>
        *data = buffer->buffer[buffer->head]; /* avoids random values in data */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	785b      	ldrb	r3, [r3, #1]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	3304      	adds	r3, #4
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	601a      	str	r2, [r3, #0]
        return 0; /* pop operation could not be completed because the buffer is empty */
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e023      	b.n	8002dd4 <rbpop+0x70>
    }
    *data = buffer->buffer[buffer->head];
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	785b      	ldrb	r3, [r3, #1]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	3304      	adds	r3, #4
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	601a      	str	r2, [r3, #0]
    buffer->head++;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	3301      	adds	r3, #1
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	705a      	strb	r2, [r3, #1]
    buffer->head %= RBUF_SZ;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	785a      	ldrb	r2, [r3, #1]
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <rbpop+0x7c>)
 8002db0:	fba3 1302 	umull	r1, r3, r3, r2
 8002db4:	08d9      	lsrs	r1, r3, #3
 8002db6:	460b      	mov	r3, r1
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	705a      	strb	r2, [r3, #1]
    buffer->length--;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	789b      	ldrb	r3, [r3, #2]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	709a      	strb	r2, [r3, #2]
    return 1;
 8002dd2:	2301      	movs	r3, #1
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	cccccccd 	.word	0xcccccccd

08002de4 <rblast>:
- rbelement_t *data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	789b      	ldrb	r3, [r3, #2]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <rblast+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	785b      	ldrb	r3, [r3, #1]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3304      	adds	r3, #4
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	601a      	str	r2, [r3, #0]
        return 0; // operation failed
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e015      	b.n	8002e38 <rblast+0x54>
    }
    // uint8_t index = (uint8_t) ((buffer->tail-1+RBUF_SZ)%RBUF_SZ);
    int8_t index = buffer->tail-1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
 8002e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da03      	bge.n	8002e26 <rblast+0x42>
    	index += RBUF_SZ;
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	330a      	adds	r3, #10
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	73fb      	strb	r3, [r7, #15]
    }
    *data = buffer->buffer[(uint8_t) index];
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3304      	adds	r3, #4
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	601a      	str	r2, [r3, #0]
    return 1;
 8002e36:	2301      	movs	r3, #1
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <rbget>:


rberror_t rbget(ringbuffer_t *buffer, int8_t i, rbelement_t *data){
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 8002e52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db05      	blt.n	8002e66 <rbget+0x22>
 8002e5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	7892      	ldrb	r2, [r2, #2]
 8002e62:	4293      	cmp	r3, r2
 8002e64:	db0a      	blt.n	8002e7c <rbget+0x38>
        /* out of bounds */
    	*data =  buffer->buffer[buffer->head];
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	785b      	ldrb	r3, [r3, #1]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	3304      	adds	r3, #4
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	601a      	str	r2, [r3, #0]
        return 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e01b      	b.n	8002eb4 <rbget+0x70>
    }
    uint8_t index = (uint8_t) ((buffer->head+i) % RBUF_SZ);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	785b      	ldrb	r3, [r3, #1]
 8002e80:	461a      	mov	r2, r3
 8002e82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002e86:	441a      	add	r2, r3
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <rbget+0x7c>)
 8002e8a:	fb83 1302 	smull	r1, r3, r3, r2
 8002e8e:	1099      	asrs	r1, r3, #2
 8002e90:	17d3      	asrs	r3, r2, #31
 8002e92:	1ac9      	subs	r1, r1, r3
 8002e94:	460b      	mov	r3, r1
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	1ad1      	subs	r1, r2, r3
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	75fb      	strb	r3, [r7, #23]
    *data = buffer->buffer[index];
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
    return 1;
 8002eb2:	2301      	movs	r3, #1
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	66666667 	.word	0x66666667

08002ec4 <rbclear>:
- ringbuffer_t *buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	e00a      	b.n	8002eec <rbclear+0x28>
        buffer->buffer[i] = 0;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	d9f1      	bls.n	8002ed6 <rbclear+0x12>
    }
    buffer->length = 0;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_MspInit+0x4c>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	4a0f      	ldr	r2, [pc, #60]	; (8002f5c <HAL_MspInit+0x4c>)
 8002f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f24:	6453      	str	r3, [r2, #68]	; 0x44
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <HAL_MspInit+0x4c>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_MspInit+0x4c>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <HAL_MspInit+0x4c>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_MspInit+0x4c>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f4e:	2007      	movs	r0, #7
 8002f50:	f000 fce4 	bl	800391c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800

08002f60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f70:	d10e      	bne.n	8002f90 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_TIM_PWM_MspInit+0x64>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <HAL_TIM_PWM_MspInit+0x64>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_TIM_PWM_MspInit+0x64>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f8e:	e012      	b.n	8002fb6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_TIM_PWM_MspInit+0x68>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10d      	bne.n	8002fb6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_TIM_PWM_MspInit+0x64>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <HAL_TIM_PWM_MspInit+0x64>)
 8002fa4:	f043 0308 	orr.w	r3, r3, #8
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_TIM_PWM_MspInit+0x64>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40000c00 	.word	0x40000c00

08002fcc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	; 0x30
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 031c 	add.w	r3, r7, #28
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a3a      	ldr	r2, [pc, #232]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x108>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d134      	bne.n	8003058 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a38      	ldr	r2, [pc, #224]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a31      	ldr	r2, [pc, #196]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003026:	23c0      	movs	r3, #192	; 0xc0
 8003028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003036:	2302      	movs	r3, #2
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303a:	f107 031c 	add.w	r3, r7, #28
 800303e:	4619      	mov	r1, r3
 8003040:	4826      	ldr	r0, [pc, #152]	; (80030dc <HAL_TIM_Encoder_MspInit+0x110>)
 8003042:	f001 f8af 	bl	80041a4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2100      	movs	r1, #0
 800304a:	201d      	movs	r0, #29
 800304c:	f000 fc71 	bl	8003932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003050:	201d      	movs	r0, #29
 8003052:	f000 fc8a 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003056:	e038      	b.n	80030ca <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x114>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d133      	bne.n	80030ca <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a14      	ldr	r2, [pc, #80]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800309a:	23c0      	movs	r3, #192	; 0xc0
 800309c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030aa:	2302      	movs	r3, #2
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ae:	f107 031c 	add.w	r3, r7, #28
 80030b2:	4619      	mov	r1, r3
 80030b4:	480b      	ldr	r0, [pc, #44]	; (80030e4 <HAL_TIM_Encoder_MspInit+0x118>)
 80030b6:	f001 f875 	bl	80041a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2100      	movs	r1, #0
 80030be:	201e      	movs	r0, #30
 80030c0:	f000 fc37 	bl	8003932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030c4:	201e      	movs	r0, #30
 80030c6:	f000 fc50 	bl	800396a <HAL_NVIC_EnableIRQ>
}
 80030ca:	bf00      	nop
 80030cc:	3730      	adds	r7, #48	; 0x30
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40020000 	.word	0x40020000
 80030e0:	40000800 	.word	0x40000800
 80030e4:	40020400 	.word	0x40020400

080030e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <HAL_TIM_Base_MspInit+0x48>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d115      	bne.n	8003126 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <HAL_TIM_Base_MspInit+0x4c>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <HAL_TIM_Base_MspInit+0x4c>)
 8003104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003108:	6453      	str	r3, [r2, #68]	; 0x44
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_TIM_Base_MspInit+0x4c>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2100      	movs	r1, #0
 800311a:	2019      	movs	r0, #25
 800311c:	f000 fc09 	bl	8003932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003120:	2019      	movs	r0, #25
 8003122:	f000 fc22 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40014400 	.word	0x40014400
 8003134:	40023800 	.word	0x40023800

08003138 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003158:	d11f      	bne.n	800319a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <HAL_TIM_MspPostInit+0xb0>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4a21      	ldr	r2, [pc, #132]	; (80031e8 <HAL_TIM_MspPostInit+0xb0>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <HAL_TIM_MspPostInit+0xb0>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003184:	2300      	movs	r3, #0
 8003186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003188:	2301      	movs	r3, #1
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	4619      	mov	r1, r3
 8003192:	4816      	ldr	r0, [pc, #88]	; (80031ec <HAL_TIM_MspPostInit+0xb4>)
 8003194:	f001 f806 	bl	80041a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003198:	e022      	b.n	80031e0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <HAL_TIM_MspPostInit+0xb8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d11d      	bne.n	80031e0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_TIM_MspPostInit+0xb0>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <HAL_TIM_MspPostInit+0xb0>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6313      	str	r3, [r2, #48]	; 0x30
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_TIM_MspPostInit+0xb0>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031c0:	2301      	movs	r3, #1
 80031c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	2300      	movs	r3, #0
 80031ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031d0:	2302      	movs	r3, #2
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d4:	f107 0314 	add.w	r3, r7, #20
 80031d8:	4619      	mov	r1, r3
 80031da:	4804      	ldr	r0, [pc, #16]	; (80031ec <HAL_TIM_MspPostInit+0xb4>)
 80031dc:	f000 ffe2 	bl	80041a4 <HAL_GPIO_Init>
}
 80031e0:	bf00      	nop
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40000c00 	.word	0x40000c00

080031f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a4c      	ldr	r2, [pc, #304]	; (8003344 <HAL_UART_MspInit+0x150>)
 8003212:	4293      	cmp	r3, r2
 8003214:	f040 8092 	bne.w	800333c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	4b4a      	ldr	r3, [pc, #296]	; (8003348 <HAL_UART_MspInit+0x154>)
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	4a49      	ldr	r2, [pc, #292]	; (8003348 <HAL_UART_MspInit+0x154>)
 8003222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003226:	6413      	str	r3, [r2, #64]	; 0x40
 8003228:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_UART_MspInit+0x154>)
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_UART_MspInit+0x154>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	4a42      	ldr	r2, [pc, #264]	; (8003348 <HAL_UART_MspInit+0x154>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6313      	str	r3, [r2, #48]	; 0x30
 8003244:	4b40      	ldr	r3, [pc, #256]	; (8003348 <HAL_UART_MspInit+0x154>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003250:	230c      	movs	r3, #12
 8003252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003260:	2307      	movs	r3, #7
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4619      	mov	r1, r3
 800326a:	4838      	ldr	r0, [pc, #224]	; (800334c <HAL_UART_MspInit+0x158>)
 800326c:	f000 ff9a 	bl	80041a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003270:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_UART_MspInit+0x15c>)
 8003272:	4a38      	ldr	r2, [pc, #224]	; (8003354 <HAL_UART_MspInit+0x160>)
 8003274:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_UART_MspInit+0x15c>)
 8003278:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800327c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800327e:	4b34      	ldr	r3, [pc, #208]	; (8003350 <HAL_UART_MspInit+0x15c>)
 8003280:	2200      	movs	r2, #0
 8003282:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003284:	4b32      	ldr	r3, [pc, #200]	; (8003350 <HAL_UART_MspInit+0x15c>)
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800328a:	4b31      	ldr	r3, [pc, #196]	; (8003350 <HAL_UART_MspInit+0x15c>)
 800328c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003290:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003292:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <HAL_UART_MspInit+0x15c>)
 8003294:	2200      	movs	r2, #0
 8003296:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_UART_MspInit+0x15c>)
 800329a:	2200      	movs	r2, #0
 800329c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800329e:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <HAL_UART_MspInit+0x15c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <HAL_UART_MspInit+0x15c>)
 80032a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032aa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <HAL_UART_MspInit+0x15c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80032b2:	4827      	ldr	r0, [pc, #156]	; (8003350 <HAL_UART_MspInit+0x15c>)
 80032b4:	f000 fb74 	bl	80039a0 <HAL_DMA_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80032be:	f7ff fd01 	bl	8002cc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a22      	ldr	r2, [pc, #136]	; (8003350 <HAL_UART_MspInit+0x15c>)
 80032c6:	639a      	str	r2, [r3, #56]	; 0x38
 80032c8:	4a21      	ldr	r2, [pc, #132]	; (8003350 <HAL_UART_MspInit+0x15c>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80032ce:	4b22      	ldr	r3, [pc, #136]	; (8003358 <HAL_UART_MspInit+0x164>)
 80032d0:	4a22      	ldr	r2, [pc, #136]	; (800335c <HAL_UART_MspInit+0x168>)
 80032d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80032d4:	4b20      	ldr	r3, [pc, #128]	; (8003358 <HAL_UART_MspInit+0x164>)
 80032d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032dc:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <HAL_UART_MspInit+0x164>)
 80032de:	2240      	movs	r2, #64	; 0x40
 80032e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e2:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_UART_MspInit+0x164>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_UART_MspInit+0x164>)
 80032ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_UART_MspInit+0x164>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_UART_MspInit+0x164>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80032fc:	4b16      	ldr	r3, [pc, #88]	; (8003358 <HAL_UART_MspInit+0x164>)
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_UART_MspInit+0x164>)
 8003304:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003308:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_UART_MspInit+0x164>)
 800330c:	2200      	movs	r2, #0
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003310:	4811      	ldr	r0, [pc, #68]	; (8003358 <HAL_UART_MspInit+0x164>)
 8003312:	f000 fb45 	bl	80039a0 <HAL_DMA_Init>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800331c:	f7ff fcd2 	bl	8002cc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a0d      	ldr	r2, [pc, #52]	; (8003358 <HAL_UART_MspInit+0x164>)
 8003324:	635a      	str	r2, [r3, #52]	; 0x34
 8003326:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <HAL_UART_MspInit+0x164>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800332c:	2200      	movs	r2, #0
 800332e:	2100      	movs	r1, #0
 8003330:	2026      	movs	r0, #38	; 0x26
 8003332:	f000 fafe 	bl	8003932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003336:	2026      	movs	r0, #38	; 0x26
 8003338:	f000 fb17 	bl	800396a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800333c:	bf00      	nop
 800333e:	3728      	adds	r7, #40	; 0x28
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40004400 	.word	0x40004400
 8003348:	40023800 	.word	0x40023800
 800334c:	40020000 	.word	0x40020000
 8003350:	20000598 	.word	0x20000598
 8003354:	40026088 	.word	0x40026088
 8003358:	200005f8 	.word	0x200005f8
 800335c:	400260a0 	.word	0x400260a0

08003360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <NMI_Handler+0x4>

08003366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <HardFault_Handler+0x4>

0800336c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <MemManage_Handler+0x4>

08003372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003376:	e7fe      	b.n	8003376 <BusFault_Handler+0x4>

08003378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800337c:	e7fe      	b.n	800337c <UsageFault_Handler+0x4>

0800337e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ac:	f000 f9a2 	bl	80036f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80033b8:	4802      	ldr	r0, [pc, #8]	; (80033c4 <DMA1_Stream5_IRQHandler+0x10>)
 80033ba:	f000 fc89 	bl	8003cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000598 	.word	0x20000598

080033c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80033cc:	4802      	ldr	r0, [pc, #8]	; (80033d8 <DMA1_Stream6_IRQHandler+0x10>)
 80033ce:	f000 fc7f 	bl	8003cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200005f8 	.word	0x200005f8

080033dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80033e0:	4802      	ldr	r0, [pc, #8]	; (80033ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80033e2:	f001 ff9f 	bl	8005324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	2000050c 	.word	0x2000050c

080033f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <TIM3_IRQHandler+0x10>)
 80033f6:	f001 ff95 	bl	8005324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000434 	.word	0x20000434

08003404 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <TIM4_IRQHandler+0x10>)
 800340a:	f001 ff8b 	bl	8005324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	2000047c 	.word	0x2000047c

08003418 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <USART2_IRQHandler+0x10>)
 800341e:	f002 fca5 	bl	8005d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000554 	.word	0x20000554

0800342c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_1_Pin);
 8003430:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003434:	f001 f86e 	bl	8004514 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_2_Pin);
 8003438:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800343c:	f001 f86a 	bl	8004514 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003440:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003444:	f001 f866 	bl	8004514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}

0800344c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
	return 1;
 8003450:	2301      	movs	r3, #1
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <_kill>:

int _kill(int pid, int sig)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003466:	f003 fd09 	bl	8006e7c <__errno>
 800346a:	4603      	mov	r3, r0
 800346c:	2216      	movs	r2, #22
 800346e:	601a      	str	r2, [r3, #0]
	return -1;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <_exit>:

void _exit (int status)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ffe7 	bl	800345c <_kill>
	while (1) {}		/* Make sure we hang here */
 800348e:	e7fe      	b.n	800348e <_exit+0x12>

08003490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e00a      	b.n	80034b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034a2:	f3af 8000 	nop.w
 80034a6:	4601      	mov	r1, r0
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	60ba      	str	r2, [r7, #8]
 80034ae:	b2ca      	uxtb	r2, r1
 80034b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	dbf0      	blt.n	80034a2 <_read+0x12>
	}

return len;
 80034c0:	687b      	ldr	r3, [r7, #4]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e009      	b.n	80034f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	60ba      	str	r2, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3301      	adds	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dbf1      	blt.n	80034dc <_write+0x12>
	}
	return len;
 80034f8:	687b      	ldr	r3, [r7, #4]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_close>:

int _close(int file)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
	return -1;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800352a:	605a      	str	r2, [r3, #4]
	return 0;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_isatty>:

int _isatty(int file)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
	return 1;
 8003542:	2301      	movs	r3, #1
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
	return 0;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <_sbrk+0x5c>)
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <_sbrk+0x60>)
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003580:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <_sbrk+0x64>)
 800358a:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <_sbrk+0x68>)
 800358c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <_sbrk+0x64>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	429a      	cmp	r2, r3
 800359a:	d207      	bcs.n	80035ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800359c:	f003 fc6e 	bl	8006e7c <__errno>
 80035a0:	4603      	mov	r3, r0
 80035a2:	220c      	movs	r2, #12
 80035a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035aa:	e009      	b.n	80035c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <_sbrk+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <_sbrk+0x64>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <_sbrk+0x64>)
 80035bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035be:	68fb      	ldr	r3, [r7, #12]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20020000 	.word	0x20020000
 80035cc:	00000400 	.word	0x00000400
 80035d0:	20000658 	.word	0x20000658
 80035d4:	20000670 	.word	0x20000670

080035d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <SystemInit+0x20>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <SystemInit+0x20>)
 80035e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <Reset_Handler>:
 80035fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003634 <LoopFillZerobss+0x12>
 8003600:	480d      	ldr	r0, [pc, #52]	; (8003638 <LoopFillZerobss+0x16>)
 8003602:	490e      	ldr	r1, [pc, #56]	; (800363c <LoopFillZerobss+0x1a>)
 8003604:	4a0e      	ldr	r2, [pc, #56]	; (8003640 <LoopFillZerobss+0x1e>)
 8003606:	2300      	movs	r3, #0
 8003608:	e002      	b.n	8003610 <LoopCopyDataInit>

0800360a <CopyDataInit>:
 800360a:	58d4      	ldr	r4, [r2, r3]
 800360c:	50c4      	str	r4, [r0, r3]
 800360e:	3304      	adds	r3, #4

08003610 <LoopCopyDataInit>:
 8003610:	18c4      	adds	r4, r0, r3
 8003612:	428c      	cmp	r4, r1
 8003614:	d3f9      	bcc.n	800360a <CopyDataInit>
 8003616:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <LoopFillZerobss+0x22>)
 8003618:	4c0b      	ldr	r4, [pc, #44]	; (8003648 <LoopFillZerobss+0x26>)
 800361a:	2300      	movs	r3, #0
 800361c:	e001      	b.n	8003622 <LoopFillZerobss>

0800361e <FillZerobss>:
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	3204      	adds	r2, #4

08003622 <LoopFillZerobss>:
 8003622:	42a2      	cmp	r2, r4
 8003624:	d3fb      	bcc.n	800361e <FillZerobss>
 8003626:	f7ff ffd7 	bl	80035d8 <SystemInit>
 800362a:	f003 fc2d 	bl	8006e88 <__libc_init_array>
 800362e:	f7fe ffdb 	bl	80025e8 <main>
 8003632:	4770      	bx	lr
 8003634:	20020000 	.word	0x20020000
 8003638:	20000000 	.word	0x20000000
 800363c:	20000074 	.word	0x20000074
 8003640:	080097d0 	.word	0x080097d0
 8003644:	20000074 	.word	0x20000074
 8003648:	20000670 	.word	0x20000670

0800364c <ADC_IRQHandler>:
 800364c:	e7fe      	b.n	800364c <ADC_IRQHandler>
	...

08003650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <HAL_Init+0x40>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a0d      	ldr	r2, [pc, #52]	; (8003690 <HAL_Init+0x40>)
 800365a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800365e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_Init+0x40>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <HAL_Init+0x40>)
 8003666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800366a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HAL_Init+0x40>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a07      	ldr	r2, [pc, #28]	; (8003690 <HAL_Init+0x40>)
 8003672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003678:	2003      	movs	r0, #3
 800367a:	f000 f94f 	bl	800391c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800367e:	2000      	movs	r0, #0
 8003680:	f000 f808 	bl	8003694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003684:	f7ff fc44 	bl	8002f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023c00 	.word	0x40023c00

08003694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800369c:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_InitTick+0x54>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_InitTick+0x58>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	4619      	mov	r1, r3
 80036a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f967 	bl	8003986 <HAL_SYSTICK_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e00e      	b.n	80036e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b0f      	cmp	r3, #15
 80036c6:	d80a      	bhi.n	80036de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c8:	2200      	movs	r2, #0
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036d0:	f000 f92f 	bl	8003932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036d4:	4a06      	ldr	r2, [pc, #24]	; (80036f0 <HAL_InitTick+0x5c>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e000      	b.n	80036e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000004 	.word	0x20000004
 80036ec:	2000000c 	.word	0x2000000c
 80036f0:	20000008 	.word	0x20000008

080036f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_IncTick+0x20>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_IncTick+0x24>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4413      	add	r3, r2
 8003704:	4a04      	ldr	r2, [pc, #16]	; (8003718 <HAL_IncTick+0x24>)
 8003706:	6013      	str	r3, [r2, #0]
}
 8003708:	bf00      	nop
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	2000000c 	.word	0x2000000c
 8003718:	2000065c 	.word	0x2000065c

0800371c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return uwTick;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_GetTick+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	2000065c 	.word	0x2000065c

08003734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800373c:	f7ff ffee 	bl	800371c <HAL_GetTick>
 8003740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800374c:	d005      	beq.n	800375a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800374e:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <HAL_Delay+0x44>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800375a:	bf00      	nop
 800375c:	f7ff ffde 	bl	800371c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	429a      	cmp	r2, r3
 800376a:	d8f7      	bhi.n	800375c <HAL_Delay+0x28>
  {
  }
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	2000000c 	.word	0x2000000c

0800377c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <__NVIC_SetPriorityGrouping+0x44>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003798:	4013      	ands	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <__NVIC_SetPriorityGrouping+0x44>)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	60d3      	str	r3, [r2, #12]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <__NVIC_GetPriorityGrouping+0x18>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	f003 0307 	and.w	r3, r3, #7
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	db0b      	blt.n	800380a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	f003 021f 	and.w	r2, r3, #31
 80037f8:	4907      	ldr	r1, [pc, #28]	; (8003818 <__NVIC_EnableIRQ+0x38>)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2001      	movs	r0, #1
 8003802:	fa00 f202 	lsl.w	r2, r0, r2
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000e100 	.word	0xe000e100

0800381c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	6039      	str	r1, [r7, #0]
 8003826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	2b00      	cmp	r3, #0
 800382e:	db0a      	blt.n	8003846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	490c      	ldr	r1, [pc, #48]	; (8003868 <__NVIC_SetPriority+0x4c>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	0112      	lsls	r2, r2, #4
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	440b      	add	r3, r1
 8003840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003844:	e00a      	b.n	800385c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4908      	ldr	r1, [pc, #32]	; (800386c <__NVIC_SetPriority+0x50>)
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	3b04      	subs	r3, #4
 8003854:	0112      	lsls	r2, r2, #4
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	440b      	add	r3, r1
 800385a:	761a      	strb	r2, [r3, #24]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000e100 	.word	0xe000e100
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f1c3 0307 	rsb	r3, r3, #7
 800388a:	2b04      	cmp	r3, #4
 800388c:	bf28      	it	cs
 800388e:	2304      	movcs	r3, #4
 8003890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3304      	adds	r3, #4
 8003896:	2b06      	cmp	r3, #6
 8003898:	d902      	bls.n	80038a0 <NVIC_EncodePriority+0x30>
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3b03      	subs	r3, #3
 800389e:	e000      	b.n	80038a2 <NVIC_EncodePriority+0x32>
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43da      	mvns	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	401a      	ands	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	43d9      	mvns	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c8:	4313      	orrs	r3, r2
         );
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3724      	adds	r7, #36	; 0x24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e8:	d301      	bcc.n	80038ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ea:	2301      	movs	r3, #1
 80038ec:	e00f      	b.n	800390e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <SysTick_Config+0x40>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038f6:	210f      	movs	r1, #15
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038fc:	f7ff ff8e 	bl	800381c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <SysTick_Config+0x40>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <SysTick_Config+0x40>)
 8003908:	2207      	movs	r2, #7
 800390a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	e000e010 	.word	0xe000e010

0800391c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ff29 	bl	800377c <__NVIC_SetPriorityGrouping>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003944:	f7ff ff3e 	bl	80037c4 <__NVIC_GetPriorityGrouping>
 8003948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f7ff ff8e 	bl	8003870 <NVIC_EncodePriority>
 8003954:	4602      	mov	r2, r0
 8003956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff5d 	bl	800381c <__NVIC_SetPriority>
}
 8003962:	bf00      	nop
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff31 	bl	80037e0 <__NVIC_EnableIRQ>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ffa2 	bl	80038d8 <SysTick_Config>
 8003994:	4603      	mov	r3, r0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7ff feb6 	bl	800371c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e099      	b.n	8003af0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039dc:	e00f      	b.n	80039fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039de:	f7ff fe9d 	bl	800371c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d908      	bls.n	80039fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2203      	movs	r2, #3
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e078      	b.n	8003af0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e8      	bne.n	80039de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4b38      	ldr	r3, [pc, #224]	; (8003af8 <HAL_DMA_Init+0x158>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d107      	bne.n	8003a68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	4313      	orrs	r3, r2
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 0307 	bic.w	r3, r3, #7
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d117      	bne.n	8003ac2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fb01 	bl	80040ac <DMA_CheckFifoParam>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2240      	movs	r2, #64	; 0x40
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e016      	b.n	8003af0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fab8 	bl	8004040 <DMA_CalcBaseAndBitshift>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	223f      	movs	r2, #63	; 0x3f
 8003ada:	409a      	lsls	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	f010803f 	.word	0xf010803f

08003afc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA_Start_IT+0x26>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e040      	b.n	8003ba4 <HAL_DMA_Start_IT+0xa8>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d12f      	bne.n	8003b96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fa4a 	bl	8003fe4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	223f      	movs	r2, #63	; 0x3f
 8003b56:	409a      	lsls	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0216 	orr.w	r2, r2, #22
 8003b6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0208 	orr.w	r2, r2, #8
 8003b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e005      	b.n	8003ba2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bba:	f7ff fdaf 	bl	800371c <HAL_GetTick>
 8003bbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d008      	beq.n	8003bde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e052      	b.n	8003c84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0216 	bic.w	r2, r2, #22
 8003bec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <HAL_DMA_Abort+0x62>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0208 	bic.w	r2, r2, #8
 8003c1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c2e:	e013      	b.n	8003c58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c30:	f7ff fd74 	bl	800371c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d90c      	bls.n	8003c58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2203      	movs	r2, #3
 8003c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e015      	b.n	8003c84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e4      	bne.n	8003c30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	223f      	movs	r2, #63	; 0x3f
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d004      	beq.n	8003caa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e00c      	b.n	8003cc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2205      	movs	r2, #5
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cdc:	4b8e      	ldr	r3, [pc, #568]	; (8003f18 <HAL_DMA_IRQHandler+0x248>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a8e      	ldr	r2, [pc, #568]	; (8003f1c <HAL_DMA_IRQHandler+0x24c>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	0a9b      	lsrs	r3, r3, #10
 8003ce8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01a      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0204 	bic.w	r2, r2, #4
 8003d22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	2208      	movs	r2, #8
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0201 	orr.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	2201      	movs	r2, #1
 8003d42:	409a      	lsls	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d012      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	2201      	movs	r2, #1
 8003d60:	409a      	lsls	r2, r3
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	f043 0202 	orr.w	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	2204      	movs	r2, #4
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d012      	beq.n	8003da8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00b      	beq.n	8003da8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	2204      	movs	r2, #4
 8003d96:	409a      	lsls	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	2210      	movs	r2, #16
 8003dae:	409a      	lsls	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d043      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d03c      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	2210      	movs	r2, #16
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d024      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
 8003dfe:	e01f      	b.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01b      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
 8003e10:	e016      	b.n	8003e40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0208 	bic.w	r2, r2, #8
 8003e2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	2220      	movs	r2, #32
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 808f 	beq.w	8003f70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8087 	beq.w	8003f70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	2220      	movs	r2, #32
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b05      	cmp	r3, #5
 8003e78:	d136      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0216 	bic.w	r2, r2, #22
 8003e88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_DMA_IRQHandler+0x1da>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0208 	bic.w	r2, r2, #8
 8003eb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	223f      	movs	r2, #63	; 0x3f
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d07e      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
        }
        return;
 8003ee6:	e079      	b.n	8003fdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01d      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10d      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d031      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
 8003f14:	e02c      	b.n	8003f70 <HAL_DMA_IRQHandler+0x2a0>
 8003f16:	bf00      	nop
 8003f18:	20000004 	.word	0x20000004
 8003f1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d023      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
 8003f30:	e01e      	b.n	8003f70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10f      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0210 	bic.w	r2, r2, #16
 8003f4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d032      	beq.n	8003fde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d022      	beq.n	8003fca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2205      	movs	r2, #5
 8003f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d307      	bcc.n	8003fb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f2      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x2cc>
 8003fb6:	e000      	b.n	8003fba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	4798      	blx	r3
 8003fda:	e000      	b.n	8003fde <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fdc:	bf00      	nop
    }
  }
}
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004000:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d108      	bne.n	8004024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004022:	e007      	b.n	8004034 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	3b10      	subs	r3, #16
 8004050:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <DMA_CalcBaseAndBitshift+0x64>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800405a:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <DMA_CalcBaseAndBitshift+0x68>)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d909      	bls.n	8004082 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004076:	f023 0303 	bic.w	r3, r3, #3
 800407a:	1d1a      	adds	r2, r3, #4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	659a      	str	r2, [r3, #88]	; 0x58
 8004080:	e007      	b.n	8004092 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	aaaaaaab 	.word	0xaaaaaaab
 80040a8:	08009394 	.word	0x08009394

080040ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11f      	bne.n	8004106 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d856      	bhi.n	800417a <DMA_CheckFifoParam+0xce>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <DMA_CheckFifoParam+0x28>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	080040e5 	.word	0x080040e5
 80040d8:	080040f7 	.word	0x080040f7
 80040dc:	080040e5 	.word	0x080040e5
 80040e0:	0800417b 	.word	0x0800417b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d046      	beq.n	800417e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f4:	e043      	b.n	800417e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040fe:	d140      	bne.n	8004182 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004104:	e03d      	b.n	8004182 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410e:	d121      	bne.n	8004154 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d837      	bhi.n	8004186 <DMA_CheckFifoParam+0xda>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <DMA_CheckFifoParam+0x70>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	0800412d 	.word	0x0800412d
 8004120:	08004133 	.word	0x08004133
 8004124:	0800412d 	.word	0x0800412d
 8004128:	08004145 	.word	0x08004145
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e030      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d025      	beq.n	800418a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004142:	e022      	b.n	800418a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800414c:	d11f      	bne.n	800418e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004152:	e01c      	b.n	800418e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d903      	bls.n	8004162 <DMA_CheckFifoParam+0xb6>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d003      	beq.n	8004168 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004160:	e018      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
      break;
 8004166:	e015      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00e      	beq.n	8004192 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      break;
 8004178:	e00b      	b.n	8004192 <DMA_CheckFifoParam+0xe6>
      break;
 800417a:	bf00      	nop
 800417c:	e00a      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;
 800417e:	bf00      	nop
 8004180:	e008      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;
 8004182:	bf00      	nop
 8004184:	e006      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;
 8004186:	bf00      	nop
 8004188:	e004      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;
 800418a:	bf00      	nop
 800418c:	e002      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;   
 800418e:	bf00      	nop
 8004190:	e000      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;
 8004192:	bf00      	nop
    }
  } 
  
  return status; 
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop

080041a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	; 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e159      	b.n	8004474 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041c0:	2201      	movs	r2, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4013      	ands	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	429a      	cmp	r2, r3
 80041da:	f040 8148 	bne.w	800446e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d005      	beq.n	80041f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d130      	bne.n	8004258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	2203      	movs	r2, #3
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800422c:	2201      	movs	r2, #1
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 0201 	and.w	r2, r3, #1
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b03      	cmp	r3, #3
 8004262:	d017      	beq.n	8004294 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2203      	movs	r2, #3
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d123      	bne.n	80042e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	08da      	lsrs	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3208      	adds	r2, #8
 80042a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	220f      	movs	r2, #15
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	08da      	lsrs	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3208      	adds	r2, #8
 80042e2:	69b9      	ldr	r1, [r7, #24]
 80042e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2203      	movs	r2, #3
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0203 	and.w	r2, r3, #3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80a2 	beq.w	800446e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	4b57      	ldr	r3, [pc, #348]	; (800448c <HAL_GPIO_Init+0x2e8>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	4a56      	ldr	r2, [pc, #344]	; (800448c <HAL_GPIO_Init+0x2e8>)
 8004334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004338:	6453      	str	r3, [r2, #68]	; 0x44
 800433a:	4b54      	ldr	r3, [pc, #336]	; (800448c <HAL_GPIO_Init+0x2e8>)
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004346:	4a52      	ldr	r2, [pc, #328]	; (8004490 <HAL_GPIO_Init+0x2ec>)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	3302      	adds	r3, #2
 800434e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	220f      	movs	r2, #15
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a49      	ldr	r2, [pc, #292]	; (8004494 <HAL_GPIO_Init+0x2f0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d019      	beq.n	80043a6 <HAL_GPIO_Init+0x202>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a48      	ldr	r2, [pc, #288]	; (8004498 <HAL_GPIO_Init+0x2f4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_GPIO_Init+0x1fe>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a47      	ldr	r2, [pc, #284]	; (800449c <HAL_GPIO_Init+0x2f8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00d      	beq.n	800439e <HAL_GPIO_Init+0x1fa>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a46      	ldr	r2, [pc, #280]	; (80044a0 <HAL_GPIO_Init+0x2fc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <HAL_GPIO_Init+0x1f6>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a45      	ldr	r2, [pc, #276]	; (80044a4 <HAL_GPIO_Init+0x300>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_GPIO_Init+0x1f2>
 8004392:	2304      	movs	r3, #4
 8004394:	e008      	b.n	80043a8 <HAL_GPIO_Init+0x204>
 8004396:	2307      	movs	r3, #7
 8004398:	e006      	b.n	80043a8 <HAL_GPIO_Init+0x204>
 800439a:	2303      	movs	r3, #3
 800439c:	e004      	b.n	80043a8 <HAL_GPIO_Init+0x204>
 800439e:	2302      	movs	r3, #2
 80043a0:	e002      	b.n	80043a8 <HAL_GPIO_Init+0x204>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <HAL_GPIO_Init+0x204>
 80043a6:	2300      	movs	r3, #0
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	f002 0203 	and.w	r2, r2, #3
 80043ae:	0092      	lsls	r2, r2, #2
 80043b0:	4093      	lsls	r3, r2
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043b8:	4935      	ldr	r1, [pc, #212]	; (8004490 <HAL_GPIO_Init+0x2ec>)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	089b      	lsrs	r3, r3, #2
 80043be:	3302      	adds	r3, #2
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043c6:	4b38      	ldr	r3, [pc, #224]	; (80044a8 <HAL_GPIO_Init+0x304>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ea:	4a2f      	ldr	r2, [pc, #188]	; (80044a8 <HAL_GPIO_Init+0x304>)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043f0:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <HAL_GPIO_Init+0x304>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004414:	4a24      	ldr	r2, [pc, #144]	; (80044a8 <HAL_GPIO_Init+0x304>)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800441a:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <HAL_GPIO_Init+0x304>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	43db      	mvns	r3, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4013      	ands	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800443e:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <HAL_GPIO_Init+0x304>)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004444:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <HAL_GPIO_Init+0x304>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004468:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <HAL_GPIO_Init+0x304>)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3301      	adds	r3, #1
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b0f      	cmp	r3, #15
 8004478:	f67f aea2 	bls.w	80041c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	3724      	adds	r7, #36	; 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	40013800 	.word	0x40013800
 8004494:	40020000 	.word	0x40020000
 8004498:	40020400 	.word	0x40020400
 800449c:	40020800 	.word	0x40020800
 80044a0:	40020c00 	.word	0x40020c00
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40013c00 	.word	0x40013c00

080044ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	807b      	strh	r3, [r7, #2]
 80044b8:	4613      	mov	r3, r2
 80044ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044bc:	787b      	ldrb	r3, [r7, #1]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044c2:	887a      	ldrh	r2, [r7, #2]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044c8:	e003      	b.n	80044d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044ca:	887b      	ldrh	r3, [r7, #2]
 80044cc:	041a      	lsls	r2, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	619a      	str	r2, [r3, #24]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044de:	b480      	push	{r7}
 80044e0:	b085      	sub	sp, #20
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	460b      	mov	r3, r1
 80044e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044f0:	887a      	ldrh	r2, [r7, #2]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4013      	ands	r3, r2
 80044f6:	041a      	lsls	r2, r3, #16
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	43d9      	mvns	r1, r3
 80044fc:	887b      	ldrh	r3, [r7, #2]
 80044fe:	400b      	ands	r3, r1
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	619a      	str	r2, [r3, #24]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800452a:	4a05      	ldr	r2, [pc, #20]	; (8004540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc fd90 	bl	8001058 <HAL_GPIO_EXTI_Callback>
  }
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40013c00 	.word	0x40013c00

08004544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e267      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d075      	beq.n	800464e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004562:	4b88      	ldr	r3, [pc, #544]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b04      	cmp	r3, #4
 800456c:	d00c      	beq.n	8004588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800456e:	4b85      	ldr	r3, [pc, #532]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004576:	2b08      	cmp	r3, #8
 8004578:	d112      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457a:	4b82      	ldr	r3, [pc, #520]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004586:	d10b      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	4b7e      	ldr	r3, [pc, #504]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d05b      	beq.n	800464c <HAL_RCC_OscConfig+0x108>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d157      	bne.n	800464c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e242      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d106      	bne.n	80045b8 <HAL_RCC_OscConfig+0x74>
 80045aa:	4b76      	ldr	r3, [pc, #472]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a75      	ldr	r2, [pc, #468]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e01d      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c0:	d10c      	bne.n	80045dc <HAL_RCC_OscConfig+0x98>
 80045c2:	4b70      	ldr	r3, [pc, #448]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6f      	ldr	r2, [pc, #444]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	4b6d      	ldr	r3, [pc, #436]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6c      	ldr	r2, [pc, #432]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e00b      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045dc:	4b69      	ldr	r3, [pc, #420]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a68      	ldr	r2, [pc, #416]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4b66      	ldr	r3, [pc, #408]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a65      	ldr	r2, [pc, #404]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d013      	beq.n	8004624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7ff f88e 	bl	800371c <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004604:	f7ff f88a 	bl	800371c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e207      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	4b5b      	ldr	r3, [pc, #364]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0xc0>
 8004622:	e014      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7ff f87a 	bl	800371c <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800462c:	f7ff f876 	bl	800371c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	; 0x64
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e1f3      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	4b51      	ldr	r3, [pc, #324]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0xe8>
 800464a:	e000      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d063      	beq.n	8004722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800465a:	4b4a      	ldr	r3, [pc, #296]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004666:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466e:	2b08      	cmp	r3, #8
 8004670:	d11c      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004672:	4b44      	ldr	r3, [pc, #272]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d116      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467e:	4b41      	ldr	r3, [pc, #260]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d001      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e1c7      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004696:	4b3b      	ldr	r3, [pc, #236]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4937      	ldr	r1, [pc, #220]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046aa:	e03a      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d020      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b4:	4b34      	ldr	r3, [pc, #208]	; (8004788 <HAL_RCC_OscConfig+0x244>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7ff f82f 	bl	800371c <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c2:	f7ff f82b 	bl	800371c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e1a8      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e0:	4b28      	ldr	r3, [pc, #160]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4925      	ldr	r1, [pc, #148]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	600b      	str	r3, [r1, #0]
 80046f4:	e015      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <HAL_RCC_OscConfig+0x244>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7ff f80e 	bl	800371c <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004704:	f7ff f80a 	bl	800371c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e187      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004716:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d036      	beq.n	800479c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d016      	beq.n	8004764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <HAL_RCC_OscConfig+0x248>)
 8004738:	2201      	movs	r2, #1
 800473a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fe ffee 	bl	800371c <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004744:	f7fe ffea 	bl	800371c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e167      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x200>
 8004762:	e01b      	b.n	800479c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_RCC_OscConfig+0x248>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476a:	f7fe ffd7 	bl	800371c <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004770:	e00e      	b.n	8004790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004772:	f7fe ffd3 	bl	800371c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d907      	bls.n	8004790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e150      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
 8004784:	40023800 	.word	0x40023800
 8004788:	42470000 	.word	0x42470000
 800478c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	4b88      	ldr	r3, [pc, #544]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ea      	bne.n	8004772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8097 	beq.w	80048d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ae:	4b81      	ldr	r3, [pc, #516]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	4b7d      	ldr	r3, [pc, #500]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a7c      	ldr	r2, [pc, #496]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ca:	4b7a      	ldr	r3, [pc, #488]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d6:	2301      	movs	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047da:	4b77      	ldr	r3, [pc, #476]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d118      	bne.n	8004818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e6:	4b74      	ldr	r3, [pc, #464]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a73      	ldr	r2, [pc, #460]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f2:	f7fe ff93 	bl	800371c <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fa:	f7fe ff8f 	bl	800371c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e10c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	4b6a      	ldr	r3, [pc, #424]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d106      	bne.n	800482e <HAL_RCC_OscConfig+0x2ea>
 8004820:	4b64      	ldr	r3, [pc, #400]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a63      	ldr	r2, [pc, #396]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	e01c      	b.n	8004868 <HAL_RCC_OscConfig+0x324>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x30c>
 8004836:	4b5f      	ldr	r3, [pc, #380]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a5e      	ldr	r2, [pc, #376]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800483c:	f043 0304 	orr.w	r3, r3, #4
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
 8004842:	4b5c      	ldr	r3, [pc, #368]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	4a5b      	ldr	r2, [pc, #364]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	6713      	str	r3, [r2, #112]	; 0x70
 800484e:	e00b      	b.n	8004868 <HAL_RCC_OscConfig+0x324>
 8004850:	4b58      	ldr	r3, [pc, #352]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	4a57      	ldr	r2, [pc, #348]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
 800485c:	4b55      	ldr	r3, [pc, #340]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	4a54      	ldr	r2, [pc, #336]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004862:	f023 0304 	bic.w	r3, r3, #4
 8004866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d015      	beq.n	800489c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fe ff54 	bl	800371c <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004876:	e00a      	b.n	800488e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004878:	f7fe ff50 	bl	800371c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0cb      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488e:	4b49      	ldr	r3, [pc, #292]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ee      	beq.n	8004878 <HAL_RCC_OscConfig+0x334>
 800489a:	e014      	b.n	80048c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489c:	f7fe ff3e 	bl	800371c <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7fe ff3a 	bl	800371c <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0b5      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ba:	4b3e      	ldr	r3, [pc, #248]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ee      	bne.n	80048a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048cc:	4b39      	ldr	r3, [pc, #228]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	4a38      	ldr	r2, [pc, #224]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80a1 	beq.w	8004a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048e2:	4b34      	ldr	r3, [pc, #208]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d05c      	beq.n	80049a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d141      	bne.n	800497a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b31      	ldr	r3, [pc, #196]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe ff0e 	bl	800371c <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7fe ff0a 	bl	800371c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e087      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	019b      	lsls	r3, r3, #6
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	061b      	lsls	r3, r3, #24
 8004946:	491b      	ldr	r1, [pc, #108]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fe fee3 	bl	800371c <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800495a:	f7fe fedf 	bl	800371c <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e05c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496c:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x416>
 8004978:	e054      	b.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497a:	4b10      	ldr	r3, [pc, #64]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fe fecc 	bl	800371c <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004988:	f7fe fec8 	bl	800371c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e045      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x444>
 80049a6:	e03d      	b.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e038      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40007000 	.word	0x40007000
 80049bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049c0:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCC_OscConfig+0x4ec>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d028      	beq.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d121      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d11a      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d111      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800

08004a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0cc      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b68      	ldr	r3, [pc, #416]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d90c      	bls.n	8004a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b65      	ldr	r3, [pc, #404]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b63      	ldr	r3, [pc, #396]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0b8      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a88:	4b59      	ldr	r3, [pc, #356]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a58      	ldr	r2, [pc, #352]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa0:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4a52      	ldr	r2, [pc, #328]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aac:	4b50      	ldr	r3, [pc, #320]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	494d      	ldr	r1, [pc, #308]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d044      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d119      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e07f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af2:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e06f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b02:	4b3b      	ldr	r3, [pc, #236]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e067      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4934      	ldr	r1, [pc, #208]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b24:	f7fe fdfa 	bl	800371c <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fe fdf6 	bl	800371c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e04f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 020c 	and.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1eb      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b54:	4b25      	ldr	r3, [pc, #148]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d20c      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b22      	ldr	r3, [pc, #136]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e032      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b88:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4916      	ldr	r1, [pc, #88]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	490e      	ldr	r1, [pc, #56]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bba:	f000 f821 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	490a      	ldr	r1, [pc, #40]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	5ccb      	ldrb	r3, [r1, r3]
 8004bce:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd2:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_ClockConfig+0x1c8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fd5a 	bl	8003694 <HAL_InitTick>

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023c00 	.word	0x40023c00
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	0800937c 	.word	0x0800937c
 8004bf8:	20000004 	.word	0x20000004
 8004bfc:	20000008 	.word	0x20000008

08004c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c04:	b094      	sub	sp, #80	; 0x50
 8004c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c10:	2300      	movs	r3, #0
 8004c12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c18:	4b79      	ldr	r3, [pc, #484]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d00d      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x40>
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	f200 80e1 	bhi.w	8004dec <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x34>
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c32:	e0db      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b73      	ldr	r3, [pc, #460]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c38:	e0db      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c3a:	4b73      	ldr	r3, [pc, #460]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c3e:	e0d8      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c40:	4b6f      	ldr	r3, [pc, #444]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c4a:	4b6d      	ldr	r3, [pc, #436]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d063      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c56:	4b6a      	ldr	r3, [pc, #424]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	099b      	lsrs	r3, r3, #6
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	633b      	str	r3, [r7, #48]	; 0x30
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c72:	4622      	mov	r2, r4
 8004c74:	462b      	mov	r3, r5
 8004c76:	f04f 0000 	mov.w	r0, #0
 8004c7a:	f04f 0100 	mov.w	r1, #0
 8004c7e:	0159      	lsls	r1, r3, #5
 8004c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c84:	0150      	lsls	r0, r2, #5
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	1a51      	subs	r1, r2, r1
 8004c8e:	6139      	str	r1, [r7, #16]
 8004c90:	4629      	mov	r1, r5
 8004c92:	eb63 0301 	sbc.w	r3, r3, r1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	018b      	lsls	r3, r1, #6
 8004ca8:	4651      	mov	r1, sl
 8004caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cae:	4651      	mov	r1, sl
 8004cb0:	018a      	lsls	r2, r1, #6
 8004cb2:	4651      	mov	r1, sl
 8004cb4:	ebb2 0801 	subs.w	r8, r2, r1
 8004cb8:	4659      	mov	r1, fp
 8004cba:	eb63 0901 	sbc.w	r9, r3, r1
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cd2:	4690      	mov	r8, r2
 8004cd4:	4699      	mov	r9, r3
 8004cd6:	4623      	mov	r3, r4
 8004cd8:	eb18 0303 	adds.w	r3, r8, r3
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	462b      	mov	r3, r5
 8004ce0:	eb49 0303 	adc.w	r3, r9, r3
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	024b      	lsls	r3, r1, #9
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	024a      	lsls	r2, r1, #9
 8004d00:	4610      	mov	r0, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d06:	2200      	movs	r2, #0
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d10:	f7fb ffb4 	bl	8000c7c <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4613      	mov	r3, r2
 8004d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1c:	e058      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d1e:	4b38      	ldr	r3, [pc, #224]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	2200      	movs	r2, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	4611      	mov	r1, r2
 8004d2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	2300      	movs	r3, #0
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
 8004d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	f04f 0000 	mov.w	r0, #0
 8004d40:	f04f 0100 	mov.w	r1, #0
 8004d44:	0159      	lsls	r1, r3, #5
 8004d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d4a:	0150      	lsls	r0, r2, #5
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4641      	mov	r1, r8
 8004d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d56:	4649      	mov	r1, r9
 8004d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d70:	ebb2 040a 	subs.w	r4, r2, sl
 8004d74:	eb63 050b 	sbc.w	r5, r3, fp
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	00eb      	lsls	r3, r5, #3
 8004d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d86:	00e2      	lsls	r2, r4, #3
 8004d88:	4614      	mov	r4, r2
 8004d8a:	461d      	mov	r5, r3
 8004d8c:	4643      	mov	r3, r8
 8004d8e:	18e3      	adds	r3, r4, r3
 8004d90:	603b      	str	r3, [r7, #0]
 8004d92:	464b      	mov	r3, r9
 8004d94:	eb45 0303 	adc.w	r3, r5, r3
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004da6:	4629      	mov	r1, r5
 8004da8:	028b      	lsls	r3, r1, #10
 8004daa:	4621      	mov	r1, r4
 8004dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004db0:	4621      	mov	r1, r4
 8004db2:	028a      	lsls	r2, r1, #10
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dba:	2200      	movs	r2, #0
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	61fa      	str	r2, [r7, #28]
 8004dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dc4:	f7fb ff5a 	bl	8000c7c <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004de0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dea:	e002      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3750      	adds	r7, #80	; 0x50
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800
 8004e04:	00f42400 	.word	0x00f42400
 8004e08:	007a1200 	.word	0x007a1200

08004e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e10:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e12:	681b      	ldr	r3, [r3, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000004 	.word	0x20000004

08004e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e28:	f7ff fff0 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0a9b      	lsrs	r3, r3, #10
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4903      	ldr	r1, [pc, #12]	; (8004e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40023800 	.word	0x40023800
 8004e48:	0800938c 	.word	0x0800938c

08004e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e50:	f7ff ffdc 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e54:	4602      	mov	r2, r0
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	0b5b      	lsrs	r3, r3, #13
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	4903      	ldr	r1, [pc, #12]	; (8004e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e62:	5ccb      	ldrb	r3, [r1, r3]
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	0800938c 	.word	0x0800938c

08004e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e041      	b.n	8004f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fe f924 	bl	80030e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f000 fc28 	bl	8005708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d001      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e044      	b.n	8004fb6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d018      	beq.n	8004f80 <HAL_TIM_Base_Start_IT+0x6c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f56:	d013      	beq.n	8004f80 <HAL_TIM_Base_Start_IT+0x6c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1a      	ldr	r2, [pc, #104]	; (8004fc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00e      	beq.n	8004f80 <HAL_TIM_Base_Start_IT+0x6c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a19      	ldr	r2, [pc, #100]	; (8004fcc <HAL_TIM_Base_Start_IT+0xb8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d009      	beq.n	8004f80 <HAL_TIM_Base_Start_IT+0x6c>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a17      	ldr	r2, [pc, #92]	; (8004fd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_TIM_Base_Start_IT+0x6c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d111      	bne.n	8004fa4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b06      	cmp	r3, #6
 8004f90:	d010      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa2:	e007      	b.n	8004fb4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40010000 	.word	0x40010000
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800
 8004fd0:	40000c00 	.word	0x40000c00
 8004fd4:	40014000 	.word	0x40014000

08004fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e041      	b.n	800506e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fd ffae 	bl	8002f60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f000 fb76 	bl	8005708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d109      	bne.n	800509c <HAL_TIM_PWM_Start+0x24>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	e022      	b.n	80050e2 <HAL_TIM_PWM_Start+0x6a>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d109      	bne.n	80050b6 <HAL_TIM_PWM_Start+0x3e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	bf14      	ite	ne
 80050ae:	2301      	movne	r3, #1
 80050b0:	2300      	moveq	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	e015      	b.n	80050e2 <HAL_TIM_PWM_Start+0x6a>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d109      	bne.n	80050d0 <HAL_TIM_PWM_Start+0x58>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	e008      	b.n	80050e2 <HAL_TIM_PWM_Start+0x6a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e068      	b.n	80051bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_PWM_Start+0x82>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f8:	e013      	b.n	8005122 <HAL_TIM_PWM_Start+0xaa>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d104      	bne.n	800510a <HAL_TIM_PWM_Start+0x92>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005108:	e00b      	b.n	8005122 <HAL_TIM_PWM_Start+0xaa>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b08      	cmp	r3, #8
 800510e:	d104      	bne.n	800511a <HAL_TIM_PWM_Start+0xa2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005118:	e003      	b.n	8005122 <HAL_TIM_PWM_Start+0xaa>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2201      	movs	r2, #1
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fcf8 	bl	8005b20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a23      	ldr	r2, [pc, #140]	; (80051c4 <HAL_TIM_PWM_Start+0x14c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d107      	bne.n	800514a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005148:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <HAL_TIM_PWM_Start+0x14c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d018      	beq.n	8005186 <HAL_TIM_PWM_Start+0x10e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515c:	d013      	beq.n	8005186 <HAL_TIM_PWM_Start+0x10e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <HAL_TIM_PWM_Start+0x150>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00e      	beq.n	8005186 <HAL_TIM_PWM_Start+0x10e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a17      	ldr	r2, [pc, #92]	; (80051cc <HAL_TIM_PWM_Start+0x154>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d009      	beq.n	8005186 <HAL_TIM_PWM_Start+0x10e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <HAL_TIM_PWM_Start+0x158>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_TIM_PWM_Start+0x10e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <HAL_TIM_PWM_Start+0x15c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d111      	bne.n	80051aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b06      	cmp	r3, #6
 8005196:	d010      	beq.n	80051ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a8:	e007      	b.n	80051ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40014000 	.word	0x40014000

080051d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e097      	b.n	800531c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fd fee3 	bl	8002fcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2202      	movs	r2, #2
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800521c:	f023 0307 	bic.w	r3, r3, #7
 8005220:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f000 fa6b 	bl	8005708 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525a:	f023 0303 	bic.w	r3, r3, #3
 800525e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	021b      	lsls	r3, r3, #8
 800526a:	4313      	orrs	r3, r2
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005278:	f023 030c 	bic.w	r3, r3, #12
 800527c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	4313      	orrs	r3, r2
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	011a      	lsls	r2, r3, #4
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	031b      	lsls	r3, r3, #12
 80052a8:	4313      	orrs	r3, r2
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80052be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	4313      	orrs	r3, r2
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b02      	cmp	r3, #2
 8005338:	d122      	bne.n	8005380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b02      	cmp	r3, #2
 8005346:	d11b      	bne.n	8005380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0202 	mvn.w	r2, #2
 8005350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f9b0 	bl	80056cc <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f9a2 	bl	80056b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f9b3 	bl	80056e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b04      	cmp	r3, #4
 800538c:	d122      	bne.n	80053d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b04      	cmp	r3, #4
 800539a:	d11b      	bne.n	80053d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0204 	mvn.w	r2, #4
 80053a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f986 	bl	80056cc <HAL_TIM_IC_CaptureCallback>
 80053c0:	e005      	b.n	80053ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f978 	bl	80056b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f989 	bl	80056e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d122      	bne.n	8005428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d11b      	bne.n	8005428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0208 	mvn.w	r2, #8
 80053f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2204      	movs	r2, #4
 80053fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f95c 	bl	80056cc <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f94e 	bl	80056b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f95f 	bl	80056e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	2b10      	cmp	r3, #16
 8005434:	d122      	bne.n	800547c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b10      	cmp	r3, #16
 8005442:	d11b      	bne.n	800547c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0210 	mvn.w	r2, #16
 800544c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2208      	movs	r2, #8
 8005452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f932 	bl	80056cc <HAL_TIM_IC_CaptureCallback>
 8005468:	e005      	b.n	8005476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f924 	bl	80056b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f935 	bl	80056e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b01      	cmp	r3, #1
 8005488:	d10e      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b01      	cmp	r3, #1
 8005496:	d107      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0201 	mvn.w	r2, #1
 80054a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fb fe0a 	bl	80010bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d10e      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c0:	2b80      	cmp	r3, #128	; 0x80
 80054c2:	d107      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fbc4 	bl	8005c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d10e      	bne.n	8005500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f8fa 	bl	80056f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b20      	cmp	r3, #32
 800550c:	d10e      	bne.n	800552c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b20      	cmp	r3, #32
 800551a:	d107      	bne.n	800552c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0220 	mvn.w	r2, #32
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fb8e 	bl	8005c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800554e:	2302      	movs	r3, #2
 8005550:	e0ae      	b.n	80056b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b0c      	cmp	r3, #12
 800555e:	f200 809f 	bhi.w	80056a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	0800559d 	.word	0x0800559d
 800556c:	080056a1 	.word	0x080056a1
 8005570:	080056a1 	.word	0x080056a1
 8005574:	080056a1 	.word	0x080056a1
 8005578:	080055dd 	.word	0x080055dd
 800557c:	080056a1 	.word	0x080056a1
 8005580:	080056a1 	.word	0x080056a1
 8005584:	080056a1 	.word	0x080056a1
 8005588:	0800561f 	.word	0x0800561f
 800558c:	080056a1 	.word	0x080056a1
 8005590:	080056a1 	.word	0x080056a1
 8005594:	080056a1 	.word	0x080056a1
 8005598:	0800565f 	.word	0x0800565f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 f930 	bl	8005808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0208 	orr.w	r2, r2, #8
 80055b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0204 	bic.w	r2, r2, #4
 80055c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6999      	ldr	r1, [r3, #24]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	619a      	str	r2, [r3, #24]
      break;
 80055da:	e064      	b.n	80056a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 f976 	bl	80058d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699a      	ldr	r2, [r3, #24]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6999      	ldr	r1, [r3, #24]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	021a      	lsls	r2, r3, #8
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	619a      	str	r2, [r3, #24]
      break;
 800561c:	e043      	b.n	80056a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 f9c1 	bl	80059ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0208 	orr.w	r2, r2, #8
 8005638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0204 	bic.w	r2, r2, #4
 8005648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69d9      	ldr	r1, [r3, #28]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	61da      	str	r2, [r3, #28]
      break;
 800565c:	e023      	b.n	80056a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fa0b 	bl	8005a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69d9      	ldr	r1, [r3, #28]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	021a      	lsls	r2, r3, #8
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	61da      	str	r2, [r3, #28]
      break;
 800569e:	e002      	b.n	80056a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	75fb      	strb	r3, [r7, #23]
      break;
 80056a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a34      	ldr	r2, [pc, #208]	; (80057ec <TIM_Base_SetConfig+0xe4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00f      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005726:	d00b      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a31      	ldr	r2, [pc, #196]	; (80057f0 <TIM_Base_SetConfig+0xe8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a30      	ldr	r2, [pc, #192]	; (80057f4 <TIM_Base_SetConfig+0xec>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0x38>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a2f      	ldr	r2, [pc, #188]	; (80057f8 <TIM_Base_SetConfig+0xf0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d108      	bne.n	8005752 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a25      	ldr	r2, [pc, #148]	; (80057ec <TIM_Base_SetConfig+0xe4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01b      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005760:	d017      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a22      	ldr	r2, [pc, #136]	; (80057f0 <TIM_Base_SetConfig+0xe8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a21      	ldr	r2, [pc, #132]	; (80057f4 <TIM_Base_SetConfig+0xec>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00f      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <TIM_Base_SetConfig+0xf0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00b      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <TIM_Base_SetConfig+0xf4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <TIM_Base_SetConfig+0xf8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_Base_SetConfig+0x8a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <TIM_Base_SetConfig+0xfc>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d108      	bne.n	80057a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a08      	ldr	r2, [pc, #32]	; (80057ec <TIM_Base_SetConfig+0xe4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d103      	bne.n	80057d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	615a      	str	r2, [r3, #20]
}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40000c00 	.word	0x40000c00
 80057fc:	40014000 	.word	0x40014000
 8005800:	40014400 	.word	0x40014400
 8005804:	40014800 	.word	0x40014800

08005808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f023 0201 	bic.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f023 0302 	bic.w	r3, r3, #2
 8005850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a1c      	ldr	r2, [pc, #112]	; (80058d0 <TIM_OC1_SetConfig+0xc8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d10c      	bne.n	800587e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0308 	bic.w	r3, r3, #8
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 0304 	bic.w	r3, r3, #4
 800587c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <TIM_OC1_SetConfig+0xc8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d111      	bne.n	80058aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800588c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	621a      	str	r2, [r3, #32]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	40010000 	.word	0x40010000

080058d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	f023 0210 	bic.w	r2, r3, #16
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0320 	bic.w	r3, r3, #32
 800591e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1e      	ldr	r2, [pc, #120]	; (80059a8 <TIM_OC2_SetConfig+0xd4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d10d      	bne.n	8005950 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <TIM_OC2_SetConfig+0xd4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d113      	bne.n	8005980 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800595e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	621a      	str	r2, [r3, #32]
}
 800599a:	bf00      	nop
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40010000 	.word	0x40010000

080059ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0303 	bic.w	r3, r3, #3
 80059e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1d      	ldr	r2, [pc, #116]	; (8005a7c <TIM_OC3_SetConfig+0xd0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d10d      	bne.n	8005a26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a14      	ldr	r2, [pc, #80]	; (8005a7c <TIM_OC3_SetConfig+0xd0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d113      	bne.n	8005a56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	621a      	str	r2, [r3, #32]
}
 8005a70:	bf00      	nop
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40010000 	.word	0x40010000

08005a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	031b      	lsls	r3, r3, #12
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <TIM_OC4_SetConfig+0x9c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d109      	bne.n	8005af4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000

08005b20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 031f 	and.w	r3, r3, #31
 8005b32:	2201      	movs	r2, #1
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a1a      	ldr	r2, [r3, #32]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	43db      	mvns	r3, r3
 8005b42:	401a      	ands	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a1a      	ldr	r2, [r3, #32]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	fa01 f303 	lsl.w	r3, r1, r3
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	621a      	str	r2, [r3, #32]
}
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e050      	b.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d018      	beq.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd0:	d013      	beq.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00e      	beq.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a16      	ldr	r2, [pc, #88]	; (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d009      	beq.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a15      	ldr	r2, [pc, #84]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d004      	beq.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a13      	ldr	r2, [pc, #76]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d10c      	bne.n	8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40010000 	.word	0x40010000
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800
 8005c40:	40000c00 	.word	0x40000c00
 8005c44:	40014000 	.word	0x40014000

08005c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e03f      	b.n	8005d02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fd faac 	bl	80031f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2224      	movs	r2, #36	; 0x24
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fe69 	bl	800698c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695a      	ldr	r2, [r3, #20]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	4613      	mov	r3, r2
 8005d16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d11d      	bne.n	8005d60 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_UART_Receive_DMA+0x26>
 8005d2a:	88fb      	ldrh	r3, [r7, #6]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e016      	b.n	8005d62 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_UART_Receive_DMA+0x38>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e00f      	b.n	8005d62 <HAL_UART_Receive_DMA+0x58>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d50:	88fb      	ldrh	r3, [r7, #6]
 8005d52:	461a      	mov	r2, r3
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fbb8 	bl	80064cc <UART_Start_Receive_DMA>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	e000      	b.n	8005d62 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
  }
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b0ba      	sub	sp, #232	; 0xe8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10f      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x66>
 8005dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fd23 	bl	8006816 <UART_Receive_IT>
      return;
 8005dd0:	e256      	b.n	8006280 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80de 	beq.w	8005f98 <HAL_UART_IRQHandler+0x22c>
 8005ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80d1 	beq.w	8005f98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <HAL_UART_IRQHandler+0xae>
 8005e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f043 0201 	orr.w	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00b      	beq.n	8005e3e <HAL_UART_IRQHandler+0xd2>
 8005e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f043 0202 	orr.w	r2, r3, #2
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <HAL_UART_IRQHandler+0xf6>
 8005e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	f043 0204 	orr.w	r2, r3, #4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d011      	beq.n	8005e92 <HAL_UART_IRQHandler+0x126>
 8005e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d105      	bne.n	8005e86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f043 0208 	orr.w	r2, r3, #8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 81ed 	beq.w	8006276 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d008      	beq.n	8005eba <HAL_UART_IRQHandler+0x14e>
 8005ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fcae 	bl	8006816 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b40      	cmp	r3, #64	; 0x40
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x17a>
 8005ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d04f      	beq.n	8005f86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fbb6 	bl	8006658 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef6:	2b40      	cmp	r3, #64	; 0x40
 8005ef8:	d141      	bne.n	8005f7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3314      	adds	r3, #20
 8005f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3314      	adds	r3, #20
 8005f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1d9      	bne.n	8005efa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d013      	beq.n	8005f76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	4a7d      	ldr	r2, [pc, #500]	; (8006148 <HAL_UART_IRQHandler+0x3dc>)
 8005f54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fd fe96 	bl	8003c8c <HAL_DMA_Abort_IT>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d016      	beq.n	8005f94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f70:	4610      	mov	r0, r2
 8005f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f74:	e00e      	b.n	8005f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f99a 	bl	80062b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	e00a      	b.n	8005f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f996 	bl	80062b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f84:	e006      	b.n	8005f94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f992 	bl	80062b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f92:	e170      	b.n	8006276 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f94:	bf00      	nop
    return;
 8005f96:	e16e      	b.n	8006276 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	f040 814a 	bne.w	8006236 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa6:	f003 0310 	and.w	r3, r3, #16
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8143 	beq.w	8006236 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 813c 	beq.w	8006236 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	f040 80b4 	bne.w	800614c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ff0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8140 	beq.w	800627a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006002:	429a      	cmp	r2, r3
 8006004:	f080 8139 	bcs.w	800627a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800600e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601a:	f000 8088 	beq.w	800612e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	330c      	adds	r3, #12
 8006024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800603c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800604a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800604e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006056:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1d9      	bne.n	800601e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3314      	adds	r3, #20
 8006070:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800607a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3314      	adds	r3, #20
 800608a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800608e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006092:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006096:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e1      	bne.n	800606a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3314      	adds	r3, #20
 80060ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3314      	adds	r3, #20
 80060c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e3      	bne.n	80060a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060fe:	f023 0310 	bic.w	r3, r3, #16
 8006102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006110:	65ba      	str	r2, [r7, #88]	; 0x58
 8006112:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006116:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800611e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e3      	bne.n	80060ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	4618      	mov	r0, r3
 800612a:	f7fd fd3f 	bl	8003bac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006136:	b29b      	uxth	r3, r3
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	b29b      	uxth	r3, r3
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f8c0 	bl	80062c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006144:	e099      	b.n	800627a <HAL_UART_IRQHandler+0x50e>
 8006146:	bf00      	nop
 8006148:	0800671f 	.word	0x0800671f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006154:	b29b      	uxth	r3, r3
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 808b 	beq.w	800627e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8086 	beq.w	800627e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	330c      	adds	r3, #12
 8006178:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006188:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006196:	647a      	str	r2, [r7, #68]	; 0x44
 8006198:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800619c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e3      	bne.n	8006172 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3314      	adds	r3, #20
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	623b      	str	r3, [r7, #32]
   return(result);
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	f023 0301 	bic.w	r3, r3, #1
 80061c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3314      	adds	r3, #20
 80061ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061ce:	633a      	str	r2, [r7, #48]	; 0x30
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e3      	bne.n	80061aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0310 	bic.w	r3, r3, #16
 8006206:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	330c      	adds	r3, #12
 8006210:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006214:	61fa      	str	r2, [r7, #28]
 8006216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	69b9      	ldr	r1, [r7, #24]
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	617b      	str	r3, [r7, #20]
   return(result);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e3      	bne.n	80061f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f848 	bl	80062c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006234:	e023      	b.n	800627e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <HAL_UART_IRQHandler+0x4ea>
 8006242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa79 	bl	8006746 <UART_Transmit_IT>
    return;
 8006254:	e014      	b.n	8006280 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00e      	beq.n	8006280 <HAL_UART_IRQHandler+0x514>
 8006262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d008      	beq.n	8006280 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fab9 	bl	80067e6 <UART_EndTransmit_IT>
    return;
 8006274:	e004      	b.n	8006280 <HAL_UART_IRQHandler+0x514>
    return;
 8006276:	bf00      	nop
 8006278:	e002      	b.n	8006280 <HAL_UART_IRQHandler+0x514>
      return;
 800627a:	bf00      	nop
 800627c:	e000      	b.n	8006280 <HAL_UART_IRQHandler+0x514>
      return;
 800627e:	bf00      	nop
  }
}
 8006280:	37e8      	adds	r7, #232	; 0xe8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop

08006288 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b09c      	sub	sp, #112	; 0x70
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d172      	bne.n	80063de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80062f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fa:	2200      	movs	r2, #0
 80062fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	330c      	adds	r3, #12
 8006304:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800630e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006314:	66bb      	str	r3, [r7, #104]	; 0x68
 8006316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	330c      	adds	r3, #12
 800631c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800631e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006320:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800632c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e5      	bne.n	80062fe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3314      	adds	r3, #20
 8006338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	667b      	str	r3, [r7, #100]	; 0x64
 800634a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3314      	adds	r3, #20
 8006350:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006352:	647a      	str	r2, [r7, #68]	; 0x44
 8006354:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e5      	bne.n	8006332 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3314      	adds	r3, #20
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	623b      	str	r3, [r7, #32]
   return(result);
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637c:	663b      	str	r3, [r7, #96]	; 0x60
 800637e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3314      	adds	r3, #20
 8006384:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006386:	633a      	str	r2, [r7, #48]	; 0x30
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800638c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e5      	bne.n	8006366 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800639a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d119      	bne.n	80063de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	330c      	adds	r3, #12
 80063b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f023 0310 	bic.w	r3, r3, #16
 80063c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	330c      	adds	r3, #12
 80063c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063ca:	61fa      	str	r2, [r7, #28]
 80063cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ce:	69b9      	ldr	r1, [r7, #24]
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	617b      	str	r3, [r7, #20]
   return(result);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e5      	bne.n	80063aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d106      	bne.n	80063f4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063ea:	4619      	mov	r1, r3
 80063ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063ee:	f7ff ff69 	bl	80062c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063f2:	e002      	b.n	80063fa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80063f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063f6:	f7fa fdc3 	bl	8000f80 <HAL_UART_RxCpltCallback>
}
 80063fa:	bf00      	nop
 80063fc:	3770      	adds	r7, #112	; 0x70
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	2b01      	cmp	r3, #1
 8006416:	d108      	bne.n	800642a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800641c:	085b      	lsrs	r3, r3, #1
 800641e:	b29b      	uxth	r3, r3
 8006420:	4619      	mov	r1, r3
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f7ff ff4e 	bl	80062c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006428:	e002      	b.n	8006430 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f7ff ff36 	bl	800629c <HAL_UART_RxHalfCpltCallback>
}
 8006430:	bf00      	nop
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006454:	2b80      	cmp	r3, #128	; 0x80
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b21      	cmp	r3, #33	; 0x21
 800646a:	d108      	bne.n	800647e <UART_DMAError+0x46>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2200      	movs	r2, #0
 8006476:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006478:	68b8      	ldr	r0, [r7, #8]
 800647a:	f000 f8c5 	bl	8006608 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b40      	cmp	r3, #64	; 0x40
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b22      	cmp	r3, #34	; 0x22
 800649e:	d108      	bne.n	80064b2 <UART_DMAError+0x7a>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2200      	movs	r2, #0
 80064aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80064ac:	68b8      	ldr	r0, [r7, #8]
 80064ae:	f000 f8d3 	bl	8006658 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f043 0210 	orr.w	r2, r3, #16
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064be:	68b8      	ldr	r0, [r7, #8]
 80064c0:	f7ff fef6 	bl	80062b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064c4:	bf00      	nop
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b098      	sub	sp, #96	; 0x60
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4613      	mov	r3, r2
 80064d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	88fa      	ldrh	r2, [r7, #6]
 80064e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2222      	movs	r2, #34	; 0x22
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	4a40      	ldr	r2, [pc, #256]	; (80065fc <UART_Start_Receive_DMA+0x130>)
 80064fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	4a3f      	ldr	r2, [pc, #252]	; (8006600 <UART_Start_Receive_DMA+0x134>)
 8006502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	4a3e      	ldr	r2, [pc, #248]	; (8006604 <UART_Start_Receive_DMA+0x138>)
 800650a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	2200      	movs	r2, #0
 8006512:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006514:	f107 0308 	add.w	r3, r7, #8
 8006518:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	f7fd fae6 	bl	8003afc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d019      	beq.n	800658a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800656c:	65bb      	str	r3, [r7, #88]	; 0x58
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006576:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006578:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800657c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e5      	bne.n	8006556 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3314      	adds	r3, #20
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	657b      	str	r3, [r7, #84]	; 0x54
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3314      	adds	r3, #20
 80065a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80065ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e5      	bne.n	800658a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3314      	adds	r3, #20
 80065c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	617b      	str	r3, [r7, #20]
   return(result);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065d4:	653b      	str	r3, [r7, #80]	; 0x50
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3314      	adds	r3, #20
 80065dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065de:	627a      	str	r2, [r7, #36]	; 0x24
 80065e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6a39      	ldr	r1, [r7, #32]
 80065e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e5      	bne.n	80065be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3760      	adds	r7, #96	; 0x60
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	080062dd 	.word	0x080062dd
 8006600:	08006403 	.word	0x08006403
 8006604:	08006439 	.word	0x08006439

08006608 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b089      	sub	sp, #36	; 0x24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	330c      	adds	r3, #12
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	61ba      	str	r2, [r7, #24]
 8006632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6979      	ldr	r1, [r7, #20]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	613b      	str	r3, [r7, #16]
   return(result);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e5      	bne.n	8006610 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800664c:	bf00      	nop
 800664e:	3724      	adds	r7, #36	; 0x24
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006658:	b480      	push	{r7}
 800665a:	b095      	sub	sp, #84	; 0x54
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	330c      	adds	r3, #12
 8006666:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006680:	643a      	str	r2, [r7, #64]	; 0x40
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e5      	bne.n	8006660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3314      	adds	r3, #20
 800669a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f023 0301 	bic.w	r3, r3, #1
 80066aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3314      	adds	r3, #20
 80066b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e5      	bne.n	8006694 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d119      	bne.n	8006704 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	330c      	adds	r3, #12
 80066d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	60bb      	str	r3, [r7, #8]
   return(result);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f023 0310 	bic.w	r3, r3, #16
 80066e6:	647b      	str	r3, [r7, #68]	; 0x44
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066f0:	61ba      	str	r2, [r7, #24]
 80066f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f4:	6979      	ldr	r1, [r7, #20]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	e841 2300 	strex	r3, r2, [r1]
 80066fc:	613b      	str	r3, [r7, #16]
   return(result);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e5      	bne.n	80066d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006712:	bf00      	nop
 8006714:	3754      	adds	r7, #84	; 0x54
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff fdb9 	bl	80062b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800673e:	bf00      	nop
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b21      	cmp	r3, #33	; 0x21
 8006758:	d13e      	bne.n	80067d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006762:	d114      	bne.n	800678e <UART_Transmit_IT+0x48>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d110      	bne.n	800678e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006780:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	1c9a      	adds	r2, r3, #2
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	621a      	str	r2, [r3, #32]
 800678c:	e008      	b.n	80067a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6211      	str	r1, [r2, #32]
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	4619      	mov	r1, r3
 80067ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10f      	bne.n	80067d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	e000      	b.n	80067da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067d8:	2302      	movs	r3, #2
  }
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff fd3e 	bl	8006288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b08c      	sub	sp, #48	; 0x30
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b22      	cmp	r3, #34	; 0x22
 8006828:	f040 80ab 	bne.w	8006982 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006834:	d117      	bne.n	8006866 <UART_Receive_IT+0x50>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d113      	bne.n	8006866 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800683e:	2300      	movs	r3, #0
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006854:	b29a      	uxth	r2, r3
 8006856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006858:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	1c9a      	adds	r2, r3, #2
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	629a      	str	r2, [r3, #40]	; 0x28
 8006864:	e026      	b.n	80068b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800686c:	2300      	movs	r3, #0
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006878:	d007      	beq.n	800688a <UART_Receive_IT+0x74>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <UART_Receive_IT+0x82>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d106      	bne.n	8006898 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	b2da      	uxtb	r2, r3
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	e008      	b.n	80068aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29b      	uxth	r3, r3
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	4619      	mov	r1, r3
 80068c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d15a      	bne.n	800697e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0220 	bic.w	r2, r2, #32
 80068d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695a      	ldr	r2, [r3, #20]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	2b01      	cmp	r3, #1
 8006906:	d135      	bne.n	8006974 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	330c      	adds	r3, #12
 8006914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	613b      	str	r3, [r7, #16]
   return(result);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f023 0310 	bic.w	r3, r3, #16
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	330c      	adds	r3, #12
 800692c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692e:	623a      	str	r2, [r7, #32]
 8006930:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	69f9      	ldr	r1, [r7, #28]
 8006934:	6a3a      	ldr	r2, [r7, #32]
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	61bb      	str	r3, [r7, #24]
   return(result);
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e5      	bne.n	800690e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	2b10      	cmp	r3, #16
 800694e:	d10a      	bne.n	8006966 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff fca9 	bl	80062c4 <HAL_UARTEx_RxEventCallback>
 8006972:	e002      	b.n	800697a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7fa fb03 	bl	8000f80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	e002      	b.n	8006984 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	e000      	b.n	8006984 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006982:	2302      	movs	r3, #2
  }
}
 8006984:	4618      	mov	r0, r3
 8006986:	3730      	adds	r7, #48	; 0x30
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800698c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006990:	b0c0      	sub	sp, #256	; 0x100
 8006992:	af00      	add	r7, sp, #0
 8006994:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a8:	68d9      	ldr	r1, [r3, #12]
 80069aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	ea40 0301 	orr.w	r3, r0, r1
 80069b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069e4:	f021 010c 	bic.w	r1, r1, #12
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069f2:	430b      	orrs	r3, r1
 80069f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a06:	6999      	ldr	r1, [r3, #24]
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	ea40 0301 	orr.w	r3, r0, r1
 8006a12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b8f      	ldr	r3, [pc, #572]	; (8006c58 <UART_SetConfig+0x2cc>)
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d005      	beq.n	8006a2c <UART_SetConfig+0xa0>
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	4b8d      	ldr	r3, [pc, #564]	; (8006c5c <UART_SetConfig+0x2d0>)
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d104      	bne.n	8006a36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a2c:	f7fe fa0e 	bl	8004e4c <HAL_RCC_GetPCLK2Freq>
 8006a30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a34:	e003      	b.n	8006a3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a36:	f7fe f9f5 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8006a3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a48:	f040 810c 	bne.w	8006c64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a5e:	4622      	mov	r2, r4
 8006a60:	462b      	mov	r3, r5
 8006a62:	1891      	adds	r1, r2, r2
 8006a64:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a66:	415b      	adcs	r3, r3
 8006a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a6e:	4621      	mov	r1, r4
 8006a70:	eb12 0801 	adds.w	r8, r2, r1
 8006a74:	4629      	mov	r1, r5
 8006a76:	eb43 0901 	adc.w	r9, r3, r1
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a8e:	4690      	mov	r8, r2
 8006a90:	4699      	mov	r9, r3
 8006a92:	4623      	mov	r3, r4
 8006a94:	eb18 0303 	adds.w	r3, r8, r3
 8006a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	eb49 0303 	adc.w	r3, r9, r3
 8006aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ab2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ab6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006aba:	460b      	mov	r3, r1
 8006abc:	18db      	adds	r3, r3, r3
 8006abe:	653b      	str	r3, [r7, #80]	; 0x50
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	eb42 0303 	adc.w	r3, r2, r3
 8006ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ac8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006acc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ad0:	f7fa f8d4 	bl	8000c7c <__aeabi_uldivmod>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4b61      	ldr	r3, [pc, #388]	; (8006c60 <UART_SetConfig+0x2d4>)
 8006ada:	fba3 2302 	umull	r2, r3, r3, r2
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	011c      	lsls	r4, r3, #4
 8006ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006aec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006af0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006af4:	4642      	mov	r2, r8
 8006af6:	464b      	mov	r3, r9
 8006af8:	1891      	adds	r1, r2, r2
 8006afa:	64b9      	str	r1, [r7, #72]	; 0x48
 8006afc:	415b      	adcs	r3, r3
 8006afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b04:	4641      	mov	r1, r8
 8006b06:	eb12 0a01 	adds.w	sl, r2, r1
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b24:	4692      	mov	sl, r2
 8006b26:	469b      	mov	fp, r3
 8006b28:	4643      	mov	r3, r8
 8006b2a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b32:	464b      	mov	r3, r9
 8006b34:	eb4b 0303 	adc.w	r3, fp, r3
 8006b38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b50:	460b      	mov	r3, r1
 8006b52:	18db      	adds	r3, r3, r3
 8006b54:	643b      	str	r3, [r7, #64]	; 0x40
 8006b56:	4613      	mov	r3, r2
 8006b58:	eb42 0303 	adc.w	r3, r2, r3
 8006b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b66:	f7fa f889 	bl	8000c7c <__aeabi_uldivmod>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4611      	mov	r1, r2
 8006b70:	4b3b      	ldr	r3, [pc, #236]	; (8006c60 <UART_SetConfig+0x2d4>)
 8006b72:	fba3 2301 	umull	r2, r3, r3, r1
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	2264      	movs	r2, #100	; 0x64
 8006b7a:	fb02 f303 	mul.w	r3, r2, r3
 8006b7e:	1acb      	subs	r3, r1, r3
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b86:	4b36      	ldr	r3, [pc, #216]	; (8006c60 <UART_SetConfig+0x2d4>)
 8006b88:	fba3 2302 	umull	r2, r3, r3, r2
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b94:	441c      	add	r4, r3
 8006b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ba0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ba4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ba8:	4642      	mov	r2, r8
 8006baa:	464b      	mov	r3, r9
 8006bac:	1891      	adds	r1, r2, r2
 8006bae:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bb0:	415b      	adcs	r3, r3
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bb8:	4641      	mov	r1, r8
 8006bba:	1851      	adds	r1, r2, r1
 8006bbc:	6339      	str	r1, [r7, #48]	; 0x30
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	414b      	adcs	r3, r1
 8006bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bd0:	4659      	mov	r1, fp
 8006bd2:	00cb      	lsls	r3, r1, #3
 8006bd4:	4651      	mov	r1, sl
 8006bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bda:	4651      	mov	r1, sl
 8006bdc:	00ca      	lsls	r2, r1, #3
 8006bde:	4610      	mov	r0, r2
 8006be0:	4619      	mov	r1, r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	4642      	mov	r2, r8
 8006be6:	189b      	adds	r3, r3, r2
 8006be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bec:	464b      	mov	r3, r9
 8006bee:	460a      	mov	r2, r1
 8006bf0:	eb42 0303 	adc.w	r3, r2, r3
 8006bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	18db      	adds	r3, r3, r3
 8006c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c12:	4613      	mov	r3, r2
 8006c14:	eb42 0303 	adc.w	r3, r2, r3
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c22:	f7fa f82b 	bl	8000c7c <__aeabi_uldivmod>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4b0d      	ldr	r3, [pc, #52]	; (8006c60 <UART_SetConfig+0x2d4>)
 8006c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c30:	095b      	lsrs	r3, r3, #5
 8006c32:	2164      	movs	r1, #100	; 0x64
 8006c34:	fb01 f303 	mul.w	r3, r1, r3
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	3332      	adds	r3, #50	; 0x32
 8006c3e:	4a08      	ldr	r2, [pc, #32]	; (8006c60 <UART_SetConfig+0x2d4>)
 8006c40:	fba2 2303 	umull	r2, r3, r2, r3
 8006c44:	095b      	lsrs	r3, r3, #5
 8006c46:	f003 0207 	and.w	r2, r3, #7
 8006c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4422      	add	r2, r4
 8006c52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c54:	e105      	b.n	8006e62 <UART_SetConfig+0x4d6>
 8006c56:	bf00      	nop
 8006c58:	40011000 	.word	0x40011000
 8006c5c:	40011400 	.word	0x40011400
 8006c60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c76:	4642      	mov	r2, r8
 8006c78:	464b      	mov	r3, r9
 8006c7a:	1891      	adds	r1, r2, r2
 8006c7c:	6239      	str	r1, [r7, #32]
 8006c7e:	415b      	adcs	r3, r3
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
 8006c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c86:	4641      	mov	r1, r8
 8006c88:	1854      	adds	r4, r2, r1
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	eb43 0501 	adc.w	r5, r3, r1
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	00eb      	lsls	r3, r5, #3
 8006c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c9e:	00e2      	lsls	r2, r4, #3
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	461d      	mov	r5, r3
 8006ca4:	4643      	mov	r3, r8
 8006ca6:	18e3      	adds	r3, r4, r3
 8006ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cac:	464b      	mov	r3, r9
 8006cae:	eb45 0303 	adc.w	r3, r5, r3
 8006cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	008b      	lsls	r3, r1, #2
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cdc:	4621      	mov	r1, r4
 8006cde:	008a      	lsls	r2, r1, #2
 8006ce0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ce4:	f7f9 ffca 	bl	8000c7c <__aeabi_uldivmod>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4b60      	ldr	r3, [pc, #384]	; (8006e70 <UART_SetConfig+0x4e4>)
 8006cee:	fba3 2302 	umull	r2, r3, r3, r2
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	011c      	lsls	r4, r3, #4
 8006cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d08:	4642      	mov	r2, r8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	1891      	adds	r1, r2, r2
 8006d0e:	61b9      	str	r1, [r7, #24]
 8006d10:	415b      	adcs	r3, r3
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d18:	4641      	mov	r1, r8
 8006d1a:	1851      	adds	r1, r2, r1
 8006d1c:	6139      	str	r1, [r7, #16]
 8006d1e:	4649      	mov	r1, r9
 8006d20:	414b      	adcs	r3, r1
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	f04f 0300 	mov.w	r3, #0
 8006d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d30:	4659      	mov	r1, fp
 8006d32:	00cb      	lsls	r3, r1, #3
 8006d34:	4651      	mov	r1, sl
 8006d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d3a:	4651      	mov	r1, sl
 8006d3c:	00ca      	lsls	r2, r1, #3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	4619      	mov	r1, r3
 8006d42:	4603      	mov	r3, r0
 8006d44:	4642      	mov	r2, r8
 8006d46:	189b      	adds	r3, r3, r2
 8006d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d4c:	464b      	mov	r3, r9
 8006d4e:	460a      	mov	r2, r1
 8006d50:	eb42 0303 	adc.w	r3, r2, r3
 8006d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d70:	4649      	mov	r1, r9
 8006d72:	008b      	lsls	r3, r1, #2
 8006d74:	4641      	mov	r1, r8
 8006d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d7a:	4641      	mov	r1, r8
 8006d7c:	008a      	lsls	r2, r1, #2
 8006d7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d82:	f7f9 ff7b 	bl	8000c7c <__aeabi_uldivmod>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4b39      	ldr	r3, [pc, #228]	; (8006e70 <UART_SetConfig+0x4e4>)
 8006d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	2164      	movs	r1, #100	; 0x64
 8006d94:	fb01 f303 	mul.w	r3, r1, r3
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	3332      	adds	r3, #50	; 0x32
 8006d9e:	4a34      	ldr	r2, [pc, #208]	; (8006e70 <UART_SetConfig+0x4e4>)
 8006da0:	fba2 2303 	umull	r2, r3, r2, r3
 8006da4:	095b      	lsrs	r3, r3, #5
 8006da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006daa:	441c      	add	r4, r3
 8006dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db0:	2200      	movs	r2, #0
 8006db2:	673b      	str	r3, [r7, #112]	; 0x70
 8006db4:	677a      	str	r2, [r7, #116]	; 0x74
 8006db6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006dba:	4642      	mov	r2, r8
 8006dbc:	464b      	mov	r3, r9
 8006dbe:	1891      	adds	r1, r2, r2
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	415b      	adcs	r3, r3
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dca:	4641      	mov	r1, r8
 8006dcc:	1851      	adds	r1, r2, r1
 8006dce:	6039      	str	r1, [r7, #0]
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	414b      	adcs	r3, r1
 8006dd4:	607b      	str	r3, [r7, #4]
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006de2:	4659      	mov	r1, fp
 8006de4:	00cb      	lsls	r3, r1, #3
 8006de6:	4651      	mov	r1, sl
 8006de8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dec:	4651      	mov	r1, sl
 8006dee:	00ca      	lsls	r2, r1, #3
 8006df0:	4610      	mov	r0, r2
 8006df2:	4619      	mov	r1, r3
 8006df4:	4603      	mov	r3, r0
 8006df6:	4642      	mov	r2, r8
 8006df8:	189b      	adds	r3, r3, r2
 8006dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	460a      	mov	r2, r1
 8006e00:	eb42 0303 	adc.w	r3, r2, r3
 8006e04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8006e10:	667a      	str	r2, [r7, #100]	; 0x64
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e1e:	4649      	mov	r1, r9
 8006e20:	008b      	lsls	r3, r1, #2
 8006e22:	4641      	mov	r1, r8
 8006e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e28:	4641      	mov	r1, r8
 8006e2a:	008a      	lsls	r2, r1, #2
 8006e2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e30:	f7f9 ff24 	bl	8000c7c <__aeabi_uldivmod>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <UART_SetConfig+0x4e4>)
 8006e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	2164      	movs	r1, #100	; 0x64
 8006e42:	fb01 f303 	mul.w	r3, r1, r3
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	3332      	adds	r3, #50	; 0x32
 8006e4c:	4a08      	ldr	r2, [pc, #32]	; (8006e70 <UART_SetConfig+0x4e4>)
 8006e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4422      	add	r2, r4
 8006e60:	609a      	str	r2, [r3, #8]
}
 8006e62:	bf00      	nop
 8006e64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e6e:	bf00      	nop
 8006e70:	51eb851f 	.word	0x51eb851f

08006e74 <atoi>:
 8006e74:	220a      	movs	r2, #10
 8006e76:	2100      	movs	r1, #0
 8006e78:	f000 b910 	b.w	800709c <strtol>

08006e7c <__errno>:
 8006e7c:	4b01      	ldr	r3, [pc, #4]	; (8006e84 <__errno+0x8>)
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20000010 	.word	0x20000010

08006e88 <__libc_init_array>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	4d0d      	ldr	r5, [pc, #52]	; (8006ec0 <__libc_init_array+0x38>)
 8006e8c:	4c0d      	ldr	r4, [pc, #52]	; (8006ec4 <__libc_init_array+0x3c>)
 8006e8e:	1b64      	subs	r4, r4, r5
 8006e90:	10a4      	asrs	r4, r4, #2
 8006e92:	2600      	movs	r6, #0
 8006e94:	42a6      	cmp	r6, r4
 8006e96:	d109      	bne.n	8006eac <__libc_init_array+0x24>
 8006e98:	4d0b      	ldr	r5, [pc, #44]	; (8006ec8 <__libc_init_array+0x40>)
 8006e9a:	4c0c      	ldr	r4, [pc, #48]	; (8006ecc <__libc_init_array+0x44>)
 8006e9c:	f002 fa42 	bl	8009324 <_init>
 8006ea0:	1b64      	subs	r4, r4, r5
 8006ea2:	10a4      	asrs	r4, r4, #2
 8006ea4:	2600      	movs	r6, #0
 8006ea6:	42a6      	cmp	r6, r4
 8006ea8:	d105      	bne.n	8006eb6 <__libc_init_array+0x2e>
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb0:	4798      	blx	r3
 8006eb2:	3601      	adds	r6, #1
 8006eb4:	e7ee      	b.n	8006e94 <__libc_init_array+0xc>
 8006eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eba:	4798      	blx	r3
 8006ebc:	3601      	adds	r6, #1
 8006ebe:	e7f2      	b.n	8006ea6 <__libc_init_array+0x1e>
 8006ec0:	080097c8 	.word	0x080097c8
 8006ec4:	080097c8 	.word	0x080097c8
 8006ec8:	080097c8 	.word	0x080097c8
 8006ecc:	080097cc 	.word	0x080097cc

08006ed0 <memset>:
 8006ed0:	4402      	add	r2, r0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d100      	bne.n	8006eda <memset+0xa>
 8006ed8:	4770      	bx	lr
 8006eda:	f803 1b01 	strb.w	r1, [r3], #1
 8006ede:	e7f9      	b.n	8006ed4 <memset+0x4>

08006ee0 <strtok>:
 8006ee0:	4b16      	ldr	r3, [pc, #88]	; (8006f3c <strtok+0x5c>)
 8006ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ee4:	681e      	ldr	r6, [r3, #0]
 8006ee6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006ee8:	4605      	mov	r5, r0
 8006eea:	b9fc      	cbnz	r4, 8006f2c <strtok+0x4c>
 8006eec:	2050      	movs	r0, #80	; 0x50
 8006eee:	9101      	str	r1, [sp, #4]
 8006ef0:	f000 f9b0 	bl	8007254 <malloc>
 8006ef4:	9901      	ldr	r1, [sp, #4]
 8006ef6:	65b0      	str	r0, [r6, #88]	; 0x58
 8006ef8:	4602      	mov	r2, r0
 8006efa:	b920      	cbnz	r0, 8006f06 <strtok+0x26>
 8006efc:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <strtok+0x60>)
 8006efe:	4811      	ldr	r0, [pc, #68]	; (8006f44 <strtok+0x64>)
 8006f00:	2157      	movs	r1, #87	; 0x57
 8006f02:	f000 f977 	bl	80071f4 <__assert_func>
 8006f06:	e9c0 4400 	strd	r4, r4, [r0]
 8006f0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006f0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006f12:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006f16:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006f1a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006f1e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006f22:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006f26:	6184      	str	r4, [r0, #24]
 8006f28:	7704      	strb	r4, [r0, #28]
 8006f2a:	6244      	str	r4, [r0, #36]	; 0x24
 8006f2c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4628      	mov	r0, r5
 8006f32:	b002      	add	sp, #8
 8006f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f38:	f000 b806 	b.w	8006f48 <__strtok_r>
 8006f3c:	20000010 	.word	0x20000010
 8006f40:	080093a0 	.word	0x080093a0
 8006f44:	080093b7 	.word	0x080093b7

08006f48 <__strtok_r>:
 8006f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4a:	b908      	cbnz	r0, 8006f50 <__strtok_r+0x8>
 8006f4c:	6810      	ldr	r0, [r2, #0]
 8006f4e:	b188      	cbz	r0, 8006f74 <__strtok_r+0x2c>
 8006f50:	4604      	mov	r4, r0
 8006f52:	4620      	mov	r0, r4
 8006f54:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006f58:	460f      	mov	r7, r1
 8006f5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006f5e:	b91e      	cbnz	r6, 8006f68 <__strtok_r+0x20>
 8006f60:	b965      	cbnz	r5, 8006f7c <__strtok_r+0x34>
 8006f62:	6015      	str	r5, [r2, #0]
 8006f64:	4628      	mov	r0, r5
 8006f66:	e005      	b.n	8006f74 <__strtok_r+0x2c>
 8006f68:	42b5      	cmp	r5, r6
 8006f6a:	d1f6      	bne.n	8006f5a <__strtok_r+0x12>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1f0      	bne.n	8006f52 <__strtok_r+0xa>
 8006f70:	6014      	str	r4, [r2, #0]
 8006f72:	7003      	strb	r3, [r0, #0]
 8006f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f76:	461c      	mov	r4, r3
 8006f78:	e00c      	b.n	8006f94 <__strtok_r+0x4c>
 8006f7a:	b915      	cbnz	r5, 8006f82 <__strtok_r+0x3a>
 8006f7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f80:	460e      	mov	r6, r1
 8006f82:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006f86:	42ab      	cmp	r3, r5
 8006f88:	d1f7      	bne.n	8006f7a <__strtok_r+0x32>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0f3      	beq.n	8006f76 <__strtok_r+0x2e>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006f94:	6014      	str	r4, [r2, #0]
 8006f96:	e7ed      	b.n	8006f74 <__strtok_r+0x2c>

08006f98 <_strtol_l.constprop.0>:
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9e:	d001      	beq.n	8006fa4 <_strtol_l.constprop.0+0xc>
 8006fa0:	2b24      	cmp	r3, #36	; 0x24
 8006fa2:	d906      	bls.n	8006fb2 <_strtol_l.constprop.0+0x1a>
 8006fa4:	f7ff ff6a 	bl	8006e7c <__errno>
 8006fa8:	2316      	movs	r3, #22
 8006faa:	6003      	str	r3, [r0, #0]
 8006fac:	2000      	movs	r0, #0
 8006fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007098 <_strtol_l.constprop.0+0x100>
 8006fb6:	460d      	mov	r5, r1
 8006fb8:	462e      	mov	r6, r5
 8006fba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006fc2:	f017 0708 	ands.w	r7, r7, #8
 8006fc6:	d1f7      	bne.n	8006fb8 <_strtol_l.constprop.0+0x20>
 8006fc8:	2c2d      	cmp	r4, #45	; 0x2d
 8006fca:	d132      	bne.n	8007032 <_strtol_l.constprop.0+0x9a>
 8006fcc:	782c      	ldrb	r4, [r5, #0]
 8006fce:	2701      	movs	r7, #1
 8006fd0:	1cb5      	adds	r5, r6, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d05b      	beq.n	800708e <_strtol_l.constprop.0+0xf6>
 8006fd6:	2b10      	cmp	r3, #16
 8006fd8:	d109      	bne.n	8006fee <_strtol_l.constprop.0+0x56>
 8006fda:	2c30      	cmp	r4, #48	; 0x30
 8006fdc:	d107      	bne.n	8006fee <_strtol_l.constprop.0+0x56>
 8006fde:	782c      	ldrb	r4, [r5, #0]
 8006fe0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006fe4:	2c58      	cmp	r4, #88	; 0x58
 8006fe6:	d14d      	bne.n	8007084 <_strtol_l.constprop.0+0xec>
 8006fe8:	786c      	ldrb	r4, [r5, #1]
 8006fea:	2310      	movs	r3, #16
 8006fec:	3502      	adds	r5, #2
 8006fee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006ff2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006ff6:	f04f 0c00 	mov.w	ip, #0
 8006ffa:	fbb8 f9f3 	udiv	r9, r8, r3
 8006ffe:	4666      	mov	r6, ip
 8007000:	fb03 8a19 	mls	sl, r3, r9, r8
 8007004:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007008:	f1be 0f09 	cmp.w	lr, #9
 800700c:	d816      	bhi.n	800703c <_strtol_l.constprop.0+0xa4>
 800700e:	4674      	mov	r4, lr
 8007010:	42a3      	cmp	r3, r4
 8007012:	dd24      	ble.n	800705e <_strtol_l.constprop.0+0xc6>
 8007014:	f1bc 0f00 	cmp.w	ip, #0
 8007018:	db1e      	blt.n	8007058 <_strtol_l.constprop.0+0xc0>
 800701a:	45b1      	cmp	r9, r6
 800701c:	d31c      	bcc.n	8007058 <_strtol_l.constprop.0+0xc0>
 800701e:	d101      	bne.n	8007024 <_strtol_l.constprop.0+0x8c>
 8007020:	45a2      	cmp	sl, r4
 8007022:	db19      	blt.n	8007058 <_strtol_l.constprop.0+0xc0>
 8007024:	fb06 4603 	mla	r6, r6, r3, r4
 8007028:	f04f 0c01 	mov.w	ip, #1
 800702c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007030:	e7e8      	b.n	8007004 <_strtol_l.constprop.0+0x6c>
 8007032:	2c2b      	cmp	r4, #43	; 0x2b
 8007034:	bf04      	itt	eq
 8007036:	782c      	ldrbeq	r4, [r5, #0]
 8007038:	1cb5      	addeq	r5, r6, #2
 800703a:	e7ca      	b.n	8006fd2 <_strtol_l.constprop.0+0x3a>
 800703c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007040:	f1be 0f19 	cmp.w	lr, #25
 8007044:	d801      	bhi.n	800704a <_strtol_l.constprop.0+0xb2>
 8007046:	3c37      	subs	r4, #55	; 0x37
 8007048:	e7e2      	b.n	8007010 <_strtol_l.constprop.0+0x78>
 800704a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800704e:	f1be 0f19 	cmp.w	lr, #25
 8007052:	d804      	bhi.n	800705e <_strtol_l.constprop.0+0xc6>
 8007054:	3c57      	subs	r4, #87	; 0x57
 8007056:	e7db      	b.n	8007010 <_strtol_l.constprop.0+0x78>
 8007058:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800705c:	e7e6      	b.n	800702c <_strtol_l.constprop.0+0x94>
 800705e:	f1bc 0f00 	cmp.w	ip, #0
 8007062:	da05      	bge.n	8007070 <_strtol_l.constprop.0+0xd8>
 8007064:	2322      	movs	r3, #34	; 0x22
 8007066:	6003      	str	r3, [r0, #0]
 8007068:	4646      	mov	r6, r8
 800706a:	b942      	cbnz	r2, 800707e <_strtol_l.constprop.0+0xe6>
 800706c:	4630      	mov	r0, r6
 800706e:	e79e      	b.n	8006fae <_strtol_l.constprop.0+0x16>
 8007070:	b107      	cbz	r7, 8007074 <_strtol_l.constprop.0+0xdc>
 8007072:	4276      	negs	r6, r6
 8007074:	2a00      	cmp	r2, #0
 8007076:	d0f9      	beq.n	800706c <_strtol_l.constprop.0+0xd4>
 8007078:	f1bc 0f00 	cmp.w	ip, #0
 800707c:	d000      	beq.n	8007080 <_strtol_l.constprop.0+0xe8>
 800707e:	1e69      	subs	r1, r5, #1
 8007080:	6011      	str	r1, [r2, #0]
 8007082:	e7f3      	b.n	800706c <_strtol_l.constprop.0+0xd4>
 8007084:	2430      	movs	r4, #48	; 0x30
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1b1      	bne.n	8006fee <_strtol_l.constprop.0+0x56>
 800708a:	2308      	movs	r3, #8
 800708c:	e7af      	b.n	8006fee <_strtol_l.constprop.0+0x56>
 800708e:	2c30      	cmp	r4, #48	; 0x30
 8007090:	d0a5      	beq.n	8006fde <_strtol_l.constprop.0+0x46>
 8007092:	230a      	movs	r3, #10
 8007094:	e7ab      	b.n	8006fee <_strtol_l.constprop.0+0x56>
 8007096:	bf00      	nop
 8007098:	08009451 	.word	0x08009451

0800709c <strtol>:
 800709c:	4613      	mov	r3, r2
 800709e:	460a      	mov	r2, r1
 80070a0:	4601      	mov	r1, r0
 80070a2:	4802      	ldr	r0, [pc, #8]	; (80070ac <strtol+0x10>)
 80070a4:	6800      	ldr	r0, [r0, #0]
 80070a6:	f7ff bf77 	b.w	8006f98 <_strtol_l.constprop.0>
 80070aa:	bf00      	nop
 80070ac:	20000010 	.word	0x20000010

080070b0 <_strtoull_l.constprop.0>:
 80070b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	4692      	mov	sl, r2
 80070b6:	4a49      	ldr	r2, [pc, #292]	; (80071dc <_strtoull_l.constprop.0+0x12c>)
 80070b8:	9001      	str	r0, [sp, #4]
 80070ba:	4689      	mov	r9, r1
 80070bc:	461d      	mov	r5, r3
 80070be:	460e      	mov	r6, r1
 80070c0:	4633      	mov	r3, r6
 80070c2:	f816 4b01 	ldrb.w	r4, [r6], #1
 80070c6:	5ca7      	ldrb	r7, [r4, r2]
 80070c8:	f017 0708 	ands.w	r7, r7, #8
 80070cc:	d1f8      	bne.n	80070c0 <_strtoull_l.constprop.0+0x10>
 80070ce:	2c2d      	cmp	r4, #45	; 0x2d
 80070d0:	d14a      	bne.n	8007168 <_strtoull_l.constprop.0+0xb8>
 80070d2:	7834      	ldrb	r4, [r6, #0]
 80070d4:	2701      	movs	r7, #1
 80070d6:	1c9e      	adds	r6, r3, #2
 80070d8:	2d00      	cmp	r5, #0
 80070da:	d07b      	beq.n	80071d4 <_strtoull_l.constprop.0+0x124>
 80070dc:	2d10      	cmp	r5, #16
 80070de:	d109      	bne.n	80070f4 <_strtoull_l.constprop.0+0x44>
 80070e0:	2c30      	cmp	r4, #48	; 0x30
 80070e2:	d107      	bne.n	80070f4 <_strtoull_l.constprop.0+0x44>
 80070e4:	7833      	ldrb	r3, [r6, #0]
 80070e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80070ea:	2b58      	cmp	r3, #88	; 0x58
 80070ec:	d16d      	bne.n	80071ca <_strtoull_l.constprop.0+0x11a>
 80070ee:	7874      	ldrb	r4, [r6, #1]
 80070f0:	2510      	movs	r5, #16
 80070f2:	3602      	adds	r6, #2
 80070f4:	ea4f 7be5 	mov.w	fp, r5, asr #31
 80070f8:	462a      	mov	r2, r5
 80070fa:	465b      	mov	r3, fp
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007100:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007104:	f7f9 fdba 	bl	8000c7c <__aeabi_uldivmod>
 8007108:	462a      	mov	r2, r5
 800710a:	9000      	str	r0, [sp, #0]
 800710c:	4688      	mov	r8, r1
 800710e:	465b      	mov	r3, fp
 8007110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007114:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007118:	f7f9 fdb0 	bl	8000c7c <__aeabi_uldivmod>
 800711c:	2300      	movs	r3, #0
 800711e:	4618      	mov	r0, r3
 8007120:	4619      	mov	r1, r3
 8007122:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007126:	f1bc 0f09 	cmp.w	ip, #9
 800712a:	d822      	bhi.n	8007172 <_strtoull_l.constprop.0+0xc2>
 800712c:	4664      	mov	r4, ip
 800712e:	42a5      	cmp	r5, r4
 8007130:	dd30      	ble.n	8007194 <_strtoull_l.constprop.0+0xe4>
 8007132:	2b00      	cmp	r3, #0
 8007134:	db2b      	blt.n	800718e <_strtoull_l.constprop.0+0xde>
 8007136:	9b00      	ldr	r3, [sp, #0]
 8007138:	4283      	cmp	r3, r0
 800713a:	eb78 0301 	sbcs.w	r3, r8, r1
 800713e:	d326      	bcc.n	800718e <_strtoull_l.constprop.0+0xde>
 8007140:	9b00      	ldr	r3, [sp, #0]
 8007142:	4588      	cmp	r8, r1
 8007144:	bf08      	it	eq
 8007146:	4283      	cmpeq	r3, r0
 8007148:	d101      	bne.n	800714e <_strtoull_l.constprop.0+0x9e>
 800714a:	42a2      	cmp	r2, r4
 800714c:	db1f      	blt.n	800718e <_strtoull_l.constprop.0+0xde>
 800714e:	4369      	muls	r1, r5
 8007150:	fb00 110b 	mla	r1, r0, fp, r1
 8007154:	fba5 0300 	umull	r0, r3, r5, r0
 8007158:	4419      	add	r1, r3
 800715a:	1820      	adds	r0, r4, r0
 800715c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8007160:	2301      	movs	r3, #1
 8007162:	f816 4b01 	ldrb.w	r4, [r6], #1
 8007166:	e7dc      	b.n	8007122 <_strtoull_l.constprop.0+0x72>
 8007168:	2c2b      	cmp	r4, #43	; 0x2b
 800716a:	bf04      	itt	eq
 800716c:	7834      	ldrbeq	r4, [r6, #0]
 800716e:	1c9e      	addeq	r6, r3, #2
 8007170:	e7b2      	b.n	80070d8 <_strtoull_l.constprop.0+0x28>
 8007172:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007176:	f1bc 0f19 	cmp.w	ip, #25
 800717a:	d801      	bhi.n	8007180 <_strtoull_l.constprop.0+0xd0>
 800717c:	3c37      	subs	r4, #55	; 0x37
 800717e:	e7d6      	b.n	800712e <_strtoull_l.constprop.0+0x7e>
 8007180:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007184:	f1bc 0f19 	cmp.w	ip, #25
 8007188:	d804      	bhi.n	8007194 <_strtoull_l.constprop.0+0xe4>
 800718a:	3c57      	subs	r4, #87	; 0x57
 800718c:	e7cf      	b.n	800712e <_strtoull_l.constprop.0+0x7e>
 800718e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007192:	e7e6      	b.n	8007162 <_strtoull_l.constprop.0+0xb2>
 8007194:	2b00      	cmp	r3, #0
 8007196:	da0b      	bge.n	80071b0 <_strtoull_l.constprop.0+0x100>
 8007198:	9a01      	ldr	r2, [sp, #4]
 800719a:	2322      	movs	r3, #34	; 0x22
 800719c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	4601      	mov	r1, r0
 80071a4:	f1ba 0f00 	cmp.w	sl, #0
 80071a8:	d10a      	bne.n	80071c0 <_strtoull_l.constprop.0+0x110>
 80071aa:	b003      	add	sp, #12
 80071ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b0:	b117      	cbz	r7, 80071b8 <_strtoull_l.constprop.0+0x108>
 80071b2:	4240      	negs	r0, r0
 80071b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80071b8:	f1ba 0f00 	cmp.w	sl, #0
 80071bc:	d0f5      	beq.n	80071aa <_strtoull_l.constprop.0+0xfa>
 80071be:	b10b      	cbz	r3, 80071c4 <_strtoull_l.constprop.0+0x114>
 80071c0:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 80071c4:	f8ca 9000 	str.w	r9, [sl]
 80071c8:	e7ef      	b.n	80071aa <_strtoull_l.constprop.0+0xfa>
 80071ca:	2430      	movs	r4, #48	; 0x30
 80071cc:	2d00      	cmp	r5, #0
 80071ce:	d191      	bne.n	80070f4 <_strtoull_l.constprop.0+0x44>
 80071d0:	2508      	movs	r5, #8
 80071d2:	e78f      	b.n	80070f4 <_strtoull_l.constprop.0+0x44>
 80071d4:	2c30      	cmp	r4, #48	; 0x30
 80071d6:	d085      	beq.n	80070e4 <_strtoull_l.constprop.0+0x34>
 80071d8:	250a      	movs	r5, #10
 80071da:	e78b      	b.n	80070f4 <_strtoull_l.constprop.0+0x44>
 80071dc:	08009451 	.word	0x08009451

080071e0 <strtoull>:
 80071e0:	4613      	mov	r3, r2
 80071e2:	460a      	mov	r2, r1
 80071e4:	4601      	mov	r1, r0
 80071e6:	4802      	ldr	r0, [pc, #8]	; (80071f0 <strtoull+0x10>)
 80071e8:	6800      	ldr	r0, [r0, #0]
 80071ea:	f7ff bf61 	b.w	80070b0 <_strtoull_l.constprop.0>
 80071ee:	bf00      	nop
 80071f0:	20000010 	.word	0x20000010

080071f4 <__assert_func>:
 80071f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071f6:	4614      	mov	r4, r2
 80071f8:	461a      	mov	r2, r3
 80071fa:	4b09      	ldr	r3, [pc, #36]	; (8007220 <__assert_func+0x2c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4605      	mov	r5, r0
 8007200:	68d8      	ldr	r0, [r3, #12]
 8007202:	b14c      	cbz	r4, 8007218 <__assert_func+0x24>
 8007204:	4b07      	ldr	r3, [pc, #28]	; (8007224 <__assert_func+0x30>)
 8007206:	9100      	str	r1, [sp, #0]
 8007208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800720c:	4906      	ldr	r1, [pc, #24]	; (8007228 <__assert_func+0x34>)
 800720e:	462b      	mov	r3, r5
 8007210:	f000 f80e 	bl	8007230 <fiprintf>
 8007214:	f000 fcc4 	bl	8007ba0 <abort>
 8007218:	4b04      	ldr	r3, [pc, #16]	; (800722c <__assert_func+0x38>)
 800721a:	461c      	mov	r4, r3
 800721c:	e7f3      	b.n	8007206 <__assert_func+0x12>
 800721e:	bf00      	nop
 8007220:	20000010 	.word	0x20000010
 8007224:	08009414 	.word	0x08009414
 8007228:	08009421 	.word	0x08009421
 800722c:	0800944f 	.word	0x0800944f

08007230 <fiprintf>:
 8007230:	b40e      	push	{r1, r2, r3}
 8007232:	b503      	push	{r0, r1, lr}
 8007234:	4601      	mov	r1, r0
 8007236:	ab03      	add	r3, sp, #12
 8007238:	4805      	ldr	r0, [pc, #20]	; (8007250 <fiprintf+0x20>)
 800723a:	f853 2b04 	ldr.w	r2, [r3], #4
 800723e:	6800      	ldr	r0, [r0, #0]
 8007240:	9301      	str	r3, [sp, #4]
 8007242:	f000 f919 	bl	8007478 <_vfiprintf_r>
 8007246:	b002      	add	sp, #8
 8007248:	f85d eb04 	ldr.w	lr, [sp], #4
 800724c:	b003      	add	sp, #12
 800724e:	4770      	bx	lr
 8007250:	20000010 	.word	0x20000010

08007254 <malloc>:
 8007254:	4b02      	ldr	r3, [pc, #8]	; (8007260 <malloc+0xc>)
 8007256:	4601      	mov	r1, r0
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	f000 b86f 	b.w	800733c <_malloc_r>
 800725e:	bf00      	nop
 8007260:	20000010 	.word	0x20000010

08007264 <_free_r>:
 8007264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007266:	2900      	cmp	r1, #0
 8007268:	d044      	beq.n	80072f4 <_free_r+0x90>
 800726a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800726e:	9001      	str	r0, [sp, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	f1a1 0404 	sub.w	r4, r1, #4
 8007276:	bfb8      	it	lt
 8007278:	18e4      	addlt	r4, r4, r3
 800727a:	f000 feb9 	bl	8007ff0 <__malloc_lock>
 800727e:	4a1e      	ldr	r2, [pc, #120]	; (80072f8 <_free_r+0x94>)
 8007280:	9801      	ldr	r0, [sp, #4]
 8007282:	6813      	ldr	r3, [r2, #0]
 8007284:	b933      	cbnz	r3, 8007294 <_free_r+0x30>
 8007286:	6063      	str	r3, [r4, #4]
 8007288:	6014      	str	r4, [r2, #0]
 800728a:	b003      	add	sp, #12
 800728c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007290:	f000 beb4 	b.w	8007ffc <__malloc_unlock>
 8007294:	42a3      	cmp	r3, r4
 8007296:	d908      	bls.n	80072aa <_free_r+0x46>
 8007298:	6825      	ldr	r5, [r4, #0]
 800729a:	1961      	adds	r1, r4, r5
 800729c:	428b      	cmp	r3, r1
 800729e:	bf01      	itttt	eq
 80072a0:	6819      	ldreq	r1, [r3, #0]
 80072a2:	685b      	ldreq	r3, [r3, #4]
 80072a4:	1949      	addeq	r1, r1, r5
 80072a6:	6021      	streq	r1, [r4, #0]
 80072a8:	e7ed      	b.n	8007286 <_free_r+0x22>
 80072aa:	461a      	mov	r2, r3
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	b10b      	cbz	r3, 80072b4 <_free_r+0x50>
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	d9fa      	bls.n	80072aa <_free_r+0x46>
 80072b4:	6811      	ldr	r1, [r2, #0]
 80072b6:	1855      	adds	r5, r2, r1
 80072b8:	42a5      	cmp	r5, r4
 80072ba:	d10b      	bne.n	80072d4 <_free_r+0x70>
 80072bc:	6824      	ldr	r4, [r4, #0]
 80072be:	4421      	add	r1, r4
 80072c0:	1854      	adds	r4, r2, r1
 80072c2:	42a3      	cmp	r3, r4
 80072c4:	6011      	str	r1, [r2, #0]
 80072c6:	d1e0      	bne.n	800728a <_free_r+0x26>
 80072c8:	681c      	ldr	r4, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	6053      	str	r3, [r2, #4]
 80072ce:	4421      	add	r1, r4
 80072d0:	6011      	str	r1, [r2, #0]
 80072d2:	e7da      	b.n	800728a <_free_r+0x26>
 80072d4:	d902      	bls.n	80072dc <_free_r+0x78>
 80072d6:	230c      	movs	r3, #12
 80072d8:	6003      	str	r3, [r0, #0]
 80072da:	e7d6      	b.n	800728a <_free_r+0x26>
 80072dc:	6825      	ldr	r5, [r4, #0]
 80072de:	1961      	adds	r1, r4, r5
 80072e0:	428b      	cmp	r3, r1
 80072e2:	bf04      	itt	eq
 80072e4:	6819      	ldreq	r1, [r3, #0]
 80072e6:	685b      	ldreq	r3, [r3, #4]
 80072e8:	6063      	str	r3, [r4, #4]
 80072ea:	bf04      	itt	eq
 80072ec:	1949      	addeq	r1, r1, r5
 80072ee:	6021      	streq	r1, [r4, #0]
 80072f0:	6054      	str	r4, [r2, #4]
 80072f2:	e7ca      	b.n	800728a <_free_r+0x26>
 80072f4:	b003      	add	sp, #12
 80072f6:	bd30      	pop	{r4, r5, pc}
 80072f8:	20000660 	.word	0x20000660

080072fc <sbrk_aligned>:
 80072fc:	b570      	push	{r4, r5, r6, lr}
 80072fe:	4e0e      	ldr	r6, [pc, #56]	; (8007338 <sbrk_aligned+0x3c>)
 8007300:	460c      	mov	r4, r1
 8007302:	6831      	ldr	r1, [r6, #0]
 8007304:	4605      	mov	r5, r0
 8007306:	b911      	cbnz	r1, 800730e <sbrk_aligned+0x12>
 8007308:	f000 fb7a 	bl	8007a00 <_sbrk_r>
 800730c:	6030      	str	r0, [r6, #0]
 800730e:	4621      	mov	r1, r4
 8007310:	4628      	mov	r0, r5
 8007312:	f000 fb75 	bl	8007a00 <_sbrk_r>
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	d00a      	beq.n	8007330 <sbrk_aligned+0x34>
 800731a:	1cc4      	adds	r4, r0, #3
 800731c:	f024 0403 	bic.w	r4, r4, #3
 8007320:	42a0      	cmp	r0, r4
 8007322:	d007      	beq.n	8007334 <sbrk_aligned+0x38>
 8007324:	1a21      	subs	r1, r4, r0
 8007326:	4628      	mov	r0, r5
 8007328:	f000 fb6a 	bl	8007a00 <_sbrk_r>
 800732c:	3001      	adds	r0, #1
 800732e:	d101      	bne.n	8007334 <sbrk_aligned+0x38>
 8007330:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007334:	4620      	mov	r0, r4
 8007336:	bd70      	pop	{r4, r5, r6, pc}
 8007338:	20000664 	.word	0x20000664

0800733c <_malloc_r>:
 800733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007340:	1ccd      	adds	r5, r1, #3
 8007342:	f025 0503 	bic.w	r5, r5, #3
 8007346:	3508      	adds	r5, #8
 8007348:	2d0c      	cmp	r5, #12
 800734a:	bf38      	it	cc
 800734c:	250c      	movcc	r5, #12
 800734e:	2d00      	cmp	r5, #0
 8007350:	4607      	mov	r7, r0
 8007352:	db01      	blt.n	8007358 <_malloc_r+0x1c>
 8007354:	42a9      	cmp	r1, r5
 8007356:	d905      	bls.n	8007364 <_malloc_r+0x28>
 8007358:	230c      	movs	r3, #12
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	2600      	movs	r6, #0
 800735e:	4630      	mov	r0, r6
 8007360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007364:	4e2e      	ldr	r6, [pc, #184]	; (8007420 <_malloc_r+0xe4>)
 8007366:	f000 fe43 	bl	8007ff0 <__malloc_lock>
 800736a:	6833      	ldr	r3, [r6, #0]
 800736c:	461c      	mov	r4, r3
 800736e:	bb34      	cbnz	r4, 80073be <_malloc_r+0x82>
 8007370:	4629      	mov	r1, r5
 8007372:	4638      	mov	r0, r7
 8007374:	f7ff ffc2 	bl	80072fc <sbrk_aligned>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	4604      	mov	r4, r0
 800737c:	d14d      	bne.n	800741a <_malloc_r+0xde>
 800737e:	6834      	ldr	r4, [r6, #0]
 8007380:	4626      	mov	r6, r4
 8007382:	2e00      	cmp	r6, #0
 8007384:	d140      	bne.n	8007408 <_malloc_r+0xcc>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	4631      	mov	r1, r6
 800738a:	4638      	mov	r0, r7
 800738c:	eb04 0803 	add.w	r8, r4, r3
 8007390:	f000 fb36 	bl	8007a00 <_sbrk_r>
 8007394:	4580      	cmp	r8, r0
 8007396:	d13a      	bne.n	800740e <_malloc_r+0xd2>
 8007398:	6821      	ldr	r1, [r4, #0]
 800739a:	3503      	adds	r5, #3
 800739c:	1a6d      	subs	r5, r5, r1
 800739e:	f025 0503 	bic.w	r5, r5, #3
 80073a2:	3508      	adds	r5, #8
 80073a4:	2d0c      	cmp	r5, #12
 80073a6:	bf38      	it	cc
 80073a8:	250c      	movcc	r5, #12
 80073aa:	4629      	mov	r1, r5
 80073ac:	4638      	mov	r0, r7
 80073ae:	f7ff ffa5 	bl	80072fc <sbrk_aligned>
 80073b2:	3001      	adds	r0, #1
 80073b4:	d02b      	beq.n	800740e <_malloc_r+0xd2>
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	442b      	add	r3, r5
 80073ba:	6023      	str	r3, [r4, #0]
 80073bc:	e00e      	b.n	80073dc <_malloc_r+0xa0>
 80073be:	6822      	ldr	r2, [r4, #0]
 80073c0:	1b52      	subs	r2, r2, r5
 80073c2:	d41e      	bmi.n	8007402 <_malloc_r+0xc6>
 80073c4:	2a0b      	cmp	r2, #11
 80073c6:	d916      	bls.n	80073f6 <_malloc_r+0xba>
 80073c8:	1961      	adds	r1, r4, r5
 80073ca:	42a3      	cmp	r3, r4
 80073cc:	6025      	str	r5, [r4, #0]
 80073ce:	bf18      	it	ne
 80073d0:	6059      	strne	r1, [r3, #4]
 80073d2:	6863      	ldr	r3, [r4, #4]
 80073d4:	bf08      	it	eq
 80073d6:	6031      	streq	r1, [r6, #0]
 80073d8:	5162      	str	r2, [r4, r5]
 80073da:	604b      	str	r3, [r1, #4]
 80073dc:	4638      	mov	r0, r7
 80073de:	f104 060b 	add.w	r6, r4, #11
 80073e2:	f000 fe0b 	bl	8007ffc <__malloc_unlock>
 80073e6:	f026 0607 	bic.w	r6, r6, #7
 80073ea:	1d23      	adds	r3, r4, #4
 80073ec:	1af2      	subs	r2, r6, r3
 80073ee:	d0b6      	beq.n	800735e <_malloc_r+0x22>
 80073f0:	1b9b      	subs	r3, r3, r6
 80073f2:	50a3      	str	r3, [r4, r2]
 80073f4:	e7b3      	b.n	800735e <_malloc_r+0x22>
 80073f6:	6862      	ldr	r2, [r4, #4]
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	bf0c      	ite	eq
 80073fc:	6032      	streq	r2, [r6, #0]
 80073fe:	605a      	strne	r2, [r3, #4]
 8007400:	e7ec      	b.n	80073dc <_malloc_r+0xa0>
 8007402:	4623      	mov	r3, r4
 8007404:	6864      	ldr	r4, [r4, #4]
 8007406:	e7b2      	b.n	800736e <_malloc_r+0x32>
 8007408:	4634      	mov	r4, r6
 800740a:	6876      	ldr	r6, [r6, #4]
 800740c:	e7b9      	b.n	8007382 <_malloc_r+0x46>
 800740e:	230c      	movs	r3, #12
 8007410:	603b      	str	r3, [r7, #0]
 8007412:	4638      	mov	r0, r7
 8007414:	f000 fdf2 	bl	8007ffc <__malloc_unlock>
 8007418:	e7a1      	b.n	800735e <_malloc_r+0x22>
 800741a:	6025      	str	r5, [r4, #0]
 800741c:	e7de      	b.n	80073dc <_malloc_r+0xa0>
 800741e:	bf00      	nop
 8007420:	20000660 	.word	0x20000660

08007424 <__sfputc_r>:
 8007424:	6893      	ldr	r3, [r2, #8]
 8007426:	3b01      	subs	r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	b410      	push	{r4}
 800742c:	6093      	str	r3, [r2, #8]
 800742e:	da08      	bge.n	8007442 <__sfputc_r+0x1e>
 8007430:	6994      	ldr	r4, [r2, #24]
 8007432:	42a3      	cmp	r3, r4
 8007434:	db01      	blt.n	800743a <__sfputc_r+0x16>
 8007436:	290a      	cmp	r1, #10
 8007438:	d103      	bne.n	8007442 <__sfputc_r+0x1e>
 800743a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800743e:	f000 baef 	b.w	8007a20 <__swbuf_r>
 8007442:	6813      	ldr	r3, [r2, #0]
 8007444:	1c58      	adds	r0, r3, #1
 8007446:	6010      	str	r0, [r2, #0]
 8007448:	7019      	strb	r1, [r3, #0]
 800744a:	4608      	mov	r0, r1
 800744c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007450:	4770      	bx	lr

08007452 <__sfputs_r>:
 8007452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007454:	4606      	mov	r6, r0
 8007456:	460f      	mov	r7, r1
 8007458:	4614      	mov	r4, r2
 800745a:	18d5      	adds	r5, r2, r3
 800745c:	42ac      	cmp	r4, r5
 800745e:	d101      	bne.n	8007464 <__sfputs_r+0x12>
 8007460:	2000      	movs	r0, #0
 8007462:	e007      	b.n	8007474 <__sfputs_r+0x22>
 8007464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007468:	463a      	mov	r2, r7
 800746a:	4630      	mov	r0, r6
 800746c:	f7ff ffda 	bl	8007424 <__sfputc_r>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d1f3      	bne.n	800745c <__sfputs_r+0xa>
 8007474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007478 <_vfiprintf_r>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	460d      	mov	r5, r1
 800747e:	b09d      	sub	sp, #116	; 0x74
 8007480:	4614      	mov	r4, r2
 8007482:	4698      	mov	r8, r3
 8007484:	4606      	mov	r6, r0
 8007486:	b118      	cbz	r0, 8007490 <_vfiprintf_r+0x18>
 8007488:	6983      	ldr	r3, [r0, #24]
 800748a:	b90b      	cbnz	r3, 8007490 <_vfiprintf_r+0x18>
 800748c:	f000 fcaa 	bl	8007de4 <__sinit>
 8007490:	4b89      	ldr	r3, [pc, #548]	; (80076b8 <_vfiprintf_r+0x240>)
 8007492:	429d      	cmp	r5, r3
 8007494:	d11b      	bne.n	80074ce <_vfiprintf_r+0x56>
 8007496:	6875      	ldr	r5, [r6, #4]
 8007498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800749a:	07d9      	lsls	r1, r3, #31
 800749c:	d405      	bmi.n	80074aa <_vfiprintf_r+0x32>
 800749e:	89ab      	ldrh	r3, [r5, #12]
 80074a0:	059a      	lsls	r2, r3, #22
 80074a2:	d402      	bmi.n	80074aa <_vfiprintf_r+0x32>
 80074a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074a6:	f000 fd3b 	bl	8007f20 <__retarget_lock_acquire_recursive>
 80074aa:	89ab      	ldrh	r3, [r5, #12]
 80074ac:	071b      	lsls	r3, r3, #28
 80074ae:	d501      	bpl.n	80074b4 <_vfiprintf_r+0x3c>
 80074b0:	692b      	ldr	r3, [r5, #16]
 80074b2:	b9eb      	cbnz	r3, 80074f0 <_vfiprintf_r+0x78>
 80074b4:	4629      	mov	r1, r5
 80074b6:	4630      	mov	r0, r6
 80074b8:	f000 fb04 	bl	8007ac4 <__swsetup_r>
 80074bc:	b1c0      	cbz	r0, 80074f0 <_vfiprintf_r+0x78>
 80074be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074c0:	07dc      	lsls	r4, r3, #31
 80074c2:	d50e      	bpl.n	80074e2 <_vfiprintf_r+0x6a>
 80074c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074c8:	b01d      	add	sp, #116	; 0x74
 80074ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ce:	4b7b      	ldr	r3, [pc, #492]	; (80076bc <_vfiprintf_r+0x244>)
 80074d0:	429d      	cmp	r5, r3
 80074d2:	d101      	bne.n	80074d8 <_vfiprintf_r+0x60>
 80074d4:	68b5      	ldr	r5, [r6, #8]
 80074d6:	e7df      	b.n	8007498 <_vfiprintf_r+0x20>
 80074d8:	4b79      	ldr	r3, [pc, #484]	; (80076c0 <_vfiprintf_r+0x248>)
 80074da:	429d      	cmp	r5, r3
 80074dc:	bf08      	it	eq
 80074de:	68f5      	ldreq	r5, [r6, #12]
 80074e0:	e7da      	b.n	8007498 <_vfiprintf_r+0x20>
 80074e2:	89ab      	ldrh	r3, [r5, #12]
 80074e4:	0598      	lsls	r0, r3, #22
 80074e6:	d4ed      	bmi.n	80074c4 <_vfiprintf_r+0x4c>
 80074e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ea:	f000 fd1a 	bl	8007f22 <__retarget_lock_release_recursive>
 80074ee:	e7e9      	b.n	80074c4 <_vfiprintf_r+0x4c>
 80074f0:	2300      	movs	r3, #0
 80074f2:	9309      	str	r3, [sp, #36]	; 0x24
 80074f4:	2320      	movs	r3, #32
 80074f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80074fe:	2330      	movs	r3, #48	; 0x30
 8007500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80076c4 <_vfiprintf_r+0x24c>
 8007504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007508:	f04f 0901 	mov.w	r9, #1
 800750c:	4623      	mov	r3, r4
 800750e:	469a      	mov	sl, r3
 8007510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007514:	b10a      	cbz	r2, 800751a <_vfiprintf_r+0xa2>
 8007516:	2a25      	cmp	r2, #37	; 0x25
 8007518:	d1f9      	bne.n	800750e <_vfiprintf_r+0x96>
 800751a:	ebba 0b04 	subs.w	fp, sl, r4
 800751e:	d00b      	beq.n	8007538 <_vfiprintf_r+0xc0>
 8007520:	465b      	mov	r3, fp
 8007522:	4622      	mov	r2, r4
 8007524:	4629      	mov	r1, r5
 8007526:	4630      	mov	r0, r6
 8007528:	f7ff ff93 	bl	8007452 <__sfputs_r>
 800752c:	3001      	adds	r0, #1
 800752e:	f000 80aa 	beq.w	8007686 <_vfiprintf_r+0x20e>
 8007532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007534:	445a      	add	r2, fp
 8007536:	9209      	str	r2, [sp, #36]	; 0x24
 8007538:	f89a 3000 	ldrb.w	r3, [sl]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 80a2 	beq.w	8007686 <_vfiprintf_r+0x20e>
 8007542:	2300      	movs	r3, #0
 8007544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800754c:	f10a 0a01 	add.w	sl, sl, #1
 8007550:	9304      	str	r3, [sp, #16]
 8007552:	9307      	str	r3, [sp, #28]
 8007554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007558:	931a      	str	r3, [sp, #104]	; 0x68
 800755a:	4654      	mov	r4, sl
 800755c:	2205      	movs	r2, #5
 800755e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007562:	4858      	ldr	r0, [pc, #352]	; (80076c4 <_vfiprintf_r+0x24c>)
 8007564:	f7f8 fe4c 	bl	8000200 <memchr>
 8007568:	9a04      	ldr	r2, [sp, #16]
 800756a:	b9d8      	cbnz	r0, 80075a4 <_vfiprintf_r+0x12c>
 800756c:	06d1      	lsls	r1, r2, #27
 800756e:	bf44      	itt	mi
 8007570:	2320      	movmi	r3, #32
 8007572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007576:	0713      	lsls	r3, r2, #28
 8007578:	bf44      	itt	mi
 800757a:	232b      	movmi	r3, #43	; 0x2b
 800757c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007580:	f89a 3000 	ldrb.w	r3, [sl]
 8007584:	2b2a      	cmp	r3, #42	; 0x2a
 8007586:	d015      	beq.n	80075b4 <_vfiprintf_r+0x13c>
 8007588:	9a07      	ldr	r2, [sp, #28]
 800758a:	4654      	mov	r4, sl
 800758c:	2000      	movs	r0, #0
 800758e:	f04f 0c0a 	mov.w	ip, #10
 8007592:	4621      	mov	r1, r4
 8007594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007598:	3b30      	subs	r3, #48	; 0x30
 800759a:	2b09      	cmp	r3, #9
 800759c:	d94e      	bls.n	800763c <_vfiprintf_r+0x1c4>
 800759e:	b1b0      	cbz	r0, 80075ce <_vfiprintf_r+0x156>
 80075a0:	9207      	str	r2, [sp, #28]
 80075a2:	e014      	b.n	80075ce <_vfiprintf_r+0x156>
 80075a4:	eba0 0308 	sub.w	r3, r0, r8
 80075a8:	fa09 f303 	lsl.w	r3, r9, r3
 80075ac:	4313      	orrs	r3, r2
 80075ae:	9304      	str	r3, [sp, #16]
 80075b0:	46a2      	mov	sl, r4
 80075b2:	e7d2      	b.n	800755a <_vfiprintf_r+0xe2>
 80075b4:	9b03      	ldr	r3, [sp, #12]
 80075b6:	1d19      	adds	r1, r3, #4
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	9103      	str	r1, [sp, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bfbb      	ittet	lt
 80075c0:	425b      	neglt	r3, r3
 80075c2:	f042 0202 	orrlt.w	r2, r2, #2
 80075c6:	9307      	strge	r3, [sp, #28]
 80075c8:	9307      	strlt	r3, [sp, #28]
 80075ca:	bfb8      	it	lt
 80075cc:	9204      	strlt	r2, [sp, #16]
 80075ce:	7823      	ldrb	r3, [r4, #0]
 80075d0:	2b2e      	cmp	r3, #46	; 0x2e
 80075d2:	d10c      	bne.n	80075ee <_vfiprintf_r+0x176>
 80075d4:	7863      	ldrb	r3, [r4, #1]
 80075d6:	2b2a      	cmp	r3, #42	; 0x2a
 80075d8:	d135      	bne.n	8007646 <_vfiprintf_r+0x1ce>
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	1d1a      	adds	r2, r3, #4
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	9203      	str	r2, [sp, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bfb8      	it	lt
 80075e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80075ea:	3402      	adds	r4, #2
 80075ec:	9305      	str	r3, [sp, #20]
 80075ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80076d4 <_vfiprintf_r+0x25c>
 80075f2:	7821      	ldrb	r1, [r4, #0]
 80075f4:	2203      	movs	r2, #3
 80075f6:	4650      	mov	r0, sl
 80075f8:	f7f8 fe02 	bl	8000200 <memchr>
 80075fc:	b140      	cbz	r0, 8007610 <_vfiprintf_r+0x198>
 80075fe:	2340      	movs	r3, #64	; 0x40
 8007600:	eba0 000a 	sub.w	r0, r0, sl
 8007604:	fa03 f000 	lsl.w	r0, r3, r0
 8007608:	9b04      	ldr	r3, [sp, #16]
 800760a:	4303      	orrs	r3, r0
 800760c:	3401      	adds	r4, #1
 800760e:	9304      	str	r3, [sp, #16]
 8007610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007614:	482c      	ldr	r0, [pc, #176]	; (80076c8 <_vfiprintf_r+0x250>)
 8007616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800761a:	2206      	movs	r2, #6
 800761c:	f7f8 fdf0 	bl	8000200 <memchr>
 8007620:	2800      	cmp	r0, #0
 8007622:	d03f      	beq.n	80076a4 <_vfiprintf_r+0x22c>
 8007624:	4b29      	ldr	r3, [pc, #164]	; (80076cc <_vfiprintf_r+0x254>)
 8007626:	bb1b      	cbnz	r3, 8007670 <_vfiprintf_r+0x1f8>
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	3307      	adds	r3, #7
 800762c:	f023 0307 	bic.w	r3, r3, #7
 8007630:	3308      	adds	r3, #8
 8007632:	9303      	str	r3, [sp, #12]
 8007634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007636:	443b      	add	r3, r7
 8007638:	9309      	str	r3, [sp, #36]	; 0x24
 800763a:	e767      	b.n	800750c <_vfiprintf_r+0x94>
 800763c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007640:	460c      	mov	r4, r1
 8007642:	2001      	movs	r0, #1
 8007644:	e7a5      	b.n	8007592 <_vfiprintf_r+0x11a>
 8007646:	2300      	movs	r3, #0
 8007648:	3401      	adds	r4, #1
 800764a:	9305      	str	r3, [sp, #20]
 800764c:	4619      	mov	r1, r3
 800764e:	f04f 0c0a 	mov.w	ip, #10
 8007652:	4620      	mov	r0, r4
 8007654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007658:	3a30      	subs	r2, #48	; 0x30
 800765a:	2a09      	cmp	r2, #9
 800765c:	d903      	bls.n	8007666 <_vfiprintf_r+0x1ee>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0c5      	beq.n	80075ee <_vfiprintf_r+0x176>
 8007662:	9105      	str	r1, [sp, #20]
 8007664:	e7c3      	b.n	80075ee <_vfiprintf_r+0x176>
 8007666:	fb0c 2101 	mla	r1, ip, r1, r2
 800766a:	4604      	mov	r4, r0
 800766c:	2301      	movs	r3, #1
 800766e:	e7f0      	b.n	8007652 <_vfiprintf_r+0x1da>
 8007670:	ab03      	add	r3, sp, #12
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	462a      	mov	r2, r5
 8007676:	4b16      	ldr	r3, [pc, #88]	; (80076d0 <_vfiprintf_r+0x258>)
 8007678:	a904      	add	r1, sp, #16
 800767a:	4630      	mov	r0, r6
 800767c:	f3af 8000 	nop.w
 8007680:	4607      	mov	r7, r0
 8007682:	1c78      	adds	r0, r7, #1
 8007684:	d1d6      	bne.n	8007634 <_vfiprintf_r+0x1bc>
 8007686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007688:	07d9      	lsls	r1, r3, #31
 800768a:	d405      	bmi.n	8007698 <_vfiprintf_r+0x220>
 800768c:	89ab      	ldrh	r3, [r5, #12]
 800768e:	059a      	lsls	r2, r3, #22
 8007690:	d402      	bmi.n	8007698 <_vfiprintf_r+0x220>
 8007692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007694:	f000 fc45 	bl	8007f22 <__retarget_lock_release_recursive>
 8007698:	89ab      	ldrh	r3, [r5, #12]
 800769a:	065b      	lsls	r3, r3, #25
 800769c:	f53f af12 	bmi.w	80074c4 <_vfiprintf_r+0x4c>
 80076a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076a2:	e711      	b.n	80074c8 <_vfiprintf_r+0x50>
 80076a4:	ab03      	add	r3, sp, #12
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	462a      	mov	r2, r5
 80076aa:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <_vfiprintf_r+0x258>)
 80076ac:	a904      	add	r1, sp, #16
 80076ae:	4630      	mov	r0, r6
 80076b0:	f000 f880 	bl	80077b4 <_printf_i>
 80076b4:	e7e4      	b.n	8007680 <_vfiprintf_r+0x208>
 80076b6:	bf00      	nop
 80076b8:	080095a4 	.word	0x080095a4
 80076bc:	080095c4 	.word	0x080095c4
 80076c0:	08009584 	.word	0x08009584
 80076c4:	08009551 	.word	0x08009551
 80076c8:	0800955b 	.word	0x0800955b
 80076cc:	00000000 	.word	0x00000000
 80076d0:	08007453 	.word	0x08007453
 80076d4:	08009557 	.word	0x08009557

080076d8 <_printf_common>:
 80076d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	4616      	mov	r6, r2
 80076de:	4699      	mov	r9, r3
 80076e0:	688a      	ldr	r2, [r1, #8]
 80076e2:	690b      	ldr	r3, [r1, #16]
 80076e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	bfb8      	it	lt
 80076ec:	4613      	movlt	r3, r2
 80076ee:	6033      	str	r3, [r6, #0]
 80076f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076f4:	4607      	mov	r7, r0
 80076f6:	460c      	mov	r4, r1
 80076f8:	b10a      	cbz	r2, 80076fe <_printf_common+0x26>
 80076fa:	3301      	adds	r3, #1
 80076fc:	6033      	str	r3, [r6, #0]
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	0699      	lsls	r1, r3, #26
 8007702:	bf42      	ittt	mi
 8007704:	6833      	ldrmi	r3, [r6, #0]
 8007706:	3302      	addmi	r3, #2
 8007708:	6033      	strmi	r3, [r6, #0]
 800770a:	6825      	ldr	r5, [r4, #0]
 800770c:	f015 0506 	ands.w	r5, r5, #6
 8007710:	d106      	bne.n	8007720 <_printf_common+0x48>
 8007712:	f104 0a19 	add.w	sl, r4, #25
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	6832      	ldr	r2, [r6, #0]
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	42ab      	cmp	r3, r5
 800771e:	dc26      	bgt.n	800776e <_printf_common+0x96>
 8007720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007724:	1e13      	subs	r3, r2, #0
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	bf18      	it	ne
 800772a:	2301      	movne	r3, #1
 800772c:	0692      	lsls	r2, r2, #26
 800772e:	d42b      	bmi.n	8007788 <_printf_common+0xb0>
 8007730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007734:	4649      	mov	r1, r9
 8007736:	4638      	mov	r0, r7
 8007738:	47c0      	blx	r8
 800773a:	3001      	adds	r0, #1
 800773c:	d01e      	beq.n	800777c <_printf_common+0xa4>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	68e5      	ldr	r5, [r4, #12]
 8007742:	6832      	ldr	r2, [r6, #0]
 8007744:	f003 0306 	and.w	r3, r3, #6
 8007748:	2b04      	cmp	r3, #4
 800774a:	bf08      	it	eq
 800774c:	1aad      	subeq	r5, r5, r2
 800774e:	68a3      	ldr	r3, [r4, #8]
 8007750:	6922      	ldr	r2, [r4, #16]
 8007752:	bf0c      	ite	eq
 8007754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007758:	2500      	movne	r5, #0
 800775a:	4293      	cmp	r3, r2
 800775c:	bfc4      	itt	gt
 800775e:	1a9b      	subgt	r3, r3, r2
 8007760:	18ed      	addgt	r5, r5, r3
 8007762:	2600      	movs	r6, #0
 8007764:	341a      	adds	r4, #26
 8007766:	42b5      	cmp	r5, r6
 8007768:	d11a      	bne.n	80077a0 <_printf_common+0xc8>
 800776a:	2000      	movs	r0, #0
 800776c:	e008      	b.n	8007780 <_printf_common+0xa8>
 800776e:	2301      	movs	r3, #1
 8007770:	4652      	mov	r2, sl
 8007772:	4649      	mov	r1, r9
 8007774:	4638      	mov	r0, r7
 8007776:	47c0      	blx	r8
 8007778:	3001      	adds	r0, #1
 800777a:	d103      	bne.n	8007784 <_printf_common+0xac>
 800777c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007784:	3501      	adds	r5, #1
 8007786:	e7c6      	b.n	8007716 <_printf_common+0x3e>
 8007788:	18e1      	adds	r1, r4, r3
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	2030      	movs	r0, #48	; 0x30
 800778e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007792:	4422      	add	r2, r4
 8007794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800779c:	3302      	adds	r3, #2
 800779e:	e7c7      	b.n	8007730 <_printf_common+0x58>
 80077a0:	2301      	movs	r3, #1
 80077a2:	4622      	mov	r2, r4
 80077a4:	4649      	mov	r1, r9
 80077a6:	4638      	mov	r0, r7
 80077a8:	47c0      	blx	r8
 80077aa:	3001      	adds	r0, #1
 80077ac:	d0e6      	beq.n	800777c <_printf_common+0xa4>
 80077ae:	3601      	adds	r6, #1
 80077b0:	e7d9      	b.n	8007766 <_printf_common+0x8e>
	...

080077b4 <_printf_i>:
 80077b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077b8:	7e0f      	ldrb	r7, [r1, #24]
 80077ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077bc:	2f78      	cmp	r7, #120	; 0x78
 80077be:	4691      	mov	r9, r2
 80077c0:	4680      	mov	r8, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	469a      	mov	sl, r3
 80077c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077ca:	d807      	bhi.n	80077dc <_printf_i+0x28>
 80077cc:	2f62      	cmp	r7, #98	; 0x62
 80077ce:	d80a      	bhi.n	80077e6 <_printf_i+0x32>
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	f000 80d8 	beq.w	8007986 <_printf_i+0x1d2>
 80077d6:	2f58      	cmp	r7, #88	; 0x58
 80077d8:	f000 80a3 	beq.w	8007922 <_printf_i+0x16e>
 80077dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077e4:	e03a      	b.n	800785c <_printf_i+0xa8>
 80077e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077ea:	2b15      	cmp	r3, #21
 80077ec:	d8f6      	bhi.n	80077dc <_printf_i+0x28>
 80077ee:	a101      	add	r1, pc, #4	; (adr r1, 80077f4 <_printf_i+0x40>)
 80077f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077f4:	0800784d 	.word	0x0800784d
 80077f8:	08007861 	.word	0x08007861
 80077fc:	080077dd 	.word	0x080077dd
 8007800:	080077dd 	.word	0x080077dd
 8007804:	080077dd 	.word	0x080077dd
 8007808:	080077dd 	.word	0x080077dd
 800780c:	08007861 	.word	0x08007861
 8007810:	080077dd 	.word	0x080077dd
 8007814:	080077dd 	.word	0x080077dd
 8007818:	080077dd 	.word	0x080077dd
 800781c:	080077dd 	.word	0x080077dd
 8007820:	0800796d 	.word	0x0800796d
 8007824:	08007891 	.word	0x08007891
 8007828:	0800794f 	.word	0x0800794f
 800782c:	080077dd 	.word	0x080077dd
 8007830:	080077dd 	.word	0x080077dd
 8007834:	0800798f 	.word	0x0800798f
 8007838:	080077dd 	.word	0x080077dd
 800783c:	08007891 	.word	0x08007891
 8007840:	080077dd 	.word	0x080077dd
 8007844:	080077dd 	.word	0x080077dd
 8007848:	08007957 	.word	0x08007957
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	602a      	str	r2, [r5, #0]
 8007854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800785c:	2301      	movs	r3, #1
 800785e:	e0a3      	b.n	80079a8 <_printf_i+0x1f4>
 8007860:	6820      	ldr	r0, [r4, #0]
 8007862:	6829      	ldr	r1, [r5, #0]
 8007864:	0606      	lsls	r6, r0, #24
 8007866:	f101 0304 	add.w	r3, r1, #4
 800786a:	d50a      	bpl.n	8007882 <_printf_i+0xce>
 800786c:	680e      	ldr	r6, [r1, #0]
 800786e:	602b      	str	r3, [r5, #0]
 8007870:	2e00      	cmp	r6, #0
 8007872:	da03      	bge.n	800787c <_printf_i+0xc8>
 8007874:	232d      	movs	r3, #45	; 0x2d
 8007876:	4276      	negs	r6, r6
 8007878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800787c:	485e      	ldr	r0, [pc, #376]	; (80079f8 <_printf_i+0x244>)
 800787e:	230a      	movs	r3, #10
 8007880:	e019      	b.n	80078b6 <_printf_i+0x102>
 8007882:	680e      	ldr	r6, [r1, #0]
 8007884:	602b      	str	r3, [r5, #0]
 8007886:	f010 0f40 	tst.w	r0, #64	; 0x40
 800788a:	bf18      	it	ne
 800788c:	b236      	sxthne	r6, r6
 800788e:	e7ef      	b.n	8007870 <_printf_i+0xbc>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	6820      	ldr	r0, [r4, #0]
 8007894:	1d19      	adds	r1, r3, #4
 8007896:	6029      	str	r1, [r5, #0]
 8007898:	0601      	lsls	r1, r0, #24
 800789a:	d501      	bpl.n	80078a0 <_printf_i+0xec>
 800789c:	681e      	ldr	r6, [r3, #0]
 800789e:	e002      	b.n	80078a6 <_printf_i+0xf2>
 80078a0:	0646      	lsls	r6, r0, #25
 80078a2:	d5fb      	bpl.n	800789c <_printf_i+0xe8>
 80078a4:	881e      	ldrh	r6, [r3, #0]
 80078a6:	4854      	ldr	r0, [pc, #336]	; (80079f8 <_printf_i+0x244>)
 80078a8:	2f6f      	cmp	r7, #111	; 0x6f
 80078aa:	bf0c      	ite	eq
 80078ac:	2308      	moveq	r3, #8
 80078ae:	230a      	movne	r3, #10
 80078b0:	2100      	movs	r1, #0
 80078b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078b6:	6865      	ldr	r5, [r4, #4]
 80078b8:	60a5      	str	r5, [r4, #8]
 80078ba:	2d00      	cmp	r5, #0
 80078bc:	bfa2      	ittt	ge
 80078be:	6821      	ldrge	r1, [r4, #0]
 80078c0:	f021 0104 	bicge.w	r1, r1, #4
 80078c4:	6021      	strge	r1, [r4, #0]
 80078c6:	b90e      	cbnz	r6, 80078cc <_printf_i+0x118>
 80078c8:	2d00      	cmp	r5, #0
 80078ca:	d04d      	beq.n	8007968 <_printf_i+0x1b4>
 80078cc:	4615      	mov	r5, r2
 80078ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80078d2:	fb03 6711 	mls	r7, r3, r1, r6
 80078d6:	5dc7      	ldrb	r7, [r0, r7]
 80078d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078dc:	4637      	mov	r7, r6
 80078de:	42bb      	cmp	r3, r7
 80078e0:	460e      	mov	r6, r1
 80078e2:	d9f4      	bls.n	80078ce <_printf_i+0x11a>
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d10b      	bne.n	8007900 <_printf_i+0x14c>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	07de      	lsls	r6, r3, #31
 80078ec:	d508      	bpl.n	8007900 <_printf_i+0x14c>
 80078ee:	6923      	ldr	r3, [r4, #16]
 80078f0:	6861      	ldr	r1, [r4, #4]
 80078f2:	4299      	cmp	r1, r3
 80078f4:	bfde      	ittt	le
 80078f6:	2330      	movle	r3, #48	; 0x30
 80078f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007900:	1b52      	subs	r2, r2, r5
 8007902:	6122      	str	r2, [r4, #16]
 8007904:	f8cd a000 	str.w	sl, [sp]
 8007908:	464b      	mov	r3, r9
 800790a:	aa03      	add	r2, sp, #12
 800790c:	4621      	mov	r1, r4
 800790e:	4640      	mov	r0, r8
 8007910:	f7ff fee2 	bl	80076d8 <_printf_common>
 8007914:	3001      	adds	r0, #1
 8007916:	d14c      	bne.n	80079b2 <_printf_i+0x1fe>
 8007918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800791c:	b004      	add	sp, #16
 800791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007922:	4835      	ldr	r0, [pc, #212]	; (80079f8 <_printf_i+0x244>)
 8007924:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007928:	6829      	ldr	r1, [r5, #0]
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007930:	6029      	str	r1, [r5, #0]
 8007932:	061d      	lsls	r5, r3, #24
 8007934:	d514      	bpl.n	8007960 <_printf_i+0x1ac>
 8007936:	07df      	lsls	r7, r3, #31
 8007938:	bf44      	itt	mi
 800793a:	f043 0320 	orrmi.w	r3, r3, #32
 800793e:	6023      	strmi	r3, [r4, #0]
 8007940:	b91e      	cbnz	r6, 800794a <_printf_i+0x196>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	f023 0320 	bic.w	r3, r3, #32
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	2310      	movs	r3, #16
 800794c:	e7b0      	b.n	80078b0 <_printf_i+0xfc>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	f043 0320 	orr.w	r3, r3, #32
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	2378      	movs	r3, #120	; 0x78
 8007958:	4828      	ldr	r0, [pc, #160]	; (80079fc <_printf_i+0x248>)
 800795a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800795e:	e7e3      	b.n	8007928 <_printf_i+0x174>
 8007960:	0659      	lsls	r1, r3, #25
 8007962:	bf48      	it	mi
 8007964:	b2b6      	uxthmi	r6, r6
 8007966:	e7e6      	b.n	8007936 <_printf_i+0x182>
 8007968:	4615      	mov	r5, r2
 800796a:	e7bb      	b.n	80078e4 <_printf_i+0x130>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	6826      	ldr	r6, [r4, #0]
 8007970:	6961      	ldr	r1, [r4, #20]
 8007972:	1d18      	adds	r0, r3, #4
 8007974:	6028      	str	r0, [r5, #0]
 8007976:	0635      	lsls	r5, r6, #24
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	d501      	bpl.n	8007980 <_printf_i+0x1cc>
 800797c:	6019      	str	r1, [r3, #0]
 800797e:	e002      	b.n	8007986 <_printf_i+0x1d2>
 8007980:	0670      	lsls	r0, r6, #25
 8007982:	d5fb      	bpl.n	800797c <_printf_i+0x1c8>
 8007984:	8019      	strh	r1, [r3, #0]
 8007986:	2300      	movs	r3, #0
 8007988:	6123      	str	r3, [r4, #16]
 800798a:	4615      	mov	r5, r2
 800798c:	e7ba      	b.n	8007904 <_printf_i+0x150>
 800798e:	682b      	ldr	r3, [r5, #0]
 8007990:	1d1a      	adds	r2, r3, #4
 8007992:	602a      	str	r2, [r5, #0]
 8007994:	681d      	ldr	r5, [r3, #0]
 8007996:	6862      	ldr	r2, [r4, #4]
 8007998:	2100      	movs	r1, #0
 800799a:	4628      	mov	r0, r5
 800799c:	f7f8 fc30 	bl	8000200 <memchr>
 80079a0:	b108      	cbz	r0, 80079a6 <_printf_i+0x1f2>
 80079a2:	1b40      	subs	r0, r0, r5
 80079a4:	6060      	str	r0, [r4, #4]
 80079a6:	6863      	ldr	r3, [r4, #4]
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	2300      	movs	r3, #0
 80079ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079b0:	e7a8      	b.n	8007904 <_printf_i+0x150>
 80079b2:	6923      	ldr	r3, [r4, #16]
 80079b4:	462a      	mov	r2, r5
 80079b6:	4649      	mov	r1, r9
 80079b8:	4640      	mov	r0, r8
 80079ba:	47d0      	blx	sl
 80079bc:	3001      	adds	r0, #1
 80079be:	d0ab      	beq.n	8007918 <_printf_i+0x164>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	079b      	lsls	r3, r3, #30
 80079c4:	d413      	bmi.n	80079ee <_printf_i+0x23a>
 80079c6:	68e0      	ldr	r0, [r4, #12]
 80079c8:	9b03      	ldr	r3, [sp, #12]
 80079ca:	4298      	cmp	r0, r3
 80079cc:	bfb8      	it	lt
 80079ce:	4618      	movlt	r0, r3
 80079d0:	e7a4      	b.n	800791c <_printf_i+0x168>
 80079d2:	2301      	movs	r3, #1
 80079d4:	4632      	mov	r2, r6
 80079d6:	4649      	mov	r1, r9
 80079d8:	4640      	mov	r0, r8
 80079da:	47d0      	blx	sl
 80079dc:	3001      	adds	r0, #1
 80079de:	d09b      	beq.n	8007918 <_printf_i+0x164>
 80079e0:	3501      	adds	r5, #1
 80079e2:	68e3      	ldr	r3, [r4, #12]
 80079e4:	9903      	ldr	r1, [sp, #12]
 80079e6:	1a5b      	subs	r3, r3, r1
 80079e8:	42ab      	cmp	r3, r5
 80079ea:	dcf2      	bgt.n	80079d2 <_printf_i+0x21e>
 80079ec:	e7eb      	b.n	80079c6 <_printf_i+0x212>
 80079ee:	2500      	movs	r5, #0
 80079f0:	f104 0619 	add.w	r6, r4, #25
 80079f4:	e7f5      	b.n	80079e2 <_printf_i+0x22e>
 80079f6:	bf00      	nop
 80079f8:	08009562 	.word	0x08009562
 80079fc:	08009573 	.word	0x08009573

08007a00 <_sbrk_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d06      	ldr	r5, [pc, #24]	; (8007a1c <_sbrk_r+0x1c>)
 8007a04:	2300      	movs	r3, #0
 8007a06:	4604      	mov	r4, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	602b      	str	r3, [r5, #0]
 8007a0c:	f7fb fdae 	bl	800356c <_sbrk>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d102      	bne.n	8007a1a <_sbrk_r+0x1a>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	b103      	cbz	r3, 8007a1a <_sbrk_r+0x1a>
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	2000066c 	.word	0x2000066c

08007a20 <__swbuf_r>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	460e      	mov	r6, r1
 8007a24:	4614      	mov	r4, r2
 8007a26:	4605      	mov	r5, r0
 8007a28:	b118      	cbz	r0, 8007a32 <__swbuf_r+0x12>
 8007a2a:	6983      	ldr	r3, [r0, #24]
 8007a2c:	b90b      	cbnz	r3, 8007a32 <__swbuf_r+0x12>
 8007a2e:	f000 f9d9 	bl	8007de4 <__sinit>
 8007a32:	4b21      	ldr	r3, [pc, #132]	; (8007ab8 <__swbuf_r+0x98>)
 8007a34:	429c      	cmp	r4, r3
 8007a36:	d12b      	bne.n	8007a90 <__swbuf_r+0x70>
 8007a38:	686c      	ldr	r4, [r5, #4]
 8007a3a:	69a3      	ldr	r3, [r4, #24]
 8007a3c:	60a3      	str	r3, [r4, #8]
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	071a      	lsls	r2, r3, #28
 8007a42:	d52f      	bpl.n	8007aa4 <__swbuf_r+0x84>
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	b36b      	cbz	r3, 8007aa4 <__swbuf_r+0x84>
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	6820      	ldr	r0, [r4, #0]
 8007a4c:	1ac0      	subs	r0, r0, r3
 8007a4e:	6963      	ldr	r3, [r4, #20]
 8007a50:	b2f6      	uxtb	r6, r6
 8007a52:	4283      	cmp	r3, r0
 8007a54:	4637      	mov	r7, r6
 8007a56:	dc04      	bgt.n	8007a62 <__swbuf_r+0x42>
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 f92e 	bl	8007cbc <_fflush_r>
 8007a60:	bb30      	cbnz	r0, 8007ab0 <__swbuf_r+0x90>
 8007a62:	68a3      	ldr	r3, [r4, #8]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	60a3      	str	r3, [r4, #8]
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	6022      	str	r2, [r4, #0]
 8007a6e:	701e      	strb	r6, [r3, #0]
 8007a70:	6963      	ldr	r3, [r4, #20]
 8007a72:	3001      	adds	r0, #1
 8007a74:	4283      	cmp	r3, r0
 8007a76:	d004      	beq.n	8007a82 <__swbuf_r+0x62>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	07db      	lsls	r3, r3, #31
 8007a7c:	d506      	bpl.n	8007a8c <__swbuf_r+0x6c>
 8007a7e:	2e0a      	cmp	r6, #10
 8007a80:	d104      	bne.n	8007a8c <__swbuf_r+0x6c>
 8007a82:	4621      	mov	r1, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	f000 f919 	bl	8007cbc <_fflush_r>
 8007a8a:	b988      	cbnz	r0, 8007ab0 <__swbuf_r+0x90>
 8007a8c:	4638      	mov	r0, r7
 8007a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <__swbuf_r+0x9c>)
 8007a92:	429c      	cmp	r4, r3
 8007a94:	d101      	bne.n	8007a9a <__swbuf_r+0x7a>
 8007a96:	68ac      	ldr	r4, [r5, #8]
 8007a98:	e7cf      	b.n	8007a3a <__swbuf_r+0x1a>
 8007a9a:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <__swbuf_r+0xa0>)
 8007a9c:	429c      	cmp	r4, r3
 8007a9e:	bf08      	it	eq
 8007aa0:	68ec      	ldreq	r4, [r5, #12]
 8007aa2:	e7ca      	b.n	8007a3a <__swbuf_r+0x1a>
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 f80c 	bl	8007ac4 <__swsetup_r>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d0cb      	beq.n	8007a48 <__swbuf_r+0x28>
 8007ab0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007ab4:	e7ea      	b.n	8007a8c <__swbuf_r+0x6c>
 8007ab6:	bf00      	nop
 8007ab8:	080095a4 	.word	0x080095a4
 8007abc:	080095c4 	.word	0x080095c4
 8007ac0:	08009584 	.word	0x08009584

08007ac4 <__swsetup_r>:
 8007ac4:	4b32      	ldr	r3, [pc, #200]	; (8007b90 <__swsetup_r+0xcc>)
 8007ac6:	b570      	push	{r4, r5, r6, lr}
 8007ac8:	681d      	ldr	r5, [r3, #0]
 8007aca:	4606      	mov	r6, r0
 8007acc:	460c      	mov	r4, r1
 8007ace:	b125      	cbz	r5, 8007ada <__swsetup_r+0x16>
 8007ad0:	69ab      	ldr	r3, [r5, #24]
 8007ad2:	b913      	cbnz	r3, 8007ada <__swsetup_r+0x16>
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 f985 	bl	8007de4 <__sinit>
 8007ada:	4b2e      	ldr	r3, [pc, #184]	; (8007b94 <__swsetup_r+0xd0>)
 8007adc:	429c      	cmp	r4, r3
 8007ade:	d10f      	bne.n	8007b00 <__swsetup_r+0x3c>
 8007ae0:	686c      	ldr	r4, [r5, #4]
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ae8:	0719      	lsls	r1, r3, #28
 8007aea:	d42c      	bmi.n	8007b46 <__swsetup_r+0x82>
 8007aec:	06dd      	lsls	r5, r3, #27
 8007aee:	d411      	bmi.n	8007b14 <__swsetup_r+0x50>
 8007af0:	2309      	movs	r3, #9
 8007af2:	6033      	str	r3, [r6, #0]
 8007af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007afe:	e03e      	b.n	8007b7e <__swsetup_r+0xba>
 8007b00:	4b25      	ldr	r3, [pc, #148]	; (8007b98 <__swsetup_r+0xd4>)
 8007b02:	429c      	cmp	r4, r3
 8007b04:	d101      	bne.n	8007b0a <__swsetup_r+0x46>
 8007b06:	68ac      	ldr	r4, [r5, #8]
 8007b08:	e7eb      	b.n	8007ae2 <__swsetup_r+0x1e>
 8007b0a:	4b24      	ldr	r3, [pc, #144]	; (8007b9c <__swsetup_r+0xd8>)
 8007b0c:	429c      	cmp	r4, r3
 8007b0e:	bf08      	it	eq
 8007b10:	68ec      	ldreq	r4, [r5, #12]
 8007b12:	e7e6      	b.n	8007ae2 <__swsetup_r+0x1e>
 8007b14:	0758      	lsls	r0, r3, #29
 8007b16:	d512      	bpl.n	8007b3e <__swsetup_r+0x7a>
 8007b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b1a:	b141      	cbz	r1, 8007b2e <__swsetup_r+0x6a>
 8007b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b20:	4299      	cmp	r1, r3
 8007b22:	d002      	beq.n	8007b2a <__swsetup_r+0x66>
 8007b24:	4630      	mov	r0, r6
 8007b26:	f7ff fb9d 	bl	8007264 <_free_r>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b34:	81a3      	strh	r3, [r4, #12]
 8007b36:	2300      	movs	r3, #0
 8007b38:	6063      	str	r3, [r4, #4]
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	f043 0308 	orr.w	r3, r3, #8
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	b94b      	cbnz	r3, 8007b5e <__swsetup_r+0x9a>
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b54:	d003      	beq.n	8007b5e <__swsetup_r+0x9a>
 8007b56:	4621      	mov	r1, r4
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f000 fa09 	bl	8007f70 <__smakebuf_r>
 8007b5e:	89a0      	ldrh	r0, [r4, #12]
 8007b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b64:	f010 0301 	ands.w	r3, r0, #1
 8007b68:	d00a      	beq.n	8007b80 <__swsetup_r+0xbc>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60a3      	str	r3, [r4, #8]
 8007b6e:	6963      	ldr	r3, [r4, #20]
 8007b70:	425b      	negs	r3, r3
 8007b72:	61a3      	str	r3, [r4, #24]
 8007b74:	6923      	ldr	r3, [r4, #16]
 8007b76:	b943      	cbnz	r3, 8007b8a <__swsetup_r+0xc6>
 8007b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b7c:	d1ba      	bne.n	8007af4 <__swsetup_r+0x30>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	0781      	lsls	r1, r0, #30
 8007b82:	bf58      	it	pl
 8007b84:	6963      	ldrpl	r3, [r4, #20]
 8007b86:	60a3      	str	r3, [r4, #8]
 8007b88:	e7f4      	b.n	8007b74 <__swsetup_r+0xb0>
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	e7f7      	b.n	8007b7e <__swsetup_r+0xba>
 8007b8e:	bf00      	nop
 8007b90:	20000010 	.word	0x20000010
 8007b94:	080095a4 	.word	0x080095a4
 8007b98:	080095c4 	.word	0x080095c4
 8007b9c:	08009584 	.word	0x08009584

08007ba0 <abort>:
 8007ba0:	b508      	push	{r3, lr}
 8007ba2:	2006      	movs	r0, #6
 8007ba4:	f000 fa58 	bl	8008058 <raise>
 8007ba8:	2001      	movs	r0, #1
 8007baa:	f7fb fc67 	bl	800347c <_exit>
	...

08007bb0 <__sflush_r>:
 8007bb0:	898a      	ldrh	r2, [r1, #12]
 8007bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	0710      	lsls	r0, r2, #28
 8007bba:	460c      	mov	r4, r1
 8007bbc:	d458      	bmi.n	8007c70 <__sflush_r+0xc0>
 8007bbe:	684b      	ldr	r3, [r1, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dc05      	bgt.n	8007bd0 <__sflush_r+0x20>
 8007bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	dc02      	bgt.n	8007bd0 <__sflush_r+0x20>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bd2:	2e00      	cmp	r6, #0
 8007bd4:	d0f9      	beq.n	8007bca <__sflush_r+0x1a>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bdc:	682f      	ldr	r7, [r5, #0]
 8007bde:	602b      	str	r3, [r5, #0]
 8007be0:	d032      	beq.n	8007c48 <__sflush_r+0x98>
 8007be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	075a      	lsls	r2, r3, #29
 8007be8:	d505      	bpl.n	8007bf6 <__sflush_r+0x46>
 8007bea:	6863      	ldr	r3, [r4, #4]
 8007bec:	1ac0      	subs	r0, r0, r3
 8007bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bf0:	b10b      	cbz	r3, 8007bf6 <__sflush_r+0x46>
 8007bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bf4:	1ac0      	subs	r0, r0, r3
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bfc:	6a21      	ldr	r1, [r4, #32]
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b0      	blx	r6
 8007c02:	1c43      	adds	r3, r0, #1
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	d106      	bne.n	8007c16 <__sflush_r+0x66>
 8007c08:	6829      	ldr	r1, [r5, #0]
 8007c0a:	291d      	cmp	r1, #29
 8007c0c:	d82c      	bhi.n	8007c68 <__sflush_r+0xb8>
 8007c0e:	4a2a      	ldr	r2, [pc, #168]	; (8007cb8 <__sflush_r+0x108>)
 8007c10:	40ca      	lsrs	r2, r1
 8007c12:	07d6      	lsls	r6, r2, #31
 8007c14:	d528      	bpl.n	8007c68 <__sflush_r+0xb8>
 8007c16:	2200      	movs	r2, #0
 8007c18:	6062      	str	r2, [r4, #4]
 8007c1a:	04d9      	lsls	r1, r3, #19
 8007c1c:	6922      	ldr	r2, [r4, #16]
 8007c1e:	6022      	str	r2, [r4, #0]
 8007c20:	d504      	bpl.n	8007c2c <__sflush_r+0x7c>
 8007c22:	1c42      	adds	r2, r0, #1
 8007c24:	d101      	bne.n	8007c2a <__sflush_r+0x7a>
 8007c26:	682b      	ldr	r3, [r5, #0]
 8007c28:	b903      	cbnz	r3, 8007c2c <__sflush_r+0x7c>
 8007c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8007c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c2e:	602f      	str	r7, [r5, #0]
 8007c30:	2900      	cmp	r1, #0
 8007c32:	d0ca      	beq.n	8007bca <__sflush_r+0x1a>
 8007c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c38:	4299      	cmp	r1, r3
 8007c3a:	d002      	beq.n	8007c42 <__sflush_r+0x92>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f7ff fb11 	bl	8007264 <_free_r>
 8007c42:	2000      	movs	r0, #0
 8007c44:	6360      	str	r0, [r4, #52]	; 0x34
 8007c46:	e7c1      	b.n	8007bcc <__sflush_r+0x1c>
 8007c48:	6a21      	ldr	r1, [r4, #32]
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b0      	blx	r6
 8007c50:	1c41      	adds	r1, r0, #1
 8007c52:	d1c7      	bne.n	8007be4 <__sflush_r+0x34>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0c4      	beq.n	8007be4 <__sflush_r+0x34>
 8007c5a:	2b1d      	cmp	r3, #29
 8007c5c:	d001      	beq.n	8007c62 <__sflush_r+0xb2>
 8007c5e:	2b16      	cmp	r3, #22
 8007c60:	d101      	bne.n	8007c66 <__sflush_r+0xb6>
 8007c62:	602f      	str	r7, [r5, #0]
 8007c64:	e7b1      	b.n	8007bca <__sflush_r+0x1a>
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c6c:	81a3      	strh	r3, [r4, #12]
 8007c6e:	e7ad      	b.n	8007bcc <__sflush_r+0x1c>
 8007c70:	690f      	ldr	r7, [r1, #16]
 8007c72:	2f00      	cmp	r7, #0
 8007c74:	d0a9      	beq.n	8007bca <__sflush_r+0x1a>
 8007c76:	0793      	lsls	r3, r2, #30
 8007c78:	680e      	ldr	r6, [r1, #0]
 8007c7a:	bf08      	it	eq
 8007c7c:	694b      	ldreq	r3, [r1, #20]
 8007c7e:	600f      	str	r7, [r1, #0]
 8007c80:	bf18      	it	ne
 8007c82:	2300      	movne	r3, #0
 8007c84:	eba6 0807 	sub.w	r8, r6, r7
 8007c88:	608b      	str	r3, [r1, #8]
 8007c8a:	f1b8 0f00 	cmp.w	r8, #0
 8007c8e:	dd9c      	ble.n	8007bca <__sflush_r+0x1a>
 8007c90:	6a21      	ldr	r1, [r4, #32]
 8007c92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c94:	4643      	mov	r3, r8
 8007c96:	463a      	mov	r2, r7
 8007c98:	4628      	mov	r0, r5
 8007c9a:	47b0      	blx	r6
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	dc06      	bgt.n	8007cae <__sflush_r+0xfe>
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cac:	e78e      	b.n	8007bcc <__sflush_r+0x1c>
 8007cae:	4407      	add	r7, r0
 8007cb0:	eba8 0800 	sub.w	r8, r8, r0
 8007cb4:	e7e9      	b.n	8007c8a <__sflush_r+0xda>
 8007cb6:	bf00      	nop
 8007cb8:	20400001 	.word	0x20400001

08007cbc <_fflush_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	690b      	ldr	r3, [r1, #16]
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b913      	cbnz	r3, 8007ccc <_fflush_r+0x10>
 8007cc6:	2500      	movs	r5, #0
 8007cc8:	4628      	mov	r0, r5
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	b118      	cbz	r0, 8007cd6 <_fflush_r+0x1a>
 8007cce:	6983      	ldr	r3, [r0, #24]
 8007cd0:	b90b      	cbnz	r3, 8007cd6 <_fflush_r+0x1a>
 8007cd2:	f000 f887 	bl	8007de4 <__sinit>
 8007cd6:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <_fflush_r+0x6c>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	d11b      	bne.n	8007d14 <_fflush_r+0x58>
 8007cdc:	686c      	ldr	r4, [r5, #4]
 8007cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0ef      	beq.n	8007cc6 <_fflush_r+0xa>
 8007ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ce8:	07d0      	lsls	r0, r2, #31
 8007cea:	d404      	bmi.n	8007cf6 <_fflush_r+0x3a>
 8007cec:	0599      	lsls	r1, r3, #22
 8007cee:	d402      	bmi.n	8007cf6 <_fflush_r+0x3a>
 8007cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf2:	f000 f915 	bl	8007f20 <__retarget_lock_acquire_recursive>
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	f7ff ff59 	bl	8007bb0 <__sflush_r>
 8007cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d00:	07da      	lsls	r2, r3, #31
 8007d02:	4605      	mov	r5, r0
 8007d04:	d4e0      	bmi.n	8007cc8 <_fflush_r+0xc>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	059b      	lsls	r3, r3, #22
 8007d0a:	d4dd      	bmi.n	8007cc8 <_fflush_r+0xc>
 8007d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d0e:	f000 f908 	bl	8007f22 <__retarget_lock_release_recursive>
 8007d12:	e7d9      	b.n	8007cc8 <_fflush_r+0xc>
 8007d14:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <_fflush_r+0x70>)
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d101      	bne.n	8007d1e <_fflush_r+0x62>
 8007d1a:	68ac      	ldr	r4, [r5, #8]
 8007d1c:	e7df      	b.n	8007cde <_fflush_r+0x22>
 8007d1e:	4b04      	ldr	r3, [pc, #16]	; (8007d30 <_fflush_r+0x74>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	bf08      	it	eq
 8007d24:	68ec      	ldreq	r4, [r5, #12]
 8007d26:	e7da      	b.n	8007cde <_fflush_r+0x22>
 8007d28:	080095a4 	.word	0x080095a4
 8007d2c:	080095c4 	.word	0x080095c4
 8007d30:	08009584 	.word	0x08009584

08007d34 <std>:
 8007d34:	2300      	movs	r3, #0
 8007d36:	b510      	push	{r4, lr}
 8007d38:	4604      	mov	r4, r0
 8007d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d42:	6083      	str	r3, [r0, #8]
 8007d44:	8181      	strh	r1, [r0, #12]
 8007d46:	6643      	str	r3, [r0, #100]	; 0x64
 8007d48:	81c2      	strh	r2, [r0, #14]
 8007d4a:	6183      	str	r3, [r0, #24]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	2208      	movs	r2, #8
 8007d50:	305c      	adds	r0, #92	; 0x5c
 8007d52:	f7ff f8bd 	bl	8006ed0 <memset>
 8007d56:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <std+0x38>)
 8007d58:	6263      	str	r3, [r4, #36]	; 0x24
 8007d5a:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <std+0x3c>)
 8007d5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <std+0x40>)
 8007d60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d62:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <std+0x44>)
 8007d64:	6224      	str	r4, [r4, #32]
 8007d66:	6323      	str	r3, [r4, #48]	; 0x30
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	bf00      	nop
 8007d6c:	08008091 	.word	0x08008091
 8007d70:	080080b3 	.word	0x080080b3
 8007d74:	080080eb 	.word	0x080080eb
 8007d78:	0800810f 	.word	0x0800810f

08007d7c <_cleanup_r>:
 8007d7c:	4901      	ldr	r1, [pc, #4]	; (8007d84 <_cleanup_r+0x8>)
 8007d7e:	f000 b8af 	b.w	8007ee0 <_fwalk_reent>
 8007d82:	bf00      	nop
 8007d84:	08007cbd 	.word	0x08007cbd

08007d88 <__sfmoreglue>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	2268      	movs	r2, #104	; 0x68
 8007d8c:	1e4d      	subs	r5, r1, #1
 8007d8e:	4355      	muls	r5, r2
 8007d90:	460e      	mov	r6, r1
 8007d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d96:	f7ff fad1 	bl	800733c <_malloc_r>
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	b140      	cbz	r0, 8007db0 <__sfmoreglue+0x28>
 8007d9e:	2100      	movs	r1, #0
 8007da0:	e9c0 1600 	strd	r1, r6, [r0]
 8007da4:	300c      	adds	r0, #12
 8007da6:	60a0      	str	r0, [r4, #8]
 8007da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007dac:	f7ff f890 	bl	8006ed0 <memset>
 8007db0:	4620      	mov	r0, r4
 8007db2:	bd70      	pop	{r4, r5, r6, pc}

08007db4 <__sfp_lock_acquire>:
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__sfp_lock_acquire+0x8>)
 8007db6:	f000 b8b3 	b.w	8007f20 <__retarget_lock_acquire_recursive>
 8007dba:	bf00      	nop
 8007dbc:	20000669 	.word	0x20000669

08007dc0 <__sfp_lock_release>:
 8007dc0:	4801      	ldr	r0, [pc, #4]	; (8007dc8 <__sfp_lock_release+0x8>)
 8007dc2:	f000 b8ae 	b.w	8007f22 <__retarget_lock_release_recursive>
 8007dc6:	bf00      	nop
 8007dc8:	20000669 	.word	0x20000669

08007dcc <__sinit_lock_acquire>:
 8007dcc:	4801      	ldr	r0, [pc, #4]	; (8007dd4 <__sinit_lock_acquire+0x8>)
 8007dce:	f000 b8a7 	b.w	8007f20 <__retarget_lock_acquire_recursive>
 8007dd2:	bf00      	nop
 8007dd4:	2000066a 	.word	0x2000066a

08007dd8 <__sinit_lock_release>:
 8007dd8:	4801      	ldr	r0, [pc, #4]	; (8007de0 <__sinit_lock_release+0x8>)
 8007dda:	f000 b8a2 	b.w	8007f22 <__retarget_lock_release_recursive>
 8007dde:	bf00      	nop
 8007de0:	2000066a 	.word	0x2000066a

08007de4 <__sinit>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	4604      	mov	r4, r0
 8007de8:	f7ff fff0 	bl	8007dcc <__sinit_lock_acquire>
 8007dec:	69a3      	ldr	r3, [r4, #24]
 8007dee:	b11b      	cbz	r3, 8007df8 <__sinit+0x14>
 8007df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df4:	f7ff bff0 	b.w	8007dd8 <__sinit_lock_release>
 8007df8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007dfc:	6523      	str	r3, [r4, #80]	; 0x50
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <__sinit+0x68>)
 8007e00:	4a13      	ldr	r2, [pc, #76]	; (8007e50 <__sinit+0x6c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e06:	42a3      	cmp	r3, r4
 8007e08:	bf04      	itt	eq
 8007e0a:	2301      	moveq	r3, #1
 8007e0c:	61a3      	streq	r3, [r4, #24]
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 f820 	bl	8007e54 <__sfp>
 8007e14:	6060      	str	r0, [r4, #4]
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 f81c 	bl	8007e54 <__sfp>
 8007e1c:	60a0      	str	r0, [r4, #8]
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 f818 	bl	8007e54 <__sfp>
 8007e24:	2200      	movs	r2, #0
 8007e26:	60e0      	str	r0, [r4, #12]
 8007e28:	2104      	movs	r1, #4
 8007e2a:	6860      	ldr	r0, [r4, #4]
 8007e2c:	f7ff ff82 	bl	8007d34 <std>
 8007e30:	68a0      	ldr	r0, [r4, #8]
 8007e32:	2201      	movs	r2, #1
 8007e34:	2109      	movs	r1, #9
 8007e36:	f7ff ff7d 	bl	8007d34 <std>
 8007e3a:	68e0      	ldr	r0, [r4, #12]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	2112      	movs	r1, #18
 8007e40:	f7ff ff78 	bl	8007d34 <std>
 8007e44:	2301      	movs	r3, #1
 8007e46:	61a3      	str	r3, [r4, #24]
 8007e48:	e7d2      	b.n	8007df0 <__sinit+0xc>
 8007e4a:	bf00      	nop
 8007e4c:	0800939c 	.word	0x0800939c
 8007e50:	08007d7d 	.word	0x08007d7d

08007e54 <__sfp>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	4607      	mov	r7, r0
 8007e58:	f7ff ffac 	bl	8007db4 <__sfp_lock_acquire>
 8007e5c:	4b1e      	ldr	r3, [pc, #120]	; (8007ed8 <__sfp+0x84>)
 8007e5e:	681e      	ldr	r6, [r3, #0]
 8007e60:	69b3      	ldr	r3, [r6, #24]
 8007e62:	b913      	cbnz	r3, 8007e6a <__sfp+0x16>
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7ff ffbd 	bl	8007de4 <__sinit>
 8007e6a:	3648      	adds	r6, #72	; 0x48
 8007e6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	d503      	bpl.n	8007e7c <__sfp+0x28>
 8007e74:	6833      	ldr	r3, [r6, #0]
 8007e76:	b30b      	cbz	r3, 8007ebc <__sfp+0x68>
 8007e78:	6836      	ldr	r6, [r6, #0]
 8007e7a:	e7f7      	b.n	8007e6c <__sfp+0x18>
 8007e7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e80:	b9d5      	cbnz	r5, 8007eb8 <__sfp+0x64>
 8007e82:	4b16      	ldr	r3, [pc, #88]	; (8007edc <__sfp+0x88>)
 8007e84:	60e3      	str	r3, [r4, #12]
 8007e86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e8a:	6665      	str	r5, [r4, #100]	; 0x64
 8007e8c:	f000 f847 	bl	8007f1e <__retarget_lock_init_recursive>
 8007e90:	f7ff ff96 	bl	8007dc0 <__sfp_lock_release>
 8007e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e9c:	6025      	str	r5, [r4, #0]
 8007e9e:	61a5      	str	r5, [r4, #24]
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ea8:	f7ff f812 	bl	8006ed0 <memset>
 8007eac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007eb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb8:	3468      	adds	r4, #104	; 0x68
 8007eba:	e7d9      	b.n	8007e70 <__sfp+0x1c>
 8007ebc:	2104      	movs	r1, #4
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	f7ff ff62 	bl	8007d88 <__sfmoreglue>
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	6030      	str	r0, [r6, #0]
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d1d5      	bne.n	8007e78 <__sfp+0x24>
 8007ecc:	f7ff ff78 	bl	8007dc0 <__sfp_lock_release>
 8007ed0:	230c      	movs	r3, #12
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	e7ee      	b.n	8007eb4 <__sfp+0x60>
 8007ed6:	bf00      	nop
 8007ed8:	0800939c 	.word	0x0800939c
 8007edc:	ffff0001 	.word	0xffff0001

08007ee0 <_fwalk_reent>:
 8007ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	4688      	mov	r8, r1
 8007ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007eec:	2700      	movs	r7, #0
 8007eee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ef2:	f1b9 0901 	subs.w	r9, r9, #1
 8007ef6:	d505      	bpl.n	8007f04 <_fwalk_reent+0x24>
 8007ef8:	6824      	ldr	r4, [r4, #0]
 8007efa:	2c00      	cmp	r4, #0
 8007efc:	d1f7      	bne.n	8007eee <_fwalk_reent+0xe>
 8007efe:	4638      	mov	r0, r7
 8007f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f04:	89ab      	ldrh	r3, [r5, #12]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d907      	bls.n	8007f1a <_fwalk_reent+0x3a>
 8007f0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	d003      	beq.n	8007f1a <_fwalk_reent+0x3a>
 8007f12:	4629      	mov	r1, r5
 8007f14:	4630      	mov	r0, r6
 8007f16:	47c0      	blx	r8
 8007f18:	4307      	orrs	r7, r0
 8007f1a:	3568      	adds	r5, #104	; 0x68
 8007f1c:	e7e9      	b.n	8007ef2 <_fwalk_reent+0x12>

08007f1e <__retarget_lock_init_recursive>:
 8007f1e:	4770      	bx	lr

08007f20 <__retarget_lock_acquire_recursive>:
 8007f20:	4770      	bx	lr

08007f22 <__retarget_lock_release_recursive>:
 8007f22:	4770      	bx	lr

08007f24 <__swhatbuf_r>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	460e      	mov	r6, r1
 8007f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	b096      	sub	sp, #88	; 0x58
 8007f30:	4614      	mov	r4, r2
 8007f32:	461d      	mov	r5, r3
 8007f34:	da08      	bge.n	8007f48 <__swhatbuf_r+0x24>
 8007f36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	602a      	str	r2, [r5, #0]
 8007f3e:	061a      	lsls	r2, r3, #24
 8007f40:	d410      	bmi.n	8007f64 <__swhatbuf_r+0x40>
 8007f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f46:	e00e      	b.n	8007f66 <__swhatbuf_r+0x42>
 8007f48:	466a      	mov	r2, sp
 8007f4a:	f000 f907 	bl	800815c <_fstat_r>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	dbf1      	blt.n	8007f36 <__swhatbuf_r+0x12>
 8007f52:	9a01      	ldr	r2, [sp, #4]
 8007f54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f5c:	425a      	negs	r2, r3
 8007f5e:	415a      	adcs	r2, r3
 8007f60:	602a      	str	r2, [r5, #0]
 8007f62:	e7ee      	b.n	8007f42 <__swhatbuf_r+0x1e>
 8007f64:	2340      	movs	r3, #64	; 0x40
 8007f66:	2000      	movs	r0, #0
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	b016      	add	sp, #88	; 0x58
 8007f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f70 <__smakebuf_r>:
 8007f70:	898b      	ldrh	r3, [r1, #12]
 8007f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f74:	079d      	lsls	r5, r3, #30
 8007f76:	4606      	mov	r6, r0
 8007f78:	460c      	mov	r4, r1
 8007f7a:	d507      	bpl.n	8007f8c <__smakebuf_r+0x1c>
 8007f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	6123      	str	r3, [r4, #16]
 8007f84:	2301      	movs	r3, #1
 8007f86:	6163      	str	r3, [r4, #20]
 8007f88:	b002      	add	sp, #8
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	ab01      	add	r3, sp, #4
 8007f8e:	466a      	mov	r2, sp
 8007f90:	f7ff ffc8 	bl	8007f24 <__swhatbuf_r>
 8007f94:	9900      	ldr	r1, [sp, #0]
 8007f96:	4605      	mov	r5, r0
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7ff f9cf 	bl	800733c <_malloc_r>
 8007f9e:	b948      	cbnz	r0, 8007fb4 <__smakebuf_r+0x44>
 8007fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa4:	059a      	lsls	r2, r3, #22
 8007fa6:	d4ef      	bmi.n	8007f88 <__smakebuf_r+0x18>
 8007fa8:	f023 0303 	bic.w	r3, r3, #3
 8007fac:	f043 0302 	orr.w	r3, r3, #2
 8007fb0:	81a3      	strh	r3, [r4, #12]
 8007fb2:	e7e3      	b.n	8007f7c <__smakebuf_r+0xc>
 8007fb4:	4b0d      	ldr	r3, [pc, #52]	; (8007fec <__smakebuf_r+0x7c>)
 8007fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	6020      	str	r0, [r4, #0]
 8007fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	9b00      	ldr	r3, [sp, #0]
 8007fc4:	6163      	str	r3, [r4, #20]
 8007fc6:	9b01      	ldr	r3, [sp, #4]
 8007fc8:	6120      	str	r0, [r4, #16]
 8007fca:	b15b      	cbz	r3, 8007fe4 <__smakebuf_r+0x74>
 8007fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f000 f8d5 	bl	8008180 <_isatty_r>
 8007fd6:	b128      	cbz	r0, 8007fe4 <__smakebuf_r+0x74>
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	f023 0303 	bic.w	r3, r3, #3
 8007fde:	f043 0301 	orr.w	r3, r3, #1
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	89a0      	ldrh	r0, [r4, #12]
 8007fe6:	4305      	orrs	r5, r0
 8007fe8:	81a5      	strh	r5, [r4, #12]
 8007fea:	e7cd      	b.n	8007f88 <__smakebuf_r+0x18>
 8007fec:	08007d7d 	.word	0x08007d7d

08007ff0 <__malloc_lock>:
 8007ff0:	4801      	ldr	r0, [pc, #4]	; (8007ff8 <__malloc_lock+0x8>)
 8007ff2:	f7ff bf95 	b.w	8007f20 <__retarget_lock_acquire_recursive>
 8007ff6:	bf00      	nop
 8007ff8:	20000668 	.word	0x20000668

08007ffc <__malloc_unlock>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	; (8008004 <__malloc_unlock+0x8>)
 8007ffe:	f7ff bf90 	b.w	8007f22 <__retarget_lock_release_recursive>
 8008002:	bf00      	nop
 8008004:	20000668 	.word	0x20000668

08008008 <_raise_r>:
 8008008:	291f      	cmp	r1, #31
 800800a:	b538      	push	{r3, r4, r5, lr}
 800800c:	4604      	mov	r4, r0
 800800e:	460d      	mov	r5, r1
 8008010:	d904      	bls.n	800801c <_raise_r+0x14>
 8008012:	2316      	movs	r3, #22
 8008014:	6003      	str	r3, [r0, #0]
 8008016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800801e:	b112      	cbz	r2, 8008026 <_raise_r+0x1e>
 8008020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008024:	b94b      	cbnz	r3, 800803a <_raise_r+0x32>
 8008026:	4620      	mov	r0, r4
 8008028:	f000 f830 	bl	800808c <_getpid_r>
 800802c:	462a      	mov	r2, r5
 800802e:	4601      	mov	r1, r0
 8008030:	4620      	mov	r0, r4
 8008032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008036:	f000 b817 	b.w	8008068 <_kill_r>
 800803a:	2b01      	cmp	r3, #1
 800803c:	d00a      	beq.n	8008054 <_raise_r+0x4c>
 800803e:	1c59      	adds	r1, r3, #1
 8008040:	d103      	bne.n	800804a <_raise_r+0x42>
 8008042:	2316      	movs	r3, #22
 8008044:	6003      	str	r3, [r0, #0]
 8008046:	2001      	movs	r0, #1
 8008048:	e7e7      	b.n	800801a <_raise_r+0x12>
 800804a:	2400      	movs	r4, #0
 800804c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008050:	4628      	mov	r0, r5
 8008052:	4798      	blx	r3
 8008054:	2000      	movs	r0, #0
 8008056:	e7e0      	b.n	800801a <_raise_r+0x12>

08008058 <raise>:
 8008058:	4b02      	ldr	r3, [pc, #8]	; (8008064 <raise+0xc>)
 800805a:	4601      	mov	r1, r0
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	f7ff bfd3 	b.w	8008008 <_raise_r>
 8008062:	bf00      	nop
 8008064:	20000010 	.word	0x20000010

08008068 <_kill_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4d07      	ldr	r5, [pc, #28]	; (8008088 <_kill_r+0x20>)
 800806c:	2300      	movs	r3, #0
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	4611      	mov	r1, r2
 8008074:	602b      	str	r3, [r5, #0]
 8008076:	f7fb f9f1 	bl	800345c <_kill>
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	d102      	bne.n	8008084 <_kill_r+0x1c>
 800807e:	682b      	ldr	r3, [r5, #0]
 8008080:	b103      	cbz	r3, 8008084 <_kill_r+0x1c>
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	bd38      	pop	{r3, r4, r5, pc}
 8008086:	bf00      	nop
 8008088:	2000066c 	.word	0x2000066c

0800808c <_getpid_r>:
 800808c:	f7fb b9de 	b.w	800344c <_getpid>

08008090 <__sread>:
 8008090:	b510      	push	{r4, lr}
 8008092:	460c      	mov	r4, r1
 8008094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008098:	f000 f894 	bl	80081c4 <_read_r>
 800809c:	2800      	cmp	r0, #0
 800809e:	bfab      	itete	ge
 80080a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080a2:	89a3      	ldrhlt	r3, [r4, #12]
 80080a4:	181b      	addge	r3, r3, r0
 80080a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080aa:	bfac      	ite	ge
 80080ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80080ae:	81a3      	strhlt	r3, [r4, #12]
 80080b0:	bd10      	pop	{r4, pc}

080080b2 <__swrite>:
 80080b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b6:	461f      	mov	r7, r3
 80080b8:	898b      	ldrh	r3, [r1, #12]
 80080ba:	05db      	lsls	r3, r3, #23
 80080bc:	4605      	mov	r5, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	4616      	mov	r6, r2
 80080c2:	d505      	bpl.n	80080d0 <__swrite+0x1e>
 80080c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c8:	2302      	movs	r3, #2
 80080ca:	2200      	movs	r2, #0
 80080cc:	f000 f868 	bl	80081a0 <_lseek_r>
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	4632      	mov	r2, r6
 80080de:	463b      	mov	r3, r7
 80080e0:	4628      	mov	r0, r5
 80080e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080e6:	f000 b817 	b.w	8008118 <_write_r>

080080ea <__sseek>:
 80080ea:	b510      	push	{r4, lr}
 80080ec:	460c      	mov	r4, r1
 80080ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f2:	f000 f855 	bl	80081a0 <_lseek_r>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	bf15      	itete	ne
 80080fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80080fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008106:	81a3      	strheq	r3, [r4, #12]
 8008108:	bf18      	it	ne
 800810a:	81a3      	strhne	r3, [r4, #12]
 800810c:	bd10      	pop	{r4, pc}

0800810e <__sclose>:
 800810e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008112:	f000 b813 	b.w	800813c <_close_r>
	...

08008118 <_write_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d07      	ldr	r5, [pc, #28]	; (8008138 <_write_r+0x20>)
 800811c:	4604      	mov	r4, r0
 800811e:	4608      	mov	r0, r1
 8008120:	4611      	mov	r1, r2
 8008122:	2200      	movs	r2, #0
 8008124:	602a      	str	r2, [r5, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f7fb f9cf 	bl	80034ca <_write>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d102      	bne.n	8008136 <_write_r+0x1e>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	b103      	cbz	r3, 8008136 <_write_r+0x1e>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	2000066c 	.word	0x2000066c

0800813c <_close_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4d06      	ldr	r5, [pc, #24]	; (8008158 <_close_r+0x1c>)
 8008140:	2300      	movs	r3, #0
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	f7fb f9db 	bl	8003502 <_close>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_close_r+0x1a>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_close_r+0x1a>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	2000066c 	.word	0x2000066c

0800815c <_fstat_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	; (800817c <_fstat_r+0x20>)
 8008160:	2300      	movs	r3, #0
 8008162:	4604      	mov	r4, r0
 8008164:	4608      	mov	r0, r1
 8008166:	4611      	mov	r1, r2
 8008168:	602b      	str	r3, [r5, #0]
 800816a:	f7fb f9d6 	bl	800351a <_fstat>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	d102      	bne.n	8008178 <_fstat_r+0x1c>
 8008172:	682b      	ldr	r3, [r5, #0]
 8008174:	b103      	cbz	r3, 8008178 <_fstat_r+0x1c>
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	bf00      	nop
 800817c:	2000066c 	.word	0x2000066c

08008180 <_isatty_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4d06      	ldr	r5, [pc, #24]	; (800819c <_isatty_r+0x1c>)
 8008184:	2300      	movs	r3, #0
 8008186:	4604      	mov	r4, r0
 8008188:	4608      	mov	r0, r1
 800818a:	602b      	str	r3, [r5, #0]
 800818c:	f7fb f9d5 	bl	800353a <_isatty>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d102      	bne.n	800819a <_isatty_r+0x1a>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	b103      	cbz	r3, 800819a <_isatty_r+0x1a>
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	2000066c 	.word	0x2000066c

080081a0 <_lseek_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d07      	ldr	r5, [pc, #28]	; (80081c0 <_lseek_r+0x20>)
 80081a4:	4604      	mov	r4, r0
 80081a6:	4608      	mov	r0, r1
 80081a8:	4611      	mov	r1, r2
 80081aa:	2200      	movs	r2, #0
 80081ac:	602a      	str	r2, [r5, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	f7fb f9ce 	bl	8003550 <_lseek>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_lseek_r+0x1e>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	b103      	cbz	r3, 80081be <_lseek_r+0x1e>
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	2000066c 	.word	0x2000066c

080081c4 <_read_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4d07      	ldr	r5, [pc, #28]	; (80081e4 <_read_r+0x20>)
 80081c8:	4604      	mov	r4, r0
 80081ca:	4608      	mov	r0, r1
 80081cc:	4611      	mov	r1, r2
 80081ce:	2200      	movs	r2, #0
 80081d0:	602a      	str	r2, [r5, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	f7fb f95c 	bl	8003490 <_read>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d102      	bne.n	80081e2 <_read_r+0x1e>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	b103      	cbz	r3, 80081e2 <_read_r+0x1e>
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	2000066c 	.word	0x2000066c

080081e8 <cos>:
 80081e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081ea:	ec53 2b10 	vmov	r2, r3, d0
 80081ee:	4826      	ldr	r0, [pc, #152]	; (8008288 <cos+0xa0>)
 80081f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081f4:	4281      	cmp	r1, r0
 80081f6:	dc06      	bgt.n	8008206 <cos+0x1e>
 80081f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008280 <cos+0x98>
 80081fc:	b005      	add	sp, #20
 80081fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8008202:	f000 baa9 	b.w	8008758 <__kernel_cos>
 8008206:	4821      	ldr	r0, [pc, #132]	; (800828c <cos+0xa4>)
 8008208:	4281      	cmp	r1, r0
 800820a:	dd09      	ble.n	8008220 <cos+0x38>
 800820c:	ee10 0a10 	vmov	r0, s0
 8008210:	4619      	mov	r1, r3
 8008212:	f7f8 f849 	bl	80002a8 <__aeabi_dsub>
 8008216:	ec41 0b10 	vmov	d0, r0, r1
 800821a:	b005      	add	sp, #20
 800821c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008220:	4668      	mov	r0, sp
 8008222:	f000 f88d 	bl	8008340 <__ieee754_rem_pio2>
 8008226:	f000 0003 	and.w	r0, r0, #3
 800822a:	2801      	cmp	r0, #1
 800822c:	d00b      	beq.n	8008246 <cos+0x5e>
 800822e:	2802      	cmp	r0, #2
 8008230:	d016      	beq.n	8008260 <cos+0x78>
 8008232:	b9e0      	cbnz	r0, 800826e <cos+0x86>
 8008234:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008238:	ed9d 0b00 	vldr	d0, [sp]
 800823c:	f000 fa8c 	bl	8008758 <__kernel_cos>
 8008240:	ec51 0b10 	vmov	r0, r1, d0
 8008244:	e7e7      	b.n	8008216 <cos+0x2e>
 8008246:	ed9d 1b02 	vldr	d1, [sp, #8]
 800824a:	ed9d 0b00 	vldr	d0, [sp]
 800824e:	f000 fe9b 	bl	8008f88 <__kernel_sin>
 8008252:	ec53 2b10 	vmov	r2, r3, d0
 8008256:	ee10 0a10 	vmov	r0, s0
 800825a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800825e:	e7da      	b.n	8008216 <cos+0x2e>
 8008260:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008264:	ed9d 0b00 	vldr	d0, [sp]
 8008268:	f000 fa76 	bl	8008758 <__kernel_cos>
 800826c:	e7f1      	b.n	8008252 <cos+0x6a>
 800826e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008272:	ed9d 0b00 	vldr	d0, [sp]
 8008276:	2001      	movs	r0, #1
 8008278:	f000 fe86 	bl	8008f88 <__kernel_sin>
 800827c:	e7e0      	b.n	8008240 <cos+0x58>
 800827e:	bf00      	nop
	...
 8008288:	3fe921fb 	.word	0x3fe921fb
 800828c:	7fefffff 	.word	0x7fefffff

08008290 <sin>:
 8008290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008292:	ec53 2b10 	vmov	r2, r3, d0
 8008296:	4828      	ldr	r0, [pc, #160]	; (8008338 <sin+0xa8>)
 8008298:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800829c:	4281      	cmp	r1, r0
 800829e:	dc07      	bgt.n	80082b0 <sin+0x20>
 80082a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008330 <sin+0xa0>
 80082a4:	2000      	movs	r0, #0
 80082a6:	b005      	add	sp, #20
 80082a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082ac:	f000 be6c 	b.w	8008f88 <__kernel_sin>
 80082b0:	4822      	ldr	r0, [pc, #136]	; (800833c <sin+0xac>)
 80082b2:	4281      	cmp	r1, r0
 80082b4:	dd09      	ble.n	80082ca <sin+0x3a>
 80082b6:	ee10 0a10 	vmov	r0, s0
 80082ba:	4619      	mov	r1, r3
 80082bc:	f7f7 fff4 	bl	80002a8 <__aeabi_dsub>
 80082c0:	ec41 0b10 	vmov	d0, r0, r1
 80082c4:	b005      	add	sp, #20
 80082c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80082ca:	4668      	mov	r0, sp
 80082cc:	f000 f838 	bl	8008340 <__ieee754_rem_pio2>
 80082d0:	f000 0003 	and.w	r0, r0, #3
 80082d4:	2801      	cmp	r0, #1
 80082d6:	d00c      	beq.n	80082f2 <sin+0x62>
 80082d8:	2802      	cmp	r0, #2
 80082da:	d011      	beq.n	8008300 <sin+0x70>
 80082dc:	b9f0      	cbnz	r0, 800831c <sin+0x8c>
 80082de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082e2:	ed9d 0b00 	vldr	d0, [sp]
 80082e6:	2001      	movs	r0, #1
 80082e8:	f000 fe4e 	bl	8008f88 <__kernel_sin>
 80082ec:	ec51 0b10 	vmov	r0, r1, d0
 80082f0:	e7e6      	b.n	80082c0 <sin+0x30>
 80082f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082f6:	ed9d 0b00 	vldr	d0, [sp]
 80082fa:	f000 fa2d 	bl	8008758 <__kernel_cos>
 80082fe:	e7f5      	b.n	80082ec <sin+0x5c>
 8008300:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008304:	ed9d 0b00 	vldr	d0, [sp]
 8008308:	2001      	movs	r0, #1
 800830a:	f000 fe3d 	bl	8008f88 <__kernel_sin>
 800830e:	ec53 2b10 	vmov	r2, r3, d0
 8008312:	ee10 0a10 	vmov	r0, s0
 8008316:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800831a:	e7d1      	b.n	80082c0 <sin+0x30>
 800831c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008320:	ed9d 0b00 	vldr	d0, [sp]
 8008324:	f000 fa18 	bl	8008758 <__kernel_cos>
 8008328:	e7f1      	b.n	800830e <sin+0x7e>
 800832a:	bf00      	nop
 800832c:	f3af 8000 	nop.w
	...
 8008338:	3fe921fb 	.word	0x3fe921fb
 800833c:	7fefffff 	.word	0x7fefffff

08008340 <__ieee754_rem_pio2>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	ed2d 8b02 	vpush	{d8}
 8008348:	ec55 4b10 	vmov	r4, r5, d0
 800834c:	4bca      	ldr	r3, [pc, #808]	; (8008678 <__ieee754_rem_pio2+0x338>)
 800834e:	b08b      	sub	sp, #44	; 0x2c
 8008350:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008354:	4598      	cmp	r8, r3
 8008356:	4682      	mov	sl, r0
 8008358:	9502      	str	r5, [sp, #8]
 800835a:	dc08      	bgt.n	800836e <__ieee754_rem_pio2+0x2e>
 800835c:	2200      	movs	r2, #0
 800835e:	2300      	movs	r3, #0
 8008360:	ed80 0b00 	vstr	d0, [r0]
 8008364:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008368:	f04f 0b00 	mov.w	fp, #0
 800836c:	e028      	b.n	80083c0 <__ieee754_rem_pio2+0x80>
 800836e:	4bc3      	ldr	r3, [pc, #780]	; (800867c <__ieee754_rem_pio2+0x33c>)
 8008370:	4598      	cmp	r8, r3
 8008372:	dc78      	bgt.n	8008466 <__ieee754_rem_pio2+0x126>
 8008374:	9b02      	ldr	r3, [sp, #8]
 8008376:	4ec2      	ldr	r6, [pc, #776]	; (8008680 <__ieee754_rem_pio2+0x340>)
 8008378:	2b00      	cmp	r3, #0
 800837a:	ee10 0a10 	vmov	r0, s0
 800837e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008640 <__ieee754_rem_pio2+0x300>)
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	4629      	mov	r1, r5
 8008386:	dd39      	ble.n	80083fc <__ieee754_rem_pio2+0xbc>
 8008388:	f7f7 ff8e 	bl	80002a8 <__aeabi_dsub>
 800838c:	45b0      	cmp	r8, r6
 800838e:	4604      	mov	r4, r0
 8008390:	460d      	mov	r5, r1
 8008392:	d01b      	beq.n	80083cc <__ieee754_rem_pio2+0x8c>
 8008394:	a3ac      	add	r3, pc, #688	; (adr r3, 8008648 <__ieee754_rem_pio2+0x308>)
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	f7f7 ff85 	bl	80002a8 <__aeabi_dsub>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	e9ca 2300 	strd	r2, r3, [sl]
 80083a6:	4620      	mov	r0, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	f7f7 ff7d 	bl	80002a8 <__aeabi_dsub>
 80083ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8008648 <__ieee754_rem_pio2+0x308>)
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f7f7 ff78 	bl	80002a8 <__aeabi_dsub>
 80083b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80083bc:	f04f 0b01 	mov.w	fp, #1
 80083c0:	4658      	mov	r0, fp
 80083c2:	b00b      	add	sp, #44	; 0x2c
 80083c4:	ecbd 8b02 	vpop	{d8}
 80083c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8008650 <__ieee754_rem_pio2+0x310>)
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	f7f7 ff69 	bl	80002a8 <__aeabi_dsub>
 80083d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008658 <__ieee754_rem_pio2+0x318>)
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	4604      	mov	r4, r0
 80083de:	460d      	mov	r5, r1
 80083e0:	f7f7 ff62 	bl	80002a8 <__aeabi_dsub>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	e9ca 2300 	strd	r2, r3, [sl]
 80083ec:	4620      	mov	r0, r4
 80083ee:	4629      	mov	r1, r5
 80083f0:	f7f7 ff5a 	bl	80002a8 <__aeabi_dsub>
 80083f4:	a398      	add	r3, pc, #608	; (adr r3, 8008658 <__ieee754_rem_pio2+0x318>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	e7db      	b.n	80083b4 <__ieee754_rem_pio2+0x74>
 80083fc:	f7f7 ff56 	bl	80002ac <__adddf3>
 8008400:	45b0      	cmp	r8, r6
 8008402:	4604      	mov	r4, r0
 8008404:	460d      	mov	r5, r1
 8008406:	d016      	beq.n	8008436 <__ieee754_rem_pio2+0xf6>
 8008408:	a38f      	add	r3, pc, #572	; (adr r3, 8008648 <__ieee754_rem_pio2+0x308>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f7 ff4d 	bl	80002ac <__adddf3>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	e9ca 2300 	strd	r2, r3, [sl]
 800841a:	4620      	mov	r0, r4
 800841c:	4629      	mov	r1, r5
 800841e:	f7f7 ff43 	bl	80002a8 <__aeabi_dsub>
 8008422:	a389      	add	r3, pc, #548	; (adr r3, 8008648 <__ieee754_rem_pio2+0x308>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f7f7 ff40 	bl	80002ac <__adddf3>
 800842c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008430:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008434:	e7c4      	b.n	80083c0 <__ieee754_rem_pio2+0x80>
 8008436:	a386      	add	r3, pc, #536	; (adr r3, 8008650 <__ieee754_rem_pio2+0x310>)
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	f7f7 ff36 	bl	80002ac <__adddf3>
 8008440:	a385      	add	r3, pc, #532	; (adr r3, 8008658 <__ieee754_rem_pio2+0x318>)
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	4604      	mov	r4, r0
 8008448:	460d      	mov	r5, r1
 800844a:	f7f7 ff2f 	bl	80002ac <__adddf3>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	e9ca 2300 	strd	r2, r3, [sl]
 8008456:	4620      	mov	r0, r4
 8008458:	4629      	mov	r1, r5
 800845a:	f7f7 ff25 	bl	80002a8 <__aeabi_dsub>
 800845e:	a37e      	add	r3, pc, #504	; (adr r3, 8008658 <__ieee754_rem_pio2+0x318>)
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	e7e0      	b.n	8008428 <__ieee754_rem_pio2+0xe8>
 8008466:	4b87      	ldr	r3, [pc, #540]	; (8008684 <__ieee754_rem_pio2+0x344>)
 8008468:	4598      	cmp	r8, r3
 800846a:	f300 80d9 	bgt.w	8008620 <__ieee754_rem_pio2+0x2e0>
 800846e:	f000 fe49 	bl	8009104 <fabs>
 8008472:	ec55 4b10 	vmov	r4, r5, d0
 8008476:	ee10 0a10 	vmov	r0, s0
 800847a:	a379      	add	r3, pc, #484	; (adr r3, 8008660 <__ieee754_rem_pio2+0x320>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	4629      	mov	r1, r5
 8008482:	f7f8 f8c9 	bl	8000618 <__aeabi_dmul>
 8008486:	4b80      	ldr	r3, [pc, #512]	; (8008688 <__ieee754_rem_pio2+0x348>)
 8008488:	2200      	movs	r2, #0
 800848a:	f7f7 ff0f 	bl	80002ac <__adddf3>
 800848e:	f7f8 fb5d 	bl	8000b4c <__aeabi_d2iz>
 8008492:	4683      	mov	fp, r0
 8008494:	f7f8 f856 	bl	8000544 <__aeabi_i2d>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	ec43 2b18 	vmov	d8, r2, r3
 80084a0:	a367      	add	r3, pc, #412	; (adr r3, 8008640 <__ieee754_rem_pio2+0x300>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f7f8 f8b7 	bl	8000618 <__aeabi_dmul>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4620      	mov	r0, r4
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7f7 fef9 	bl	80002a8 <__aeabi_dsub>
 80084b6:	a364      	add	r3, pc, #400	; (adr r3, 8008648 <__ieee754_rem_pio2+0x308>)
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	4606      	mov	r6, r0
 80084be:	460f      	mov	r7, r1
 80084c0:	ec51 0b18 	vmov	r0, r1, d8
 80084c4:	f7f8 f8a8 	bl	8000618 <__aeabi_dmul>
 80084c8:	f1bb 0f1f 	cmp.w	fp, #31
 80084cc:	4604      	mov	r4, r0
 80084ce:	460d      	mov	r5, r1
 80084d0:	dc0d      	bgt.n	80084ee <__ieee754_rem_pio2+0x1ae>
 80084d2:	4b6e      	ldr	r3, [pc, #440]	; (800868c <__ieee754_rem_pio2+0x34c>)
 80084d4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80084d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084dc:	4543      	cmp	r3, r8
 80084de:	d006      	beq.n	80084ee <__ieee754_rem_pio2+0x1ae>
 80084e0:	4622      	mov	r2, r4
 80084e2:	462b      	mov	r3, r5
 80084e4:	4630      	mov	r0, r6
 80084e6:	4639      	mov	r1, r7
 80084e8:	f7f7 fede 	bl	80002a8 <__aeabi_dsub>
 80084ec:	e00f      	b.n	800850e <__ieee754_rem_pio2+0x1ce>
 80084ee:	462b      	mov	r3, r5
 80084f0:	4622      	mov	r2, r4
 80084f2:	4630      	mov	r0, r6
 80084f4:	4639      	mov	r1, r7
 80084f6:	f7f7 fed7 	bl	80002a8 <__aeabi_dsub>
 80084fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80084fe:	9303      	str	r3, [sp, #12]
 8008500:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008504:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008508:	f1b8 0f10 	cmp.w	r8, #16
 800850c:	dc02      	bgt.n	8008514 <__ieee754_rem_pio2+0x1d4>
 800850e:	e9ca 0100 	strd	r0, r1, [sl]
 8008512:	e039      	b.n	8008588 <__ieee754_rem_pio2+0x248>
 8008514:	a34e      	add	r3, pc, #312	; (adr r3, 8008650 <__ieee754_rem_pio2+0x310>)
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	ec51 0b18 	vmov	r0, r1, d8
 800851e:	f7f8 f87b 	bl	8000618 <__aeabi_dmul>
 8008522:	4604      	mov	r4, r0
 8008524:	460d      	mov	r5, r1
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	4630      	mov	r0, r6
 800852c:	4639      	mov	r1, r7
 800852e:	f7f7 febb 	bl	80002a8 <__aeabi_dsub>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	4680      	mov	r8, r0
 8008538:	4689      	mov	r9, r1
 800853a:	4630      	mov	r0, r6
 800853c:	4639      	mov	r1, r7
 800853e:	f7f7 feb3 	bl	80002a8 <__aeabi_dsub>
 8008542:	4622      	mov	r2, r4
 8008544:	462b      	mov	r3, r5
 8008546:	f7f7 feaf 	bl	80002a8 <__aeabi_dsub>
 800854a:	a343      	add	r3, pc, #268	; (adr r3, 8008658 <__ieee754_rem_pio2+0x318>)
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	4604      	mov	r4, r0
 8008552:	460d      	mov	r5, r1
 8008554:	ec51 0b18 	vmov	r0, r1, d8
 8008558:	f7f8 f85e 	bl	8000618 <__aeabi_dmul>
 800855c:	4622      	mov	r2, r4
 800855e:	462b      	mov	r3, r5
 8008560:	f7f7 fea2 	bl	80002a8 <__aeabi_dsub>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4604      	mov	r4, r0
 800856a:	460d      	mov	r5, r1
 800856c:	4640      	mov	r0, r8
 800856e:	4649      	mov	r1, r9
 8008570:	f7f7 fe9a 	bl	80002a8 <__aeabi_dsub>
 8008574:	9a03      	ldr	r2, [sp, #12]
 8008576:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b31      	cmp	r3, #49	; 0x31
 800857e:	dc24      	bgt.n	80085ca <__ieee754_rem_pio2+0x28a>
 8008580:	e9ca 0100 	strd	r0, r1, [sl]
 8008584:	4646      	mov	r6, r8
 8008586:	464f      	mov	r7, r9
 8008588:	e9da 8900 	ldrd	r8, r9, [sl]
 800858c:	4630      	mov	r0, r6
 800858e:	4642      	mov	r2, r8
 8008590:	464b      	mov	r3, r9
 8008592:	4639      	mov	r1, r7
 8008594:	f7f7 fe88 	bl	80002a8 <__aeabi_dsub>
 8008598:	462b      	mov	r3, r5
 800859a:	4622      	mov	r2, r4
 800859c:	f7f7 fe84 	bl	80002a8 <__aeabi_dsub>
 80085a0:	9b02      	ldr	r3, [sp, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80085a8:	f6bf af0a 	bge.w	80083c0 <__ieee754_rem_pio2+0x80>
 80085ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80085b0:	f8ca 3004 	str.w	r3, [sl, #4]
 80085b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085b8:	f8ca 8000 	str.w	r8, [sl]
 80085bc:	f8ca 0008 	str.w	r0, [sl, #8]
 80085c0:	f8ca 300c 	str.w	r3, [sl, #12]
 80085c4:	f1cb 0b00 	rsb	fp, fp, #0
 80085c8:	e6fa      	b.n	80083c0 <__ieee754_rem_pio2+0x80>
 80085ca:	a327      	add	r3, pc, #156	; (adr r3, 8008668 <__ieee754_rem_pio2+0x328>)
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	ec51 0b18 	vmov	r0, r1, d8
 80085d4:	f7f8 f820 	bl	8000618 <__aeabi_dmul>
 80085d8:	4604      	mov	r4, r0
 80085da:	460d      	mov	r5, r1
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4640      	mov	r0, r8
 80085e2:	4649      	mov	r1, r9
 80085e4:	f7f7 fe60 	bl	80002a8 <__aeabi_dsub>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4606      	mov	r6, r0
 80085ee:	460f      	mov	r7, r1
 80085f0:	4640      	mov	r0, r8
 80085f2:	4649      	mov	r1, r9
 80085f4:	f7f7 fe58 	bl	80002a8 <__aeabi_dsub>
 80085f8:	4622      	mov	r2, r4
 80085fa:	462b      	mov	r3, r5
 80085fc:	f7f7 fe54 	bl	80002a8 <__aeabi_dsub>
 8008600:	a31b      	add	r3, pc, #108	; (adr r3, 8008670 <__ieee754_rem_pio2+0x330>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	4604      	mov	r4, r0
 8008608:	460d      	mov	r5, r1
 800860a:	ec51 0b18 	vmov	r0, r1, d8
 800860e:	f7f8 f803 	bl	8000618 <__aeabi_dmul>
 8008612:	4622      	mov	r2, r4
 8008614:	462b      	mov	r3, r5
 8008616:	f7f7 fe47 	bl	80002a8 <__aeabi_dsub>
 800861a:	4604      	mov	r4, r0
 800861c:	460d      	mov	r5, r1
 800861e:	e75f      	b.n	80084e0 <__ieee754_rem_pio2+0x1a0>
 8008620:	4b1b      	ldr	r3, [pc, #108]	; (8008690 <__ieee754_rem_pio2+0x350>)
 8008622:	4598      	cmp	r8, r3
 8008624:	dd36      	ble.n	8008694 <__ieee754_rem_pio2+0x354>
 8008626:	ee10 2a10 	vmov	r2, s0
 800862a:	462b      	mov	r3, r5
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f7f7 fe3a 	bl	80002a8 <__aeabi_dsub>
 8008634:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008638:	e9ca 0100 	strd	r0, r1, [sl]
 800863c:	e694      	b.n	8008368 <__ieee754_rem_pio2+0x28>
 800863e:	bf00      	nop
 8008640:	54400000 	.word	0x54400000
 8008644:	3ff921fb 	.word	0x3ff921fb
 8008648:	1a626331 	.word	0x1a626331
 800864c:	3dd0b461 	.word	0x3dd0b461
 8008650:	1a600000 	.word	0x1a600000
 8008654:	3dd0b461 	.word	0x3dd0b461
 8008658:	2e037073 	.word	0x2e037073
 800865c:	3ba3198a 	.word	0x3ba3198a
 8008660:	6dc9c883 	.word	0x6dc9c883
 8008664:	3fe45f30 	.word	0x3fe45f30
 8008668:	2e000000 	.word	0x2e000000
 800866c:	3ba3198a 	.word	0x3ba3198a
 8008670:	252049c1 	.word	0x252049c1
 8008674:	397b839a 	.word	0x397b839a
 8008678:	3fe921fb 	.word	0x3fe921fb
 800867c:	4002d97b 	.word	0x4002d97b
 8008680:	3ff921fb 	.word	0x3ff921fb
 8008684:	413921fb 	.word	0x413921fb
 8008688:	3fe00000 	.word	0x3fe00000
 800868c:	080095e4 	.word	0x080095e4
 8008690:	7fefffff 	.word	0x7fefffff
 8008694:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008698:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800869c:	ee10 0a10 	vmov	r0, s0
 80086a0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80086a4:	ee10 6a10 	vmov	r6, s0
 80086a8:	460f      	mov	r7, r1
 80086aa:	f7f8 fa4f 	bl	8000b4c <__aeabi_d2iz>
 80086ae:	f7f7 ff49 	bl	8000544 <__aeabi_i2d>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4630      	mov	r0, r6
 80086b8:	4639      	mov	r1, r7
 80086ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086be:	f7f7 fdf3 	bl	80002a8 <__aeabi_dsub>
 80086c2:	4b23      	ldr	r3, [pc, #140]	; (8008750 <__ieee754_rem_pio2+0x410>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	f7f7 ffa7 	bl	8000618 <__aeabi_dmul>
 80086ca:	460f      	mov	r7, r1
 80086cc:	4606      	mov	r6, r0
 80086ce:	f7f8 fa3d 	bl	8000b4c <__aeabi_d2iz>
 80086d2:	f7f7 ff37 	bl	8000544 <__aeabi_i2d>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4630      	mov	r0, r6
 80086dc:	4639      	mov	r1, r7
 80086de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80086e2:	f7f7 fde1 	bl	80002a8 <__aeabi_dsub>
 80086e6:	4b1a      	ldr	r3, [pc, #104]	; (8008750 <__ieee754_rem_pio2+0x410>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	f7f7 ff95 	bl	8000618 <__aeabi_dmul>
 80086ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086f2:	ad04      	add	r5, sp, #16
 80086f4:	f04f 0803 	mov.w	r8, #3
 80086f8:	46a9      	mov	r9, r5
 80086fa:	2600      	movs	r6, #0
 80086fc:	2700      	movs	r7, #0
 80086fe:	4632      	mov	r2, r6
 8008700:	463b      	mov	r3, r7
 8008702:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008706:	46c3      	mov	fp, r8
 8008708:	3d08      	subs	r5, #8
 800870a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800870e:	f7f8 f9eb 	bl	8000ae8 <__aeabi_dcmpeq>
 8008712:	2800      	cmp	r0, #0
 8008714:	d1f3      	bne.n	80086fe <__ieee754_rem_pio2+0x3be>
 8008716:	4b0f      	ldr	r3, [pc, #60]	; (8008754 <__ieee754_rem_pio2+0x414>)
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	2302      	movs	r3, #2
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	4622      	mov	r2, r4
 8008720:	465b      	mov	r3, fp
 8008722:	4651      	mov	r1, sl
 8008724:	4648      	mov	r0, r9
 8008726:	f000 f8df 	bl	80088e8 <__kernel_rem_pio2>
 800872a:	9b02      	ldr	r3, [sp, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	4683      	mov	fp, r0
 8008730:	f6bf ae46 	bge.w	80083c0 <__ieee754_rem_pio2+0x80>
 8008734:	e9da 2100 	ldrd	r2, r1, [sl]
 8008738:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800873c:	e9ca 2300 	strd	r2, r3, [sl]
 8008740:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008744:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008748:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800874c:	e73a      	b.n	80085c4 <__ieee754_rem_pio2+0x284>
 800874e:	bf00      	nop
 8008750:	41700000 	.word	0x41700000
 8008754:	08009664 	.word	0x08009664

08008758 <__kernel_cos>:
 8008758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	ec57 6b10 	vmov	r6, r7, d0
 8008760:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008764:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008768:	ed8d 1b00 	vstr	d1, [sp]
 800876c:	da07      	bge.n	800877e <__kernel_cos+0x26>
 800876e:	ee10 0a10 	vmov	r0, s0
 8008772:	4639      	mov	r1, r7
 8008774:	f7f8 f9ea 	bl	8000b4c <__aeabi_d2iz>
 8008778:	2800      	cmp	r0, #0
 800877a:	f000 8088 	beq.w	800888e <__kernel_cos+0x136>
 800877e:	4632      	mov	r2, r6
 8008780:	463b      	mov	r3, r7
 8008782:	4630      	mov	r0, r6
 8008784:	4639      	mov	r1, r7
 8008786:	f7f7 ff47 	bl	8000618 <__aeabi_dmul>
 800878a:	4b51      	ldr	r3, [pc, #324]	; (80088d0 <__kernel_cos+0x178>)
 800878c:	2200      	movs	r2, #0
 800878e:	4604      	mov	r4, r0
 8008790:	460d      	mov	r5, r1
 8008792:	f7f7 ff41 	bl	8000618 <__aeabi_dmul>
 8008796:	a340      	add	r3, pc, #256	; (adr r3, 8008898 <__kernel_cos+0x140>)
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	4682      	mov	sl, r0
 800879e:	468b      	mov	fp, r1
 80087a0:	4620      	mov	r0, r4
 80087a2:	4629      	mov	r1, r5
 80087a4:	f7f7 ff38 	bl	8000618 <__aeabi_dmul>
 80087a8:	a33d      	add	r3, pc, #244	; (adr r3, 80088a0 <__kernel_cos+0x148>)
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	f7f7 fd7d 	bl	80002ac <__adddf3>
 80087b2:	4622      	mov	r2, r4
 80087b4:	462b      	mov	r3, r5
 80087b6:	f7f7 ff2f 	bl	8000618 <__aeabi_dmul>
 80087ba:	a33b      	add	r3, pc, #236	; (adr r3, 80088a8 <__kernel_cos+0x150>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	f7f7 fd72 	bl	80002a8 <__aeabi_dsub>
 80087c4:	4622      	mov	r2, r4
 80087c6:	462b      	mov	r3, r5
 80087c8:	f7f7 ff26 	bl	8000618 <__aeabi_dmul>
 80087cc:	a338      	add	r3, pc, #224	; (adr r3, 80088b0 <__kernel_cos+0x158>)
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	f7f7 fd6b 	bl	80002ac <__adddf3>
 80087d6:	4622      	mov	r2, r4
 80087d8:	462b      	mov	r3, r5
 80087da:	f7f7 ff1d 	bl	8000618 <__aeabi_dmul>
 80087de:	a336      	add	r3, pc, #216	; (adr r3, 80088b8 <__kernel_cos+0x160>)
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	f7f7 fd60 	bl	80002a8 <__aeabi_dsub>
 80087e8:	4622      	mov	r2, r4
 80087ea:	462b      	mov	r3, r5
 80087ec:	f7f7 ff14 	bl	8000618 <__aeabi_dmul>
 80087f0:	a333      	add	r3, pc, #204	; (adr r3, 80088c0 <__kernel_cos+0x168>)
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f7f7 fd59 	bl	80002ac <__adddf3>
 80087fa:	4622      	mov	r2, r4
 80087fc:	462b      	mov	r3, r5
 80087fe:	f7f7 ff0b 	bl	8000618 <__aeabi_dmul>
 8008802:	4622      	mov	r2, r4
 8008804:	462b      	mov	r3, r5
 8008806:	f7f7 ff07 	bl	8000618 <__aeabi_dmul>
 800880a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800880e:	4604      	mov	r4, r0
 8008810:	460d      	mov	r5, r1
 8008812:	4630      	mov	r0, r6
 8008814:	4639      	mov	r1, r7
 8008816:	f7f7 feff 	bl	8000618 <__aeabi_dmul>
 800881a:	460b      	mov	r3, r1
 800881c:	4602      	mov	r2, r0
 800881e:	4629      	mov	r1, r5
 8008820:	4620      	mov	r0, r4
 8008822:	f7f7 fd41 	bl	80002a8 <__aeabi_dsub>
 8008826:	4b2b      	ldr	r3, [pc, #172]	; (80088d4 <__kernel_cos+0x17c>)
 8008828:	4598      	cmp	r8, r3
 800882a:	4606      	mov	r6, r0
 800882c:	460f      	mov	r7, r1
 800882e:	dc10      	bgt.n	8008852 <__kernel_cos+0xfa>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4650      	mov	r0, sl
 8008836:	4659      	mov	r1, fp
 8008838:	f7f7 fd36 	bl	80002a8 <__aeabi_dsub>
 800883c:	460b      	mov	r3, r1
 800883e:	4926      	ldr	r1, [pc, #152]	; (80088d8 <__kernel_cos+0x180>)
 8008840:	4602      	mov	r2, r0
 8008842:	2000      	movs	r0, #0
 8008844:	f7f7 fd30 	bl	80002a8 <__aeabi_dsub>
 8008848:	ec41 0b10 	vmov	d0, r0, r1
 800884c:	b003      	add	sp, #12
 800884e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008852:	4b22      	ldr	r3, [pc, #136]	; (80088dc <__kernel_cos+0x184>)
 8008854:	4920      	ldr	r1, [pc, #128]	; (80088d8 <__kernel_cos+0x180>)
 8008856:	4598      	cmp	r8, r3
 8008858:	bfcc      	ite	gt
 800885a:	4d21      	ldrgt	r5, [pc, #132]	; (80088e0 <__kernel_cos+0x188>)
 800885c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008860:	2400      	movs	r4, #0
 8008862:	4622      	mov	r2, r4
 8008864:	462b      	mov	r3, r5
 8008866:	2000      	movs	r0, #0
 8008868:	f7f7 fd1e 	bl	80002a8 <__aeabi_dsub>
 800886c:	4622      	mov	r2, r4
 800886e:	4680      	mov	r8, r0
 8008870:	4689      	mov	r9, r1
 8008872:	462b      	mov	r3, r5
 8008874:	4650      	mov	r0, sl
 8008876:	4659      	mov	r1, fp
 8008878:	f7f7 fd16 	bl	80002a8 <__aeabi_dsub>
 800887c:	4632      	mov	r2, r6
 800887e:	463b      	mov	r3, r7
 8008880:	f7f7 fd12 	bl	80002a8 <__aeabi_dsub>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4640      	mov	r0, r8
 800888a:	4649      	mov	r1, r9
 800888c:	e7da      	b.n	8008844 <__kernel_cos+0xec>
 800888e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80088c8 <__kernel_cos+0x170>
 8008892:	e7db      	b.n	800884c <__kernel_cos+0xf4>
 8008894:	f3af 8000 	nop.w
 8008898:	be8838d4 	.word	0xbe8838d4
 800889c:	bda8fae9 	.word	0xbda8fae9
 80088a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80088a4:	3e21ee9e 	.word	0x3e21ee9e
 80088a8:	809c52ad 	.word	0x809c52ad
 80088ac:	3e927e4f 	.word	0x3e927e4f
 80088b0:	19cb1590 	.word	0x19cb1590
 80088b4:	3efa01a0 	.word	0x3efa01a0
 80088b8:	16c15177 	.word	0x16c15177
 80088bc:	3f56c16c 	.word	0x3f56c16c
 80088c0:	5555554c 	.word	0x5555554c
 80088c4:	3fa55555 	.word	0x3fa55555
 80088c8:	00000000 	.word	0x00000000
 80088cc:	3ff00000 	.word	0x3ff00000
 80088d0:	3fe00000 	.word	0x3fe00000
 80088d4:	3fd33332 	.word	0x3fd33332
 80088d8:	3ff00000 	.word	0x3ff00000
 80088dc:	3fe90000 	.word	0x3fe90000
 80088e0:	3fd20000 	.word	0x3fd20000
 80088e4:	00000000 	.word	0x00000000

080088e8 <__kernel_rem_pio2>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	ed2d 8b02 	vpush	{d8}
 80088f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80088f4:	f112 0f14 	cmn.w	r2, #20
 80088f8:	9308      	str	r3, [sp, #32]
 80088fa:	9101      	str	r1, [sp, #4]
 80088fc:	4bc4      	ldr	r3, [pc, #784]	; (8008c10 <__kernel_rem_pio2+0x328>)
 80088fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008900:	900b      	str	r0, [sp, #44]	; 0x2c
 8008902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008906:	9302      	str	r3, [sp, #8]
 8008908:	9b08      	ldr	r3, [sp, #32]
 800890a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800890e:	bfa8      	it	ge
 8008910:	1ed4      	subge	r4, r2, #3
 8008912:	9306      	str	r3, [sp, #24]
 8008914:	bfb2      	itee	lt
 8008916:	2400      	movlt	r4, #0
 8008918:	2318      	movge	r3, #24
 800891a:	fb94 f4f3 	sdivge	r4, r4, r3
 800891e:	f06f 0317 	mvn.w	r3, #23
 8008922:	fb04 3303 	mla	r3, r4, r3, r3
 8008926:	eb03 0a02 	add.w	sl, r3, r2
 800892a:	9b02      	ldr	r3, [sp, #8]
 800892c:	9a06      	ldr	r2, [sp, #24]
 800892e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008c00 <__kernel_rem_pio2+0x318>
 8008932:	eb03 0802 	add.w	r8, r3, r2
 8008936:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008938:	1aa7      	subs	r7, r4, r2
 800893a:	ae22      	add	r6, sp, #136	; 0x88
 800893c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008940:	2500      	movs	r5, #0
 8008942:	4545      	cmp	r5, r8
 8008944:	dd13      	ble.n	800896e <__kernel_rem_pio2+0x86>
 8008946:	9b08      	ldr	r3, [sp, #32]
 8008948:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008c00 <__kernel_rem_pio2+0x318>
 800894c:	aa22      	add	r2, sp, #136	; 0x88
 800894e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008952:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008956:	f04f 0800 	mov.w	r8, #0
 800895a:	9b02      	ldr	r3, [sp, #8]
 800895c:	4598      	cmp	r8, r3
 800895e:	dc2f      	bgt.n	80089c0 <__kernel_rem_pio2+0xd8>
 8008960:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008964:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008968:	462f      	mov	r7, r5
 800896a:	2600      	movs	r6, #0
 800896c:	e01b      	b.n	80089a6 <__kernel_rem_pio2+0xbe>
 800896e:	42ef      	cmn	r7, r5
 8008970:	d407      	bmi.n	8008982 <__kernel_rem_pio2+0x9a>
 8008972:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008976:	f7f7 fde5 	bl	8000544 <__aeabi_i2d>
 800897a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800897e:	3501      	adds	r5, #1
 8008980:	e7df      	b.n	8008942 <__kernel_rem_pio2+0x5a>
 8008982:	ec51 0b18 	vmov	r0, r1, d8
 8008986:	e7f8      	b.n	800897a <__kernel_rem_pio2+0x92>
 8008988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800898c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008990:	f7f7 fe42 	bl	8000618 <__aeabi_dmul>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800899c:	f7f7 fc86 	bl	80002ac <__adddf3>
 80089a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089a4:	3601      	adds	r6, #1
 80089a6:	9b06      	ldr	r3, [sp, #24]
 80089a8:	429e      	cmp	r6, r3
 80089aa:	f1a7 0708 	sub.w	r7, r7, #8
 80089ae:	ddeb      	ble.n	8008988 <__kernel_rem_pio2+0xa0>
 80089b0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80089b4:	f108 0801 	add.w	r8, r8, #1
 80089b8:	ecab 7b02 	vstmia	fp!, {d7}
 80089bc:	3508      	adds	r5, #8
 80089be:	e7cc      	b.n	800895a <__kernel_rem_pio2+0x72>
 80089c0:	9b02      	ldr	r3, [sp, #8]
 80089c2:	aa0e      	add	r2, sp, #56	; 0x38
 80089c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089c8:	930d      	str	r3, [sp, #52]	; 0x34
 80089ca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80089cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80089d0:	9c02      	ldr	r4, [sp, #8]
 80089d2:	930c      	str	r3, [sp, #48]	; 0x30
 80089d4:	00e3      	lsls	r3, r4, #3
 80089d6:	930a      	str	r3, [sp, #40]	; 0x28
 80089d8:	ab9a      	add	r3, sp, #616	; 0x268
 80089da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80089e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80089e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80089e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80089ec:	46c3      	mov	fp, r8
 80089ee:	46a1      	mov	r9, r4
 80089f0:	f1b9 0f00 	cmp.w	r9, #0
 80089f4:	f1a5 0508 	sub.w	r5, r5, #8
 80089f8:	dc77      	bgt.n	8008aea <__kernel_rem_pio2+0x202>
 80089fa:	ec47 6b10 	vmov	d0, r6, r7
 80089fe:	4650      	mov	r0, sl
 8008a00:	f000 fc0a 	bl	8009218 <scalbn>
 8008a04:	ec57 6b10 	vmov	r6, r7, d0
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008a0e:	ee10 0a10 	vmov	r0, s0
 8008a12:	4639      	mov	r1, r7
 8008a14:	f7f7 fe00 	bl	8000618 <__aeabi_dmul>
 8008a18:	ec41 0b10 	vmov	d0, r0, r1
 8008a1c:	f000 fb7c 	bl	8009118 <floor>
 8008a20:	4b7c      	ldr	r3, [pc, #496]	; (8008c14 <__kernel_rem_pio2+0x32c>)
 8008a22:	ec51 0b10 	vmov	r0, r1, d0
 8008a26:	2200      	movs	r2, #0
 8008a28:	f7f7 fdf6 	bl	8000618 <__aeabi_dmul>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4630      	mov	r0, r6
 8008a32:	4639      	mov	r1, r7
 8008a34:	f7f7 fc38 	bl	80002a8 <__aeabi_dsub>
 8008a38:	460f      	mov	r7, r1
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	f7f8 f886 	bl	8000b4c <__aeabi_d2iz>
 8008a40:	9004      	str	r0, [sp, #16]
 8008a42:	f7f7 fd7f 	bl	8000544 <__aeabi_i2d>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	f7f7 fc2b 	bl	80002a8 <__aeabi_dsub>
 8008a52:	f1ba 0f00 	cmp.w	sl, #0
 8008a56:	4606      	mov	r6, r0
 8008a58:	460f      	mov	r7, r1
 8008a5a:	dd6d      	ble.n	8008b38 <__kernel_rem_pio2+0x250>
 8008a5c:	1e62      	subs	r2, r4, #1
 8008a5e:	ab0e      	add	r3, sp, #56	; 0x38
 8008a60:	9d04      	ldr	r5, [sp, #16]
 8008a62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008a66:	f1ca 0118 	rsb	r1, sl, #24
 8008a6a:	fa40 f301 	asr.w	r3, r0, r1
 8008a6e:	441d      	add	r5, r3
 8008a70:	408b      	lsls	r3, r1
 8008a72:	1ac0      	subs	r0, r0, r3
 8008a74:	ab0e      	add	r3, sp, #56	; 0x38
 8008a76:	9504      	str	r5, [sp, #16]
 8008a78:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008a7c:	f1ca 0317 	rsb	r3, sl, #23
 8008a80:	fa40 fb03 	asr.w	fp, r0, r3
 8008a84:	f1bb 0f00 	cmp.w	fp, #0
 8008a88:	dd65      	ble.n	8008b56 <__kernel_rem_pio2+0x26e>
 8008a8a:	9b04      	ldr	r3, [sp, #16]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	3301      	adds	r3, #1
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	4615      	mov	r5, r2
 8008a94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008a98:	4294      	cmp	r4, r2
 8008a9a:	f300 809c 	bgt.w	8008bd6 <__kernel_rem_pio2+0x2ee>
 8008a9e:	f1ba 0f00 	cmp.w	sl, #0
 8008aa2:	dd07      	ble.n	8008ab4 <__kernel_rem_pio2+0x1cc>
 8008aa4:	f1ba 0f01 	cmp.w	sl, #1
 8008aa8:	f000 80c0 	beq.w	8008c2c <__kernel_rem_pio2+0x344>
 8008aac:	f1ba 0f02 	cmp.w	sl, #2
 8008ab0:	f000 80c6 	beq.w	8008c40 <__kernel_rem_pio2+0x358>
 8008ab4:	f1bb 0f02 	cmp.w	fp, #2
 8008ab8:	d14d      	bne.n	8008b56 <__kernel_rem_pio2+0x26e>
 8008aba:	4632      	mov	r2, r6
 8008abc:	463b      	mov	r3, r7
 8008abe:	4956      	ldr	r1, [pc, #344]	; (8008c18 <__kernel_rem_pio2+0x330>)
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f7f7 fbf1 	bl	80002a8 <__aeabi_dsub>
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	460f      	mov	r7, r1
 8008aca:	2d00      	cmp	r5, #0
 8008acc:	d043      	beq.n	8008b56 <__kernel_rem_pio2+0x26e>
 8008ace:	4650      	mov	r0, sl
 8008ad0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008c08 <__kernel_rem_pio2+0x320>
 8008ad4:	f000 fba0 	bl	8009218 <scalbn>
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	ec53 2b10 	vmov	r2, r3, d0
 8008ae0:	f7f7 fbe2 	bl	80002a8 <__aeabi_dsub>
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	e035      	b.n	8008b56 <__kernel_rem_pio2+0x26e>
 8008aea:	4b4c      	ldr	r3, [pc, #304]	; (8008c1c <__kernel_rem_pio2+0x334>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	4630      	mov	r0, r6
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7f7 fd91 	bl	8000618 <__aeabi_dmul>
 8008af6:	f7f8 f829 	bl	8000b4c <__aeabi_d2iz>
 8008afa:	f7f7 fd23 	bl	8000544 <__aeabi_i2d>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	ec43 2b18 	vmov	d8, r2, r3
 8008b06:	4b46      	ldr	r3, [pc, #280]	; (8008c20 <__kernel_rem_pio2+0x338>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f7f7 fd85 	bl	8000618 <__aeabi_dmul>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4630      	mov	r0, r6
 8008b14:	4639      	mov	r1, r7
 8008b16:	f7f7 fbc7 	bl	80002a8 <__aeabi_dsub>
 8008b1a:	f7f8 f817 	bl	8000b4c <__aeabi_d2iz>
 8008b1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b22:	f84b 0b04 	str.w	r0, [fp], #4
 8008b26:	ec51 0b18 	vmov	r0, r1, d8
 8008b2a:	f7f7 fbbf 	bl	80002ac <__adddf3>
 8008b2e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008b32:	4606      	mov	r6, r0
 8008b34:	460f      	mov	r7, r1
 8008b36:	e75b      	b.n	80089f0 <__kernel_rem_pio2+0x108>
 8008b38:	d106      	bne.n	8008b48 <__kernel_rem_pio2+0x260>
 8008b3a:	1e63      	subs	r3, r4, #1
 8008b3c:	aa0e      	add	r2, sp, #56	; 0x38
 8008b3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008b42:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008b46:	e79d      	b.n	8008a84 <__kernel_rem_pio2+0x19c>
 8008b48:	4b36      	ldr	r3, [pc, #216]	; (8008c24 <__kernel_rem_pio2+0x33c>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f7f7 ffea 	bl	8000b24 <__aeabi_dcmpge>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d13d      	bne.n	8008bd0 <__kernel_rem_pio2+0x2e8>
 8008b54:	4683      	mov	fp, r0
 8008b56:	2200      	movs	r2, #0
 8008b58:	2300      	movs	r3, #0
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	f7f7 ffc3 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f000 80c0 	beq.w	8008ce8 <__kernel_rem_pio2+0x400>
 8008b68:	1e65      	subs	r5, r4, #1
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	9902      	ldr	r1, [sp, #8]
 8008b70:	428b      	cmp	r3, r1
 8008b72:	da6c      	bge.n	8008c4e <__kernel_rem_pio2+0x366>
 8008b74:	2a00      	cmp	r2, #0
 8008b76:	f000 8089 	beq.w	8008c8c <__kernel_rem_pio2+0x3a4>
 8008b7a:	ab0e      	add	r3, sp, #56	; 0x38
 8008b7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008b80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 80ad 	beq.w	8008ce4 <__kernel_rem_pio2+0x3fc>
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008c08 <__kernel_rem_pio2+0x320>
 8008b90:	f000 fb42 	bl	8009218 <scalbn>
 8008b94:	ab9a      	add	r3, sp, #616	; 0x268
 8008b96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008b9a:	ec57 6b10 	vmov	r6, r7, d0
 8008b9e:	00ec      	lsls	r4, r5, #3
 8008ba0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008ba4:	46aa      	mov	sl, r5
 8008ba6:	f1ba 0f00 	cmp.w	sl, #0
 8008baa:	f280 80d6 	bge.w	8008d5a <__kernel_rem_pio2+0x472>
 8008bae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008c00 <__kernel_rem_pio2+0x318>
 8008bb2:	462e      	mov	r6, r5
 8008bb4:	2e00      	cmp	r6, #0
 8008bb6:	f2c0 8104 	blt.w	8008dc2 <__kernel_rem_pio2+0x4da>
 8008bba:	ab72      	add	r3, sp, #456	; 0x1c8
 8008bbc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008bc0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008c28 <__kernel_rem_pio2+0x340>
 8008bc4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008bc8:	f04f 0800 	mov.w	r8, #0
 8008bcc:	1baf      	subs	r7, r5, r6
 8008bce:	e0ea      	b.n	8008da6 <__kernel_rem_pio2+0x4be>
 8008bd0:	f04f 0b02 	mov.w	fp, #2
 8008bd4:	e759      	b.n	8008a8a <__kernel_rem_pio2+0x1a2>
 8008bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8008bda:	b955      	cbnz	r5, 8008bf2 <__kernel_rem_pio2+0x30a>
 8008bdc:	b123      	cbz	r3, 8008be8 <__kernel_rem_pio2+0x300>
 8008bde:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008be2:	f8c8 3000 	str.w	r3, [r8]
 8008be6:	2301      	movs	r3, #1
 8008be8:	3201      	adds	r2, #1
 8008bea:	f108 0804 	add.w	r8, r8, #4
 8008bee:	461d      	mov	r5, r3
 8008bf0:	e752      	b.n	8008a98 <__kernel_rem_pio2+0x1b0>
 8008bf2:	1acb      	subs	r3, r1, r3
 8008bf4:	f8c8 3000 	str.w	r3, [r8]
 8008bf8:	462b      	mov	r3, r5
 8008bfa:	e7f5      	b.n	8008be8 <__kernel_rem_pio2+0x300>
 8008bfc:	f3af 8000 	nop.w
	...
 8008c0c:	3ff00000 	.word	0x3ff00000
 8008c10:	080097b0 	.word	0x080097b0
 8008c14:	40200000 	.word	0x40200000
 8008c18:	3ff00000 	.word	0x3ff00000
 8008c1c:	3e700000 	.word	0x3e700000
 8008c20:	41700000 	.word	0x41700000
 8008c24:	3fe00000 	.word	0x3fe00000
 8008c28:	08009770 	.word	0x08009770
 8008c2c:	1e62      	subs	r2, r4, #1
 8008c2e:	ab0e      	add	r3, sp, #56	; 0x38
 8008c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008c38:	a90e      	add	r1, sp, #56	; 0x38
 8008c3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008c3e:	e739      	b.n	8008ab4 <__kernel_rem_pio2+0x1cc>
 8008c40:	1e62      	subs	r2, r4, #1
 8008c42:	ab0e      	add	r3, sp, #56	; 0x38
 8008c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008c4c:	e7f4      	b.n	8008c38 <__kernel_rem_pio2+0x350>
 8008c4e:	a90e      	add	r1, sp, #56	; 0x38
 8008c50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	430a      	orrs	r2, r1
 8008c58:	e789      	b.n	8008b6e <__kernel_rem_pio2+0x286>
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008c60:	2900      	cmp	r1, #0
 8008c62:	d0fa      	beq.n	8008c5a <__kernel_rem_pio2+0x372>
 8008c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c66:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008c6a:	446a      	add	r2, sp
 8008c6c:	3a98      	subs	r2, #152	; 0x98
 8008c6e:	920a      	str	r2, [sp, #40]	; 0x28
 8008c70:	9a08      	ldr	r2, [sp, #32]
 8008c72:	18e3      	adds	r3, r4, r3
 8008c74:	18a5      	adds	r5, r4, r2
 8008c76:	aa22      	add	r2, sp, #136	; 0x88
 8008c78:	f104 0801 	add.w	r8, r4, #1
 8008c7c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008c80:	9304      	str	r3, [sp, #16]
 8008c82:	9b04      	ldr	r3, [sp, #16]
 8008c84:	4543      	cmp	r3, r8
 8008c86:	da04      	bge.n	8008c92 <__kernel_rem_pio2+0x3aa>
 8008c88:	461c      	mov	r4, r3
 8008c8a:	e6a3      	b.n	80089d4 <__kernel_rem_pio2+0xec>
 8008c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e7e4      	b.n	8008c5c <__kernel_rem_pio2+0x374>
 8008c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008c98:	f7f7 fc54 	bl	8000544 <__aeabi_i2d>
 8008c9c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ca2:	46ab      	mov	fp, r5
 8008ca4:	461c      	mov	r4, r3
 8008ca6:	f04f 0900 	mov.w	r9, #0
 8008caa:	2600      	movs	r6, #0
 8008cac:	2700      	movs	r7, #0
 8008cae:	9b06      	ldr	r3, [sp, #24]
 8008cb0:	4599      	cmp	r9, r3
 8008cb2:	dd06      	ble.n	8008cc2 <__kernel_rem_pio2+0x3da>
 8008cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008cba:	f108 0801 	add.w	r8, r8, #1
 8008cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc0:	e7df      	b.n	8008c82 <__kernel_rem_pio2+0x39a>
 8008cc2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008cc6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008cca:	f7f7 fca5 	bl	8000618 <__aeabi_dmul>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	f7f7 fae9 	bl	80002ac <__adddf3>
 8008cda:	f109 0901 	add.w	r9, r9, #1
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	e7e4      	b.n	8008cae <__kernel_rem_pio2+0x3c6>
 8008ce4:	3d01      	subs	r5, #1
 8008ce6:	e748      	b.n	8008b7a <__kernel_rem_pio2+0x292>
 8008ce8:	ec47 6b10 	vmov	d0, r6, r7
 8008cec:	f1ca 0000 	rsb	r0, sl, #0
 8008cf0:	f000 fa92 	bl	8009218 <scalbn>
 8008cf4:	ec57 6b10 	vmov	r6, r7, d0
 8008cf8:	4ba0      	ldr	r3, [pc, #640]	; (8008f7c <__kernel_rem_pio2+0x694>)
 8008cfa:	ee10 0a10 	vmov	r0, s0
 8008cfe:	2200      	movs	r2, #0
 8008d00:	4639      	mov	r1, r7
 8008d02:	f7f7 ff0f 	bl	8000b24 <__aeabi_dcmpge>
 8008d06:	b1f8      	cbz	r0, 8008d48 <__kernel_rem_pio2+0x460>
 8008d08:	4b9d      	ldr	r3, [pc, #628]	; (8008f80 <__kernel_rem_pio2+0x698>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	4639      	mov	r1, r7
 8008d10:	f7f7 fc82 	bl	8000618 <__aeabi_dmul>
 8008d14:	f7f7 ff1a 	bl	8000b4c <__aeabi_d2iz>
 8008d18:	4680      	mov	r8, r0
 8008d1a:	f7f7 fc13 	bl	8000544 <__aeabi_i2d>
 8008d1e:	4b97      	ldr	r3, [pc, #604]	; (8008f7c <__kernel_rem_pio2+0x694>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	f7f7 fc79 	bl	8000618 <__aeabi_dmul>
 8008d26:	460b      	mov	r3, r1
 8008d28:	4602      	mov	r2, r0
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f7f7 fabb 	bl	80002a8 <__aeabi_dsub>
 8008d32:	f7f7 ff0b 	bl	8000b4c <__aeabi_d2iz>
 8008d36:	1c65      	adds	r5, r4, #1
 8008d38:	ab0e      	add	r3, sp, #56	; 0x38
 8008d3a:	f10a 0a18 	add.w	sl, sl, #24
 8008d3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008d42:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008d46:	e720      	b.n	8008b8a <__kernel_rem_pio2+0x2a2>
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f7 fefe 	bl	8000b4c <__aeabi_d2iz>
 8008d50:	ab0e      	add	r3, sp, #56	; 0x38
 8008d52:	4625      	mov	r5, r4
 8008d54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008d58:	e717      	b.n	8008b8a <__kernel_rem_pio2+0x2a2>
 8008d5a:	ab0e      	add	r3, sp, #56	; 0x38
 8008d5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008d60:	f7f7 fbf0 	bl	8000544 <__aeabi_i2d>
 8008d64:	4632      	mov	r2, r6
 8008d66:	463b      	mov	r3, r7
 8008d68:	f7f7 fc56 	bl	8000618 <__aeabi_dmul>
 8008d6c:	4b84      	ldr	r3, [pc, #528]	; (8008f80 <__kernel_rem_pio2+0x698>)
 8008d6e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008d72:	2200      	movs	r2, #0
 8008d74:	4630      	mov	r0, r6
 8008d76:	4639      	mov	r1, r7
 8008d78:	f7f7 fc4e 	bl	8000618 <__aeabi_dmul>
 8008d7c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008d80:	4606      	mov	r6, r0
 8008d82:	460f      	mov	r7, r1
 8008d84:	e70f      	b.n	8008ba6 <__kernel_rem_pio2+0x2be>
 8008d86:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008d8a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008d8e:	f7f7 fc43 	bl	8000618 <__aeabi_dmul>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d9a:	f7f7 fa87 	bl	80002ac <__adddf3>
 8008d9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008da2:	f108 0801 	add.w	r8, r8, #1
 8008da6:	9b02      	ldr	r3, [sp, #8]
 8008da8:	4598      	cmp	r8, r3
 8008daa:	dc01      	bgt.n	8008db0 <__kernel_rem_pio2+0x4c8>
 8008dac:	45b8      	cmp	r8, r7
 8008dae:	ddea      	ble.n	8008d86 <__kernel_rem_pio2+0x49e>
 8008db0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008db4:	ab4a      	add	r3, sp, #296	; 0x128
 8008db6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008dba:	ed87 7b00 	vstr	d7, [r7]
 8008dbe:	3e01      	subs	r6, #1
 8008dc0:	e6f8      	b.n	8008bb4 <__kernel_rem_pio2+0x2cc>
 8008dc2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	dc0b      	bgt.n	8008de0 <__kernel_rem_pio2+0x4f8>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dc35      	bgt.n	8008e38 <__kernel_rem_pio2+0x550>
 8008dcc:	d059      	beq.n	8008e82 <__kernel_rem_pio2+0x59a>
 8008dce:	9b04      	ldr	r3, [sp, #16]
 8008dd0:	f003 0007 	and.w	r0, r3, #7
 8008dd4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008dd8:	ecbd 8b02 	vpop	{d8}
 8008ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d1f3      	bne.n	8008dce <__kernel_rem_pio2+0x4e6>
 8008de6:	ab4a      	add	r3, sp, #296	; 0x128
 8008de8:	4423      	add	r3, r4
 8008dea:	9306      	str	r3, [sp, #24]
 8008dec:	461c      	mov	r4, r3
 8008dee:	469a      	mov	sl, r3
 8008df0:	9502      	str	r5, [sp, #8]
 8008df2:	9b02      	ldr	r3, [sp, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f1aa 0a08 	sub.w	sl, sl, #8
 8008dfa:	dc6b      	bgt.n	8008ed4 <__kernel_rem_pio2+0x5ec>
 8008dfc:	46aa      	mov	sl, r5
 8008dfe:	f1ba 0f01 	cmp.w	sl, #1
 8008e02:	f1a4 0408 	sub.w	r4, r4, #8
 8008e06:	f300 8085 	bgt.w	8008f14 <__kernel_rem_pio2+0x62c>
 8008e0a:	9c06      	ldr	r4, [sp, #24]
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	3408      	adds	r4, #8
 8008e10:	2100      	movs	r1, #0
 8008e12:	2d01      	cmp	r5, #1
 8008e14:	f300 809d 	bgt.w	8008f52 <__kernel_rem_pio2+0x66a>
 8008e18:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008e1c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008e20:	f1bb 0f00 	cmp.w	fp, #0
 8008e24:	f040 809b 	bne.w	8008f5e <__kernel_rem_pio2+0x676>
 8008e28:	9b01      	ldr	r3, [sp, #4]
 8008e2a:	e9c3 5600 	strd	r5, r6, [r3]
 8008e2e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008e32:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008e36:	e7ca      	b.n	8008dce <__kernel_rem_pio2+0x4e6>
 8008e38:	3408      	adds	r4, #8
 8008e3a:	ab4a      	add	r3, sp, #296	; 0x128
 8008e3c:	441c      	add	r4, r3
 8008e3e:	462e      	mov	r6, r5
 8008e40:	2000      	movs	r0, #0
 8008e42:	2100      	movs	r1, #0
 8008e44:	2e00      	cmp	r6, #0
 8008e46:	da36      	bge.n	8008eb6 <__kernel_rem_pio2+0x5ce>
 8008e48:	f1bb 0f00 	cmp.w	fp, #0
 8008e4c:	d039      	beq.n	8008ec2 <__kernel_rem_pio2+0x5da>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e54:	9c01      	ldr	r4, [sp, #4]
 8008e56:	e9c4 2300 	strd	r2, r3, [r4]
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008e62:	f7f7 fa21 	bl	80002a8 <__aeabi_dsub>
 8008e66:	ae4c      	add	r6, sp, #304	; 0x130
 8008e68:	2401      	movs	r4, #1
 8008e6a:	42a5      	cmp	r5, r4
 8008e6c:	da2c      	bge.n	8008ec8 <__kernel_rem_pio2+0x5e0>
 8008e6e:	f1bb 0f00 	cmp.w	fp, #0
 8008e72:	d002      	beq.n	8008e7a <__kernel_rem_pio2+0x592>
 8008e74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e78:	4619      	mov	r1, r3
 8008e7a:	9b01      	ldr	r3, [sp, #4]
 8008e7c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008e80:	e7a5      	b.n	8008dce <__kernel_rem_pio2+0x4e6>
 8008e82:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008e86:	eb0d 0403 	add.w	r4, sp, r3
 8008e8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008e8e:	2000      	movs	r0, #0
 8008e90:	2100      	movs	r1, #0
 8008e92:	2d00      	cmp	r5, #0
 8008e94:	da09      	bge.n	8008eaa <__kernel_rem_pio2+0x5c2>
 8008e96:	f1bb 0f00 	cmp.w	fp, #0
 8008e9a:	d002      	beq.n	8008ea2 <__kernel_rem_pio2+0x5ba>
 8008e9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	9b01      	ldr	r3, [sp, #4]
 8008ea4:	e9c3 0100 	strd	r0, r1, [r3]
 8008ea8:	e791      	b.n	8008dce <__kernel_rem_pio2+0x4e6>
 8008eaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008eae:	f7f7 f9fd 	bl	80002ac <__adddf3>
 8008eb2:	3d01      	subs	r5, #1
 8008eb4:	e7ed      	b.n	8008e92 <__kernel_rem_pio2+0x5aa>
 8008eb6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008eba:	f7f7 f9f7 	bl	80002ac <__adddf3>
 8008ebe:	3e01      	subs	r6, #1
 8008ec0:	e7c0      	b.n	8008e44 <__kernel_rem_pio2+0x55c>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	e7c5      	b.n	8008e54 <__kernel_rem_pio2+0x56c>
 8008ec8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008ecc:	f7f7 f9ee 	bl	80002ac <__adddf3>
 8008ed0:	3401      	adds	r4, #1
 8008ed2:	e7ca      	b.n	8008e6a <__kernel_rem_pio2+0x582>
 8008ed4:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ed8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008edc:	9b02      	ldr	r3, [sp, #8]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	9302      	str	r3, [sp, #8]
 8008ee2:	4632      	mov	r2, r6
 8008ee4:	463b      	mov	r3, r7
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	4649      	mov	r1, r9
 8008eea:	f7f7 f9df 	bl	80002ac <__adddf3>
 8008eee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	4649      	mov	r1, r9
 8008efa:	f7f7 f9d5 	bl	80002a8 <__aeabi_dsub>
 8008efe:	4632      	mov	r2, r6
 8008f00:	463b      	mov	r3, r7
 8008f02:	f7f7 f9d3 	bl	80002ac <__adddf3>
 8008f06:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008f0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f0e:	ed8a 7b00 	vstr	d7, [sl]
 8008f12:	e76e      	b.n	8008df2 <__kernel_rem_pio2+0x50a>
 8008f14:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008f18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	4632      	mov	r2, r6
 8008f20:	463b      	mov	r3, r7
 8008f22:	4649      	mov	r1, r9
 8008f24:	f7f7 f9c2 	bl	80002ac <__adddf3>
 8008f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4640      	mov	r0, r8
 8008f32:	4649      	mov	r1, r9
 8008f34:	f7f7 f9b8 	bl	80002a8 <__aeabi_dsub>
 8008f38:	4632      	mov	r2, r6
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	f7f7 f9b6 	bl	80002ac <__adddf3>
 8008f40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f48:	ed84 7b00 	vstr	d7, [r4]
 8008f4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008f50:	e755      	b.n	8008dfe <__kernel_rem_pio2+0x516>
 8008f52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008f56:	f7f7 f9a9 	bl	80002ac <__adddf3>
 8008f5a:	3d01      	subs	r5, #1
 8008f5c:	e759      	b.n	8008e12 <__kernel_rem_pio2+0x52a>
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	9a01      	ldr	r2, [sp, #4]
 8008f62:	601d      	str	r5, [r3, #0]
 8008f64:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008f68:	605c      	str	r4, [r3, #4]
 8008f6a:	609f      	str	r7, [r3, #8]
 8008f6c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008f70:	60d3      	str	r3, [r2, #12]
 8008f72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f76:	6110      	str	r0, [r2, #16]
 8008f78:	6153      	str	r3, [r2, #20]
 8008f7a:	e728      	b.n	8008dce <__kernel_rem_pio2+0x4e6>
 8008f7c:	41700000 	.word	0x41700000
 8008f80:	3e700000 	.word	0x3e700000
 8008f84:	00000000 	.word	0x00000000

08008f88 <__kernel_sin>:
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	ed2d 8b04 	vpush	{d8-d9}
 8008f90:	eeb0 8a41 	vmov.f32	s16, s2
 8008f94:	eef0 8a61 	vmov.f32	s17, s3
 8008f98:	ec55 4b10 	vmov	r4, r5, d0
 8008f9c:	b083      	sub	sp, #12
 8008f9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008fa2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008fa6:	9001      	str	r0, [sp, #4]
 8008fa8:	da06      	bge.n	8008fb8 <__kernel_sin+0x30>
 8008faa:	ee10 0a10 	vmov	r0, s0
 8008fae:	4629      	mov	r1, r5
 8008fb0:	f7f7 fdcc 	bl	8000b4c <__aeabi_d2iz>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d051      	beq.n	800905c <__kernel_sin+0xd4>
 8008fb8:	4622      	mov	r2, r4
 8008fba:	462b      	mov	r3, r5
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 fb2a 	bl	8000618 <__aeabi_dmul>
 8008fc4:	4682      	mov	sl, r0
 8008fc6:	468b      	mov	fp, r1
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4620      	mov	r0, r4
 8008fce:	4629      	mov	r1, r5
 8008fd0:	f7f7 fb22 	bl	8000618 <__aeabi_dmul>
 8008fd4:	a341      	add	r3, pc, #260	; (adr r3, 80090dc <__kernel_sin+0x154>)
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	4680      	mov	r8, r0
 8008fdc:	4689      	mov	r9, r1
 8008fde:	4650      	mov	r0, sl
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	f7f7 fb19 	bl	8000618 <__aeabi_dmul>
 8008fe6:	a33f      	add	r3, pc, #252	; (adr r3, 80090e4 <__kernel_sin+0x15c>)
 8008fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fec:	f7f7 f95c 	bl	80002a8 <__aeabi_dsub>
 8008ff0:	4652      	mov	r2, sl
 8008ff2:	465b      	mov	r3, fp
 8008ff4:	f7f7 fb10 	bl	8000618 <__aeabi_dmul>
 8008ff8:	a33c      	add	r3, pc, #240	; (adr r3, 80090ec <__kernel_sin+0x164>)
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f7f7 f955 	bl	80002ac <__adddf3>
 8009002:	4652      	mov	r2, sl
 8009004:	465b      	mov	r3, fp
 8009006:	f7f7 fb07 	bl	8000618 <__aeabi_dmul>
 800900a:	a33a      	add	r3, pc, #232	; (adr r3, 80090f4 <__kernel_sin+0x16c>)
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	f7f7 f94a 	bl	80002a8 <__aeabi_dsub>
 8009014:	4652      	mov	r2, sl
 8009016:	465b      	mov	r3, fp
 8009018:	f7f7 fafe 	bl	8000618 <__aeabi_dmul>
 800901c:	a337      	add	r3, pc, #220	; (adr r3, 80090fc <__kernel_sin+0x174>)
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	f7f7 f943 	bl	80002ac <__adddf3>
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	4606      	mov	r6, r0
 800902a:	460f      	mov	r7, r1
 800902c:	b9eb      	cbnz	r3, 800906a <__kernel_sin+0xe2>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4650      	mov	r0, sl
 8009034:	4659      	mov	r1, fp
 8009036:	f7f7 faef 	bl	8000618 <__aeabi_dmul>
 800903a:	a325      	add	r3, pc, #148	; (adr r3, 80090d0 <__kernel_sin+0x148>)
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f7f7 f932 	bl	80002a8 <__aeabi_dsub>
 8009044:	4642      	mov	r2, r8
 8009046:	464b      	mov	r3, r9
 8009048:	f7f7 fae6 	bl	8000618 <__aeabi_dmul>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4620      	mov	r0, r4
 8009052:	4629      	mov	r1, r5
 8009054:	f7f7 f92a 	bl	80002ac <__adddf3>
 8009058:	4604      	mov	r4, r0
 800905a:	460d      	mov	r5, r1
 800905c:	ec45 4b10 	vmov	d0, r4, r5
 8009060:	b003      	add	sp, #12
 8009062:	ecbd 8b04 	vpop	{d8-d9}
 8009066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906a:	4b1b      	ldr	r3, [pc, #108]	; (80090d8 <__kernel_sin+0x150>)
 800906c:	ec51 0b18 	vmov	r0, r1, d8
 8009070:	2200      	movs	r2, #0
 8009072:	f7f7 fad1 	bl	8000618 <__aeabi_dmul>
 8009076:	4632      	mov	r2, r6
 8009078:	ec41 0b19 	vmov	d9, r0, r1
 800907c:	463b      	mov	r3, r7
 800907e:	4640      	mov	r0, r8
 8009080:	4649      	mov	r1, r9
 8009082:	f7f7 fac9 	bl	8000618 <__aeabi_dmul>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	ec51 0b19 	vmov	r0, r1, d9
 800908e:	f7f7 f90b 	bl	80002a8 <__aeabi_dsub>
 8009092:	4652      	mov	r2, sl
 8009094:	465b      	mov	r3, fp
 8009096:	f7f7 fabf 	bl	8000618 <__aeabi_dmul>
 800909a:	ec53 2b18 	vmov	r2, r3, d8
 800909e:	f7f7 f903 	bl	80002a8 <__aeabi_dsub>
 80090a2:	a30b      	add	r3, pc, #44	; (adr r3, 80090d0 <__kernel_sin+0x148>)
 80090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a8:	4606      	mov	r6, r0
 80090aa:	460f      	mov	r7, r1
 80090ac:	4640      	mov	r0, r8
 80090ae:	4649      	mov	r1, r9
 80090b0:	f7f7 fab2 	bl	8000618 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4630      	mov	r0, r6
 80090ba:	4639      	mov	r1, r7
 80090bc:	f7f7 f8f6 	bl	80002ac <__adddf3>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7f7 f8ee 	bl	80002a8 <__aeabi_dsub>
 80090cc:	e7c4      	b.n	8009058 <__kernel_sin+0xd0>
 80090ce:	bf00      	nop
 80090d0:	55555549 	.word	0x55555549
 80090d4:	3fc55555 	.word	0x3fc55555
 80090d8:	3fe00000 	.word	0x3fe00000
 80090dc:	5acfd57c 	.word	0x5acfd57c
 80090e0:	3de5d93a 	.word	0x3de5d93a
 80090e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80090e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80090ec:	57b1fe7d 	.word	0x57b1fe7d
 80090f0:	3ec71de3 	.word	0x3ec71de3
 80090f4:	19c161d5 	.word	0x19c161d5
 80090f8:	3f2a01a0 	.word	0x3f2a01a0
 80090fc:	1110f8a6 	.word	0x1110f8a6
 8009100:	3f811111 	.word	0x3f811111

08009104 <fabs>:
 8009104:	ec51 0b10 	vmov	r0, r1, d0
 8009108:	ee10 2a10 	vmov	r2, s0
 800910c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009110:	ec43 2b10 	vmov	d0, r2, r3
 8009114:	4770      	bx	lr
	...

08009118 <floor>:
 8009118:	ec51 0b10 	vmov	r0, r1, d0
 800911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009120:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009124:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009128:	2e13      	cmp	r6, #19
 800912a:	ee10 5a10 	vmov	r5, s0
 800912e:	ee10 8a10 	vmov	r8, s0
 8009132:	460c      	mov	r4, r1
 8009134:	dc32      	bgt.n	800919c <floor+0x84>
 8009136:	2e00      	cmp	r6, #0
 8009138:	da14      	bge.n	8009164 <floor+0x4c>
 800913a:	a333      	add	r3, pc, #204	; (adr r3, 8009208 <floor+0xf0>)
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7f7 f8b4 	bl	80002ac <__adddf3>
 8009144:	2200      	movs	r2, #0
 8009146:	2300      	movs	r3, #0
 8009148:	f7f7 fcf6 	bl	8000b38 <__aeabi_dcmpgt>
 800914c:	b138      	cbz	r0, 800915e <floor+0x46>
 800914e:	2c00      	cmp	r4, #0
 8009150:	da57      	bge.n	8009202 <floor+0xea>
 8009152:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009156:	431d      	orrs	r5, r3
 8009158:	d001      	beq.n	800915e <floor+0x46>
 800915a:	4c2d      	ldr	r4, [pc, #180]	; (8009210 <floor+0xf8>)
 800915c:	2500      	movs	r5, #0
 800915e:	4621      	mov	r1, r4
 8009160:	4628      	mov	r0, r5
 8009162:	e025      	b.n	80091b0 <floor+0x98>
 8009164:	4f2b      	ldr	r7, [pc, #172]	; (8009214 <floor+0xfc>)
 8009166:	4137      	asrs	r7, r6
 8009168:	ea01 0307 	and.w	r3, r1, r7
 800916c:	4303      	orrs	r3, r0
 800916e:	d01f      	beq.n	80091b0 <floor+0x98>
 8009170:	a325      	add	r3, pc, #148	; (adr r3, 8009208 <floor+0xf0>)
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	f7f7 f899 	bl	80002ac <__adddf3>
 800917a:	2200      	movs	r2, #0
 800917c:	2300      	movs	r3, #0
 800917e:	f7f7 fcdb 	bl	8000b38 <__aeabi_dcmpgt>
 8009182:	2800      	cmp	r0, #0
 8009184:	d0eb      	beq.n	800915e <floor+0x46>
 8009186:	2c00      	cmp	r4, #0
 8009188:	bfbe      	ittt	lt
 800918a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800918e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009192:	19a4      	addlt	r4, r4, r6
 8009194:	ea24 0407 	bic.w	r4, r4, r7
 8009198:	2500      	movs	r5, #0
 800919a:	e7e0      	b.n	800915e <floor+0x46>
 800919c:	2e33      	cmp	r6, #51	; 0x33
 800919e:	dd0b      	ble.n	80091b8 <floor+0xa0>
 80091a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80091a4:	d104      	bne.n	80091b0 <floor+0x98>
 80091a6:	ee10 2a10 	vmov	r2, s0
 80091aa:	460b      	mov	r3, r1
 80091ac:	f7f7 f87e 	bl	80002ac <__adddf3>
 80091b0:	ec41 0b10 	vmov	d0, r0, r1
 80091b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80091bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091c0:	fa23 f707 	lsr.w	r7, r3, r7
 80091c4:	4207      	tst	r7, r0
 80091c6:	d0f3      	beq.n	80091b0 <floor+0x98>
 80091c8:	a30f      	add	r3, pc, #60	; (adr r3, 8009208 <floor+0xf0>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 f86d 	bl	80002ac <__adddf3>
 80091d2:	2200      	movs	r2, #0
 80091d4:	2300      	movs	r3, #0
 80091d6:	f7f7 fcaf 	bl	8000b38 <__aeabi_dcmpgt>
 80091da:	2800      	cmp	r0, #0
 80091dc:	d0bf      	beq.n	800915e <floor+0x46>
 80091de:	2c00      	cmp	r4, #0
 80091e0:	da02      	bge.n	80091e8 <floor+0xd0>
 80091e2:	2e14      	cmp	r6, #20
 80091e4:	d103      	bne.n	80091ee <floor+0xd6>
 80091e6:	3401      	adds	r4, #1
 80091e8:	ea25 0507 	bic.w	r5, r5, r7
 80091ec:	e7b7      	b.n	800915e <floor+0x46>
 80091ee:	2301      	movs	r3, #1
 80091f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80091f4:	fa03 f606 	lsl.w	r6, r3, r6
 80091f8:	4435      	add	r5, r6
 80091fa:	4545      	cmp	r5, r8
 80091fc:	bf38      	it	cc
 80091fe:	18e4      	addcc	r4, r4, r3
 8009200:	e7f2      	b.n	80091e8 <floor+0xd0>
 8009202:	2500      	movs	r5, #0
 8009204:	462c      	mov	r4, r5
 8009206:	e7aa      	b.n	800915e <floor+0x46>
 8009208:	8800759c 	.word	0x8800759c
 800920c:	7e37e43c 	.word	0x7e37e43c
 8009210:	bff00000 	.word	0xbff00000
 8009214:	000fffff 	.word	0x000fffff

08009218 <scalbn>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	ec55 4b10 	vmov	r4, r5, d0
 800921e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009222:	4606      	mov	r6, r0
 8009224:	462b      	mov	r3, r5
 8009226:	b99a      	cbnz	r2, 8009250 <scalbn+0x38>
 8009228:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800922c:	4323      	orrs	r3, r4
 800922e:	d036      	beq.n	800929e <scalbn+0x86>
 8009230:	4b39      	ldr	r3, [pc, #228]	; (8009318 <scalbn+0x100>)
 8009232:	4629      	mov	r1, r5
 8009234:	ee10 0a10 	vmov	r0, s0
 8009238:	2200      	movs	r2, #0
 800923a:	f7f7 f9ed 	bl	8000618 <__aeabi_dmul>
 800923e:	4b37      	ldr	r3, [pc, #220]	; (800931c <scalbn+0x104>)
 8009240:	429e      	cmp	r6, r3
 8009242:	4604      	mov	r4, r0
 8009244:	460d      	mov	r5, r1
 8009246:	da10      	bge.n	800926a <scalbn+0x52>
 8009248:	a32b      	add	r3, pc, #172	; (adr r3, 80092f8 <scalbn+0xe0>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	e03a      	b.n	80092c6 <scalbn+0xae>
 8009250:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009254:	428a      	cmp	r2, r1
 8009256:	d10c      	bne.n	8009272 <scalbn+0x5a>
 8009258:	ee10 2a10 	vmov	r2, s0
 800925c:	4620      	mov	r0, r4
 800925e:	4629      	mov	r1, r5
 8009260:	f7f7 f824 	bl	80002ac <__adddf3>
 8009264:	4604      	mov	r4, r0
 8009266:	460d      	mov	r5, r1
 8009268:	e019      	b.n	800929e <scalbn+0x86>
 800926a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800926e:	460b      	mov	r3, r1
 8009270:	3a36      	subs	r2, #54	; 0x36
 8009272:	4432      	add	r2, r6
 8009274:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009278:	428a      	cmp	r2, r1
 800927a:	dd08      	ble.n	800928e <scalbn+0x76>
 800927c:	2d00      	cmp	r5, #0
 800927e:	a120      	add	r1, pc, #128	; (adr r1, 8009300 <scalbn+0xe8>)
 8009280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009284:	da1c      	bge.n	80092c0 <scalbn+0xa8>
 8009286:	a120      	add	r1, pc, #128	; (adr r1, 8009308 <scalbn+0xf0>)
 8009288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800928c:	e018      	b.n	80092c0 <scalbn+0xa8>
 800928e:	2a00      	cmp	r2, #0
 8009290:	dd08      	ble.n	80092a4 <scalbn+0x8c>
 8009292:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009296:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800929a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800929e:	ec45 4b10 	vmov	d0, r4, r5
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80092a8:	da19      	bge.n	80092de <scalbn+0xc6>
 80092aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80092ae:	429e      	cmp	r6, r3
 80092b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80092b4:	dd0a      	ble.n	80092cc <scalbn+0xb4>
 80092b6:	a112      	add	r1, pc, #72	; (adr r1, 8009300 <scalbn+0xe8>)
 80092b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1e2      	bne.n	8009286 <scalbn+0x6e>
 80092c0:	a30f      	add	r3, pc, #60	; (adr r3, 8009300 <scalbn+0xe8>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f7f7 f9a7 	bl	8000618 <__aeabi_dmul>
 80092ca:	e7cb      	b.n	8009264 <scalbn+0x4c>
 80092cc:	a10a      	add	r1, pc, #40	; (adr r1, 80092f8 <scalbn+0xe0>)
 80092ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0b8      	beq.n	8009248 <scalbn+0x30>
 80092d6:	a10e      	add	r1, pc, #56	; (adr r1, 8009310 <scalbn+0xf8>)
 80092d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092dc:	e7b4      	b.n	8009248 <scalbn+0x30>
 80092de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80092e2:	3236      	adds	r2, #54	; 0x36
 80092e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80092e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80092ec:	4620      	mov	r0, r4
 80092ee:	4b0c      	ldr	r3, [pc, #48]	; (8009320 <scalbn+0x108>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	e7e8      	b.n	80092c6 <scalbn+0xae>
 80092f4:	f3af 8000 	nop.w
 80092f8:	c2f8f359 	.word	0xc2f8f359
 80092fc:	01a56e1f 	.word	0x01a56e1f
 8009300:	8800759c 	.word	0x8800759c
 8009304:	7e37e43c 	.word	0x7e37e43c
 8009308:	8800759c 	.word	0x8800759c
 800930c:	fe37e43c 	.word	0xfe37e43c
 8009310:	c2f8f359 	.word	0xc2f8f359
 8009314:	81a56e1f 	.word	0x81a56e1f
 8009318:	43500000 	.word	0x43500000
 800931c:	ffff3cb0 	.word	0xffff3cb0
 8009320:	3c900000 	.word	0x3c900000

08009324 <_init>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	bf00      	nop
 8009328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932a:	bc08      	pop	{r3}
 800932c:	469e      	mov	lr, r3
 800932e:	4770      	bx	lr

08009330 <_fini>:
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009332:	bf00      	nop
 8009334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009336:	bc08      	pop	{r3}
 8009338:	469e      	mov	lr, r3
 800933a:	4770      	bx	lr
