
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a308  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800a4a8  0800a4a8  0001a4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a974  0800a974  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a974  0800a974  0001a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a97c  0800a97c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a97c  0800a97c  0001a97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a980  0800a980  0001a980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a84  200001e0  0800ab64  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c64  0800ab64  00021c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fa0  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ce  00000000  00000000  000321b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00034780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00035650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017916  00000000  00000000  00036438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bb3  00000000  00000000  0004dd4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090be3  00000000  00000000  0005e901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef4e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052a0  00000000  00000000  000ef534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a490 	.word	0x0800a490

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a490 	.word	0x0800a490

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <HAL_UART_RxCpltCallback>:
// uint32_t count = 0;




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b0a9      	sub	sp, #164	; 0xa4
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	char str[DATA_SZ];
    char *cmd, *data, *save_ptr;
    double value;
    unsigned long long encoding;
    uint8_t i = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

    memcpy(str, rx_data, sizeof str);
 8000fca:	4a4b      	ldr	r2, [pc, #300]	; (80010f8 <HAL_UART_RxCpltCallback+0x13c>)
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	2278      	movs	r2, #120	; 0x78
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 fa66 	bl	80074a6 <memcpy>
    /* read the first characters */
    cmd = strtok_r((char*) str, ":", &save_ptr);
 8000fda:	f107 0218 	add.w	r2, r7, #24
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4946      	ldr	r1, [pc, #280]	; (80010fc <HAL_UART_RxCpltCallback+0x140>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f007 f8e8 	bl	80081ba <strtok_r>
 8000fea:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    if(!strcmp(cmd, "TRJ")){
 8000fee:	4944      	ldr	r1, [pc, #272]	; (8001100 <HAL_UART_RxCpltCallback+0x144>)
 8000ff0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000ff4:	f7ff f8f4 	bl	80001e0 <strcmp>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d153      	bne.n	80010a6 <HAL_UART_RxCpltCallback+0xea>
    	 //printf(rx_data);
    	 //fflush(stdout);
    	//debug


        data = strtok_r(cmd+sizeof cmd, ":",  &save_ptr);
 8000ffe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001002:	3304      	adds	r3, #4
 8001004:	f107 0218 	add.w	r2, r7, #24
 8001008:	493c      	ldr	r1, [pc, #240]	; (80010fc <HAL_UART_RxCpltCallback+0x140>)
 800100a:	4618      	mov	r0, r3
 800100c:	f007 f8d5 	bl	80081ba <strtok_r>
 8001010:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        while(data != NULL){
 8001014:	e033      	b.n	800107e <HAL_UART_RxCpltCallback+0xc2>
            if(i == 6) break; /* reading penup */
 8001016:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800101a:	2b06      	cmp	r3, #6
 800101c:	d034      	beq.n	8001088 <HAL_UART_RxCpltCallback+0xcc>
            encoding = strtoull(data, NULL, 16); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 800101e:	2210      	movs	r2, #16
 8001020:	2100      	movs	r1, #0
 8001022:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001026:	f007 f9ef 	bl	8008408 <strtoull>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001032:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
            memcpy(&value, &encoding, sizeof value); /* copy the IEEE754 double representation into a memory space for double */
 8001036:	e9c7 2304 	strd	r2, r3, [r7, #16]
            if(i==0 || i==1){
             printf("%f \n",value);
             fflush(stdout);
            }*/

            rbpush((((ringbuffer_t *) &manip)+i), (float) value); /* push the value inside the correct ringbuffer ringbuffer */
 800103a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800103e:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	4a2f      	ldr	r2, [pc, #188]	; (8001104 <HAL_UART_RxCpltCallback+0x148>)
 8001048:	189c      	adds	r4, r3, r2
 800104a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fde1 	bl	8000c18 <__aeabi_d2f>
 8001056:	4603      	mov	r3, r0
 8001058:	ee00 3a10 	vmov	s0, r3
 800105c:	4620      	mov	r0, r4
 800105e:	f001 fecd 	bl	8002dfc <rbpush>
            data = strtok_r(NULL, ":", &save_ptr);
 8001062:	f107 0318 	add.w	r3, r7, #24
 8001066:	461a      	mov	r2, r3
 8001068:	4924      	ldr	r1, [pc, #144]	; (80010fc <HAL_UART_RxCpltCallback+0x140>)
 800106a:	2000      	movs	r0, #0
 800106c:	f007 f8a5 	bl	80081ba <strtok_r>
 8001070:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            i++;
 8001074:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001078:	3301      	adds	r3, #1
 800107a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        while(data != NULL){
 800107e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1c7      	bne.n	8001016 <HAL_UART_RxCpltCallback+0x5a>
 8001086:	e000      	b.n	800108a <HAL_UART_RxCpltCallback+0xce>
            if(i == 6) break; /* reading penup */
 8001088:	bf00      	nop
        }
        rbpush(&manip.penup, (float) atoi(data));
 800108a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800108e:	f006 f80f 	bl	80070b0 <atoi>
 8001092:	ee07 0a90 	vmov	s15, r0
 8001096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	481a      	ldr	r0, [pc, #104]	; (8001108 <HAL_UART_RxCpltCallback+0x14c>)
 80010a0:	f001 feac 	bl	8002dfc <rbpush>
 80010a4:	e01f      	b.n	80010e6 <HAL_UART_RxCpltCallback+0x12a>
    }else if(!strcmp(cmd, "HOM")){
 80010a6:	4919      	ldr	r1, [pc, #100]	; (800110c <HAL_UART_RxCpltCallback+0x150>)
 80010a8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80010ac:	f7ff f898 	bl	80001e0 <strcmp>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10c      	bne.n	80010d0 <HAL_UART_RxCpltCallback+0x114>
    	/* Home command case */

        printf(rx_data);
 80010b6:	4810      	ldr	r0, [pc, #64]	; (80010f8 <HAL_UART_RxCpltCallback+0x13c>)
 80010b8:	f006 ff56 	bl	8007f68 <iprintf>
        fflush(stdout);
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_UART_RxCpltCallback+0x154>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f006 f8c0 	bl	8007248 <fflush>
        homing_triggered=1;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_UART_RxCpltCallback+0x158>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e00a      	b.n	80010e6 <HAL_UART_RxCpltCallback+0x12a>

    }else if(!strcmp(cmd, "POS")){
 80010d0:	4911      	ldr	r1, [pc, #68]	; (8001118 <HAL_UART_RxCpltCallback+0x15c>)
 80010d2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80010d6:	f7ff f883 	bl	80001e0 <strcmp>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <HAL_UART_RxCpltCallback+0x12a>
    	/* Position command case */
        log_triggered = 1;
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_UART_RxCpltCallback+0x160>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(huart, rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 80010e6:	2278      	movs	r2, #120	; 0x78
 80010e8:	4903      	ldr	r1, [pc, #12]	; (80010f8 <HAL_UART_RxCpltCallback+0x13c>)
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f004 fec6 	bl	8005e7c <HAL_UART_Receive_DMA>
    return;
 80010f0:	bf00      	nop
}
 80010f2:	37a4      	adds	r7, #164	; 0xa4
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	200001fc 	.word	0x200001fc
 80010fc:	0800a4a8 	.word	0x0800a4a8
 8001100:	0800a4ac 	.word	0x0800a4ac
 8001104:	2000028c 	.word	0x2000028c
 8001108:	20000c04 	.word	0x20000c04
 800110c:	0800a4b0 	.word	0x0800a4b0
 8001110:	20000010 	.word	0x20000010
 8001114:	200019ce 	.word	0x200019ce
 8001118:	0800a4b4 	.word	0x0800a4b4
 800111c:	200019cf 	.word	0x200019cf

08001120 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
    uint32_t now;
    now = HAL_GetTick();
 800112a:	f002 fb31 	bl	8003790 <HAL_GetTick>
 800112e:	60f8      	str	r0, [r7, #12]
    if((now - previous_trigger1) > DEBOUNCE_DELAY ){
 8001130:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <HAL_GPIO_EXTI_Callback+0x100>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b50      	cmp	r3, #80	; 0x50
 800113a:	d933      	bls.n	80011a4 <HAL_GPIO_EXTI_Callback+0x84>
       if (GPIO_Pin==LIMIT_SWITCH_1_Pin){
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001142:	d12f      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0x84>
			if(!triggered1){
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <HAL_GPIO_EXTI_Callback+0x104>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d121      	bne.n	8001190 <HAL_GPIO_EXTI_Callback+0x70>
				  limit_switch1 = 1;
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_GPIO_EXTI_Callback+0x108>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]
				  if(is_home1){
 8001152:	4b36      	ldr	r3, [pc, #216]	; (800122c <HAL_GPIO_EXTI_Callback+0x10c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <HAL_GPIO_EXTI_Callback+0x48>
					  rblast(&manip.q0_actual,&offset1);
 800115a:	4935      	ldr	r1, [pc, #212]	; (8001230 <HAL_GPIO_EXTI_Callback+0x110>)
 800115c:	4835      	ldr	r0, [pc, #212]	; (8001234 <HAL_GPIO_EXTI_Callback+0x114>)
 800115e:	f001 fe95 	bl	8002e8c <rblast>
					  /*
					  printf("CNT1: %x \n",manip.htim_encoder1->Instance->CNT);
					  fflush(stdout);
					  */
				  is_home1=0;
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <HAL_GPIO_EXTI_Callback+0x10c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
			  }
			  // SECTION - DEBUG
			  printf("trigger1 offset1: %f \n",offset1);
 8001168:	4b31      	ldr	r3, [pc, #196]	; (8001230 <HAL_GPIO_EXTI_Callback+0x110>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fa03 	bl	8000578 <__aeabi_f2d>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4830      	ldr	r0, [pc, #192]	; (8001238 <HAL_GPIO_EXTI_Callback+0x118>)
 8001178:	f006 fef6 	bl	8007f68 <iprintf>
			  fflush(stdout);
 800117c:	4b2f      	ldr	r3, [pc, #188]	; (800123c <HAL_GPIO_EXTI_Callback+0x11c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	4618      	mov	r0, r3
 8001184:	f006 f860 	bl	8007248 <fflush>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001188:	2120      	movs	r1, #32
 800118a:	482d      	ldr	r0, [pc, #180]	; (8001240 <HAL_GPIO_EXTI_Callback+0x120>)
 800118c:	f003 f9e1 	bl	8004552 <HAL_GPIO_TogglePin>
			  // !SECTION - DEBUG
        }
        triggered1 = 1-triggered1;
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <HAL_GPIO_EXTI_Callback+0x104>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	f1c3 0301 	rsb	r3, r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_GPIO_EXTI_Callback+0x104>)
 800119c:	701a      	strb	r2, [r3, #0]
        previous_trigger1 = now;
 800119e:	4a20      	ldr	r2, [pc, #128]	; (8001220 <HAL_GPIO_EXTI_Callback+0x100>)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6013      	str	r3, [r2, #0]
       }
     }

	 if((now - previous_trigger2) > DEBOUNCE_DELAY ){
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_GPIO_EXTI_Callback+0x124>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b50      	cmp	r3, #80	; 0x50
 80011ae:	d933      	bls.n	8001218 <HAL_GPIO_EXTI_Callback+0xf8>
		if(GPIO_Pin==LIMIT_SWITCH_2_Pin){
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011b6:	d12f      	bne.n	8001218 <HAL_GPIO_EXTI_Callback+0xf8>
			if(!triggered2){
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <HAL_GPIO_EXTI_Callback+0x128>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d121      	bne.n	8001204 <HAL_GPIO_EXTI_Callback+0xe4>
				limit_switch2 = 1;
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <HAL_GPIO_EXTI_Callback+0x12c>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
				if(is_home2){
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <HAL_GPIO_EXTI_Callback+0x130>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <HAL_GPIO_EXTI_Callback+0xbc>
					rblast(&manip.q1_actual,&offset2);
 80011ce:	4921      	ldr	r1, [pc, #132]	; (8001254 <HAL_GPIO_EXTI_Callback+0x134>)
 80011d0:	4821      	ldr	r0, [pc, #132]	; (8001258 <HAL_GPIO_EXTI_Callback+0x138>)
 80011d2:	f001 fe5b 	bl	8002e8c <rblast>
					/*
					printf("CNT2: %x \n",manip.htim_encoder2->Instance->CNT);
					fflush(stdout);
					*/
					is_home2=0;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <HAL_GPIO_EXTI_Callback+0x130>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
				}
				// SECTION - DEBUG
				printf("trigger2 offset2: %f \n",offset2);
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_GPIO_EXTI_Callback+0x134>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9c9 	bl	8000578 <__aeabi_f2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	481c      	ldr	r0, [pc, #112]	; (800125c <HAL_GPIO_EXTI_Callback+0x13c>)
 80011ec:	f006 febc 	bl	8007f68 <iprintf>
				fflush(stdout);
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_GPIO_EXTI_Callback+0x11c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f006 f826 	bl	8007248 <fflush>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011fc:	2120      	movs	r1, #32
 80011fe:	4810      	ldr	r0, [pc, #64]	; (8001240 <HAL_GPIO_EXTI_Callback+0x120>)
 8001200:	f003 f9a7 	bl	8004552 <HAL_GPIO_TogglePin>
				// !SECTION - DEBUG
			}
			triggered2 = 1-triggered2;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_GPIO_EXTI_Callback+0x128>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f1c3 0301 	rsb	r3, r3, #1
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_GPIO_EXTI_Callback+0x128>)
 8001210:	701a      	strb	r2, [r3, #0]
			previous_trigger2 = now;
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <HAL_GPIO_EXTI_Callback+0x124>)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6013      	str	r3, [r2, #0]
		   }
	  }
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200019b4 	.word	0x200019b4
 8001224:	200019bc 	.word	0x200019bc
 8001228:	200019c8 	.word	0x200019c8
 800122c:	200019cc 	.word	0x200019cc
 8001230:	200019c0 	.word	0x200019c0
 8001234:	20000d98 	.word	0x20000d98
 8001238:	0800a4b8 	.word	0x0800a4b8
 800123c:	20000010 	.word	0x20000010
 8001240:	40020000 	.word	0x40020000
 8001244:	200019b8 	.word	0x200019b8
 8001248:	200019bd 	.word	0x200019bd
 800124c:	20000000 	.word	0x20000000
 8001250:	200019cd 	.word	0x200019cd
 8001254:	200019c4 	.word	0x200019c4
 8001258:	20000f2c 	.word	0x20000f2c
 800125c:	0800a4d0 	.word	0x0800a4d0

08001260 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){ /* check if it is the proper instance */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d102      	bne.n	8001278 <HAL_TIM_PeriodElapsedCallback+0x18>
		read_encoders(&manip); /* read encoders with the correct timing */
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001274:	f000 f9f4 	bl	8001660 <read_encoders>
	}
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40014400 	.word	0x40014400
 8001284:	2000028c 	.word	0x2000028c

08001288 <ITM_Sendchar>:

#define DEMCR               *((volatile uint32_t*) 0xE000EDFCU)
#define ITM_STIMULUS_PORT0  *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN        *((volatile uint32_t*) 0xE0000E00)

void ITM_Sendchar(uint8_t ch){
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <ITM_Sendchar+0x48>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <ITM_Sendchar+0x48>)
 8001298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800129c:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <ITM_Sendchar+0x4c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <ITM_Sendchar+0x4c>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(! (ITM_STIMULUS_PORT0 & 1));
 80012aa:	bf00      	nop
 80012ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f8      	beq.n	80012ac <ITM_Sendchar+0x24>

	// Write to IT Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 80012ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	6013      	str	r3, [r2, #0]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000edfc 	.word	0xe000edfc
 80012d4:	e0000e00 	.word	0xe0000e00

080012d8 <_write>:

int _write(int file,char *ptr, int len){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]

	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	e009      	b.n	80012fe <_write+0x26>
	{
		ITM_Sendchar(*ptr++);
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	60ba      	str	r2, [r7, #8]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ffc8 	bl	8001288 <ITM_Sendchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3301      	adds	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	dbf1      	blt.n	80012ea <_write+0x12>
	}
	return len;
 8001306:	687b      	ldr	r3, [r7, #4]

}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <init_man>:
- TIM_HandleTypeDef \*htim2: pointer to the timer used to decode the output of the second encode;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip, TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3,TIM_HandleTypeDef *htim4){
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 800131e:	2300      	movs	r3, #0
 8001320:	75fb      	strb	r3, [r7, #23]
 8001322:	e00c      	b.n	800133e <init_man+0x2e>
        rbclear((((ringbuffer_t *) manip)+i));
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	f44f 72ca 	mov.w	r2, #404	; 0x194
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fe1a 	bl	8002f6c <rbclear>
    for(i = 0; i < 14; i++){
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	3301      	adds	r3, #1
 800133c:	75fb      	strb	r3, [r7, #23]
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	2b0d      	cmp	r3, #13
 8001342:	d9ef      	bls.n	8001324 <init_man+0x14>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 8001344:	2300      	movs	r3, #0
 8001346:	75fb      	strb	r3, [r7, #23]
 8001348:	e014      	b.n	8001374 <init_man+0x64>
        manip->B[i] = (float) 0;
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	f203 5386 	addw	r3, r3, #1414	; 0x586
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
        manip->C[i] = (float) 0;
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	f203 538a 	addw	r3, r3, #1418	; 0x58a
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 4; i++){
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	3301      	adds	r3, #1
 8001372:	75fb      	strb	r3, [r7, #23]
 8001374:	7dfb      	ldrb	r3, [r7, #23]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d9e7      	bls.n	800134a <init_man+0x3a>
    }
    manip->htim_encoder1 = htim1;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001380:	461a      	mov	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    manip->htim_encoder2 = htim2;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138e:	461a      	mov	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
    manip->htim_motor1 = htim3;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800139c:	461a      	mov	r2, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    manip->htim_motor2 = htim4;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013aa:	461a      	mov	r2, r3
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	f8c2 3644 	str.w	r3, [r2, #1604]	; 0x644
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	0000      	movs	r0, r0
 80013bc:	0000      	movs	r0, r0
	...

080013c0 <speed_estimation>:
- float \*a_est: pointer to the variable that will hold the acceleration estimation;
@outputs: 
- void;
@#
*/
void speed_estimation(ringbuffer_t *q_actual, ringbuffer_t *dq_actual, ringbuffer_t *ddq_actual, float reduction, float *v_est, float *a_est){
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6178      	str	r0, [r7, #20]
 80013c8:	6139      	str	r1, [r7, #16]
 80013ca:	60fa      	str	r2, [r7, #12]
 80013cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d0:	607b      	str	r3, [r7, #4]
    float adjM[ESTIMATION_STEPS*ESTIMATION_STEPS], subM[(ESTIMATION_STEPS-1)*(ESTIMATION_STEPS-1)];
    float invM[ESTIMATION_STEPS*ESTIMATION_STEPS], dotM[ESTIMATION_STEPS*ESTIMATION_STEPS];
    */
    uint8_t i;
    float prev, succ, vel,acc, a;
    succ=0;
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    prev=0;
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    for(i = 0; i < 5; i++){
 80013de:	2300      	movs	r3, #0
 80013e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013e4:	e014      	b.n	8001410 <speed_estimation+0x50>
    	rbget(q_actual, i, &a);
 80013e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80013ea:	f107 0218 	add.w	r2, r7, #24
 80013ee:	4619      	mov	r1, r3
 80013f0:	6978      	ldr	r0, [r7, #20]
 80013f2:	f001 fd7b 	bl	8002eec <rbget>
    	prev+=a;
 80013f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80013fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80013fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001402:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for(i = 0; i < 5; i++){
 8001406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800140a:	3301      	adds	r3, #1
 800140c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001414:	2b04      	cmp	r3, #4
 8001416:	d9e6      	bls.n	80013e6 <speed_estimation+0x26>
    }
    for(i = 0; i < 5; i++){
 8001418:	2300      	movs	r3, #0
 800141a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800141e:	e017      	b.n	8001450 <speed_estimation+0x90>
    	rbget(q_actual, 5+i, &a);
 8001420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001424:	3305      	adds	r3, #5
 8001426:	b2db      	uxtb	r3, r3
 8001428:	b25b      	sxtb	r3, r3
 800142a:	f107 0218 	add.w	r2, r7, #24
 800142e:	4619      	mov	r1, r3
 8001430:	6978      	ldr	r0, [r7, #20]
 8001432:	f001 fd5b 	bl	8002eec <rbget>
    	succ+=a;
 8001436:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800143a:	edd7 7a06 	vldr	s15, [r7, #24]
 800143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001442:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i = 0; i < 5; i++){
 8001446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800144a:	3301      	adds	r3, #1
 800144c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001454:	2b04      	cmp	r3, #4
 8001456:	d9e3      	bls.n	8001420 <speed_estimation+0x60>
    }
    prev /=5;
 8001458:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800145c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    succ /=5;
 8001468:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800146c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001474:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


    /* filtering velocity with a first order filter  */

    rblast(dq_actual,&vel);
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	4619      	mov	r1, r3
 800147e:	6938      	ldr	r0, [r7, #16]
 8001480:	f001 fd04 	bl	8002e8c <rblast>


    *v_est=(0.8546*vel+((1-0.8546)*(succ-prev)/(T_C*5) )); //Prima non c'era il -
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f876 	bl	8000578 <__aeabi_f2d>
 800148c:	a33e      	add	r3, pc, #248	; (adr r3, 8001588 <speed_estimation+0x1c8>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f8c9 	bl	8000628 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4614      	mov	r4, r2
 800149c:	461d      	mov	r5, r3
 800149e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80014a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014aa:	ee17 0a90 	vmov	r0, s15
 80014ae:	f7ff f863 	bl	8000578 <__aeabi_f2d>
 80014b2:	a337      	add	r3, pc, #220	; (adr r3, 8001590 <speed_estimation+0x1d0>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f8b6 	bl	8000628 <__aeabi_dmul>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	a334      	add	r3, pc, #208	; (adr r3, 8001598 <speed_estimation+0x1d8>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f9d7 	bl	800087c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7fe fef1 	bl	80002bc <__adddf3>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fb99 	bl	8000c18 <__aeabi_d2f>
 80014e6:	4602      	mov	r2, r0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	601a      	str	r2, [r3, #0]

    /* filtering acceleration  with a first order filter  */


    rbget(dq_actual, RBUF_SZ-1, &succ);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	461a      	mov	r2, r3
 80014f2:	2163      	movs	r1, #99	; 0x63
 80014f4:	6938      	ldr	r0, [r7, #16]
 80014f6:	f001 fcf9 	bl	8002eec <rbget>
    rbget(dq_actual, RBUF_SZ-2, &prev);
 80014fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fe:	461a      	mov	r2, r3
 8001500:	2162      	movs	r1, #98	; 0x62
 8001502:	6938      	ldr	r0, [r7, #16]
 8001504:	f001 fcf2 	bl	8002eec <rbget>
    //*a_est = (succ-prev)/T_C;
    rblast(ddq_actual,&acc);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f001 fcbc 	bl	8002e8c <rblast>
    *a_est= 0.9245*acc+((1- 0.9245)*(succ-prev)/(T_C) );
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f82e 	bl	8000578 <__aeabi_f2d>
 800151c:	a320      	add	r3, pc, #128	; (adr r3, 80015a0 <speed_estimation+0x1e0>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f881 	bl	8000628 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4614      	mov	r4, r2
 800152c:	461d      	mov	r5, r3
 800152e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001532:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153a:	ee17 0a90 	vmov	r0, s15
 800153e:	f7ff f81b 	bl	8000578 <__aeabi_f2d>
 8001542:	a319      	add	r3, pc, #100	; (adr r3, 80015a8 <speed_estimation+0x1e8>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f86e 	bl	8000628 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	a316      	add	r3, pc, #88	; (adr r3, 80015b0 <speed_estimation+0x1f0>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7ff f98f 	bl	800087c <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fea9 	bl	80002bc <__adddf3>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb51 	bl	8000c18 <__aeabi_d2f>
 8001576:	4602      	mov	r2, r0
 8001578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800157a:	601a      	str	r2, [r3, #0]


}
 800157c:	bf00      	nop
 800157e:	3730      	adds	r7, #48	; 0x30
 8001580:	46bd      	mov	sp, r7
 8001582:	bdb0      	pop	{r4, r5, r7, pc}
 8001584:	f3af 8000 	nop.w
 8001588:	19652bd4 	.word	0x19652bd4
 800158c:	3feb58e2 	.word	0x3feb58e2
 8001590:	9a6b50b0 	.word	0x9a6b50b0
 8001594:	3fc29c77 	.word	0x3fc29c77
 8001598:	9999999a 	.word	0x9999999a
 800159c:	3fa99999 	.word	0x3fa99999
 80015a0:	0624dd2f 	.word	0x0624dd2f
 80015a4:	3fed9581 	.word	0x3fed9581
 80015a8:	ced91688 	.word	0xced91688
 80015ac:	3fb353f7 	.word	0x3fb353f7
 80015b0:	47ae147b 	.word	0x47ae147b
 80015b4:	3f847ae1 	.word	0x3f847ae1

080015b8 <init_rate>:
- uint32_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint32_t ms){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    rate->last_time = HAL_GetTick();
 80015c2:	f002 f8e5 	bl	8003790 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	601a      	str	r2, [r3, #0]
    rate->delta_time = ms;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	605a      	str	r2, [r3, #4]
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <rate_sleep>:
- rate_t \*rate: pointer to the rate struct;
@outputs: 
- void;
@#
*/
void rate_sleep(rate_t *rate){
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
    float now, interval;
    now = HAL_GetTick();
 80015e2:	f002 f8d5 	bl	8003790 <HAL_GetTick>
 80015e6:	ee07 0a90 	vmov	s15, r0
 80015ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ee:	edc7 7a03 	vstr	s15, [r7, #12]
    interval = (uint32_t) (now - rate->last_time); /* time passed from the last rate_sleep call */
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160e:	edc7 7a02 	vstr	s15, [r7, #8]
    /* wait until enough time has passed from the last rate_sleep call */
    if(interval < rate->delta_time){
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	d50f      	bpl.n	800164c <rate_sleep+0x72>
        HAL_Delay(rate->delta_time-interval);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001638:	edd7 7a02 	vldr	s15, [r7, #8]
 800163c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001644:	ee17 0a90 	vmov	r0, s15
 8001648:	f002 f8ae 	bl	80037a8 <HAL_Delay>
    }
    /* if enough time has passed, save the time stamp and go on with the process */
    rate->last_time = HAL_GetTick();
 800164c:	f002 f8a0 	bl	8003790 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
    return;
 8001656:	bf00      	nop
}
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <read_encoders>:
@inputs: 
- man_t \*manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void read_encoders(man_t *manip){
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    uint16_t counter; 
    float displacement1, displacement2;
    // float v_est, a_est; /* used to hold temporarily the estimations of speed and acceleration */
    TIM_HandleTypeDef *htim1, *htim2;

    htim1 = manip->htim_encoder1; /* pointer to the timer struct that decodes the first encoder output */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166e:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
 8001672:	613b      	str	r3, [r7, #16]
    htim2 = manip->htim_encoder2; /* pointer to the timer struct that decodes the first encoder output */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167a:	f8d3 363c 	ldr.w	r3, [r3, #1596]	; 0x63c
 800167e:	60fb      	str	r3, [r7, #12]

    /* first encoder */
    counter = (htim1->Instance->CNT);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim1->Instance->ARR){
 8001688:	8bfa      	ldrh	r2, [r7, #30]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	429a      	cmp	r2, r3
 8001692:	d309      	bcc.n	80016a8 <read_encoders+0x48>
        counter = (htim1->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	b29b      	uxth	r3, r3
 800169c:	3b01      	subs	r3, #1
 800169e:	83fb      	strh	r3, [r7, #30]
        htim1->Instance->CNT = counter; /* correct cnt value */
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	8bfa      	ldrh	r2, [r7, #30]
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    displacement1 = (float) (2*M_PI*counter/(htim1->Instance->ARR)-offset1);
 80016a8:	8bfb      	ldrh	r3, [r7, #30]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff52 	bl	8000554 <__aeabi_i2d>
 80016b0:	a389      	add	r3, pc, #548	; (adr r3, 80018d8 <read_encoders+0x278>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffb7 	bl	8000628 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff33 	bl	8000534 <__aeabi_ui2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4620      	mov	r0, r4
 80016d4:	4629      	mov	r1, r5
 80016d6:	f7ff f8d1 	bl	800087c <__aeabi_ddiv>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4614      	mov	r4, r2
 80016e0:	461d      	mov	r5, r3
 80016e2:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <read_encoders+0x290>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff46 	bl	8000578 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe fde0 	bl	80002b8 <__aeabi_dsub>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa8a 	bl	8000c18 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	61bb      	str	r3, [r7, #24]
    /* offset1 corrects the initial offset error */

    /* second encoder */
    counter = (htim2->Instance->CNT);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim2->Instance->ARR){
 8001710:	8bfa      	ldrh	r2, [r7, #30]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	429a      	cmp	r2, r3
 800171a:	d309      	bcc.n	8001730 <read_encoders+0xd0>
        counter = (htim2->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	b29b      	uxth	r3, r3
 8001724:	3b01      	subs	r3, #1
 8001726:	83fb      	strh	r3, [r7, #30]
        htim2->Instance->CNT = counter;  /* correct cnt value */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	8bfa      	ldrh	r2, [r7, #30]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    displacement2 = (float) ((2*M_PI) -  (2*M_PI*counter/(htim2->Instance->ARR))); /* the motor is upside down */
 8001730:	8bfb      	ldrh	r3, [r7, #30]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff0e 	bl	8000554 <__aeabi_i2d>
 8001738:	a367      	add	r3, pc, #412	; (adr r3, 80018d8 <read_encoders+0x278>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff73 	bl	8000628 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	461d      	mov	r5, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe feef 	bl	8000534 <__aeabi_ui2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7ff f88d 	bl	800087c <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	a15c      	add	r1, pc, #368	; (adr r1, 80018d8 <read_encoders+0x278>)
 8001768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800176c:	f7fe fda4 	bl	80002b8 <__aeabi_dsub>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff fa4e 	bl	8000c18 <__aeabi_d2f>
 800177c:	4603      	mov	r3, r0
 800177e:	617b      	str	r3, [r7, #20]
    //displacement2 = (float) (2*M_PI*counter/(htim2->Instance->ARR)-offset2);
    displacement2-=offset2;
 8001780:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <read_encoders+0x294>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	ed97 7a05 	vldr	s14, [r7, #20]
 800178a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178e:	edc7 7a05 	vstr	s15, [r7, #20]
    /* offset2 corrects the initial offset error */

    if(displacement1 > 2*M_PI){
 8001792:	69b8      	ldr	r0, [r7, #24]
 8001794:	f7fe fef0 	bl	8000578 <__aeabi_f2d>
 8001798:	a34f      	add	r3, pc, #316	; (adr r3, 80018d8 <read_encoders+0x278>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7ff f9d3 	bl	8000b48 <__aeabi_dcmpgt>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <read_encoders+0x14c>
    	displacement1 = 2*M_PI; /* clamping */
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <read_encoders+0x298>)
 80017aa:	61bb      	str	r3, [r7, #24]
	}
	if(displacement2 > 2*M_PI){
 80017ac:	6978      	ldr	r0, [r7, #20]
 80017ae:	f7fe fee3 	bl	8000578 <__aeabi_f2d>
 80017b2:	a349      	add	r3, pc, #292	; (adr r3, 80018d8 <read_encoders+0x278>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7ff f9c6 	bl	8000b48 <__aeabi_dcmpgt>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <read_encoders+0x166>
		displacement2 = 2*M_PI; /* clamping */
 80017c2:	4b4d      	ldr	r3, [pc, #308]	; (80018f8 <read_encoders+0x298>)
 80017c4:	617b      	str	r3, [r7, #20]
	}
	if(!is_home1 && !is_home2){
 80017c6:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <read_encoders+0x29c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d16f      	bne.n	80018ae <read_encoders+0x24e>
 80017ce:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <read_encoders+0x2a0>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d16b      	bne.n	80018ae <read_encoders+0x24e>
		if(displacement1 < -M_PI){
 80017d6:	69b8      	ldr	r0, [r7, #24]
 80017d8:	f7fe fece 	bl	8000578 <__aeabi_f2d>
 80017dc:	a340      	add	r3, pc, #256	; (adr r3, 80018e0 <read_encoders+0x280>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7ff f993 	bl	8000b0c <__aeabi_dcmplt>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00f      	beq.n	800180c <read_encoders+0x1ac>
			displacement1 = 2*M_PI+displacement1;  /* redefining the domain between -PI and +PI */
 80017ec:	69b8      	ldr	r0, [r7, #24]
 80017ee:	f7fe fec3 	bl	8000578 <__aeabi_f2d>
 80017f2:	a339      	add	r3, pc, #228	; (adr r3, 80018d8 <read_encoders+0x278>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe fd60 	bl	80002bc <__adddf3>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff fa08 	bl	8000c18 <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]
		}

		if(displacement2 < -M_PI){
 800180c:	6978      	ldr	r0, [r7, #20]
 800180e:	f7fe feb3 	bl	8000578 <__aeabi_f2d>
 8001812:	a333      	add	r3, pc, #204	; (adr r3, 80018e0 <read_encoders+0x280>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7ff f978 	bl	8000b0c <__aeabi_dcmplt>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00f      	beq.n	8001842 <read_encoders+0x1e2>
			displacement2 = 2*M_PI+displacement2; /* redefining the domain between -PI and +PI */
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7fe fea8 	bl	8000578 <__aeabi_f2d>
 8001828:	a32b      	add	r3, pc, #172	; (adr r3, 80018d8 <read_encoders+0x278>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe fd45 	bl	80002bc <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f9ed 	bl	8000c18 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	617b      	str	r3, [r7, #20]
		}

		if(displacement1 > M_PI){
 8001842:	69b8      	ldr	r0, [r7, #24]
 8001844:	f7fe fe98 	bl	8000578 <__aeabi_f2d>
 8001848:	a327      	add	r3, pc, #156	; (adr r3, 80018e8 <read_encoders+0x288>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7ff f97b 	bl	8000b48 <__aeabi_dcmpgt>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00f      	beq.n	8001878 <read_encoders+0x218>
			displacement1 = displacement1 - (2*M_PI); /* redefining the domain between -PI and +PI */
 8001858:	69b8      	ldr	r0, [r7, #24]
 800185a:	f7fe fe8d 	bl	8000578 <__aeabi_f2d>
 800185e:	a31e      	add	r3, pc, #120	; (adr r3, 80018d8 <read_encoders+0x278>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fd28 	bl	80002b8 <__aeabi_dsub>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f9d2 	bl	8000c18 <__aeabi_d2f>
 8001874:	4603      	mov	r3, r0
 8001876:	61bb      	str	r3, [r7, #24]
		}
		if(displacement2 > M_PI){
 8001878:	6978      	ldr	r0, [r7, #20]
 800187a:	f7fe fe7d 	bl	8000578 <__aeabi_f2d>
 800187e:	a31a      	add	r3, pc, #104	; (adr r3, 80018e8 <read_encoders+0x288>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7ff f960 	bl	8000b48 <__aeabi_dcmpgt>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00f      	beq.n	80018ae <read_encoders+0x24e>
			displacement2 = displacement2 - (2*M_PI); /* redefining the domain between -PI and +PI */
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	f7fe fe72 	bl	8000578 <__aeabi_f2d>
 8001894:	a310      	add	r3, pc, #64	; (adr r3, 80018d8 <read_encoders+0x278>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe fd0d 	bl	80002b8 <__aeabi_dsub>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f9b7 	bl	8000c18 <__aeabi_d2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	617b      	str	r3, [r7, #20]
		}
	}

	/* push the displacement values in the position ringbuffer */
    rbpush(&manip->q0_actual, displacement1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f603 330c 	addw	r3, r3, #2828	; 0xb0c
 80018b4:	ed97 0a06 	vldr	s0, [r7, #24]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 fa9f 	bl	8002dfc <rbpush>
    rbpush(&manip->q1_actual, displacement2);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80018c4:	ed97 0a05 	vldr	s0, [r7, #20]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 fa97 	bl	8002dfc <rbpush>
}
 80018ce:	bf00      	nop
 80018d0:	3720      	adds	r7, #32
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bdb0      	pop	{r4, r5, r7, pc}
 80018d6:	bf00      	nop
 80018d8:	54442d18 	.word	0x54442d18
 80018dc:	401921fb 	.word	0x401921fb
 80018e0:	54442d18 	.word	0x54442d18
 80018e4:	c00921fb 	.word	0xc00921fb
 80018e8:	54442d18 	.word	0x54442d18
 80018ec:	400921fb 	.word	0x400921fb
 80018f0:	200019c0 	.word	0x200019c0
 80018f4:	200019c4 	.word	0x200019c4
 80018f8:	40c90fdb 	.word	0x40c90fdb
 80018fc:	200019cc 	.word	0x200019cc
 8001900:	200019cd 	.word	0x200019cd

08001904 <update_speeds>:
@inputs:
- man_t \*manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void update_speeds(man_t *manip){
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b087      	sub	sp, #28
 8001908:	af02      	add	r7, sp, #8
 800190a:	6078      	str	r0, [r7, #4]
	float v_est, a_est;
	speed_estimation(&manip->q0_actual, &manip->dq0_actual,&manip->ddq0_actual, reduction1, &v_est, &a_est);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f603 300c 	addw	r0, r3, #2828	; 0xb0c
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f603 6134 	addw	r1, r3, #3636	; 0xe34
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f503 528a 	add.w	r2, r3, #4416	; 0x1140
 800191e:	321c      	adds	r2, #28
 8001920:	eddf 7a29 	vldr	s15, [pc, #164]	; 80019c8 <update_speeds+0xc4>
 8001924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001928:	f107 040c 	add.w	r4, r7, #12
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	4623      	mov	r3, r4
 8001934:	eeb0 0a67 	vmov.f32	s0, s15
 8001938:	f7ff fd42 	bl	80013c0 <speed_estimation>
	//disp1 = v_est;
	rbpush(&manip->dq0_actual, v_est);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f603 6334 	addw	r3, r3, #3636	; 0xe34
 8001942:	edd7 7a03 	vldr	s15, [r7, #12]
 8001946:	eeb0 0a67 	vmov.f32	s0, s15
 800194a:	4618      	mov	r0, r3
 800194c:	f001 fa56 	bl	8002dfc <rbpush>
	rbpush(&manip->ddq0_actual, a_est);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8001956:	331c      	adds	r3, #28
 8001958:	edd7 7a02 	vldr	s15, [r7, #8]
 800195c:	eeb0 0a67 	vmov.f32	s0, s15
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fa4b 	bl	8002dfc <rbpush>

	speed_estimation(&manip->q1_actual, &manip->dq1_actual,&manip->ddq1_actual, reduction2, &v_est, &a_est);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f503 604a 	add.w	r0, r3, #3232	; 0xca0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f603 71c8 	addw	r1, r3, #4040	; 0xfc8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f503 5297 	add.w	r2, r3, #4832	; 0x12e0
 8001978:	3210      	adds	r2, #16
 800197a:	eddf 7a14 	vldr	s15, [pc, #80]	; 80019cc <update_speeds+0xc8>
 800197e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001982:	f107 040c 	add.w	r4, r7, #12
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	4623      	mov	r3, r4
 800198e:	eeb0 0a67 	vmov.f32	s0, s15
 8001992:	f7ff fd15 	bl	80013c0 <speed_estimation>
	//disp2 = v_est;
	rbpush(&manip->dq1_actual, v_est);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f603 73c8 	addw	r3, r3, #4040	; 0xfc8
 800199c:	edd7 7a03 	vldr	s15, [r7, #12]
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fa29 	bl	8002dfc <rbpush>
	rbpush(&manip->ddq1_actual, a_est);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80019b0:	3310      	adds	r3, #16
 80019b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 fa1e 	bl	8002dfc <rbpush>
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	0000000a 	.word	0x0000000a
 80019cc:	00000005 	.word	0x00000005

080019d0 <apply_velocity_input>:
- float \*u: array of two floats containing the velocity inputs of the motors;
@outputs: 
- void;
@#
*/
void apply_velocity_input(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, float *u){
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
    int8_t dir1, dir2;
    uint32_t f;
    uint32_t ARR, CCR;
    uint32_t prescaler1, prescaler2;

    dir1 = u[0] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	bf4c      	ite	mi
 80019ec:	2301      	movmi	r3, #1
 80019ee:	2300      	movpl	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, dir1);
 80019f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019fa:	461a      	mov	r2, r3
 80019fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a00:	4879      	ldr	r0, [pc, #484]	; (8001be8 <apply_velocity_input+0x218>)
 8001a02:	f002 fd8d 	bl	8004520 <HAL_GPIO_WritePin>

    dir2 = u[1] > 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET; /* the second motor is upside-down */
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	bfcc      	ite	gt
 8001a18:	2301      	movgt	r3, #1
 8001a1a:	2300      	movle	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, dir2);
 8001a22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a26:	461a      	mov	r2, r3
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4870      	ldr	r0, [pc, #448]	; (8001bec <apply_velocity_input+0x21c>)
 8001a2c:	f002 fd78 	bl	8004520 <HAL_GPIO_WritePin>


	prescaler1 = (uint16_t)  5200; // 8400;//12000 ;//8400;
 8001a30:	f241 4350 	movw	r3, #5200	; 0x1450
 8001a34:	623b      	str	r3, [r7, #32]
	f = HAL_RCC_GetPCLK1Freq()*2;
 8001a36:	f003 fa2f 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
	ARR = ABS(u[0]) < 0.0001 ? 0:(uint32_t)  (RESOLUTION*f/(ABS(u[0])*reduction1*16*prescaler1));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	eef0 7ae7 	vabs.f32	s15, s15
 8001a4a:	ee17 0a90 	vmov	r0, s15
 8001a4e:	f7fe fd93 	bl	8000578 <__aeabi_f2d>
 8001a52:	a361      	add	r3, pc, #388	; (adr r3, 8001bd8 <apply_velocity_input+0x208>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7ff f858 	bl	8000b0c <__aeabi_dcmplt>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <apply_velocity_input+0x96>
 8001a62:	2300      	movs	r3, #0
 8001a64:	e033      	b.n	8001ace <apply_velocity_input+0xfe>
 8001a66:	69f8      	ldr	r0, [r7, #28]
 8001a68:	f7fe fd64 	bl	8000534 <__aeabi_ui2d>
 8001a6c:	a35c      	add	r3, pc, #368	; (adr r3, 8001be0 <apply_velocity_input+0x210>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fdd9 	bl	8000628 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	eeb0 7ae7 	vabs.f32	s14, s15
 8001a88:	230a      	movs	r3, #10
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a96:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001a9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aac:	ee17 0a90 	vmov	r0, s15
 8001ab0:	f7fe fd62 	bl	8000578 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4620      	mov	r0, r4
 8001aba:	4629      	mov	r1, r5
 8001abc:	f7fe fede 	bl	800087c <__aeabi_ddiv>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f7ff f886 	bl	8000bd8 <__aeabi_d2uiz>
 8001acc:	4603      	mov	r3, r0
 8001ace:	61bb      	str	r3, [r7, #24]
	CCR = ARR /2;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_PRESCALER(htim1, prescaler1); //2625
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a3a      	ldr	r2, [r7, #32]
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_TIM_SET_AUTORELOAD(htim1, ARR);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	635a      	str	r2, [r3, #52]	; 0x34
    htim1->Instance->EGR = TIM_EGR_UG;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2201      	movs	r2, #1
 8001afa:	615a      	str	r2, [r3, #20]

   	prescaler2 = (uint16_t)  8400; //12000 ;//8400;
 8001afc:	f242 03d0 	movw	r3, #8400	; 0x20d0
 8001b00:	613b      	str	r3, [r7, #16]
    f = HAL_RCC_GetPCLK1Freq()*2;
 8001b02:	f003 f9c9 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 8001b06:	4603      	mov	r3, r0
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
    ARR =  ABS(u[1]) < 0.0001 ? 0:(uint32_t)  (RESOLUTION*f/(ABS(u[1])*reduction2*16*prescaler2));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	eef0 7ae7 	vabs.f32	s15, s15
 8001b18:	ee17 0a90 	vmov	r0, s15
 8001b1c:	f7fe fd2c 	bl	8000578 <__aeabi_f2d>
 8001b20:	a32d      	add	r3, pc, #180	; (adr r3, 8001bd8 <apply_velocity_input+0x208>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe fff1 	bl	8000b0c <__aeabi_dcmplt>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <apply_velocity_input+0x164>
 8001b30:	2300      	movs	r3, #0
 8001b32:	e034      	b.n	8001b9e <apply_velocity_input+0x1ce>
 8001b34:	69f8      	ldr	r0, [r7, #28]
 8001b36:	f7fe fcfd 	bl	8000534 <__aeabi_ui2d>
 8001b3a:	a329      	add	r3, pc, #164	; (adr r3, 8001be0 <apply_velocity_input+0x210>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fd72 	bl	8000628 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4614      	mov	r4, r2
 8001b4a:	461d      	mov	r5, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b58:	2305      	movs	r3, #5
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b66:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001b6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7c:	ee17 0a90 	vmov	r0, s15
 8001b80:	f7fe fcfa 	bl	8000578 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f7fe fe76 	bl	800087c <__aeabi_ddiv>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f81e 	bl	8000bd8 <__aeabi_d2uiz>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	61bb      	str	r3, [r7, #24]
    CCR = ARR /2;
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
   	__HAL_TIM_SET_PRESCALER(htim2, prescaler2); //2625
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_TIM_SET_AUTORELOAD(htim2, ARR);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
    htim2->Instance->EGR = TIM_EGR_UG;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	615a      	str	r2, [r3, #20]
    return;
 8001bcc:	bf00      	nop
}
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	eb1c432d 	.word	0xeb1c432d
 8001bdc:	3f1a36e2 	.word	0x3f1a36e2
 8001be0:	ae261898 	.word	0xae261898
 8001be4:	3fa015be 	.word	0x3fa015be
 8001be8:	40020800 	.word	0x40020800
 8001bec:	40020000 	.word	0x40020000

08001bf0 <start_timers>:
- TIM_HandleTypeDef \*htim4: pointer to the fourth timer handler;
@outputs: 
- void;
@#
*/
void start_timers(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, TIM_HandleTypeDef *htim4){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
    HAL_TIM_Base_Start_IT(htim1);
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f003 f9c2 	bl	8004f88 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim2);
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f003 f9bf 	bl	8004f88 <HAL_TIM_Base_Start_IT>
    /* start motor PWM */
    HAL_TIM_Base_Start_IT(htim3);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f003 f9bc 	bl	8004f88 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim4);
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f003 f9b9 	bl	8004f88 <HAL_TIM_Base_Start_IT>
    /* start PWM */
    if(HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1) != HAL_OK){
 8001c16:	2100      	movs	r1, #0
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f003 fa67 	bl	80050ec <HAL_TIM_PWM_Start>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <start_timers+0x38>
        HardFault_Handler();
 8001c24:	f001 fbf5 	bl	8003412 <HardFault_Handler>
    }
    if(HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_1) != HAL_OK){
 8001c28:	2100      	movs	r1, #0
 8001c2a:	6838      	ldr	r0, [r7, #0]
 8001c2c:	f003 fa5e 	bl	80050ec <HAL_TIM_PWM_Start>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <start_timers+0x4a>
        HardFault_Handler();
 8001c36:	f001 fbec 	bl	8003412 <HardFault_Handler>
    }
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <log_data>:
- man_t \*manip: pointer to the man_t structure that holds all the manipulator data;
@outputs: 
- void;
@#
*/
void log_data(UART_HandleTypeDef *huart, man_t *manip){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
	uint32_t encoding_q0, encoding_q1;
    
    float q;
    rblast(&manip->q0_actual, &q);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f603 330c 	addw	r3, r3, #2828	; 0xb0c
 8001c54:	f107 020c 	add.w	r2, r7, #12
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 f916 	bl	8002e8c <rblast>
 8001c60:	68fb      	ldr	r3, [r7, #12]
    memcpy(&encoding_q0, &q, sizeof q);
 8001c62:	617b      	str	r3, [r7, #20]
    rblast(&manip->q1_actual, &q);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8001c6a:	f107 020c 	add.w	r2, r7, #12
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f001 f90b 	bl	8002e8c <rblast>
 8001c76:	68fb      	ldr	r3, [r7, #12]
    memcpy(&encoding_q1, &q, sizeof q);
 8001c78:	613b      	str	r3, [r7, #16]
    
    sprintf(tx_data, "0x%08x:0x%08x\n", encoding_q0  , encoding_q1);
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4906      	ldr	r1, [pc, #24]	; (8001c98 <log_data+0x54>)
 8001c80:	4806      	ldr	r0, [pc, #24]	; (8001c9c <log_data+0x58>)
 8001c82:	f006 fa0f 	bl	80080a4 <siprintf>
    
    HAL_UART_Transmit_DMA(huart, (uint8_t *) tx_data, sizeof tx_data); /* send encoder data for    purposes */
 8001c86:	2216      	movs	r2, #22
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <log_data+0x58>)
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f004 f878 	bl	8005d80 <HAL_UART_Transmit_DMA>
}
 8001c90:	bf00      	nop
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	0800a4e8 	.word	0x0800a4e8
 8001c9c:	20000274 	.word	0x20000274

08001ca0 <setup_encoders>:
- TIM_HandleTypeDef \*htim: pointer to the sampling timer handler;
@outputs: 
- void;
@#
*/
void setup_encoders(TIM_HandleTypeDef *htim){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	const uint32_t clock_freq = 84000000;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <setup_encoders+0x78>)
 8001caa:	60fb      	str	r3, [r7, #12]
	uint16_t ARR;
	ARR = (T_S*clock_freq)/PRESCALER_ENCODER;
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f7fe fc41 	bl	8000534 <__aeabi_ui2d>
 8001cb2:	a317      	add	r3, pc, #92	; (adr r3, 8001d10 <setup_encoders+0x70>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fcb6 	bl	8000628 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <setup_encoders+0x7c>)
 8001cca:	f7fe fdd7 	bl	800087c <__aeabi_ddiv>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f7fe ff7f 	bl	8000bd8 <__aeabi_d2uiz>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_PRESCALER(htim, PRESCALER_ENCODER);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	897a      	ldrh	r2, [r7, #10]
 8001cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cee:	897a      	ldrh	r2, [r7, #10]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]
	htim->Instance->EGR = TIM_EGR_UG;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f003 f943 	bl	8004f88 <HAL_TIM_Base_Start_IT>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	f3af 8000 	nop.w
 8001d10:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d14:	3f60624d 	.word	0x3f60624d
 8001d18:	0501bd00 	.word	0x0501bd00
 8001d1c:	40300000 	.word	0x40300000

08001d20 <PID_controller_position>:
- float \*u: pointer to the velocity output;
@outputs:
- void;
@#
*/
void PID_controller_position(man_t *manip, pid_controller_t *pid1,pid_controller_t *pid2, float *u){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]

	float set_point1,set_point2,measure1, measure2,u0,u1,tc0,tc1;

	rblast(&manip->q0,&set_point1);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f107 021c 	add.w	r2, r7, #28
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 f8a8 	bl	8002e8c <rblast>
	rblast(&manip->q1,&set_point2);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8001d42:	f107 0218 	add.w	r2, r7, #24
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 f89f 	bl	8002e8c <rblast>
    /*
	dq_actual0=set_point1;

    */

	ddq_actual1=set_point2;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4a81      	ldr	r2, [pc, #516]	; (8001f58 <PID_controller_position+0x238>)
 8001d52:	6013      	str	r3, [r2, #0]


	//set_point1=0;
	//set_point2=M_PI/6;

	rblast(&manip->q0_actual,&measure1);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f603 330c 	addw	r3, r3, #2828	; 0xb0c
 8001d5a:	f107 0214 	add.w	r2, r7, #20
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 f893 	bl	8002e8c <rblast>
	rblast(&manip->q1_actual,&measure2);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8001d6c:	f107 0210 	add.w	r2, r7, #16
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 f88a 	bl	8002e8c <rblast>

	//disp1=measure1;
	//disp2=measure2;

	PID_update(pid1,set_point1, measure1,T_C);
 8001d78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d80:	ed9f 1a76 	vldr	s2, [pc, #472]	; 8001f5c <PID_controller_position+0x23c>
 8001d84:	eef0 0a47 	vmov.f32	s1, s14
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	68b8      	ldr	r0, [r7, #8]
 8001d8e:	f000 ff45 	bl	8002c1c <PID_update>
	PID_update(pid2,set_point2, measure2,T_C);
 8001d92:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d96:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d9a:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8001f5c <PID_controller_position+0x23c>
 8001d9e:	eef0 0a47 	vmov.f32	s1, s14
 8001da2:	eeb0 0a67 	vmov.f32	s0, s15
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 ff38 	bl	8002c1c <PID_update>

	*u=pid1->out;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	601a      	str	r2, [r3, #0]
	*(u+1)=pid2->out;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	3304      	adds	r3, #4
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dbc:	601a      	str	r2, [r3, #0]

    if (ABS(u[0]-measure1)<0.01){
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dcc:	eef0 7ae7 	vabs.f32	s15, s15
 8001dd0:	ee17 0a90 	vmov	r0, s15
 8001dd4:	f7fe fbd0 	bl	8000578 <__aeabi_f2d>
 8001dd8:	a357      	add	r3, pc, #348	; (adr r3, 8001f38 <PID_controller_position+0x218>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	f7fe fe95 	bl	8000b0c <__aeabi_dcmplt>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <PID_controller_position+0xce>
        tc0= 1000000;
 8001de8:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <PID_controller_position+0x240>)
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dec:	e02c      	b.n	8001e48 <PID_controller_position+0x128>
    }else{
    tc0 = sqrt(2*M_PI*ABS(u[0]-measure1)/0.4); //1.05
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfc:	eef0 7ae7 	vabs.f32	s15, s15
 8001e00:	ee17 0a90 	vmov	r0, s15
 8001e04:	f7fe fbb8 	bl	8000578 <__aeabi_f2d>
 8001e08:	a34d      	add	r3, pc, #308	; (adr r3, 8001f40 <PID_controller_position+0x220>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fc0b 	bl	8000628 <__aeabi_dmul>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	a34b      	add	r3, pc, #300	; (adr r3, 8001f48 <PID_controller_position+0x228>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fd2c 	bl	800087c <__aeabi_ddiv>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	ec43 2b17 	vmov	d7, r2, r3
 8001e2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e30:	eef0 0a67 	vmov.f32	s1, s15
 8001e34:	f008 fa4e 	bl	800a2d4 <sqrt>
 8001e38:	ec53 2b10 	vmov	r2, r3, d0
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe feea 	bl	8000c18 <__aeabi_d2f>
 8001e44:	4603      	mov	r3, r0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (ABS(u[1]- measure2)<0.009){
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	ed93 7a00 	vldr	s14, [r3]
 8001e50:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e58:	eef0 7ae7 	vabs.f32	s15, s15
 8001e5c:	ee17 0a90 	vmov	r0, s15
 8001e60:	f7fe fb8a 	bl	8000578 <__aeabi_f2d>
 8001e64:	a33a      	add	r3, pc, #232	; (adr r3, 8001f50 <PID_controller_position+0x230>)
 8001e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6a:	f7fe fe4f 	bl	8000b0c <__aeabi_dcmplt>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <PID_controller_position+0x15a>
        tc1= 1000000;
 8001e74:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <PID_controller_position+0x240>)
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e78:	e02d      	b.n	8001ed6 <PID_controller_position+0x1b6>
    }else{
        tc1 = sqrt(2*M_PI*ABS(u[1]-measure2)/0.4);   //1.5 ----> come se fosse un jerk
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8a:	eef0 7ae7 	vabs.f32	s15, s15
 8001e8e:	ee17 0a90 	vmov	r0, s15
 8001e92:	f7fe fb71 	bl	8000578 <__aeabi_f2d>
 8001e96:	a32a      	add	r3, pc, #168	; (adr r3, 8001f40 <PID_controller_position+0x220>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	f7fe fbc4 	bl	8000628 <__aeabi_dmul>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	a327      	add	r3, pc, #156	; (adr r3, 8001f48 <PID_controller_position+0x228>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	f7fe fce5 	bl	800087c <__aeabi_ddiv>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	ec43 2b17 	vmov	d7, r2, r3
 8001eba:	eeb0 0a47 	vmov.f32	s0, s14
 8001ebe:	eef0 0a67 	vmov.f32	s1, s15
 8001ec2:	f008 fa07 	bl	800a2d4 <sqrt>
 8001ec6:	ec53 2b10 	vmov	r2, r3, d0
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7fe fea3 	bl	8000c18 <__aeabi_d2f>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    }


    ddq_actual0=set_point1;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <PID_controller_position+0x244>)
 8001eda:	6013      	str	r3, [r2, #0]
    disp2=u1;//debug
 8001edc:	4a22      	ldr	r2, [pc, #136]	; (8001f68 <PID_controller_position+0x248>)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	6013      	str	r3, [r2, #0]
    disp1=pid2->prev_err;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4a21      	ldr	r2, [pc, #132]	; (8001f6c <PID_controller_position+0x24c>)
 8001ee8:	6013      	str	r3, [r2, #0]

    u0=(u[0]-measure1)/tc0;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	ed93 7a00 	vldr	s14, [r3]
 8001ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ef8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f00:	edc7 7a08 	vstr	s15, [r7, #32]
    u1=(u[1]-measure2)/tc1;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	3304      	adds	r3, #4
 8001f08:	ed93 7a00 	vldr	s14, [r3]
 8001f0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f10:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f14:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    *u=u0;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6a3a      	ldr	r2, [r7, #32]
 8001f24:	601a      	str	r2, [r3, #0]
    *(u+1)=u1;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2c:	601a      	str	r2, [r3, #0]

    /* SECTION DEBUG */
    //ddq_actual0 = pid1->out;
   // ddq_actual1 = pid2->out;
    /* !SECTION DEBUG */
}
 8001f2e:	bf00      	nop
 8001f30:	3730      	adds	r7, #48	; 0x30
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	47ae147b 	.word	0x47ae147b
 8001f3c:	3f847ae1 	.word	0x3f847ae1
 8001f40:	54442d18 	.word	0x54442d18
 8001f44:	401921fb 	.word	0x401921fb
 8001f48:	9999999a 	.word	0x9999999a
 8001f4c:	3fd99999 	.word	0x3fd99999
 8001f50:	8d4fdf3b 	.word	0x8d4fdf3b
 8001f54:	3f826e97 	.word	0x3f826e97
 8001f58:	200019dc 	.word	0x200019dc
 8001f5c:	3c23d70a 	.word	0x3c23d70a
 8001f60:	49742400 	.word	0x49742400
 8001f64:	200019d8 	.word	0x200019d8
 8001f68:	200019d4 	.word	0x200019d4
 8001f6c:	200019d0 	.word	0x200019d0

08001f70 <PID_controller_velocity>:
- float u: velocity output
@outputs:
- void;
@#
*/
void PID_controller_velocity(man_t *manip, pid_controller_t *pid1,pid_controller_t *pid2, float *u){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]

	float set_point1,set_point2,measure1, measure2;

	rblast(&manip->dq0,&set_point1);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001f84:	f107 021c 	add.w	r2, r7, #28
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 ff7e 	bl	8002e8c <rblast>
	rblast(&manip->dq1,&set_point2);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8001f96:	f107 0218 	add.w	r2, r7, #24
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 ff75 	bl	8002e8c <rblast>

	//dq_actual0=set_point1;
	//ddq_actual1=set_point2;
    */

	rblast(&manip->dq0_actual,&measure1);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f603 6334 	addw	r3, r3, #3636	; 0xe34
 8001fa8:	f107 0214 	add.w	r2, r7, #20
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 ff6c 	bl	8002e8c <rblast>
	rblast(&manip->dq1_actual,&measure2);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f603 73c8 	addw	r3, r3, #4040	; 0xfc8
 8001fba:	f107 0210 	add.w	r2, r7, #16
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 ff63 	bl	8002e8c <rblast>

	//rblast(&manip->q0_actual,&disp1);
	//rblast(&manip->q1_actual,&disp2);


	PID_update(pid1, set_point1, measure1, T_C);
 8001fc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fca:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fce:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8002024 <PID_controller_velocity+0xb4>
 8001fd2:	eef0 0a47 	vmov.f32	s1, s14
 8001fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fda:	68b8      	ldr	r0, [r7, #8]
 8001fdc:	f000 fe1e 	bl	8002c1c <PID_update>
	PID_update(pid2, set_point2, measure2, T_C);
 8001fe0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fe4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fe8:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8002024 <PID_controller_velocity+0xb4>
 8001fec:	eef0 0a47 	vmov.f32	s1, s14
 8001ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fe11 	bl	8002c1c <PID_update>

    /* SECTION DEBUG */
	ddq_actual0=pid1->out;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <PID_controller_velocity+0xb8>)
 8002000:	6013      	str	r3, [r2, #0]
	ddq_actual1=pid2->out;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <PID_controller_velocity+0xbc>)
 8002008:	6013      	str	r3, [r2, #0]
    /* !SECTION DEBUG*/

	*u=pid1->out;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	601a      	str	r2, [r3, #0]
	*(u+1)=pid2->out;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3304      	adds	r3, #4
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800201a:	601a      	str	r2, [r3, #0]
}
 800201c:	bf00      	nop
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	3c23d70a 	.word	0x3c23d70a
 8002028:	200019d8 	.word	0x200019d8
 800202c:	200019dc 	.word	0x200019dc

08002030 <homing>:
@outputs:
- void;
@#
*/

void homing(man_t *manip,TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, pid_controller_t *pid_v1,pid_controller_t *pid_v2, pid_controller_t *pid_p1, pid_controller_t *pid_p2){
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]

    float u[2]={0, 0};
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	623b      	str	r3, [r7, #32]
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    float pos[2]={0, 0};
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    float pos_real[2]={-2.11350, 2.39353 };
 8002056:	4aac      	ldr	r2, [pc, #688]	; (8002308 <homing+0x2d8>)
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002060:	e883 0003 	stmia.w	r3, {r0, r1}


    is_home1=1;
 8002064:	4ba9      	ldr	r3, [pc, #676]	; (800230c <homing+0x2dc>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
    is_home2=1;
 800206a:	4ba9      	ldr	r3, [pc, #676]	; (8002310 <homing+0x2e0>)
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]

    limit_switch1=0;
 8002070:	4ba8      	ldr	r3, [pc, #672]	; (8002314 <homing+0x2e4>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    limit_switch2=0;
 8002076:	4ba8      	ldr	r3, [pc, #672]	; (8002318 <homing+0x2e8>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

    offset1=0;
 800207c:	4ba7      	ldr	r3, [pc, #668]	; (800231c <homing+0x2ec>)
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    offset2=0;
 8002084:	4ba6      	ldr	r3, [pc, #664]	; (8002320 <homing+0x2f0>)
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

	/*apply velocity input*/
	while(!limit_switch1 ){
 800208c:	e023      	b.n	80020d6 <homing+0xa6>

        rbpush(&manip->dq0,-0.7);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002094:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8002324 <homing+0x2f4>
 8002098:	4618      	mov	r0, r3
 800209a:	f000 feaf 	bl	8002dfc <rbpush>
        rbpush(&manip->dq1,0);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 80020a4:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8002328 <homing+0x2f8>
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fea7 	bl	8002dfc <rbpush>
        update_speeds(manip);
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f7ff fc28 	bl	8001904 <update_speeds>
        PID_controller_velocity( manip, pid_v1, pid_v2, u);
 80020b4:	f107 0320 	add.w	r3, r7, #32
 80020b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ba:	6839      	ldr	r1, [r7, #0]
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7ff ff57 	bl	8001f70 <PID_controller_velocity>
        apply_velocity_input(htim1, htim2, u);
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	461a      	mov	r2, r3
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	68b8      	ldr	r0, [r7, #8]
 80020cc:	f7ff fc80 	bl	80019d0 <apply_velocity_input>

        HAL_Delay((uint32_t) (T_C*1000));
 80020d0:	200a      	movs	r0, #10
 80020d2:	f001 fb69 	bl	80037a8 <HAL_Delay>
	while(!limit_switch1 ){
 80020d6:	4b8f      	ldr	r3, [pc, #572]	; (8002314 <homing+0x2e4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0d7      	beq.n	800208e <homing+0x5e>
	}



	u[0]=0;
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
	u[1]=0;
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
	apply_velocity_input(htim1, htim2, u);
 80020ea:	f107 0320 	add.w	r3, r7, #32
 80020ee:	461a      	mov	r2, r3
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	68b8      	ldr	r0, [r7, #8]
 80020f4:	f7ff fc6c 	bl	80019d0 <apply_velocity_input>

	while(!limit_switch2 ){
 80020f8:	e023      	b.n	8002142 <homing+0x112>
        rbpush(&manip->dq0,0);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8002100:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8002328 <homing+0x2f8>
 8002104:	4618      	mov	r0, r3
 8002106:	f000 fe79 	bl	8002dfc <rbpush>
        rbpush(&manip->dq1,0.7);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8002110:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800232c <homing+0x2fc>
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fe71 	bl	8002dfc <rbpush>

		update_speeds(manip);
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff fbf2 	bl	8001904 <update_speeds>
		PID_controller_velocity( manip, pid_v1, pid_v2, u);
 8002120:	f107 0320 	add.w	r3, r7, #32
 8002124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f7ff ff21 	bl	8001f70 <PID_controller_velocity>
		apply_velocity_input(htim1, htim2, u);
 800212e:	f107 0320 	add.w	r3, r7, #32
 8002132:	461a      	mov	r2, r3
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68b8      	ldr	r0, [r7, #8]
 8002138:	f7ff fc4a 	bl	80019d0 <apply_velocity_input>

		HAL_Delay((uint32_t) (T_C*1000));
 800213c:	200a      	movs	r0, #10
 800213e:	f001 fb33 	bl	80037a8 <HAL_Delay>
	while(!limit_switch2 ){
 8002142:	4b75      	ldr	r3, [pc, #468]	; (8002318 <homing+0x2e8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0d7      	beq.n	80020fa <homing+0xca>
	}



	printf(" primo while \n");
 800214a:	4879      	ldr	r0, [pc, #484]	; (8002330 <homing+0x300>)
 800214c:	f005 ff92 	bl	8008074 <puts>
	fflush(stdout);
 8002150:	4b78      	ldr	r3, [pc, #480]	; (8002334 <homing+0x304>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4618      	mov	r0, r3
 8002158:	f005 f876 	bl	8007248 <fflush>

	limit_switch1=0;
 800215c:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <homing+0x2e4>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
	limit_switch2=0;
 8002162:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <homing+0x2e8>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

	u[0]=0;
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
	u[1]=0;
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
	apply_velocity_input(htim1, htim2, u);
 8002174:	f107 0320 	add.w	r3, r7, #32
 8002178:	461a      	mov	r2, r3
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	68b8      	ldr	r0, [r7, #8]
 800217e:	f7ff fc27 	bl	80019d0 <apply_velocity_input>

	printf(" WHILE: offset2: %f \n ",offset2);
 8002182:	4b67      	ldr	r3, [pc, #412]	; (8002320 <homing+0x2f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f9f6 	bl	8000578 <__aeabi_f2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4869      	ldr	r0, [pc, #420]	; (8002338 <homing+0x308>)
 8002192:	f005 fee9 	bl	8007f68 <iprintf>
	fflush(stdout);
 8002196:	4b67      	ldr	r3, [pc, #412]	; (8002334 <homing+0x304>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4618      	mov	r0, r3
 800219e:	f005 f853 	bl	8007248 <fflush>

    offset1-=pos_real[0];
 80021a2:	4b5e      	ldr	r3, [pc, #376]	; (800231c <homing+0x2ec>)
 80021a4:	ed93 7a00 	vldr	s14, [r3]
 80021a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b0:	4b5a      	ldr	r3, [pc, #360]	; (800231c <homing+0x2ec>)
 80021b2:	edc3 7a00 	vstr	s15, [r3]
    offset2-=pos_real[1];
 80021b6:	4b5a      	ldr	r3, [pc, #360]	; (8002320 <homing+0x2f0>)
 80021b8:	ed93 7a00 	vldr	s14, [r3]
 80021bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80021c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c4:	4b56      	ldr	r3, [pc, #344]	; (8002320 <homing+0x2f0>)
 80021c6:	edc3 7a00 	vstr	s15, [r3]
    rblast(&manip->q0_actual,&pos[0]);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f603 330c 	addw	r3, r3, #2828	; 0xb0c
 80021d0:	f107 0218 	add.w	r2, r7, #24
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fe58 	bl	8002e8c <rblast>
    rblast(&manip->q1_actual,&pos[1]);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 80021e2:	f107 0318 	add.w	r3, r7, #24
 80021e6:	3304      	adds	r3, #4
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f000 fe4e 	bl	8002e8c <rblast>


    printf("pos_real[1]: %f \n",pos_real[1]);
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f9c0 	bl	8000578 <__aeabi_f2d>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	484f      	ldr	r0, [pc, #316]	; (800233c <homing+0x30c>)
 80021fe:	f005 feb3 	bl	8007f68 <iprintf>
    printf("pos[0]: %f \n",pos[0]);
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe f9b7 	bl	8000578 <__aeabi_f2d>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	484c      	ldr	r0, [pc, #304]	; (8002340 <homing+0x310>)
 8002210:	f005 feaa 	bl	8007f68 <iprintf>
    printf("pos[1]: %f \n",pos[1]);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f9ae 	bl	8000578 <__aeabi_f2d>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4848      	ldr	r0, [pc, #288]	; (8002344 <homing+0x314>)
 8002222:	f005 fea1 	bl	8007f68 <iprintf>
    fflush(stdout);
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <homing+0x304>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4618      	mov	r0, r3
 800222e:	f005 f80b 	bl	8007248 <fflush>

	while(1){

	if((ABS(pos[0])> 0.001) || (ABS(pos[1])> 0.001)){
 8002232:	edd7 7a06 	vldr	s15, [r7, #24]
 8002236:	eef0 7ae7 	vabs.f32	s15, s15
 800223a:	ee17 0a90 	vmov	r0, s15
 800223e:	f7fe f99b 	bl	8000578 <__aeabi_f2d>
 8002242:	a32f      	add	r3, pc, #188	; (adr r3, 8002300 <homing+0x2d0>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	f7fe fc7e 	bl	8000b48 <__aeabi_dcmpgt>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <homing+0x242>
 8002252:	edd7 7a07 	vldr	s15, [r7, #28]
 8002256:	eef0 7ae7 	vabs.f32	s15, s15
 800225a:	ee17 0a90 	vmov	r0, s15
 800225e:	f7fe f98b 	bl	8000578 <__aeabi_f2d>
 8002262:	a327      	add	r3, pc, #156	; (adr r3, 8002300 <homing+0x2d0>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe fc6e 	bl	8000b48 <__aeabi_dcmpgt>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d024      	beq.n	80022bc <homing+0x28c>

		PID_controller_position( manip, pid_p1, pid_p2, u);
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002278:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff fd50 	bl	8001d20 <PID_controller_position>
		apply_velocity_input(htim1, htim2,  u);
 8002280:	f107 0320 	add.w	r3, r7, #32
 8002284:	461a      	mov	r2, r3
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	68b8      	ldr	r0, [r7, #8]
 800228a:	f7ff fba1 	bl	80019d0 <apply_velocity_input>
		rblast(&manip->q0_actual,&pos[0]);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f603 330c 	addw	r3, r3, #2828	; 0xb0c
 8002294:	f107 0218 	add.w	r2, r7, #24
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fdf6 	bl	8002e8c <rblast>
		rblast(&manip->q1_actual,&pos[1]);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 80022a6:	f107 0318 	add.w	r3, r7, #24
 80022aa:	3304      	adds	r3, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f000 fdec 	bl	8002e8c <rblast>
		HAL_Delay((uint32_t) (T_C*1000));
 80022b4:	200a      	movs	r0, #10
 80022b6:	f001 fa77 	bl	80037a8 <HAL_Delay>
	if((ABS(pos[0])> 0.001) || (ABS(pos[1])> 0.001)){
 80022ba:	e7ba      	b.n	8002232 <homing+0x202>
	}
}



	u[0]=0;
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
	u[1]=0;
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
	apply_velocity_input(htim1, htim2, u);
 80022c8:	f107 0320 	add.w	r3, r7, #32
 80022cc:	461a      	mov	r2, r3
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	68b8      	ldr	r0, [r7, #8]
 80022d2:	f7ff fb7d 	bl	80019d0 <apply_velocity_input>

	//is_home1=0;
	//is_home2=0;

	limit_switch1=0;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <homing+0x2e4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
	limit_switch2=0;
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <homing+0x2e8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
	printf("  end homing \n");
 80022e2:	4819      	ldr	r0, [pc, #100]	; (8002348 <homing+0x318>)
 80022e4:	f005 fec6 	bl	8008074 <puts>
	fflush(stdout);
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <homing+0x304>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 ffaa 	bl	8007248 <fflush>
}
 80022f4:	bf00      	nop
 80022f6:	3728      	adds	r7, #40	; 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	f3af 8000 	nop.w
 8002300:	d2f1a9fc 	.word	0xd2f1a9fc
 8002304:	3f50624d 	.word	0x3f50624d
 8002308:	0800a564 	.word	0x0800a564
 800230c:	200019cc 	.word	0x200019cc
 8002310:	200019cd 	.word	0x200019cd
 8002314:	200019c8 	.word	0x200019c8
 8002318:	20000000 	.word	0x20000000
 800231c:	200019c0 	.word	0x200019c0
 8002320:	200019c4 	.word	0x200019c4
 8002324:	bf333333 	.word	0xbf333333
 8002328:	00000000 	.word	0x00000000
 800232c:	3f333333 	.word	0x3f333333
 8002330:	0800a4f8 	.word	0x0800a4f8
 8002334:	20000010 	.word	0x20000010
 8002338:	0800a508 	.word	0x0800a508
 800233c:	0800a520 	.word	0x0800a520
 8002340:	0800a534 	.word	0x0800a534
 8002344:	0800a544 	.word	0x0800a544
 8002348:	0800a554 	.word	0x0800a554

0800234c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  rate_t rate;
  float v[2], v_est, a_est;
  char *data = "\n";
 8002352:	4b74      	ldr	r3, [pc, #464]	; (8002524 <main+0x1d8>)
 8002354:	61fb      	str	r3, [r7, #28]
  float i = 1*T_C;
 8002356:	4b74      	ldr	r3, [pc, #464]	; (8002528 <main+0x1dc>)
 8002358:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800235a:	f001 f9b3 	bl	80036c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800235e:	f000 f921 	bl	80025a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002362:	f000 fb59 	bl	8002a18 <MX_GPIO_Init>
  MX_DMA_Init();
 8002366:	f000 fb2f 	bl	80029c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800236a:	f000 fb03 	bl	8002974 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800236e:	f000 f9db 	bl	8002728 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002372:	f000 fa2d 	bl	80027d0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002376:	f000 f97f 	bl	8002678 <MX_TIM2_Init>
  MX_TIM5_Init();
 800237a:	f000 fa7d 	bl	8002878 <MX_TIM5_Init>
  MX_TIM10_Init();
 800237e:	f000 fad5 	bl	800292c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip, &htim3, &htim4,&htim2,&htim5); /* initialize the manipulator struct */
 8002382:	4b6a      	ldr	r3, [pc, #424]	; (800252c <main+0x1e0>)
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <main+0x1e4>)
 8002388:	4a6a      	ldr	r2, [pc, #424]	; (8002534 <main+0x1e8>)
 800238a:	496b      	ldr	r1, [pc, #428]	; (8002538 <main+0x1ec>)
 800238c:	486b      	ldr	r0, [pc, #428]	; (800253c <main+0x1f0>)
 800238e:	f7fe ffbf 	bl	8001310 <init_man>

  /* PID controllers*/

  PID_init(&pid_pos1,KP_P1,TI_P1,TD_P1,N1,0); /*initialize the PID controllers for position*/
 8002392:	2100      	movs	r1, #0
 8002394:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8002398:	ed9f 1a69 	vldr	s2, [pc, #420]	; 8002540 <main+0x1f4>
 800239c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80023a0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80023a4:	4867      	ldr	r0, [pc, #412]	; (8002544 <main+0x1f8>)
 80023a6:	f000 fbd6 	bl	8002b56 <PID_init>
  PID_init(&pid_pos2,KP_P2,TI_P2,TD_P2,N2,0);
 80023aa:	2100      	movs	r1, #0
 80023ac:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80023b0:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8002540 <main+0x1f4>
 80023b4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80023b8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80023bc:	4862      	ldr	r0, [pc, #392]	; (8002548 <main+0x1fc>)
 80023be:	f000 fbca 	bl	8002b56 <PID_init>

  set_limit(&pid_pos1,-4*M_PI,4*M_PI,-M_PI/2,M_PI/2);/*initialize the PID controllers output limits*/
 80023c2:	eddf 1a62 	vldr	s3, [pc, #392]	; 800254c <main+0x200>
 80023c6:	ed9f 1a62 	vldr	s2, [pc, #392]	; 8002550 <main+0x204>
 80023ca:	eddf 0a62 	vldr	s1, [pc, #392]	; 8002554 <main+0x208>
 80023ce:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8002558 <main+0x20c>
 80023d2:	485c      	ldr	r0, [pc, #368]	; (8002544 <main+0x1f8>)
 80023d4:	f000 fc02 	bl	8002bdc <set_limit>
  set_limit(&pid_pos2,-8*M_PI,8*M_PI,-6*(M_PI/2),6*(M_PI/2));
 80023d8:	eddf 1a60 	vldr	s3, [pc, #384]	; 800255c <main+0x210>
 80023dc:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8002560 <main+0x214>
 80023e0:	eddf 0a60 	vldr	s1, [pc, #384]	; 8002564 <main+0x218>
 80023e4:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8002568 <main+0x21c>
 80023e8:	4857      	ldr	r0, [pc, #348]	; (8002548 <main+0x1fc>)
 80023ea:	f000 fbf7 	bl	8002bdc <set_limit>

  /* PI controllers*/
  PID_init(&pid_vel1,KP_V1,TI_V1,0,N1,1); /*initialize the PI controllers for velocity*/
 80023ee:	2101      	movs	r1, #1
 80023f0:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80023f4:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 800256c <main+0x220>
 80023f8:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8002570 <main+0x224>
 80023fc:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8002574 <main+0x228>
 8002400:	485d      	ldr	r0, [pc, #372]	; (8002578 <main+0x22c>)
 8002402:	f000 fba8 	bl	8002b56 <PID_init>
  PID_init(&pid_vel2,KP_V2,TI_V2,0,N2,1);
 8002406:	2101      	movs	r1, #1
 8002408:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 800240c:	ed9f 1a57 	vldr	s2, [pc, #348]	; 800256c <main+0x220>
 8002410:	eddf 0a57 	vldr	s1, [pc, #348]	; 8002570 <main+0x224>
 8002414:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8002574 <main+0x228>
 8002418:	4858      	ldr	r0, [pc, #352]	; (800257c <main+0x230>)
 800241a:	f000 fb9c 	bl	8002b56 <PID_init>

  set_limit(&pid_vel1,-4*M_PI,4*M_PI,-M_PI/2,M_PI/2);/*initialize the PI controllers output limits*/
 800241e:	eddf 1a4b 	vldr	s3, [pc, #300]	; 800254c <main+0x200>
 8002422:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8002550 <main+0x204>
 8002426:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8002554 <main+0x208>
 800242a:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8002558 <main+0x20c>
 800242e:	4852      	ldr	r0, [pc, #328]	; (8002578 <main+0x22c>)
 8002430:	f000 fbd4 	bl	8002bdc <set_limit>
  set_limit(&pid_vel2,-8*M_PI,8*M_PI,-6*(M_PI/2),6*(M_PI/2));
 8002434:	eddf 1a49 	vldr	s3, [pc, #292]	; 800255c <main+0x210>
 8002438:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8002560 <main+0x214>
 800243c:	eddf 0a49 	vldr	s1, [pc, #292]	; 8002564 <main+0x218>
 8002440:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8002568 <main+0x21c>
 8002444:	484d      	ldr	r0, [pc, #308]	; (800257c <main+0x230>)
 8002446:	f000 fbc9 	bl	8002bdc <set_limit>



  init_rate(&rate, (uint32_t) (T_C*1000)); /* initialize the rate struct */
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	210a      	movs	r1, #10
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff f8b1 	bl	80015b8 <init_rate>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8002456:	2278      	movs	r2, #120	; 0x78
 8002458:	4949      	ldr	r1, [pc, #292]	; (8002580 <main+0x234>)
 800245a:	484a      	ldr	r0, [pc, #296]	; (8002584 <main+0x238>)
 800245c:	f003 fd0e 	bl	8005e7c <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* start timers */
  start_timers(&htim3, &htim4, &htim2, &htim5);
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <main+0x1e0>)
 8002462:	4a33      	ldr	r2, [pc, #204]	; (8002530 <main+0x1e4>)
 8002464:	4933      	ldr	r1, [pc, #204]	; (8002534 <main+0x1e8>)
 8002466:	4834      	ldr	r0, [pc, #208]	; (8002538 <main+0x1ec>)
 8002468:	f7ff fbc2 	bl	8001bf0 <start_timers>
  setup_encoders(&htim10);
 800246c:	4846      	ldr	r0, [pc, #280]	; (8002588 <main+0x23c>)
 800246e:	f7ff fc17 	bl	8001ca0 <setup_encoders>
  //homing(&manip, &htim2, &htim5, &pid_vel1, &pid_vel2);

  while (1)
  {
    if (homing_triggered){
 8002472:	4b46      	ldr	r3, [pc, #280]	; (800258c <main+0x240>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d01e      	beq.n	80024b8 <main+0x16c>
      init_man(&manip, &htim3, &htim4,&htim2,&htim5);
 800247a:	4b2c      	ldr	r3, [pc, #176]	; (800252c <main+0x1e0>)
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <main+0x1e4>)
 8002480:	4a2c      	ldr	r2, [pc, #176]	; (8002534 <main+0x1e8>)
 8002482:	492d      	ldr	r1, [pc, #180]	; (8002538 <main+0x1ec>)
 8002484:	482d      	ldr	r0, [pc, #180]	; (800253c <main+0x1f0>)
 8002486:	f7fe ff43 	bl	8001310 <init_man>
      homing(&manip, manip.htim_motor1, manip.htim_motor2, &pid_vel1, &pid_vel2,&pid_pos1,&pid_pos2);
 800248a:	4b2c      	ldr	r3, [pc, #176]	; (800253c <main+0x1f0>)
 800248c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002490:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <main+0x1f0>)
 8002496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249a:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
 800249e:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <main+0x1fc>)
 80024a0:	9302      	str	r3, [sp, #8]
 80024a2:	4b28      	ldr	r3, [pc, #160]	; (8002544 <main+0x1f8>)
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	4b35      	ldr	r3, [pc, #212]	; (800257c <main+0x230>)
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	4b33      	ldr	r3, [pc, #204]	; (8002578 <main+0x22c>)
 80024ac:	4823      	ldr	r0, [pc, #140]	; (800253c <main+0x1f0>)
 80024ae:	f7ff fdbf 	bl	8002030 <homing>
      homing_triggered=0;
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <main+0x240>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    }

    update_speeds(&manip);
 80024b8:	4820      	ldr	r0, [pc, #128]	; (800253c <main+0x1f0>)
 80024ba:	f7ff fa23 	bl	8001904 <update_speeds>
    
    /* log data */
    if(log_triggered){
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <main+0x244>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00f      	beq.n	80024e6 <main+0x19a>
      log_data(&huart2, &manip);
 80024c6:	491d      	ldr	r1, [pc, #116]	; (800253c <main+0x1f0>)
 80024c8:	482e      	ldr	r0, [pc, #184]	; (8002584 <main+0x238>)
 80024ca:	f7ff fbbb 	bl	8001c44 <log_data>
      printf("logData");
 80024ce:	4831      	ldr	r0, [pc, #196]	; (8002594 <main+0x248>)
 80024d0:	f005 fd4a 	bl	8007f68 <iprintf>
      fflush(stdout);
 80024d4:	4b30      	ldr	r3, [pc, #192]	; (8002598 <main+0x24c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4618      	mov	r0, r3
 80024dc:	f004 feb4 	bl	8007248 <fflush>
      log_triggered = 0;
 80024e0:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <main+0x244>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
    }

    PID_controller_position( &manip, &pid_pos1, &pid_pos2, v);
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	4a17      	ldr	r2, [pc, #92]	; (8002548 <main+0x1fc>)
 80024ec:	4915      	ldr	r1, [pc, #84]	; (8002544 <main+0x1f8>)
 80024ee:	4813      	ldr	r0, [pc, #76]	; (800253c <main+0x1f0>)
 80024f0:	f7ff fc16 	bl	8001d20 <PID_controller_position>



    rblast(&manip.q0_actual,&pos[0]);
 80024f4:	463b      	mov	r3, r7
 80024f6:	4619      	mov	r1, r3
 80024f8:	4828      	ldr	r0, [pc, #160]	; (800259c <main+0x250>)
 80024fa:	f000 fcc7 	bl	8002e8c <rblast>
    rblast(&manip.q1_actual,&pos[1]);
 80024fe:	463b      	mov	r3, r7
 8002500:	3304      	adds	r3, #4
 8002502:	4619      	mov	r1, r3
 8002504:	4826      	ldr	r0, [pc, #152]	; (80025a0 <main+0x254>)
 8002506:	f000 fcc1 	bl	8002e8c <rblast>




    /* apply the inputs to the motors */
    apply_velocity_input(&htim2, &htim5, v, pos);
 800250a:	463b      	mov	r3, r7
 800250c:	f107 0208 	add.w	r2, r7, #8
 8002510:	4906      	ldr	r1, [pc, #24]	; (800252c <main+0x1e0>)
 8002512:	4807      	ldr	r0, [pc, #28]	; (8002530 <main+0x1e4>)
 8002514:	f7ff fa5c 	bl	80019d0 <apply_velocity_input>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    rate_sleep(&rate); /* wait with a fixed frequency */
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff f85c 	bl	80015da <rate_sleep>
  {
 8002522:	e7a6      	b.n	8002472 <main+0x126>
 8002524:	0800a56c 	.word	0x0800a56c
 8002528:	3c23d70a 	.word	0x3c23d70a
 800252c:	20001ab8 	.word	0x20001ab8
 8002530:	200019e0 	.word	0x200019e0
 8002534:	20001a70 	.word	0x20001a70
 8002538:	20001a28 	.word	0x20001a28
 800253c:	2000028c 	.word	0x2000028c
 8002540:	3bf5c28f 	.word	0x3bf5c28f
 8002544:	200018d4 	.word	0x200018d4
 8002548:	2000190c 	.word	0x2000190c
 800254c:	3fc90fdb 	.word	0x3fc90fdb
 8002550:	bfc90fdb 	.word	0xbfc90fdb
 8002554:	41490fdb 	.word	0x41490fdb
 8002558:	c1490fdb 	.word	0xc1490fdb
 800255c:	4116cbe4 	.word	0x4116cbe4
 8002560:	c116cbe4 	.word	0xc116cbe4
 8002564:	41c90fdb 	.word	0x41c90fdb
 8002568:	c1c90fdb 	.word	0xc1c90fdb
 800256c:	00000000 	.word	0x00000000
 8002570:	3f23d70a 	.word	0x3f23d70a
 8002574:	3e94fdf4 	.word	0x3e94fdf4
 8002578:	20001944 	.word	0x20001944
 800257c:	2000197c 	.word	0x2000197c
 8002580:	200001fc 	.word	0x200001fc
 8002584:	20001b48 	.word	0x20001b48
 8002588:	20001b00 	.word	0x20001b00
 800258c:	200019ce 	.word	0x200019ce
 8002590:	200019cf 	.word	0x200019cf
 8002594:	0800a570 	.word	0x0800a570
 8002598:	20000010 	.word	0x20000010
 800259c:	20000d98 	.word	0x20000d98
 80025a0:	20000f2c 	.word	0x20000f2c

080025a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b094      	sub	sp, #80	; 0x50
 80025a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025aa:	f107 0320 	add.w	r3, r7, #32
 80025ae:	2230      	movs	r2, #48	; 0x30
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 ff85 	bl	80074c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	4b28      	ldr	r3, [pc, #160]	; (8002670 <SystemClock_Config+0xcc>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <SystemClock_Config+0xcc>)
 80025d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <SystemClock_Config+0xcc>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <SystemClock_Config+0xd0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a21      	ldr	r2, [pc, #132]	; (8002674 <SystemClock_Config+0xd0>)
 80025ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <SystemClock_Config+0xd0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002600:	2302      	movs	r3, #2
 8002602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002604:	2301      	movs	r3, #1
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002608:	2310      	movs	r3, #16
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800260c:	2302      	movs	r3, #2
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002610:	2300      	movs	r3, #0
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002614:	2310      	movs	r3, #16
 8002616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002618:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800261c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800261e:	2304      	movs	r3, #4
 8002620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002622:	2304      	movs	r3, #4
 8002624:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002626:	f107 0320 	add.w	r3, r7, #32
 800262a:	4618      	mov	r0, r3
 800262c:	f001 ffc4 	bl	80045b8 <HAL_RCC_OscConfig>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002636:	f000 fa89 	bl	8002b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800263a:	230f      	movs	r3, #15
 800263c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800263e:	2302      	movs	r3, #2
 8002640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	2102      	movs	r1, #2
 8002656:	4618      	mov	r0, r3
 8002658:	f002 fa26 	bl	8004aa8 <HAL_RCC_ClockConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002662:	f000 fa73 	bl	8002b4c <Error_Handler>
  }
}
 8002666:	bf00      	nop
 8002668:	3750      	adds	r7, #80	; 0x50
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000

08002678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800267e:	f107 0320 	add.w	r3, r7, #32
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
 8002694:	611a      	str	r2, [r3, #16]
 8002696:	615a      	str	r2, [r3, #20]
 8002698:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <MX_TIM2_Init+0xac>)
 800269c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <MX_TIM2_Init+0xac>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <MX_TIM2_Init+0xac>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <MX_TIM2_Init+0xac>)
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <MX_TIM2_Init+0xac>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <MX_TIM2_Init+0xac>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026c2:	4818      	ldr	r0, [pc, #96]	; (8002724 <MX_TIM2_Init+0xac>)
 80026c4:	f002 fcc2 	bl	800504c <HAL_TIM_PWM_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80026ce:	f000 fa3d 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026da:	f107 0320 	add.w	r3, r7, #32
 80026de:	4619      	mov	r1, r3
 80026e0:	4810      	ldr	r0, [pc, #64]	; (8002724 <MX_TIM2_Init+0xac>)
 80026e2:	f003 fa7d 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80026ec:	f000 fa2e 	bl	8002b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f0:	2360      	movs	r3, #96	; 0x60
 80026f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2200      	movs	r2, #0
 8002704:	4619      	mov	r1, r3
 8002706:	4807      	ldr	r0, [pc, #28]	; (8002724 <MX_TIM2_Init+0xac>)
 8002708:	f002 ff4e 	bl	80055a8 <HAL_TIM_PWM_ConfigChannel>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002712:	f000 fa1b 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002716:	4803      	ldr	r0, [pc, #12]	; (8002724 <MX_TIM2_Init+0xac>)
 8002718:	f000 fd62 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200019e0 	.word	0x200019e0

08002728 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	; 0x30
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	2224      	movs	r2, #36	; 0x24
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f004 fec3 	bl	80074c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <MX_TIM3_Init+0xa0>)
 8002746:	4a21      	ldr	r2, [pc, #132]	; (80027cc <MX_TIM3_Init+0xa4>)
 8002748:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <MX_TIM3_Init+0xa0>)
 800274c:	2200      	movs	r2, #0
 800274e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <MX_TIM3_Init+0xa0>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <MX_TIM3_Init+0xa0>)
 8002758:	f649 4240 	movw	r2, #40000	; 0x9c40
 800275c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <MX_TIM3_Init+0xa0>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <MX_TIM3_Init+0xa0>)
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800276a:	2303      	movs	r3, #3
 800276c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002772:	2301      	movs	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002782:	2301      	movs	r3, #1
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002786:	2300      	movs	r3, #0
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800278e:	f107 030c 	add.w	r3, r7, #12
 8002792:	4619      	mov	r1, r3
 8002794:	480c      	ldr	r0, [pc, #48]	; (80027c8 <MX_TIM3_Init+0xa0>)
 8002796:	f002 fd59 	bl	800524c <HAL_TIM_Encoder_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80027a0:	f000 f9d4 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <MX_TIM3_Init+0xa0>)
 80027b2:	f003 fa15 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80027bc:	f000 f9c6 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	3730      	adds	r7, #48	; 0x30
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20001a28 	.word	0x20001a28
 80027cc:	40000400 	.word	0x40000400

080027d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	2224      	movs	r2, #36	; 0x24
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 fe6f 	bl	80074c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027ec:	4b20      	ldr	r3, [pc, #128]	; (8002870 <MX_TIM4_Init+0xa0>)
 80027ee:	4a21      	ldr	r2, [pc, #132]	; (8002874 <MX_TIM4_Init+0xa4>)
 80027f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027f2:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <MX_TIM4_Init+0xa0>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <MX_TIM4_Init+0xa0>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80027fe:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <MX_TIM4_Init+0xa0>)
 8002800:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002804:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <MX_TIM4_Init+0xa0>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <MX_TIM4_Init+0xa0>)
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002812:	2303      	movs	r3, #3
 8002814:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800281a:	2301      	movs	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800282a:	2301      	movs	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800282e:	2300      	movs	r3, #0
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002836:	f107 030c 	add.w	r3, r7, #12
 800283a:	4619      	mov	r1, r3
 800283c:	480c      	ldr	r0, [pc, #48]	; (8002870 <MX_TIM4_Init+0xa0>)
 800283e:	f002 fd05 	bl	800524c <HAL_TIM_Encoder_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002848:	f000 f980 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284c:	2300      	movs	r3, #0
 800284e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	4619      	mov	r1, r3
 8002858:	4805      	ldr	r0, [pc, #20]	; (8002870 <MX_TIM4_Init+0xa0>)
 800285a:	f003 f9c1 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002864:	f000 f972 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002868:	bf00      	nop
 800286a:	3730      	adds	r7, #48	; 0x30
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20001a70 	.word	0x20001a70
 8002874:	40000800 	.word	0x40000800

08002878 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287e:	f107 0320 	add.w	r3, r7, #32
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	60da      	str	r2, [r3, #12]
 8002894:	611a      	str	r2, [r3, #16]
 8002896:	615a      	str	r2, [r3, #20]
 8002898:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <MX_TIM5_Init+0xac>)
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <MX_TIM5_Init+0xb0>)
 800289e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <MX_TIM5_Init+0xac>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <MX_TIM5_Init+0xac>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <MX_TIM5_Init+0xac>)
 80028ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <MX_TIM5_Init+0xac>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <MX_TIM5_Init+0xac>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80028c0:	4818      	ldr	r0, [pc, #96]	; (8002924 <MX_TIM5_Init+0xac>)
 80028c2:	f002 fbc3 	bl	800504c <HAL_TIM_PWM_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80028cc:	f000 f93e 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d0:	2300      	movs	r3, #0
 80028d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028d8:	f107 0320 	add.w	r3, r7, #32
 80028dc:	4619      	mov	r1, r3
 80028de:	4811      	ldr	r0, [pc, #68]	; (8002924 <MX_TIM5_Init+0xac>)
 80028e0:	f003 f97e 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80028ea:	f000 f92f 	bl	8002b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ee:	2360      	movs	r3, #96	; 0x60
 80028f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2200      	movs	r2, #0
 8002902:	4619      	mov	r1, r3
 8002904:	4807      	ldr	r0, [pc, #28]	; (8002924 <MX_TIM5_Init+0xac>)
 8002906:	f002 fe4f 	bl	80055a8 <HAL_TIM_PWM_ConfigChannel>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002910:	f000 f91c 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002914:	4803      	ldr	r0, [pc, #12]	; (8002924 <MX_TIM5_Init+0xac>)
 8002916:	f000 fc63 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 800291a:	bf00      	nop
 800291c:	3728      	adds	r7, #40	; 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20001ab8 	.word	0x20001ab8
 8002928:	40000c00 	.word	0x40000c00

0800292c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_TIM10_Init+0x40>)
 8002932:	4a0f      	ldr	r2, [pc, #60]	; (8002970 <MX_TIM10_Init+0x44>)
 8002934:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16;
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <MX_TIM10_Init+0x40>)
 8002938:	2210      	movs	r2, #16
 800293a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <MX_TIM10_Init+0x40>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 52500;
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <MX_TIM10_Init+0x40>)
 8002944:	f64c 5214 	movw	r2, #52500	; 0xcd14
 8002948:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <MX_TIM10_Init+0x40>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_TIM10_Init+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_TIM10_Init+0x40>)
 8002958:	f002 fac6 	bl	8004ee8 <HAL_TIM_Base_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002962:	f000 f8f3 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20001b00 	.word	0x20001b00
 8002970:	40014400 	.word	0x40014400

08002974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <MX_USART2_UART_Init+0x50>)
 800297c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800299a:	220c      	movs	r2, #12
 800299c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029ac:	f003 f99a 	bl	8005ce4 <HAL_UART_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029b6:	f000 f8c9 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20001b48 	.word	0x20001b48
 80029c4:	40004400 	.word	0x40004400

080029c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <MX_DMA_Init+0x4c>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a0f      	ldr	r2, [pc, #60]	; (8002a14 <MX_DMA_Init+0x4c>)
 80029d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <MX_DMA_Init+0x4c>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	2010      	movs	r0, #16
 80029f0:	f000 ffd9 	bl	80039a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80029f4:	2010      	movs	r0, #16
 80029f6:	f000 fff2 	bl	80039de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	2011      	movs	r0, #17
 8002a00:	f000 ffd1 	bl	80039a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002a04:	2011      	movs	r0, #17
 8002a06:	f000 ffea 	bl	80039de <HAL_NVIC_EnableIRQ>

}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800

08002a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a42      	ldr	r2, [pc, #264]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a3b      	ldr	r2, [pc, #236]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	4b35      	ldr	r3, [pc, #212]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b32      	ldr	r3, [pc, #200]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2122      	movs	r1, #34	; 0x22
 8002aa2:	4828      	ldr	r0, [pc, #160]	; (8002b44 <MX_GPIO_Init+0x12c>)
 8002aa4:	f001 fd3c 	bl	8004520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aae:	4826      	ldr	r0, [pc, #152]	; (8002b48 <MX_GPIO_Init+0x130>)
 8002ab0:	f001 fd36 	bl	8004520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002aba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	481f      	ldr	r0, [pc, #124]	; (8002b48 <MX_GPIO_Init+0x130>)
 8002acc:	f001 fba4 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|LD2_Pin;
 8002ad0:	2322      	movs	r3, #34	; 0x22
 8002ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002adc:	2300      	movs	r3, #0
 8002ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4817      	ldr	r0, [pc, #92]	; (8002b44 <MX_GPIO_Init+0x12c>)
 8002ae8:	f001 fb96 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|LIMIT_SWITCH_2_Pin;
 8002aec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002af2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002af8:	2301      	movs	r3, #1
 8002afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4810      	ldr	r0, [pc, #64]	; (8002b44 <MX_GPIO_Init+0x12c>)
 8002b04:	f001 fb88 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_1_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin;
 8002b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	f107 0314 	add.w	r3, r7, #20
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4809      	ldr	r0, [pc, #36]	; (8002b48 <MX_GPIO_Init+0x130>)
 8002b22:	f001 fb79 	bl	8004218 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2100      	movs	r1, #0
 8002b2a:	2028      	movs	r0, #40	; 0x28
 8002b2c:	f000 ff3b 	bl	80039a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b30:	2028      	movs	r0, #40	; 0x28
 8002b32:	f000 ff54 	bl	80039de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b36:	bf00      	nop
 8002b38:	3728      	adds	r7, #40	; 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020800 	.word	0x40020800

08002b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b50:	b672      	cpsid	i
}
 8002b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <Error_Handler+0x8>

08002b56 <PID_init>:
- int controller_type: whether the controller will be a P, PI or PID controller;
@outputs:
- void;
@#
*/
int PID_init(pid_controller_t *pid, float KP,float TI, float TD, float N, int Controller_type){
 8002b56:	b480      	push	{r7}
 8002b58:	b087      	sub	sp, #28
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6178      	str	r0, [r7, #20]
 8002b5e:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b62:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b66:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b6a:	edc7 1a01 	vstr	s3, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
	pid->type=Controller_type;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	601a      	str	r2, [r3, #0]
	pid->Kp= KP;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	605a      	str	r2, [r3, #4]
	pid->Ti=TI;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	609a      	str	r2, [r3, #8]
	pid->Td=TD;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	60da      	str	r2, [r3, #12]
	pid->N=N;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]

	pid->integrator=0.f;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
	pid->derivative=0.f;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	621a      	str	r2, [r3, #32]
	pid->prev_err=0.f;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	615a      	str	r2, [r3, #20]

	pid->out=0.f;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	635a      	str	r2, [r3, #52]	; 0x34

	/*NB the limit must be set using the proper method */
	pid->lim_out_min=0.f;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lim_out_max=0.f;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28

	pid->lim_integ_min=0.f;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->lim_integ_max=0.f;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30

	return 0;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <set_limit>:
- float lim_integ_max: maximum limit value for the integrator value;
@outputs:
- void;
@#
*/
int set_limit(pid_controller_t *pid, float lim_out_min, float lim_out_max, float lim_integ_min,float lim_integ_max ){
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6178      	str	r0, [r7, #20]
 8002be4:	ed87 0a04 	vstr	s0, [r7, #16]
 8002be8:	edc7 0a03 	vstr	s1, [r7, #12]
 8002bec:	ed87 1a02 	vstr	s2, [r7, #8]
 8002bf0:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->lim_out_min=lim_out_min;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lim_out_max=lim_out_max;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28

	pid->lim_integ_min=lim_integ_min;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->lim_integ_max=lim_integ_max;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
	return 0;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <PID_update>:
@outputs:
- void;
@#
*/

int PID_update(pid_controller_t *pid, float set_point , float measure, float T_C){
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c28:	edc7 0a01 	vstr	s1, [r7, #4]
 8002c2c:	ed87 1a00 	vstr	s2, [r7]

	float u = 0.f;
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
	float error = 0.f;
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
	float proportional = 0.f;
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
	float alpha = pid->Td/T_C;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	edd3 6a03 	vldr	s13, [r3, #12]
 8002c48:	ed97 7a00 	vldr	s14, [r7]
 8002c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c50:	edc7 7a04 	vstr	s15, [r7, #16]


    /* calculate the error*/
	error = set_point - measure;
 8002c54:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c58:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c60:	edc7 7a06 	vstr	s15, [r7, #24]




	/* proportional contribute*/
	proportional= pid->Kp*error;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c6a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c72:	edc7 7a05 	vstr	s15, [r7, #20]

	/*integral contribute*/
	pid->integrator+=(pid->Kp/pid->Ti)*0.5f*T_C*(error-pid->prev_err);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	ed93 6a01 	vldr	s12, [r3, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c88:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c8c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002c90:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c94:	edd7 7a00 	vldr	s15, [r7]
 8002c98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ca2:	ed97 6a06 	vldr	s12, [r7, #24]
 8002ca6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	edc3 7a07 	vstr	s15, [r3, #28]

	/* simple anti wind-up*/
	if(pid->integrator > pid->lim_integ_max){
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	ed93 7a07 	vldr	s14, [r3, #28]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ccc:	dd04      	ble.n	8002cd8 <PID_update+0xbc>
		pid->integrator=pid->lim_integ_max;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	61da      	str	r2, [r3, #28]
 8002cd6:	e00e      	b.n	8002cf6 <PID_update+0xda>
	}else if(pid->integrator < pid->lim_integ_min)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	ed93 7a07 	vldr	s14, [r3, #28]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ce4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cec:	d503      	bpl.n	8002cf6 <PID_update+0xda>
	{
		pid->integrator=pid->lim_integ_min;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	61da      	str	r2, [r3, #28]
	}

	/* output  */
	if (pid->type>0){
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	dd09      	ble.n	8002d12 <PID_update+0xf6>
		u=proportional+pid->integrator;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d04:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0c:	edc7 7a07 	vstr	s15, [r7, #28]
 8002d10:	e044      	b.n	8002d9c <PID_update+0x180>
	}else{
		/*derivative contribute*/
		pid->derivative= (2*(pid->Kp)*alpha*error - pid->derivative*(1-(2*alpha)/pid->N))/(1+(2*alpha)/pid->N);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d18:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d24:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002d32:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d36:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	ed93 6a04 	vldr	s12, [r3, #16]
 8002d40:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002d44:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002d48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d50:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d54:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d58:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d62:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8002d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	edc3 7a08 	vstr	s15, [r3, #32]
		u=proportional+pid->integrator+0*pid->derivative;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d8c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002df8 <PID_update+0x1dc>
 8002d90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d98:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	/* output limitation */
	if(u>pid->lim_out_max){
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002da2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dae:	dd04      	ble.n	8002dba <PID_update+0x19e>
		pid->out=pid->lim_out_max;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	635a      	str	r2, [r3, #52]	; 0x34
 8002db8:	e011      	b.n	8002dde <PID_update+0x1c2>
	}else if(u<pid->lim_out_min){
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002dc0:	ed97 7a07 	vldr	s14, [r7, #28]
 8002dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dcc:	d504      	bpl.n	8002dd8 <PID_update+0x1bc>
		pid->out=pid->lim_out_min;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002dd6:	e002      	b.n	8002dde <PID_update+0x1c2>
	}else{
		pid->out=u;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34
	}


	pid->prev_err=error;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	615a      	str	r2, [r3, #20]
	pid->prev_meas=measure;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	619a      	str	r2, [r3, #24]

	return 0;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3724      	adds	r7, #36	; 0x24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	00000000 	.word	0x00000000

08002dfc <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	3304      	adds	r3, #4
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <rbpush+0x8c>)
 8002e2a:	fba2 1203 	umull	r1, r2, r2, r3
 8002e2e:	0952      	lsrs	r2, r2, #5
 8002e30:	2164      	movs	r1, #100	; 0x64
 8002e32:	fb01 f202 	mul.w	r2, r1, r2
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	789b      	ldrb	r3, [r3, #2]
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d113      	bne.n	8002e6e <rbpush+0x72>
        /* overwriting data: also move head forward */
        buffer->head++;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	785b      	ldrb	r3, [r3, #1]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	785b      	ldrb	r3, [r3, #1]
 8002e56:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <rbpush+0x8c>)
 8002e58:	fba2 1203 	umull	r1, r2, r2, r3
 8002e5c:	0952      	lsrs	r2, r2, #5
 8002e5e:	2164      	movs	r1, #100	; 0x64
 8002e60:	fb01 f202 	mul.w	r2, r1, r2
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	705a      	strb	r2, [r3, #1]
 8002e6c:	e005      	b.n	8002e7a <rbpush+0x7e>
    }else{
        buffer->length++;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	789b      	ldrb	r3, [r3, #2]
 8002e72:	3301      	adds	r3, #1
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 8002e7a:	2301      	movs	r3, #1
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	51eb851f 	.word	0x51eb851f

08002e8c <rblast>:
- rbelement_t \*data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	789b      	ldrb	r3, [r3, #2]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <rblast+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	785b      	ldrb	r3, [r3, #1]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	601a      	str	r2, [r3, #0]
        return 0; // operation failed
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e015      	b.n	8002ee0 <rblast+0x54>
    }
    // uint8_t index = (uint8_t) ((buffer->tail-1+RBUF_SZ)%RBUF_SZ);
    int8_t index = buffer->tail-1;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
 8002ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	da03      	bge.n	8002ece <rblast+0x42>
        index += RBUF_SZ;
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	3364      	adds	r3, #100	; 0x64
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	73fb      	strb	r3, [r7, #15]
    }
    *data = buffer->buffer[(uint8_t) index];
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	601a      	str	r2, [r3, #0]
    return 1;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <rbget>:


rberror_t rbget(ringbuffer_t *buffer, int8_t i, rbelement_t *data){
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 8002efa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db05      	blt.n	8002f0e <rbget+0x22>
 8002f02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	7892      	ldrb	r2, [r2, #2]
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	db0a      	blt.n	8002f24 <rbget+0x38>
        /* out of bounds */
        *data =  buffer->buffer[buffer->head];
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	785b      	ldrb	r3, [r3, #1]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	3304      	adds	r3, #4
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	601a      	str	r2, [r3, #0]
        return 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e01a      	b.n	8002f5a <rbget+0x6e>
    }
    uint8_t index = (uint8_t) ((buffer->head+i) % RBUF_SZ);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a0d      	ldr	r2, [pc, #52]	; (8002f68 <rbget+0x7c>)
 8002f32:	fb82 1203 	smull	r1, r2, r2, r3
 8002f36:	1151      	asrs	r1, r2, #5
 8002f38:	17da      	asrs	r2, r3, #31
 8002f3a:	1a8a      	subs	r2, r1, r2
 8002f3c:	2164      	movs	r1, #100	; 0x64
 8002f3e:	fb01 f202 	mul.w	r2, r1, r2
 8002f42:	1a9a      	subs	r2, r3, r2
 8002f44:	4613      	mov	r3, r2
 8002f46:	75fb      	strb	r3, [r7, #23]
    *data = buffer->buffer[index];
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	601a      	str	r2, [r3, #0]
    return 1;
 8002f58:	2301      	movs	r3, #1
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	51eb851f 	.word	0x51eb851f

08002f6c <rbclear>:
- ringbuffer_t \*buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8002f78:	2300      	movs	r3, #0
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	e00a      	b.n	8002f94 <rbclear+0x28>
        buffer->buffer[i] = 0;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	3301      	adds	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b63      	cmp	r3, #99	; 0x63
 8002f98:	d9f1      	bls.n	8002f7e <rbclear+0x12>
    }
    buffer->length = 0;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_MspInit>:
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_MspInit+0x4c>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a0f      	ldr	r2, [pc, #60]	; (8003004 <HAL_MspInit+0x4c>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <HAL_MspInit+0x4c>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_MspInit+0x4c>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a08      	ldr	r2, [pc, #32]	; (8003004 <HAL_MspInit+0x4c>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_MspInit+0x4c>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2007      	movs	r0, #7
 8002ff8:	f000 fcca 	bl	8003990 <HAL_NVIC_SetPriorityGrouping>
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800

08003008 <HAL_TIM_PWM_MspInit>:
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003018:	d10e      	bne.n	8003038 <HAL_TIM_PWM_MspInit+0x30>
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_TIM_PWM_MspInit+0x64>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_TIM_PWM_MspInit+0x64>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <HAL_TIM_PWM_MspInit+0x64>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	e012      	b.n	800305e <HAL_TIM_PWM_MspInit+0x56>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <HAL_TIM_PWM_MspInit+0x68>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10d      	bne.n	800305e <HAL_TIM_PWM_MspInit+0x56>
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_TIM_PWM_MspInit+0x64>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	4a08      	ldr	r2, [pc, #32]	; (800306c <HAL_TIM_PWM_MspInit+0x64>)
 800304c:	f043 0308 	orr.w	r3, r3, #8
 8003050:	6413      	str	r3, [r2, #64]	; 0x40
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_TIM_PWM_MspInit+0x64>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40000c00 	.word	0x40000c00

08003074 <HAL_TIM_Encoder_MspInit>:
 8003074:	b580      	push	{r7, lr}
 8003076:	b08c      	sub	sp, #48	; 0x30
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a3a      	ldr	r2, [pc, #232]	; (800317c <HAL_TIM_Encoder_MspInit+0x108>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d134      	bne.n	8003100 <HAL_TIM_Encoder_MspInit+0x8c>
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a38      	ldr	r2, [pc, #224]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b36      	ldr	r3, [pc, #216]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a31      	ldr	r2, [pc, #196]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	23c0      	movs	r3, #192	; 0xc0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	2302      	movs	r3, #2
 80030d4:	623b      	str	r3, [r7, #32]
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	2300      	movs	r3, #0
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030de:	2302      	movs	r3, #2
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e2:	f107 031c 	add.w	r3, r7, #28
 80030e6:	4619      	mov	r1, r3
 80030e8:	4826      	ldr	r0, [pc, #152]	; (8003184 <HAL_TIM_Encoder_MspInit+0x110>)
 80030ea:	f001 f895 	bl	8004218 <HAL_GPIO_Init>
 80030ee:	2200      	movs	r2, #0
 80030f0:	2100      	movs	r1, #0
 80030f2:	201d      	movs	r0, #29
 80030f4:	f000 fc57 	bl	80039a6 <HAL_NVIC_SetPriority>
 80030f8:	201d      	movs	r0, #29
 80030fa:	f000 fc70 	bl	80039de <HAL_NVIC_EnableIRQ>
 80030fe:	e038      	b.n	8003172 <HAL_TIM_Encoder_MspInit+0xfe>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a20      	ldr	r2, [pc, #128]	; (8003188 <HAL_TIM_Encoder_MspInit+0x114>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d133      	bne.n	8003172 <HAL_TIM_Encoder_MspInit+0xfe>
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a14      	ldr	r2, [pc, #80]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	23c0      	movs	r3, #192	; 0xc0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	2302      	movs	r3, #2
 8003148:	623b      	str	r3, [r7, #32]
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
 800314e:	2300      	movs	r3, #0
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
 8003152:	2302      	movs	r3, #2
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003156:	f107 031c 	add.w	r3, r7, #28
 800315a:	4619      	mov	r1, r3
 800315c:	480b      	ldr	r0, [pc, #44]	; (800318c <HAL_TIM_Encoder_MspInit+0x118>)
 800315e:	f001 f85b 	bl	8004218 <HAL_GPIO_Init>
 8003162:	2200      	movs	r2, #0
 8003164:	2100      	movs	r1, #0
 8003166:	201e      	movs	r0, #30
 8003168:	f000 fc1d 	bl	80039a6 <HAL_NVIC_SetPriority>
 800316c:	201e      	movs	r0, #30
 800316e:	f000 fc36 	bl	80039de <HAL_NVIC_EnableIRQ>
 8003172:	bf00      	nop
 8003174:	3730      	adds	r7, #48	; 0x30
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40000400 	.word	0x40000400
 8003180:	40023800 	.word	0x40023800
 8003184:	40020000 	.word	0x40020000
 8003188:	40000800 	.word	0x40000800
 800318c:	40020400 	.word	0x40020400

08003190 <HAL_TIM_Base_MspInit>:
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <HAL_TIM_Base_MspInit+0x48>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d115      	bne.n	80031ce <HAL_TIM_Base_MspInit+0x3e>
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <HAL_TIM_Base_MspInit+0x4c>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	4a0c      	ldr	r2, [pc, #48]	; (80031dc <HAL_TIM_Base_MspInit+0x4c>)
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	6453      	str	r3, [r2, #68]	; 0x44
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_TIM_Base_MspInit+0x4c>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	2019      	movs	r0, #25
 80031c4:	f000 fbef 	bl	80039a6 <HAL_NVIC_SetPriority>
 80031c8:	2019      	movs	r0, #25
 80031ca:	f000 fc08 	bl	80039de <HAL_NVIC_EnableIRQ>
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40014400 	.word	0x40014400
 80031dc:	40023800 	.word	0x40023800

080031e0 <HAL_TIM_MspPostInit>:
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003200:	d11f      	bne.n	8003242 <HAL_TIM_MspPostInit+0x62>
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_TIM_MspPostInit+0xb0>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a21      	ldr	r2, [pc, #132]	; (8003290 <HAL_TIM_MspPostInit+0xb0>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <HAL_TIM_MspPostInit+0xb0>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	2302      	movs	r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	2300      	movs	r3, #0
 800322e:	623b      	str	r3, [r7, #32]
 8003230:	2301      	movs	r3, #1
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	4619      	mov	r1, r3
 800323a:	4816      	ldr	r0, [pc, #88]	; (8003294 <HAL_TIM_MspPostInit+0xb4>)
 800323c:	f000 ffec 	bl	8004218 <HAL_GPIO_Init>
 8003240:	e022      	b.n	8003288 <HAL_TIM_MspPostInit+0xa8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_TIM_MspPostInit+0xb8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d11d      	bne.n	8003288 <HAL_TIM_MspPostInit+0xa8>
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_TIM_MspPostInit+0xb0>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <HAL_TIM_MspPostInit+0xb0>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6313      	str	r3, [r2, #48]	; 0x30
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_TIM_MspPostInit+0xb0>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2301      	movs	r3, #1
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	2302      	movs	r3, #2
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	2300      	movs	r3, #0
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	2302      	movs	r3, #2
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	4619      	mov	r1, r3
 8003282:	4804      	ldr	r0, [pc, #16]	; (8003294 <HAL_TIM_MspPostInit+0xb4>)
 8003284:	f000 ffc8 	bl	8004218 <HAL_GPIO_Init>
 8003288:	bf00      	nop
 800328a:	3728      	adds	r7, #40	; 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	40020000 	.word	0x40020000
 8003298:	40000c00 	.word	0x40000c00

0800329c <HAL_UART_MspInit>:
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	; 0x28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a4d      	ldr	r2, [pc, #308]	; (80033f0 <HAL_UART_MspInit+0x154>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	f040 8094 	bne.w	80033e8 <HAL_UART_MspInit+0x14c>
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <HAL_UART_MspInit+0x158>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	4a4a      	ldr	r2, [pc, #296]	; (80033f4 <HAL_UART_MspInit+0x158>)
 80032ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ce:	6413      	str	r3, [r2, #64]	; 0x40
 80032d0:	4b48      	ldr	r3, [pc, #288]	; (80033f4 <HAL_UART_MspInit+0x158>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <HAL_UART_MspInit+0x158>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	4a43      	ldr	r2, [pc, #268]	; (80033f4 <HAL_UART_MspInit+0x158>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6313      	str	r3, [r2, #48]	; 0x30
 80032ec:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_UART_MspInit+0x158>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	230c      	movs	r3, #12
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	2302      	movs	r3, #2
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	2303      	movs	r3, #3
 8003306:	623b      	str	r3, [r7, #32]
 8003308:	2307      	movs	r3, #7
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	4619      	mov	r1, r3
 8003312:	4839      	ldr	r0, [pc, #228]	; (80033f8 <HAL_UART_MspInit+0x15c>)
 8003314:	f000 ff80 	bl	8004218 <HAL_GPIO_Init>
 8003318:	4b38      	ldr	r3, [pc, #224]	; (80033fc <HAL_UART_MspInit+0x160>)
 800331a:	4a39      	ldr	r2, [pc, #228]	; (8003400 <HAL_UART_MspInit+0x164>)
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_UART_MspInit+0x160>)
 8003320:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	4b35      	ldr	r3, [pc, #212]	; (80033fc <HAL_UART_MspInit+0x160>)
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_UART_MspInit+0x160>)
 800332e:	2200      	movs	r2, #0
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	4b32      	ldr	r3, [pc, #200]	; (80033fc <HAL_UART_MspInit+0x160>)
 8003334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003338:	611a      	str	r2, [r3, #16]
 800333a:	4b30      	ldr	r3, [pc, #192]	; (80033fc <HAL_UART_MspInit+0x160>)
 800333c:	2200      	movs	r2, #0
 800333e:	615a      	str	r2, [r3, #20]
 8003340:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <HAL_UART_MspInit+0x160>)
 8003342:	2200      	movs	r2, #0
 8003344:	619a      	str	r2, [r3, #24]
 8003346:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <HAL_UART_MspInit+0x160>)
 8003348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800334c:	61da      	str	r2, [r3, #28]
 800334e:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_UART_MspInit+0x160>)
 8003350:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003354:	621a      	str	r2, [r3, #32]
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_UART_MspInit+0x160>)
 8003358:	2200      	movs	r2, #0
 800335a:	625a      	str	r2, [r3, #36]	; 0x24
 800335c:	4827      	ldr	r0, [pc, #156]	; (80033fc <HAL_UART_MspInit+0x160>)
 800335e:	f000 fb59 	bl	8003a14 <HAL_DMA_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_UART_MspInit+0xd0>
 8003368:	f7ff fbf0 	bl	8002b4c <Error_Handler>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a23      	ldr	r2, [pc, #140]	; (80033fc <HAL_UART_MspInit+0x160>)
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
 8003372:	4a22      	ldr	r2, [pc, #136]	; (80033fc <HAL_UART_MspInit+0x160>)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6393      	str	r3, [r2, #56]	; 0x38
 8003378:	4b22      	ldr	r3, [pc, #136]	; (8003404 <HAL_UART_MspInit+0x168>)
 800337a:	4a23      	ldr	r2, [pc, #140]	; (8003408 <HAL_UART_MspInit+0x16c>)
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_UART_MspInit+0x168>)
 8003380:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <HAL_UART_MspInit+0x168>)
 8003388:	2240      	movs	r2, #64	; 0x40
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_UART_MspInit+0x168>)
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <HAL_UART_MspInit+0x168>)
 8003394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003398:	611a      	str	r2, [r3, #16]
 800339a:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_UART_MspInit+0x168>)
 800339c:	2200      	movs	r2, #0
 800339e:	615a      	str	r2, [r3, #20]
 80033a0:	4b18      	ldr	r3, [pc, #96]	; (8003404 <HAL_UART_MspInit+0x168>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
 80033a6:	4b17      	ldr	r3, [pc, #92]	; (8003404 <HAL_UART_MspInit+0x168>)
 80033a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ac:	61da      	str	r2, [r3, #28]
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <HAL_UART_MspInit+0x168>)
 80033b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033b4:	621a      	str	r2, [r3, #32]
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_UART_MspInit+0x168>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24
 80033bc:	4811      	ldr	r0, [pc, #68]	; (8003404 <HAL_UART_MspInit+0x168>)
 80033be:	f000 fb29 	bl	8003a14 <HAL_DMA_Init>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_UART_MspInit+0x130>
 80033c8:	f7ff fbc0 	bl	8002b4c <Error_Handler>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a0d      	ldr	r2, [pc, #52]	; (8003404 <HAL_UART_MspInit+0x168>)
 80033d0:	635a      	str	r2, [r3, #52]	; 0x34
 80033d2:	4a0c      	ldr	r2, [pc, #48]	; (8003404 <HAL_UART_MspInit+0x168>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6393      	str	r3, [r2, #56]	; 0x38
 80033d8:	2200      	movs	r2, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	2026      	movs	r0, #38	; 0x26
 80033de:	f000 fae2 	bl	80039a6 <HAL_NVIC_SetPriority>
 80033e2:	2026      	movs	r0, #38	; 0x26
 80033e4:	f000 fafb 	bl	80039de <HAL_NVIC_EnableIRQ>
 80033e8:	bf00      	nop
 80033ea:	3728      	adds	r7, #40	; 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40004400 	.word	0x40004400
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	20001b8c 	.word	0x20001b8c
 8003400:	40026088 	.word	0x40026088
 8003404:	20001bec 	.word	0x20001bec
 8003408:	400260a0 	.word	0x400260a0

0800340c <NMI_Handler>:
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
 8003410:	e7fe      	b.n	8003410 <NMI_Handler+0x4>

08003412 <HardFault_Handler>:
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0
 8003416:	e7fe      	b.n	8003416 <HardFault_Handler+0x4>

08003418 <MemManage_Handler>:
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
 800341c:	e7fe      	b.n	800341c <MemManage_Handler+0x4>

0800341e <BusFault_Handler>:
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0
 8003422:	e7fe      	b.n	8003422 <BusFault_Handler+0x4>

08003424 <UsageFault_Handler>:
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
 8003428:	e7fe      	b.n	8003428 <UsageFault_Handler+0x4>

0800342a <SVC_Handler>:
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0
 800342e:	bf00      	nop
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <DebugMon_Handler>:
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <PendSV_Handler>:
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <SysTick_Handler>:
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
 8003458:	f000 f986 	bl	8003768 <HAL_IncTick>
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}

08003460 <DMA1_Stream5_IRQHandler>:
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <DMA1_Stream5_IRQHandler+0x10>)
 8003466:	f000 fc6d 	bl	8003d44 <HAL_DMA_IRQHandler>
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20001b8c 	.word	0x20001b8c

08003474 <DMA1_Stream6_IRQHandler>:
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <DMA1_Stream6_IRQHandler+0x10>)
 800347a:	f000 fc63 	bl	8003d44 <HAL_DMA_IRQHandler>
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20001bec 	.word	0x20001bec

08003488 <TIM1_UP_TIM10_IRQHandler>:
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800348e:	f001 ff83 	bl	8005398 <HAL_TIM_IRQHandler>
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20001b00 	.word	0x20001b00

0800349c <TIM3_IRQHandler>:
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <TIM3_IRQHandler+0x10>)
 80034a2:	f001 ff79 	bl	8005398 <HAL_TIM_IRQHandler>
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20001a28 	.word	0x20001a28

080034b0 <TIM4_IRQHandler>:
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <TIM4_IRQHandler+0x10>)
 80034b6:	f001 ff6f 	bl	8005398 <HAL_TIM_IRQHandler>
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20001a70 	.word	0x20001a70

080034c4 <USART2_IRQHandler>:
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <USART2_IRQHandler+0x10>)
 80034ca:	f002 fd07 	bl	8005edc <HAL_UART_IRQHandler>
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20001b48 	.word	0x20001b48

080034d8 <EXTI15_10_IRQHandler>:
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
 80034dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80034e0:	f001 f852 	bl	8004588 <HAL_GPIO_EXTI_IRQHandler>
 80034e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80034e8:	f001 f84e 	bl	8004588 <HAL_GPIO_EXTI_IRQHandler>
 80034ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80034f0:	f001 f84a 	bl	8004588 <HAL_GPIO_EXTI_IRQHandler>
 80034f4:	bf00      	nop
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_getpid>:
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	2301      	movs	r3, #1
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <_kill>:
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	f003 fdd1 	bl	80070b8 <__errno>
 8003516:	4603      	mov	r3, r0
 8003518:	2216      	movs	r2, #22
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <_exit>:
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ffe7 	bl	8003508 <_kill>
 800353a:	e7fe      	b.n	800353a <_exit+0x12>

0800353c <_read>:
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	e00a      	b.n	8003564 <_read+0x28>
 800354e:	f3af 8000 	nop.w
 8003552:	4601      	mov	r1, r0
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	60ba      	str	r2, [r7, #8]
 800355a:	b2ca      	uxtb	r2, r1
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	3301      	adds	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	dbf0      	blt.n	800354e <_read+0x12>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <_close>:
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <_fstat>:
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	2300      	movs	r3, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <_isatty>:
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	2301      	movs	r3, #1
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_lseek>:
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	2300      	movs	r3, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <_sbrk>:
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	4a14      	ldr	r2, [pc, #80]	; (800363c <_sbrk+0x5c>)
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <_sbrk+0x60>)
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <_sbrk+0x64>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <_sbrk+0x22>
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <_sbrk+0x64>)
 80035fe:	4a12      	ldr	r2, [pc, #72]	; (8003648 <_sbrk+0x68>)
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <_sbrk+0x64>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	429a      	cmp	r2, r3
 800360e:	d207      	bcs.n	8003620 <_sbrk+0x40>
 8003610:	f003 fd52 	bl	80070b8 <__errno>
 8003614:	4603      	mov	r3, r0
 8003616:	220c      	movs	r2, #12
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800361e:	e009      	b.n	8003634 <_sbrk+0x54>
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <_sbrk+0x64>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <_sbrk+0x64>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	4a05      	ldr	r2, [pc, #20]	; (8003644 <_sbrk+0x64>)
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20020000 	.word	0x20020000
 8003640:	00000400 	.word	0x00000400
 8003644:	20001c4c 	.word	0x20001c4c
 8003648:	20001c68 	.word	0x20001c68

0800364c <SystemInit>:
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <SystemInit+0x20>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	4a05      	ldr	r2, [pc, #20]	; (800366c <SystemInit+0x20>)
 8003658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800365c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <Reset_Handler>:
 8003670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036a8 <LoopFillZerobss+0x12>
 8003674:	480d      	ldr	r0, [pc, #52]	; (80036ac <LoopFillZerobss+0x16>)
 8003676:	490e      	ldr	r1, [pc, #56]	; (80036b0 <LoopFillZerobss+0x1a>)
 8003678:	4a0e      	ldr	r2, [pc, #56]	; (80036b4 <LoopFillZerobss+0x1e>)
 800367a:	2300      	movs	r3, #0
 800367c:	e002      	b.n	8003684 <LoopCopyDataInit>

0800367e <CopyDataInit>:
 800367e:	58d4      	ldr	r4, [r2, r3]
 8003680:	50c4      	str	r4, [r0, r3]
 8003682:	3304      	adds	r3, #4

08003684 <LoopCopyDataInit>:
 8003684:	18c4      	adds	r4, r0, r3
 8003686:	428c      	cmp	r4, r1
 8003688:	d3f9      	bcc.n	800367e <CopyDataInit>
 800368a:	4a0b      	ldr	r2, [pc, #44]	; (80036b8 <LoopFillZerobss+0x22>)
 800368c:	4c0b      	ldr	r4, [pc, #44]	; (80036bc <LoopFillZerobss+0x26>)
 800368e:	2300      	movs	r3, #0
 8003690:	e001      	b.n	8003696 <LoopFillZerobss>

08003692 <FillZerobss>:
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	3204      	adds	r2, #4

08003696 <LoopFillZerobss>:
 8003696:	42a2      	cmp	r2, r4
 8003698:	d3fb      	bcc.n	8003692 <FillZerobss>
 800369a:	f7ff ffd7 	bl	800364c <SystemInit>
 800369e:	f003 fedb 	bl	8007458 <__libc_init_array>
 80036a2:	f7fe fe53 	bl	800234c <main>
 80036a6:	4770      	bx	lr
 80036a8:	20020000 	.word	0x20020000
 80036ac:	20000000 	.word	0x20000000
 80036b0:	200001e0 	.word	0x200001e0
 80036b4:	0800a984 	.word	0x0800a984
 80036b8:	200001e0 	.word	0x200001e0
 80036bc:	20001c64 	.word	0x20001c64

080036c0 <ADC_IRQHandler>:
 80036c0:	e7fe      	b.n	80036c0 <ADC_IRQHandler>
	...

080036c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036c8:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <HAL_Init+0x40>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0d      	ldr	r2, [pc, #52]	; (8003704 <HAL_Init+0x40>)
 80036ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_Init+0x40>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <HAL_Init+0x40>)
 80036da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_Init+0x40>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a07      	ldr	r2, [pc, #28]	; (8003704 <HAL_Init+0x40>)
 80036e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ec:	2003      	movs	r0, #3
 80036ee:	f000 f94f 	bl	8003990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036f2:	2000      	movs	r0, #0
 80036f4:	f000 f808 	bl	8003708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f8:	f7ff fc5e 	bl	8002fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40023c00 	.word	0x40023c00

08003708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_InitTick+0x54>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_InitTick+0x58>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800371e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f967 	bl	80039fa <HAL_SYSTICK_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e00e      	b.n	8003754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b0f      	cmp	r3, #15
 800373a:	d80a      	bhi.n	8003752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800373c:	2200      	movs	r2, #0
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003744:	f000 f92f 	bl	80039a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003748:	4a06      	ldr	r2, [pc, #24]	; (8003764 <HAL_InitTick+0x5c>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e000      	b.n	8003754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000004 	.word	0x20000004
 8003760:	2000000c 	.word	0x2000000c
 8003764:	20000008 	.word	0x20000008

08003768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_IncTick+0x20>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_IncTick+0x24>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4413      	add	r3, r2
 8003778:	4a04      	ldr	r2, [pc, #16]	; (800378c <HAL_IncTick+0x24>)
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	2000000c 	.word	0x2000000c
 800378c:	20001c50 	.word	0x20001c50

08003790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return uwTick;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_GetTick+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20001c50 	.word	0x20001c50

080037a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7ff ffee 	bl	8003790 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c0:	d005      	beq.n	80037ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_Delay+0x44>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037ce:	bf00      	nop
 80037d0:	f7ff ffde 	bl	8003790 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d8f7      	bhi.n	80037d0 <HAL_Delay+0x28>
  {
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	2000000c 	.word	0x2000000c

080037f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <__NVIC_SetPriorityGrouping+0x44>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800380c:	4013      	ands	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800381c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003822:	4a04      	ldr	r2, [pc, #16]	; (8003834 <__NVIC_SetPriorityGrouping+0x44>)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	60d3      	str	r3, [r2, #12]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <__NVIC_GetPriorityGrouping+0x18>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	f003 0307 	and.w	r3, r3, #7
}
 8003846:	4618      	mov	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	2b00      	cmp	r3, #0
 8003864:	db0b      	blt.n	800387e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	4907      	ldr	r1, [pc, #28]	; (800388c <__NVIC_EnableIRQ+0x38>)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2001      	movs	r0, #1
 8003876:	fa00 f202 	lsl.w	r2, r0, r2
 800387a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	e000e100 	.word	0xe000e100

08003890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	db0a      	blt.n	80038ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	490c      	ldr	r1, [pc, #48]	; (80038dc <__NVIC_SetPriority+0x4c>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	440b      	add	r3, r1
 80038b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b8:	e00a      	b.n	80038d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4908      	ldr	r1, [pc, #32]	; (80038e0 <__NVIC_SetPriority+0x50>)
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	3b04      	subs	r3, #4
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	440b      	add	r3, r1
 80038ce:	761a      	strb	r2, [r3, #24]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000e100 	.word	0xe000e100
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f1c3 0307 	rsb	r3, r3, #7
 80038fe:	2b04      	cmp	r3, #4
 8003900:	bf28      	it	cs
 8003902:	2304      	movcs	r3, #4
 8003904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3304      	adds	r3, #4
 800390a:	2b06      	cmp	r3, #6
 800390c:	d902      	bls.n	8003914 <NVIC_EncodePriority+0x30>
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3b03      	subs	r3, #3
 8003912:	e000      	b.n	8003916 <NVIC_EncodePriority+0x32>
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	401a      	ands	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800392c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	43d9      	mvns	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	4313      	orrs	r3, r2
         );
}
 800393e:	4618      	mov	r0, r3
 8003940:	3724      	adds	r7, #36	; 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800395c:	d301      	bcc.n	8003962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800395e:	2301      	movs	r3, #1
 8003960:	e00f      	b.n	8003982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <SysTick_Config+0x40>)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3b01      	subs	r3, #1
 8003968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800396a:	210f      	movs	r1, #15
 800396c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003970:	f7ff ff8e 	bl	8003890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <SysTick_Config+0x40>)
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800397a:	4b04      	ldr	r3, [pc, #16]	; (800398c <SysTick_Config+0x40>)
 800397c:	2207      	movs	r2, #7
 800397e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	e000e010 	.word	0xe000e010

08003990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff29 	bl	80037f0 <__NVIC_SetPriorityGrouping>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039b8:	f7ff ff3e 	bl	8003838 <__NVIC_GetPriorityGrouping>
 80039bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	6978      	ldr	r0, [r7, #20]
 80039c4:	f7ff ff8e 	bl	80038e4 <NVIC_EncodePriority>
 80039c8:	4602      	mov	r2, r0
 80039ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff5d 	bl	8003890 <__NVIC_SetPriority>
}
 80039d6:	bf00      	nop
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	4603      	mov	r3, r0
 80039e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ff31 	bl	8003854 <__NVIC_EnableIRQ>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff ffa2 	bl	800394c <SysTick_Config>
 8003a08:	4603      	mov	r3, r0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a20:	f7ff feb6 	bl	8003790 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e099      	b.n	8003b64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a50:	e00f      	b.n	8003a72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a52:	f7ff fe9d 	bl	8003790 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d908      	bls.n	8003a72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e078      	b.n	8003b64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e8      	bne.n	8003a52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4b38      	ldr	r3, [pc, #224]	; (8003b6c <HAL_DMA_Init+0x158>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d107      	bne.n	8003adc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0307 	bic.w	r3, r3, #7
 8003af2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d117      	bne.n	8003b36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00e      	beq.n	8003b36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fb01 	bl	8004120 <DMA_CheckFifoParam>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b32:	2301      	movs	r3, #1
 8003b34:	e016      	b.n	8003b64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fab8 	bl	80040b4 <DMA_CalcBaseAndBitshift>
 8003b44:	4603      	mov	r3, r0
 8003b46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	223f      	movs	r2, #63	; 0x3f
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	f010803f 	.word	0xf010803f

08003b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_DMA_Start_IT+0x26>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e040      	b.n	8003c18 <HAL_DMA_Start_IT+0xa8>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d12f      	bne.n	8003c0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fa4a 	bl	8004058 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	223f      	movs	r2, #63	; 0x3f
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0216 	orr.w	r2, r2, #22
 8003bde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0208 	orr.w	r2, r2, #8
 8003bf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e005      	b.n	8003c16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
 8003c14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c2e:	f7ff fdaf 	bl	8003790 <HAL_GetTick>
 8003c32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d008      	beq.n	8003c52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2280      	movs	r2, #128	; 0x80
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e052      	b.n	8003cf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0216 	bic.w	r2, r2, #22
 8003c60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <HAL_DMA_Abort+0x62>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0208 	bic.w	r2, r2, #8
 8003c90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ca2:	e013      	b.n	8003ccc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ca4:	f7ff fd74 	bl	8003790 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d90c      	bls.n	8003ccc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2203      	movs	r2, #3
 8003cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e015      	b.n	8003cf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e4      	bne.n	8003ca4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	223f      	movs	r2, #63	; 0x3f
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d004      	beq.n	8003d1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2280      	movs	r2, #128	; 0x80
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e00c      	b.n	8003d38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2205      	movs	r2, #5
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0201 	bic.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d50:	4b8e      	ldr	r3, [pc, #568]	; (8003f8c <HAL_DMA_IRQHandler+0x248>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a8e      	ldr	r2, [pc, #568]	; (8003f90 <HAL_DMA_IRQHandler+0x24c>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	0a9b      	lsrs	r3, r3, #10
 8003d5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	2208      	movs	r2, #8
 8003d70:	409a      	lsls	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d01a      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d013      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	f043 0201 	orr.w	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d012      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f043 0202 	orr.w	r2, r3, #2
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dea:	2204      	movs	r2, #4
 8003dec:	409a      	lsls	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d012      	beq.n	8003e1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	2204      	movs	r2, #4
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	f043 0204 	orr.w	r2, r3, #4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	2210      	movs	r2, #16
 8003e22:	409a      	lsls	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d043      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d03c      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	2210      	movs	r2, #16
 8003e40:	409a      	lsls	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d018      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d108      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d024      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
 8003e72:	e01f      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01b      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
 8003e84:	e016      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d107      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0208 	bic.w	r2, r2, #8
 8003ea2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	2220      	movs	r2, #32
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 808f 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8087 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	2220      	movs	r2, #32
 8003edc:	409a      	lsls	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b05      	cmp	r3, #5
 8003eec:	d136      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0216 	bic.w	r2, r2, #22
 8003efc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <HAL_DMA_IRQHandler+0x1da>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0208 	bic.w	r2, r2, #8
 8003f2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f32:	223f      	movs	r2, #63	; 0x3f
 8003f34:	409a      	lsls	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d07e      	beq.n	8004050 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	4798      	blx	r3
        }
        return;
 8003f5a:	e079      	b.n	8004050 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01d      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d031      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
 8003f88:	e02c      	b.n	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
 8003f8a:	bf00      	nop
 8003f8c:	20000004 	.word	0x20000004
 8003f90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d023      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4798      	blx	r3
 8003fa4:	e01e      	b.n	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10f      	bne.n	8003fd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0210 	bic.w	r2, r2, #16
 8003fc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d032      	beq.n	8004052 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d022      	beq.n	800403e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2205      	movs	r2, #5
 8003ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	3301      	adds	r3, #1
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	429a      	cmp	r2, r3
 800401a:	d307      	bcc.n	800402c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f2      	bne.n	8004010 <HAL_DMA_IRQHandler+0x2cc>
 800402a:	e000      	b.n	800402e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800402c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
 800404e:	e000      	b.n	8004052 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004050:	bf00      	nop
    }
  }
}
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004074:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d108      	bne.n	8004098 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004096:	e007      	b.n	80040a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	3b10      	subs	r3, #16
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <DMA_CalcBaseAndBitshift+0x64>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040ce:	4a13      	ldr	r2, [pc, #76]	; (800411c <DMA_CalcBaseAndBitshift+0x68>)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d909      	bls.n	80040f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	1d1a      	adds	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	659a      	str	r2, [r3, #88]	; 0x58
 80040f4:	e007      	b.n	8004106 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	aaaaaaab 	.word	0xaaaaaaab
 800411c:	0800a590 	.word	0x0800a590

08004120 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11f      	bne.n	800417a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d856      	bhi.n	80041ee <DMA_CheckFifoParam+0xce>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <DMA_CheckFifoParam+0x28>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	08004159 	.word	0x08004159
 800414c:	0800416b 	.word	0x0800416b
 8004150:	08004159 	.word	0x08004159
 8004154:	080041ef 	.word	0x080041ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d046      	beq.n	80041f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004168:	e043      	b.n	80041f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004172:	d140      	bne.n	80041f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004178:	e03d      	b.n	80041f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004182:	d121      	bne.n	80041c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d837      	bhi.n	80041fa <DMA_CheckFifoParam+0xda>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <DMA_CheckFifoParam+0x70>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041a7 	.word	0x080041a7
 8004198:	080041a1 	.word	0x080041a1
 800419c:	080041b9 	.word	0x080041b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
      break;
 80041a4:	e030      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d025      	beq.n	80041fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b6:	e022      	b.n	80041fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041c0:	d11f      	bne.n	8004202 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041c6:	e01c      	b.n	8004202 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d903      	bls.n	80041d6 <DMA_CheckFifoParam+0xb6>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d003      	beq.n	80041dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041d4:	e018      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
      break;
 80041da:	e015      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00e      	beq.n	8004206 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      break;
 80041ec:	e00b      	b.n	8004206 <DMA_CheckFifoParam+0xe6>
      break;
 80041ee:	bf00      	nop
 80041f0:	e00a      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041f2:	bf00      	nop
 80041f4:	e008      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041f6:	bf00      	nop
 80041f8:	e006      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041fa:	bf00      	nop
 80041fc:	e004      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041fe:	bf00      	nop
 8004200:	e002      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;   
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 8004206:	bf00      	nop
    }
  } 
  
  return status; 
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop

08004218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004218:	b480      	push	{r7}
 800421a:	b089      	sub	sp, #36	; 0x24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800422a:	2300      	movs	r3, #0
 800422c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	e159      	b.n	80044e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004234:	2201      	movs	r2, #1
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	429a      	cmp	r2, r3
 800424e:	f040 8148 	bne.w	80044e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d005      	beq.n	800426a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004266:	2b02      	cmp	r3, #2
 8004268:	d130      	bne.n	80042cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	2203      	movs	r2, #3
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4013      	ands	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042a0:	2201      	movs	r2, #1
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 0201 	and.w	r2, r3, #1
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d017      	beq.n	8004308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	2203      	movs	r2, #3
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d123      	bne.n	800435c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	08da      	lsrs	r2, r3, #3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3208      	adds	r2, #8
 800431c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	220f      	movs	r2, #15
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	08da      	lsrs	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3208      	adds	r2, #8
 8004356:	69b9      	ldr	r1, [r7, #24]
 8004358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	2203      	movs	r2, #3
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 0203 	and.w	r2, r3, #3
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80a2 	beq.w	80044e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	4b57      	ldr	r3, [pc, #348]	; (8004500 <HAL_GPIO_Init+0x2e8>)
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	4a56      	ldr	r2, [pc, #344]	; (8004500 <HAL_GPIO_Init+0x2e8>)
 80043a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043ac:	6453      	str	r3, [r2, #68]	; 0x44
 80043ae:	4b54      	ldr	r3, [pc, #336]	; (8004500 <HAL_GPIO_Init+0x2e8>)
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ba:	4a52      	ldr	r2, [pc, #328]	; (8004504 <HAL_GPIO_Init+0x2ec>)
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	3302      	adds	r3, #2
 80043c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	220f      	movs	r2, #15
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4013      	ands	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a49      	ldr	r2, [pc, #292]	; (8004508 <HAL_GPIO_Init+0x2f0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d019      	beq.n	800441a <HAL_GPIO_Init+0x202>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a48      	ldr	r2, [pc, #288]	; (800450c <HAL_GPIO_Init+0x2f4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_GPIO_Init+0x1fe>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a47      	ldr	r2, [pc, #284]	; (8004510 <HAL_GPIO_Init+0x2f8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00d      	beq.n	8004412 <HAL_GPIO_Init+0x1fa>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a46      	ldr	r2, [pc, #280]	; (8004514 <HAL_GPIO_Init+0x2fc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d007      	beq.n	800440e <HAL_GPIO_Init+0x1f6>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a45      	ldr	r2, [pc, #276]	; (8004518 <HAL_GPIO_Init+0x300>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d101      	bne.n	800440a <HAL_GPIO_Init+0x1f2>
 8004406:	2304      	movs	r3, #4
 8004408:	e008      	b.n	800441c <HAL_GPIO_Init+0x204>
 800440a:	2307      	movs	r3, #7
 800440c:	e006      	b.n	800441c <HAL_GPIO_Init+0x204>
 800440e:	2303      	movs	r3, #3
 8004410:	e004      	b.n	800441c <HAL_GPIO_Init+0x204>
 8004412:	2302      	movs	r3, #2
 8004414:	e002      	b.n	800441c <HAL_GPIO_Init+0x204>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_GPIO_Init+0x204>
 800441a:	2300      	movs	r3, #0
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	f002 0203 	and.w	r2, r2, #3
 8004422:	0092      	lsls	r2, r2, #2
 8004424:	4093      	lsls	r3, r2
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800442c:	4935      	ldr	r1, [pc, #212]	; (8004504 <HAL_GPIO_Init+0x2ec>)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	3302      	adds	r3, #2
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800443a:	4b38      	ldr	r3, [pc, #224]	; (800451c <HAL_GPIO_Init+0x304>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800445e:	4a2f      	ldr	r2, [pc, #188]	; (800451c <HAL_GPIO_Init+0x304>)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004464:	4b2d      	ldr	r3, [pc, #180]	; (800451c <HAL_GPIO_Init+0x304>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004488:	4a24      	ldr	r2, [pc, #144]	; (800451c <HAL_GPIO_Init+0x304>)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800448e:	4b23      	ldr	r3, [pc, #140]	; (800451c <HAL_GPIO_Init+0x304>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	43db      	mvns	r3, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044b2:	4a1a      	ldr	r2, [pc, #104]	; (800451c <HAL_GPIO_Init+0x304>)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044b8:	4b18      	ldr	r3, [pc, #96]	; (800451c <HAL_GPIO_Init+0x304>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044dc:	4a0f      	ldr	r2, [pc, #60]	; (800451c <HAL_GPIO_Init+0x304>)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	3301      	adds	r3, #1
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	f67f aea2 	bls.w	8004234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	3724      	adds	r7, #36	; 0x24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	40013800 	.word	0x40013800
 8004508:	40020000 	.word	0x40020000
 800450c:	40020400 	.word	0x40020400
 8004510:	40020800 	.word	0x40020800
 8004514:	40020c00 	.word	0x40020c00
 8004518:	40021000 	.word	0x40021000
 800451c:	40013c00 	.word	0x40013c00

08004520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	807b      	strh	r3, [r7, #2]
 800452c:	4613      	mov	r3, r2
 800452e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004530:	787b      	ldrb	r3, [r7, #1]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004536:	887a      	ldrh	r2, [r7, #2]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800453c:	e003      	b.n	8004546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800453e:	887b      	ldrh	r3, [r7, #2]
 8004540:	041a      	lsls	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	619a      	str	r2, [r3, #24]
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	460b      	mov	r3, r1
 800455c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004564:	887a      	ldrh	r2, [r7, #2]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4013      	ands	r3, r2
 800456a:	041a      	lsls	r2, r3, #16
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	43d9      	mvns	r1, r3
 8004570:	887b      	ldrh	r3, [r7, #2]
 8004572:	400b      	ands	r3, r1
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	619a      	str	r2, [r3, #24]
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d006      	beq.n	80045ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800459e:	4a05      	ldr	r2, [pc, #20]	; (80045b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045a0:	88fb      	ldrh	r3, [r7, #6]
 80045a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045a4:	88fb      	ldrh	r3, [r7, #6]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fc fdba 	bl	8001120 <HAL_GPIO_EXTI_Callback>
  }
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40013c00 	.word	0x40013c00

080045b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e267      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d075      	beq.n	80046c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045d6:	4b88      	ldr	r3, [pc, #544]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d00c      	beq.n	80045fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045e2:	4b85      	ldr	r3, [pc, #532]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d112      	bne.n	8004614 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ee:	4b82      	ldr	r3, [pc, #520]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045fa:	d10b      	bne.n	8004614 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fc:	4b7e      	ldr	r3, [pc, #504]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d05b      	beq.n	80046c0 <HAL_RCC_OscConfig+0x108>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d157      	bne.n	80046c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e242      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461c:	d106      	bne.n	800462c <HAL_RCC_OscConfig+0x74>
 800461e:	4b76      	ldr	r3, [pc, #472]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a75      	ldr	r2, [pc, #468]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 8004624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e01d      	b.n	8004668 <HAL_RCC_OscConfig+0xb0>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004634:	d10c      	bne.n	8004650 <HAL_RCC_OscConfig+0x98>
 8004636:	4b70      	ldr	r3, [pc, #448]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a6f      	ldr	r2, [pc, #444]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 800463c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	4b6d      	ldr	r3, [pc, #436]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6c      	ldr	r2, [pc, #432]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 8004648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	e00b      	b.n	8004668 <HAL_RCC_OscConfig+0xb0>
 8004650:	4b69      	ldr	r3, [pc, #420]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a68      	ldr	r2, [pc, #416]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 8004656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	4b66      	ldr	r3, [pc, #408]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a65      	ldr	r2, [pc, #404]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 8004662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d013      	beq.n	8004698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7ff f88e 	bl	8003790 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004678:	f7ff f88a 	bl	8003790 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	; 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e207      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	4b5b      	ldr	r3, [pc, #364]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0xc0>
 8004696:	e014      	b.n	80046c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7ff f87a 	bl	8003790 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a0:	f7ff f876 	bl	8003790 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e1f3      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b2:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0xe8>
 80046be:	e000      	b.n	80046c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d063      	beq.n	8004796 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ce:	4b4a      	ldr	r3, [pc, #296]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046da:	4b47      	ldr	r3, [pc, #284]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d11c      	bne.n	8004720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e6:	4b44      	ldr	r3, [pc, #272]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d116      	bne.n	8004720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f2:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_RCC_OscConfig+0x152>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e1c7      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470a:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4937      	ldr	r1, [pc, #220]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471e:	e03a      	b.n	8004796 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d020      	beq.n	800476a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004728:	4b34      	ldr	r3, [pc, #208]	; (80047fc <HAL_RCC_OscConfig+0x244>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472e:	f7ff f82f 	bl	8003790 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004736:	f7ff f82b 	bl	8003790 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e1a8      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004754:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	4925      	ldr	r1, [pc, #148]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 8004764:	4313      	orrs	r3, r2
 8004766:	600b      	str	r3, [r1, #0]
 8004768:	e015      	b.n	8004796 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800476a:	4b24      	ldr	r3, [pc, #144]	; (80047fc <HAL_RCC_OscConfig+0x244>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004770:	f7ff f80e 	bl	8003790 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004778:	f7ff f80a 	bl	8003790 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e187      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d036      	beq.n	8004810 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d016      	beq.n	80047d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <HAL_RCC_OscConfig+0x248>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b0:	f7fe ffee 	bl	8003790 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047b8:	f7fe ffea 	bl	8003790 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e167      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ca:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <HAL_RCC_OscConfig+0x240>)
 80047cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x200>
 80047d6:	e01b      	b.n	8004810 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_RCC_OscConfig+0x248>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047de:	f7fe ffd7 	bl	8003790 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e4:	e00e      	b.n	8004804 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e6:	f7fe ffd3 	bl	8003790 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d907      	bls.n	8004804 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e150      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
 80047f8:	40023800 	.word	0x40023800
 80047fc:	42470000 	.word	0x42470000
 8004800:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004804:	4b88      	ldr	r3, [pc, #544]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1ea      	bne.n	80047e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8097 	beq.w	800494c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481e:	2300      	movs	r3, #0
 8004820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004822:	4b81      	ldr	r3, [pc, #516]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10f      	bne.n	800484e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	4b7d      	ldr	r3, [pc, #500]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	4a7c      	ldr	r2, [pc, #496]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483c:	6413      	str	r3, [r2, #64]	; 0x40
 800483e:	4b7a      	ldr	r3, [pc, #488]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484e:	4b77      	ldr	r3, [pc, #476]	; (8004a2c <HAL_RCC_OscConfig+0x474>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	2b00      	cmp	r3, #0
 8004858:	d118      	bne.n	800488c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800485a:	4b74      	ldr	r3, [pc, #464]	; (8004a2c <HAL_RCC_OscConfig+0x474>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a73      	ldr	r2, [pc, #460]	; (8004a2c <HAL_RCC_OscConfig+0x474>)
 8004860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004866:	f7fe ff93 	bl	8003790 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486e:	f7fe ff8f 	bl	8003790 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e10c      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004880:	4b6a      	ldr	r3, [pc, #424]	; (8004a2c <HAL_RCC_OscConfig+0x474>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d106      	bne.n	80048a2 <HAL_RCC_OscConfig+0x2ea>
 8004894:	4b64      	ldr	r3, [pc, #400]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	4a63      	ldr	r2, [pc, #396]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	6713      	str	r3, [r2, #112]	; 0x70
 80048a0:	e01c      	b.n	80048dc <HAL_RCC_OscConfig+0x324>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b05      	cmp	r3, #5
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCC_OscConfig+0x30c>
 80048aa:	4b5f      	ldr	r3, [pc, #380]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	4a5e      	ldr	r2, [pc, #376]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	6713      	str	r3, [r2, #112]	; 0x70
 80048b6:	4b5c      	ldr	r3, [pc, #368]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	4a5b      	ldr	r2, [pc, #364]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	6713      	str	r3, [r2, #112]	; 0x70
 80048c2:	e00b      	b.n	80048dc <HAL_RCC_OscConfig+0x324>
 80048c4:	4b58      	ldr	r3, [pc, #352]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	4a57      	ldr	r2, [pc, #348]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 80048ca:	f023 0301 	bic.w	r3, r3, #1
 80048ce:	6713      	str	r3, [r2, #112]	; 0x70
 80048d0:	4b55      	ldr	r3, [pc, #340]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	4a54      	ldr	r2, [pc, #336]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 80048d6:	f023 0304 	bic.w	r3, r3, #4
 80048da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d015      	beq.n	8004910 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fe ff54 	bl	8003790 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fe ff50 	bl	8003790 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e0cb      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004902:	4b49      	ldr	r3, [pc, #292]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0ee      	beq.n	80048ec <HAL_RCC_OscConfig+0x334>
 800490e:	e014      	b.n	800493a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004910:	f7fe ff3e 	bl	8003790 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004916:	e00a      	b.n	800492e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fe ff3a 	bl	8003790 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e0b5      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800492e:	4b3e      	ldr	r3, [pc, #248]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1ee      	bne.n	8004918 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800493a:	7dfb      	ldrb	r3, [r7, #23]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d105      	bne.n	800494c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004940:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	4a38      	ldr	r2, [pc, #224]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80a1 	beq.w	8004a98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004956:	4b34      	ldr	r3, [pc, #208]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	2b08      	cmp	r3, #8
 8004960:	d05c      	beq.n	8004a1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d141      	bne.n	80049ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496a:	4b31      	ldr	r3, [pc, #196]	; (8004a30 <HAL_RCC_OscConfig+0x478>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004970:	f7fe ff0e 	bl	8003790 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004978:	f7fe ff0a 	bl	8003790 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e087      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498a:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	019b      	lsls	r3, r3, #6
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	3b01      	subs	r3, #1
 80049b0:	041b      	lsls	r3, r3, #16
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	491b      	ldr	r1, [pc, #108]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c0:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCC_OscConfig+0x478>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c6:	f7fe fee3 	bl	8003790 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ce:	f7fe fedf 	bl	8003790 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e05c      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e0:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x416>
 80049ec:	e054      	b.n	8004a98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <HAL_RCC_OscConfig+0x478>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7fe fecc 	bl	8003790 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049fc:	f7fe fec8 	bl	8003790 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e045      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_RCC_OscConfig+0x470>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x444>
 8004a1a:	e03d      	b.n	8004a98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e038      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40007000 	.word	0x40007000
 8004a30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a34:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <HAL_RCC_OscConfig+0x4ec>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d028      	beq.n	8004a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d121      	bne.n	8004a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d11a      	bne.n	8004a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a64:	4013      	ands	r3, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d111      	bne.n	8004a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d107      	bne.n	8004a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800

08004aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0cc      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004abc:	4b68      	ldr	r3, [pc, #416]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d90c      	bls.n	8004ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b65      	ldr	r3, [pc, #404]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b63      	ldr	r3, [pc, #396]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0b8      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d020      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004afc:	4b59      	ldr	r3, [pc, #356]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4a58      	ldr	r2, [pc, #352]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b14:	4b53      	ldr	r3, [pc, #332]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4a52      	ldr	r2, [pc, #328]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b20:	4b50      	ldr	r3, [pc, #320]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	494d      	ldr	r1, [pc, #308]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d044      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d107      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d119      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e07f      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b66:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e06f      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b76:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e067      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b86:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 0203 	bic.w	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4934      	ldr	r1, [pc, #208]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b98:	f7fe fdfa 	bl	8003790 <HAL_GetTick>
 8004b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba0:	f7fe fdf6 	bl	8003790 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e04f      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 020c 	and.w	r2, r3, #12
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d1eb      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d20c      	bcs.n	8004bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e032      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bfc:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4916      	ldr	r1, [pc, #88]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	490e      	ldr	r1, [pc, #56]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c2e:	f000 f821 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8004c32:	4602      	mov	r2, r0
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	490a      	ldr	r1, [pc, #40]	; (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004c40:	5ccb      	ldrb	r3, [r1, r3]
 8004c42:	fa22 f303 	lsr.w	r3, r2, r3
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c4a:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fd5a 	bl	8003708 <HAL_InitTick>

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40023c00 	.word	0x40023c00
 8004c64:	40023800 	.word	0x40023800
 8004c68:	0800a578 	.word	0x0800a578
 8004c6c:	20000004 	.word	0x20000004
 8004c70:	20000008 	.word	0x20000008

08004c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c78:	b094      	sub	sp, #80	; 0x50
 8004c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c80:	2300      	movs	r3, #0
 8004c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c84:	2300      	movs	r3, #0
 8004c86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c8c:	4b79      	ldr	r3, [pc, #484]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 030c 	and.w	r3, r3, #12
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d00d      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	f200 80e1 	bhi.w	8004e60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d003      	beq.n	8004cae <HAL_RCC_GetSysClockFreq+0x3a>
 8004ca6:	e0db      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca8:	4b73      	ldr	r3, [pc, #460]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004caa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004cac:	e0db      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cae:	4b73      	ldr	r3, [pc, #460]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x208>)
 8004cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cb2:	e0d8      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cb4:	4b6f      	ldr	r3, [pc, #444]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cbe:	4b6d      	ldr	r3, [pc, #436]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d063      	beq.n	8004d92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cca:	4b6a      	ldr	r3, [pc, #424]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	099b      	lsrs	r3, r3, #6
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8004cde:	2300      	movs	r3, #0
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ce6:	4622      	mov	r2, r4
 8004ce8:	462b      	mov	r3, r5
 8004cea:	f04f 0000 	mov.w	r0, #0
 8004cee:	f04f 0100 	mov.w	r1, #0
 8004cf2:	0159      	lsls	r1, r3, #5
 8004cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf8:	0150      	lsls	r0, r2, #5
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4621      	mov	r1, r4
 8004d00:	1a51      	subs	r1, r2, r1
 8004d02:	6139      	str	r1, [r7, #16]
 8004d04:	4629      	mov	r1, r5
 8004d06:	eb63 0301 	sbc.w	r3, r3, r1
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d18:	4659      	mov	r1, fp
 8004d1a:	018b      	lsls	r3, r1, #6
 8004d1c:	4651      	mov	r1, sl
 8004d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d22:	4651      	mov	r1, sl
 8004d24:	018a      	lsls	r2, r1, #6
 8004d26:	4651      	mov	r1, sl
 8004d28:	ebb2 0801 	subs.w	r8, r2, r1
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d46:	4690      	mov	r8, r2
 8004d48:	4699      	mov	r9, r3
 8004d4a:	4623      	mov	r3, r4
 8004d4c:	eb18 0303 	adds.w	r3, r8, r3
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	462b      	mov	r3, r5
 8004d54:	eb49 0303 	adc.w	r3, r9, r3
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d66:	4629      	mov	r1, r5
 8004d68:	024b      	lsls	r3, r1, #9
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d70:	4621      	mov	r1, r4
 8004d72:	024a      	lsls	r2, r1, #9
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d84:	f7fb ff98 	bl	8000cb8 <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d90:	e058      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d92:	4b38      	ldr	r3, [pc, #224]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	2300      	movs	r3, #0
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
 8004da8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dac:	4642      	mov	r2, r8
 8004dae:	464b      	mov	r3, r9
 8004db0:	f04f 0000 	mov.w	r0, #0
 8004db4:	f04f 0100 	mov.w	r1, #0
 8004db8:	0159      	lsls	r1, r3, #5
 8004dba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dbe:	0150      	lsls	r0, r2, #5
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dca:	4649      	mov	r1, r9
 8004dcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ddc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004de0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004de4:	ebb2 040a 	subs.w	r4, r2, sl
 8004de8:	eb63 050b 	sbc.w	r5, r3, fp
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	00eb      	lsls	r3, r5, #3
 8004df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dfa:	00e2      	lsls	r2, r4, #3
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	461d      	mov	r5, r3
 8004e00:	4643      	mov	r3, r8
 8004e02:	18e3      	adds	r3, r4, r3
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	464b      	mov	r3, r9
 8004e08:	eb45 0303 	adc.w	r3, r5, r3
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	028b      	lsls	r3, r1, #10
 8004e1e:	4621      	mov	r1, r4
 8004e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e24:	4621      	mov	r1, r4
 8004e26:	028a      	lsls	r2, r1, #10
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e2e:	2200      	movs	r2, #0
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	61fa      	str	r2, [r7, #28]
 8004e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e38:	f7fb ff3e 	bl	8000cb8 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4613      	mov	r3, r2
 8004e42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	0c1b      	lsrs	r3, r3, #16
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	3301      	adds	r3, #1
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e5e:	e002      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3750      	adds	r7, #80	; 0x50
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e72:	bf00      	nop
 8004e74:	40023800 	.word	0x40023800
 8004e78:	00f42400 	.word	0x00f42400
 8004e7c:	007a1200 	.word	0x007a1200

08004e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e86:	681b      	ldr	r3, [r3, #0]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000004 	.word	0x20000004

08004e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e9c:	f7ff fff0 	bl	8004e80 <HAL_RCC_GetHCLKFreq>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	0a9b      	lsrs	r3, r3, #10
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4903      	ldr	r1, [pc, #12]	; (8004ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eae:	5ccb      	ldrb	r3, [r1, r3]
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	0800a588 	.word	0x0800a588

08004ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ec4:	f7ff ffdc 	bl	8004e80 <HAL_RCC_GetHCLKFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	0b5b      	lsrs	r3, r3, #13
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	4903      	ldr	r1, [pc, #12]	; (8004ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	0800a588 	.word	0x0800a588

08004ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e041      	b.n	8004f7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fe f93e 	bl	8003190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f000 fc28 	bl	800577c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d001      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e044      	b.n	800502a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d018      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fca:	d013      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1a      	ldr	r2, [pc, #104]	; (800503c <HAL_TIM_Base_Start_IT+0xb4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a19      	ldr	r2, [pc, #100]	; (8005040 <HAL_TIM_Base_Start_IT+0xb8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d009      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a17      	ldr	r2, [pc, #92]	; (8005044 <HAL_TIM_Base_Start_IT+0xbc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a16      	ldr	r2, [pc, #88]	; (8005048 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d111      	bne.n	8005018 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d010      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005016:	e007      	b.n	8005028 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40010000 	.word	0x40010000
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
 8005048:	40014000 	.word	0x40014000

0800504c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e041      	b.n	80050e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fd ffc8 	bl	8003008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f000 fb76 	bl	800577c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <HAL_TIM_PWM_Start+0x24>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e022      	b.n	8005156 <HAL_TIM_PWM_Start+0x6a>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b04      	cmp	r3, #4
 8005114:	d109      	bne.n	800512a <HAL_TIM_PWM_Start+0x3e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b01      	cmp	r3, #1
 8005120:	bf14      	ite	ne
 8005122:	2301      	movne	r3, #1
 8005124:	2300      	moveq	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	e015      	b.n	8005156 <HAL_TIM_PWM_Start+0x6a>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d109      	bne.n	8005144 <HAL_TIM_PWM_Start+0x58>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	bf14      	ite	ne
 800513c:	2301      	movne	r3, #1
 800513e:	2300      	moveq	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e008      	b.n	8005156 <HAL_TIM_PWM_Start+0x6a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e068      	b.n	8005230 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <HAL_TIM_PWM_Start+0x82>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800516c:	e013      	b.n	8005196 <HAL_TIM_PWM_Start+0xaa>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d104      	bne.n	800517e <HAL_TIM_PWM_Start+0x92>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800517c:	e00b      	b.n	8005196 <HAL_TIM_PWM_Start+0xaa>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d104      	bne.n	800518e <HAL_TIM_PWM_Start+0xa2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800518c:	e003      	b.n	8005196 <HAL_TIM_PWM_Start+0xaa>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2202      	movs	r2, #2
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2201      	movs	r2, #1
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fcf8 	bl	8005b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a23      	ldr	r2, [pc, #140]	; (8005238 <HAL_TIM_PWM_Start+0x14c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d107      	bne.n	80051be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <HAL_TIM_PWM_Start+0x14c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <HAL_TIM_PWM_Start+0x10e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d0:	d013      	beq.n	80051fa <HAL_TIM_PWM_Start+0x10e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a19      	ldr	r2, [pc, #100]	; (800523c <HAL_TIM_PWM_Start+0x150>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <HAL_TIM_PWM_Start+0x10e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a17      	ldr	r2, [pc, #92]	; (8005240 <HAL_TIM_PWM_Start+0x154>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_TIM_PWM_Start+0x10e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a16      	ldr	r2, [pc, #88]	; (8005244 <HAL_TIM_PWM_Start+0x158>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_TIM_PWM_Start+0x10e>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a14      	ldr	r2, [pc, #80]	; (8005248 <HAL_TIM_PWM_Start+0x15c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d111      	bne.n	800521e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b06      	cmp	r3, #6
 800520a:	d010      	beq.n	800522e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521c:	e007      	b.n	800522e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0201 	orr.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40010000 	.word	0x40010000
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00
 8005248:	40014000 	.word	0x40014000

0800524c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e097      	b.n	8005390 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7fd fefd 	bl	8003074 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005290:	f023 0307 	bic.w	r3, r3, #7
 8005294:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f000 fa6b 	bl	800577c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ce:	f023 0303 	bic.w	r3, r3, #3
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	4313      	orrs	r3, r2
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052ec:	f023 030c 	bic.w	r3, r3, #12
 80052f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	4313      	orrs	r3, r2
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	011a      	lsls	r2, r3, #4
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	031b      	lsls	r3, r3, #12
 800531c:	4313      	orrs	r3, r2
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800532a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005332:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	4313      	orrs	r3, r2
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d122      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d11b      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0202 	mvn.w	r2, #2
 80053c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f9b0 	bl	8005740 <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f9a2 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f9b3 	bl	8005754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d122      	bne.n	8005448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d11b      	bne.n	8005448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0204 	mvn.w	r2, #4
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f986 	bl	8005740 <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f978 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f989 	bl	8005754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b08      	cmp	r3, #8
 8005454:	d122      	bne.n	800549c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b08      	cmp	r3, #8
 8005462:	d11b      	bne.n	800549c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0208 	mvn.w	r2, #8
 800546c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2204      	movs	r2, #4
 8005472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f95c 	bl	8005740 <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f94e 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f95f 	bl	8005754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d122      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d11b      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0210 	mvn.w	r2, #16
 80054c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2208      	movs	r2, #8
 80054c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f932 	bl	8005740 <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f924 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f935 	bl	8005754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d10e      	bne.n	800551c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d107      	bne.n	800551c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0201 	mvn.w	r2, #1
 8005514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fb fea2 	bl	8001260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d10e      	bne.n	8005548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005534:	2b80      	cmp	r3, #128	; 0x80
 8005536:	d107      	bne.n	8005548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fbc4 	bl	8005cd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f8fa 	bl	8005768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b20      	cmp	r3, #32
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b20      	cmp	r3, #32
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0220 	mvn.w	r2, #32
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fb8e 	bl	8005cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e0ae      	b.n	8005724 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	f200 809f 	bhi.w	8005714 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	08005611 	.word	0x08005611
 80055e0:	08005715 	.word	0x08005715
 80055e4:	08005715 	.word	0x08005715
 80055e8:	08005715 	.word	0x08005715
 80055ec:	08005651 	.word	0x08005651
 80055f0:	08005715 	.word	0x08005715
 80055f4:	08005715 	.word	0x08005715
 80055f8:	08005715 	.word	0x08005715
 80055fc:	08005693 	.word	0x08005693
 8005600:	08005715 	.word	0x08005715
 8005604:	08005715 	.word	0x08005715
 8005608:	08005715 	.word	0x08005715
 800560c:	080056d3 	.word	0x080056d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 f930 	bl	800587c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0208 	orr.w	r2, r2, #8
 800562a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0204 	bic.w	r2, r2, #4
 800563a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6999      	ldr	r1, [r3, #24]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	619a      	str	r2, [r3, #24]
      break;
 800564e:	e064      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f976 	bl	8005948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699a      	ldr	r2, [r3, #24]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6999      	ldr	r1, [r3, #24]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	021a      	lsls	r2, r3, #8
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	619a      	str	r2, [r3, #24]
      break;
 8005690:	e043      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	4618      	mov	r0, r3
 800569a:	f000 f9c1 	bl	8005a20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0208 	orr.w	r2, r2, #8
 80056ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0204 	bic.w	r2, r2, #4
 80056bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69d9      	ldr	r1, [r3, #28]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	61da      	str	r2, [r3, #28]
      break;
 80056d0:	e023      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fa0b 	bl	8005af4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69d9      	ldr	r1, [r3, #28]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	021a      	lsls	r2, r3, #8
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	61da      	str	r2, [r3, #28]
      break;
 8005712:	e002      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]
      break;
 8005718:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005722:	7dfb      	ldrb	r3, [r7, #23]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a34      	ldr	r2, [pc, #208]	; (8005860 <TIM_Base_SetConfig+0xe4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00f      	beq.n	80057b4 <TIM_Base_SetConfig+0x38>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579a:	d00b      	beq.n	80057b4 <TIM_Base_SetConfig+0x38>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a31      	ldr	r2, [pc, #196]	; (8005864 <TIM_Base_SetConfig+0xe8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d007      	beq.n	80057b4 <TIM_Base_SetConfig+0x38>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a30      	ldr	r2, [pc, #192]	; (8005868 <TIM_Base_SetConfig+0xec>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d003      	beq.n	80057b4 <TIM_Base_SetConfig+0x38>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a2f      	ldr	r2, [pc, #188]	; (800586c <TIM_Base_SetConfig+0xf0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d108      	bne.n	80057c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a25      	ldr	r2, [pc, #148]	; (8005860 <TIM_Base_SetConfig+0xe4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01b      	beq.n	8005806 <TIM_Base_SetConfig+0x8a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d4:	d017      	beq.n	8005806 <TIM_Base_SetConfig+0x8a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a22      	ldr	r2, [pc, #136]	; (8005864 <TIM_Base_SetConfig+0xe8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <TIM_Base_SetConfig+0x8a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a21      	ldr	r2, [pc, #132]	; (8005868 <TIM_Base_SetConfig+0xec>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00f      	beq.n	8005806 <TIM_Base_SetConfig+0x8a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a20      	ldr	r2, [pc, #128]	; (800586c <TIM_Base_SetConfig+0xf0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00b      	beq.n	8005806 <TIM_Base_SetConfig+0x8a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a1f      	ldr	r2, [pc, #124]	; (8005870 <TIM_Base_SetConfig+0xf4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <TIM_Base_SetConfig+0x8a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1e      	ldr	r2, [pc, #120]	; (8005874 <TIM_Base_SetConfig+0xf8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_Base_SetConfig+0x8a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1d      	ldr	r2, [pc, #116]	; (8005878 <TIM_Base_SetConfig+0xfc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d108      	bne.n	8005818 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a08      	ldr	r2, [pc, #32]	; (8005860 <TIM_Base_SetConfig+0xe4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d103      	bne.n	800584c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	615a      	str	r2, [r3, #20]
}
 8005852:	bf00      	nop
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40010000 	.word	0x40010000
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800
 800586c:	40000c00 	.word	0x40000c00
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400
 8005878:	40014800 	.word	0x40014800

0800587c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f023 0201 	bic.w	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 0302 	bic.w	r3, r3, #2
 80058c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <TIM_OC1_SetConfig+0xc8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d10c      	bne.n	80058f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0308 	bic.w	r3, r3, #8
 80058de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <TIM_OC1_SetConfig+0xc8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d111      	bne.n	800591e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	621a      	str	r2, [r3, #32]
}
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40010000 	.word	0x40010000

08005948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0210 	bic.w	r2, r3, #16
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	021b      	lsls	r3, r3, #8
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0320 	bic.w	r3, r3, #32
 8005992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a1e      	ldr	r2, [pc, #120]	; (8005a1c <TIM_OC2_SetConfig+0xd4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d10d      	bne.n	80059c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <TIM_OC2_SetConfig+0xd4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d113      	bne.n	80059f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40010000 	.word	0x40010000

08005a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0303 	bic.w	r3, r3, #3
 8005a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <TIM_OC3_SetConfig+0xd0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d10d      	bne.n	8005a9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a14      	ldr	r2, [pc, #80]	; (8005af0 <TIM_OC3_SetConfig+0xd0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d113      	bne.n	8005aca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	621a      	str	r2, [r3, #32]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40010000 	.word	0x40010000

08005af4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	031b      	lsls	r3, r3, #12
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a10      	ldr	r2, [pc, #64]	; (8005b90 <TIM_OC4_SetConfig+0x9c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d109      	bne.n	8005b68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	019b      	lsls	r3, r3, #6
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	621a      	str	r2, [r3, #32]
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40010000 	.word	0x40010000

08005b94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1a      	ldr	r2, [r3, #32]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a1a      	ldr	r2, [r3, #32]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e050      	b.n	8005c9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d018      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c44:	d013      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a18      	ldr	r2, [pc, #96]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a13      	ldr	r2, [pc, #76]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d10c      	bne.n	8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40014000 	.word	0x40014000

08005cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e03f      	b.n	8005d76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fd fac6 	bl	800329c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2224      	movs	r2, #36	; 0x24
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 ff4d 	bl	8006bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08c      	sub	sp, #48	; 0x30
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d165      	bne.n	8005e66 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <HAL_UART_Transmit_DMA+0x26>
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e05e      	b.n	8005e68 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_UART_Transmit_DMA+0x38>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e057      	b.n	8005e68 <HAL_UART_Transmit_DMA+0xe8>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	88fa      	ldrh	r2, [r7, #6]
 8005dca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	88fa      	ldrh	r2, [r7, #6]
 8005dd0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2221      	movs	r2, #33	; 0x21
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de4:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <HAL_UART_Transmit_DMA+0xf0>)
 8005de6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dec:	4a21      	ldr	r2, [pc, #132]	; (8005e74 <HAL_UART_Transmit_DMA+0xf4>)
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df4:	4a20      	ldr	r2, [pc, #128]	; (8005e78 <HAL_UART_Transmit_DMA+0xf8>)
 8005df6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005e00:	f107 0308 	add.w	r3, r7, #8
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	6819      	ldr	r1, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3304      	adds	r3, #4
 8005e14:	461a      	mov	r2, r3
 8005e16:	88fb      	ldrh	r3, [r7, #6]
 8005e18:	f7fd feaa 	bl	8003b70 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e24:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e4e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e50:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6a39      	ldr	r1, [r7, #32]
 8005e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e000      	b.n	8005e68 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005e66:	2302      	movs	r3, #2
  }
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3730      	adds	r7, #48	; 0x30
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	08006461 	.word	0x08006461
 8005e74:	080064fb 	.word	0x080064fb
 8005e78:	08006673 	.word	0x08006673

08005e7c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	4613      	mov	r3, r2
 8005e88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d11d      	bne.n	8005ed2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_UART_Receive_DMA+0x26>
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e016      	b.n	8005ed4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_UART_Receive_DMA+0x38>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e00f      	b.n	8005ed4 <HAL_UART_Receive_DMA+0x58>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fc1d 	bl	8006708 <UART_Start_Receive_DMA>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	e000      	b.n	8005ed4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ed2:	2302      	movs	r3, #2
  }
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b0ba      	sub	sp, #232	; 0xe8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10f      	bne.n	8005f42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <HAL_UART_IRQHandler+0x66>
 8005f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fd89 	bl	8006a52 <UART_Receive_IT>
      return;
 8005f40:	e256      	b.n	80063f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80de 	beq.w	8006108 <HAL_UART_IRQHandler+0x22c>
 8005f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d106      	bne.n	8005f66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 80d1 	beq.w	8006108 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00b      	beq.n	8005f8a <HAL_UART_IRQHandler+0xae>
 8005f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	f043 0201 	orr.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <HAL_UART_IRQHandler+0xd2>
 8005f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f043 0202 	orr.w	r2, r3, #2
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00b      	beq.n	8005fd2 <HAL_UART_IRQHandler+0xf6>
 8005fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d005      	beq.n	8005fd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	f043 0204 	orr.w	r2, r3, #4
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d011      	beq.n	8006002 <HAL_UART_IRQHandler+0x126>
 8005fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d105      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	f043 0208 	orr.w	r2, r3, #8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 81ed 	beq.w	80063e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800600c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_UART_IRQHandler+0x14e>
 8006018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fd14 	bl	8006a52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	bf0c      	ite	eq
 8006038:	2301      	moveq	r3, #1
 800603a:	2300      	movne	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d103      	bne.n	8006056 <HAL_UART_IRQHandler+0x17a>
 800604e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006052:	2b00      	cmp	r3, #0
 8006054:	d04f      	beq.n	80060f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fc1c 	bl	8006894 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d141      	bne.n	80060ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3314      	adds	r3, #20
 8006070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006080:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3314      	adds	r3, #20
 8006092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006096:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800609a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1d9      	bne.n	800606a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d013      	beq.n	80060e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	4a7d      	ldr	r2, [pc, #500]	; (80062b8 <HAL_UART_IRQHandler+0x3dc>)
 80060c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fd fe18 	bl	8003d00 <HAL_DMA_Abort_IT>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d016      	beq.n	8006104 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060e0:	4610      	mov	r0, r2
 80060e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e4:	e00e      	b.n	8006104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f9a4 	bl	8006434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ec:	e00a      	b.n	8006104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f9a0 	bl	8006434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	e006      	b.n	8006104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f99c 	bl	8006434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006102:	e170      	b.n	80063e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	bf00      	nop
    return;
 8006106:	e16e      	b.n	80063e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	2b01      	cmp	r3, #1
 800610e:	f040 814a 	bne.w	80063a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 8143 	beq.w	80063a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 813c 	beq.w	80063a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800612e:	2300      	movs	r3, #0
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60bb      	str	r3, [r7, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	60bb      	str	r3, [r7, #8]
 8006142:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	f040 80b4 	bne.w	80062bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006160:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8140 	beq.w	80063ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800616e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006172:	429a      	cmp	r2, r3
 8006174:	f080 8139 	bcs.w	80063ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800617e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800618a:	f000 8088 	beq.w	800629e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	330c      	adds	r3, #12
 8006194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1d9      	bne.n	800618e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3314      	adds	r3, #20
 80061e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3314      	adds	r3, #20
 80061fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006202:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006206:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e1      	bne.n	80061da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3314      	adds	r3, #20
 800621c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3314      	adds	r3, #20
 8006236:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800623a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800623c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006240:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e3      	bne.n	8006216 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800626c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800626e:	f023 0310 	bic.w	r3, r3, #16
 8006272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006280:	65ba      	str	r2, [r7, #88]	; 0x58
 8006282:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006286:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800628e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e3      	bne.n	800625c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	4618      	mov	r0, r3
 800629a:	f7fd fcc1 	bl	8003c20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f8ca 	bl	8006448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062b4:	e099      	b.n	80063ea <HAL_UART_IRQHandler+0x50e>
 80062b6:	bf00      	nop
 80062b8:	0800695b 	.word	0x0800695b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 808b 	beq.w	80063ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80062d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8086 	beq.w	80063ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	330c      	adds	r3, #12
 80062e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	330c      	adds	r3, #12
 8006302:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006306:	647a      	str	r2, [r7, #68]	; 0x44
 8006308:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800630c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e3      	bne.n	80062e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3314      	adds	r3, #20
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	623b      	str	r3, [r7, #32]
   return(result);
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3314      	adds	r3, #20
 800633a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800633e:	633a      	str	r2, [r7, #48]	; 0x30
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e3      	bne.n	800631a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0310 	bic.w	r3, r3, #16
 8006376:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006384:	61fa      	str	r2, [r7, #28]
 8006386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	69b9      	ldr	r1, [r7, #24]
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	617b      	str	r3, [r7, #20]
   return(result);
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e3      	bne.n	8006360 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f852 	bl	8006448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063a4:	e023      	b.n	80063ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <HAL_UART_IRQHandler+0x4ea>
 80063b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fadf 	bl	8006982 <UART_Transmit_IT>
    return;
 80063c4:	e014      	b.n	80063f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00e      	beq.n	80063f0 <HAL_UART_IRQHandler+0x514>
 80063d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d008      	beq.n	80063f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fb1f 	bl	8006a22 <UART_EndTransmit_IT>
    return;
 80063e4:	e004      	b.n	80063f0 <HAL_UART_IRQHandler+0x514>
    return;
 80063e6:	bf00      	nop
 80063e8:	e002      	b.n	80063f0 <HAL_UART_IRQHandler+0x514>
      return;
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <HAL_UART_IRQHandler+0x514>
      return;
 80063ee:	bf00      	nop
  }
}
 80063f0:	37e8      	adds	r7, #232	; 0xe8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop

080063f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b090      	sub	sp, #64	; 0x40
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006478:	2b00      	cmp	r3, #0
 800647a:	d137      	bne.n	80064ec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800647c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647e:	2200      	movs	r2, #0
 8006480:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3314      	adds	r3, #20
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	623b      	str	r3, [r7, #32]
   return(result);
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006498:	63bb      	str	r3, [r7, #56]	; 0x38
 800649a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3314      	adds	r3, #20
 80064a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064a2:	633a      	str	r2, [r7, #48]	; 0x30
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e5      	bne.n	8006482 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
 80064ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	330c      	adds	r3, #12
 80064d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064d6:	61fa      	str	r2, [r7, #28]
 80064d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	69b9      	ldr	r1, [r7, #24]
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	617b      	str	r3, [r7, #20]
   return(result);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e5      	bne.n	80064b6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064ea:	e002      	b.n	80064f2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80064ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80064ee:	f7ff ff83 	bl	80063f8 <HAL_UART_TxCpltCallback>
}
 80064f2:	bf00      	nop
 80064f4:	3740      	adds	r7, #64	; 0x40
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff ff7f 	bl	800640c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b09c      	sub	sp, #112	; 0x70
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652e:	2b00      	cmp	r3, #0
 8006530:	d172      	bne.n	8006618 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006534:	2200      	movs	r2, #0
 8006536:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800654a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800654e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	330c      	adds	r3, #12
 8006556:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006558:	65ba      	str	r2, [r7, #88]	; 0x58
 800655a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800655e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e5      	bne.n	8006538 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3314      	adds	r3, #20
 8006572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	f023 0301 	bic.w	r3, r3, #1
 8006582:	667b      	str	r3, [r7, #100]	; 0x64
 8006584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3314      	adds	r3, #20
 800658a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800658c:	647a      	str	r2, [r7, #68]	; 0x44
 800658e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800659a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e5      	bne.n	800656c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3314      	adds	r3, #20
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	623b      	str	r3, [r7, #32]
   return(result);
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b6:	663b      	str	r3, [r7, #96]	; 0x60
 80065b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3314      	adds	r3, #20
 80065be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065c0:	633a      	str	r2, [r7, #48]	; 0x30
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e5      	bne.n	80065a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d119      	bne.n	8006618 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	330c      	adds	r3, #12
 80065ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0310 	bic.w	r3, r3, #16
 80065fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	330c      	adds	r3, #12
 8006602:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006604:	61fa      	str	r2, [r7, #28]
 8006606:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	69b9      	ldr	r1, [r7, #24]
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	617b      	str	r3, [r7, #20]
   return(result);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e5      	bne.n	80065e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	2b01      	cmp	r3, #1
 800661e:	d106      	bne.n	800662e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006622:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006624:	4619      	mov	r1, r3
 8006626:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006628:	f7ff ff0e 	bl	8006448 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800662c:	e002      	b.n	8006634 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800662e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006630:	f7fa fcc4 	bl	8000fbc <HAL_UART_RxCpltCallback>
}
 8006634:	bf00      	nop
 8006636:	3770      	adds	r7, #112	; 0x70
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664e:	2b01      	cmp	r3, #1
 8006650:	d108      	bne.n	8006664 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	b29b      	uxth	r3, r3
 800665a:	4619      	mov	r1, r3
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7ff fef3 	bl	8006448 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006662:	e002      	b.n	800666a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7ff fedb 	bl	8006420 <HAL_UART_RxHalfCpltCallback>
}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b80      	cmp	r3, #128	; 0x80
 8006690:	bf0c      	ite	eq
 8006692:	2301      	moveq	r3, #1
 8006694:	2300      	movne	r3, #0
 8006696:	b2db      	uxtb	r3, r3
 8006698:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b21      	cmp	r3, #33	; 0x21
 80066a4:	d108      	bne.n	80066b8 <UART_DMAError+0x46>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2200      	movs	r2, #0
 80066b0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80066b2:	68b8      	ldr	r0, [r7, #8]
 80066b4:	f000 f8c6 	bl	8006844 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c2:	2b40      	cmp	r3, #64	; 0x40
 80066c4:	bf0c      	ite	eq
 80066c6:	2301      	moveq	r3, #1
 80066c8:	2300      	movne	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b22      	cmp	r3, #34	; 0x22
 80066d8:	d108      	bne.n	80066ec <UART_DMAError+0x7a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2200      	movs	r2, #0
 80066e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80066e6:	68b8      	ldr	r0, [r7, #8]
 80066e8:	f000 f8d4 	bl	8006894 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	f043 0210 	orr.w	r2, r3, #16
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066f8:	68b8      	ldr	r0, [r7, #8]
 80066fa:	f7ff fe9b 	bl	8006434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b098      	sub	sp, #96	; 0x60
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	4613      	mov	r3, r2
 8006714:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2222      	movs	r2, #34	; 0x22
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	4a40      	ldr	r2, [pc, #256]	; (8006838 <UART_Start_Receive_DMA+0x130>)
 8006736:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	4a3f      	ldr	r2, [pc, #252]	; (800683c <UART_Start_Receive_DMA+0x134>)
 800673e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	4a3e      	ldr	r2, [pc, #248]	; (8006840 <UART_Start_Receive_DMA+0x138>)
 8006746:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	2200      	movs	r2, #0
 800674e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006750:	f107 0308 	add.w	r3, r7, #8
 8006754:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3304      	adds	r3, #4
 8006760:	4619      	mov	r1, r3
 8006762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	f7fd fa02 	bl	8003b70 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d019      	beq.n	80067c6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80067b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80067b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80067c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e5      	bne.n	8006792 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3314      	adds	r3, #20
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	f043 0301 	orr.w	r3, r3, #1
 80067dc:	657b      	str	r3, [r7, #84]	; 0x54
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3314      	adds	r3, #20
 80067e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e5      	bne.n	80067c6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3314      	adds	r3, #20
 8006800:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	617b      	str	r3, [r7, #20]
   return(result);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006810:	653b      	str	r3, [r7, #80]	; 0x50
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3314      	adds	r3, #20
 8006818:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800681a:	627a      	str	r2, [r7, #36]	; 0x24
 800681c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6a39      	ldr	r1, [r7, #32]
 8006820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	61fb      	str	r3, [r7, #28]
   return(result);
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e5      	bne.n	80067fa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3760      	adds	r7, #96	; 0x60
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	08006517 	.word	0x08006517
 800683c:	0800663d 	.word	0x0800663d
 8006840:	08006673 	.word	0x08006673

08006844 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b089      	sub	sp, #36	; 0x24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	60bb      	str	r3, [r7, #8]
   return(result);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	330c      	adds	r3, #12
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	61ba      	str	r2, [r7, #24]
 800686e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6979      	ldr	r1, [r7, #20]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	613b      	str	r3, [r7, #16]
   return(result);
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e5      	bne.n	800684c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006888:	bf00      	nop
 800688a:	3724      	adds	r7, #36	; 0x24
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006894:	b480      	push	{r7}
 8006896:	b095      	sub	sp, #84	; 0x54
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	330c      	adds	r3, #12
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068bc:	643a      	str	r2, [r7, #64]	; 0x40
 80068be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e5      	bne.n	800689c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3314      	adds	r3, #20
 80068d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	61fb      	str	r3, [r7, #28]
   return(result);
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f023 0301 	bic.w	r3, r3, #1
 80068e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3314      	adds	r3, #20
 80068ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e5      	bne.n	80068d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	2b01      	cmp	r3, #1
 800690a:	d119      	bne.n	8006940 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	330c      	adds	r3, #12
 8006912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	60bb      	str	r3, [r7, #8]
   return(result);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f023 0310 	bic.w	r3, r3, #16
 8006922:	647b      	str	r3, [r7, #68]	; 0x44
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800692c:	61ba      	str	r2, [r7, #24]
 800692e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	6979      	ldr	r1, [r7, #20]
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	e841 2300 	strex	r3, r2, [r1]
 8006938:	613b      	str	r3, [r7, #16]
   return(result);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e5      	bne.n	800690c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800694e:	bf00      	nop
 8006950:	3754      	adds	r7, #84	; 0x54
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f7ff fd5d 	bl	8006434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b21      	cmp	r3, #33	; 0x21
 8006994:	d13e      	bne.n	8006a14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699e:	d114      	bne.n	80069ca <UART_Transmit_IT+0x48>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d110      	bne.n	80069ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	1c9a      	adds	r2, r3, #2
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	621a      	str	r2, [r3, #32]
 80069c8:	e008      	b.n	80069dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	1c59      	adds	r1, r3, #1
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6211      	str	r1, [r2, #32]
 80069d4:	781a      	ldrb	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	4619      	mov	r1, r3
 80069ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10f      	bne.n	8006a10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	e000      	b.n	8006a16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a14:	2302      	movs	r3, #2
  }
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff fcd8 	bl	80063f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b08c      	sub	sp, #48	; 0x30
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b22      	cmp	r3, #34	; 0x22
 8006a64:	f040 80ab 	bne.w	8006bbe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a70:	d117      	bne.n	8006aa2 <UART_Receive_IT+0x50>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d113      	bne.n	8006aa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	1c9a      	adds	r2, r3, #2
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006aa0:	e026      	b.n	8006af0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab4:	d007      	beq.n	8006ac6 <UART_Receive_IT+0x74>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <UART_Receive_IT+0x82>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d106      	bne.n	8006ad4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	e008      	b.n	8006ae6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	4619      	mov	r1, r3
 8006afe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d15a      	bne.n	8006bba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0220 	bic.w	r2, r2, #32
 8006b12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695a      	ldr	r2, [r3, #20]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0201 	bic.w	r2, r2, #1
 8006b32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d135      	bne.n	8006bb0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	613b      	str	r3, [r7, #16]
   return(result);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f023 0310 	bic.w	r3, r3, #16
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	330c      	adds	r3, #12
 8006b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6a:	623a      	str	r2, [r7, #32]
 8006b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	69f9      	ldr	r1, [r7, #28]
 8006b70:	6a3a      	ldr	r2, [r7, #32]
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e5      	bne.n	8006b4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d10a      	bne.n	8006ba2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff fc4d 	bl	8006448 <HAL_UARTEx_RxEventCallback>
 8006bae:	e002      	b.n	8006bb6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fa fa03 	bl	8000fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e002      	b.n	8006bc0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e000      	b.n	8006bc0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006bbe:	2302      	movs	r3, #2
  }
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3730      	adds	r7, #48	; 0x30
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bcc:	b0c0      	sub	sp, #256	; 0x100
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be4:	68d9      	ldr	r1, [r3, #12]
 8006be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	ea40 0301 	orr.w	r3, r0, r1
 8006bf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c20:	f021 010c 	bic.w	r1, r1, #12
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c42:	6999      	ldr	r1, [r3, #24]
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	ea40 0301 	orr.w	r3, r0, r1
 8006c4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b8f      	ldr	r3, [pc, #572]	; (8006e94 <UART_SetConfig+0x2cc>)
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d005      	beq.n	8006c68 <UART_SetConfig+0xa0>
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b8d      	ldr	r3, [pc, #564]	; (8006e98 <UART_SetConfig+0x2d0>)
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d104      	bne.n	8006c72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c68:	f7fe f92a 	bl	8004ec0 <HAL_RCC_GetPCLK2Freq>
 8006c6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c70:	e003      	b.n	8006c7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c72:	f7fe f911 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 8006c76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c84:	f040 810c 	bne.w	8006ea0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	1891      	adds	r1, r2, r2
 8006ca0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ca2:	415b      	adcs	r3, r3
 8006ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ca6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006caa:	4621      	mov	r1, r4
 8006cac:	eb12 0801 	adds.w	r8, r2, r1
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	eb43 0901 	adc.w	r9, r3, r1
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	f04f 0300 	mov.w	r3, #0
 8006cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cca:	4690      	mov	r8, r2
 8006ccc:	4699      	mov	r9, r3
 8006cce:	4623      	mov	r3, r4
 8006cd0:	eb18 0303 	adds.w	r3, r8, r3
 8006cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cd8:	462b      	mov	r3, r5
 8006cda:	eb49 0303 	adc.w	r3, r9, r3
 8006cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	18db      	adds	r3, r3, r3
 8006cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	eb42 0303 	adc.w	r3, r2, r3
 8006d02:	657b      	str	r3, [r7, #84]	; 0x54
 8006d04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d0c:	f7f9 ffd4 	bl	8000cb8 <__aeabi_uldivmod>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4b61      	ldr	r3, [pc, #388]	; (8006e9c <UART_SetConfig+0x2d4>)
 8006d16:	fba3 2302 	umull	r2, r3, r3, r2
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	011c      	lsls	r4, r3, #4
 8006d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d30:	4642      	mov	r2, r8
 8006d32:	464b      	mov	r3, r9
 8006d34:	1891      	adds	r1, r2, r2
 8006d36:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d38:	415b      	adcs	r3, r3
 8006d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d40:	4641      	mov	r1, r8
 8006d42:	eb12 0a01 	adds.w	sl, r2, r1
 8006d46:	4649      	mov	r1, r9
 8006d48:	eb43 0b01 	adc.w	fp, r3, r1
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d60:	4692      	mov	sl, r2
 8006d62:	469b      	mov	fp, r3
 8006d64:	4643      	mov	r3, r8
 8006d66:	eb1a 0303 	adds.w	r3, sl, r3
 8006d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d6e:	464b      	mov	r3, r9
 8006d70:	eb4b 0303 	adc.w	r3, fp, r3
 8006d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	18db      	adds	r3, r3, r3
 8006d90:	643b      	str	r3, [r7, #64]	; 0x40
 8006d92:	4613      	mov	r3, r2
 8006d94:	eb42 0303 	adc.w	r3, r2, r3
 8006d98:	647b      	str	r3, [r7, #68]	; 0x44
 8006d9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006da2:	f7f9 ff89 	bl	8000cb8 <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	4b3b      	ldr	r3, [pc, #236]	; (8006e9c <UART_SetConfig+0x2d4>)
 8006dae:	fba3 2301 	umull	r2, r3, r3, r1
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	2264      	movs	r2, #100	; 0x64
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	1acb      	subs	r3, r1, r3
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006dc2:	4b36      	ldr	r3, [pc, #216]	; (8006e9c <UART_SetConfig+0x2d4>)
 8006dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8006dc8:	095b      	lsrs	r3, r3, #5
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dd0:	441c      	add	r4, r3
 8006dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ddc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006de0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006de4:	4642      	mov	r2, r8
 8006de6:	464b      	mov	r3, r9
 8006de8:	1891      	adds	r1, r2, r2
 8006dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dec:	415b      	adcs	r3, r3
 8006dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006df4:	4641      	mov	r1, r8
 8006df6:	1851      	adds	r1, r2, r1
 8006df8:	6339      	str	r1, [r7, #48]	; 0x30
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	414b      	adcs	r3, r1
 8006dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	f04f 0300 	mov.w	r3, #0
 8006e08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e0c:	4659      	mov	r1, fp
 8006e0e:	00cb      	lsls	r3, r1, #3
 8006e10:	4651      	mov	r1, sl
 8006e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e16:	4651      	mov	r1, sl
 8006e18:	00ca      	lsls	r2, r1, #3
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4642      	mov	r2, r8
 8006e22:	189b      	adds	r3, r3, r2
 8006e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e28:	464b      	mov	r3, r9
 8006e2a:	460a      	mov	r2, r1
 8006e2c:	eb42 0303 	adc.w	r3, r2, r3
 8006e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e48:	460b      	mov	r3, r1
 8006e4a:	18db      	adds	r3, r3, r3
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e4e:	4613      	mov	r3, r2
 8006e50:	eb42 0303 	adc.w	r3, r2, r3
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e5e:	f7f9 ff2b 	bl	8000cb8 <__aeabi_uldivmod>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <UART_SetConfig+0x2d4>)
 8006e68:	fba3 1302 	umull	r1, r3, r3, r2
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	2164      	movs	r1, #100	; 0x64
 8006e70:	fb01 f303 	mul.w	r3, r1, r3
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	3332      	adds	r3, #50	; 0x32
 8006e7a:	4a08      	ldr	r2, [pc, #32]	; (8006e9c <UART_SetConfig+0x2d4>)
 8006e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	f003 0207 	and.w	r2, r3, #7
 8006e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4422      	add	r2, r4
 8006e8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e90:	e105      	b.n	800709e <UART_SetConfig+0x4d6>
 8006e92:	bf00      	nop
 8006e94:	40011000 	.word	0x40011000
 8006e98:	40011400 	.word	0x40011400
 8006e9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006eaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006eae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006eb2:	4642      	mov	r2, r8
 8006eb4:	464b      	mov	r3, r9
 8006eb6:	1891      	adds	r1, r2, r2
 8006eb8:	6239      	str	r1, [r7, #32]
 8006eba:	415b      	adcs	r3, r3
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	1854      	adds	r4, r2, r1
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	eb43 0501 	adc.w	r5, r3, r1
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	00eb      	lsls	r3, r5, #3
 8006ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eda:	00e2      	lsls	r2, r4, #3
 8006edc:	4614      	mov	r4, r2
 8006ede:	461d      	mov	r5, r3
 8006ee0:	4643      	mov	r3, r8
 8006ee2:	18e3      	adds	r3, r4, r3
 8006ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ee8:	464b      	mov	r3, r9
 8006eea:	eb45 0303 	adc.w	r3, r5, r3
 8006eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006efe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f0e:	4629      	mov	r1, r5
 8006f10:	008b      	lsls	r3, r1, #2
 8006f12:	4621      	mov	r1, r4
 8006f14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f18:	4621      	mov	r1, r4
 8006f1a:	008a      	lsls	r2, r1, #2
 8006f1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f20:	f7f9 feca 	bl	8000cb8 <__aeabi_uldivmod>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4b60      	ldr	r3, [pc, #384]	; (80070ac <UART_SetConfig+0x4e4>)
 8006f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	011c      	lsls	r4, r3, #4
 8006f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	1891      	adds	r1, r2, r2
 8006f4a:	61b9      	str	r1, [r7, #24]
 8006f4c:	415b      	adcs	r3, r3
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f54:	4641      	mov	r1, r8
 8006f56:	1851      	adds	r1, r2, r1
 8006f58:	6139      	str	r1, [r7, #16]
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	414b      	adcs	r3, r1
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	00cb      	lsls	r3, r1, #3
 8006f70:	4651      	mov	r1, sl
 8006f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f76:	4651      	mov	r1, sl
 8006f78:	00ca      	lsls	r2, r1, #3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4603      	mov	r3, r0
 8006f80:	4642      	mov	r2, r8
 8006f82:	189b      	adds	r3, r3, r2
 8006f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f88:	464b      	mov	r3, r9
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	eb42 0303 	adc.w	r3, r2, r3
 8006f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fac:	4649      	mov	r1, r9
 8006fae:	008b      	lsls	r3, r1, #2
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fb6:	4641      	mov	r1, r8
 8006fb8:	008a      	lsls	r2, r1, #2
 8006fba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fbe:	f7f9 fe7b 	bl	8000cb8 <__aeabi_uldivmod>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4b39      	ldr	r3, [pc, #228]	; (80070ac <UART_SetConfig+0x4e4>)
 8006fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	2164      	movs	r1, #100	; 0x64
 8006fd0:	fb01 f303 	mul.w	r3, r1, r3
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	3332      	adds	r3, #50	; 0x32
 8006fda:	4a34      	ldr	r2, [pc, #208]	; (80070ac <UART_SetConfig+0x4e4>)
 8006fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe0:	095b      	lsrs	r3, r3, #5
 8006fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fe6:	441c      	add	r4, r3
 8006fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fec:	2200      	movs	r2, #0
 8006fee:	673b      	str	r3, [r7, #112]	; 0x70
 8006ff0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ff2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ff6:	4642      	mov	r2, r8
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	1891      	adds	r1, r2, r2
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	415b      	adcs	r3, r3
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007006:	4641      	mov	r1, r8
 8007008:	1851      	adds	r1, r2, r1
 800700a:	6039      	str	r1, [r7, #0]
 800700c:	4649      	mov	r1, r9
 800700e:	414b      	adcs	r3, r1
 8007010:	607b      	str	r3, [r7, #4]
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800701e:	4659      	mov	r1, fp
 8007020:	00cb      	lsls	r3, r1, #3
 8007022:	4651      	mov	r1, sl
 8007024:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007028:	4651      	mov	r1, sl
 800702a:	00ca      	lsls	r2, r1, #3
 800702c:	4610      	mov	r0, r2
 800702e:	4619      	mov	r1, r3
 8007030:	4603      	mov	r3, r0
 8007032:	4642      	mov	r2, r8
 8007034:	189b      	adds	r3, r3, r2
 8007036:	66bb      	str	r3, [r7, #104]	; 0x68
 8007038:	464b      	mov	r3, r9
 800703a:	460a      	mov	r2, r1
 800703c:	eb42 0303 	adc.w	r3, r2, r3
 8007040:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	663b      	str	r3, [r7, #96]	; 0x60
 800704c:	667a      	str	r2, [r7, #100]	; 0x64
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800705a:	4649      	mov	r1, r9
 800705c:	008b      	lsls	r3, r1, #2
 800705e:	4641      	mov	r1, r8
 8007060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007064:	4641      	mov	r1, r8
 8007066:	008a      	lsls	r2, r1, #2
 8007068:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800706c:	f7f9 fe24 	bl	8000cb8 <__aeabi_uldivmod>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <UART_SetConfig+0x4e4>)
 8007076:	fba3 1302 	umull	r1, r3, r3, r2
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	2164      	movs	r1, #100	; 0x64
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	3332      	adds	r3, #50	; 0x32
 8007088:	4a08      	ldr	r2, [pc, #32]	; (80070ac <UART_SetConfig+0x4e4>)
 800708a:	fba2 2303 	umull	r2, r3, r2, r3
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	f003 020f 	and.w	r2, r3, #15
 8007094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4422      	add	r2, r4
 800709c:	609a      	str	r2, [r3, #8]
}
 800709e:	bf00      	nop
 80070a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070a4:	46bd      	mov	sp, r7
 80070a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070aa:	bf00      	nop
 80070ac:	51eb851f 	.word	0x51eb851f

080070b0 <atoi>:
 80070b0:	220a      	movs	r2, #10
 80070b2:	2100      	movs	r1, #0
 80070b4:	f001 b906 	b.w	80082c4 <strtol>

080070b8 <__errno>:
 80070b8:	4b01      	ldr	r3, [pc, #4]	; (80070c0 <__errno+0x8>)
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	20000010 	.word	0x20000010

080070c4 <__sflush_r>:
 80070c4:	898a      	ldrh	r2, [r1, #12]
 80070c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ca:	4605      	mov	r5, r0
 80070cc:	0710      	lsls	r0, r2, #28
 80070ce:	460c      	mov	r4, r1
 80070d0:	d458      	bmi.n	8007184 <__sflush_r+0xc0>
 80070d2:	684b      	ldr	r3, [r1, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	dc05      	bgt.n	80070e4 <__sflush_r+0x20>
 80070d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	dc02      	bgt.n	80070e4 <__sflush_r+0x20>
 80070de:	2000      	movs	r0, #0
 80070e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070e6:	2e00      	cmp	r6, #0
 80070e8:	d0f9      	beq.n	80070de <__sflush_r+0x1a>
 80070ea:	2300      	movs	r3, #0
 80070ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070f0:	682f      	ldr	r7, [r5, #0]
 80070f2:	602b      	str	r3, [r5, #0]
 80070f4:	d032      	beq.n	800715c <__sflush_r+0x98>
 80070f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	075a      	lsls	r2, r3, #29
 80070fc:	d505      	bpl.n	800710a <__sflush_r+0x46>
 80070fe:	6863      	ldr	r3, [r4, #4]
 8007100:	1ac0      	subs	r0, r0, r3
 8007102:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007104:	b10b      	cbz	r3, 800710a <__sflush_r+0x46>
 8007106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007108:	1ac0      	subs	r0, r0, r3
 800710a:	2300      	movs	r3, #0
 800710c:	4602      	mov	r2, r0
 800710e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007110:	6a21      	ldr	r1, [r4, #32]
 8007112:	4628      	mov	r0, r5
 8007114:	47b0      	blx	r6
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	d106      	bne.n	800712a <__sflush_r+0x66>
 800711c:	6829      	ldr	r1, [r5, #0]
 800711e:	291d      	cmp	r1, #29
 8007120:	d82c      	bhi.n	800717c <__sflush_r+0xb8>
 8007122:	4a2a      	ldr	r2, [pc, #168]	; (80071cc <__sflush_r+0x108>)
 8007124:	40ca      	lsrs	r2, r1
 8007126:	07d6      	lsls	r6, r2, #31
 8007128:	d528      	bpl.n	800717c <__sflush_r+0xb8>
 800712a:	2200      	movs	r2, #0
 800712c:	6062      	str	r2, [r4, #4]
 800712e:	04d9      	lsls	r1, r3, #19
 8007130:	6922      	ldr	r2, [r4, #16]
 8007132:	6022      	str	r2, [r4, #0]
 8007134:	d504      	bpl.n	8007140 <__sflush_r+0x7c>
 8007136:	1c42      	adds	r2, r0, #1
 8007138:	d101      	bne.n	800713e <__sflush_r+0x7a>
 800713a:	682b      	ldr	r3, [r5, #0]
 800713c:	b903      	cbnz	r3, 8007140 <__sflush_r+0x7c>
 800713e:	6560      	str	r0, [r4, #84]	; 0x54
 8007140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007142:	602f      	str	r7, [r5, #0]
 8007144:	2900      	cmp	r1, #0
 8007146:	d0ca      	beq.n	80070de <__sflush_r+0x1a>
 8007148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800714c:	4299      	cmp	r1, r3
 800714e:	d002      	beq.n	8007156 <__sflush_r+0x92>
 8007150:	4628      	mov	r0, r5
 8007152:	f000 f9bf 	bl	80074d4 <_free_r>
 8007156:	2000      	movs	r0, #0
 8007158:	6360      	str	r0, [r4, #52]	; 0x34
 800715a:	e7c1      	b.n	80070e0 <__sflush_r+0x1c>
 800715c:	6a21      	ldr	r1, [r4, #32]
 800715e:	2301      	movs	r3, #1
 8007160:	4628      	mov	r0, r5
 8007162:	47b0      	blx	r6
 8007164:	1c41      	adds	r1, r0, #1
 8007166:	d1c7      	bne.n	80070f8 <__sflush_r+0x34>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0c4      	beq.n	80070f8 <__sflush_r+0x34>
 800716e:	2b1d      	cmp	r3, #29
 8007170:	d001      	beq.n	8007176 <__sflush_r+0xb2>
 8007172:	2b16      	cmp	r3, #22
 8007174:	d101      	bne.n	800717a <__sflush_r+0xb6>
 8007176:	602f      	str	r7, [r5, #0]
 8007178:	e7b1      	b.n	80070de <__sflush_r+0x1a>
 800717a:	89a3      	ldrh	r3, [r4, #12]
 800717c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007180:	81a3      	strh	r3, [r4, #12]
 8007182:	e7ad      	b.n	80070e0 <__sflush_r+0x1c>
 8007184:	690f      	ldr	r7, [r1, #16]
 8007186:	2f00      	cmp	r7, #0
 8007188:	d0a9      	beq.n	80070de <__sflush_r+0x1a>
 800718a:	0793      	lsls	r3, r2, #30
 800718c:	680e      	ldr	r6, [r1, #0]
 800718e:	bf08      	it	eq
 8007190:	694b      	ldreq	r3, [r1, #20]
 8007192:	600f      	str	r7, [r1, #0]
 8007194:	bf18      	it	ne
 8007196:	2300      	movne	r3, #0
 8007198:	eba6 0807 	sub.w	r8, r6, r7
 800719c:	608b      	str	r3, [r1, #8]
 800719e:	f1b8 0f00 	cmp.w	r8, #0
 80071a2:	dd9c      	ble.n	80070de <__sflush_r+0x1a>
 80071a4:	6a21      	ldr	r1, [r4, #32]
 80071a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071a8:	4643      	mov	r3, r8
 80071aa:	463a      	mov	r2, r7
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b0      	blx	r6
 80071b0:	2800      	cmp	r0, #0
 80071b2:	dc06      	bgt.n	80071c2 <__sflush_r+0xfe>
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ba:	81a3      	strh	r3, [r4, #12]
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071c0:	e78e      	b.n	80070e0 <__sflush_r+0x1c>
 80071c2:	4407      	add	r7, r0
 80071c4:	eba8 0800 	sub.w	r8, r8, r0
 80071c8:	e7e9      	b.n	800719e <__sflush_r+0xda>
 80071ca:	bf00      	nop
 80071cc:	20400001 	.word	0x20400001

080071d0 <_fflush_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	690b      	ldr	r3, [r1, #16]
 80071d4:	4605      	mov	r5, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	b913      	cbnz	r3, 80071e0 <_fflush_r+0x10>
 80071da:	2500      	movs	r5, #0
 80071dc:	4628      	mov	r0, r5
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	b118      	cbz	r0, 80071ea <_fflush_r+0x1a>
 80071e2:	6983      	ldr	r3, [r0, #24]
 80071e4:	b90b      	cbnz	r3, 80071ea <_fflush_r+0x1a>
 80071e6:	f000 f899 	bl	800731c <__sinit>
 80071ea:	4b14      	ldr	r3, [pc, #80]	; (800723c <_fflush_r+0x6c>)
 80071ec:	429c      	cmp	r4, r3
 80071ee:	d11b      	bne.n	8007228 <_fflush_r+0x58>
 80071f0:	686c      	ldr	r4, [r5, #4]
 80071f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0ef      	beq.n	80071da <_fflush_r+0xa>
 80071fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071fc:	07d0      	lsls	r0, r2, #31
 80071fe:	d404      	bmi.n	800720a <_fflush_r+0x3a>
 8007200:	0599      	lsls	r1, r3, #22
 8007202:	d402      	bmi.n	800720a <_fflush_r+0x3a>
 8007204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007206:	f000 f94c 	bl	80074a2 <__retarget_lock_acquire_recursive>
 800720a:	4628      	mov	r0, r5
 800720c:	4621      	mov	r1, r4
 800720e:	f7ff ff59 	bl	80070c4 <__sflush_r>
 8007212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007214:	07da      	lsls	r2, r3, #31
 8007216:	4605      	mov	r5, r0
 8007218:	d4e0      	bmi.n	80071dc <_fflush_r+0xc>
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	059b      	lsls	r3, r3, #22
 800721e:	d4dd      	bmi.n	80071dc <_fflush_r+0xc>
 8007220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007222:	f000 f93f 	bl	80074a4 <__retarget_lock_release_recursive>
 8007226:	e7d9      	b.n	80071dc <_fflush_r+0xc>
 8007228:	4b05      	ldr	r3, [pc, #20]	; (8007240 <_fflush_r+0x70>)
 800722a:	429c      	cmp	r4, r3
 800722c:	d101      	bne.n	8007232 <_fflush_r+0x62>
 800722e:	68ac      	ldr	r4, [r5, #8]
 8007230:	e7df      	b.n	80071f2 <_fflush_r+0x22>
 8007232:	4b04      	ldr	r3, [pc, #16]	; (8007244 <_fflush_r+0x74>)
 8007234:	429c      	cmp	r4, r3
 8007236:	bf08      	it	eq
 8007238:	68ec      	ldreq	r4, [r5, #12]
 800723a:	e7da      	b.n	80071f2 <_fflush_r+0x22>
 800723c:	0800a5b8 	.word	0x0800a5b8
 8007240:	0800a5d8 	.word	0x0800a5d8
 8007244:	0800a598 	.word	0x0800a598

08007248 <fflush>:
 8007248:	4601      	mov	r1, r0
 800724a:	b920      	cbnz	r0, 8007256 <fflush+0xe>
 800724c:	4b04      	ldr	r3, [pc, #16]	; (8007260 <fflush+0x18>)
 800724e:	4905      	ldr	r1, [pc, #20]	; (8007264 <fflush+0x1c>)
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	f000 b8e1 	b.w	8007418 <_fwalk_reent>
 8007256:	4b04      	ldr	r3, [pc, #16]	; (8007268 <fflush+0x20>)
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	f7ff bfb9 	b.w	80071d0 <_fflush_r>
 800725e:	bf00      	nop
 8007260:	0800a5f8 	.word	0x0800a5f8
 8007264:	080071d1 	.word	0x080071d1
 8007268:	20000010 	.word	0x20000010

0800726c <std>:
 800726c:	2300      	movs	r3, #0
 800726e:	b510      	push	{r4, lr}
 8007270:	4604      	mov	r4, r0
 8007272:	e9c0 3300 	strd	r3, r3, [r0]
 8007276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727a:	6083      	str	r3, [r0, #8]
 800727c:	8181      	strh	r1, [r0, #12]
 800727e:	6643      	str	r3, [r0, #100]	; 0x64
 8007280:	81c2      	strh	r2, [r0, #14]
 8007282:	6183      	str	r3, [r0, #24]
 8007284:	4619      	mov	r1, r3
 8007286:	2208      	movs	r2, #8
 8007288:	305c      	adds	r0, #92	; 0x5c
 800728a:	f000 f91a 	bl	80074c2 <memset>
 800728e:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <std+0x38>)
 8007290:	6263      	str	r3, [r4, #36]	; 0x24
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <std+0x3c>)
 8007294:	62a3      	str	r3, [r4, #40]	; 0x28
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <std+0x40>)
 8007298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <std+0x44>)
 800729c:	6224      	str	r4, [r4, #32]
 800729e:	6323      	str	r3, [r4, #48]	; 0x30
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	bf00      	nop
 80072a4:	080080e5 	.word	0x080080e5
 80072a8:	08008107 	.word	0x08008107
 80072ac:	0800813f 	.word	0x0800813f
 80072b0:	08008163 	.word	0x08008163

080072b4 <_cleanup_r>:
 80072b4:	4901      	ldr	r1, [pc, #4]	; (80072bc <_cleanup_r+0x8>)
 80072b6:	f000 b8af 	b.w	8007418 <_fwalk_reent>
 80072ba:	bf00      	nop
 80072bc:	080071d1 	.word	0x080071d1

080072c0 <__sfmoreglue>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	2268      	movs	r2, #104	; 0x68
 80072c4:	1e4d      	subs	r5, r1, #1
 80072c6:	4355      	muls	r5, r2
 80072c8:	460e      	mov	r6, r1
 80072ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072ce:	f000 f96d 	bl	80075ac <_malloc_r>
 80072d2:	4604      	mov	r4, r0
 80072d4:	b140      	cbz	r0, 80072e8 <__sfmoreglue+0x28>
 80072d6:	2100      	movs	r1, #0
 80072d8:	e9c0 1600 	strd	r1, r6, [r0]
 80072dc:	300c      	adds	r0, #12
 80072de:	60a0      	str	r0, [r4, #8]
 80072e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072e4:	f000 f8ed 	bl	80074c2 <memset>
 80072e8:	4620      	mov	r0, r4
 80072ea:	bd70      	pop	{r4, r5, r6, pc}

080072ec <__sfp_lock_acquire>:
 80072ec:	4801      	ldr	r0, [pc, #4]	; (80072f4 <__sfp_lock_acquire+0x8>)
 80072ee:	f000 b8d8 	b.w	80074a2 <__retarget_lock_acquire_recursive>
 80072f2:	bf00      	nop
 80072f4:	20001c55 	.word	0x20001c55

080072f8 <__sfp_lock_release>:
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <__sfp_lock_release+0x8>)
 80072fa:	f000 b8d3 	b.w	80074a4 <__retarget_lock_release_recursive>
 80072fe:	bf00      	nop
 8007300:	20001c55 	.word	0x20001c55

08007304 <__sinit_lock_acquire>:
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <__sinit_lock_acquire+0x8>)
 8007306:	f000 b8cc 	b.w	80074a2 <__retarget_lock_acquire_recursive>
 800730a:	bf00      	nop
 800730c:	20001c56 	.word	0x20001c56

08007310 <__sinit_lock_release>:
 8007310:	4801      	ldr	r0, [pc, #4]	; (8007318 <__sinit_lock_release+0x8>)
 8007312:	f000 b8c7 	b.w	80074a4 <__retarget_lock_release_recursive>
 8007316:	bf00      	nop
 8007318:	20001c56 	.word	0x20001c56

0800731c <__sinit>:
 800731c:	b510      	push	{r4, lr}
 800731e:	4604      	mov	r4, r0
 8007320:	f7ff fff0 	bl	8007304 <__sinit_lock_acquire>
 8007324:	69a3      	ldr	r3, [r4, #24]
 8007326:	b11b      	cbz	r3, 8007330 <__sinit+0x14>
 8007328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800732c:	f7ff bff0 	b.w	8007310 <__sinit_lock_release>
 8007330:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007334:	6523      	str	r3, [r4, #80]	; 0x50
 8007336:	4b13      	ldr	r3, [pc, #76]	; (8007384 <__sinit+0x68>)
 8007338:	4a13      	ldr	r2, [pc, #76]	; (8007388 <__sinit+0x6c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	62a2      	str	r2, [r4, #40]	; 0x28
 800733e:	42a3      	cmp	r3, r4
 8007340:	bf04      	itt	eq
 8007342:	2301      	moveq	r3, #1
 8007344:	61a3      	streq	r3, [r4, #24]
 8007346:	4620      	mov	r0, r4
 8007348:	f000 f820 	bl	800738c <__sfp>
 800734c:	6060      	str	r0, [r4, #4]
 800734e:	4620      	mov	r0, r4
 8007350:	f000 f81c 	bl	800738c <__sfp>
 8007354:	60a0      	str	r0, [r4, #8]
 8007356:	4620      	mov	r0, r4
 8007358:	f000 f818 	bl	800738c <__sfp>
 800735c:	2200      	movs	r2, #0
 800735e:	60e0      	str	r0, [r4, #12]
 8007360:	2104      	movs	r1, #4
 8007362:	6860      	ldr	r0, [r4, #4]
 8007364:	f7ff ff82 	bl	800726c <std>
 8007368:	68a0      	ldr	r0, [r4, #8]
 800736a:	2201      	movs	r2, #1
 800736c:	2109      	movs	r1, #9
 800736e:	f7ff ff7d 	bl	800726c <std>
 8007372:	68e0      	ldr	r0, [r4, #12]
 8007374:	2202      	movs	r2, #2
 8007376:	2112      	movs	r1, #18
 8007378:	f7ff ff78 	bl	800726c <std>
 800737c:	2301      	movs	r3, #1
 800737e:	61a3      	str	r3, [r4, #24]
 8007380:	e7d2      	b.n	8007328 <__sinit+0xc>
 8007382:	bf00      	nop
 8007384:	0800a5f8 	.word	0x0800a5f8
 8007388:	080072b5 	.word	0x080072b5

0800738c <__sfp>:
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738e:	4607      	mov	r7, r0
 8007390:	f7ff ffac 	bl	80072ec <__sfp_lock_acquire>
 8007394:	4b1e      	ldr	r3, [pc, #120]	; (8007410 <__sfp+0x84>)
 8007396:	681e      	ldr	r6, [r3, #0]
 8007398:	69b3      	ldr	r3, [r6, #24]
 800739a:	b913      	cbnz	r3, 80073a2 <__sfp+0x16>
 800739c:	4630      	mov	r0, r6
 800739e:	f7ff ffbd 	bl	800731c <__sinit>
 80073a2:	3648      	adds	r6, #72	; 0x48
 80073a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	d503      	bpl.n	80073b4 <__sfp+0x28>
 80073ac:	6833      	ldr	r3, [r6, #0]
 80073ae:	b30b      	cbz	r3, 80073f4 <__sfp+0x68>
 80073b0:	6836      	ldr	r6, [r6, #0]
 80073b2:	e7f7      	b.n	80073a4 <__sfp+0x18>
 80073b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073b8:	b9d5      	cbnz	r5, 80073f0 <__sfp+0x64>
 80073ba:	4b16      	ldr	r3, [pc, #88]	; (8007414 <__sfp+0x88>)
 80073bc:	60e3      	str	r3, [r4, #12]
 80073be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073c2:	6665      	str	r5, [r4, #100]	; 0x64
 80073c4:	f000 f86c 	bl	80074a0 <__retarget_lock_init_recursive>
 80073c8:	f7ff ff96 	bl	80072f8 <__sfp_lock_release>
 80073cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073d4:	6025      	str	r5, [r4, #0]
 80073d6:	61a5      	str	r5, [r4, #24]
 80073d8:	2208      	movs	r2, #8
 80073da:	4629      	mov	r1, r5
 80073dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073e0:	f000 f86f 	bl	80074c2 <memset>
 80073e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073ec:	4620      	mov	r0, r4
 80073ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f0:	3468      	adds	r4, #104	; 0x68
 80073f2:	e7d9      	b.n	80073a8 <__sfp+0x1c>
 80073f4:	2104      	movs	r1, #4
 80073f6:	4638      	mov	r0, r7
 80073f8:	f7ff ff62 	bl	80072c0 <__sfmoreglue>
 80073fc:	4604      	mov	r4, r0
 80073fe:	6030      	str	r0, [r6, #0]
 8007400:	2800      	cmp	r0, #0
 8007402:	d1d5      	bne.n	80073b0 <__sfp+0x24>
 8007404:	f7ff ff78 	bl	80072f8 <__sfp_lock_release>
 8007408:	230c      	movs	r3, #12
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	e7ee      	b.n	80073ec <__sfp+0x60>
 800740e:	bf00      	nop
 8007410:	0800a5f8 	.word	0x0800a5f8
 8007414:	ffff0001 	.word	0xffff0001

08007418 <_fwalk_reent>:
 8007418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800741c:	4606      	mov	r6, r0
 800741e:	4688      	mov	r8, r1
 8007420:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007424:	2700      	movs	r7, #0
 8007426:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800742a:	f1b9 0901 	subs.w	r9, r9, #1
 800742e:	d505      	bpl.n	800743c <_fwalk_reent+0x24>
 8007430:	6824      	ldr	r4, [r4, #0]
 8007432:	2c00      	cmp	r4, #0
 8007434:	d1f7      	bne.n	8007426 <_fwalk_reent+0xe>
 8007436:	4638      	mov	r0, r7
 8007438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743c:	89ab      	ldrh	r3, [r5, #12]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d907      	bls.n	8007452 <_fwalk_reent+0x3a>
 8007442:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007446:	3301      	adds	r3, #1
 8007448:	d003      	beq.n	8007452 <_fwalk_reent+0x3a>
 800744a:	4629      	mov	r1, r5
 800744c:	4630      	mov	r0, r6
 800744e:	47c0      	blx	r8
 8007450:	4307      	orrs	r7, r0
 8007452:	3568      	adds	r5, #104	; 0x68
 8007454:	e7e9      	b.n	800742a <_fwalk_reent+0x12>
	...

08007458 <__libc_init_array>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	4d0d      	ldr	r5, [pc, #52]	; (8007490 <__libc_init_array+0x38>)
 800745c:	4c0d      	ldr	r4, [pc, #52]	; (8007494 <__libc_init_array+0x3c>)
 800745e:	1b64      	subs	r4, r4, r5
 8007460:	10a4      	asrs	r4, r4, #2
 8007462:	2600      	movs	r6, #0
 8007464:	42a6      	cmp	r6, r4
 8007466:	d109      	bne.n	800747c <__libc_init_array+0x24>
 8007468:	4d0b      	ldr	r5, [pc, #44]	; (8007498 <__libc_init_array+0x40>)
 800746a:	4c0c      	ldr	r4, [pc, #48]	; (800749c <__libc_init_array+0x44>)
 800746c:	f003 f810 	bl	800a490 <_init>
 8007470:	1b64      	subs	r4, r4, r5
 8007472:	10a4      	asrs	r4, r4, #2
 8007474:	2600      	movs	r6, #0
 8007476:	42a6      	cmp	r6, r4
 8007478:	d105      	bne.n	8007486 <__libc_init_array+0x2e>
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007480:	4798      	blx	r3
 8007482:	3601      	adds	r6, #1
 8007484:	e7ee      	b.n	8007464 <__libc_init_array+0xc>
 8007486:	f855 3b04 	ldr.w	r3, [r5], #4
 800748a:	4798      	blx	r3
 800748c:	3601      	adds	r6, #1
 800748e:	e7f2      	b.n	8007476 <__libc_init_array+0x1e>
 8007490:	0800a97c 	.word	0x0800a97c
 8007494:	0800a97c 	.word	0x0800a97c
 8007498:	0800a97c 	.word	0x0800a97c
 800749c:	0800a980 	.word	0x0800a980

080074a0 <__retarget_lock_init_recursive>:
 80074a0:	4770      	bx	lr

080074a2 <__retarget_lock_acquire_recursive>:
 80074a2:	4770      	bx	lr

080074a4 <__retarget_lock_release_recursive>:
 80074a4:	4770      	bx	lr

080074a6 <memcpy>:
 80074a6:	440a      	add	r2, r1
 80074a8:	4291      	cmp	r1, r2
 80074aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80074ae:	d100      	bne.n	80074b2 <memcpy+0xc>
 80074b0:	4770      	bx	lr
 80074b2:	b510      	push	{r4, lr}
 80074b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074bc:	4291      	cmp	r1, r2
 80074be:	d1f9      	bne.n	80074b4 <memcpy+0xe>
 80074c0:	bd10      	pop	{r4, pc}

080074c2 <memset>:
 80074c2:	4402      	add	r2, r0
 80074c4:	4603      	mov	r3, r0
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d100      	bne.n	80074cc <memset+0xa>
 80074ca:	4770      	bx	lr
 80074cc:	f803 1b01 	strb.w	r1, [r3], #1
 80074d0:	e7f9      	b.n	80074c6 <memset+0x4>
	...

080074d4 <_free_r>:
 80074d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074d6:	2900      	cmp	r1, #0
 80074d8:	d044      	beq.n	8007564 <_free_r+0x90>
 80074da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074de:	9001      	str	r0, [sp, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f1a1 0404 	sub.w	r4, r1, #4
 80074e6:	bfb8      	it	lt
 80074e8:	18e4      	addlt	r4, r4, r3
 80074ea:	f001 ff77 	bl	80093dc <__malloc_lock>
 80074ee:	4a1e      	ldr	r2, [pc, #120]	; (8007568 <_free_r+0x94>)
 80074f0:	9801      	ldr	r0, [sp, #4]
 80074f2:	6813      	ldr	r3, [r2, #0]
 80074f4:	b933      	cbnz	r3, 8007504 <_free_r+0x30>
 80074f6:	6063      	str	r3, [r4, #4]
 80074f8:	6014      	str	r4, [r2, #0]
 80074fa:	b003      	add	sp, #12
 80074fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007500:	f001 bf72 	b.w	80093e8 <__malloc_unlock>
 8007504:	42a3      	cmp	r3, r4
 8007506:	d908      	bls.n	800751a <_free_r+0x46>
 8007508:	6825      	ldr	r5, [r4, #0]
 800750a:	1961      	adds	r1, r4, r5
 800750c:	428b      	cmp	r3, r1
 800750e:	bf01      	itttt	eq
 8007510:	6819      	ldreq	r1, [r3, #0]
 8007512:	685b      	ldreq	r3, [r3, #4]
 8007514:	1949      	addeq	r1, r1, r5
 8007516:	6021      	streq	r1, [r4, #0]
 8007518:	e7ed      	b.n	80074f6 <_free_r+0x22>
 800751a:	461a      	mov	r2, r3
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	b10b      	cbz	r3, 8007524 <_free_r+0x50>
 8007520:	42a3      	cmp	r3, r4
 8007522:	d9fa      	bls.n	800751a <_free_r+0x46>
 8007524:	6811      	ldr	r1, [r2, #0]
 8007526:	1855      	adds	r5, r2, r1
 8007528:	42a5      	cmp	r5, r4
 800752a:	d10b      	bne.n	8007544 <_free_r+0x70>
 800752c:	6824      	ldr	r4, [r4, #0]
 800752e:	4421      	add	r1, r4
 8007530:	1854      	adds	r4, r2, r1
 8007532:	42a3      	cmp	r3, r4
 8007534:	6011      	str	r1, [r2, #0]
 8007536:	d1e0      	bne.n	80074fa <_free_r+0x26>
 8007538:	681c      	ldr	r4, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	6053      	str	r3, [r2, #4]
 800753e:	4421      	add	r1, r4
 8007540:	6011      	str	r1, [r2, #0]
 8007542:	e7da      	b.n	80074fa <_free_r+0x26>
 8007544:	d902      	bls.n	800754c <_free_r+0x78>
 8007546:	230c      	movs	r3, #12
 8007548:	6003      	str	r3, [r0, #0]
 800754a:	e7d6      	b.n	80074fa <_free_r+0x26>
 800754c:	6825      	ldr	r5, [r4, #0]
 800754e:	1961      	adds	r1, r4, r5
 8007550:	428b      	cmp	r3, r1
 8007552:	bf04      	itt	eq
 8007554:	6819      	ldreq	r1, [r3, #0]
 8007556:	685b      	ldreq	r3, [r3, #4]
 8007558:	6063      	str	r3, [r4, #4]
 800755a:	bf04      	itt	eq
 800755c:	1949      	addeq	r1, r1, r5
 800755e:	6021      	streq	r1, [r4, #0]
 8007560:	6054      	str	r4, [r2, #4]
 8007562:	e7ca      	b.n	80074fa <_free_r+0x26>
 8007564:	b003      	add	sp, #12
 8007566:	bd30      	pop	{r4, r5, pc}
 8007568:	20001c58 	.word	0x20001c58

0800756c <sbrk_aligned>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	4e0e      	ldr	r6, [pc, #56]	; (80075a8 <sbrk_aligned+0x3c>)
 8007570:	460c      	mov	r4, r1
 8007572:	6831      	ldr	r1, [r6, #0]
 8007574:	4605      	mov	r5, r0
 8007576:	b911      	cbnz	r1, 800757e <sbrk_aligned+0x12>
 8007578:	f000 fd84 	bl	8008084 <_sbrk_r>
 800757c:	6030      	str	r0, [r6, #0]
 800757e:	4621      	mov	r1, r4
 8007580:	4628      	mov	r0, r5
 8007582:	f000 fd7f 	bl	8008084 <_sbrk_r>
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	d00a      	beq.n	80075a0 <sbrk_aligned+0x34>
 800758a:	1cc4      	adds	r4, r0, #3
 800758c:	f024 0403 	bic.w	r4, r4, #3
 8007590:	42a0      	cmp	r0, r4
 8007592:	d007      	beq.n	80075a4 <sbrk_aligned+0x38>
 8007594:	1a21      	subs	r1, r4, r0
 8007596:	4628      	mov	r0, r5
 8007598:	f000 fd74 	bl	8008084 <_sbrk_r>
 800759c:	3001      	adds	r0, #1
 800759e:	d101      	bne.n	80075a4 <sbrk_aligned+0x38>
 80075a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075a4:	4620      	mov	r0, r4
 80075a6:	bd70      	pop	{r4, r5, r6, pc}
 80075a8:	20001c5c 	.word	0x20001c5c

080075ac <_malloc_r>:
 80075ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b0:	1ccd      	adds	r5, r1, #3
 80075b2:	f025 0503 	bic.w	r5, r5, #3
 80075b6:	3508      	adds	r5, #8
 80075b8:	2d0c      	cmp	r5, #12
 80075ba:	bf38      	it	cc
 80075bc:	250c      	movcc	r5, #12
 80075be:	2d00      	cmp	r5, #0
 80075c0:	4607      	mov	r7, r0
 80075c2:	db01      	blt.n	80075c8 <_malloc_r+0x1c>
 80075c4:	42a9      	cmp	r1, r5
 80075c6:	d905      	bls.n	80075d4 <_malloc_r+0x28>
 80075c8:	230c      	movs	r3, #12
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	2600      	movs	r6, #0
 80075ce:	4630      	mov	r0, r6
 80075d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d4:	4e2e      	ldr	r6, [pc, #184]	; (8007690 <_malloc_r+0xe4>)
 80075d6:	f001 ff01 	bl	80093dc <__malloc_lock>
 80075da:	6833      	ldr	r3, [r6, #0]
 80075dc:	461c      	mov	r4, r3
 80075de:	bb34      	cbnz	r4, 800762e <_malloc_r+0x82>
 80075e0:	4629      	mov	r1, r5
 80075e2:	4638      	mov	r0, r7
 80075e4:	f7ff ffc2 	bl	800756c <sbrk_aligned>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	4604      	mov	r4, r0
 80075ec:	d14d      	bne.n	800768a <_malloc_r+0xde>
 80075ee:	6834      	ldr	r4, [r6, #0]
 80075f0:	4626      	mov	r6, r4
 80075f2:	2e00      	cmp	r6, #0
 80075f4:	d140      	bne.n	8007678 <_malloc_r+0xcc>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	4631      	mov	r1, r6
 80075fa:	4638      	mov	r0, r7
 80075fc:	eb04 0803 	add.w	r8, r4, r3
 8007600:	f000 fd40 	bl	8008084 <_sbrk_r>
 8007604:	4580      	cmp	r8, r0
 8007606:	d13a      	bne.n	800767e <_malloc_r+0xd2>
 8007608:	6821      	ldr	r1, [r4, #0]
 800760a:	3503      	adds	r5, #3
 800760c:	1a6d      	subs	r5, r5, r1
 800760e:	f025 0503 	bic.w	r5, r5, #3
 8007612:	3508      	adds	r5, #8
 8007614:	2d0c      	cmp	r5, #12
 8007616:	bf38      	it	cc
 8007618:	250c      	movcc	r5, #12
 800761a:	4629      	mov	r1, r5
 800761c:	4638      	mov	r0, r7
 800761e:	f7ff ffa5 	bl	800756c <sbrk_aligned>
 8007622:	3001      	adds	r0, #1
 8007624:	d02b      	beq.n	800767e <_malloc_r+0xd2>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	442b      	add	r3, r5
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	e00e      	b.n	800764c <_malloc_r+0xa0>
 800762e:	6822      	ldr	r2, [r4, #0]
 8007630:	1b52      	subs	r2, r2, r5
 8007632:	d41e      	bmi.n	8007672 <_malloc_r+0xc6>
 8007634:	2a0b      	cmp	r2, #11
 8007636:	d916      	bls.n	8007666 <_malloc_r+0xba>
 8007638:	1961      	adds	r1, r4, r5
 800763a:	42a3      	cmp	r3, r4
 800763c:	6025      	str	r5, [r4, #0]
 800763e:	bf18      	it	ne
 8007640:	6059      	strne	r1, [r3, #4]
 8007642:	6863      	ldr	r3, [r4, #4]
 8007644:	bf08      	it	eq
 8007646:	6031      	streq	r1, [r6, #0]
 8007648:	5162      	str	r2, [r4, r5]
 800764a:	604b      	str	r3, [r1, #4]
 800764c:	4638      	mov	r0, r7
 800764e:	f104 060b 	add.w	r6, r4, #11
 8007652:	f001 fec9 	bl	80093e8 <__malloc_unlock>
 8007656:	f026 0607 	bic.w	r6, r6, #7
 800765a:	1d23      	adds	r3, r4, #4
 800765c:	1af2      	subs	r2, r6, r3
 800765e:	d0b6      	beq.n	80075ce <_malloc_r+0x22>
 8007660:	1b9b      	subs	r3, r3, r6
 8007662:	50a3      	str	r3, [r4, r2]
 8007664:	e7b3      	b.n	80075ce <_malloc_r+0x22>
 8007666:	6862      	ldr	r2, [r4, #4]
 8007668:	42a3      	cmp	r3, r4
 800766a:	bf0c      	ite	eq
 800766c:	6032      	streq	r2, [r6, #0]
 800766e:	605a      	strne	r2, [r3, #4]
 8007670:	e7ec      	b.n	800764c <_malloc_r+0xa0>
 8007672:	4623      	mov	r3, r4
 8007674:	6864      	ldr	r4, [r4, #4]
 8007676:	e7b2      	b.n	80075de <_malloc_r+0x32>
 8007678:	4634      	mov	r4, r6
 800767a:	6876      	ldr	r6, [r6, #4]
 800767c:	e7b9      	b.n	80075f2 <_malloc_r+0x46>
 800767e:	230c      	movs	r3, #12
 8007680:	603b      	str	r3, [r7, #0]
 8007682:	4638      	mov	r0, r7
 8007684:	f001 feb0 	bl	80093e8 <__malloc_unlock>
 8007688:	e7a1      	b.n	80075ce <_malloc_r+0x22>
 800768a:	6025      	str	r5, [r4, #0]
 800768c:	e7de      	b.n	800764c <_malloc_r+0xa0>
 800768e:	bf00      	nop
 8007690:	20001c58 	.word	0x20001c58

08007694 <__cvt>:
 8007694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	ec55 4b10 	vmov	r4, r5, d0
 800769c:	2d00      	cmp	r5, #0
 800769e:	460e      	mov	r6, r1
 80076a0:	4619      	mov	r1, r3
 80076a2:	462b      	mov	r3, r5
 80076a4:	bfbb      	ittet	lt
 80076a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076aa:	461d      	movlt	r5, r3
 80076ac:	2300      	movge	r3, #0
 80076ae:	232d      	movlt	r3, #45	; 0x2d
 80076b0:	700b      	strb	r3, [r1, #0]
 80076b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076b8:	4691      	mov	r9, r2
 80076ba:	f023 0820 	bic.w	r8, r3, #32
 80076be:	bfbc      	itt	lt
 80076c0:	4622      	movlt	r2, r4
 80076c2:	4614      	movlt	r4, r2
 80076c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076c8:	d005      	beq.n	80076d6 <__cvt+0x42>
 80076ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076ce:	d100      	bne.n	80076d2 <__cvt+0x3e>
 80076d0:	3601      	adds	r6, #1
 80076d2:	2102      	movs	r1, #2
 80076d4:	e000      	b.n	80076d8 <__cvt+0x44>
 80076d6:	2103      	movs	r1, #3
 80076d8:	ab03      	add	r3, sp, #12
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	ab02      	add	r3, sp, #8
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	ec45 4b10 	vmov	d0, r4, r5
 80076e4:	4653      	mov	r3, sl
 80076e6:	4632      	mov	r2, r6
 80076e8:	f001 f806 	bl	80086f8 <_dtoa_r>
 80076ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076f0:	4607      	mov	r7, r0
 80076f2:	d102      	bne.n	80076fa <__cvt+0x66>
 80076f4:	f019 0f01 	tst.w	r9, #1
 80076f8:	d022      	beq.n	8007740 <__cvt+0xac>
 80076fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076fe:	eb07 0906 	add.w	r9, r7, r6
 8007702:	d110      	bne.n	8007726 <__cvt+0x92>
 8007704:	783b      	ldrb	r3, [r7, #0]
 8007706:	2b30      	cmp	r3, #48	; 0x30
 8007708:	d10a      	bne.n	8007720 <__cvt+0x8c>
 800770a:	2200      	movs	r2, #0
 800770c:	2300      	movs	r3, #0
 800770e:	4620      	mov	r0, r4
 8007710:	4629      	mov	r1, r5
 8007712:	f7f9 f9f1 	bl	8000af8 <__aeabi_dcmpeq>
 8007716:	b918      	cbnz	r0, 8007720 <__cvt+0x8c>
 8007718:	f1c6 0601 	rsb	r6, r6, #1
 800771c:	f8ca 6000 	str.w	r6, [sl]
 8007720:	f8da 3000 	ldr.w	r3, [sl]
 8007724:	4499      	add	r9, r3
 8007726:	2200      	movs	r2, #0
 8007728:	2300      	movs	r3, #0
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f9 f9e3 	bl	8000af8 <__aeabi_dcmpeq>
 8007732:	b108      	cbz	r0, 8007738 <__cvt+0xa4>
 8007734:	f8cd 900c 	str.w	r9, [sp, #12]
 8007738:	2230      	movs	r2, #48	; 0x30
 800773a:	9b03      	ldr	r3, [sp, #12]
 800773c:	454b      	cmp	r3, r9
 800773e:	d307      	bcc.n	8007750 <__cvt+0xbc>
 8007740:	9b03      	ldr	r3, [sp, #12]
 8007742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007744:	1bdb      	subs	r3, r3, r7
 8007746:	4638      	mov	r0, r7
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	b004      	add	sp, #16
 800774c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007750:	1c59      	adds	r1, r3, #1
 8007752:	9103      	str	r1, [sp, #12]
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	e7f0      	b.n	800773a <__cvt+0xa6>

08007758 <__exponent>:
 8007758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800775a:	4603      	mov	r3, r0
 800775c:	2900      	cmp	r1, #0
 800775e:	bfb8      	it	lt
 8007760:	4249      	neglt	r1, r1
 8007762:	f803 2b02 	strb.w	r2, [r3], #2
 8007766:	bfb4      	ite	lt
 8007768:	222d      	movlt	r2, #45	; 0x2d
 800776a:	222b      	movge	r2, #43	; 0x2b
 800776c:	2909      	cmp	r1, #9
 800776e:	7042      	strb	r2, [r0, #1]
 8007770:	dd2a      	ble.n	80077c8 <__exponent+0x70>
 8007772:	f10d 0407 	add.w	r4, sp, #7
 8007776:	46a4      	mov	ip, r4
 8007778:	270a      	movs	r7, #10
 800777a:	46a6      	mov	lr, r4
 800777c:	460a      	mov	r2, r1
 800777e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007782:	fb07 1516 	mls	r5, r7, r6, r1
 8007786:	3530      	adds	r5, #48	; 0x30
 8007788:	2a63      	cmp	r2, #99	; 0x63
 800778a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800778e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007792:	4631      	mov	r1, r6
 8007794:	dcf1      	bgt.n	800777a <__exponent+0x22>
 8007796:	3130      	adds	r1, #48	; 0x30
 8007798:	f1ae 0502 	sub.w	r5, lr, #2
 800779c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077a0:	1c44      	adds	r4, r0, #1
 80077a2:	4629      	mov	r1, r5
 80077a4:	4561      	cmp	r1, ip
 80077a6:	d30a      	bcc.n	80077be <__exponent+0x66>
 80077a8:	f10d 0209 	add.w	r2, sp, #9
 80077ac:	eba2 020e 	sub.w	r2, r2, lr
 80077b0:	4565      	cmp	r5, ip
 80077b2:	bf88      	it	hi
 80077b4:	2200      	movhi	r2, #0
 80077b6:	4413      	add	r3, r2
 80077b8:	1a18      	subs	r0, r3, r0
 80077ba:	b003      	add	sp, #12
 80077bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077c6:	e7ed      	b.n	80077a4 <__exponent+0x4c>
 80077c8:	2330      	movs	r3, #48	; 0x30
 80077ca:	3130      	adds	r1, #48	; 0x30
 80077cc:	7083      	strb	r3, [r0, #2]
 80077ce:	70c1      	strb	r1, [r0, #3]
 80077d0:	1d03      	adds	r3, r0, #4
 80077d2:	e7f1      	b.n	80077b8 <__exponent+0x60>

080077d4 <_printf_float>:
 80077d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d8:	ed2d 8b02 	vpush	{d8}
 80077dc:	b08d      	sub	sp, #52	; 0x34
 80077de:	460c      	mov	r4, r1
 80077e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077e4:	4616      	mov	r6, r2
 80077e6:	461f      	mov	r7, r3
 80077e8:	4605      	mov	r5, r0
 80077ea:	f001 fd73 	bl	80092d4 <_localeconv_r>
 80077ee:	f8d0 a000 	ldr.w	sl, [r0]
 80077f2:	4650      	mov	r0, sl
 80077f4:	f7f8 fcfe 	bl	80001f4 <strlen>
 80077f8:	2300      	movs	r3, #0
 80077fa:	930a      	str	r3, [sp, #40]	; 0x28
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	9305      	str	r3, [sp, #20]
 8007800:	f8d8 3000 	ldr.w	r3, [r8]
 8007804:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007808:	3307      	adds	r3, #7
 800780a:	f023 0307 	bic.w	r3, r3, #7
 800780e:	f103 0208 	add.w	r2, r3, #8
 8007812:	f8c8 2000 	str.w	r2, [r8]
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800781e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007822:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007826:	9307      	str	r3, [sp, #28]
 8007828:	f8cd 8018 	str.w	r8, [sp, #24]
 800782c:	ee08 0a10 	vmov	s16, r0
 8007830:	4b9f      	ldr	r3, [pc, #636]	; (8007ab0 <_printf_float+0x2dc>)
 8007832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800783a:	f7f9 f98f 	bl	8000b5c <__aeabi_dcmpun>
 800783e:	bb88      	cbnz	r0, 80078a4 <_printf_float+0xd0>
 8007840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007844:	4b9a      	ldr	r3, [pc, #616]	; (8007ab0 <_printf_float+0x2dc>)
 8007846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800784a:	f7f9 f969 	bl	8000b20 <__aeabi_dcmple>
 800784e:	bb48      	cbnz	r0, 80078a4 <_printf_float+0xd0>
 8007850:	2200      	movs	r2, #0
 8007852:	2300      	movs	r3, #0
 8007854:	4640      	mov	r0, r8
 8007856:	4649      	mov	r1, r9
 8007858:	f7f9 f958 	bl	8000b0c <__aeabi_dcmplt>
 800785c:	b110      	cbz	r0, 8007864 <_printf_float+0x90>
 800785e:	232d      	movs	r3, #45	; 0x2d
 8007860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007864:	4b93      	ldr	r3, [pc, #588]	; (8007ab4 <_printf_float+0x2e0>)
 8007866:	4894      	ldr	r0, [pc, #592]	; (8007ab8 <_printf_float+0x2e4>)
 8007868:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800786c:	bf94      	ite	ls
 800786e:	4698      	movls	r8, r3
 8007870:	4680      	movhi	r8, r0
 8007872:	2303      	movs	r3, #3
 8007874:	6123      	str	r3, [r4, #16]
 8007876:	9b05      	ldr	r3, [sp, #20]
 8007878:	f023 0204 	bic.w	r2, r3, #4
 800787c:	6022      	str	r2, [r4, #0]
 800787e:	f04f 0900 	mov.w	r9, #0
 8007882:	9700      	str	r7, [sp, #0]
 8007884:	4633      	mov	r3, r6
 8007886:	aa0b      	add	r2, sp, #44	; 0x2c
 8007888:	4621      	mov	r1, r4
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f9d8 	bl	8007c40 <_printf_common>
 8007890:	3001      	adds	r0, #1
 8007892:	f040 8090 	bne.w	80079b6 <_printf_float+0x1e2>
 8007896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800789a:	b00d      	add	sp, #52	; 0x34
 800789c:	ecbd 8b02 	vpop	{d8}
 80078a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a4:	4642      	mov	r2, r8
 80078a6:	464b      	mov	r3, r9
 80078a8:	4640      	mov	r0, r8
 80078aa:	4649      	mov	r1, r9
 80078ac:	f7f9 f956 	bl	8000b5c <__aeabi_dcmpun>
 80078b0:	b140      	cbz	r0, 80078c4 <_printf_float+0xf0>
 80078b2:	464b      	mov	r3, r9
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bfbc      	itt	lt
 80078b8:	232d      	movlt	r3, #45	; 0x2d
 80078ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078be:	487f      	ldr	r0, [pc, #508]	; (8007abc <_printf_float+0x2e8>)
 80078c0:	4b7f      	ldr	r3, [pc, #508]	; (8007ac0 <_printf_float+0x2ec>)
 80078c2:	e7d1      	b.n	8007868 <_printf_float+0x94>
 80078c4:	6863      	ldr	r3, [r4, #4]
 80078c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078ca:	9206      	str	r2, [sp, #24]
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	d13f      	bne.n	8007950 <_printf_float+0x17c>
 80078d0:	2306      	movs	r3, #6
 80078d2:	6063      	str	r3, [r4, #4]
 80078d4:	9b05      	ldr	r3, [sp, #20]
 80078d6:	6861      	ldr	r1, [r4, #4]
 80078d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078dc:	2300      	movs	r3, #0
 80078de:	9303      	str	r3, [sp, #12]
 80078e0:	ab0a      	add	r3, sp, #40	; 0x28
 80078e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078e6:	ab09      	add	r3, sp, #36	; 0x24
 80078e8:	ec49 8b10 	vmov	d0, r8, r9
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	6022      	str	r2, [r4, #0]
 80078f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078f4:	4628      	mov	r0, r5
 80078f6:	f7ff fecd 	bl	8007694 <__cvt>
 80078fa:	9b06      	ldr	r3, [sp, #24]
 80078fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078fe:	2b47      	cmp	r3, #71	; 0x47
 8007900:	4680      	mov	r8, r0
 8007902:	d108      	bne.n	8007916 <_printf_float+0x142>
 8007904:	1cc8      	adds	r0, r1, #3
 8007906:	db02      	blt.n	800790e <_printf_float+0x13a>
 8007908:	6863      	ldr	r3, [r4, #4]
 800790a:	4299      	cmp	r1, r3
 800790c:	dd41      	ble.n	8007992 <_printf_float+0x1be>
 800790e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007912:	fa5f fb8b 	uxtb.w	fp, fp
 8007916:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800791a:	d820      	bhi.n	800795e <_printf_float+0x18a>
 800791c:	3901      	subs	r1, #1
 800791e:	465a      	mov	r2, fp
 8007920:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007924:	9109      	str	r1, [sp, #36]	; 0x24
 8007926:	f7ff ff17 	bl	8007758 <__exponent>
 800792a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800792c:	1813      	adds	r3, r2, r0
 800792e:	2a01      	cmp	r2, #1
 8007930:	4681      	mov	r9, r0
 8007932:	6123      	str	r3, [r4, #16]
 8007934:	dc02      	bgt.n	800793c <_printf_float+0x168>
 8007936:	6822      	ldr	r2, [r4, #0]
 8007938:	07d2      	lsls	r2, r2, #31
 800793a:	d501      	bpl.n	8007940 <_printf_float+0x16c>
 800793c:	3301      	adds	r3, #1
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007944:	2b00      	cmp	r3, #0
 8007946:	d09c      	beq.n	8007882 <_printf_float+0xae>
 8007948:	232d      	movs	r3, #45	; 0x2d
 800794a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800794e:	e798      	b.n	8007882 <_printf_float+0xae>
 8007950:	9a06      	ldr	r2, [sp, #24]
 8007952:	2a47      	cmp	r2, #71	; 0x47
 8007954:	d1be      	bne.n	80078d4 <_printf_float+0x100>
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1bc      	bne.n	80078d4 <_printf_float+0x100>
 800795a:	2301      	movs	r3, #1
 800795c:	e7b9      	b.n	80078d2 <_printf_float+0xfe>
 800795e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007962:	d118      	bne.n	8007996 <_printf_float+0x1c2>
 8007964:	2900      	cmp	r1, #0
 8007966:	6863      	ldr	r3, [r4, #4]
 8007968:	dd0b      	ble.n	8007982 <_printf_float+0x1ae>
 800796a:	6121      	str	r1, [r4, #16]
 800796c:	b913      	cbnz	r3, 8007974 <_printf_float+0x1a0>
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	07d0      	lsls	r0, r2, #31
 8007972:	d502      	bpl.n	800797a <_printf_float+0x1a6>
 8007974:	3301      	adds	r3, #1
 8007976:	440b      	add	r3, r1
 8007978:	6123      	str	r3, [r4, #16]
 800797a:	65a1      	str	r1, [r4, #88]	; 0x58
 800797c:	f04f 0900 	mov.w	r9, #0
 8007980:	e7de      	b.n	8007940 <_printf_float+0x16c>
 8007982:	b913      	cbnz	r3, 800798a <_printf_float+0x1b6>
 8007984:	6822      	ldr	r2, [r4, #0]
 8007986:	07d2      	lsls	r2, r2, #31
 8007988:	d501      	bpl.n	800798e <_printf_float+0x1ba>
 800798a:	3302      	adds	r3, #2
 800798c:	e7f4      	b.n	8007978 <_printf_float+0x1a4>
 800798e:	2301      	movs	r3, #1
 8007990:	e7f2      	b.n	8007978 <_printf_float+0x1a4>
 8007992:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007998:	4299      	cmp	r1, r3
 800799a:	db05      	blt.n	80079a8 <_printf_float+0x1d4>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	6121      	str	r1, [r4, #16]
 80079a0:	07d8      	lsls	r0, r3, #31
 80079a2:	d5ea      	bpl.n	800797a <_printf_float+0x1a6>
 80079a4:	1c4b      	adds	r3, r1, #1
 80079a6:	e7e7      	b.n	8007978 <_printf_float+0x1a4>
 80079a8:	2900      	cmp	r1, #0
 80079aa:	bfd4      	ite	le
 80079ac:	f1c1 0202 	rsble	r2, r1, #2
 80079b0:	2201      	movgt	r2, #1
 80079b2:	4413      	add	r3, r2
 80079b4:	e7e0      	b.n	8007978 <_printf_float+0x1a4>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	055a      	lsls	r2, r3, #21
 80079ba:	d407      	bmi.n	80079cc <_printf_float+0x1f8>
 80079bc:	6923      	ldr	r3, [r4, #16]
 80079be:	4642      	mov	r2, r8
 80079c0:	4631      	mov	r1, r6
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b8      	blx	r7
 80079c6:	3001      	adds	r0, #1
 80079c8:	d12c      	bne.n	8007a24 <_printf_float+0x250>
 80079ca:	e764      	b.n	8007896 <_printf_float+0xc2>
 80079cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079d0:	f240 80e0 	bls.w	8007b94 <_printf_float+0x3c0>
 80079d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079d8:	2200      	movs	r2, #0
 80079da:	2300      	movs	r3, #0
 80079dc:	f7f9 f88c 	bl	8000af8 <__aeabi_dcmpeq>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d034      	beq.n	8007a4e <_printf_float+0x27a>
 80079e4:	4a37      	ldr	r2, [pc, #220]	; (8007ac4 <_printf_float+0x2f0>)
 80079e6:	2301      	movs	r3, #1
 80079e8:	4631      	mov	r1, r6
 80079ea:	4628      	mov	r0, r5
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	f43f af51 	beq.w	8007896 <_printf_float+0xc2>
 80079f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079f8:	429a      	cmp	r2, r3
 80079fa:	db02      	blt.n	8007a02 <_printf_float+0x22e>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	07d8      	lsls	r0, r3, #31
 8007a00:	d510      	bpl.n	8007a24 <_printf_float+0x250>
 8007a02:	ee18 3a10 	vmov	r3, s16
 8007a06:	4652      	mov	r2, sl
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f af41 	beq.w	8007896 <_printf_float+0xc2>
 8007a14:	f04f 0800 	mov.w	r8, #0
 8007a18:	f104 091a 	add.w	r9, r4, #26
 8007a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	4543      	cmp	r3, r8
 8007a22:	dc09      	bgt.n	8007a38 <_printf_float+0x264>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	079b      	lsls	r3, r3, #30
 8007a28:	f100 8105 	bmi.w	8007c36 <_printf_float+0x462>
 8007a2c:	68e0      	ldr	r0, [r4, #12]
 8007a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a30:	4298      	cmp	r0, r3
 8007a32:	bfb8      	it	lt
 8007a34:	4618      	movlt	r0, r3
 8007a36:	e730      	b.n	800789a <_printf_float+0xc6>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	464a      	mov	r2, r9
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4628      	mov	r0, r5
 8007a40:	47b8      	blx	r7
 8007a42:	3001      	adds	r0, #1
 8007a44:	f43f af27 	beq.w	8007896 <_printf_float+0xc2>
 8007a48:	f108 0801 	add.w	r8, r8, #1
 8007a4c:	e7e6      	b.n	8007a1c <_printf_float+0x248>
 8007a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dc39      	bgt.n	8007ac8 <_printf_float+0x2f4>
 8007a54:	4a1b      	ldr	r2, [pc, #108]	; (8007ac4 <_printf_float+0x2f0>)
 8007a56:	2301      	movs	r3, #1
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f43f af19 	beq.w	8007896 <_printf_float+0xc2>
 8007a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	d102      	bne.n	8007a72 <_printf_float+0x29e>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	07d9      	lsls	r1, r3, #31
 8007a70:	d5d8      	bpl.n	8007a24 <_printf_float+0x250>
 8007a72:	ee18 3a10 	vmov	r3, s16
 8007a76:	4652      	mov	r2, sl
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f43f af09 	beq.w	8007896 <_printf_float+0xc2>
 8007a84:	f04f 0900 	mov.w	r9, #0
 8007a88:	f104 0a1a 	add.w	sl, r4, #26
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	425b      	negs	r3, r3
 8007a90:	454b      	cmp	r3, r9
 8007a92:	dc01      	bgt.n	8007a98 <_printf_float+0x2c4>
 8007a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a96:	e792      	b.n	80079be <_printf_float+0x1ea>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b8      	blx	r7
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	f43f aef7 	beq.w	8007896 <_printf_float+0xc2>
 8007aa8:	f109 0901 	add.w	r9, r9, #1
 8007aac:	e7ee      	b.n	8007a8c <_printf_float+0x2b8>
 8007aae:	bf00      	nop
 8007ab0:	7fefffff 	.word	0x7fefffff
 8007ab4:	0800a5fc 	.word	0x0800a5fc
 8007ab8:	0800a600 	.word	0x0800a600
 8007abc:	0800a608 	.word	0x0800a608
 8007ac0:	0800a604 	.word	0x0800a604
 8007ac4:	0800a60c 	.word	0x0800a60c
 8007ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007acc:	429a      	cmp	r2, r3
 8007ace:	bfa8      	it	ge
 8007ad0:	461a      	movge	r2, r3
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	4691      	mov	r9, r2
 8007ad6:	dc37      	bgt.n	8007b48 <_printf_float+0x374>
 8007ad8:	f04f 0b00 	mov.w	fp, #0
 8007adc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ae0:	f104 021a 	add.w	r2, r4, #26
 8007ae4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	eba3 0309 	sub.w	r3, r3, r9
 8007aec:	455b      	cmp	r3, fp
 8007aee:	dc33      	bgt.n	8007b58 <_printf_float+0x384>
 8007af0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007af4:	429a      	cmp	r2, r3
 8007af6:	db3b      	blt.n	8007b70 <_printf_float+0x39c>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	07da      	lsls	r2, r3, #31
 8007afc:	d438      	bmi.n	8007b70 <_printf_float+0x39c>
 8007afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b00:	9a05      	ldr	r2, [sp, #20]
 8007b02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b04:	1a9a      	subs	r2, r3, r2
 8007b06:	eba3 0901 	sub.w	r9, r3, r1
 8007b0a:	4591      	cmp	r9, r2
 8007b0c:	bfa8      	it	ge
 8007b0e:	4691      	movge	r9, r2
 8007b10:	f1b9 0f00 	cmp.w	r9, #0
 8007b14:	dc35      	bgt.n	8007b82 <_printf_float+0x3ae>
 8007b16:	f04f 0800 	mov.w	r8, #0
 8007b1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b1e:	f104 0a1a 	add.w	sl, r4, #26
 8007b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	eba3 0309 	sub.w	r3, r3, r9
 8007b2c:	4543      	cmp	r3, r8
 8007b2e:	f77f af79 	ble.w	8007a24 <_printf_float+0x250>
 8007b32:	2301      	movs	r3, #1
 8007b34:	4652      	mov	r2, sl
 8007b36:	4631      	mov	r1, r6
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b8      	blx	r7
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	f43f aeaa 	beq.w	8007896 <_printf_float+0xc2>
 8007b42:	f108 0801 	add.w	r8, r8, #1
 8007b46:	e7ec      	b.n	8007b22 <_printf_float+0x34e>
 8007b48:	4613      	mov	r3, r2
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	4628      	mov	r0, r5
 8007b50:	47b8      	blx	r7
 8007b52:	3001      	adds	r0, #1
 8007b54:	d1c0      	bne.n	8007ad8 <_printf_float+0x304>
 8007b56:	e69e      	b.n	8007896 <_printf_float+0xc2>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	9205      	str	r2, [sp, #20]
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	f43f ae97 	beq.w	8007896 <_printf_float+0xc2>
 8007b68:	9a05      	ldr	r2, [sp, #20]
 8007b6a:	f10b 0b01 	add.w	fp, fp, #1
 8007b6e:	e7b9      	b.n	8007ae4 <_printf_float+0x310>
 8007b70:	ee18 3a10 	vmov	r3, s16
 8007b74:	4652      	mov	r2, sl
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d1be      	bne.n	8007afe <_printf_float+0x32a>
 8007b80:	e689      	b.n	8007896 <_printf_float+0xc2>
 8007b82:	9a05      	ldr	r2, [sp, #20]
 8007b84:	464b      	mov	r3, r9
 8007b86:	4442      	add	r2, r8
 8007b88:	4631      	mov	r1, r6
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	47b8      	blx	r7
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d1c1      	bne.n	8007b16 <_printf_float+0x342>
 8007b92:	e680      	b.n	8007896 <_printf_float+0xc2>
 8007b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b96:	2a01      	cmp	r2, #1
 8007b98:	dc01      	bgt.n	8007b9e <_printf_float+0x3ca>
 8007b9a:	07db      	lsls	r3, r3, #31
 8007b9c:	d538      	bpl.n	8007c10 <_printf_float+0x43c>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	47b8      	blx	r7
 8007ba8:	3001      	adds	r0, #1
 8007baa:	f43f ae74 	beq.w	8007896 <_printf_float+0xc2>
 8007bae:	ee18 3a10 	vmov	r3, s16
 8007bb2:	4652      	mov	r2, sl
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f43f ae6b 	beq.w	8007896 <_printf_float+0xc2>
 8007bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f7f8 ff96 	bl	8000af8 <__aeabi_dcmpeq>
 8007bcc:	b9d8      	cbnz	r0, 8007c06 <_printf_float+0x432>
 8007bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd0:	f108 0201 	add.w	r2, r8, #1
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b8      	blx	r7
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d10e      	bne.n	8007bfe <_printf_float+0x42a>
 8007be0:	e659      	b.n	8007896 <_printf_float+0xc2>
 8007be2:	2301      	movs	r3, #1
 8007be4:	4652      	mov	r2, sl
 8007be6:	4631      	mov	r1, r6
 8007be8:	4628      	mov	r0, r5
 8007bea:	47b8      	blx	r7
 8007bec:	3001      	adds	r0, #1
 8007bee:	f43f ae52 	beq.w	8007896 <_printf_float+0xc2>
 8007bf2:	f108 0801 	add.w	r8, r8, #1
 8007bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	4543      	cmp	r3, r8
 8007bfc:	dcf1      	bgt.n	8007be2 <_printf_float+0x40e>
 8007bfe:	464b      	mov	r3, r9
 8007c00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c04:	e6dc      	b.n	80079c0 <_printf_float+0x1ec>
 8007c06:	f04f 0800 	mov.w	r8, #0
 8007c0a:	f104 0a1a 	add.w	sl, r4, #26
 8007c0e:	e7f2      	b.n	8007bf6 <_printf_float+0x422>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4642      	mov	r2, r8
 8007c14:	e7df      	b.n	8007bd6 <_printf_float+0x402>
 8007c16:	2301      	movs	r3, #1
 8007c18:	464a      	mov	r2, r9
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	f43f ae38 	beq.w	8007896 <_printf_float+0xc2>
 8007c26:	f108 0801 	add.w	r8, r8, #1
 8007c2a:	68e3      	ldr	r3, [r4, #12]
 8007c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c2e:	1a5b      	subs	r3, r3, r1
 8007c30:	4543      	cmp	r3, r8
 8007c32:	dcf0      	bgt.n	8007c16 <_printf_float+0x442>
 8007c34:	e6fa      	b.n	8007a2c <_printf_float+0x258>
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	f104 0919 	add.w	r9, r4, #25
 8007c3e:	e7f4      	b.n	8007c2a <_printf_float+0x456>

08007c40 <_printf_common>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	4616      	mov	r6, r2
 8007c46:	4699      	mov	r9, r3
 8007c48:	688a      	ldr	r2, [r1, #8]
 8007c4a:	690b      	ldr	r3, [r1, #16]
 8007c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	bfb8      	it	lt
 8007c54:	4613      	movlt	r3, r2
 8007c56:	6033      	str	r3, [r6, #0]
 8007c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	b10a      	cbz	r2, 8007c66 <_printf_common+0x26>
 8007c62:	3301      	adds	r3, #1
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	0699      	lsls	r1, r3, #26
 8007c6a:	bf42      	ittt	mi
 8007c6c:	6833      	ldrmi	r3, [r6, #0]
 8007c6e:	3302      	addmi	r3, #2
 8007c70:	6033      	strmi	r3, [r6, #0]
 8007c72:	6825      	ldr	r5, [r4, #0]
 8007c74:	f015 0506 	ands.w	r5, r5, #6
 8007c78:	d106      	bne.n	8007c88 <_printf_common+0x48>
 8007c7a:	f104 0a19 	add.w	sl, r4, #25
 8007c7e:	68e3      	ldr	r3, [r4, #12]
 8007c80:	6832      	ldr	r2, [r6, #0]
 8007c82:	1a9b      	subs	r3, r3, r2
 8007c84:	42ab      	cmp	r3, r5
 8007c86:	dc26      	bgt.n	8007cd6 <_printf_common+0x96>
 8007c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c8c:	1e13      	subs	r3, r2, #0
 8007c8e:	6822      	ldr	r2, [r4, #0]
 8007c90:	bf18      	it	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	0692      	lsls	r2, r2, #26
 8007c96:	d42b      	bmi.n	8007cf0 <_printf_common+0xb0>
 8007c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	47c0      	blx	r8
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d01e      	beq.n	8007ce4 <_printf_common+0xa4>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	68e5      	ldr	r5, [r4, #12]
 8007caa:	6832      	ldr	r2, [r6, #0]
 8007cac:	f003 0306 	and.w	r3, r3, #6
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	bf08      	it	eq
 8007cb4:	1aad      	subeq	r5, r5, r2
 8007cb6:	68a3      	ldr	r3, [r4, #8]
 8007cb8:	6922      	ldr	r2, [r4, #16]
 8007cba:	bf0c      	ite	eq
 8007cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cc0:	2500      	movne	r5, #0
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	bfc4      	itt	gt
 8007cc6:	1a9b      	subgt	r3, r3, r2
 8007cc8:	18ed      	addgt	r5, r5, r3
 8007cca:	2600      	movs	r6, #0
 8007ccc:	341a      	adds	r4, #26
 8007cce:	42b5      	cmp	r5, r6
 8007cd0:	d11a      	bne.n	8007d08 <_printf_common+0xc8>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e008      	b.n	8007ce8 <_printf_common+0xa8>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4652      	mov	r2, sl
 8007cda:	4649      	mov	r1, r9
 8007cdc:	4638      	mov	r0, r7
 8007cde:	47c0      	blx	r8
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d103      	bne.n	8007cec <_printf_common+0xac>
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cec:	3501      	adds	r5, #1
 8007cee:	e7c6      	b.n	8007c7e <_printf_common+0x3e>
 8007cf0:	18e1      	adds	r1, r4, r3
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	2030      	movs	r0, #48	; 0x30
 8007cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cfa:	4422      	add	r2, r4
 8007cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d04:	3302      	adds	r3, #2
 8007d06:	e7c7      	b.n	8007c98 <_printf_common+0x58>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	4638      	mov	r0, r7
 8007d10:	47c0      	blx	r8
 8007d12:	3001      	adds	r0, #1
 8007d14:	d0e6      	beq.n	8007ce4 <_printf_common+0xa4>
 8007d16:	3601      	adds	r6, #1
 8007d18:	e7d9      	b.n	8007cce <_printf_common+0x8e>
	...

08007d1c <_printf_i>:
 8007d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	7e0f      	ldrb	r7, [r1, #24]
 8007d22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d24:	2f78      	cmp	r7, #120	; 0x78
 8007d26:	4691      	mov	r9, r2
 8007d28:	4680      	mov	r8, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	469a      	mov	sl, r3
 8007d2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d32:	d807      	bhi.n	8007d44 <_printf_i+0x28>
 8007d34:	2f62      	cmp	r7, #98	; 0x62
 8007d36:	d80a      	bhi.n	8007d4e <_printf_i+0x32>
 8007d38:	2f00      	cmp	r7, #0
 8007d3a:	f000 80d8 	beq.w	8007eee <_printf_i+0x1d2>
 8007d3e:	2f58      	cmp	r7, #88	; 0x58
 8007d40:	f000 80a3 	beq.w	8007e8a <_printf_i+0x16e>
 8007d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d4c:	e03a      	b.n	8007dc4 <_printf_i+0xa8>
 8007d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d52:	2b15      	cmp	r3, #21
 8007d54:	d8f6      	bhi.n	8007d44 <_printf_i+0x28>
 8007d56:	a101      	add	r1, pc, #4	; (adr r1, 8007d5c <_printf_i+0x40>)
 8007d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d5c:	08007db5 	.word	0x08007db5
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007d45 	.word	0x08007d45
 8007d68:	08007d45 	.word	0x08007d45
 8007d6c:	08007d45 	.word	0x08007d45
 8007d70:	08007d45 	.word	0x08007d45
 8007d74:	08007dc9 	.word	0x08007dc9
 8007d78:	08007d45 	.word	0x08007d45
 8007d7c:	08007d45 	.word	0x08007d45
 8007d80:	08007d45 	.word	0x08007d45
 8007d84:	08007d45 	.word	0x08007d45
 8007d88:	08007ed5 	.word	0x08007ed5
 8007d8c:	08007df9 	.word	0x08007df9
 8007d90:	08007eb7 	.word	0x08007eb7
 8007d94:	08007d45 	.word	0x08007d45
 8007d98:	08007d45 	.word	0x08007d45
 8007d9c:	08007ef7 	.word	0x08007ef7
 8007da0:	08007d45 	.word	0x08007d45
 8007da4:	08007df9 	.word	0x08007df9
 8007da8:	08007d45 	.word	0x08007d45
 8007dac:	08007d45 	.word	0x08007d45
 8007db0:	08007ebf 	.word	0x08007ebf
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	1d1a      	adds	r2, r3, #4
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	602a      	str	r2, [r5, #0]
 8007dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e0a3      	b.n	8007f10 <_printf_i+0x1f4>
 8007dc8:	6820      	ldr	r0, [r4, #0]
 8007dca:	6829      	ldr	r1, [r5, #0]
 8007dcc:	0606      	lsls	r6, r0, #24
 8007dce:	f101 0304 	add.w	r3, r1, #4
 8007dd2:	d50a      	bpl.n	8007dea <_printf_i+0xce>
 8007dd4:	680e      	ldr	r6, [r1, #0]
 8007dd6:	602b      	str	r3, [r5, #0]
 8007dd8:	2e00      	cmp	r6, #0
 8007dda:	da03      	bge.n	8007de4 <_printf_i+0xc8>
 8007ddc:	232d      	movs	r3, #45	; 0x2d
 8007dde:	4276      	negs	r6, r6
 8007de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de4:	485e      	ldr	r0, [pc, #376]	; (8007f60 <_printf_i+0x244>)
 8007de6:	230a      	movs	r3, #10
 8007de8:	e019      	b.n	8007e1e <_printf_i+0x102>
 8007dea:	680e      	ldr	r6, [r1, #0]
 8007dec:	602b      	str	r3, [r5, #0]
 8007dee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007df2:	bf18      	it	ne
 8007df4:	b236      	sxthne	r6, r6
 8007df6:	e7ef      	b.n	8007dd8 <_printf_i+0xbc>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	6820      	ldr	r0, [r4, #0]
 8007dfc:	1d19      	adds	r1, r3, #4
 8007dfe:	6029      	str	r1, [r5, #0]
 8007e00:	0601      	lsls	r1, r0, #24
 8007e02:	d501      	bpl.n	8007e08 <_printf_i+0xec>
 8007e04:	681e      	ldr	r6, [r3, #0]
 8007e06:	e002      	b.n	8007e0e <_printf_i+0xf2>
 8007e08:	0646      	lsls	r6, r0, #25
 8007e0a:	d5fb      	bpl.n	8007e04 <_printf_i+0xe8>
 8007e0c:	881e      	ldrh	r6, [r3, #0]
 8007e0e:	4854      	ldr	r0, [pc, #336]	; (8007f60 <_printf_i+0x244>)
 8007e10:	2f6f      	cmp	r7, #111	; 0x6f
 8007e12:	bf0c      	ite	eq
 8007e14:	2308      	moveq	r3, #8
 8007e16:	230a      	movne	r3, #10
 8007e18:	2100      	movs	r1, #0
 8007e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e1e:	6865      	ldr	r5, [r4, #4]
 8007e20:	60a5      	str	r5, [r4, #8]
 8007e22:	2d00      	cmp	r5, #0
 8007e24:	bfa2      	ittt	ge
 8007e26:	6821      	ldrge	r1, [r4, #0]
 8007e28:	f021 0104 	bicge.w	r1, r1, #4
 8007e2c:	6021      	strge	r1, [r4, #0]
 8007e2e:	b90e      	cbnz	r6, 8007e34 <_printf_i+0x118>
 8007e30:	2d00      	cmp	r5, #0
 8007e32:	d04d      	beq.n	8007ed0 <_printf_i+0x1b4>
 8007e34:	4615      	mov	r5, r2
 8007e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8007e3e:	5dc7      	ldrb	r7, [r0, r7]
 8007e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e44:	4637      	mov	r7, r6
 8007e46:	42bb      	cmp	r3, r7
 8007e48:	460e      	mov	r6, r1
 8007e4a:	d9f4      	bls.n	8007e36 <_printf_i+0x11a>
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d10b      	bne.n	8007e68 <_printf_i+0x14c>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	07de      	lsls	r6, r3, #31
 8007e54:	d508      	bpl.n	8007e68 <_printf_i+0x14c>
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	6861      	ldr	r1, [r4, #4]
 8007e5a:	4299      	cmp	r1, r3
 8007e5c:	bfde      	ittt	le
 8007e5e:	2330      	movle	r3, #48	; 0x30
 8007e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007e68:	1b52      	subs	r2, r2, r5
 8007e6a:	6122      	str	r2, [r4, #16]
 8007e6c:	f8cd a000 	str.w	sl, [sp]
 8007e70:	464b      	mov	r3, r9
 8007e72:	aa03      	add	r2, sp, #12
 8007e74:	4621      	mov	r1, r4
 8007e76:	4640      	mov	r0, r8
 8007e78:	f7ff fee2 	bl	8007c40 <_printf_common>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d14c      	bne.n	8007f1a <_printf_i+0x1fe>
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e84:	b004      	add	sp, #16
 8007e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8a:	4835      	ldr	r0, [pc, #212]	; (8007f60 <_printf_i+0x244>)
 8007e8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e90:	6829      	ldr	r1, [r5, #0]
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e98:	6029      	str	r1, [r5, #0]
 8007e9a:	061d      	lsls	r5, r3, #24
 8007e9c:	d514      	bpl.n	8007ec8 <_printf_i+0x1ac>
 8007e9e:	07df      	lsls	r7, r3, #31
 8007ea0:	bf44      	itt	mi
 8007ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea6:	6023      	strmi	r3, [r4, #0]
 8007ea8:	b91e      	cbnz	r6, 8007eb2 <_printf_i+0x196>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	f023 0320 	bic.w	r3, r3, #32
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	2310      	movs	r3, #16
 8007eb4:	e7b0      	b.n	8007e18 <_printf_i+0xfc>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	f043 0320 	orr.w	r3, r3, #32
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	2378      	movs	r3, #120	; 0x78
 8007ec0:	4828      	ldr	r0, [pc, #160]	; (8007f64 <_printf_i+0x248>)
 8007ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ec6:	e7e3      	b.n	8007e90 <_printf_i+0x174>
 8007ec8:	0659      	lsls	r1, r3, #25
 8007eca:	bf48      	it	mi
 8007ecc:	b2b6      	uxthmi	r6, r6
 8007ece:	e7e6      	b.n	8007e9e <_printf_i+0x182>
 8007ed0:	4615      	mov	r5, r2
 8007ed2:	e7bb      	b.n	8007e4c <_printf_i+0x130>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	6826      	ldr	r6, [r4, #0]
 8007ed8:	6961      	ldr	r1, [r4, #20]
 8007eda:	1d18      	adds	r0, r3, #4
 8007edc:	6028      	str	r0, [r5, #0]
 8007ede:	0635      	lsls	r5, r6, #24
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	d501      	bpl.n	8007ee8 <_printf_i+0x1cc>
 8007ee4:	6019      	str	r1, [r3, #0]
 8007ee6:	e002      	b.n	8007eee <_printf_i+0x1d2>
 8007ee8:	0670      	lsls	r0, r6, #25
 8007eea:	d5fb      	bpl.n	8007ee4 <_printf_i+0x1c8>
 8007eec:	8019      	strh	r1, [r3, #0]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	6123      	str	r3, [r4, #16]
 8007ef2:	4615      	mov	r5, r2
 8007ef4:	e7ba      	b.n	8007e6c <_printf_i+0x150>
 8007ef6:	682b      	ldr	r3, [r5, #0]
 8007ef8:	1d1a      	adds	r2, r3, #4
 8007efa:	602a      	str	r2, [r5, #0]
 8007efc:	681d      	ldr	r5, [r3, #0]
 8007efe:	6862      	ldr	r2, [r4, #4]
 8007f00:	2100      	movs	r1, #0
 8007f02:	4628      	mov	r0, r5
 8007f04:	f7f8 f984 	bl	8000210 <memchr>
 8007f08:	b108      	cbz	r0, 8007f0e <_printf_i+0x1f2>
 8007f0a:	1b40      	subs	r0, r0, r5
 8007f0c:	6060      	str	r0, [r4, #4]
 8007f0e:	6863      	ldr	r3, [r4, #4]
 8007f10:	6123      	str	r3, [r4, #16]
 8007f12:	2300      	movs	r3, #0
 8007f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f18:	e7a8      	b.n	8007e6c <_printf_i+0x150>
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	462a      	mov	r2, r5
 8007f1e:	4649      	mov	r1, r9
 8007f20:	4640      	mov	r0, r8
 8007f22:	47d0      	blx	sl
 8007f24:	3001      	adds	r0, #1
 8007f26:	d0ab      	beq.n	8007e80 <_printf_i+0x164>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	079b      	lsls	r3, r3, #30
 8007f2c:	d413      	bmi.n	8007f56 <_printf_i+0x23a>
 8007f2e:	68e0      	ldr	r0, [r4, #12]
 8007f30:	9b03      	ldr	r3, [sp, #12]
 8007f32:	4298      	cmp	r0, r3
 8007f34:	bfb8      	it	lt
 8007f36:	4618      	movlt	r0, r3
 8007f38:	e7a4      	b.n	8007e84 <_printf_i+0x168>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4632      	mov	r2, r6
 8007f3e:	4649      	mov	r1, r9
 8007f40:	4640      	mov	r0, r8
 8007f42:	47d0      	blx	sl
 8007f44:	3001      	adds	r0, #1
 8007f46:	d09b      	beq.n	8007e80 <_printf_i+0x164>
 8007f48:	3501      	adds	r5, #1
 8007f4a:	68e3      	ldr	r3, [r4, #12]
 8007f4c:	9903      	ldr	r1, [sp, #12]
 8007f4e:	1a5b      	subs	r3, r3, r1
 8007f50:	42ab      	cmp	r3, r5
 8007f52:	dcf2      	bgt.n	8007f3a <_printf_i+0x21e>
 8007f54:	e7eb      	b.n	8007f2e <_printf_i+0x212>
 8007f56:	2500      	movs	r5, #0
 8007f58:	f104 0619 	add.w	r6, r4, #25
 8007f5c:	e7f5      	b.n	8007f4a <_printf_i+0x22e>
 8007f5e:	bf00      	nop
 8007f60:	0800a60e 	.word	0x0800a60e
 8007f64:	0800a61f 	.word	0x0800a61f

08007f68 <iprintf>:
 8007f68:	b40f      	push	{r0, r1, r2, r3}
 8007f6a:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <iprintf+0x2c>)
 8007f6c:	b513      	push	{r0, r1, r4, lr}
 8007f6e:	681c      	ldr	r4, [r3, #0]
 8007f70:	b124      	cbz	r4, 8007f7c <iprintf+0x14>
 8007f72:	69a3      	ldr	r3, [r4, #24]
 8007f74:	b913      	cbnz	r3, 8007f7c <iprintf+0x14>
 8007f76:	4620      	mov	r0, r4
 8007f78:	f7ff f9d0 	bl	800731c <__sinit>
 8007f7c:	ab05      	add	r3, sp, #20
 8007f7e:	9a04      	ldr	r2, [sp, #16]
 8007f80:	68a1      	ldr	r1, [r4, #8]
 8007f82:	9301      	str	r3, [sp, #4]
 8007f84:	4620      	mov	r0, r4
 8007f86:	f001 ff55 	bl	8009e34 <_vfiprintf_r>
 8007f8a:	b002      	add	sp, #8
 8007f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f90:	b004      	add	sp, #16
 8007f92:	4770      	bx	lr
 8007f94:	20000010 	.word	0x20000010

08007f98 <_puts_r>:
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	460e      	mov	r6, r1
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	b118      	cbz	r0, 8007fa8 <_puts_r+0x10>
 8007fa0:	6983      	ldr	r3, [r0, #24]
 8007fa2:	b90b      	cbnz	r3, 8007fa8 <_puts_r+0x10>
 8007fa4:	f7ff f9ba 	bl	800731c <__sinit>
 8007fa8:	69ab      	ldr	r3, [r5, #24]
 8007faa:	68ac      	ldr	r4, [r5, #8]
 8007fac:	b913      	cbnz	r3, 8007fb4 <_puts_r+0x1c>
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f7ff f9b4 	bl	800731c <__sinit>
 8007fb4:	4b2c      	ldr	r3, [pc, #176]	; (8008068 <_puts_r+0xd0>)
 8007fb6:	429c      	cmp	r4, r3
 8007fb8:	d120      	bne.n	8007ffc <_puts_r+0x64>
 8007fba:	686c      	ldr	r4, [r5, #4]
 8007fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fbe:	07db      	lsls	r3, r3, #31
 8007fc0:	d405      	bmi.n	8007fce <_puts_r+0x36>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	0598      	lsls	r0, r3, #22
 8007fc6:	d402      	bmi.n	8007fce <_puts_r+0x36>
 8007fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fca:	f7ff fa6a 	bl	80074a2 <__retarget_lock_acquire_recursive>
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	0719      	lsls	r1, r3, #28
 8007fd2:	d51d      	bpl.n	8008010 <_puts_r+0x78>
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	b1db      	cbz	r3, 8008010 <_puts_r+0x78>
 8007fd8:	3e01      	subs	r6, #1
 8007fda:	68a3      	ldr	r3, [r4, #8]
 8007fdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	60a3      	str	r3, [r4, #8]
 8007fe4:	bb39      	cbnz	r1, 8008036 <_puts_r+0x9e>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	da38      	bge.n	800805c <_puts_r+0xc4>
 8007fea:	4622      	mov	r2, r4
 8007fec:	210a      	movs	r1, #10
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f000 fa14 	bl	800841c <__swbuf_r>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d011      	beq.n	800801c <_puts_r+0x84>
 8007ff8:	250a      	movs	r5, #10
 8007ffa:	e011      	b.n	8008020 <_puts_r+0x88>
 8007ffc:	4b1b      	ldr	r3, [pc, #108]	; (800806c <_puts_r+0xd4>)
 8007ffe:	429c      	cmp	r4, r3
 8008000:	d101      	bne.n	8008006 <_puts_r+0x6e>
 8008002:	68ac      	ldr	r4, [r5, #8]
 8008004:	e7da      	b.n	8007fbc <_puts_r+0x24>
 8008006:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <_puts_r+0xd8>)
 8008008:	429c      	cmp	r4, r3
 800800a:	bf08      	it	eq
 800800c:	68ec      	ldreq	r4, [r5, #12]
 800800e:	e7d5      	b.n	8007fbc <_puts_r+0x24>
 8008010:	4621      	mov	r1, r4
 8008012:	4628      	mov	r0, r5
 8008014:	f000 fa66 	bl	80084e4 <__swsetup_r>
 8008018:	2800      	cmp	r0, #0
 800801a:	d0dd      	beq.n	8007fd8 <_puts_r+0x40>
 800801c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008022:	07da      	lsls	r2, r3, #31
 8008024:	d405      	bmi.n	8008032 <_puts_r+0x9a>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	059b      	lsls	r3, r3, #22
 800802a:	d402      	bmi.n	8008032 <_puts_r+0x9a>
 800802c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800802e:	f7ff fa39 	bl	80074a4 <__retarget_lock_release_recursive>
 8008032:	4628      	mov	r0, r5
 8008034:	bd70      	pop	{r4, r5, r6, pc}
 8008036:	2b00      	cmp	r3, #0
 8008038:	da04      	bge.n	8008044 <_puts_r+0xac>
 800803a:	69a2      	ldr	r2, [r4, #24]
 800803c:	429a      	cmp	r2, r3
 800803e:	dc06      	bgt.n	800804e <_puts_r+0xb6>
 8008040:	290a      	cmp	r1, #10
 8008042:	d004      	beq.n	800804e <_puts_r+0xb6>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	6022      	str	r2, [r4, #0]
 800804a:	7019      	strb	r1, [r3, #0]
 800804c:	e7c5      	b.n	8007fda <_puts_r+0x42>
 800804e:	4622      	mov	r2, r4
 8008050:	4628      	mov	r0, r5
 8008052:	f000 f9e3 	bl	800841c <__swbuf_r>
 8008056:	3001      	adds	r0, #1
 8008058:	d1bf      	bne.n	8007fda <_puts_r+0x42>
 800805a:	e7df      	b.n	800801c <_puts_r+0x84>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	250a      	movs	r5, #10
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	6022      	str	r2, [r4, #0]
 8008064:	701d      	strb	r5, [r3, #0]
 8008066:	e7db      	b.n	8008020 <_puts_r+0x88>
 8008068:	0800a5b8 	.word	0x0800a5b8
 800806c:	0800a5d8 	.word	0x0800a5d8
 8008070:	0800a598 	.word	0x0800a598

08008074 <puts>:
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <puts+0xc>)
 8008076:	4601      	mov	r1, r0
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f7ff bf8d 	b.w	8007f98 <_puts_r>
 800807e:	bf00      	nop
 8008080:	20000010 	.word	0x20000010

08008084 <_sbrk_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d06      	ldr	r5, [pc, #24]	; (80080a0 <_sbrk_r+0x1c>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	f7fb faa6 	bl	80035e0 <_sbrk>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_sbrk_r+0x1a>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_sbrk_r+0x1a>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	20001c60 	.word	0x20001c60

080080a4 <siprintf>:
 80080a4:	b40e      	push	{r1, r2, r3}
 80080a6:	b500      	push	{lr}
 80080a8:	b09c      	sub	sp, #112	; 0x70
 80080aa:	ab1d      	add	r3, sp, #116	; 0x74
 80080ac:	9002      	str	r0, [sp, #8]
 80080ae:	9006      	str	r0, [sp, #24]
 80080b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080b4:	4809      	ldr	r0, [pc, #36]	; (80080dc <siprintf+0x38>)
 80080b6:	9107      	str	r1, [sp, #28]
 80080b8:	9104      	str	r1, [sp, #16]
 80080ba:	4909      	ldr	r1, [pc, #36]	; (80080e0 <siprintf+0x3c>)
 80080bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c0:	9105      	str	r1, [sp, #20]
 80080c2:	6800      	ldr	r0, [r0, #0]
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	a902      	add	r1, sp, #8
 80080c8:	f001 fd8a 	bl	8009be0 <_svfiprintf_r>
 80080cc:	9b02      	ldr	r3, [sp, #8]
 80080ce:	2200      	movs	r2, #0
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	b01c      	add	sp, #112	; 0x70
 80080d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080d8:	b003      	add	sp, #12
 80080da:	4770      	bx	lr
 80080dc:	20000010 	.word	0x20000010
 80080e0:	ffff0208 	.word	0xffff0208

080080e4 <__sread>:
 80080e4:	b510      	push	{r4, lr}
 80080e6:	460c      	mov	r4, r1
 80080e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ec:	f001 ffd2 	bl	800a094 <_read_r>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	bfab      	itete	ge
 80080f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080f6:	89a3      	ldrhlt	r3, [r4, #12]
 80080f8:	181b      	addge	r3, r3, r0
 80080fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080fe:	bfac      	ite	ge
 8008100:	6563      	strge	r3, [r4, #84]	; 0x54
 8008102:	81a3      	strhlt	r3, [r4, #12]
 8008104:	bd10      	pop	{r4, pc}

08008106 <__swrite>:
 8008106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810a:	461f      	mov	r7, r3
 800810c:	898b      	ldrh	r3, [r1, #12]
 800810e:	05db      	lsls	r3, r3, #23
 8008110:	4605      	mov	r5, r0
 8008112:	460c      	mov	r4, r1
 8008114:	4616      	mov	r6, r2
 8008116:	d505      	bpl.n	8008124 <__swrite+0x1e>
 8008118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800811c:	2302      	movs	r3, #2
 800811e:	2200      	movs	r2, #0
 8008120:	f001 f8dc 	bl	80092dc <_lseek_r>
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800812a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	4632      	mov	r2, r6
 8008132:	463b      	mov	r3, r7
 8008134:	4628      	mov	r0, r5
 8008136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800813a:	f000 b9c1 	b.w	80084c0 <_write_r>

0800813e <__sseek>:
 800813e:	b510      	push	{r4, lr}
 8008140:	460c      	mov	r4, r1
 8008142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008146:	f001 f8c9 	bl	80092dc <_lseek_r>
 800814a:	1c43      	adds	r3, r0, #1
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	bf15      	itete	ne
 8008150:	6560      	strne	r0, [r4, #84]	; 0x54
 8008152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800815a:	81a3      	strheq	r3, [r4, #12]
 800815c:	bf18      	it	ne
 800815e:	81a3      	strhne	r3, [r4, #12]
 8008160:	bd10      	pop	{r4, pc}

08008162 <__sclose>:
 8008162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008166:	f000 ba2b 	b.w	80085c0 <_close_r>

0800816a <__strtok_r>:
 800816a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816c:	b908      	cbnz	r0, 8008172 <__strtok_r+0x8>
 800816e:	6810      	ldr	r0, [r2, #0]
 8008170:	b188      	cbz	r0, 8008196 <__strtok_r+0x2c>
 8008172:	4604      	mov	r4, r0
 8008174:	4620      	mov	r0, r4
 8008176:	f814 5b01 	ldrb.w	r5, [r4], #1
 800817a:	460f      	mov	r7, r1
 800817c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008180:	b91e      	cbnz	r6, 800818a <__strtok_r+0x20>
 8008182:	b965      	cbnz	r5, 800819e <__strtok_r+0x34>
 8008184:	6015      	str	r5, [r2, #0]
 8008186:	4628      	mov	r0, r5
 8008188:	e005      	b.n	8008196 <__strtok_r+0x2c>
 800818a:	42b5      	cmp	r5, r6
 800818c:	d1f6      	bne.n	800817c <__strtok_r+0x12>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1f0      	bne.n	8008174 <__strtok_r+0xa>
 8008192:	6014      	str	r4, [r2, #0]
 8008194:	7003      	strb	r3, [r0, #0]
 8008196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008198:	461c      	mov	r4, r3
 800819a:	e00c      	b.n	80081b6 <__strtok_r+0x4c>
 800819c:	b915      	cbnz	r5, 80081a4 <__strtok_r+0x3a>
 800819e:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081a2:	460e      	mov	r6, r1
 80081a4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80081a8:	42ab      	cmp	r3, r5
 80081aa:	d1f7      	bne.n	800819c <__strtok_r+0x32>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0f3      	beq.n	8008198 <__strtok_r+0x2e>
 80081b0:	2300      	movs	r3, #0
 80081b2:	f804 3c01 	strb.w	r3, [r4, #-1]
 80081b6:	6014      	str	r4, [r2, #0]
 80081b8:	e7ed      	b.n	8008196 <__strtok_r+0x2c>

080081ba <strtok_r>:
 80081ba:	2301      	movs	r3, #1
 80081bc:	f7ff bfd5 	b.w	800816a <__strtok_r>

080081c0 <_strtol_l.constprop.0>:
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c6:	d001      	beq.n	80081cc <_strtol_l.constprop.0+0xc>
 80081c8:	2b24      	cmp	r3, #36	; 0x24
 80081ca:	d906      	bls.n	80081da <_strtol_l.constprop.0+0x1a>
 80081cc:	f7fe ff74 	bl	80070b8 <__errno>
 80081d0:	2316      	movs	r3, #22
 80081d2:	6003      	str	r3, [r0, #0]
 80081d4:	2000      	movs	r0, #0
 80081d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80082c0 <_strtol_l.constprop.0+0x100>
 80081de:	460d      	mov	r5, r1
 80081e0:	462e      	mov	r6, r5
 80081e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80081ea:	f017 0708 	ands.w	r7, r7, #8
 80081ee:	d1f7      	bne.n	80081e0 <_strtol_l.constprop.0+0x20>
 80081f0:	2c2d      	cmp	r4, #45	; 0x2d
 80081f2:	d132      	bne.n	800825a <_strtol_l.constprop.0+0x9a>
 80081f4:	782c      	ldrb	r4, [r5, #0]
 80081f6:	2701      	movs	r7, #1
 80081f8:	1cb5      	adds	r5, r6, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d05b      	beq.n	80082b6 <_strtol_l.constprop.0+0xf6>
 80081fe:	2b10      	cmp	r3, #16
 8008200:	d109      	bne.n	8008216 <_strtol_l.constprop.0+0x56>
 8008202:	2c30      	cmp	r4, #48	; 0x30
 8008204:	d107      	bne.n	8008216 <_strtol_l.constprop.0+0x56>
 8008206:	782c      	ldrb	r4, [r5, #0]
 8008208:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800820c:	2c58      	cmp	r4, #88	; 0x58
 800820e:	d14d      	bne.n	80082ac <_strtol_l.constprop.0+0xec>
 8008210:	786c      	ldrb	r4, [r5, #1]
 8008212:	2310      	movs	r3, #16
 8008214:	3502      	adds	r5, #2
 8008216:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800821a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800821e:	f04f 0c00 	mov.w	ip, #0
 8008222:	fbb8 f9f3 	udiv	r9, r8, r3
 8008226:	4666      	mov	r6, ip
 8008228:	fb03 8a19 	mls	sl, r3, r9, r8
 800822c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008230:	f1be 0f09 	cmp.w	lr, #9
 8008234:	d816      	bhi.n	8008264 <_strtol_l.constprop.0+0xa4>
 8008236:	4674      	mov	r4, lr
 8008238:	42a3      	cmp	r3, r4
 800823a:	dd24      	ble.n	8008286 <_strtol_l.constprop.0+0xc6>
 800823c:	f1bc 0f00 	cmp.w	ip, #0
 8008240:	db1e      	blt.n	8008280 <_strtol_l.constprop.0+0xc0>
 8008242:	45b1      	cmp	r9, r6
 8008244:	d31c      	bcc.n	8008280 <_strtol_l.constprop.0+0xc0>
 8008246:	d101      	bne.n	800824c <_strtol_l.constprop.0+0x8c>
 8008248:	45a2      	cmp	sl, r4
 800824a:	db19      	blt.n	8008280 <_strtol_l.constprop.0+0xc0>
 800824c:	fb06 4603 	mla	r6, r6, r3, r4
 8008250:	f04f 0c01 	mov.w	ip, #1
 8008254:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008258:	e7e8      	b.n	800822c <_strtol_l.constprop.0+0x6c>
 800825a:	2c2b      	cmp	r4, #43	; 0x2b
 800825c:	bf04      	itt	eq
 800825e:	782c      	ldrbeq	r4, [r5, #0]
 8008260:	1cb5      	addeq	r5, r6, #2
 8008262:	e7ca      	b.n	80081fa <_strtol_l.constprop.0+0x3a>
 8008264:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008268:	f1be 0f19 	cmp.w	lr, #25
 800826c:	d801      	bhi.n	8008272 <_strtol_l.constprop.0+0xb2>
 800826e:	3c37      	subs	r4, #55	; 0x37
 8008270:	e7e2      	b.n	8008238 <_strtol_l.constprop.0+0x78>
 8008272:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008276:	f1be 0f19 	cmp.w	lr, #25
 800827a:	d804      	bhi.n	8008286 <_strtol_l.constprop.0+0xc6>
 800827c:	3c57      	subs	r4, #87	; 0x57
 800827e:	e7db      	b.n	8008238 <_strtol_l.constprop.0+0x78>
 8008280:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008284:	e7e6      	b.n	8008254 <_strtol_l.constprop.0+0x94>
 8008286:	f1bc 0f00 	cmp.w	ip, #0
 800828a:	da05      	bge.n	8008298 <_strtol_l.constprop.0+0xd8>
 800828c:	2322      	movs	r3, #34	; 0x22
 800828e:	6003      	str	r3, [r0, #0]
 8008290:	4646      	mov	r6, r8
 8008292:	b942      	cbnz	r2, 80082a6 <_strtol_l.constprop.0+0xe6>
 8008294:	4630      	mov	r0, r6
 8008296:	e79e      	b.n	80081d6 <_strtol_l.constprop.0+0x16>
 8008298:	b107      	cbz	r7, 800829c <_strtol_l.constprop.0+0xdc>
 800829a:	4276      	negs	r6, r6
 800829c:	2a00      	cmp	r2, #0
 800829e:	d0f9      	beq.n	8008294 <_strtol_l.constprop.0+0xd4>
 80082a0:	f1bc 0f00 	cmp.w	ip, #0
 80082a4:	d000      	beq.n	80082a8 <_strtol_l.constprop.0+0xe8>
 80082a6:	1e69      	subs	r1, r5, #1
 80082a8:	6011      	str	r1, [r2, #0]
 80082aa:	e7f3      	b.n	8008294 <_strtol_l.constprop.0+0xd4>
 80082ac:	2430      	movs	r4, #48	; 0x30
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1b1      	bne.n	8008216 <_strtol_l.constprop.0+0x56>
 80082b2:	2308      	movs	r3, #8
 80082b4:	e7af      	b.n	8008216 <_strtol_l.constprop.0+0x56>
 80082b6:	2c30      	cmp	r4, #48	; 0x30
 80082b8:	d0a5      	beq.n	8008206 <_strtol_l.constprop.0+0x46>
 80082ba:	230a      	movs	r3, #10
 80082bc:	e7ab      	b.n	8008216 <_strtol_l.constprop.0+0x56>
 80082be:	bf00      	nop
 80082c0:	0800a631 	.word	0x0800a631

080082c4 <strtol>:
 80082c4:	4613      	mov	r3, r2
 80082c6:	460a      	mov	r2, r1
 80082c8:	4601      	mov	r1, r0
 80082ca:	4802      	ldr	r0, [pc, #8]	; (80082d4 <strtol+0x10>)
 80082cc:	6800      	ldr	r0, [r0, #0]
 80082ce:	f7ff bf77 	b.w	80081c0 <_strtol_l.constprop.0>
 80082d2:	bf00      	nop
 80082d4:	20000010 	.word	0x20000010

080082d8 <_strtoull_l.constprop.0>:
 80082d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	4692      	mov	sl, r2
 80082de:	4a49      	ldr	r2, [pc, #292]	; (8008404 <_strtoull_l.constprop.0+0x12c>)
 80082e0:	9001      	str	r0, [sp, #4]
 80082e2:	4689      	mov	r9, r1
 80082e4:	461d      	mov	r5, r3
 80082e6:	460e      	mov	r6, r1
 80082e8:	4633      	mov	r3, r6
 80082ea:	f816 4b01 	ldrb.w	r4, [r6], #1
 80082ee:	5ca7      	ldrb	r7, [r4, r2]
 80082f0:	f017 0708 	ands.w	r7, r7, #8
 80082f4:	d1f8      	bne.n	80082e8 <_strtoull_l.constprop.0+0x10>
 80082f6:	2c2d      	cmp	r4, #45	; 0x2d
 80082f8:	d14a      	bne.n	8008390 <_strtoull_l.constprop.0+0xb8>
 80082fa:	7834      	ldrb	r4, [r6, #0]
 80082fc:	2701      	movs	r7, #1
 80082fe:	1c9e      	adds	r6, r3, #2
 8008300:	2d00      	cmp	r5, #0
 8008302:	d07b      	beq.n	80083fc <_strtoull_l.constprop.0+0x124>
 8008304:	2d10      	cmp	r5, #16
 8008306:	d109      	bne.n	800831c <_strtoull_l.constprop.0+0x44>
 8008308:	2c30      	cmp	r4, #48	; 0x30
 800830a:	d107      	bne.n	800831c <_strtoull_l.constprop.0+0x44>
 800830c:	7833      	ldrb	r3, [r6, #0]
 800830e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008312:	2b58      	cmp	r3, #88	; 0x58
 8008314:	d16d      	bne.n	80083f2 <_strtoull_l.constprop.0+0x11a>
 8008316:	7874      	ldrb	r4, [r6, #1]
 8008318:	2510      	movs	r5, #16
 800831a:	3602      	adds	r6, #2
 800831c:	ea4f 7be5 	mov.w	fp, r5, asr #31
 8008320:	462a      	mov	r2, r5
 8008322:	465b      	mov	r3, fp
 8008324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008328:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800832c:	f7f8 fcc4 	bl	8000cb8 <__aeabi_uldivmod>
 8008330:	462a      	mov	r2, r5
 8008332:	9000      	str	r0, [sp, #0]
 8008334:	4688      	mov	r8, r1
 8008336:	465b      	mov	r3, fp
 8008338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800833c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008340:	f7f8 fcba 	bl	8000cb8 <__aeabi_uldivmod>
 8008344:	2300      	movs	r3, #0
 8008346:	4618      	mov	r0, r3
 8008348:	4619      	mov	r1, r3
 800834a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800834e:	f1bc 0f09 	cmp.w	ip, #9
 8008352:	d822      	bhi.n	800839a <_strtoull_l.constprop.0+0xc2>
 8008354:	4664      	mov	r4, ip
 8008356:	42a5      	cmp	r5, r4
 8008358:	dd30      	ble.n	80083bc <_strtoull_l.constprop.0+0xe4>
 800835a:	2b00      	cmp	r3, #0
 800835c:	db2b      	blt.n	80083b6 <_strtoull_l.constprop.0+0xde>
 800835e:	9b00      	ldr	r3, [sp, #0]
 8008360:	4283      	cmp	r3, r0
 8008362:	eb78 0301 	sbcs.w	r3, r8, r1
 8008366:	d326      	bcc.n	80083b6 <_strtoull_l.constprop.0+0xde>
 8008368:	9b00      	ldr	r3, [sp, #0]
 800836a:	4588      	cmp	r8, r1
 800836c:	bf08      	it	eq
 800836e:	4283      	cmpeq	r3, r0
 8008370:	d101      	bne.n	8008376 <_strtoull_l.constprop.0+0x9e>
 8008372:	42a2      	cmp	r2, r4
 8008374:	db1f      	blt.n	80083b6 <_strtoull_l.constprop.0+0xde>
 8008376:	4369      	muls	r1, r5
 8008378:	fb00 110b 	mla	r1, r0, fp, r1
 800837c:	fba5 0300 	umull	r0, r3, r5, r0
 8008380:	4419      	add	r1, r3
 8008382:	1820      	adds	r0, r4, r0
 8008384:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8008388:	2301      	movs	r3, #1
 800838a:	f816 4b01 	ldrb.w	r4, [r6], #1
 800838e:	e7dc      	b.n	800834a <_strtoull_l.constprop.0+0x72>
 8008390:	2c2b      	cmp	r4, #43	; 0x2b
 8008392:	bf04      	itt	eq
 8008394:	7834      	ldrbeq	r4, [r6, #0]
 8008396:	1c9e      	addeq	r6, r3, #2
 8008398:	e7b2      	b.n	8008300 <_strtoull_l.constprop.0+0x28>
 800839a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800839e:	f1bc 0f19 	cmp.w	ip, #25
 80083a2:	d801      	bhi.n	80083a8 <_strtoull_l.constprop.0+0xd0>
 80083a4:	3c37      	subs	r4, #55	; 0x37
 80083a6:	e7d6      	b.n	8008356 <_strtoull_l.constprop.0+0x7e>
 80083a8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80083ac:	f1bc 0f19 	cmp.w	ip, #25
 80083b0:	d804      	bhi.n	80083bc <_strtoull_l.constprop.0+0xe4>
 80083b2:	3c57      	subs	r4, #87	; 0x57
 80083b4:	e7cf      	b.n	8008356 <_strtoull_l.constprop.0+0x7e>
 80083b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083ba:	e7e6      	b.n	800838a <_strtoull_l.constprop.0+0xb2>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	da0b      	bge.n	80083d8 <_strtoull_l.constprop.0+0x100>
 80083c0:	9a01      	ldr	r2, [sp, #4]
 80083c2:	2322      	movs	r3, #34	; 0x22
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	4601      	mov	r1, r0
 80083cc:	f1ba 0f00 	cmp.w	sl, #0
 80083d0:	d10a      	bne.n	80083e8 <_strtoull_l.constprop.0+0x110>
 80083d2:	b003      	add	sp, #12
 80083d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d8:	b117      	cbz	r7, 80083e0 <_strtoull_l.constprop.0+0x108>
 80083da:	4240      	negs	r0, r0
 80083dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80083e0:	f1ba 0f00 	cmp.w	sl, #0
 80083e4:	d0f5      	beq.n	80083d2 <_strtoull_l.constprop.0+0xfa>
 80083e6:	b10b      	cbz	r3, 80083ec <_strtoull_l.constprop.0+0x114>
 80083e8:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 80083ec:	f8ca 9000 	str.w	r9, [sl]
 80083f0:	e7ef      	b.n	80083d2 <_strtoull_l.constprop.0+0xfa>
 80083f2:	2430      	movs	r4, #48	; 0x30
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	d191      	bne.n	800831c <_strtoull_l.constprop.0+0x44>
 80083f8:	2508      	movs	r5, #8
 80083fa:	e78f      	b.n	800831c <_strtoull_l.constprop.0+0x44>
 80083fc:	2c30      	cmp	r4, #48	; 0x30
 80083fe:	d085      	beq.n	800830c <_strtoull_l.constprop.0+0x34>
 8008400:	250a      	movs	r5, #10
 8008402:	e78b      	b.n	800831c <_strtoull_l.constprop.0+0x44>
 8008404:	0800a631 	.word	0x0800a631

08008408 <strtoull>:
 8008408:	4613      	mov	r3, r2
 800840a:	460a      	mov	r2, r1
 800840c:	4601      	mov	r1, r0
 800840e:	4802      	ldr	r0, [pc, #8]	; (8008418 <strtoull+0x10>)
 8008410:	6800      	ldr	r0, [r0, #0]
 8008412:	f7ff bf61 	b.w	80082d8 <_strtoull_l.constprop.0>
 8008416:	bf00      	nop
 8008418:	20000010 	.word	0x20000010

0800841c <__swbuf_r>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	460e      	mov	r6, r1
 8008420:	4614      	mov	r4, r2
 8008422:	4605      	mov	r5, r0
 8008424:	b118      	cbz	r0, 800842e <__swbuf_r+0x12>
 8008426:	6983      	ldr	r3, [r0, #24]
 8008428:	b90b      	cbnz	r3, 800842e <__swbuf_r+0x12>
 800842a:	f7fe ff77 	bl	800731c <__sinit>
 800842e:	4b21      	ldr	r3, [pc, #132]	; (80084b4 <__swbuf_r+0x98>)
 8008430:	429c      	cmp	r4, r3
 8008432:	d12b      	bne.n	800848c <__swbuf_r+0x70>
 8008434:	686c      	ldr	r4, [r5, #4]
 8008436:	69a3      	ldr	r3, [r4, #24]
 8008438:	60a3      	str	r3, [r4, #8]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	071a      	lsls	r2, r3, #28
 800843e:	d52f      	bpl.n	80084a0 <__swbuf_r+0x84>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	b36b      	cbz	r3, 80084a0 <__swbuf_r+0x84>
 8008444:	6923      	ldr	r3, [r4, #16]
 8008446:	6820      	ldr	r0, [r4, #0]
 8008448:	1ac0      	subs	r0, r0, r3
 800844a:	6963      	ldr	r3, [r4, #20]
 800844c:	b2f6      	uxtb	r6, r6
 800844e:	4283      	cmp	r3, r0
 8008450:	4637      	mov	r7, r6
 8008452:	dc04      	bgt.n	800845e <__swbuf_r+0x42>
 8008454:	4621      	mov	r1, r4
 8008456:	4628      	mov	r0, r5
 8008458:	f7fe feba 	bl	80071d0 <_fflush_r>
 800845c:	bb30      	cbnz	r0, 80084ac <__swbuf_r+0x90>
 800845e:	68a3      	ldr	r3, [r4, #8]
 8008460:	3b01      	subs	r3, #1
 8008462:	60a3      	str	r3, [r4, #8]
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	6022      	str	r2, [r4, #0]
 800846a:	701e      	strb	r6, [r3, #0]
 800846c:	6963      	ldr	r3, [r4, #20]
 800846e:	3001      	adds	r0, #1
 8008470:	4283      	cmp	r3, r0
 8008472:	d004      	beq.n	800847e <__swbuf_r+0x62>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	07db      	lsls	r3, r3, #31
 8008478:	d506      	bpl.n	8008488 <__swbuf_r+0x6c>
 800847a:	2e0a      	cmp	r6, #10
 800847c:	d104      	bne.n	8008488 <__swbuf_r+0x6c>
 800847e:	4621      	mov	r1, r4
 8008480:	4628      	mov	r0, r5
 8008482:	f7fe fea5 	bl	80071d0 <_fflush_r>
 8008486:	b988      	cbnz	r0, 80084ac <__swbuf_r+0x90>
 8008488:	4638      	mov	r0, r7
 800848a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800848c:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <__swbuf_r+0x9c>)
 800848e:	429c      	cmp	r4, r3
 8008490:	d101      	bne.n	8008496 <__swbuf_r+0x7a>
 8008492:	68ac      	ldr	r4, [r5, #8]
 8008494:	e7cf      	b.n	8008436 <__swbuf_r+0x1a>
 8008496:	4b09      	ldr	r3, [pc, #36]	; (80084bc <__swbuf_r+0xa0>)
 8008498:	429c      	cmp	r4, r3
 800849a:	bf08      	it	eq
 800849c:	68ec      	ldreq	r4, [r5, #12]
 800849e:	e7ca      	b.n	8008436 <__swbuf_r+0x1a>
 80084a0:	4621      	mov	r1, r4
 80084a2:	4628      	mov	r0, r5
 80084a4:	f000 f81e 	bl	80084e4 <__swsetup_r>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d0cb      	beq.n	8008444 <__swbuf_r+0x28>
 80084ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80084b0:	e7ea      	b.n	8008488 <__swbuf_r+0x6c>
 80084b2:	bf00      	nop
 80084b4:	0800a5b8 	.word	0x0800a5b8
 80084b8:	0800a5d8 	.word	0x0800a5d8
 80084bc:	0800a598 	.word	0x0800a598

080084c0 <_write_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4d07      	ldr	r5, [pc, #28]	; (80084e0 <_write_r+0x20>)
 80084c4:	4604      	mov	r4, r0
 80084c6:	4608      	mov	r0, r1
 80084c8:	4611      	mov	r1, r2
 80084ca:	2200      	movs	r2, #0
 80084cc:	602a      	str	r2, [r5, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f7f8 ff02 	bl	80012d8 <_write>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_write_r+0x1e>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	b103      	cbz	r3, 80084de <_write_r+0x1e>
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	20001c60 	.word	0x20001c60

080084e4 <__swsetup_r>:
 80084e4:	4b32      	ldr	r3, [pc, #200]	; (80085b0 <__swsetup_r+0xcc>)
 80084e6:	b570      	push	{r4, r5, r6, lr}
 80084e8:	681d      	ldr	r5, [r3, #0]
 80084ea:	4606      	mov	r6, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	b125      	cbz	r5, 80084fa <__swsetup_r+0x16>
 80084f0:	69ab      	ldr	r3, [r5, #24]
 80084f2:	b913      	cbnz	r3, 80084fa <__swsetup_r+0x16>
 80084f4:	4628      	mov	r0, r5
 80084f6:	f7fe ff11 	bl	800731c <__sinit>
 80084fa:	4b2e      	ldr	r3, [pc, #184]	; (80085b4 <__swsetup_r+0xd0>)
 80084fc:	429c      	cmp	r4, r3
 80084fe:	d10f      	bne.n	8008520 <__swsetup_r+0x3c>
 8008500:	686c      	ldr	r4, [r5, #4]
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008508:	0719      	lsls	r1, r3, #28
 800850a:	d42c      	bmi.n	8008566 <__swsetup_r+0x82>
 800850c:	06dd      	lsls	r5, r3, #27
 800850e:	d411      	bmi.n	8008534 <__swsetup_r+0x50>
 8008510:	2309      	movs	r3, #9
 8008512:	6033      	str	r3, [r6, #0]
 8008514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800851e:	e03e      	b.n	800859e <__swsetup_r+0xba>
 8008520:	4b25      	ldr	r3, [pc, #148]	; (80085b8 <__swsetup_r+0xd4>)
 8008522:	429c      	cmp	r4, r3
 8008524:	d101      	bne.n	800852a <__swsetup_r+0x46>
 8008526:	68ac      	ldr	r4, [r5, #8]
 8008528:	e7eb      	b.n	8008502 <__swsetup_r+0x1e>
 800852a:	4b24      	ldr	r3, [pc, #144]	; (80085bc <__swsetup_r+0xd8>)
 800852c:	429c      	cmp	r4, r3
 800852e:	bf08      	it	eq
 8008530:	68ec      	ldreq	r4, [r5, #12]
 8008532:	e7e6      	b.n	8008502 <__swsetup_r+0x1e>
 8008534:	0758      	lsls	r0, r3, #29
 8008536:	d512      	bpl.n	800855e <__swsetup_r+0x7a>
 8008538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800853a:	b141      	cbz	r1, 800854e <__swsetup_r+0x6a>
 800853c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008540:	4299      	cmp	r1, r3
 8008542:	d002      	beq.n	800854a <__swsetup_r+0x66>
 8008544:	4630      	mov	r0, r6
 8008546:	f7fe ffc5 	bl	80074d4 <_free_r>
 800854a:	2300      	movs	r3, #0
 800854c:	6363      	str	r3, [r4, #52]	; 0x34
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	2300      	movs	r3, #0
 8008558:	6063      	str	r3, [r4, #4]
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f043 0308 	orr.w	r3, r3, #8
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	6923      	ldr	r3, [r4, #16]
 8008568:	b94b      	cbnz	r3, 800857e <__swsetup_r+0x9a>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008574:	d003      	beq.n	800857e <__swsetup_r+0x9a>
 8008576:	4621      	mov	r1, r4
 8008578:	4630      	mov	r0, r6
 800857a:	f000 fee7 	bl	800934c <__smakebuf_r>
 800857e:	89a0      	ldrh	r0, [r4, #12]
 8008580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008584:	f010 0301 	ands.w	r3, r0, #1
 8008588:	d00a      	beq.n	80085a0 <__swsetup_r+0xbc>
 800858a:	2300      	movs	r3, #0
 800858c:	60a3      	str	r3, [r4, #8]
 800858e:	6963      	ldr	r3, [r4, #20]
 8008590:	425b      	negs	r3, r3
 8008592:	61a3      	str	r3, [r4, #24]
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	b943      	cbnz	r3, 80085aa <__swsetup_r+0xc6>
 8008598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800859c:	d1ba      	bne.n	8008514 <__swsetup_r+0x30>
 800859e:	bd70      	pop	{r4, r5, r6, pc}
 80085a0:	0781      	lsls	r1, r0, #30
 80085a2:	bf58      	it	pl
 80085a4:	6963      	ldrpl	r3, [r4, #20]
 80085a6:	60a3      	str	r3, [r4, #8]
 80085a8:	e7f4      	b.n	8008594 <__swsetup_r+0xb0>
 80085aa:	2000      	movs	r0, #0
 80085ac:	e7f7      	b.n	800859e <__swsetup_r+0xba>
 80085ae:	bf00      	nop
 80085b0:	20000010 	.word	0x20000010
 80085b4:	0800a5b8 	.word	0x0800a5b8
 80085b8:	0800a5d8 	.word	0x0800a5d8
 80085bc:	0800a598 	.word	0x0800a598

080085c0 <_close_r>:
 80085c0:	b538      	push	{r3, r4, r5, lr}
 80085c2:	4d06      	ldr	r5, [pc, #24]	; (80085dc <_close_r+0x1c>)
 80085c4:	2300      	movs	r3, #0
 80085c6:	4604      	mov	r4, r0
 80085c8:	4608      	mov	r0, r1
 80085ca:	602b      	str	r3, [r5, #0]
 80085cc:	f7fa ffd3 	bl	8003576 <_close>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	d102      	bne.n	80085da <_close_r+0x1a>
 80085d4:	682b      	ldr	r3, [r5, #0]
 80085d6:	b103      	cbz	r3, 80085da <_close_r+0x1a>
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	bd38      	pop	{r3, r4, r5, pc}
 80085dc:	20001c60 	.word	0x20001c60

080085e0 <quorem>:
 80085e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	6903      	ldr	r3, [r0, #16]
 80085e6:	690c      	ldr	r4, [r1, #16]
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	4607      	mov	r7, r0
 80085ec:	f2c0 8081 	blt.w	80086f2 <quorem+0x112>
 80085f0:	3c01      	subs	r4, #1
 80085f2:	f101 0814 	add.w	r8, r1, #20
 80085f6:	f100 0514 	add.w	r5, r0, #20
 80085fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008608:	3301      	adds	r3, #1
 800860a:	429a      	cmp	r2, r3
 800860c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008614:	fbb2 f6f3 	udiv	r6, r2, r3
 8008618:	d331      	bcc.n	800867e <quorem+0x9e>
 800861a:	f04f 0e00 	mov.w	lr, #0
 800861e:	4640      	mov	r0, r8
 8008620:	46ac      	mov	ip, r5
 8008622:	46f2      	mov	sl, lr
 8008624:	f850 2b04 	ldr.w	r2, [r0], #4
 8008628:	b293      	uxth	r3, r2
 800862a:	fb06 e303 	mla	r3, r6, r3, lr
 800862e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008632:	b29b      	uxth	r3, r3
 8008634:	ebaa 0303 	sub.w	r3, sl, r3
 8008638:	f8dc a000 	ldr.w	sl, [ip]
 800863c:	0c12      	lsrs	r2, r2, #16
 800863e:	fa13 f38a 	uxtah	r3, r3, sl
 8008642:	fb06 e202 	mla	r2, r6, r2, lr
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	9b00      	ldr	r3, [sp, #0]
 800864a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800864e:	b292      	uxth	r2, r2
 8008650:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008658:	f8bd 3000 	ldrh.w	r3, [sp]
 800865c:	4581      	cmp	r9, r0
 800865e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008662:	f84c 3b04 	str.w	r3, [ip], #4
 8008666:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800866a:	d2db      	bcs.n	8008624 <quorem+0x44>
 800866c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008670:	b92b      	cbnz	r3, 800867e <quorem+0x9e>
 8008672:	9b01      	ldr	r3, [sp, #4]
 8008674:	3b04      	subs	r3, #4
 8008676:	429d      	cmp	r5, r3
 8008678:	461a      	mov	r2, r3
 800867a:	d32e      	bcc.n	80086da <quorem+0xfa>
 800867c:	613c      	str	r4, [r7, #16]
 800867e:	4638      	mov	r0, r7
 8008680:	f001 f93a 	bl	80098f8 <__mcmp>
 8008684:	2800      	cmp	r0, #0
 8008686:	db24      	blt.n	80086d2 <quorem+0xf2>
 8008688:	3601      	adds	r6, #1
 800868a:	4628      	mov	r0, r5
 800868c:	f04f 0c00 	mov.w	ip, #0
 8008690:	f858 2b04 	ldr.w	r2, [r8], #4
 8008694:	f8d0 e000 	ldr.w	lr, [r0]
 8008698:	b293      	uxth	r3, r2
 800869a:	ebac 0303 	sub.w	r3, ip, r3
 800869e:	0c12      	lsrs	r2, r2, #16
 80086a0:	fa13 f38e 	uxtah	r3, r3, lr
 80086a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086b2:	45c1      	cmp	r9, r8
 80086b4:	f840 3b04 	str.w	r3, [r0], #4
 80086b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086bc:	d2e8      	bcs.n	8008690 <quorem+0xb0>
 80086be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086c6:	b922      	cbnz	r2, 80086d2 <quorem+0xf2>
 80086c8:	3b04      	subs	r3, #4
 80086ca:	429d      	cmp	r5, r3
 80086cc:	461a      	mov	r2, r3
 80086ce:	d30a      	bcc.n	80086e6 <quorem+0x106>
 80086d0:	613c      	str	r4, [r7, #16]
 80086d2:	4630      	mov	r0, r6
 80086d4:	b003      	add	sp, #12
 80086d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086da:	6812      	ldr	r2, [r2, #0]
 80086dc:	3b04      	subs	r3, #4
 80086de:	2a00      	cmp	r2, #0
 80086e0:	d1cc      	bne.n	800867c <quorem+0x9c>
 80086e2:	3c01      	subs	r4, #1
 80086e4:	e7c7      	b.n	8008676 <quorem+0x96>
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	3b04      	subs	r3, #4
 80086ea:	2a00      	cmp	r2, #0
 80086ec:	d1f0      	bne.n	80086d0 <quorem+0xf0>
 80086ee:	3c01      	subs	r4, #1
 80086f0:	e7eb      	b.n	80086ca <quorem+0xea>
 80086f2:	2000      	movs	r0, #0
 80086f4:	e7ee      	b.n	80086d4 <quorem+0xf4>
	...

080086f8 <_dtoa_r>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	ed2d 8b04 	vpush	{d8-d9}
 8008700:	ec57 6b10 	vmov	r6, r7, d0
 8008704:	b093      	sub	sp, #76	; 0x4c
 8008706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008708:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800870c:	9106      	str	r1, [sp, #24]
 800870e:	ee10 aa10 	vmov	sl, s0
 8008712:	4604      	mov	r4, r0
 8008714:	9209      	str	r2, [sp, #36]	; 0x24
 8008716:	930c      	str	r3, [sp, #48]	; 0x30
 8008718:	46bb      	mov	fp, r7
 800871a:	b975      	cbnz	r5, 800873a <_dtoa_r+0x42>
 800871c:	2010      	movs	r0, #16
 800871e:	f000 fe55 	bl	80093cc <malloc>
 8008722:	4602      	mov	r2, r0
 8008724:	6260      	str	r0, [r4, #36]	; 0x24
 8008726:	b920      	cbnz	r0, 8008732 <_dtoa_r+0x3a>
 8008728:	4ba7      	ldr	r3, [pc, #668]	; (80089c8 <_dtoa_r+0x2d0>)
 800872a:	21ea      	movs	r1, #234	; 0xea
 800872c:	48a7      	ldr	r0, [pc, #668]	; (80089cc <_dtoa_r+0x2d4>)
 800872e:	f001 fcc3 	bl	800a0b8 <__assert_func>
 8008732:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008736:	6005      	str	r5, [r0, #0]
 8008738:	60c5      	str	r5, [r0, #12]
 800873a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800873c:	6819      	ldr	r1, [r3, #0]
 800873e:	b151      	cbz	r1, 8008756 <_dtoa_r+0x5e>
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	604a      	str	r2, [r1, #4]
 8008744:	2301      	movs	r3, #1
 8008746:	4093      	lsls	r3, r2
 8008748:	608b      	str	r3, [r1, #8]
 800874a:	4620      	mov	r0, r4
 800874c:	f000 fe92 	bl	8009474 <_Bfree>
 8008750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	1e3b      	subs	r3, r7, #0
 8008758:	bfaa      	itet	ge
 800875a:	2300      	movge	r3, #0
 800875c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008760:	f8c8 3000 	strge.w	r3, [r8]
 8008764:	4b9a      	ldr	r3, [pc, #616]	; (80089d0 <_dtoa_r+0x2d8>)
 8008766:	bfbc      	itt	lt
 8008768:	2201      	movlt	r2, #1
 800876a:	f8c8 2000 	strlt.w	r2, [r8]
 800876e:	ea33 030b 	bics.w	r3, r3, fp
 8008772:	d11b      	bne.n	80087ac <_dtoa_r+0xb4>
 8008774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008776:	f242 730f 	movw	r3, #9999	; 0x270f
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008780:	4333      	orrs	r3, r6
 8008782:	f000 8592 	beq.w	80092aa <_dtoa_r+0xbb2>
 8008786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008788:	b963      	cbnz	r3, 80087a4 <_dtoa_r+0xac>
 800878a:	4b92      	ldr	r3, [pc, #584]	; (80089d4 <_dtoa_r+0x2dc>)
 800878c:	e022      	b.n	80087d4 <_dtoa_r+0xdc>
 800878e:	4b92      	ldr	r3, [pc, #584]	; (80089d8 <_dtoa_r+0x2e0>)
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	3308      	adds	r3, #8
 8008794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	9801      	ldr	r0, [sp, #4]
 800879a:	b013      	add	sp, #76	; 0x4c
 800879c:	ecbd 8b04 	vpop	{d8-d9}
 80087a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a4:	4b8b      	ldr	r3, [pc, #556]	; (80089d4 <_dtoa_r+0x2dc>)
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	3303      	adds	r3, #3
 80087aa:	e7f3      	b.n	8008794 <_dtoa_r+0x9c>
 80087ac:	2200      	movs	r2, #0
 80087ae:	2300      	movs	r3, #0
 80087b0:	4650      	mov	r0, sl
 80087b2:	4659      	mov	r1, fp
 80087b4:	f7f8 f9a0 	bl	8000af8 <__aeabi_dcmpeq>
 80087b8:	ec4b ab19 	vmov	d9, sl, fp
 80087bc:	4680      	mov	r8, r0
 80087be:	b158      	cbz	r0, 80087d8 <_dtoa_r+0xe0>
 80087c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087c2:	2301      	movs	r3, #1
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 856b 	beq.w	80092a4 <_dtoa_r+0xbac>
 80087ce:	4883      	ldr	r0, [pc, #524]	; (80089dc <_dtoa_r+0x2e4>)
 80087d0:	6018      	str	r0, [r3, #0]
 80087d2:	1e43      	subs	r3, r0, #1
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	e7df      	b.n	8008798 <_dtoa_r+0xa0>
 80087d8:	ec4b ab10 	vmov	d0, sl, fp
 80087dc:	aa10      	add	r2, sp, #64	; 0x40
 80087de:	a911      	add	r1, sp, #68	; 0x44
 80087e0:	4620      	mov	r0, r4
 80087e2:	f001 f92f 	bl	8009a44 <__d2b>
 80087e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80087ea:	ee08 0a10 	vmov	s16, r0
 80087ee:	2d00      	cmp	r5, #0
 80087f0:	f000 8084 	beq.w	80088fc <_dtoa_r+0x204>
 80087f4:	ee19 3a90 	vmov	r3, s19
 80087f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008800:	4656      	mov	r6, sl
 8008802:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800880a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800880e:	4b74      	ldr	r3, [pc, #464]	; (80089e0 <_dtoa_r+0x2e8>)
 8008810:	2200      	movs	r2, #0
 8008812:	4630      	mov	r0, r6
 8008814:	4639      	mov	r1, r7
 8008816:	f7f7 fd4f 	bl	80002b8 <__aeabi_dsub>
 800881a:	a365      	add	r3, pc, #404	; (adr r3, 80089b0 <_dtoa_r+0x2b8>)
 800881c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008820:	f7f7 ff02 	bl	8000628 <__aeabi_dmul>
 8008824:	a364      	add	r3, pc, #400	; (adr r3, 80089b8 <_dtoa_r+0x2c0>)
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	f7f7 fd47 	bl	80002bc <__adddf3>
 800882e:	4606      	mov	r6, r0
 8008830:	4628      	mov	r0, r5
 8008832:	460f      	mov	r7, r1
 8008834:	f7f7 fe8e 	bl	8000554 <__aeabi_i2d>
 8008838:	a361      	add	r3, pc, #388	; (adr r3, 80089c0 <_dtoa_r+0x2c8>)
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	f7f7 fef3 	bl	8000628 <__aeabi_dmul>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4630      	mov	r0, r6
 8008848:	4639      	mov	r1, r7
 800884a:	f7f7 fd37 	bl	80002bc <__adddf3>
 800884e:	4606      	mov	r6, r0
 8008850:	460f      	mov	r7, r1
 8008852:	f7f8 f999 	bl	8000b88 <__aeabi_d2iz>
 8008856:	2200      	movs	r2, #0
 8008858:	9000      	str	r0, [sp, #0]
 800885a:	2300      	movs	r3, #0
 800885c:	4630      	mov	r0, r6
 800885e:	4639      	mov	r1, r7
 8008860:	f7f8 f954 	bl	8000b0c <__aeabi_dcmplt>
 8008864:	b150      	cbz	r0, 800887c <_dtoa_r+0x184>
 8008866:	9800      	ldr	r0, [sp, #0]
 8008868:	f7f7 fe74 	bl	8000554 <__aeabi_i2d>
 800886c:	4632      	mov	r2, r6
 800886e:	463b      	mov	r3, r7
 8008870:	f7f8 f942 	bl	8000af8 <__aeabi_dcmpeq>
 8008874:	b910      	cbnz	r0, 800887c <_dtoa_r+0x184>
 8008876:	9b00      	ldr	r3, [sp, #0]
 8008878:	3b01      	subs	r3, #1
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	9b00      	ldr	r3, [sp, #0]
 800887e:	2b16      	cmp	r3, #22
 8008880:	d85a      	bhi.n	8008938 <_dtoa_r+0x240>
 8008882:	9a00      	ldr	r2, [sp, #0]
 8008884:	4b57      	ldr	r3, [pc, #348]	; (80089e4 <_dtoa_r+0x2ec>)
 8008886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	ec51 0b19 	vmov	r0, r1, d9
 8008892:	f7f8 f93b 	bl	8000b0c <__aeabi_dcmplt>
 8008896:	2800      	cmp	r0, #0
 8008898:	d050      	beq.n	800893c <_dtoa_r+0x244>
 800889a:	9b00      	ldr	r3, [sp, #0]
 800889c:	3b01      	subs	r3, #1
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	2300      	movs	r3, #0
 80088a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80088a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088a6:	1b5d      	subs	r5, r3, r5
 80088a8:	1e6b      	subs	r3, r5, #1
 80088aa:	9305      	str	r3, [sp, #20]
 80088ac:	bf45      	ittet	mi
 80088ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80088b2:	9304      	strmi	r3, [sp, #16]
 80088b4:	2300      	movpl	r3, #0
 80088b6:	2300      	movmi	r3, #0
 80088b8:	bf4c      	ite	mi
 80088ba:	9305      	strmi	r3, [sp, #20]
 80088bc:	9304      	strpl	r3, [sp, #16]
 80088be:	9b00      	ldr	r3, [sp, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	db3d      	blt.n	8008940 <_dtoa_r+0x248>
 80088c4:	9b05      	ldr	r3, [sp, #20]
 80088c6:	9a00      	ldr	r2, [sp, #0]
 80088c8:	920a      	str	r2, [sp, #40]	; 0x28
 80088ca:	4413      	add	r3, r2
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	2300      	movs	r3, #0
 80088d0:	9307      	str	r3, [sp, #28]
 80088d2:	9b06      	ldr	r3, [sp, #24]
 80088d4:	2b09      	cmp	r3, #9
 80088d6:	f200 8089 	bhi.w	80089ec <_dtoa_r+0x2f4>
 80088da:	2b05      	cmp	r3, #5
 80088dc:	bfc4      	itt	gt
 80088de:	3b04      	subgt	r3, #4
 80088e0:	9306      	strgt	r3, [sp, #24]
 80088e2:	9b06      	ldr	r3, [sp, #24]
 80088e4:	f1a3 0302 	sub.w	r3, r3, #2
 80088e8:	bfcc      	ite	gt
 80088ea:	2500      	movgt	r5, #0
 80088ec:	2501      	movle	r5, #1
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	f200 8087 	bhi.w	8008a02 <_dtoa_r+0x30a>
 80088f4:	e8df f003 	tbb	[pc, r3]
 80088f8:	59383a2d 	.word	0x59383a2d
 80088fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008900:	441d      	add	r5, r3
 8008902:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008906:	2b20      	cmp	r3, #32
 8008908:	bfc1      	itttt	gt
 800890a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800890e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008912:	fa0b f303 	lslgt.w	r3, fp, r3
 8008916:	fa26 f000 	lsrgt.w	r0, r6, r0
 800891a:	bfda      	itte	le
 800891c:	f1c3 0320 	rsble	r3, r3, #32
 8008920:	fa06 f003 	lslle.w	r0, r6, r3
 8008924:	4318      	orrgt	r0, r3
 8008926:	f7f7 fe05 	bl	8000534 <__aeabi_ui2d>
 800892a:	2301      	movs	r3, #1
 800892c:	4606      	mov	r6, r0
 800892e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008932:	3d01      	subs	r5, #1
 8008934:	930e      	str	r3, [sp, #56]	; 0x38
 8008936:	e76a      	b.n	800880e <_dtoa_r+0x116>
 8008938:	2301      	movs	r3, #1
 800893a:	e7b2      	b.n	80088a2 <_dtoa_r+0x1aa>
 800893c:	900b      	str	r0, [sp, #44]	; 0x2c
 800893e:	e7b1      	b.n	80088a4 <_dtoa_r+0x1ac>
 8008940:	9b04      	ldr	r3, [sp, #16]
 8008942:	9a00      	ldr	r2, [sp, #0]
 8008944:	1a9b      	subs	r3, r3, r2
 8008946:	9304      	str	r3, [sp, #16]
 8008948:	4253      	negs	r3, r2
 800894a:	9307      	str	r3, [sp, #28]
 800894c:	2300      	movs	r3, #0
 800894e:	930a      	str	r3, [sp, #40]	; 0x28
 8008950:	e7bf      	b.n	80088d2 <_dtoa_r+0x1da>
 8008952:	2300      	movs	r3, #0
 8008954:	9308      	str	r3, [sp, #32]
 8008956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008958:	2b00      	cmp	r3, #0
 800895a:	dc55      	bgt.n	8008a08 <_dtoa_r+0x310>
 800895c:	2301      	movs	r3, #1
 800895e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008962:	461a      	mov	r2, r3
 8008964:	9209      	str	r2, [sp, #36]	; 0x24
 8008966:	e00c      	b.n	8008982 <_dtoa_r+0x28a>
 8008968:	2301      	movs	r3, #1
 800896a:	e7f3      	b.n	8008954 <_dtoa_r+0x25c>
 800896c:	2300      	movs	r3, #0
 800896e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008970:	9308      	str	r3, [sp, #32]
 8008972:	9b00      	ldr	r3, [sp, #0]
 8008974:	4413      	add	r3, r2
 8008976:	9302      	str	r3, [sp, #8]
 8008978:	3301      	adds	r3, #1
 800897a:	2b01      	cmp	r3, #1
 800897c:	9303      	str	r3, [sp, #12]
 800897e:	bfb8      	it	lt
 8008980:	2301      	movlt	r3, #1
 8008982:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008984:	2200      	movs	r2, #0
 8008986:	6042      	str	r2, [r0, #4]
 8008988:	2204      	movs	r2, #4
 800898a:	f102 0614 	add.w	r6, r2, #20
 800898e:	429e      	cmp	r6, r3
 8008990:	6841      	ldr	r1, [r0, #4]
 8008992:	d93d      	bls.n	8008a10 <_dtoa_r+0x318>
 8008994:	4620      	mov	r0, r4
 8008996:	f000 fd2d 	bl	80093f4 <_Balloc>
 800899a:	9001      	str	r0, [sp, #4]
 800899c:	2800      	cmp	r0, #0
 800899e:	d13b      	bne.n	8008a18 <_dtoa_r+0x320>
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <_dtoa_r+0x2f0>)
 80089a2:	4602      	mov	r2, r0
 80089a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089a8:	e6c0      	b.n	800872c <_dtoa_r+0x34>
 80089aa:	2301      	movs	r3, #1
 80089ac:	e7df      	b.n	800896e <_dtoa_r+0x276>
 80089ae:	bf00      	nop
 80089b0:	636f4361 	.word	0x636f4361
 80089b4:	3fd287a7 	.word	0x3fd287a7
 80089b8:	8b60c8b3 	.word	0x8b60c8b3
 80089bc:	3fc68a28 	.word	0x3fc68a28
 80089c0:	509f79fb 	.word	0x509f79fb
 80089c4:	3fd34413 	.word	0x3fd34413
 80089c8:	0800a73e 	.word	0x0800a73e
 80089cc:	0800a755 	.word	0x0800a755
 80089d0:	7ff00000 	.word	0x7ff00000
 80089d4:	0800a73a 	.word	0x0800a73a
 80089d8:	0800a731 	.word	0x0800a731
 80089dc:	0800a60d 	.word	0x0800a60d
 80089e0:	3ff80000 	.word	0x3ff80000
 80089e4:	0800a848 	.word	0x0800a848
 80089e8:	0800a7b0 	.word	0x0800a7b0
 80089ec:	2501      	movs	r5, #1
 80089ee:	2300      	movs	r3, #0
 80089f0:	9306      	str	r3, [sp, #24]
 80089f2:	9508      	str	r5, [sp, #32]
 80089f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80089fc:	2200      	movs	r2, #0
 80089fe:	2312      	movs	r3, #18
 8008a00:	e7b0      	b.n	8008964 <_dtoa_r+0x26c>
 8008a02:	2301      	movs	r3, #1
 8008a04:	9308      	str	r3, [sp, #32]
 8008a06:	e7f5      	b.n	80089f4 <_dtoa_r+0x2fc>
 8008a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008a0e:	e7b8      	b.n	8008982 <_dtoa_r+0x28a>
 8008a10:	3101      	adds	r1, #1
 8008a12:	6041      	str	r1, [r0, #4]
 8008a14:	0052      	lsls	r2, r2, #1
 8008a16:	e7b8      	b.n	800898a <_dtoa_r+0x292>
 8008a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a1a:	9a01      	ldr	r2, [sp, #4]
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	2b0e      	cmp	r3, #14
 8008a22:	f200 809d 	bhi.w	8008b60 <_dtoa_r+0x468>
 8008a26:	2d00      	cmp	r5, #0
 8008a28:	f000 809a 	beq.w	8008b60 <_dtoa_r+0x468>
 8008a2c:	9b00      	ldr	r3, [sp, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	dd32      	ble.n	8008a98 <_dtoa_r+0x3a0>
 8008a32:	4ab7      	ldr	r2, [pc, #732]	; (8008d10 <_dtoa_r+0x618>)
 8008a34:	f003 030f 	and.w	r3, r3, #15
 8008a38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a40:	9b00      	ldr	r3, [sp, #0]
 8008a42:	05d8      	lsls	r0, r3, #23
 8008a44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008a48:	d516      	bpl.n	8008a78 <_dtoa_r+0x380>
 8008a4a:	4bb2      	ldr	r3, [pc, #712]	; (8008d14 <_dtoa_r+0x61c>)
 8008a4c:	ec51 0b19 	vmov	r0, r1, d9
 8008a50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a54:	f7f7 ff12 	bl	800087c <__aeabi_ddiv>
 8008a58:	f007 070f 	and.w	r7, r7, #15
 8008a5c:	4682      	mov	sl, r0
 8008a5e:	468b      	mov	fp, r1
 8008a60:	2503      	movs	r5, #3
 8008a62:	4eac      	ldr	r6, [pc, #688]	; (8008d14 <_dtoa_r+0x61c>)
 8008a64:	b957      	cbnz	r7, 8008a7c <_dtoa_r+0x384>
 8008a66:	4642      	mov	r2, r8
 8008a68:	464b      	mov	r3, r9
 8008a6a:	4650      	mov	r0, sl
 8008a6c:	4659      	mov	r1, fp
 8008a6e:	f7f7 ff05 	bl	800087c <__aeabi_ddiv>
 8008a72:	4682      	mov	sl, r0
 8008a74:	468b      	mov	fp, r1
 8008a76:	e028      	b.n	8008aca <_dtoa_r+0x3d2>
 8008a78:	2502      	movs	r5, #2
 8008a7a:	e7f2      	b.n	8008a62 <_dtoa_r+0x36a>
 8008a7c:	07f9      	lsls	r1, r7, #31
 8008a7e:	d508      	bpl.n	8008a92 <_dtoa_r+0x39a>
 8008a80:	4640      	mov	r0, r8
 8008a82:	4649      	mov	r1, r9
 8008a84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a88:	f7f7 fdce 	bl	8000628 <__aeabi_dmul>
 8008a8c:	3501      	adds	r5, #1
 8008a8e:	4680      	mov	r8, r0
 8008a90:	4689      	mov	r9, r1
 8008a92:	107f      	asrs	r7, r7, #1
 8008a94:	3608      	adds	r6, #8
 8008a96:	e7e5      	b.n	8008a64 <_dtoa_r+0x36c>
 8008a98:	f000 809b 	beq.w	8008bd2 <_dtoa_r+0x4da>
 8008a9c:	9b00      	ldr	r3, [sp, #0]
 8008a9e:	4f9d      	ldr	r7, [pc, #628]	; (8008d14 <_dtoa_r+0x61c>)
 8008aa0:	425e      	negs	r6, r3
 8008aa2:	4b9b      	ldr	r3, [pc, #620]	; (8008d10 <_dtoa_r+0x618>)
 8008aa4:	f006 020f 	and.w	r2, r6, #15
 8008aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	ec51 0b19 	vmov	r0, r1, d9
 8008ab4:	f7f7 fdb8 	bl	8000628 <__aeabi_dmul>
 8008ab8:	1136      	asrs	r6, r6, #4
 8008aba:	4682      	mov	sl, r0
 8008abc:	468b      	mov	fp, r1
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2502      	movs	r5, #2
 8008ac2:	2e00      	cmp	r6, #0
 8008ac4:	d17a      	bne.n	8008bbc <_dtoa_r+0x4c4>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1d3      	bne.n	8008a72 <_dtoa_r+0x37a>
 8008aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 8082 	beq.w	8008bd6 <_dtoa_r+0x4de>
 8008ad2:	4b91      	ldr	r3, [pc, #580]	; (8008d18 <_dtoa_r+0x620>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4650      	mov	r0, sl
 8008ad8:	4659      	mov	r1, fp
 8008ada:	f7f8 f817 	bl	8000b0c <__aeabi_dcmplt>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d079      	beq.n	8008bd6 <_dtoa_r+0x4de>
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d076      	beq.n	8008bd6 <_dtoa_r+0x4de>
 8008ae8:	9b02      	ldr	r3, [sp, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd36      	ble.n	8008b5c <_dtoa_r+0x464>
 8008aee:	9b00      	ldr	r3, [sp, #0]
 8008af0:	4650      	mov	r0, sl
 8008af2:	4659      	mov	r1, fp
 8008af4:	1e5f      	subs	r7, r3, #1
 8008af6:	2200      	movs	r2, #0
 8008af8:	4b88      	ldr	r3, [pc, #544]	; (8008d1c <_dtoa_r+0x624>)
 8008afa:	f7f7 fd95 	bl	8000628 <__aeabi_dmul>
 8008afe:	9e02      	ldr	r6, [sp, #8]
 8008b00:	4682      	mov	sl, r0
 8008b02:	468b      	mov	fp, r1
 8008b04:	3501      	adds	r5, #1
 8008b06:	4628      	mov	r0, r5
 8008b08:	f7f7 fd24 	bl	8000554 <__aeabi_i2d>
 8008b0c:	4652      	mov	r2, sl
 8008b0e:	465b      	mov	r3, fp
 8008b10:	f7f7 fd8a 	bl	8000628 <__aeabi_dmul>
 8008b14:	4b82      	ldr	r3, [pc, #520]	; (8008d20 <_dtoa_r+0x628>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	f7f7 fbd0 	bl	80002bc <__adddf3>
 8008b1c:	46d0      	mov	r8, sl
 8008b1e:	46d9      	mov	r9, fp
 8008b20:	4682      	mov	sl, r0
 8008b22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008b26:	2e00      	cmp	r6, #0
 8008b28:	d158      	bne.n	8008bdc <_dtoa_r+0x4e4>
 8008b2a:	4b7e      	ldr	r3, [pc, #504]	; (8008d24 <_dtoa_r+0x62c>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	4640      	mov	r0, r8
 8008b30:	4649      	mov	r1, r9
 8008b32:	f7f7 fbc1 	bl	80002b8 <__aeabi_dsub>
 8008b36:	4652      	mov	r2, sl
 8008b38:	465b      	mov	r3, fp
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	4689      	mov	r9, r1
 8008b3e:	f7f8 f803 	bl	8000b48 <__aeabi_dcmpgt>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	f040 8295 	bne.w	8009072 <_dtoa_r+0x97a>
 8008b48:	4652      	mov	r2, sl
 8008b4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b4e:	4640      	mov	r0, r8
 8008b50:	4649      	mov	r1, r9
 8008b52:	f7f7 ffdb 	bl	8000b0c <__aeabi_dcmplt>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	f040 8289 	bne.w	800906e <_dtoa_r+0x976>
 8008b5c:	ec5b ab19 	vmov	sl, fp, d9
 8008b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f2c0 8148 	blt.w	8008df8 <_dtoa_r+0x700>
 8008b68:	9a00      	ldr	r2, [sp, #0]
 8008b6a:	2a0e      	cmp	r2, #14
 8008b6c:	f300 8144 	bgt.w	8008df8 <_dtoa_r+0x700>
 8008b70:	4b67      	ldr	r3, [pc, #412]	; (8008d10 <_dtoa_r+0x618>)
 8008b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f280 80d5 	bge.w	8008d2c <_dtoa_r+0x634>
 8008b82:	9b03      	ldr	r3, [sp, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f300 80d1 	bgt.w	8008d2c <_dtoa_r+0x634>
 8008b8a:	f040 826f 	bne.w	800906c <_dtoa_r+0x974>
 8008b8e:	4b65      	ldr	r3, [pc, #404]	; (8008d24 <_dtoa_r+0x62c>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	4640      	mov	r0, r8
 8008b94:	4649      	mov	r1, r9
 8008b96:	f7f7 fd47 	bl	8000628 <__aeabi_dmul>
 8008b9a:	4652      	mov	r2, sl
 8008b9c:	465b      	mov	r3, fp
 8008b9e:	f7f7 ffc9 	bl	8000b34 <__aeabi_dcmpge>
 8008ba2:	9e03      	ldr	r6, [sp, #12]
 8008ba4:	4637      	mov	r7, r6
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f040 8245 	bne.w	8009036 <_dtoa_r+0x93e>
 8008bac:	9d01      	ldr	r5, [sp, #4]
 8008bae:	2331      	movs	r3, #49	; 0x31
 8008bb0:	f805 3b01 	strb.w	r3, [r5], #1
 8008bb4:	9b00      	ldr	r3, [sp, #0]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	e240      	b.n	800903e <_dtoa_r+0x946>
 8008bbc:	07f2      	lsls	r2, r6, #31
 8008bbe:	d505      	bpl.n	8008bcc <_dtoa_r+0x4d4>
 8008bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bc4:	f7f7 fd30 	bl	8000628 <__aeabi_dmul>
 8008bc8:	3501      	adds	r5, #1
 8008bca:	2301      	movs	r3, #1
 8008bcc:	1076      	asrs	r6, r6, #1
 8008bce:	3708      	adds	r7, #8
 8008bd0:	e777      	b.n	8008ac2 <_dtoa_r+0x3ca>
 8008bd2:	2502      	movs	r5, #2
 8008bd4:	e779      	b.n	8008aca <_dtoa_r+0x3d2>
 8008bd6:	9f00      	ldr	r7, [sp, #0]
 8008bd8:	9e03      	ldr	r6, [sp, #12]
 8008bda:	e794      	b.n	8008b06 <_dtoa_r+0x40e>
 8008bdc:	9901      	ldr	r1, [sp, #4]
 8008bde:	4b4c      	ldr	r3, [pc, #304]	; (8008d10 <_dtoa_r+0x618>)
 8008be0:	4431      	add	r1, r6
 8008be2:	910d      	str	r1, [sp, #52]	; 0x34
 8008be4:	9908      	ldr	r1, [sp, #32]
 8008be6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008bea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bee:	2900      	cmp	r1, #0
 8008bf0:	d043      	beq.n	8008c7a <_dtoa_r+0x582>
 8008bf2:	494d      	ldr	r1, [pc, #308]	; (8008d28 <_dtoa_r+0x630>)
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	f7f7 fe41 	bl	800087c <__aeabi_ddiv>
 8008bfa:	4652      	mov	r2, sl
 8008bfc:	465b      	mov	r3, fp
 8008bfe:	f7f7 fb5b 	bl	80002b8 <__aeabi_dsub>
 8008c02:	9d01      	ldr	r5, [sp, #4]
 8008c04:	4682      	mov	sl, r0
 8008c06:	468b      	mov	fp, r1
 8008c08:	4649      	mov	r1, r9
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	f7f7 ffbc 	bl	8000b88 <__aeabi_d2iz>
 8008c10:	4606      	mov	r6, r0
 8008c12:	f7f7 fc9f 	bl	8000554 <__aeabi_i2d>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	f7f7 fb4b 	bl	80002b8 <__aeabi_dsub>
 8008c22:	3630      	adds	r6, #48	; 0x30
 8008c24:	f805 6b01 	strb.w	r6, [r5], #1
 8008c28:	4652      	mov	r2, sl
 8008c2a:	465b      	mov	r3, fp
 8008c2c:	4680      	mov	r8, r0
 8008c2e:	4689      	mov	r9, r1
 8008c30:	f7f7 ff6c 	bl	8000b0c <__aeabi_dcmplt>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d163      	bne.n	8008d00 <_dtoa_r+0x608>
 8008c38:	4642      	mov	r2, r8
 8008c3a:	464b      	mov	r3, r9
 8008c3c:	4936      	ldr	r1, [pc, #216]	; (8008d18 <_dtoa_r+0x620>)
 8008c3e:	2000      	movs	r0, #0
 8008c40:	f7f7 fb3a 	bl	80002b8 <__aeabi_dsub>
 8008c44:	4652      	mov	r2, sl
 8008c46:	465b      	mov	r3, fp
 8008c48:	f7f7 ff60 	bl	8000b0c <__aeabi_dcmplt>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	f040 80b5 	bne.w	8008dbc <_dtoa_r+0x6c4>
 8008c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c54:	429d      	cmp	r5, r3
 8008c56:	d081      	beq.n	8008b5c <_dtoa_r+0x464>
 8008c58:	4b30      	ldr	r3, [pc, #192]	; (8008d1c <_dtoa_r+0x624>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	4650      	mov	r0, sl
 8008c5e:	4659      	mov	r1, fp
 8008c60:	f7f7 fce2 	bl	8000628 <__aeabi_dmul>
 8008c64:	4b2d      	ldr	r3, [pc, #180]	; (8008d1c <_dtoa_r+0x624>)
 8008c66:	4682      	mov	sl, r0
 8008c68:	468b      	mov	fp, r1
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f7f7 fcda 	bl	8000628 <__aeabi_dmul>
 8008c74:	4680      	mov	r8, r0
 8008c76:	4689      	mov	r9, r1
 8008c78:	e7c6      	b.n	8008c08 <_dtoa_r+0x510>
 8008c7a:	4650      	mov	r0, sl
 8008c7c:	4659      	mov	r1, fp
 8008c7e:	f7f7 fcd3 	bl	8000628 <__aeabi_dmul>
 8008c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c84:	9d01      	ldr	r5, [sp, #4]
 8008c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c88:	4682      	mov	sl, r0
 8008c8a:	468b      	mov	fp, r1
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	4640      	mov	r0, r8
 8008c90:	f7f7 ff7a 	bl	8000b88 <__aeabi_d2iz>
 8008c94:	4606      	mov	r6, r0
 8008c96:	f7f7 fc5d 	bl	8000554 <__aeabi_i2d>
 8008c9a:	3630      	adds	r6, #48	; 0x30
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7f7 fb08 	bl	80002b8 <__aeabi_dsub>
 8008ca8:	f805 6b01 	strb.w	r6, [r5], #1
 8008cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cae:	429d      	cmp	r5, r3
 8008cb0:	4680      	mov	r8, r0
 8008cb2:	4689      	mov	r9, r1
 8008cb4:	f04f 0200 	mov.w	r2, #0
 8008cb8:	d124      	bne.n	8008d04 <_dtoa_r+0x60c>
 8008cba:	4b1b      	ldr	r3, [pc, #108]	; (8008d28 <_dtoa_r+0x630>)
 8008cbc:	4650      	mov	r0, sl
 8008cbe:	4659      	mov	r1, fp
 8008cc0:	f7f7 fafc 	bl	80002bc <__adddf3>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4640      	mov	r0, r8
 8008cca:	4649      	mov	r1, r9
 8008ccc:	f7f7 ff3c 	bl	8000b48 <__aeabi_dcmpgt>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d173      	bne.n	8008dbc <_dtoa_r+0x6c4>
 8008cd4:	4652      	mov	r2, sl
 8008cd6:	465b      	mov	r3, fp
 8008cd8:	4913      	ldr	r1, [pc, #76]	; (8008d28 <_dtoa_r+0x630>)
 8008cda:	2000      	movs	r0, #0
 8008cdc:	f7f7 faec 	bl	80002b8 <__aeabi_dsub>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	f7f7 ff10 	bl	8000b0c <__aeabi_dcmplt>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	f43f af35 	beq.w	8008b5c <_dtoa_r+0x464>
 8008cf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008cf4:	1e6b      	subs	r3, r5, #1
 8008cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cfc:	2b30      	cmp	r3, #48	; 0x30
 8008cfe:	d0f8      	beq.n	8008cf2 <_dtoa_r+0x5fa>
 8008d00:	9700      	str	r7, [sp, #0]
 8008d02:	e049      	b.n	8008d98 <_dtoa_r+0x6a0>
 8008d04:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <_dtoa_r+0x624>)
 8008d06:	f7f7 fc8f 	bl	8000628 <__aeabi_dmul>
 8008d0a:	4680      	mov	r8, r0
 8008d0c:	4689      	mov	r9, r1
 8008d0e:	e7bd      	b.n	8008c8c <_dtoa_r+0x594>
 8008d10:	0800a848 	.word	0x0800a848
 8008d14:	0800a820 	.word	0x0800a820
 8008d18:	3ff00000 	.word	0x3ff00000
 8008d1c:	40240000 	.word	0x40240000
 8008d20:	401c0000 	.word	0x401c0000
 8008d24:	40140000 	.word	0x40140000
 8008d28:	3fe00000 	.word	0x3fe00000
 8008d2c:	9d01      	ldr	r5, [sp, #4]
 8008d2e:	4656      	mov	r6, sl
 8008d30:	465f      	mov	r7, fp
 8008d32:	4642      	mov	r2, r8
 8008d34:	464b      	mov	r3, r9
 8008d36:	4630      	mov	r0, r6
 8008d38:	4639      	mov	r1, r7
 8008d3a:	f7f7 fd9f 	bl	800087c <__aeabi_ddiv>
 8008d3e:	f7f7 ff23 	bl	8000b88 <__aeabi_d2iz>
 8008d42:	4682      	mov	sl, r0
 8008d44:	f7f7 fc06 	bl	8000554 <__aeabi_i2d>
 8008d48:	4642      	mov	r2, r8
 8008d4a:	464b      	mov	r3, r9
 8008d4c:	f7f7 fc6c 	bl	8000628 <__aeabi_dmul>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4630      	mov	r0, r6
 8008d56:	4639      	mov	r1, r7
 8008d58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008d5c:	f7f7 faac 	bl	80002b8 <__aeabi_dsub>
 8008d60:	f805 6b01 	strb.w	r6, [r5], #1
 8008d64:	9e01      	ldr	r6, [sp, #4]
 8008d66:	9f03      	ldr	r7, [sp, #12]
 8008d68:	1bae      	subs	r6, r5, r6
 8008d6a:	42b7      	cmp	r7, r6
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	d135      	bne.n	8008dde <_dtoa_r+0x6e6>
 8008d72:	f7f7 faa3 	bl	80002bc <__adddf3>
 8008d76:	4642      	mov	r2, r8
 8008d78:	464b      	mov	r3, r9
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	460f      	mov	r7, r1
 8008d7e:	f7f7 fee3 	bl	8000b48 <__aeabi_dcmpgt>
 8008d82:	b9d0      	cbnz	r0, 8008dba <_dtoa_r+0x6c2>
 8008d84:	4642      	mov	r2, r8
 8008d86:	464b      	mov	r3, r9
 8008d88:	4630      	mov	r0, r6
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f7 feb4 	bl	8000af8 <__aeabi_dcmpeq>
 8008d90:	b110      	cbz	r0, 8008d98 <_dtoa_r+0x6a0>
 8008d92:	f01a 0f01 	tst.w	sl, #1
 8008d96:	d110      	bne.n	8008dba <_dtoa_r+0x6c2>
 8008d98:	4620      	mov	r0, r4
 8008d9a:	ee18 1a10 	vmov	r1, s16
 8008d9e:	f000 fb69 	bl	8009474 <_Bfree>
 8008da2:	2300      	movs	r3, #0
 8008da4:	9800      	ldr	r0, [sp, #0]
 8008da6:	702b      	strb	r3, [r5, #0]
 8008da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008daa:	3001      	adds	r0, #1
 8008dac:	6018      	str	r0, [r3, #0]
 8008dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f43f acf1 	beq.w	8008798 <_dtoa_r+0xa0>
 8008db6:	601d      	str	r5, [r3, #0]
 8008db8:	e4ee      	b.n	8008798 <_dtoa_r+0xa0>
 8008dba:	9f00      	ldr	r7, [sp, #0]
 8008dbc:	462b      	mov	r3, r5
 8008dbe:	461d      	mov	r5, r3
 8008dc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dc4:	2a39      	cmp	r2, #57	; 0x39
 8008dc6:	d106      	bne.n	8008dd6 <_dtoa_r+0x6de>
 8008dc8:	9a01      	ldr	r2, [sp, #4]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d1f7      	bne.n	8008dbe <_dtoa_r+0x6c6>
 8008dce:	9901      	ldr	r1, [sp, #4]
 8008dd0:	2230      	movs	r2, #48	; 0x30
 8008dd2:	3701      	adds	r7, #1
 8008dd4:	700a      	strb	r2, [r1, #0]
 8008dd6:	781a      	ldrb	r2, [r3, #0]
 8008dd8:	3201      	adds	r2, #1
 8008dda:	701a      	strb	r2, [r3, #0]
 8008ddc:	e790      	b.n	8008d00 <_dtoa_r+0x608>
 8008dde:	4ba6      	ldr	r3, [pc, #664]	; (8009078 <_dtoa_r+0x980>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	f7f7 fc21 	bl	8000628 <__aeabi_dmul>
 8008de6:	2200      	movs	r2, #0
 8008de8:	2300      	movs	r3, #0
 8008dea:	4606      	mov	r6, r0
 8008dec:	460f      	mov	r7, r1
 8008dee:	f7f7 fe83 	bl	8000af8 <__aeabi_dcmpeq>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d09d      	beq.n	8008d32 <_dtoa_r+0x63a>
 8008df6:	e7cf      	b.n	8008d98 <_dtoa_r+0x6a0>
 8008df8:	9a08      	ldr	r2, [sp, #32]
 8008dfa:	2a00      	cmp	r2, #0
 8008dfc:	f000 80d7 	beq.w	8008fae <_dtoa_r+0x8b6>
 8008e00:	9a06      	ldr	r2, [sp, #24]
 8008e02:	2a01      	cmp	r2, #1
 8008e04:	f300 80ba 	bgt.w	8008f7c <_dtoa_r+0x884>
 8008e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e0a:	2a00      	cmp	r2, #0
 8008e0c:	f000 80b2 	beq.w	8008f74 <_dtoa_r+0x87c>
 8008e10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e14:	9e07      	ldr	r6, [sp, #28]
 8008e16:	9d04      	ldr	r5, [sp, #16]
 8008e18:	9a04      	ldr	r2, [sp, #16]
 8008e1a:	441a      	add	r2, r3
 8008e1c:	9204      	str	r2, [sp, #16]
 8008e1e:	9a05      	ldr	r2, [sp, #20]
 8008e20:	2101      	movs	r1, #1
 8008e22:	441a      	add	r2, r3
 8008e24:	4620      	mov	r0, r4
 8008e26:	9205      	str	r2, [sp, #20]
 8008e28:	f000 fbdc 	bl	80095e4 <__i2b>
 8008e2c:	4607      	mov	r7, r0
 8008e2e:	2d00      	cmp	r5, #0
 8008e30:	dd0c      	ble.n	8008e4c <_dtoa_r+0x754>
 8008e32:	9b05      	ldr	r3, [sp, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	dd09      	ble.n	8008e4c <_dtoa_r+0x754>
 8008e38:	42ab      	cmp	r3, r5
 8008e3a:	9a04      	ldr	r2, [sp, #16]
 8008e3c:	bfa8      	it	ge
 8008e3e:	462b      	movge	r3, r5
 8008e40:	1ad2      	subs	r2, r2, r3
 8008e42:	9204      	str	r2, [sp, #16]
 8008e44:	9a05      	ldr	r2, [sp, #20]
 8008e46:	1aed      	subs	r5, r5, r3
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	9305      	str	r3, [sp, #20]
 8008e4c:	9b07      	ldr	r3, [sp, #28]
 8008e4e:	b31b      	cbz	r3, 8008e98 <_dtoa_r+0x7a0>
 8008e50:	9b08      	ldr	r3, [sp, #32]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 80af 	beq.w	8008fb6 <_dtoa_r+0x8be>
 8008e58:	2e00      	cmp	r6, #0
 8008e5a:	dd13      	ble.n	8008e84 <_dtoa_r+0x78c>
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	4632      	mov	r2, r6
 8008e60:	4620      	mov	r0, r4
 8008e62:	f000 fc7f 	bl	8009764 <__pow5mult>
 8008e66:	ee18 2a10 	vmov	r2, s16
 8008e6a:	4601      	mov	r1, r0
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 fbce 	bl	8009610 <__multiply>
 8008e74:	ee18 1a10 	vmov	r1, s16
 8008e78:	4680      	mov	r8, r0
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 fafa 	bl	8009474 <_Bfree>
 8008e80:	ee08 8a10 	vmov	s16, r8
 8008e84:	9b07      	ldr	r3, [sp, #28]
 8008e86:	1b9a      	subs	r2, r3, r6
 8008e88:	d006      	beq.n	8008e98 <_dtoa_r+0x7a0>
 8008e8a:	ee18 1a10 	vmov	r1, s16
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fc68 	bl	8009764 <__pow5mult>
 8008e94:	ee08 0a10 	vmov	s16, r0
 8008e98:	2101      	movs	r1, #1
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 fba2 	bl	80095e4 <__i2b>
 8008ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	f340 8088 	ble.w	8008fba <_dtoa_r+0x8c2>
 8008eaa:	461a      	mov	r2, r3
 8008eac:	4601      	mov	r1, r0
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f000 fc58 	bl	8009764 <__pow5mult>
 8008eb4:	9b06      	ldr	r3, [sp, #24]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	4606      	mov	r6, r0
 8008eba:	f340 8081 	ble.w	8008fc0 <_dtoa_r+0x8c8>
 8008ebe:	f04f 0800 	mov.w	r8, #0
 8008ec2:	6933      	ldr	r3, [r6, #16]
 8008ec4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ec8:	6918      	ldr	r0, [r3, #16]
 8008eca:	f000 fb3b 	bl	8009544 <__hi0bits>
 8008ece:	f1c0 0020 	rsb	r0, r0, #32
 8008ed2:	9b05      	ldr	r3, [sp, #20]
 8008ed4:	4418      	add	r0, r3
 8008ed6:	f010 001f 	ands.w	r0, r0, #31
 8008eda:	f000 8092 	beq.w	8009002 <_dtoa_r+0x90a>
 8008ede:	f1c0 0320 	rsb	r3, r0, #32
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	f340 808a 	ble.w	8008ffc <_dtoa_r+0x904>
 8008ee8:	f1c0 001c 	rsb	r0, r0, #28
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	4403      	add	r3, r0
 8008ef0:	9304      	str	r3, [sp, #16]
 8008ef2:	9b05      	ldr	r3, [sp, #20]
 8008ef4:	4403      	add	r3, r0
 8008ef6:	4405      	add	r5, r0
 8008ef8:	9305      	str	r3, [sp, #20]
 8008efa:	9b04      	ldr	r3, [sp, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dd07      	ble.n	8008f10 <_dtoa_r+0x818>
 8008f00:	ee18 1a10 	vmov	r1, s16
 8008f04:	461a      	mov	r2, r3
 8008f06:	4620      	mov	r0, r4
 8008f08:	f000 fc86 	bl	8009818 <__lshift>
 8008f0c:	ee08 0a10 	vmov	s16, r0
 8008f10:	9b05      	ldr	r3, [sp, #20]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	dd05      	ble.n	8008f22 <_dtoa_r+0x82a>
 8008f16:	4631      	mov	r1, r6
 8008f18:	461a      	mov	r2, r3
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 fc7c 	bl	8009818 <__lshift>
 8008f20:	4606      	mov	r6, r0
 8008f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d06e      	beq.n	8009006 <_dtoa_r+0x90e>
 8008f28:	ee18 0a10 	vmov	r0, s16
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	f000 fce3 	bl	80098f8 <__mcmp>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	da67      	bge.n	8009006 <_dtoa_r+0x90e>
 8008f36:	9b00      	ldr	r3, [sp, #0]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	ee18 1a10 	vmov	r1, s16
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	220a      	movs	r2, #10
 8008f42:	2300      	movs	r3, #0
 8008f44:	4620      	mov	r0, r4
 8008f46:	f000 fab7 	bl	80094b8 <__multadd>
 8008f4a:	9b08      	ldr	r3, [sp, #32]
 8008f4c:	ee08 0a10 	vmov	s16, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 81b1 	beq.w	80092b8 <_dtoa_r+0xbc0>
 8008f56:	2300      	movs	r3, #0
 8008f58:	4639      	mov	r1, r7
 8008f5a:	220a      	movs	r2, #10
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f000 faab 	bl	80094b8 <__multadd>
 8008f62:	9b02      	ldr	r3, [sp, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	4607      	mov	r7, r0
 8008f68:	f300 808e 	bgt.w	8009088 <_dtoa_r+0x990>
 8008f6c:	9b06      	ldr	r3, [sp, #24]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	dc51      	bgt.n	8009016 <_dtoa_r+0x91e>
 8008f72:	e089      	b.n	8009088 <_dtoa_r+0x990>
 8008f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f7a:	e74b      	b.n	8008e14 <_dtoa_r+0x71c>
 8008f7c:	9b03      	ldr	r3, [sp, #12]
 8008f7e:	1e5e      	subs	r6, r3, #1
 8008f80:	9b07      	ldr	r3, [sp, #28]
 8008f82:	42b3      	cmp	r3, r6
 8008f84:	bfbf      	itttt	lt
 8008f86:	9b07      	ldrlt	r3, [sp, #28]
 8008f88:	9607      	strlt	r6, [sp, #28]
 8008f8a:	1af2      	sublt	r2, r6, r3
 8008f8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008f8e:	bfb6      	itet	lt
 8008f90:	189b      	addlt	r3, r3, r2
 8008f92:	1b9e      	subge	r6, r3, r6
 8008f94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	bfb8      	it	lt
 8008f9a:	2600      	movlt	r6, #0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	bfb7      	itett	lt
 8008fa0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008fa4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008fa8:	1a9d      	sublt	r5, r3, r2
 8008faa:	2300      	movlt	r3, #0
 8008fac:	e734      	b.n	8008e18 <_dtoa_r+0x720>
 8008fae:	9e07      	ldr	r6, [sp, #28]
 8008fb0:	9d04      	ldr	r5, [sp, #16]
 8008fb2:	9f08      	ldr	r7, [sp, #32]
 8008fb4:	e73b      	b.n	8008e2e <_dtoa_r+0x736>
 8008fb6:	9a07      	ldr	r2, [sp, #28]
 8008fb8:	e767      	b.n	8008e8a <_dtoa_r+0x792>
 8008fba:	9b06      	ldr	r3, [sp, #24]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	dc18      	bgt.n	8008ff2 <_dtoa_r+0x8fa>
 8008fc0:	f1ba 0f00 	cmp.w	sl, #0
 8008fc4:	d115      	bne.n	8008ff2 <_dtoa_r+0x8fa>
 8008fc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fca:	b993      	cbnz	r3, 8008ff2 <_dtoa_r+0x8fa>
 8008fcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008fd0:	0d1b      	lsrs	r3, r3, #20
 8008fd2:	051b      	lsls	r3, r3, #20
 8008fd4:	b183      	cbz	r3, 8008ff8 <_dtoa_r+0x900>
 8008fd6:	9b04      	ldr	r3, [sp, #16]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	9b05      	ldr	r3, [sp, #20]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	9305      	str	r3, [sp, #20]
 8008fe2:	f04f 0801 	mov.w	r8, #1
 8008fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f47f af6a 	bne.w	8008ec2 <_dtoa_r+0x7ca>
 8008fee:	2001      	movs	r0, #1
 8008ff0:	e76f      	b.n	8008ed2 <_dtoa_r+0x7da>
 8008ff2:	f04f 0800 	mov.w	r8, #0
 8008ff6:	e7f6      	b.n	8008fe6 <_dtoa_r+0x8ee>
 8008ff8:	4698      	mov	r8, r3
 8008ffa:	e7f4      	b.n	8008fe6 <_dtoa_r+0x8ee>
 8008ffc:	f43f af7d 	beq.w	8008efa <_dtoa_r+0x802>
 8009000:	4618      	mov	r0, r3
 8009002:	301c      	adds	r0, #28
 8009004:	e772      	b.n	8008eec <_dtoa_r+0x7f4>
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	dc37      	bgt.n	800907c <_dtoa_r+0x984>
 800900c:	9b06      	ldr	r3, [sp, #24]
 800900e:	2b02      	cmp	r3, #2
 8009010:	dd34      	ble.n	800907c <_dtoa_r+0x984>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	9302      	str	r3, [sp, #8]
 8009016:	9b02      	ldr	r3, [sp, #8]
 8009018:	b96b      	cbnz	r3, 8009036 <_dtoa_r+0x93e>
 800901a:	4631      	mov	r1, r6
 800901c:	2205      	movs	r2, #5
 800901e:	4620      	mov	r0, r4
 8009020:	f000 fa4a 	bl	80094b8 <__multadd>
 8009024:	4601      	mov	r1, r0
 8009026:	4606      	mov	r6, r0
 8009028:	ee18 0a10 	vmov	r0, s16
 800902c:	f000 fc64 	bl	80098f8 <__mcmp>
 8009030:	2800      	cmp	r0, #0
 8009032:	f73f adbb 	bgt.w	8008bac <_dtoa_r+0x4b4>
 8009036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009038:	9d01      	ldr	r5, [sp, #4]
 800903a:	43db      	mvns	r3, r3
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	f04f 0800 	mov.w	r8, #0
 8009042:	4631      	mov	r1, r6
 8009044:	4620      	mov	r0, r4
 8009046:	f000 fa15 	bl	8009474 <_Bfree>
 800904a:	2f00      	cmp	r7, #0
 800904c:	f43f aea4 	beq.w	8008d98 <_dtoa_r+0x6a0>
 8009050:	f1b8 0f00 	cmp.w	r8, #0
 8009054:	d005      	beq.n	8009062 <_dtoa_r+0x96a>
 8009056:	45b8      	cmp	r8, r7
 8009058:	d003      	beq.n	8009062 <_dtoa_r+0x96a>
 800905a:	4641      	mov	r1, r8
 800905c:	4620      	mov	r0, r4
 800905e:	f000 fa09 	bl	8009474 <_Bfree>
 8009062:	4639      	mov	r1, r7
 8009064:	4620      	mov	r0, r4
 8009066:	f000 fa05 	bl	8009474 <_Bfree>
 800906a:	e695      	b.n	8008d98 <_dtoa_r+0x6a0>
 800906c:	2600      	movs	r6, #0
 800906e:	4637      	mov	r7, r6
 8009070:	e7e1      	b.n	8009036 <_dtoa_r+0x93e>
 8009072:	9700      	str	r7, [sp, #0]
 8009074:	4637      	mov	r7, r6
 8009076:	e599      	b.n	8008bac <_dtoa_r+0x4b4>
 8009078:	40240000 	.word	0x40240000
 800907c:	9b08      	ldr	r3, [sp, #32]
 800907e:	2b00      	cmp	r3, #0
 8009080:	f000 80ca 	beq.w	8009218 <_dtoa_r+0xb20>
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	9302      	str	r3, [sp, #8]
 8009088:	2d00      	cmp	r5, #0
 800908a:	dd05      	ble.n	8009098 <_dtoa_r+0x9a0>
 800908c:	4639      	mov	r1, r7
 800908e:	462a      	mov	r2, r5
 8009090:	4620      	mov	r0, r4
 8009092:	f000 fbc1 	bl	8009818 <__lshift>
 8009096:	4607      	mov	r7, r0
 8009098:	f1b8 0f00 	cmp.w	r8, #0
 800909c:	d05b      	beq.n	8009156 <_dtoa_r+0xa5e>
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 f9a7 	bl	80093f4 <_Balloc>
 80090a6:	4605      	mov	r5, r0
 80090a8:	b928      	cbnz	r0, 80090b6 <_dtoa_r+0x9be>
 80090aa:	4b87      	ldr	r3, [pc, #540]	; (80092c8 <_dtoa_r+0xbd0>)
 80090ac:	4602      	mov	r2, r0
 80090ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090b2:	f7ff bb3b 	b.w	800872c <_dtoa_r+0x34>
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	3202      	adds	r2, #2
 80090ba:	0092      	lsls	r2, r2, #2
 80090bc:	f107 010c 	add.w	r1, r7, #12
 80090c0:	300c      	adds	r0, #12
 80090c2:	f7fe f9f0 	bl	80074a6 <memcpy>
 80090c6:	2201      	movs	r2, #1
 80090c8:	4629      	mov	r1, r5
 80090ca:	4620      	mov	r0, r4
 80090cc:	f000 fba4 	bl	8009818 <__lshift>
 80090d0:	9b01      	ldr	r3, [sp, #4]
 80090d2:	f103 0901 	add.w	r9, r3, #1
 80090d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80090da:	4413      	add	r3, r2
 80090dc:	9305      	str	r3, [sp, #20]
 80090de:	f00a 0301 	and.w	r3, sl, #1
 80090e2:	46b8      	mov	r8, r7
 80090e4:	9304      	str	r3, [sp, #16]
 80090e6:	4607      	mov	r7, r0
 80090e8:	4631      	mov	r1, r6
 80090ea:	ee18 0a10 	vmov	r0, s16
 80090ee:	f7ff fa77 	bl	80085e0 <quorem>
 80090f2:	4641      	mov	r1, r8
 80090f4:	9002      	str	r0, [sp, #8]
 80090f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80090fa:	ee18 0a10 	vmov	r0, s16
 80090fe:	f000 fbfb 	bl	80098f8 <__mcmp>
 8009102:	463a      	mov	r2, r7
 8009104:	9003      	str	r0, [sp, #12]
 8009106:	4631      	mov	r1, r6
 8009108:	4620      	mov	r0, r4
 800910a:	f000 fc11 	bl	8009930 <__mdiff>
 800910e:	68c2      	ldr	r2, [r0, #12]
 8009110:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009114:	4605      	mov	r5, r0
 8009116:	bb02      	cbnz	r2, 800915a <_dtoa_r+0xa62>
 8009118:	4601      	mov	r1, r0
 800911a:	ee18 0a10 	vmov	r0, s16
 800911e:	f000 fbeb 	bl	80098f8 <__mcmp>
 8009122:	4602      	mov	r2, r0
 8009124:	4629      	mov	r1, r5
 8009126:	4620      	mov	r0, r4
 8009128:	9207      	str	r2, [sp, #28]
 800912a:	f000 f9a3 	bl	8009474 <_Bfree>
 800912e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009132:	ea43 0102 	orr.w	r1, r3, r2
 8009136:	9b04      	ldr	r3, [sp, #16]
 8009138:	430b      	orrs	r3, r1
 800913a:	464d      	mov	r5, r9
 800913c:	d10f      	bne.n	800915e <_dtoa_r+0xa66>
 800913e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009142:	d02a      	beq.n	800919a <_dtoa_r+0xaa2>
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	dd02      	ble.n	8009150 <_dtoa_r+0xa58>
 800914a:	9b02      	ldr	r3, [sp, #8]
 800914c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009150:	f88b a000 	strb.w	sl, [fp]
 8009154:	e775      	b.n	8009042 <_dtoa_r+0x94a>
 8009156:	4638      	mov	r0, r7
 8009158:	e7ba      	b.n	80090d0 <_dtoa_r+0x9d8>
 800915a:	2201      	movs	r2, #1
 800915c:	e7e2      	b.n	8009124 <_dtoa_r+0xa2c>
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	db04      	blt.n	800916e <_dtoa_r+0xa76>
 8009164:	9906      	ldr	r1, [sp, #24]
 8009166:	430b      	orrs	r3, r1
 8009168:	9904      	ldr	r1, [sp, #16]
 800916a:	430b      	orrs	r3, r1
 800916c:	d122      	bne.n	80091b4 <_dtoa_r+0xabc>
 800916e:	2a00      	cmp	r2, #0
 8009170:	ddee      	ble.n	8009150 <_dtoa_r+0xa58>
 8009172:	ee18 1a10 	vmov	r1, s16
 8009176:	2201      	movs	r2, #1
 8009178:	4620      	mov	r0, r4
 800917a:	f000 fb4d 	bl	8009818 <__lshift>
 800917e:	4631      	mov	r1, r6
 8009180:	ee08 0a10 	vmov	s16, r0
 8009184:	f000 fbb8 	bl	80098f8 <__mcmp>
 8009188:	2800      	cmp	r0, #0
 800918a:	dc03      	bgt.n	8009194 <_dtoa_r+0xa9c>
 800918c:	d1e0      	bne.n	8009150 <_dtoa_r+0xa58>
 800918e:	f01a 0f01 	tst.w	sl, #1
 8009192:	d0dd      	beq.n	8009150 <_dtoa_r+0xa58>
 8009194:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009198:	d1d7      	bne.n	800914a <_dtoa_r+0xa52>
 800919a:	2339      	movs	r3, #57	; 0x39
 800919c:	f88b 3000 	strb.w	r3, [fp]
 80091a0:	462b      	mov	r3, r5
 80091a2:	461d      	mov	r5, r3
 80091a4:	3b01      	subs	r3, #1
 80091a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091aa:	2a39      	cmp	r2, #57	; 0x39
 80091ac:	d071      	beq.n	8009292 <_dtoa_r+0xb9a>
 80091ae:	3201      	adds	r2, #1
 80091b0:	701a      	strb	r2, [r3, #0]
 80091b2:	e746      	b.n	8009042 <_dtoa_r+0x94a>
 80091b4:	2a00      	cmp	r2, #0
 80091b6:	dd07      	ble.n	80091c8 <_dtoa_r+0xad0>
 80091b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80091bc:	d0ed      	beq.n	800919a <_dtoa_r+0xaa2>
 80091be:	f10a 0301 	add.w	r3, sl, #1
 80091c2:	f88b 3000 	strb.w	r3, [fp]
 80091c6:	e73c      	b.n	8009042 <_dtoa_r+0x94a>
 80091c8:	9b05      	ldr	r3, [sp, #20]
 80091ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80091ce:	4599      	cmp	r9, r3
 80091d0:	d047      	beq.n	8009262 <_dtoa_r+0xb6a>
 80091d2:	ee18 1a10 	vmov	r1, s16
 80091d6:	2300      	movs	r3, #0
 80091d8:	220a      	movs	r2, #10
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 f96c 	bl	80094b8 <__multadd>
 80091e0:	45b8      	cmp	r8, r7
 80091e2:	ee08 0a10 	vmov	s16, r0
 80091e6:	f04f 0300 	mov.w	r3, #0
 80091ea:	f04f 020a 	mov.w	r2, #10
 80091ee:	4641      	mov	r1, r8
 80091f0:	4620      	mov	r0, r4
 80091f2:	d106      	bne.n	8009202 <_dtoa_r+0xb0a>
 80091f4:	f000 f960 	bl	80094b8 <__multadd>
 80091f8:	4680      	mov	r8, r0
 80091fa:	4607      	mov	r7, r0
 80091fc:	f109 0901 	add.w	r9, r9, #1
 8009200:	e772      	b.n	80090e8 <_dtoa_r+0x9f0>
 8009202:	f000 f959 	bl	80094b8 <__multadd>
 8009206:	4639      	mov	r1, r7
 8009208:	4680      	mov	r8, r0
 800920a:	2300      	movs	r3, #0
 800920c:	220a      	movs	r2, #10
 800920e:	4620      	mov	r0, r4
 8009210:	f000 f952 	bl	80094b8 <__multadd>
 8009214:	4607      	mov	r7, r0
 8009216:	e7f1      	b.n	80091fc <_dtoa_r+0xb04>
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	9302      	str	r3, [sp, #8]
 800921c:	9d01      	ldr	r5, [sp, #4]
 800921e:	ee18 0a10 	vmov	r0, s16
 8009222:	4631      	mov	r1, r6
 8009224:	f7ff f9dc 	bl	80085e0 <quorem>
 8009228:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800922c:	9b01      	ldr	r3, [sp, #4]
 800922e:	f805 ab01 	strb.w	sl, [r5], #1
 8009232:	1aea      	subs	r2, r5, r3
 8009234:	9b02      	ldr	r3, [sp, #8]
 8009236:	4293      	cmp	r3, r2
 8009238:	dd09      	ble.n	800924e <_dtoa_r+0xb56>
 800923a:	ee18 1a10 	vmov	r1, s16
 800923e:	2300      	movs	r3, #0
 8009240:	220a      	movs	r2, #10
 8009242:	4620      	mov	r0, r4
 8009244:	f000 f938 	bl	80094b8 <__multadd>
 8009248:	ee08 0a10 	vmov	s16, r0
 800924c:	e7e7      	b.n	800921e <_dtoa_r+0xb26>
 800924e:	9b02      	ldr	r3, [sp, #8]
 8009250:	2b00      	cmp	r3, #0
 8009252:	bfc8      	it	gt
 8009254:	461d      	movgt	r5, r3
 8009256:	9b01      	ldr	r3, [sp, #4]
 8009258:	bfd8      	it	le
 800925a:	2501      	movle	r5, #1
 800925c:	441d      	add	r5, r3
 800925e:	f04f 0800 	mov.w	r8, #0
 8009262:	ee18 1a10 	vmov	r1, s16
 8009266:	2201      	movs	r2, #1
 8009268:	4620      	mov	r0, r4
 800926a:	f000 fad5 	bl	8009818 <__lshift>
 800926e:	4631      	mov	r1, r6
 8009270:	ee08 0a10 	vmov	s16, r0
 8009274:	f000 fb40 	bl	80098f8 <__mcmp>
 8009278:	2800      	cmp	r0, #0
 800927a:	dc91      	bgt.n	80091a0 <_dtoa_r+0xaa8>
 800927c:	d102      	bne.n	8009284 <_dtoa_r+0xb8c>
 800927e:	f01a 0f01 	tst.w	sl, #1
 8009282:	d18d      	bne.n	80091a0 <_dtoa_r+0xaa8>
 8009284:	462b      	mov	r3, r5
 8009286:	461d      	mov	r5, r3
 8009288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800928c:	2a30      	cmp	r2, #48	; 0x30
 800928e:	d0fa      	beq.n	8009286 <_dtoa_r+0xb8e>
 8009290:	e6d7      	b.n	8009042 <_dtoa_r+0x94a>
 8009292:	9a01      	ldr	r2, [sp, #4]
 8009294:	429a      	cmp	r2, r3
 8009296:	d184      	bne.n	80091a2 <_dtoa_r+0xaaa>
 8009298:	9b00      	ldr	r3, [sp, #0]
 800929a:	3301      	adds	r3, #1
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	2331      	movs	r3, #49	; 0x31
 80092a0:	7013      	strb	r3, [r2, #0]
 80092a2:	e6ce      	b.n	8009042 <_dtoa_r+0x94a>
 80092a4:	4b09      	ldr	r3, [pc, #36]	; (80092cc <_dtoa_r+0xbd4>)
 80092a6:	f7ff ba95 	b.w	80087d4 <_dtoa_r+0xdc>
 80092aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f47f aa6e 	bne.w	800878e <_dtoa_r+0x96>
 80092b2:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <_dtoa_r+0xbd8>)
 80092b4:	f7ff ba8e 	b.w	80087d4 <_dtoa_r+0xdc>
 80092b8:	9b02      	ldr	r3, [sp, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dcae      	bgt.n	800921c <_dtoa_r+0xb24>
 80092be:	9b06      	ldr	r3, [sp, #24]
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	f73f aea8 	bgt.w	8009016 <_dtoa_r+0x91e>
 80092c6:	e7a9      	b.n	800921c <_dtoa_r+0xb24>
 80092c8:	0800a7b0 	.word	0x0800a7b0
 80092cc:	0800a60c 	.word	0x0800a60c
 80092d0:	0800a731 	.word	0x0800a731

080092d4 <_localeconv_r>:
 80092d4:	4800      	ldr	r0, [pc, #0]	; (80092d8 <_localeconv_r+0x4>)
 80092d6:	4770      	bx	lr
 80092d8:	20000164 	.word	0x20000164

080092dc <_lseek_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4d07      	ldr	r5, [pc, #28]	; (80092fc <_lseek_r+0x20>)
 80092e0:	4604      	mov	r4, r0
 80092e2:	4608      	mov	r0, r1
 80092e4:	4611      	mov	r1, r2
 80092e6:	2200      	movs	r2, #0
 80092e8:	602a      	str	r2, [r5, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	f7fa f96a 	bl	80035c4 <_lseek>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_lseek_r+0x1e>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_lseek_r+0x1e>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	20001c60 	.word	0x20001c60

08009300 <__swhatbuf_r>:
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	460e      	mov	r6, r1
 8009304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009308:	2900      	cmp	r1, #0
 800930a:	b096      	sub	sp, #88	; 0x58
 800930c:	4614      	mov	r4, r2
 800930e:	461d      	mov	r5, r3
 8009310:	da08      	bge.n	8009324 <__swhatbuf_r+0x24>
 8009312:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	602a      	str	r2, [r5, #0]
 800931a:	061a      	lsls	r2, r3, #24
 800931c:	d410      	bmi.n	8009340 <__swhatbuf_r+0x40>
 800931e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009322:	e00e      	b.n	8009342 <__swhatbuf_r+0x42>
 8009324:	466a      	mov	r2, sp
 8009326:	f000 fef7 	bl	800a118 <_fstat_r>
 800932a:	2800      	cmp	r0, #0
 800932c:	dbf1      	blt.n	8009312 <__swhatbuf_r+0x12>
 800932e:	9a01      	ldr	r2, [sp, #4]
 8009330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009338:	425a      	negs	r2, r3
 800933a:	415a      	adcs	r2, r3
 800933c:	602a      	str	r2, [r5, #0]
 800933e:	e7ee      	b.n	800931e <__swhatbuf_r+0x1e>
 8009340:	2340      	movs	r3, #64	; 0x40
 8009342:	2000      	movs	r0, #0
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	b016      	add	sp, #88	; 0x58
 8009348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800934c <__smakebuf_r>:
 800934c:	898b      	ldrh	r3, [r1, #12]
 800934e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009350:	079d      	lsls	r5, r3, #30
 8009352:	4606      	mov	r6, r0
 8009354:	460c      	mov	r4, r1
 8009356:	d507      	bpl.n	8009368 <__smakebuf_r+0x1c>
 8009358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	6123      	str	r3, [r4, #16]
 8009360:	2301      	movs	r3, #1
 8009362:	6163      	str	r3, [r4, #20]
 8009364:	b002      	add	sp, #8
 8009366:	bd70      	pop	{r4, r5, r6, pc}
 8009368:	ab01      	add	r3, sp, #4
 800936a:	466a      	mov	r2, sp
 800936c:	f7ff ffc8 	bl	8009300 <__swhatbuf_r>
 8009370:	9900      	ldr	r1, [sp, #0]
 8009372:	4605      	mov	r5, r0
 8009374:	4630      	mov	r0, r6
 8009376:	f7fe f919 	bl	80075ac <_malloc_r>
 800937a:	b948      	cbnz	r0, 8009390 <__smakebuf_r+0x44>
 800937c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009380:	059a      	lsls	r2, r3, #22
 8009382:	d4ef      	bmi.n	8009364 <__smakebuf_r+0x18>
 8009384:	f023 0303 	bic.w	r3, r3, #3
 8009388:	f043 0302 	orr.w	r3, r3, #2
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	e7e3      	b.n	8009358 <__smakebuf_r+0xc>
 8009390:	4b0d      	ldr	r3, [pc, #52]	; (80093c8 <__smakebuf_r+0x7c>)
 8009392:	62b3      	str	r3, [r6, #40]	; 0x28
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	6020      	str	r0, [r4, #0]
 8009398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	9b00      	ldr	r3, [sp, #0]
 80093a0:	6163      	str	r3, [r4, #20]
 80093a2:	9b01      	ldr	r3, [sp, #4]
 80093a4:	6120      	str	r0, [r4, #16]
 80093a6:	b15b      	cbz	r3, 80093c0 <__smakebuf_r+0x74>
 80093a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ac:	4630      	mov	r0, r6
 80093ae:	f000 fec5 	bl	800a13c <_isatty_r>
 80093b2:	b128      	cbz	r0, 80093c0 <__smakebuf_r+0x74>
 80093b4:	89a3      	ldrh	r3, [r4, #12]
 80093b6:	f023 0303 	bic.w	r3, r3, #3
 80093ba:	f043 0301 	orr.w	r3, r3, #1
 80093be:	81a3      	strh	r3, [r4, #12]
 80093c0:	89a0      	ldrh	r0, [r4, #12]
 80093c2:	4305      	orrs	r5, r0
 80093c4:	81a5      	strh	r5, [r4, #12]
 80093c6:	e7cd      	b.n	8009364 <__smakebuf_r+0x18>
 80093c8:	080072b5 	.word	0x080072b5

080093cc <malloc>:
 80093cc:	4b02      	ldr	r3, [pc, #8]	; (80093d8 <malloc+0xc>)
 80093ce:	4601      	mov	r1, r0
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	f7fe b8eb 	b.w	80075ac <_malloc_r>
 80093d6:	bf00      	nop
 80093d8:	20000010 	.word	0x20000010

080093dc <__malloc_lock>:
 80093dc:	4801      	ldr	r0, [pc, #4]	; (80093e4 <__malloc_lock+0x8>)
 80093de:	f7fe b860 	b.w	80074a2 <__retarget_lock_acquire_recursive>
 80093e2:	bf00      	nop
 80093e4:	20001c54 	.word	0x20001c54

080093e8 <__malloc_unlock>:
 80093e8:	4801      	ldr	r0, [pc, #4]	; (80093f0 <__malloc_unlock+0x8>)
 80093ea:	f7fe b85b 	b.w	80074a4 <__retarget_lock_release_recursive>
 80093ee:	bf00      	nop
 80093f0:	20001c54 	.word	0x20001c54

080093f4 <_Balloc>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093f8:	4604      	mov	r4, r0
 80093fa:	460d      	mov	r5, r1
 80093fc:	b976      	cbnz	r6, 800941c <_Balloc+0x28>
 80093fe:	2010      	movs	r0, #16
 8009400:	f7ff ffe4 	bl	80093cc <malloc>
 8009404:	4602      	mov	r2, r0
 8009406:	6260      	str	r0, [r4, #36]	; 0x24
 8009408:	b920      	cbnz	r0, 8009414 <_Balloc+0x20>
 800940a:	4b18      	ldr	r3, [pc, #96]	; (800946c <_Balloc+0x78>)
 800940c:	4818      	ldr	r0, [pc, #96]	; (8009470 <_Balloc+0x7c>)
 800940e:	2166      	movs	r1, #102	; 0x66
 8009410:	f000 fe52 	bl	800a0b8 <__assert_func>
 8009414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009418:	6006      	str	r6, [r0, #0]
 800941a:	60c6      	str	r6, [r0, #12]
 800941c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800941e:	68f3      	ldr	r3, [r6, #12]
 8009420:	b183      	cbz	r3, 8009444 <_Balloc+0x50>
 8009422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800942a:	b9b8      	cbnz	r0, 800945c <_Balloc+0x68>
 800942c:	2101      	movs	r1, #1
 800942e:	fa01 f605 	lsl.w	r6, r1, r5
 8009432:	1d72      	adds	r2, r6, #5
 8009434:	0092      	lsls	r2, r2, #2
 8009436:	4620      	mov	r0, r4
 8009438:	f000 fb60 	bl	8009afc <_calloc_r>
 800943c:	b160      	cbz	r0, 8009458 <_Balloc+0x64>
 800943e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009442:	e00e      	b.n	8009462 <_Balloc+0x6e>
 8009444:	2221      	movs	r2, #33	; 0x21
 8009446:	2104      	movs	r1, #4
 8009448:	4620      	mov	r0, r4
 800944a:	f000 fb57 	bl	8009afc <_calloc_r>
 800944e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009450:	60f0      	str	r0, [r6, #12]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e4      	bne.n	8009422 <_Balloc+0x2e>
 8009458:	2000      	movs	r0, #0
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	6802      	ldr	r2, [r0, #0]
 800945e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009462:	2300      	movs	r3, #0
 8009464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009468:	e7f7      	b.n	800945a <_Balloc+0x66>
 800946a:	bf00      	nop
 800946c:	0800a73e 	.word	0x0800a73e
 8009470:	0800a7c1 	.word	0x0800a7c1

08009474 <_Bfree>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009478:	4605      	mov	r5, r0
 800947a:	460c      	mov	r4, r1
 800947c:	b976      	cbnz	r6, 800949c <_Bfree+0x28>
 800947e:	2010      	movs	r0, #16
 8009480:	f7ff ffa4 	bl	80093cc <malloc>
 8009484:	4602      	mov	r2, r0
 8009486:	6268      	str	r0, [r5, #36]	; 0x24
 8009488:	b920      	cbnz	r0, 8009494 <_Bfree+0x20>
 800948a:	4b09      	ldr	r3, [pc, #36]	; (80094b0 <_Bfree+0x3c>)
 800948c:	4809      	ldr	r0, [pc, #36]	; (80094b4 <_Bfree+0x40>)
 800948e:	218a      	movs	r1, #138	; 0x8a
 8009490:	f000 fe12 	bl	800a0b8 <__assert_func>
 8009494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009498:	6006      	str	r6, [r0, #0]
 800949a:	60c6      	str	r6, [r0, #12]
 800949c:	b13c      	cbz	r4, 80094ae <_Bfree+0x3a>
 800949e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094a0:	6862      	ldr	r2, [r4, #4]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094a8:	6021      	str	r1, [r4, #0]
 80094aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	0800a73e 	.word	0x0800a73e
 80094b4:	0800a7c1 	.word	0x0800a7c1

080094b8 <__multadd>:
 80094b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094bc:	690d      	ldr	r5, [r1, #16]
 80094be:	4607      	mov	r7, r0
 80094c0:	460c      	mov	r4, r1
 80094c2:	461e      	mov	r6, r3
 80094c4:	f101 0c14 	add.w	ip, r1, #20
 80094c8:	2000      	movs	r0, #0
 80094ca:	f8dc 3000 	ldr.w	r3, [ip]
 80094ce:	b299      	uxth	r1, r3
 80094d0:	fb02 6101 	mla	r1, r2, r1, r6
 80094d4:	0c1e      	lsrs	r6, r3, #16
 80094d6:	0c0b      	lsrs	r3, r1, #16
 80094d8:	fb02 3306 	mla	r3, r2, r6, r3
 80094dc:	b289      	uxth	r1, r1
 80094de:	3001      	adds	r0, #1
 80094e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094e4:	4285      	cmp	r5, r0
 80094e6:	f84c 1b04 	str.w	r1, [ip], #4
 80094ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094ee:	dcec      	bgt.n	80094ca <__multadd+0x12>
 80094f0:	b30e      	cbz	r6, 8009536 <__multadd+0x7e>
 80094f2:	68a3      	ldr	r3, [r4, #8]
 80094f4:	42ab      	cmp	r3, r5
 80094f6:	dc19      	bgt.n	800952c <__multadd+0x74>
 80094f8:	6861      	ldr	r1, [r4, #4]
 80094fa:	4638      	mov	r0, r7
 80094fc:	3101      	adds	r1, #1
 80094fe:	f7ff ff79 	bl	80093f4 <_Balloc>
 8009502:	4680      	mov	r8, r0
 8009504:	b928      	cbnz	r0, 8009512 <__multadd+0x5a>
 8009506:	4602      	mov	r2, r0
 8009508:	4b0c      	ldr	r3, [pc, #48]	; (800953c <__multadd+0x84>)
 800950a:	480d      	ldr	r0, [pc, #52]	; (8009540 <__multadd+0x88>)
 800950c:	21b5      	movs	r1, #181	; 0xb5
 800950e:	f000 fdd3 	bl	800a0b8 <__assert_func>
 8009512:	6922      	ldr	r2, [r4, #16]
 8009514:	3202      	adds	r2, #2
 8009516:	f104 010c 	add.w	r1, r4, #12
 800951a:	0092      	lsls	r2, r2, #2
 800951c:	300c      	adds	r0, #12
 800951e:	f7fd ffc2 	bl	80074a6 <memcpy>
 8009522:	4621      	mov	r1, r4
 8009524:	4638      	mov	r0, r7
 8009526:	f7ff ffa5 	bl	8009474 <_Bfree>
 800952a:	4644      	mov	r4, r8
 800952c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009530:	3501      	adds	r5, #1
 8009532:	615e      	str	r6, [r3, #20]
 8009534:	6125      	str	r5, [r4, #16]
 8009536:	4620      	mov	r0, r4
 8009538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800953c:	0800a7b0 	.word	0x0800a7b0
 8009540:	0800a7c1 	.word	0x0800a7c1

08009544 <__hi0bits>:
 8009544:	0c03      	lsrs	r3, r0, #16
 8009546:	041b      	lsls	r3, r3, #16
 8009548:	b9d3      	cbnz	r3, 8009580 <__hi0bits+0x3c>
 800954a:	0400      	lsls	r0, r0, #16
 800954c:	2310      	movs	r3, #16
 800954e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009552:	bf04      	itt	eq
 8009554:	0200      	lsleq	r0, r0, #8
 8009556:	3308      	addeq	r3, #8
 8009558:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800955c:	bf04      	itt	eq
 800955e:	0100      	lsleq	r0, r0, #4
 8009560:	3304      	addeq	r3, #4
 8009562:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009566:	bf04      	itt	eq
 8009568:	0080      	lsleq	r0, r0, #2
 800956a:	3302      	addeq	r3, #2
 800956c:	2800      	cmp	r0, #0
 800956e:	db05      	blt.n	800957c <__hi0bits+0x38>
 8009570:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009574:	f103 0301 	add.w	r3, r3, #1
 8009578:	bf08      	it	eq
 800957a:	2320      	moveq	r3, #32
 800957c:	4618      	mov	r0, r3
 800957e:	4770      	bx	lr
 8009580:	2300      	movs	r3, #0
 8009582:	e7e4      	b.n	800954e <__hi0bits+0xa>

08009584 <__lo0bits>:
 8009584:	6803      	ldr	r3, [r0, #0]
 8009586:	f013 0207 	ands.w	r2, r3, #7
 800958a:	4601      	mov	r1, r0
 800958c:	d00b      	beq.n	80095a6 <__lo0bits+0x22>
 800958e:	07da      	lsls	r2, r3, #31
 8009590:	d423      	bmi.n	80095da <__lo0bits+0x56>
 8009592:	0798      	lsls	r0, r3, #30
 8009594:	bf49      	itett	mi
 8009596:	085b      	lsrmi	r3, r3, #1
 8009598:	089b      	lsrpl	r3, r3, #2
 800959a:	2001      	movmi	r0, #1
 800959c:	600b      	strmi	r3, [r1, #0]
 800959e:	bf5c      	itt	pl
 80095a0:	600b      	strpl	r3, [r1, #0]
 80095a2:	2002      	movpl	r0, #2
 80095a4:	4770      	bx	lr
 80095a6:	b298      	uxth	r0, r3
 80095a8:	b9a8      	cbnz	r0, 80095d6 <__lo0bits+0x52>
 80095aa:	0c1b      	lsrs	r3, r3, #16
 80095ac:	2010      	movs	r0, #16
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	b90a      	cbnz	r2, 80095b6 <__lo0bits+0x32>
 80095b2:	3008      	adds	r0, #8
 80095b4:	0a1b      	lsrs	r3, r3, #8
 80095b6:	071a      	lsls	r2, r3, #28
 80095b8:	bf04      	itt	eq
 80095ba:	091b      	lsreq	r3, r3, #4
 80095bc:	3004      	addeq	r0, #4
 80095be:	079a      	lsls	r2, r3, #30
 80095c0:	bf04      	itt	eq
 80095c2:	089b      	lsreq	r3, r3, #2
 80095c4:	3002      	addeq	r0, #2
 80095c6:	07da      	lsls	r2, r3, #31
 80095c8:	d403      	bmi.n	80095d2 <__lo0bits+0x4e>
 80095ca:	085b      	lsrs	r3, r3, #1
 80095cc:	f100 0001 	add.w	r0, r0, #1
 80095d0:	d005      	beq.n	80095de <__lo0bits+0x5a>
 80095d2:	600b      	str	r3, [r1, #0]
 80095d4:	4770      	bx	lr
 80095d6:	4610      	mov	r0, r2
 80095d8:	e7e9      	b.n	80095ae <__lo0bits+0x2a>
 80095da:	2000      	movs	r0, #0
 80095dc:	4770      	bx	lr
 80095de:	2020      	movs	r0, #32
 80095e0:	4770      	bx	lr
	...

080095e4 <__i2b>:
 80095e4:	b510      	push	{r4, lr}
 80095e6:	460c      	mov	r4, r1
 80095e8:	2101      	movs	r1, #1
 80095ea:	f7ff ff03 	bl	80093f4 <_Balloc>
 80095ee:	4602      	mov	r2, r0
 80095f0:	b928      	cbnz	r0, 80095fe <__i2b+0x1a>
 80095f2:	4b05      	ldr	r3, [pc, #20]	; (8009608 <__i2b+0x24>)
 80095f4:	4805      	ldr	r0, [pc, #20]	; (800960c <__i2b+0x28>)
 80095f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80095fa:	f000 fd5d 	bl	800a0b8 <__assert_func>
 80095fe:	2301      	movs	r3, #1
 8009600:	6144      	str	r4, [r0, #20]
 8009602:	6103      	str	r3, [r0, #16]
 8009604:	bd10      	pop	{r4, pc}
 8009606:	bf00      	nop
 8009608:	0800a7b0 	.word	0x0800a7b0
 800960c:	0800a7c1 	.word	0x0800a7c1

08009610 <__multiply>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	4691      	mov	r9, r2
 8009616:	690a      	ldr	r2, [r1, #16]
 8009618:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800961c:	429a      	cmp	r2, r3
 800961e:	bfb8      	it	lt
 8009620:	460b      	movlt	r3, r1
 8009622:	460c      	mov	r4, r1
 8009624:	bfbc      	itt	lt
 8009626:	464c      	movlt	r4, r9
 8009628:	4699      	movlt	r9, r3
 800962a:	6927      	ldr	r7, [r4, #16]
 800962c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009630:	68a3      	ldr	r3, [r4, #8]
 8009632:	6861      	ldr	r1, [r4, #4]
 8009634:	eb07 060a 	add.w	r6, r7, sl
 8009638:	42b3      	cmp	r3, r6
 800963a:	b085      	sub	sp, #20
 800963c:	bfb8      	it	lt
 800963e:	3101      	addlt	r1, #1
 8009640:	f7ff fed8 	bl	80093f4 <_Balloc>
 8009644:	b930      	cbnz	r0, 8009654 <__multiply+0x44>
 8009646:	4602      	mov	r2, r0
 8009648:	4b44      	ldr	r3, [pc, #272]	; (800975c <__multiply+0x14c>)
 800964a:	4845      	ldr	r0, [pc, #276]	; (8009760 <__multiply+0x150>)
 800964c:	f240 115d 	movw	r1, #349	; 0x15d
 8009650:	f000 fd32 	bl	800a0b8 <__assert_func>
 8009654:	f100 0514 	add.w	r5, r0, #20
 8009658:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800965c:	462b      	mov	r3, r5
 800965e:	2200      	movs	r2, #0
 8009660:	4543      	cmp	r3, r8
 8009662:	d321      	bcc.n	80096a8 <__multiply+0x98>
 8009664:	f104 0314 	add.w	r3, r4, #20
 8009668:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800966c:	f109 0314 	add.w	r3, r9, #20
 8009670:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009674:	9202      	str	r2, [sp, #8]
 8009676:	1b3a      	subs	r2, r7, r4
 8009678:	3a15      	subs	r2, #21
 800967a:	f022 0203 	bic.w	r2, r2, #3
 800967e:	3204      	adds	r2, #4
 8009680:	f104 0115 	add.w	r1, r4, #21
 8009684:	428f      	cmp	r7, r1
 8009686:	bf38      	it	cc
 8009688:	2204      	movcc	r2, #4
 800968a:	9201      	str	r2, [sp, #4]
 800968c:	9a02      	ldr	r2, [sp, #8]
 800968e:	9303      	str	r3, [sp, #12]
 8009690:	429a      	cmp	r2, r3
 8009692:	d80c      	bhi.n	80096ae <__multiply+0x9e>
 8009694:	2e00      	cmp	r6, #0
 8009696:	dd03      	ble.n	80096a0 <__multiply+0x90>
 8009698:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800969c:	2b00      	cmp	r3, #0
 800969e:	d05a      	beq.n	8009756 <__multiply+0x146>
 80096a0:	6106      	str	r6, [r0, #16]
 80096a2:	b005      	add	sp, #20
 80096a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a8:	f843 2b04 	str.w	r2, [r3], #4
 80096ac:	e7d8      	b.n	8009660 <__multiply+0x50>
 80096ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80096b2:	f1ba 0f00 	cmp.w	sl, #0
 80096b6:	d024      	beq.n	8009702 <__multiply+0xf2>
 80096b8:	f104 0e14 	add.w	lr, r4, #20
 80096bc:	46a9      	mov	r9, r5
 80096be:	f04f 0c00 	mov.w	ip, #0
 80096c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096c6:	f8d9 1000 	ldr.w	r1, [r9]
 80096ca:	fa1f fb82 	uxth.w	fp, r2
 80096ce:	b289      	uxth	r1, r1
 80096d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80096d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096d8:	f8d9 2000 	ldr.w	r2, [r9]
 80096dc:	4461      	add	r1, ip
 80096de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80096e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096ea:	b289      	uxth	r1, r1
 80096ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096f0:	4577      	cmp	r7, lr
 80096f2:	f849 1b04 	str.w	r1, [r9], #4
 80096f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096fa:	d8e2      	bhi.n	80096c2 <__multiply+0xb2>
 80096fc:	9a01      	ldr	r2, [sp, #4]
 80096fe:	f845 c002 	str.w	ip, [r5, r2]
 8009702:	9a03      	ldr	r2, [sp, #12]
 8009704:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009708:	3304      	adds	r3, #4
 800970a:	f1b9 0f00 	cmp.w	r9, #0
 800970e:	d020      	beq.n	8009752 <__multiply+0x142>
 8009710:	6829      	ldr	r1, [r5, #0]
 8009712:	f104 0c14 	add.w	ip, r4, #20
 8009716:	46ae      	mov	lr, r5
 8009718:	f04f 0a00 	mov.w	sl, #0
 800971c:	f8bc b000 	ldrh.w	fp, [ip]
 8009720:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009724:	fb09 220b 	mla	r2, r9, fp, r2
 8009728:	4492      	add	sl, r2
 800972a:	b289      	uxth	r1, r1
 800972c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009730:	f84e 1b04 	str.w	r1, [lr], #4
 8009734:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009738:	f8be 1000 	ldrh.w	r1, [lr]
 800973c:	0c12      	lsrs	r2, r2, #16
 800973e:	fb09 1102 	mla	r1, r9, r2, r1
 8009742:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009746:	4567      	cmp	r7, ip
 8009748:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800974c:	d8e6      	bhi.n	800971c <__multiply+0x10c>
 800974e:	9a01      	ldr	r2, [sp, #4]
 8009750:	50a9      	str	r1, [r5, r2]
 8009752:	3504      	adds	r5, #4
 8009754:	e79a      	b.n	800968c <__multiply+0x7c>
 8009756:	3e01      	subs	r6, #1
 8009758:	e79c      	b.n	8009694 <__multiply+0x84>
 800975a:	bf00      	nop
 800975c:	0800a7b0 	.word	0x0800a7b0
 8009760:	0800a7c1 	.word	0x0800a7c1

08009764 <__pow5mult>:
 8009764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009768:	4615      	mov	r5, r2
 800976a:	f012 0203 	ands.w	r2, r2, #3
 800976e:	4606      	mov	r6, r0
 8009770:	460f      	mov	r7, r1
 8009772:	d007      	beq.n	8009784 <__pow5mult+0x20>
 8009774:	4c25      	ldr	r4, [pc, #148]	; (800980c <__pow5mult+0xa8>)
 8009776:	3a01      	subs	r2, #1
 8009778:	2300      	movs	r3, #0
 800977a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800977e:	f7ff fe9b 	bl	80094b8 <__multadd>
 8009782:	4607      	mov	r7, r0
 8009784:	10ad      	asrs	r5, r5, #2
 8009786:	d03d      	beq.n	8009804 <__pow5mult+0xa0>
 8009788:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800978a:	b97c      	cbnz	r4, 80097ac <__pow5mult+0x48>
 800978c:	2010      	movs	r0, #16
 800978e:	f7ff fe1d 	bl	80093cc <malloc>
 8009792:	4602      	mov	r2, r0
 8009794:	6270      	str	r0, [r6, #36]	; 0x24
 8009796:	b928      	cbnz	r0, 80097a4 <__pow5mult+0x40>
 8009798:	4b1d      	ldr	r3, [pc, #116]	; (8009810 <__pow5mult+0xac>)
 800979a:	481e      	ldr	r0, [pc, #120]	; (8009814 <__pow5mult+0xb0>)
 800979c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097a0:	f000 fc8a 	bl	800a0b8 <__assert_func>
 80097a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097a8:	6004      	str	r4, [r0, #0]
 80097aa:	60c4      	str	r4, [r0, #12]
 80097ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097b4:	b94c      	cbnz	r4, 80097ca <__pow5mult+0x66>
 80097b6:	f240 2171 	movw	r1, #625	; 0x271
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7ff ff12 	bl	80095e4 <__i2b>
 80097c0:	2300      	movs	r3, #0
 80097c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80097c6:	4604      	mov	r4, r0
 80097c8:	6003      	str	r3, [r0, #0]
 80097ca:	f04f 0900 	mov.w	r9, #0
 80097ce:	07eb      	lsls	r3, r5, #31
 80097d0:	d50a      	bpl.n	80097e8 <__pow5mult+0x84>
 80097d2:	4639      	mov	r1, r7
 80097d4:	4622      	mov	r2, r4
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7ff ff1a 	bl	8009610 <__multiply>
 80097dc:	4639      	mov	r1, r7
 80097de:	4680      	mov	r8, r0
 80097e0:	4630      	mov	r0, r6
 80097e2:	f7ff fe47 	bl	8009474 <_Bfree>
 80097e6:	4647      	mov	r7, r8
 80097e8:	106d      	asrs	r5, r5, #1
 80097ea:	d00b      	beq.n	8009804 <__pow5mult+0xa0>
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	b938      	cbnz	r0, 8009800 <__pow5mult+0x9c>
 80097f0:	4622      	mov	r2, r4
 80097f2:	4621      	mov	r1, r4
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff ff0b 	bl	8009610 <__multiply>
 80097fa:	6020      	str	r0, [r4, #0]
 80097fc:	f8c0 9000 	str.w	r9, [r0]
 8009800:	4604      	mov	r4, r0
 8009802:	e7e4      	b.n	80097ce <__pow5mult+0x6a>
 8009804:	4638      	mov	r0, r7
 8009806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800980a:	bf00      	nop
 800980c:	0800a910 	.word	0x0800a910
 8009810:	0800a73e 	.word	0x0800a73e
 8009814:	0800a7c1 	.word	0x0800a7c1

08009818 <__lshift>:
 8009818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800981c:	460c      	mov	r4, r1
 800981e:	6849      	ldr	r1, [r1, #4]
 8009820:	6923      	ldr	r3, [r4, #16]
 8009822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009826:	68a3      	ldr	r3, [r4, #8]
 8009828:	4607      	mov	r7, r0
 800982a:	4691      	mov	r9, r2
 800982c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009830:	f108 0601 	add.w	r6, r8, #1
 8009834:	42b3      	cmp	r3, r6
 8009836:	db0b      	blt.n	8009850 <__lshift+0x38>
 8009838:	4638      	mov	r0, r7
 800983a:	f7ff fddb 	bl	80093f4 <_Balloc>
 800983e:	4605      	mov	r5, r0
 8009840:	b948      	cbnz	r0, 8009856 <__lshift+0x3e>
 8009842:	4602      	mov	r2, r0
 8009844:	4b2a      	ldr	r3, [pc, #168]	; (80098f0 <__lshift+0xd8>)
 8009846:	482b      	ldr	r0, [pc, #172]	; (80098f4 <__lshift+0xdc>)
 8009848:	f240 11d9 	movw	r1, #473	; 0x1d9
 800984c:	f000 fc34 	bl	800a0b8 <__assert_func>
 8009850:	3101      	adds	r1, #1
 8009852:	005b      	lsls	r3, r3, #1
 8009854:	e7ee      	b.n	8009834 <__lshift+0x1c>
 8009856:	2300      	movs	r3, #0
 8009858:	f100 0114 	add.w	r1, r0, #20
 800985c:	f100 0210 	add.w	r2, r0, #16
 8009860:	4618      	mov	r0, r3
 8009862:	4553      	cmp	r3, sl
 8009864:	db37      	blt.n	80098d6 <__lshift+0xbe>
 8009866:	6920      	ldr	r0, [r4, #16]
 8009868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800986c:	f104 0314 	add.w	r3, r4, #20
 8009870:	f019 091f 	ands.w	r9, r9, #31
 8009874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009878:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800987c:	d02f      	beq.n	80098de <__lshift+0xc6>
 800987e:	f1c9 0e20 	rsb	lr, r9, #32
 8009882:	468a      	mov	sl, r1
 8009884:	f04f 0c00 	mov.w	ip, #0
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	fa02 f209 	lsl.w	r2, r2, r9
 800988e:	ea42 020c 	orr.w	r2, r2, ip
 8009892:	f84a 2b04 	str.w	r2, [sl], #4
 8009896:	f853 2b04 	ldr.w	r2, [r3], #4
 800989a:	4298      	cmp	r0, r3
 800989c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80098a0:	d8f2      	bhi.n	8009888 <__lshift+0x70>
 80098a2:	1b03      	subs	r3, r0, r4
 80098a4:	3b15      	subs	r3, #21
 80098a6:	f023 0303 	bic.w	r3, r3, #3
 80098aa:	3304      	adds	r3, #4
 80098ac:	f104 0215 	add.w	r2, r4, #21
 80098b0:	4290      	cmp	r0, r2
 80098b2:	bf38      	it	cc
 80098b4:	2304      	movcc	r3, #4
 80098b6:	f841 c003 	str.w	ip, [r1, r3]
 80098ba:	f1bc 0f00 	cmp.w	ip, #0
 80098be:	d001      	beq.n	80098c4 <__lshift+0xac>
 80098c0:	f108 0602 	add.w	r6, r8, #2
 80098c4:	3e01      	subs	r6, #1
 80098c6:	4638      	mov	r0, r7
 80098c8:	612e      	str	r6, [r5, #16]
 80098ca:	4621      	mov	r1, r4
 80098cc:	f7ff fdd2 	bl	8009474 <_Bfree>
 80098d0:	4628      	mov	r0, r5
 80098d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80098da:	3301      	adds	r3, #1
 80098dc:	e7c1      	b.n	8009862 <__lshift+0x4a>
 80098de:	3904      	subs	r1, #4
 80098e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80098e8:	4298      	cmp	r0, r3
 80098ea:	d8f9      	bhi.n	80098e0 <__lshift+0xc8>
 80098ec:	e7ea      	b.n	80098c4 <__lshift+0xac>
 80098ee:	bf00      	nop
 80098f0:	0800a7b0 	.word	0x0800a7b0
 80098f4:	0800a7c1 	.word	0x0800a7c1

080098f8 <__mcmp>:
 80098f8:	b530      	push	{r4, r5, lr}
 80098fa:	6902      	ldr	r2, [r0, #16]
 80098fc:	690c      	ldr	r4, [r1, #16]
 80098fe:	1b12      	subs	r2, r2, r4
 8009900:	d10e      	bne.n	8009920 <__mcmp+0x28>
 8009902:	f100 0314 	add.w	r3, r0, #20
 8009906:	3114      	adds	r1, #20
 8009908:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800990c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009910:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009914:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009918:	42a5      	cmp	r5, r4
 800991a:	d003      	beq.n	8009924 <__mcmp+0x2c>
 800991c:	d305      	bcc.n	800992a <__mcmp+0x32>
 800991e:	2201      	movs	r2, #1
 8009920:	4610      	mov	r0, r2
 8009922:	bd30      	pop	{r4, r5, pc}
 8009924:	4283      	cmp	r3, r0
 8009926:	d3f3      	bcc.n	8009910 <__mcmp+0x18>
 8009928:	e7fa      	b.n	8009920 <__mcmp+0x28>
 800992a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800992e:	e7f7      	b.n	8009920 <__mcmp+0x28>

08009930 <__mdiff>:
 8009930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009934:	460c      	mov	r4, r1
 8009936:	4606      	mov	r6, r0
 8009938:	4611      	mov	r1, r2
 800993a:	4620      	mov	r0, r4
 800993c:	4690      	mov	r8, r2
 800993e:	f7ff ffdb 	bl	80098f8 <__mcmp>
 8009942:	1e05      	subs	r5, r0, #0
 8009944:	d110      	bne.n	8009968 <__mdiff+0x38>
 8009946:	4629      	mov	r1, r5
 8009948:	4630      	mov	r0, r6
 800994a:	f7ff fd53 	bl	80093f4 <_Balloc>
 800994e:	b930      	cbnz	r0, 800995e <__mdiff+0x2e>
 8009950:	4b3a      	ldr	r3, [pc, #232]	; (8009a3c <__mdiff+0x10c>)
 8009952:	4602      	mov	r2, r0
 8009954:	f240 2132 	movw	r1, #562	; 0x232
 8009958:	4839      	ldr	r0, [pc, #228]	; (8009a40 <__mdiff+0x110>)
 800995a:	f000 fbad 	bl	800a0b8 <__assert_func>
 800995e:	2301      	movs	r3, #1
 8009960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009968:	bfa4      	itt	ge
 800996a:	4643      	movge	r3, r8
 800996c:	46a0      	movge	r8, r4
 800996e:	4630      	mov	r0, r6
 8009970:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009974:	bfa6      	itte	ge
 8009976:	461c      	movge	r4, r3
 8009978:	2500      	movge	r5, #0
 800997a:	2501      	movlt	r5, #1
 800997c:	f7ff fd3a 	bl	80093f4 <_Balloc>
 8009980:	b920      	cbnz	r0, 800998c <__mdiff+0x5c>
 8009982:	4b2e      	ldr	r3, [pc, #184]	; (8009a3c <__mdiff+0x10c>)
 8009984:	4602      	mov	r2, r0
 8009986:	f44f 7110 	mov.w	r1, #576	; 0x240
 800998a:	e7e5      	b.n	8009958 <__mdiff+0x28>
 800998c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009990:	6926      	ldr	r6, [r4, #16]
 8009992:	60c5      	str	r5, [r0, #12]
 8009994:	f104 0914 	add.w	r9, r4, #20
 8009998:	f108 0514 	add.w	r5, r8, #20
 800999c:	f100 0e14 	add.w	lr, r0, #20
 80099a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80099a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099a8:	f108 0210 	add.w	r2, r8, #16
 80099ac:	46f2      	mov	sl, lr
 80099ae:	2100      	movs	r1, #0
 80099b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80099b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099b8:	fa1f f883 	uxth.w	r8, r3
 80099bc:	fa11 f18b 	uxtah	r1, r1, fp
 80099c0:	0c1b      	lsrs	r3, r3, #16
 80099c2:	eba1 0808 	sub.w	r8, r1, r8
 80099c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099ce:	fa1f f888 	uxth.w	r8, r8
 80099d2:	1419      	asrs	r1, r3, #16
 80099d4:	454e      	cmp	r6, r9
 80099d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099da:	f84a 3b04 	str.w	r3, [sl], #4
 80099de:	d8e7      	bhi.n	80099b0 <__mdiff+0x80>
 80099e0:	1b33      	subs	r3, r6, r4
 80099e2:	3b15      	subs	r3, #21
 80099e4:	f023 0303 	bic.w	r3, r3, #3
 80099e8:	3304      	adds	r3, #4
 80099ea:	3415      	adds	r4, #21
 80099ec:	42a6      	cmp	r6, r4
 80099ee:	bf38      	it	cc
 80099f0:	2304      	movcc	r3, #4
 80099f2:	441d      	add	r5, r3
 80099f4:	4473      	add	r3, lr
 80099f6:	469e      	mov	lr, r3
 80099f8:	462e      	mov	r6, r5
 80099fa:	4566      	cmp	r6, ip
 80099fc:	d30e      	bcc.n	8009a1c <__mdiff+0xec>
 80099fe:	f10c 0203 	add.w	r2, ip, #3
 8009a02:	1b52      	subs	r2, r2, r5
 8009a04:	f022 0203 	bic.w	r2, r2, #3
 8009a08:	3d03      	subs	r5, #3
 8009a0a:	45ac      	cmp	ip, r5
 8009a0c:	bf38      	it	cc
 8009a0e:	2200      	movcc	r2, #0
 8009a10:	441a      	add	r2, r3
 8009a12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a16:	b17b      	cbz	r3, 8009a38 <__mdiff+0x108>
 8009a18:	6107      	str	r7, [r0, #16]
 8009a1a:	e7a3      	b.n	8009964 <__mdiff+0x34>
 8009a1c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a20:	fa11 f288 	uxtah	r2, r1, r8
 8009a24:	1414      	asrs	r4, r2, #16
 8009a26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a2a:	b292      	uxth	r2, r2
 8009a2c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a30:	f84e 2b04 	str.w	r2, [lr], #4
 8009a34:	1421      	asrs	r1, r4, #16
 8009a36:	e7e0      	b.n	80099fa <__mdiff+0xca>
 8009a38:	3f01      	subs	r7, #1
 8009a3a:	e7ea      	b.n	8009a12 <__mdiff+0xe2>
 8009a3c:	0800a7b0 	.word	0x0800a7b0
 8009a40:	0800a7c1 	.word	0x0800a7c1

08009a44 <__d2b>:
 8009a44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a48:	4689      	mov	r9, r1
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	ec57 6b10 	vmov	r6, r7, d0
 8009a50:	4690      	mov	r8, r2
 8009a52:	f7ff fccf 	bl	80093f4 <_Balloc>
 8009a56:	4604      	mov	r4, r0
 8009a58:	b930      	cbnz	r0, 8009a68 <__d2b+0x24>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	4b25      	ldr	r3, [pc, #148]	; (8009af4 <__d2b+0xb0>)
 8009a5e:	4826      	ldr	r0, [pc, #152]	; (8009af8 <__d2b+0xb4>)
 8009a60:	f240 310a 	movw	r1, #778	; 0x30a
 8009a64:	f000 fb28 	bl	800a0b8 <__assert_func>
 8009a68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a70:	bb35      	cbnz	r5, 8009ac0 <__d2b+0x7c>
 8009a72:	2e00      	cmp	r6, #0
 8009a74:	9301      	str	r3, [sp, #4]
 8009a76:	d028      	beq.n	8009aca <__d2b+0x86>
 8009a78:	4668      	mov	r0, sp
 8009a7a:	9600      	str	r6, [sp, #0]
 8009a7c:	f7ff fd82 	bl	8009584 <__lo0bits>
 8009a80:	9900      	ldr	r1, [sp, #0]
 8009a82:	b300      	cbz	r0, 8009ac6 <__d2b+0x82>
 8009a84:	9a01      	ldr	r2, [sp, #4]
 8009a86:	f1c0 0320 	rsb	r3, r0, #32
 8009a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	40c2      	lsrs	r2, r0
 8009a92:	6163      	str	r3, [r4, #20]
 8009a94:	9201      	str	r2, [sp, #4]
 8009a96:	9b01      	ldr	r3, [sp, #4]
 8009a98:	61a3      	str	r3, [r4, #24]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	bf14      	ite	ne
 8009a9e:	2202      	movne	r2, #2
 8009aa0:	2201      	moveq	r2, #1
 8009aa2:	6122      	str	r2, [r4, #16]
 8009aa4:	b1d5      	cbz	r5, 8009adc <__d2b+0x98>
 8009aa6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009aaa:	4405      	add	r5, r0
 8009aac:	f8c9 5000 	str.w	r5, [r9]
 8009ab0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ab4:	f8c8 0000 	str.w	r0, [r8]
 8009ab8:	4620      	mov	r0, r4
 8009aba:	b003      	add	sp, #12
 8009abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ac4:	e7d5      	b.n	8009a72 <__d2b+0x2e>
 8009ac6:	6161      	str	r1, [r4, #20]
 8009ac8:	e7e5      	b.n	8009a96 <__d2b+0x52>
 8009aca:	a801      	add	r0, sp, #4
 8009acc:	f7ff fd5a 	bl	8009584 <__lo0bits>
 8009ad0:	9b01      	ldr	r3, [sp, #4]
 8009ad2:	6163      	str	r3, [r4, #20]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	6122      	str	r2, [r4, #16]
 8009ad8:	3020      	adds	r0, #32
 8009ada:	e7e3      	b.n	8009aa4 <__d2b+0x60>
 8009adc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ae0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ae4:	f8c9 0000 	str.w	r0, [r9]
 8009ae8:	6918      	ldr	r0, [r3, #16]
 8009aea:	f7ff fd2b 	bl	8009544 <__hi0bits>
 8009aee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009af2:	e7df      	b.n	8009ab4 <__d2b+0x70>
 8009af4:	0800a7b0 	.word	0x0800a7b0
 8009af8:	0800a7c1 	.word	0x0800a7c1

08009afc <_calloc_r>:
 8009afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009afe:	fba1 2402 	umull	r2, r4, r1, r2
 8009b02:	b94c      	cbnz	r4, 8009b18 <_calloc_r+0x1c>
 8009b04:	4611      	mov	r1, r2
 8009b06:	9201      	str	r2, [sp, #4]
 8009b08:	f7fd fd50 	bl	80075ac <_malloc_r>
 8009b0c:	9a01      	ldr	r2, [sp, #4]
 8009b0e:	4605      	mov	r5, r0
 8009b10:	b930      	cbnz	r0, 8009b20 <_calloc_r+0x24>
 8009b12:	4628      	mov	r0, r5
 8009b14:	b003      	add	sp, #12
 8009b16:	bd30      	pop	{r4, r5, pc}
 8009b18:	220c      	movs	r2, #12
 8009b1a:	6002      	str	r2, [r0, #0]
 8009b1c:	2500      	movs	r5, #0
 8009b1e:	e7f8      	b.n	8009b12 <_calloc_r+0x16>
 8009b20:	4621      	mov	r1, r4
 8009b22:	f7fd fcce 	bl	80074c2 <memset>
 8009b26:	e7f4      	b.n	8009b12 <_calloc_r+0x16>

08009b28 <__ssputs_r>:
 8009b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b2c:	688e      	ldr	r6, [r1, #8]
 8009b2e:	429e      	cmp	r6, r3
 8009b30:	4682      	mov	sl, r0
 8009b32:	460c      	mov	r4, r1
 8009b34:	4690      	mov	r8, r2
 8009b36:	461f      	mov	r7, r3
 8009b38:	d838      	bhi.n	8009bac <__ssputs_r+0x84>
 8009b3a:	898a      	ldrh	r2, [r1, #12]
 8009b3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b40:	d032      	beq.n	8009ba8 <__ssputs_r+0x80>
 8009b42:	6825      	ldr	r5, [r4, #0]
 8009b44:	6909      	ldr	r1, [r1, #16]
 8009b46:	eba5 0901 	sub.w	r9, r5, r1
 8009b4a:	6965      	ldr	r5, [r4, #20]
 8009b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b54:	3301      	adds	r3, #1
 8009b56:	444b      	add	r3, r9
 8009b58:	106d      	asrs	r5, r5, #1
 8009b5a:	429d      	cmp	r5, r3
 8009b5c:	bf38      	it	cc
 8009b5e:	461d      	movcc	r5, r3
 8009b60:	0553      	lsls	r3, r2, #21
 8009b62:	d531      	bpl.n	8009bc8 <__ssputs_r+0xa0>
 8009b64:	4629      	mov	r1, r5
 8009b66:	f7fd fd21 	bl	80075ac <_malloc_r>
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	b950      	cbnz	r0, 8009b84 <__ssputs_r+0x5c>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	f8ca 3000 	str.w	r3, [sl]
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b84:	6921      	ldr	r1, [r4, #16]
 8009b86:	464a      	mov	r2, r9
 8009b88:	f7fd fc8d 	bl	80074a6 <memcpy>
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	6126      	str	r6, [r4, #16]
 8009b9a:	6165      	str	r5, [r4, #20]
 8009b9c:	444e      	add	r6, r9
 8009b9e:	eba5 0509 	sub.w	r5, r5, r9
 8009ba2:	6026      	str	r6, [r4, #0]
 8009ba4:	60a5      	str	r5, [r4, #8]
 8009ba6:	463e      	mov	r6, r7
 8009ba8:	42be      	cmp	r6, r7
 8009baa:	d900      	bls.n	8009bae <__ssputs_r+0x86>
 8009bac:	463e      	mov	r6, r7
 8009bae:	6820      	ldr	r0, [r4, #0]
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	f000 fae4 	bl	800a180 <memmove>
 8009bb8:	68a3      	ldr	r3, [r4, #8]
 8009bba:	1b9b      	subs	r3, r3, r6
 8009bbc:	60a3      	str	r3, [r4, #8]
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	4433      	add	r3, r6
 8009bc2:	6023      	str	r3, [r4, #0]
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e7db      	b.n	8009b80 <__ssputs_r+0x58>
 8009bc8:	462a      	mov	r2, r5
 8009bca:	f000 faf3 	bl	800a1b4 <_realloc_r>
 8009bce:	4606      	mov	r6, r0
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d1e1      	bne.n	8009b98 <__ssputs_r+0x70>
 8009bd4:	6921      	ldr	r1, [r4, #16]
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	f7fd fc7c 	bl	80074d4 <_free_r>
 8009bdc:	e7c7      	b.n	8009b6e <__ssputs_r+0x46>
	...

08009be0 <_svfiprintf_r>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	4698      	mov	r8, r3
 8009be6:	898b      	ldrh	r3, [r1, #12]
 8009be8:	061b      	lsls	r3, r3, #24
 8009bea:	b09d      	sub	sp, #116	; 0x74
 8009bec:	4607      	mov	r7, r0
 8009bee:	460d      	mov	r5, r1
 8009bf0:	4614      	mov	r4, r2
 8009bf2:	d50e      	bpl.n	8009c12 <_svfiprintf_r+0x32>
 8009bf4:	690b      	ldr	r3, [r1, #16]
 8009bf6:	b963      	cbnz	r3, 8009c12 <_svfiprintf_r+0x32>
 8009bf8:	2140      	movs	r1, #64	; 0x40
 8009bfa:	f7fd fcd7 	bl	80075ac <_malloc_r>
 8009bfe:	6028      	str	r0, [r5, #0]
 8009c00:	6128      	str	r0, [r5, #16]
 8009c02:	b920      	cbnz	r0, 8009c0e <_svfiprintf_r+0x2e>
 8009c04:	230c      	movs	r3, #12
 8009c06:	603b      	str	r3, [r7, #0]
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c0c:	e0d1      	b.n	8009db2 <_svfiprintf_r+0x1d2>
 8009c0e:	2340      	movs	r3, #64	; 0x40
 8009c10:	616b      	str	r3, [r5, #20]
 8009c12:	2300      	movs	r3, #0
 8009c14:	9309      	str	r3, [sp, #36]	; 0x24
 8009c16:	2320      	movs	r3, #32
 8009c18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c20:	2330      	movs	r3, #48	; 0x30
 8009c22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009dcc <_svfiprintf_r+0x1ec>
 8009c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c2a:	f04f 0901 	mov.w	r9, #1
 8009c2e:	4623      	mov	r3, r4
 8009c30:	469a      	mov	sl, r3
 8009c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c36:	b10a      	cbz	r2, 8009c3c <_svfiprintf_r+0x5c>
 8009c38:	2a25      	cmp	r2, #37	; 0x25
 8009c3a:	d1f9      	bne.n	8009c30 <_svfiprintf_r+0x50>
 8009c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c40:	d00b      	beq.n	8009c5a <_svfiprintf_r+0x7a>
 8009c42:	465b      	mov	r3, fp
 8009c44:	4622      	mov	r2, r4
 8009c46:	4629      	mov	r1, r5
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f7ff ff6d 	bl	8009b28 <__ssputs_r>
 8009c4e:	3001      	adds	r0, #1
 8009c50:	f000 80aa 	beq.w	8009da8 <_svfiprintf_r+0x1c8>
 8009c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c56:	445a      	add	r2, fp
 8009c58:	9209      	str	r2, [sp, #36]	; 0x24
 8009c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 80a2 	beq.w	8009da8 <_svfiprintf_r+0x1c8>
 8009c64:	2300      	movs	r3, #0
 8009c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c6e:	f10a 0a01 	add.w	sl, sl, #1
 8009c72:	9304      	str	r3, [sp, #16]
 8009c74:	9307      	str	r3, [sp, #28]
 8009c76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c7a:	931a      	str	r3, [sp, #104]	; 0x68
 8009c7c:	4654      	mov	r4, sl
 8009c7e:	2205      	movs	r2, #5
 8009c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c84:	4851      	ldr	r0, [pc, #324]	; (8009dcc <_svfiprintf_r+0x1ec>)
 8009c86:	f7f6 fac3 	bl	8000210 <memchr>
 8009c8a:	9a04      	ldr	r2, [sp, #16]
 8009c8c:	b9d8      	cbnz	r0, 8009cc6 <_svfiprintf_r+0xe6>
 8009c8e:	06d0      	lsls	r0, r2, #27
 8009c90:	bf44      	itt	mi
 8009c92:	2320      	movmi	r3, #32
 8009c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c98:	0711      	lsls	r1, r2, #28
 8009c9a:	bf44      	itt	mi
 8009c9c:	232b      	movmi	r3, #43	; 0x2b
 8009c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ca8:	d015      	beq.n	8009cd6 <_svfiprintf_r+0xf6>
 8009caa:	9a07      	ldr	r2, [sp, #28]
 8009cac:	4654      	mov	r4, sl
 8009cae:	2000      	movs	r0, #0
 8009cb0:	f04f 0c0a 	mov.w	ip, #10
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cba:	3b30      	subs	r3, #48	; 0x30
 8009cbc:	2b09      	cmp	r3, #9
 8009cbe:	d94e      	bls.n	8009d5e <_svfiprintf_r+0x17e>
 8009cc0:	b1b0      	cbz	r0, 8009cf0 <_svfiprintf_r+0x110>
 8009cc2:	9207      	str	r2, [sp, #28]
 8009cc4:	e014      	b.n	8009cf0 <_svfiprintf_r+0x110>
 8009cc6:	eba0 0308 	sub.w	r3, r0, r8
 8009cca:	fa09 f303 	lsl.w	r3, r9, r3
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	46a2      	mov	sl, r4
 8009cd4:	e7d2      	b.n	8009c7c <_svfiprintf_r+0x9c>
 8009cd6:	9b03      	ldr	r3, [sp, #12]
 8009cd8:	1d19      	adds	r1, r3, #4
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	9103      	str	r1, [sp, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	bfbb      	ittet	lt
 8009ce2:	425b      	neglt	r3, r3
 8009ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ce8:	9307      	strge	r3, [sp, #28]
 8009cea:	9307      	strlt	r3, [sp, #28]
 8009cec:	bfb8      	it	lt
 8009cee:	9204      	strlt	r2, [sp, #16]
 8009cf0:	7823      	ldrb	r3, [r4, #0]
 8009cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8009cf4:	d10c      	bne.n	8009d10 <_svfiprintf_r+0x130>
 8009cf6:	7863      	ldrb	r3, [r4, #1]
 8009cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cfa:	d135      	bne.n	8009d68 <_svfiprintf_r+0x188>
 8009cfc:	9b03      	ldr	r3, [sp, #12]
 8009cfe:	1d1a      	adds	r2, r3, #4
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	9203      	str	r2, [sp, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	bfb8      	it	lt
 8009d08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d0c:	3402      	adds	r4, #2
 8009d0e:	9305      	str	r3, [sp, #20]
 8009d10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ddc <_svfiprintf_r+0x1fc>
 8009d14:	7821      	ldrb	r1, [r4, #0]
 8009d16:	2203      	movs	r2, #3
 8009d18:	4650      	mov	r0, sl
 8009d1a:	f7f6 fa79 	bl	8000210 <memchr>
 8009d1e:	b140      	cbz	r0, 8009d32 <_svfiprintf_r+0x152>
 8009d20:	2340      	movs	r3, #64	; 0x40
 8009d22:	eba0 000a 	sub.w	r0, r0, sl
 8009d26:	fa03 f000 	lsl.w	r0, r3, r0
 8009d2a:	9b04      	ldr	r3, [sp, #16]
 8009d2c:	4303      	orrs	r3, r0
 8009d2e:	3401      	adds	r4, #1
 8009d30:	9304      	str	r3, [sp, #16]
 8009d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d36:	4826      	ldr	r0, [pc, #152]	; (8009dd0 <_svfiprintf_r+0x1f0>)
 8009d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d3c:	2206      	movs	r2, #6
 8009d3e:	f7f6 fa67 	bl	8000210 <memchr>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d038      	beq.n	8009db8 <_svfiprintf_r+0x1d8>
 8009d46:	4b23      	ldr	r3, [pc, #140]	; (8009dd4 <_svfiprintf_r+0x1f4>)
 8009d48:	bb1b      	cbnz	r3, 8009d92 <_svfiprintf_r+0x1b2>
 8009d4a:	9b03      	ldr	r3, [sp, #12]
 8009d4c:	3307      	adds	r3, #7
 8009d4e:	f023 0307 	bic.w	r3, r3, #7
 8009d52:	3308      	adds	r3, #8
 8009d54:	9303      	str	r3, [sp, #12]
 8009d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d58:	4433      	add	r3, r6
 8009d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5c:	e767      	b.n	8009c2e <_svfiprintf_r+0x4e>
 8009d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d62:	460c      	mov	r4, r1
 8009d64:	2001      	movs	r0, #1
 8009d66:	e7a5      	b.n	8009cb4 <_svfiprintf_r+0xd4>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	3401      	adds	r4, #1
 8009d6c:	9305      	str	r3, [sp, #20]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	f04f 0c0a 	mov.w	ip, #10
 8009d74:	4620      	mov	r0, r4
 8009d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d7a:	3a30      	subs	r2, #48	; 0x30
 8009d7c:	2a09      	cmp	r2, #9
 8009d7e:	d903      	bls.n	8009d88 <_svfiprintf_r+0x1a8>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d0c5      	beq.n	8009d10 <_svfiprintf_r+0x130>
 8009d84:	9105      	str	r1, [sp, #20]
 8009d86:	e7c3      	b.n	8009d10 <_svfiprintf_r+0x130>
 8009d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e7f0      	b.n	8009d74 <_svfiprintf_r+0x194>
 8009d92:	ab03      	add	r3, sp, #12
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	462a      	mov	r2, r5
 8009d98:	4b0f      	ldr	r3, [pc, #60]	; (8009dd8 <_svfiprintf_r+0x1f8>)
 8009d9a:	a904      	add	r1, sp, #16
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	f7fd fd19 	bl	80077d4 <_printf_float>
 8009da2:	1c42      	adds	r2, r0, #1
 8009da4:	4606      	mov	r6, r0
 8009da6:	d1d6      	bne.n	8009d56 <_svfiprintf_r+0x176>
 8009da8:	89ab      	ldrh	r3, [r5, #12]
 8009daa:	065b      	lsls	r3, r3, #25
 8009dac:	f53f af2c 	bmi.w	8009c08 <_svfiprintf_r+0x28>
 8009db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009db2:	b01d      	add	sp, #116	; 0x74
 8009db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db8:	ab03      	add	r3, sp, #12
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	462a      	mov	r2, r5
 8009dbe:	4b06      	ldr	r3, [pc, #24]	; (8009dd8 <_svfiprintf_r+0x1f8>)
 8009dc0:	a904      	add	r1, sp, #16
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	f7fd ffaa 	bl	8007d1c <_printf_i>
 8009dc8:	e7eb      	b.n	8009da2 <_svfiprintf_r+0x1c2>
 8009dca:	bf00      	nop
 8009dcc:	0800a91c 	.word	0x0800a91c
 8009dd0:	0800a926 	.word	0x0800a926
 8009dd4:	080077d5 	.word	0x080077d5
 8009dd8:	08009b29 	.word	0x08009b29
 8009ddc:	0800a922 	.word	0x0800a922

08009de0 <__sfputc_r>:
 8009de0:	6893      	ldr	r3, [r2, #8]
 8009de2:	3b01      	subs	r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	b410      	push	{r4}
 8009de8:	6093      	str	r3, [r2, #8]
 8009dea:	da08      	bge.n	8009dfe <__sfputc_r+0x1e>
 8009dec:	6994      	ldr	r4, [r2, #24]
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	db01      	blt.n	8009df6 <__sfputc_r+0x16>
 8009df2:	290a      	cmp	r1, #10
 8009df4:	d103      	bne.n	8009dfe <__sfputc_r+0x1e>
 8009df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dfa:	f7fe bb0f 	b.w	800841c <__swbuf_r>
 8009dfe:	6813      	ldr	r3, [r2, #0]
 8009e00:	1c58      	adds	r0, r3, #1
 8009e02:	6010      	str	r0, [r2, #0]
 8009e04:	7019      	strb	r1, [r3, #0]
 8009e06:	4608      	mov	r0, r1
 8009e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <__sfputs_r>:
 8009e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e10:	4606      	mov	r6, r0
 8009e12:	460f      	mov	r7, r1
 8009e14:	4614      	mov	r4, r2
 8009e16:	18d5      	adds	r5, r2, r3
 8009e18:	42ac      	cmp	r4, r5
 8009e1a:	d101      	bne.n	8009e20 <__sfputs_r+0x12>
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e007      	b.n	8009e30 <__sfputs_r+0x22>
 8009e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e24:	463a      	mov	r2, r7
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7ff ffda 	bl	8009de0 <__sfputc_r>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d1f3      	bne.n	8009e18 <__sfputs_r+0xa>
 8009e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e34 <_vfiprintf_r>:
 8009e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e38:	460d      	mov	r5, r1
 8009e3a:	b09d      	sub	sp, #116	; 0x74
 8009e3c:	4614      	mov	r4, r2
 8009e3e:	4698      	mov	r8, r3
 8009e40:	4606      	mov	r6, r0
 8009e42:	b118      	cbz	r0, 8009e4c <_vfiprintf_r+0x18>
 8009e44:	6983      	ldr	r3, [r0, #24]
 8009e46:	b90b      	cbnz	r3, 8009e4c <_vfiprintf_r+0x18>
 8009e48:	f7fd fa68 	bl	800731c <__sinit>
 8009e4c:	4b89      	ldr	r3, [pc, #548]	; (800a074 <_vfiprintf_r+0x240>)
 8009e4e:	429d      	cmp	r5, r3
 8009e50:	d11b      	bne.n	8009e8a <_vfiprintf_r+0x56>
 8009e52:	6875      	ldr	r5, [r6, #4]
 8009e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e56:	07d9      	lsls	r1, r3, #31
 8009e58:	d405      	bmi.n	8009e66 <_vfiprintf_r+0x32>
 8009e5a:	89ab      	ldrh	r3, [r5, #12]
 8009e5c:	059a      	lsls	r2, r3, #22
 8009e5e:	d402      	bmi.n	8009e66 <_vfiprintf_r+0x32>
 8009e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e62:	f7fd fb1e 	bl	80074a2 <__retarget_lock_acquire_recursive>
 8009e66:	89ab      	ldrh	r3, [r5, #12]
 8009e68:	071b      	lsls	r3, r3, #28
 8009e6a:	d501      	bpl.n	8009e70 <_vfiprintf_r+0x3c>
 8009e6c:	692b      	ldr	r3, [r5, #16]
 8009e6e:	b9eb      	cbnz	r3, 8009eac <_vfiprintf_r+0x78>
 8009e70:	4629      	mov	r1, r5
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7fe fb36 	bl	80084e4 <__swsetup_r>
 8009e78:	b1c0      	cbz	r0, 8009eac <_vfiprintf_r+0x78>
 8009e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e7c:	07dc      	lsls	r4, r3, #31
 8009e7e:	d50e      	bpl.n	8009e9e <_vfiprintf_r+0x6a>
 8009e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e84:	b01d      	add	sp, #116	; 0x74
 8009e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8a:	4b7b      	ldr	r3, [pc, #492]	; (800a078 <_vfiprintf_r+0x244>)
 8009e8c:	429d      	cmp	r5, r3
 8009e8e:	d101      	bne.n	8009e94 <_vfiprintf_r+0x60>
 8009e90:	68b5      	ldr	r5, [r6, #8]
 8009e92:	e7df      	b.n	8009e54 <_vfiprintf_r+0x20>
 8009e94:	4b79      	ldr	r3, [pc, #484]	; (800a07c <_vfiprintf_r+0x248>)
 8009e96:	429d      	cmp	r5, r3
 8009e98:	bf08      	it	eq
 8009e9a:	68f5      	ldreq	r5, [r6, #12]
 8009e9c:	e7da      	b.n	8009e54 <_vfiprintf_r+0x20>
 8009e9e:	89ab      	ldrh	r3, [r5, #12]
 8009ea0:	0598      	lsls	r0, r3, #22
 8009ea2:	d4ed      	bmi.n	8009e80 <_vfiprintf_r+0x4c>
 8009ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ea6:	f7fd fafd 	bl	80074a4 <__retarget_lock_release_recursive>
 8009eaa:	e7e9      	b.n	8009e80 <_vfiprintf_r+0x4c>
 8009eac:	2300      	movs	r3, #0
 8009eae:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eba:	2330      	movs	r3, #48	; 0x30
 8009ebc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a080 <_vfiprintf_r+0x24c>
 8009ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ec4:	f04f 0901 	mov.w	r9, #1
 8009ec8:	4623      	mov	r3, r4
 8009eca:	469a      	mov	sl, r3
 8009ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ed0:	b10a      	cbz	r2, 8009ed6 <_vfiprintf_r+0xa2>
 8009ed2:	2a25      	cmp	r2, #37	; 0x25
 8009ed4:	d1f9      	bne.n	8009eca <_vfiprintf_r+0x96>
 8009ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eda:	d00b      	beq.n	8009ef4 <_vfiprintf_r+0xc0>
 8009edc:	465b      	mov	r3, fp
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7ff ff93 	bl	8009e0e <__sfputs_r>
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f000 80aa 	beq.w	800a042 <_vfiprintf_r+0x20e>
 8009eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef0:	445a      	add	r2, fp
 8009ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 80a2 	beq.w	800a042 <_vfiprintf_r+0x20e>
 8009efe:	2300      	movs	r3, #0
 8009f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f08:	f10a 0a01 	add.w	sl, sl, #1
 8009f0c:	9304      	str	r3, [sp, #16]
 8009f0e:	9307      	str	r3, [sp, #28]
 8009f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f14:	931a      	str	r3, [sp, #104]	; 0x68
 8009f16:	4654      	mov	r4, sl
 8009f18:	2205      	movs	r2, #5
 8009f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1e:	4858      	ldr	r0, [pc, #352]	; (800a080 <_vfiprintf_r+0x24c>)
 8009f20:	f7f6 f976 	bl	8000210 <memchr>
 8009f24:	9a04      	ldr	r2, [sp, #16]
 8009f26:	b9d8      	cbnz	r0, 8009f60 <_vfiprintf_r+0x12c>
 8009f28:	06d1      	lsls	r1, r2, #27
 8009f2a:	bf44      	itt	mi
 8009f2c:	2320      	movmi	r3, #32
 8009f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f32:	0713      	lsls	r3, r2, #28
 8009f34:	bf44      	itt	mi
 8009f36:	232b      	movmi	r3, #43	; 0x2b
 8009f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f40:	2b2a      	cmp	r3, #42	; 0x2a
 8009f42:	d015      	beq.n	8009f70 <_vfiprintf_r+0x13c>
 8009f44:	9a07      	ldr	r2, [sp, #28]
 8009f46:	4654      	mov	r4, sl
 8009f48:	2000      	movs	r0, #0
 8009f4a:	f04f 0c0a 	mov.w	ip, #10
 8009f4e:	4621      	mov	r1, r4
 8009f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f54:	3b30      	subs	r3, #48	; 0x30
 8009f56:	2b09      	cmp	r3, #9
 8009f58:	d94e      	bls.n	8009ff8 <_vfiprintf_r+0x1c4>
 8009f5a:	b1b0      	cbz	r0, 8009f8a <_vfiprintf_r+0x156>
 8009f5c:	9207      	str	r2, [sp, #28]
 8009f5e:	e014      	b.n	8009f8a <_vfiprintf_r+0x156>
 8009f60:	eba0 0308 	sub.w	r3, r0, r8
 8009f64:	fa09 f303 	lsl.w	r3, r9, r3
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	9304      	str	r3, [sp, #16]
 8009f6c:	46a2      	mov	sl, r4
 8009f6e:	e7d2      	b.n	8009f16 <_vfiprintf_r+0xe2>
 8009f70:	9b03      	ldr	r3, [sp, #12]
 8009f72:	1d19      	adds	r1, r3, #4
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	9103      	str	r1, [sp, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	bfbb      	ittet	lt
 8009f7c:	425b      	neglt	r3, r3
 8009f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f82:	9307      	strge	r3, [sp, #28]
 8009f84:	9307      	strlt	r3, [sp, #28]
 8009f86:	bfb8      	it	lt
 8009f88:	9204      	strlt	r2, [sp, #16]
 8009f8a:	7823      	ldrb	r3, [r4, #0]
 8009f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f8e:	d10c      	bne.n	8009faa <_vfiprintf_r+0x176>
 8009f90:	7863      	ldrb	r3, [r4, #1]
 8009f92:	2b2a      	cmp	r3, #42	; 0x2a
 8009f94:	d135      	bne.n	800a002 <_vfiprintf_r+0x1ce>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	1d1a      	adds	r2, r3, #4
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	9203      	str	r2, [sp, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	bfb8      	it	lt
 8009fa2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009fa6:	3402      	adds	r4, #2
 8009fa8:	9305      	str	r3, [sp, #20]
 8009faa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a090 <_vfiprintf_r+0x25c>
 8009fae:	7821      	ldrb	r1, [r4, #0]
 8009fb0:	2203      	movs	r2, #3
 8009fb2:	4650      	mov	r0, sl
 8009fb4:	f7f6 f92c 	bl	8000210 <memchr>
 8009fb8:	b140      	cbz	r0, 8009fcc <_vfiprintf_r+0x198>
 8009fba:	2340      	movs	r3, #64	; 0x40
 8009fbc:	eba0 000a 	sub.w	r0, r0, sl
 8009fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8009fc4:	9b04      	ldr	r3, [sp, #16]
 8009fc6:	4303      	orrs	r3, r0
 8009fc8:	3401      	adds	r4, #1
 8009fca:	9304      	str	r3, [sp, #16]
 8009fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd0:	482c      	ldr	r0, [pc, #176]	; (800a084 <_vfiprintf_r+0x250>)
 8009fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fd6:	2206      	movs	r2, #6
 8009fd8:	f7f6 f91a 	bl	8000210 <memchr>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d03f      	beq.n	800a060 <_vfiprintf_r+0x22c>
 8009fe0:	4b29      	ldr	r3, [pc, #164]	; (800a088 <_vfiprintf_r+0x254>)
 8009fe2:	bb1b      	cbnz	r3, 800a02c <_vfiprintf_r+0x1f8>
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	3307      	adds	r3, #7
 8009fe8:	f023 0307 	bic.w	r3, r3, #7
 8009fec:	3308      	adds	r3, #8
 8009fee:	9303      	str	r3, [sp, #12]
 8009ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff2:	443b      	add	r3, r7
 8009ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff6:	e767      	b.n	8009ec8 <_vfiprintf_r+0x94>
 8009ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	2001      	movs	r0, #1
 800a000:	e7a5      	b.n	8009f4e <_vfiprintf_r+0x11a>
 800a002:	2300      	movs	r3, #0
 800a004:	3401      	adds	r4, #1
 800a006:	9305      	str	r3, [sp, #20]
 800a008:	4619      	mov	r1, r3
 800a00a:	f04f 0c0a 	mov.w	ip, #10
 800a00e:	4620      	mov	r0, r4
 800a010:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a014:	3a30      	subs	r2, #48	; 0x30
 800a016:	2a09      	cmp	r2, #9
 800a018:	d903      	bls.n	800a022 <_vfiprintf_r+0x1ee>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0c5      	beq.n	8009faa <_vfiprintf_r+0x176>
 800a01e:	9105      	str	r1, [sp, #20]
 800a020:	e7c3      	b.n	8009faa <_vfiprintf_r+0x176>
 800a022:	fb0c 2101 	mla	r1, ip, r1, r2
 800a026:	4604      	mov	r4, r0
 800a028:	2301      	movs	r3, #1
 800a02a:	e7f0      	b.n	800a00e <_vfiprintf_r+0x1da>
 800a02c:	ab03      	add	r3, sp, #12
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	462a      	mov	r2, r5
 800a032:	4b16      	ldr	r3, [pc, #88]	; (800a08c <_vfiprintf_r+0x258>)
 800a034:	a904      	add	r1, sp, #16
 800a036:	4630      	mov	r0, r6
 800a038:	f7fd fbcc 	bl	80077d4 <_printf_float>
 800a03c:	4607      	mov	r7, r0
 800a03e:	1c78      	adds	r0, r7, #1
 800a040:	d1d6      	bne.n	8009ff0 <_vfiprintf_r+0x1bc>
 800a042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a044:	07d9      	lsls	r1, r3, #31
 800a046:	d405      	bmi.n	800a054 <_vfiprintf_r+0x220>
 800a048:	89ab      	ldrh	r3, [r5, #12]
 800a04a:	059a      	lsls	r2, r3, #22
 800a04c:	d402      	bmi.n	800a054 <_vfiprintf_r+0x220>
 800a04e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a050:	f7fd fa28 	bl	80074a4 <__retarget_lock_release_recursive>
 800a054:	89ab      	ldrh	r3, [r5, #12]
 800a056:	065b      	lsls	r3, r3, #25
 800a058:	f53f af12 	bmi.w	8009e80 <_vfiprintf_r+0x4c>
 800a05c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a05e:	e711      	b.n	8009e84 <_vfiprintf_r+0x50>
 800a060:	ab03      	add	r3, sp, #12
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	462a      	mov	r2, r5
 800a066:	4b09      	ldr	r3, [pc, #36]	; (800a08c <_vfiprintf_r+0x258>)
 800a068:	a904      	add	r1, sp, #16
 800a06a:	4630      	mov	r0, r6
 800a06c:	f7fd fe56 	bl	8007d1c <_printf_i>
 800a070:	e7e4      	b.n	800a03c <_vfiprintf_r+0x208>
 800a072:	bf00      	nop
 800a074:	0800a5b8 	.word	0x0800a5b8
 800a078:	0800a5d8 	.word	0x0800a5d8
 800a07c:	0800a598 	.word	0x0800a598
 800a080:	0800a91c 	.word	0x0800a91c
 800a084:	0800a926 	.word	0x0800a926
 800a088:	080077d5 	.word	0x080077d5
 800a08c:	08009e0f 	.word	0x08009e0f
 800a090:	0800a922 	.word	0x0800a922

0800a094 <_read_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4d07      	ldr	r5, [pc, #28]	; (800a0b4 <_read_r+0x20>)
 800a098:	4604      	mov	r4, r0
 800a09a:	4608      	mov	r0, r1
 800a09c:	4611      	mov	r1, r2
 800a09e:	2200      	movs	r2, #0
 800a0a0:	602a      	str	r2, [r5, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f7f9 fa4a 	bl	800353c <_read>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_read_r+0x1e>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_read_r+0x1e>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	20001c60 	.word	0x20001c60

0800a0b8 <__assert_func>:
 800a0b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0ba:	4614      	mov	r4, r2
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4b09      	ldr	r3, [pc, #36]	; (800a0e4 <__assert_func+0x2c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	68d8      	ldr	r0, [r3, #12]
 800a0c6:	b14c      	cbz	r4, 800a0dc <__assert_func+0x24>
 800a0c8:	4b07      	ldr	r3, [pc, #28]	; (800a0e8 <__assert_func+0x30>)
 800a0ca:	9100      	str	r1, [sp, #0]
 800a0cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0d0:	4906      	ldr	r1, [pc, #24]	; (800a0ec <__assert_func+0x34>)
 800a0d2:	462b      	mov	r3, r5
 800a0d4:	f000 f80e 	bl	800a0f4 <fiprintf>
 800a0d8:	f000 f8a8 	bl	800a22c <abort>
 800a0dc:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <__assert_func+0x38>)
 800a0de:	461c      	mov	r4, r3
 800a0e0:	e7f3      	b.n	800a0ca <__assert_func+0x12>
 800a0e2:	bf00      	nop
 800a0e4:	20000010 	.word	0x20000010
 800a0e8:	0800a92d 	.word	0x0800a92d
 800a0ec:	0800a93a 	.word	0x0800a93a
 800a0f0:	0800a968 	.word	0x0800a968

0800a0f4 <fiprintf>:
 800a0f4:	b40e      	push	{r1, r2, r3}
 800a0f6:	b503      	push	{r0, r1, lr}
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	ab03      	add	r3, sp, #12
 800a0fc:	4805      	ldr	r0, [pc, #20]	; (800a114 <fiprintf+0x20>)
 800a0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a102:	6800      	ldr	r0, [r0, #0]
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	f7ff fe95 	bl	8009e34 <_vfiprintf_r>
 800a10a:	b002      	add	sp, #8
 800a10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a110:	b003      	add	sp, #12
 800a112:	4770      	bx	lr
 800a114:	20000010 	.word	0x20000010

0800a118 <_fstat_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d07      	ldr	r5, [pc, #28]	; (800a138 <_fstat_r+0x20>)
 800a11c:	2300      	movs	r3, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	4611      	mov	r1, r2
 800a124:	602b      	str	r3, [r5, #0]
 800a126:	f7f9 fa32 	bl	800358e <_fstat>
 800a12a:	1c43      	adds	r3, r0, #1
 800a12c:	d102      	bne.n	800a134 <_fstat_r+0x1c>
 800a12e:	682b      	ldr	r3, [r5, #0]
 800a130:	b103      	cbz	r3, 800a134 <_fstat_r+0x1c>
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	bd38      	pop	{r3, r4, r5, pc}
 800a136:	bf00      	nop
 800a138:	20001c60 	.word	0x20001c60

0800a13c <_isatty_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d06      	ldr	r5, [pc, #24]	; (800a158 <_isatty_r+0x1c>)
 800a140:	2300      	movs	r3, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	602b      	str	r3, [r5, #0]
 800a148:	f7f9 fa31 	bl	80035ae <_isatty>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_isatty_r+0x1a>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_isatty_r+0x1a>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	20001c60 	.word	0x20001c60

0800a15c <__ascii_mbtowc>:
 800a15c:	b082      	sub	sp, #8
 800a15e:	b901      	cbnz	r1, 800a162 <__ascii_mbtowc+0x6>
 800a160:	a901      	add	r1, sp, #4
 800a162:	b142      	cbz	r2, 800a176 <__ascii_mbtowc+0x1a>
 800a164:	b14b      	cbz	r3, 800a17a <__ascii_mbtowc+0x1e>
 800a166:	7813      	ldrb	r3, [r2, #0]
 800a168:	600b      	str	r3, [r1, #0]
 800a16a:	7812      	ldrb	r2, [r2, #0]
 800a16c:	1e10      	subs	r0, r2, #0
 800a16e:	bf18      	it	ne
 800a170:	2001      	movne	r0, #1
 800a172:	b002      	add	sp, #8
 800a174:	4770      	bx	lr
 800a176:	4610      	mov	r0, r2
 800a178:	e7fb      	b.n	800a172 <__ascii_mbtowc+0x16>
 800a17a:	f06f 0001 	mvn.w	r0, #1
 800a17e:	e7f8      	b.n	800a172 <__ascii_mbtowc+0x16>

0800a180 <memmove>:
 800a180:	4288      	cmp	r0, r1
 800a182:	b510      	push	{r4, lr}
 800a184:	eb01 0402 	add.w	r4, r1, r2
 800a188:	d902      	bls.n	800a190 <memmove+0x10>
 800a18a:	4284      	cmp	r4, r0
 800a18c:	4623      	mov	r3, r4
 800a18e:	d807      	bhi.n	800a1a0 <memmove+0x20>
 800a190:	1e43      	subs	r3, r0, #1
 800a192:	42a1      	cmp	r1, r4
 800a194:	d008      	beq.n	800a1a8 <memmove+0x28>
 800a196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a19a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a19e:	e7f8      	b.n	800a192 <memmove+0x12>
 800a1a0:	4402      	add	r2, r0
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	428a      	cmp	r2, r1
 800a1a6:	d100      	bne.n	800a1aa <memmove+0x2a>
 800a1a8:	bd10      	pop	{r4, pc}
 800a1aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1b2:	e7f7      	b.n	800a1a4 <memmove+0x24>

0800a1b4 <_realloc_r>:
 800a1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b8:	4680      	mov	r8, r0
 800a1ba:	4614      	mov	r4, r2
 800a1bc:	460e      	mov	r6, r1
 800a1be:	b921      	cbnz	r1, 800a1ca <_realloc_r+0x16>
 800a1c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	f7fd b9f1 	b.w	80075ac <_malloc_r>
 800a1ca:	b92a      	cbnz	r2, 800a1d8 <_realloc_r+0x24>
 800a1cc:	f7fd f982 	bl	80074d4 <_free_r>
 800a1d0:	4625      	mov	r5, r4
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d8:	f000 f82f 	bl	800a23a <_malloc_usable_size_r>
 800a1dc:	4284      	cmp	r4, r0
 800a1de:	4607      	mov	r7, r0
 800a1e0:	d802      	bhi.n	800a1e8 <_realloc_r+0x34>
 800a1e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1e6:	d812      	bhi.n	800a20e <_realloc_r+0x5a>
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	f7fd f9de 	bl	80075ac <_malloc_r>
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d0ed      	beq.n	800a1d2 <_realloc_r+0x1e>
 800a1f6:	42bc      	cmp	r4, r7
 800a1f8:	4622      	mov	r2, r4
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	bf28      	it	cs
 800a1fe:	463a      	movcs	r2, r7
 800a200:	f7fd f951 	bl	80074a6 <memcpy>
 800a204:	4631      	mov	r1, r6
 800a206:	4640      	mov	r0, r8
 800a208:	f7fd f964 	bl	80074d4 <_free_r>
 800a20c:	e7e1      	b.n	800a1d2 <_realloc_r+0x1e>
 800a20e:	4635      	mov	r5, r6
 800a210:	e7df      	b.n	800a1d2 <_realloc_r+0x1e>

0800a212 <__ascii_wctomb>:
 800a212:	b149      	cbz	r1, 800a228 <__ascii_wctomb+0x16>
 800a214:	2aff      	cmp	r2, #255	; 0xff
 800a216:	bf85      	ittet	hi
 800a218:	238a      	movhi	r3, #138	; 0x8a
 800a21a:	6003      	strhi	r3, [r0, #0]
 800a21c:	700a      	strbls	r2, [r1, #0]
 800a21e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a222:	bf98      	it	ls
 800a224:	2001      	movls	r0, #1
 800a226:	4770      	bx	lr
 800a228:	4608      	mov	r0, r1
 800a22a:	4770      	bx	lr

0800a22c <abort>:
 800a22c:	b508      	push	{r3, lr}
 800a22e:	2006      	movs	r0, #6
 800a230:	f000 f834 	bl	800a29c <raise>
 800a234:	2001      	movs	r0, #1
 800a236:	f7f9 f977 	bl	8003528 <_exit>

0800a23a <_malloc_usable_size_r>:
 800a23a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a23e:	1f18      	subs	r0, r3, #4
 800a240:	2b00      	cmp	r3, #0
 800a242:	bfbc      	itt	lt
 800a244:	580b      	ldrlt	r3, [r1, r0]
 800a246:	18c0      	addlt	r0, r0, r3
 800a248:	4770      	bx	lr

0800a24a <_raise_r>:
 800a24a:	291f      	cmp	r1, #31
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4604      	mov	r4, r0
 800a250:	460d      	mov	r5, r1
 800a252:	d904      	bls.n	800a25e <_raise_r+0x14>
 800a254:	2316      	movs	r3, #22
 800a256:	6003      	str	r3, [r0, #0]
 800a258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a25c:	bd38      	pop	{r3, r4, r5, pc}
 800a25e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a260:	b112      	cbz	r2, 800a268 <_raise_r+0x1e>
 800a262:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a266:	b94b      	cbnz	r3, 800a27c <_raise_r+0x32>
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 f831 	bl	800a2d0 <_getpid_r>
 800a26e:	462a      	mov	r2, r5
 800a270:	4601      	mov	r1, r0
 800a272:	4620      	mov	r0, r4
 800a274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a278:	f000 b818 	b.w	800a2ac <_kill_r>
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d00a      	beq.n	800a296 <_raise_r+0x4c>
 800a280:	1c59      	adds	r1, r3, #1
 800a282:	d103      	bne.n	800a28c <_raise_r+0x42>
 800a284:	2316      	movs	r3, #22
 800a286:	6003      	str	r3, [r0, #0]
 800a288:	2001      	movs	r0, #1
 800a28a:	e7e7      	b.n	800a25c <_raise_r+0x12>
 800a28c:	2400      	movs	r4, #0
 800a28e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a292:	4628      	mov	r0, r5
 800a294:	4798      	blx	r3
 800a296:	2000      	movs	r0, #0
 800a298:	e7e0      	b.n	800a25c <_raise_r+0x12>
	...

0800a29c <raise>:
 800a29c:	4b02      	ldr	r3, [pc, #8]	; (800a2a8 <raise+0xc>)
 800a29e:	4601      	mov	r1, r0
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	f7ff bfd2 	b.w	800a24a <_raise_r>
 800a2a6:	bf00      	nop
 800a2a8:	20000010 	.word	0x20000010

0800a2ac <_kill_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4d07      	ldr	r5, [pc, #28]	; (800a2cc <_kill_r+0x20>)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	602b      	str	r3, [r5, #0]
 800a2ba:	f7f9 f925 	bl	8003508 <_kill>
 800a2be:	1c43      	adds	r3, r0, #1
 800a2c0:	d102      	bne.n	800a2c8 <_kill_r+0x1c>
 800a2c2:	682b      	ldr	r3, [r5, #0]
 800a2c4:	b103      	cbz	r3, 800a2c8 <_kill_r+0x1c>
 800a2c6:	6023      	str	r3, [r4, #0]
 800a2c8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20001c60 	.word	0x20001c60

0800a2d0 <_getpid_r>:
 800a2d0:	f7f9 b912 	b.w	80034f8 <_getpid>

0800a2d4 <sqrt>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	ed2d 8b02 	vpush	{d8}
 800a2da:	ec55 4b10 	vmov	r4, r5, d0
 800a2de:	f000 f825 	bl	800a32c <__ieee754_sqrt>
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	462b      	mov	r3, r5
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	eeb0 8a40 	vmov.f32	s16, s0
 800a2ee:	eef0 8a60 	vmov.f32	s17, s1
 800a2f2:	f7f6 fc33 	bl	8000b5c <__aeabi_dcmpun>
 800a2f6:	b990      	cbnz	r0, 800a31e <sqrt+0x4a>
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	4629      	mov	r1, r5
 800a300:	f7f6 fc04 	bl	8000b0c <__aeabi_dcmplt>
 800a304:	b158      	cbz	r0, 800a31e <sqrt+0x4a>
 800a306:	f7fc fed7 	bl	80070b8 <__errno>
 800a30a:	2321      	movs	r3, #33	; 0x21
 800a30c:	6003      	str	r3, [r0, #0]
 800a30e:	2200      	movs	r2, #0
 800a310:	2300      	movs	r3, #0
 800a312:	4610      	mov	r0, r2
 800a314:	4619      	mov	r1, r3
 800a316:	f7f6 fab1 	bl	800087c <__aeabi_ddiv>
 800a31a:	ec41 0b18 	vmov	d8, r0, r1
 800a31e:	eeb0 0a48 	vmov.f32	s0, s16
 800a322:	eef0 0a68 	vmov.f32	s1, s17
 800a326:	ecbd 8b02 	vpop	{d8}
 800a32a:	bd38      	pop	{r3, r4, r5, pc}

0800a32c <__ieee754_sqrt>:
 800a32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a330:	ec55 4b10 	vmov	r4, r5, d0
 800a334:	4e55      	ldr	r6, [pc, #340]	; (800a48c <__ieee754_sqrt+0x160>)
 800a336:	43ae      	bics	r6, r5
 800a338:	ee10 0a10 	vmov	r0, s0
 800a33c:	ee10 3a10 	vmov	r3, s0
 800a340:	462a      	mov	r2, r5
 800a342:	4629      	mov	r1, r5
 800a344:	d110      	bne.n	800a368 <__ieee754_sqrt+0x3c>
 800a346:	ee10 2a10 	vmov	r2, s0
 800a34a:	462b      	mov	r3, r5
 800a34c:	f7f6 f96c 	bl	8000628 <__aeabi_dmul>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	4620      	mov	r0, r4
 800a356:	4629      	mov	r1, r5
 800a358:	f7f5 ffb0 	bl	80002bc <__adddf3>
 800a35c:	4604      	mov	r4, r0
 800a35e:	460d      	mov	r5, r1
 800a360:	ec45 4b10 	vmov	d0, r4, r5
 800a364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a368:	2d00      	cmp	r5, #0
 800a36a:	dc10      	bgt.n	800a38e <__ieee754_sqrt+0x62>
 800a36c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a370:	4330      	orrs	r0, r6
 800a372:	d0f5      	beq.n	800a360 <__ieee754_sqrt+0x34>
 800a374:	b15d      	cbz	r5, 800a38e <__ieee754_sqrt+0x62>
 800a376:	ee10 2a10 	vmov	r2, s0
 800a37a:	462b      	mov	r3, r5
 800a37c:	ee10 0a10 	vmov	r0, s0
 800a380:	f7f5 ff9a 	bl	80002b8 <__aeabi_dsub>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	f7f6 fa78 	bl	800087c <__aeabi_ddiv>
 800a38c:	e7e6      	b.n	800a35c <__ieee754_sqrt+0x30>
 800a38e:	1512      	asrs	r2, r2, #20
 800a390:	d074      	beq.n	800a47c <__ieee754_sqrt+0x150>
 800a392:	07d4      	lsls	r4, r2, #31
 800a394:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a398:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a39c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a3a0:	bf5e      	ittt	pl
 800a3a2:	0fda      	lsrpl	r2, r3, #31
 800a3a4:	005b      	lslpl	r3, r3, #1
 800a3a6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a3aa:	2400      	movs	r4, #0
 800a3ac:	0fda      	lsrs	r2, r3, #31
 800a3ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a3b2:	107f      	asrs	r7, r7, #1
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	2516      	movs	r5, #22
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a3be:	1886      	adds	r6, r0, r2
 800a3c0:	428e      	cmp	r6, r1
 800a3c2:	bfde      	ittt	le
 800a3c4:	1b89      	suble	r1, r1, r6
 800a3c6:	18b0      	addle	r0, r6, r2
 800a3c8:	18a4      	addle	r4, r4, r2
 800a3ca:	0049      	lsls	r1, r1, #1
 800a3cc:	3d01      	subs	r5, #1
 800a3ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a3d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a3d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a3da:	d1f0      	bne.n	800a3be <__ieee754_sqrt+0x92>
 800a3dc:	462a      	mov	r2, r5
 800a3de:	f04f 0e20 	mov.w	lr, #32
 800a3e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a3e6:	4281      	cmp	r1, r0
 800a3e8:	eb06 0c05 	add.w	ip, r6, r5
 800a3ec:	dc02      	bgt.n	800a3f4 <__ieee754_sqrt+0xc8>
 800a3ee:	d113      	bne.n	800a418 <__ieee754_sqrt+0xec>
 800a3f0:	459c      	cmp	ip, r3
 800a3f2:	d811      	bhi.n	800a418 <__ieee754_sqrt+0xec>
 800a3f4:	f1bc 0f00 	cmp.w	ip, #0
 800a3f8:	eb0c 0506 	add.w	r5, ip, r6
 800a3fc:	da43      	bge.n	800a486 <__ieee754_sqrt+0x15a>
 800a3fe:	2d00      	cmp	r5, #0
 800a400:	db41      	blt.n	800a486 <__ieee754_sqrt+0x15a>
 800a402:	f100 0801 	add.w	r8, r0, #1
 800a406:	1a09      	subs	r1, r1, r0
 800a408:	459c      	cmp	ip, r3
 800a40a:	bf88      	it	hi
 800a40c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800a410:	eba3 030c 	sub.w	r3, r3, ip
 800a414:	4432      	add	r2, r6
 800a416:	4640      	mov	r0, r8
 800a418:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a41c:	f1be 0e01 	subs.w	lr, lr, #1
 800a420:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a424:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a428:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a42c:	d1db      	bne.n	800a3e6 <__ieee754_sqrt+0xba>
 800a42e:	430b      	orrs	r3, r1
 800a430:	d006      	beq.n	800a440 <__ieee754_sqrt+0x114>
 800a432:	1c50      	adds	r0, r2, #1
 800a434:	bf13      	iteet	ne
 800a436:	3201      	addne	r2, #1
 800a438:	3401      	addeq	r4, #1
 800a43a:	4672      	moveq	r2, lr
 800a43c:	f022 0201 	bicne.w	r2, r2, #1
 800a440:	1063      	asrs	r3, r4, #1
 800a442:	0852      	lsrs	r2, r2, #1
 800a444:	07e1      	lsls	r1, r4, #31
 800a446:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a44a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a44e:	bf48      	it	mi
 800a450:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a454:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a458:	4614      	mov	r4, r2
 800a45a:	e781      	b.n	800a360 <__ieee754_sqrt+0x34>
 800a45c:	0ad9      	lsrs	r1, r3, #11
 800a45e:	3815      	subs	r0, #21
 800a460:	055b      	lsls	r3, r3, #21
 800a462:	2900      	cmp	r1, #0
 800a464:	d0fa      	beq.n	800a45c <__ieee754_sqrt+0x130>
 800a466:	02cd      	lsls	r5, r1, #11
 800a468:	d50a      	bpl.n	800a480 <__ieee754_sqrt+0x154>
 800a46a:	f1c2 0420 	rsb	r4, r2, #32
 800a46e:	fa23 f404 	lsr.w	r4, r3, r4
 800a472:	1e55      	subs	r5, r2, #1
 800a474:	4093      	lsls	r3, r2
 800a476:	4321      	orrs	r1, r4
 800a478:	1b42      	subs	r2, r0, r5
 800a47a:	e78a      	b.n	800a392 <__ieee754_sqrt+0x66>
 800a47c:	4610      	mov	r0, r2
 800a47e:	e7f0      	b.n	800a462 <__ieee754_sqrt+0x136>
 800a480:	0049      	lsls	r1, r1, #1
 800a482:	3201      	adds	r2, #1
 800a484:	e7ef      	b.n	800a466 <__ieee754_sqrt+0x13a>
 800a486:	4680      	mov	r8, r0
 800a488:	e7bd      	b.n	800a406 <__ieee754_sqrt+0xda>
 800a48a:	bf00      	nop
 800a48c:	7ff00000 	.word	0x7ff00000

0800a490 <_init>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	bf00      	nop
 800a494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a496:	bc08      	pop	{r3}
 800a498:	469e      	mov	lr, r3
 800a49a:	4770      	bx	lr

0800a49c <_fini>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	bf00      	nop
 800a4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a2:	bc08      	pop	{r3}
 800a4a4:	469e      	mov	lr, r3
 800a4a6:	4770      	bx	lr
