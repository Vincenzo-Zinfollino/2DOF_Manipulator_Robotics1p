
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007324  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  080074c8  080074c8  000174c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007958  08007958  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007958  08007958  00017958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007960  08007960  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007960  08007960  00017960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007964  08007964  00017964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000070  080079d8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  080079d8  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa75  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d39  00000000  00000000  0002ab15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016883  00000000  00000000  0002d868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7a4  00000000  00000000  000440eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b88  00000000  00000000  0004e88f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6417  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c4  00000000  00000000  000d6468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080074ac 	.word	0x080074ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080074ac 	.word	0x080074ac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb0:	f000 b974 	b.w	8000e9c <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9d08      	ldr	r5, [sp, #32]
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	468e      	mov	lr, r1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d14d      	bne.n	8000c76 <__udivmoddi4+0xaa>
 8000bda:	428a      	cmp	r2, r1
 8000bdc:	4694      	mov	ip, r2
 8000bde:	d969      	bls.n	8000cb4 <__udivmoddi4+0xe8>
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	b152      	cbz	r2, 8000bfc <__udivmoddi4+0x30>
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	f1c2 0120 	rsb	r1, r2, #32
 8000bee:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfa:	4094      	lsls	r4, r2
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	0c21      	lsrs	r1, r4, #16
 8000c02:	fbbe f6f8 	udiv	r6, lr, r8
 8000c06:	fa1f f78c 	uxth.w	r7, ip
 8000c0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c12:	fb06 f107 	mul.w	r1, r6, r7
 8000c16:	4299      	cmp	r1, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x64>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c22:	f080 811f 	bcs.w	8000e64 <__udivmoddi4+0x298>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 811c 	bls.w	8000e64 <__udivmoddi4+0x298>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	4463      	add	r3, ip
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3310 	mls	r3, r8, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 f707 	mul.w	r7, r0, r7
 8000c44:	42a7      	cmp	r7, r4
 8000c46:	d90a      	bls.n	8000c5e <__udivmoddi4+0x92>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c50:	f080 810a 	bcs.w	8000e68 <__udivmoddi4+0x29c>
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	f240 8107 	bls.w	8000e68 <__udivmoddi4+0x29c>
 8000c5a:	4464      	add	r4, ip
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c62:	1be4      	subs	r4, r4, r7
 8000c64:	2600      	movs	r6, #0
 8000c66:	b11d      	cbz	r5, 8000c70 <__udivmoddi4+0xa4>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xc2>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	f000 80ef 	beq.w	8000e5e <__udivmoddi4+0x292>
 8000c80:	2600      	movs	r6, #0
 8000c82:	e9c5 0100 	strd	r0, r1, [r5]
 8000c86:	4630      	mov	r0, r6
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f683 	clz	r6, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d14a      	bne.n	8000d2c <__udivmoddi4+0x160>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd4>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80f9 	bhi.w	8000e92 <__udivmoddi4+0x2c6>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	469e      	mov	lr, r3
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa4>
 8000cae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa4>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xec>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 8092 	bne.w	8000de6 <__udivmoddi4+0x21a>
 8000cc2:	eba1 010c 	sub.w	r1, r1, ip
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2601      	movs	r6, #1
 8000cd0:	0c20      	lsrs	r0, r4, #16
 8000cd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cde:	fb0e f003 	mul.w	r0, lr, r3
 8000ce2:	4288      	cmp	r0, r1
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x12c>
 8000ce6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x12a>
 8000cf0:	4288      	cmp	r0, r1
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2c0>
 8000cf6:	4643      	mov	r3, r8
 8000cf8:	1a09      	subs	r1, r1, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d00:	fb07 1110 	mls	r1, r7, r0, r1
 8000d04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x156>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x154>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2ca>
 8000d20:	4608      	mov	r0, r1
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2a:	e79c      	b.n	8000c66 <__udivmoddi4+0x9a>
 8000d2c:	f1c6 0720 	rsb	r7, r6, #32
 8000d30:	40b3      	lsls	r3, r6
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d42:	431c      	orrs	r4, r3
 8000d44:	40f9      	lsrs	r1, r7
 8000d46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d52:	0c20      	lsrs	r0, r4, #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fb09 1118 	mls	r1, r9, r8, r1
 8000d5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d60:	fb08 f00e 	mul.w	r0, r8, lr
 8000d64:	4288      	cmp	r0, r1
 8000d66:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b8>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2bc>
 8000d78:	4288      	cmp	r0, r1
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2bc>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	458e      	cmp	lr, r1
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1e2>
 8000d9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000da0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2b4>
 8000da6:	458e      	cmp	lr, r1
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2b4>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4461      	add	r1, ip
 8000dae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db2:	fba0 9402 	umull	r9, r4, r0, r2
 8000db6:	eba1 010e 	sub.w	r1, r1, lr
 8000dba:	42a1      	cmp	r1, r4
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46a6      	mov	lr, r4
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x2a4>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x2a0>
 8000dc4:	b15d      	cbz	r5, 8000dde <__udivmoddi4+0x212>
 8000dc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dca:	eb61 010e 	sbc.w	r1, r1, lr
 8000dce:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd6:	40f1      	lsrs	r1, r6
 8000dd8:	431f      	orrs	r7, r3
 8000dda:	e9c5 7100 	strd	r7, r1, [r5]
 8000dde:	2600      	movs	r6, #0
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	f1c2 0320 	rsb	r3, r2, #32
 8000dea:	40d8      	lsrs	r0, r3
 8000dec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df0:	fa21 f303 	lsr.w	r3, r1, r3
 8000df4:	4091      	lsls	r1, r2
 8000df6:	4301      	orrs	r1, r0
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e04:	fb07 3610 	mls	r6, r7, r0, r3
 8000e08:	0c0b      	lsrs	r3, r1, #16
 8000e0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e12:	429e      	cmp	r6, r3
 8000e14:	fa04 f402 	lsl.w	r4, r4, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x260>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b8>
 8000e24:	429e      	cmp	r6, r3
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b8>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4463      	add	r3, ip
 8000e2c:	1b9b      	subs	r3, r3, r6
 8000e2e:	b289      	uxth	r1, r1
 8000e30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e34:	fb07 3316 	mls	r3, r7, r6, r3
 8000e38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x28a>
 8000e44:	eb1c 0101 	adds.w	r1, ip, r1
 8000e48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e52:	3e02      	subs	r6, #2
 8000e54:	4461      	add	r1, ip
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0x104>
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e705      	b.n	8000c70 <__udivmoddi4+0xa4>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e3      	b.n	8000c30 <__udivmoddi4+0x64>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6f8      	b.n	8000c5e <__udivmoddi4+0x92>
 8000e6c:	454b      	cmp	r3, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f8>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f8>
 8000e7c:	4646      	mov	r6, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x28a>
 8000e80:	4620      	mov	r0, r4
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1e2>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x260>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b8>
 8000e8c:	3b02      	subs	r3, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x12c>
 8000e92:	4630      	mov	r0, r6
 8000e94:	e709      	b.n	8000caa <__udivmoddi4+0xde>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x156>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <HAL_UART_RxCpltCallback>:
//controller parameters
const double Kp[4] = {1,0,0,1}; 
const double Kd[4] = {1,0,0,1};


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    char *cmd, *data, *value;
    uint8_t i = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	74fb      	strb	r3, [r7, #19]
    /* read the first characters */
    cmd = strtok((char*) &rx_data, ":");
 8000eac:	492b      	ldr	r1, [pc, #172]	; (8000f5c <HAL_UART_RxCpltCallback+0xbc>)
 8000eae:	482c      	ldr	r0, [pc, #176]	; (8000f60 <HAL_UART_RxCpltCallback+0xc0>)
 8000eb0:	f004 f8d4 	bl	800505c <strtok>
 8000eb4:	60f8      	str	r0, [r7, #12]
    if(strcmp(cmd, "trj")){ /* trj case*/
 8000eb6:	492b      	ldr	r1, [pc, #172]	; (8000f64 <HAL_UART_RxCpltCallback+0xc4>)
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff f991 	bl	80001e0 <strcmp>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d041      	beq.n	8000f48 <HAL_UART_RxCpltCallback+0xa8>
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        data = strtok(NULL, ":");
 8000ec4:	4925      	ldr	r1, [pc, #148]	; (8000f5c <HAL_UART_RxCpltCallback+0xbc>)
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f004 f8c8 	bl	800505c <strtok>
 8000ecc:	6178      	str	r0, [r7, #20]
        while(data != NULL){
 8000ece:	e028      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x82>
            if(i == 6) break; /* reading penup */
 8000ed0:	7cfb      	ldrb	r3, [r7, #19]
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d029      	beq.n	8000f2a <HAL_UART_RxCpltCallback+0x8a>
            value = "0x"; /* will contain the value extracted from the received string */
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <HAL_UART_RxCpltCallback+0xc8>)
 8000ed8:	60bb      	str	r3, [r7, #8]
            strcat(value, data); /* string concatenation REF: https://www.programiz.com/c-programming/library-function/string.h/strcat */
 8000eda:	6979      	ldr	r1, [r7, #20]
 8000edc:	68b8      	ldr	r0, [r7, #8]
 8000ede:	f004 f8ad 	bl	800503c <strcat>
            rbpush((((ringbuffer_t *) &manip)+i),  strtoull(value, NULL, 16)); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 8000ee2:	7cfb      	ldrb	r3, [r7, #19]
 8000ee4:	2258      	movs	r2, #88	; 0x58
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <HAL_UART_RxCpltCallback+0xcc>)
 8000eec:	189c      	adds	r4, r3, r2
 8000eee:	2210      	movs	r2, #16
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	68b8      	ldr	r0, [r7, #8]
 8000ef4:	f004 fa32 	bl	800535c <strtoull>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4610      	mov	r0, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f7ff fb54 	bl	80005ac <__aeabi_ul2d>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	ec43 2b10 	vmov	d0, r2, r3
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f001 f8bd 	bl	800208c <rbpush>
            data = strtok(NULL, ":");
 8000f12:	4912      	ldr	r1, [pc, #72]	; (8000f5c <HAL_UART_RxCpltCallback+0xbc>)
 8000f14:	2000      	movs	r0, #0
 8000f16:	f004 f8a1 	bl	800505c <strtok>
 8000f1a:	6178      	str	r0, [r7, #20]
            i++;
 8000f1c:	7cfb      	ldrb	r3, [r7, #19]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	74fb      	strb	r3, [r7, #19]
        while(data != NULL){
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1d3      	bne.n	8000ed0 <HAL_UART_RxCpltCallback+0x30>
 8000f28:	e000      	b.n	8000f2c <HAL_UART_RxCpltCallback+0x8c>
            if(i == 6) break; /* reading penup */
 8000f2a:	bf00      	nop
        }
        rbpush(&manip.penup, (double) atoi(data));
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f004 f83b 	bl	8004fa8 <atoi>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb05 	bl	8000544 <__aeabi_i2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	ec43 2b10 	vmov	d0, r2, r3
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <HAL_UART_RxCpltCallback+0xd0>)
 8000f44:	f001 f8a2 	bl	800208c <rbpush>
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(&huart, &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2240      	movs	r2, #64	; 0x40
 8000f4c:	4904      	ldr	r1, [pc, #16]	; (8000f60 <HAL_UART_RxCpltCallback+0xc0>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 ff75 	bl	8003e3e <HAL_UART_Receive_DMA>
}
 8000f54:	bf00      	nop
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	080074c8 	.word	0x080074c8
 8000f60:	2000008c 	.word	0x2000008c
 8000f64:	080074cc 	.word	0x080074cc
 8000f68:	080074d0 	.word	0x080074d0
 8000f6c:	200000d0 	.word	0x200000d0
 8000f70:	200002e0 	.word	0x200002e0

08000f74 <init_man>:
- man_t *manip: man_t obj. to initialize;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e00b      	b.n	8000f9a <init_man+0x26>
        rbclear((((ringbuffer_t *) manip)+i));
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2258      	movs	r2, #88	; 0x58
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 f922 	bl	80021d8 <rbclear>
    for(i = 0; i < 14; i++){
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3301      	adds	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b0d      	cmp	r3, #13
 8000f9e:	d9f0      	bls.n	8000f82 <init_man+0xe>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e018      	b.n	8000fd8 <init_man+0x64>
        manip->B[i] = (double) 0;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	339a      	adds	r3, #154	; 0x9a
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	18d1      	adds	r1, r2, r3
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	f04f 0300 	mov.w	r3, #0
 8000fb8:	e9c1 2300 	strd	r2, r3, [r1]
        manip->C[i] = (double) 0;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	339e      	adds	r3, #158	; 0x9e
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	18d1      	adds	r1, r2, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < 4; i++){
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d9e3      	bls.n	8000fa6 <init_man+0x32>
    }
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <dot>:
- double *C: pointer to a vector of doubles of size nA*mB, which represents the resulting nAxmB matrix -> if the operation cannot be done, it will be NULL;
@outputs: 
- uint8_t: 0 or 1 that shows whether the operation completed successfully or not.
@#
*/
uint8_t dot(double *A, uint8_t nA, uint8_t mA, double* B, uint8_t nB, uint8_t mB, double* C){ /* nAxmA * nBxmB dot product */
 8000fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fec:	b087      	sub	sp, #28
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	72fb      	strb	r3, [r7, #11]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	72bb      	strb	r3, [r7, #10]
        this method exists just to make the code more readable and understand what each
        operation actually does instead of having meaningless calculations */
    
    /* C[i, j] = \sum_k A[i, k]*B[k, j] */
    /* given n rows and m columns, the matrix indexes i, j correspond to j+i*m array index */
    if(mA != nB){
 8000ffc:	7aba      	ldrb	r2, [r7, #10]
 8000ffe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001002:	429a      	cmp	r2, r3
 8001004:	d003      	beq.n	800100e <dot+0x26>
        C = NULL;
 8001006:	2300      	movs	r3, #0
 8001008:	643b      	str	r3, [r7, #64]	; 0x40
        return 0; /* matrix multiplication cannot be done */
 800100a:	2300      	movs	r3, #0
 800100c:	e06d      	b.n	80010ea <dot+0x102>
    }
    uint8_t i, j, k;
    for(i = 0; i < 4; i++){
 800100e:	2300      	movs	r3, #0
 8001010:	75fb      	strb	r3, [r7, #23]
 8001012:	e00c      	b.n	800102e <dot+0x46>
        C[i] = (double) 0.0;
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800101a:	18d1      	adds	r1, r2, r3
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < 4; i++){
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	3301      	adds	r3, #1
 800102c:	75fb      	strb	r3, [r7, #23]
 800102e:	7dfb      	ldrb	r3, [r7, #23]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d9ef      	bls.n	8001014 <dot+0x2c>
    }
    for( i = 0; i < nA; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	75fb      	strb	r3, [r7, #23]
 8001038:	e052      	b.n	80010e0 <dot+0xf8>
        for( j = 0; j < mB; j++){
 800103a:	2300      	movs	r3, #0
 800103c:	75bb      	strb	r3, [r7, #22]
 800103e:	e047      	b.n	80010d0 <dot+0xe8>
            for( k = 0; k < mA; k++){
 8001040:	2300      	movs	r3, #0
 8001042:	757b      	strb	r3, [r7, #21]
 8001044:	e03d      	b.n	80010c2 <dot+0xda>
                C[j+i*mA] += (double) A[k+i*mA]*B[j+k*mB];
 8001046:	7dba      	ldrb	r2, [r7, #22]
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	7ab9      	ldrb	r1, [r7, #10]
 800104c:	fb01 f303 	mul.w	r3, r1, r3
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001056:	4413      	add	r3, r2
 8001058:	e9d3 4500 	ldrd	r4, r5, [r3]
 800105c:	7d7a      	ldrb	r2, [r7, #21]
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	7ab9      	ldrb	r1, [r7, #10]
 8001062:	fb01 f303 	mul.w	r3, r1, r3
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	4413      	add	r3, r2
 800106e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001072:	7dba      	ldrb	r2, [r7, #22]
 8001074:	7d7b      	ldrb	r3, [r7, #21]
 8001076:	f897 603c 	ldrb.w	r6, [r7, #60]	; 0x3c
 800107a:	fb06 f303 	mul.w	r3, r6, r3
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fac5 	bl	8000618 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4690      	mov	r8, r2
 8001094:	4699      	mov	r9, r3
 8001096:	7dba      	ldrb	r2, [r7, #22]
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	7ab9      	ldrb	r1, [r7, #10]
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010a6:	18d6      	adds	r6, r2, r3
 80010a8:	4642      	mov	r2, r8
 80010aa:	464b      	mov	r3, r9
 80010ac:	4620      	mov	r0, r4
 80010ae:	4629      	mov	r1, r5
 80010b0:	f7ff f8fc 	bl	80002ac <__adddf3>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	e9c6 2300 	strd	r2, r3, [r6]
            for( k = 0; k < mA; k++){
 80010bc:	7d7b      	ldrb	r3, [r7, #21]
 80010be:	3301      	adds	r3, #1
 80010c0:	757b      	strb	r3, [r7, #21]
 80010c2:	7d7a      	ldrb	r2, [r7, #21]
 80010c4:	7abb      	ldrb	r3, [r7, #10]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3bd      	bcc.n	8001046 <dot+0x5e>
        for( j = 0; j < mB; j++){
 80010ca:	7dbb      	ldrb	r3, [r7, #22]
 80010cc:	3301      	adds	r3, #1
 80010ce:	75bb      	strb	r3, [r7, #22]
 80010d0:	7dba      	ldrb	r2, [r7, #22]
 80010d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d3b2      	bcc.n	8001040 <dot+0x58>
    for( i = 0; i < nA; i++){
 80010da:	7dfb      	ldrb	r3, [r7, #23]
 80010dc:	3301      	adds	r3, #1
 80010de:	75fb      	strb	r3, [r7, #23]
 80010e0:	7dfa      	ldrb	r2, [r7, #23]
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3a8      	bcc.n	800103a <dot+0x52>
            }
        }
    }
    return 1; // matrix multiplication successfully completed
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010f4 <inv2x2>:
- double *invM: pointer to the inverted matrix (NULL if inversion is not possible);
@outputs: 
- uint8_t: shows whether the inversion was completed or not
@#
*/
uint8_t inv2x2(double *M, double *invM){
 80010f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010f8:	b085      	sub	sp, #20
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
    double d = DET(M);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3318      	adds	r3, #24
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fa83 	bl	8000618 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4692      	mov	sl, r2
 8001118:	469b      	mov	fp, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3308      	adds	r3, #8
 800111e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3310      	adds	r3, #16
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff fa75 	bl	8000618 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4650      	mov	r0, sl
 8001134:	4659      	mov	r1, fp
 8001136:	f7ff f8b7 	bl	80002a8 <__aeabi_dsub>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if(d == 0){
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	f04f 0300 	mov.w	r3, #0
 800114a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800114e:	f7ff fccb 	bl	8000ae8 <__aeabi_dcmpeq>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <inv2x2+0x6c>
        invM = NULL;
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
        return 0; /* Inversion not possible */
 800115c:	2300      	movs	r3, #0
 800115e:	e043      	b.n	80011e8 <inv2x2+0xf4>
    }
    invM[0] =  M[3]/d;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3318      	adds	r3, #24
 8001164:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800116c:	f7ff fb7e 	bl	800086c <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	6839      	ldr	r1, [r7, #0]
 8001176:	e9c1 2300 	strd	r2, r3, [r1]
    invM[3] =  M[0]/d;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f103 0618 	add.w	r6, r3, #24
 8001186:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800118a:	f7ff fb6f 	bl	800086c <__aeabi_ddiv>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	e9c6 2300 	strd	r2, r3, [r6]
    invM[1] = -M[1]/d;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3308      	adds	r3, #8
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	4690      	mov	r8, r2
 80011a0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	f103 0608 	add.w	r6, r3, #8
 80011aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ae:	4640      	mov	r0, r8
 80011b0:	4649      	mov	r1, r9
 80011b2:	f7ff fb5b 	bl	800086c <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	e9c6 2300 	strd	r2, r3, [r6]
    invM[2] = -M[2]/d;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3310      	adds	r3, #16
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	4614      	mov	r4, r2
 80011c8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	f103 0610 	add.w	r6, r3, #16
 80011d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff fb47 	bl	800086c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	e9c6 2300 	strd	r2, r3, [r6]
    return 1; /* Inversion completed successfully */
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080011f2 <sum>:
- double *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void sum(double *A, double *B, uint8_t n, double *C){
 80011f2:	b5b0      	push	{r4, r5, r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4613      	mov	r3, r2
 8001200:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 8001202:	2300      	movs	r3, #0
 8001204:	75fb      	strb	r3, [r7, #23]
 8001206:	e018      	b.n	800123a <sum+0x48>
        C[i] = A[i] + B[i];
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	4413      	add	r3, r2
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	7dfc      	ldrb	r4, [r7, #23]
 8001222:	00e4      	lsls	r4, r4, #3
 8001224:	683d      	ldr	r5, [r7, #0]
 8001226:	442c      	add	r4, r5
 8001228:	f7ff f840 	bl	80002ac <__adddf3>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	e9c4 2300 	strd	r2, r3, [r4]
    for(i = 0; i < n; i++){
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	3301      	adds	r3, #1
 8001238:	75fb      	strb	r3, [r7, #23]
 800123a:	7dfa      	ldrb	r2, [r7, #23]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	429a      	cmp	r2, r3
 8001240:	d3e2      	bcc.n	8001208 <sum+0x16>
    }
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bdb0      	pop	{r4, r5, r7, pc}

0800124c <diff>:
- double *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void diff(double *A, double *B, uint8_t n, double *C){
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 800125c:	2300      	movs	r3, #0
 800125e:	75fb      	strb	r3, [r7, #23]
 8001260:	e018      	b.n	8001294 <diff+0x48>
        C[i] = A[i] - B[i];
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	4413      	add	r3, r2
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	7dfc      	ldrb	r4, [r7, #23]
 800127c:	00e4      	lsls	r4, r4, #3
 800127e:	683d      	ldr	r5, [r7, #0]
 8001280:	442c      	add	r4, r5
 8001282:	f7ff f811 	bl	80002a8 <__aeabi_dsub>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	e9c4 2300 	strd	r2, r3, [r4]
    for(i = 0; i < n; i++){
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	3301      	adds	r3, #1
 8001292:	75fb      	strb	r3, [r7, #23]
 8001294:	7dfa      	ldrb	r2, [r7, #23]
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	429a      	cmp	r2, r3
 800129a:	d3e2      	bcc.n	8001262 <diff+0x16>
    }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012a8 <B>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void B(man_t *manip){
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    double q1,q2;
    rblast(&manip->q0_actual, &q1);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80012b6:	f107 0210 	add.w	r2, r7, #16
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 ff6b 	bl	8002198 <rblast>
    rblast(&manip->q1_actual, &q2);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80012c8:	f107 0208 	add.w	r2, r7, #8
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 ff62 	bl	8002198 <rblast>
    manip->B[0] = (double) (0.024938*cos(q1 + 2*q2) + 0.12469*cos(q1 + q2) + 0.26194*cos(q1) + 0.074812*cos(q2) + 0.16349);
 80012d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	f7fe ffe6 	bl	80002ac <__adddf3>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012ec:	f7fe ffde 	bl	80002ac <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	ec43 2b17 	vmov	d7, r2, r3
 80012f8:	eeb0 0a47 	vmov.f32	s0, s14
 80012fc:	eef0 0a67 	vmov.f32	s1, s15
 8001300:	f005 f836 	bl	8006370 <cos>
 8001304:	ec51 0b10 	vmov	r0, r1, d0
 8001308:	a3a9      	add	r3, pc, #676	; (adr r3, 80015b0 <B+0x308>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff f983 	bl	8000618 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4614      	mov	r4, r2
 8001318:	461d      	mov	r5, r3
 800131a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800131e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001322:	f7fe ffc3 	bl	80002ac <__adddf3>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	ec43 2b17 	vmov	d7, r2, r3
 800132e:	eeb0 0a47 	vmov.f32	s0, s14
 8001332:	eef0 0a67 	vmov.f32	s1, s15
 8001336:	f005 f81b 	bl	8006370 <cos>
 800133a:	ec51 0b10 	vmov	r0, r1, d0
 800133e:	a39e      	add	r3, pc, #632	; (adr r3, 80015b8 <B+0x310>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff f968 	bl	8000618 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7fe ffac 	bl	80002ac <__adddf3>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4614      	mov	r4, r2
 800135a:	461d      	mov	r5, r3
 800135c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001360:	eeb0 0a47 	vmov.f32	s0, s14
 8001364:	eef0 0a67 	vmov.f32	s1, s15
 8001368:	f005 f802 	bl	8006370 <cos>
 800136c:	ec51 0b10 	vmov	r0, r1, d0
 8001370:	a393      	add	r3, pc, #588	; (adr r3, 80015c0 <B+0x318>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f94f 	bl	8000618 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4620      	mov	r0, r4
 8001380:	4629      	mov	r1, r5
 8001382:	f7fe ff93 	bl	80002ac <__adddf3>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4614      	mov	r4, r2
 800138c:	461d      	mov	r5, r3
 800138e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001392:	eeb0 0a47 	vmov.f32	s0, s14
 8001396:	eef0 0a67 	vmov.f32	s1, s15
 800139a:	f004 ffe9 	bl	8006370 <cos>
 800139e:	ec51 0b10 	vmov	r0, r1, d0
 80013a2:	a389      	add	r3, pc, #548	; (adr r3, 80015c8 <B+0x320>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff f936 	bl	8000618 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7fe ff7a 	bl	80002ac <__adddf3>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	a383      	add	r3, pc, #524	; (adr r3, 80015d0 <B+0x328>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7fe ff71 	bl	80002ac <__adddf3>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f501 619a 	add.w	r1, r1, #1232	; 0x4d0
 80013d4:	e9c1 2300 	strd	r2, r3, [r1]
    manip->B[1] = (double) (0.012469*cos(q1 + 2*q2) + 0.09975*cos(q1 + q2) + 0.14962*cos(q1) + 0.049875*cos(q2) + 0.058307);
 80013d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	f7fe ff64 	bl	80002ac <__adddf3>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013f0:	f7fe ff5c 	bl	80002ac <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	ec43 2b17 	vmov	d7, r2, r3
 80013fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001400:	eef0 0a67 	vmov.f32	s1, s15
 8001404:	f004 ffb4 	bl	8006370 <cos>
 8001408:	ec51 0b10 	vmov	r0, r1, d0
 800140c:	a372      	add	r3, pc, #456	; (adr r3, 80015d8 <B+0x330>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f7ff f901 	bl	8000618 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4614      	mov	r4, r2
 800141c:	461d      	mov	r5, r3
 800141e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001426:	f7fe ff41 	bl	80002ac <__adddf3>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	ec43 2b17 	vmov	d7, r2, r3
 8001432:	eeb0 0a47 	vmov.f32	s0, s14
 8001436:	eef0 0a67 	vmov.f32	s1, s15
 800143a:	f004 ff99 	bl	8006370 <cos>
 800143e:	ec51 0b10 	vmov	r0, r1, d0
 8001442:	a367      	add	r3, pc, #412	; (adr r3, 80015e0 <B+0x338>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f8e6 	bl	8000618 <__aeabi_dmul>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4620      	mov	r0, r4
 8001452:	4629      	mov	r1, r5
 8001454:	f7fe ff2a 	bl	80002ac <__adddf3>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4614      	mov	r4, r2
 800145e:	461d      	mov	r5, r3
 8001460:	ed97 7b04 	vldr	d7, [r7, #16]
 8001464:	eeb0 0a47 	vmov.f32	s0, s14
 8001468:	eef0 0a67 	vmov.f32	s1, s15
 800146c:	f004 ff80 	bl	8006370 <cos>
 8001470:	ec51 0b10 	vmov	r0, r1, d0
 8001474:	a35c      	add	r3, pc, #368	; (adr r3, 80015e8 <B+0x340>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f8cd 	bl	8000618 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4620      	mov	r0, r4
 8001484:	4629      	mov	r1, r5
 8001486:	f7fe ff11 	bl	80002ac <__adddf3>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4614      	mov	r4, r2
 8001490:	461d      	mov	r5, r3
 8001492:	ed97 7b02 	vldr	d7, [r7, #8]
 8001496:	eeb0 0a47 	vmov.f32	s0, s14
 800149a:	eef0 0a67 	vmov.f32	s1, s15
 800149e:	f004 ff67 	bl	8006370 <cos>
 80014a2:	ec51 0b10 	vmov	r0, r1, d0
 80014a6:	a352      	add	r3, pc, #328	; (adr r3, 80015f0 <B+0x348>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f8b4 	bl	8000618 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7fe fef8 	bl	80002ac <__adddf3>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	a34c      	add	r3, pc, #304	; (adr r3, 80015f8 <B+0x350>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7fe feef 	bl	80002ac <__adddf3>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 80014d8:	e941 2302 	strd	r2, r3, [r1, #-8]
    manip->B[2] = manip->B[1]; // the matrix is symmetrical
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 80014e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 80014ec:	e9c1 2300 	strd	r2, r3, [r1]
    manip->B[3] = (double) (0.074812*cos(q1 + q2) + 0.14962*cos(q1) + 0.024938*cos(q2) + 0.058309);
 80014f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014f8:	f7fe fed8 	bl	80002ac <__adddf3>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	ec43 2b17 	vmov	d7, r2, r3
 8001504:	eeb0 0a47 	vmov.f32	s0, s14
 8001508:	eef0 0a67 	vmov.f32	s1, s15
 800150c:	f004 ff30 	bl	8006370 <cos>
 8001510:	ec51 0b10 	vmov	r0, r1, d0
 8001514:	a32c      	add	r3, pc, #176	; (adr r3, 80015c8 <B+0x320>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f87d 	bl	8000618 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4614      	mov	r4, r2
 8001524:	461d      	mov	r5, r3
 8001526:	ed97 7b04 	vldr	d7, [r7, #16]
 800152a:	eeb0 0a47 	vmov.f32	s0, s14
 800152e:	eef0 0a67 	vmov.f32	s1, s15
 8001532:	f004 ff1d 	bl	8006370 <cos>
 8001536:	ec51 0b10 	vmov	r0, r1, d0
 800153a:	a32b      	add	r3, pc, #172	; (adr r3, 80015e8 <B+0x340>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f86a 	bl	8000618 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7fe feae 	bl	80002ac <__adddf3>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4614      	mov	r4, r2
 8001556:	461d      	mov	r5, r3
 8001558:	ed97 7b02 	vldr	d7, [r7, #8]
 800155c:	eeb0 0a47 	vmov.f32	s0, s14
 8001560:	eef0 0a67 	vmov.f32	s1, s15
 8001564:	f004 ff04 	bl	8006370 <cos>
 8001568:	ec51 0b10 	vmov	r0, r1, d0
 800156c:	a310      	add	r3, pc, #64	; (adr r3, 80015b0 <B+0x308>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff f851 	bl	8000618 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4620      	mov	r0, r4
 800157c:	4629      	mov	r1, r5
 800157e:	f7fe fe95 	bl	80002ac <__adddf3>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	a31d      	add	r3, pc, #116	; (adr r3, 8001600 <B+0x358>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7fe fe8c 	bl	80002ac <__adddf3>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 800159e:	e941 2302 	strd	r2, r3, [r1, #-8]
    /*  manip::B is actually a vector, but it can be seen as follows: 
        [B[0], B[1]]
        [B[2], B[3]] */
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bdb0      	pop	{r4, r5, r7, pc}
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	d9b5e95b 	.word	0xd9b5e95b
 80015b4:	3f998958 	.word	0x3f998958
 80015b8:	102363b2 	.word	0x102363b2
 80015bc:	3fbfebaf 	.word	0x3fbfebaf
 80015c0:	fd60e94f 	.word	0xfd60e94f
 80015c4:	3fd0c39f 	.word	0x3fd0c39f
 80015c8:	15592d99 	.word	0x15592d99
 80015cc:	3fb326e1 	.word	0x3fb326e1
 80015d0:	859c8c93 	.word	0x859c8c93
 80015d4:	3fc4ed3d 	.word	0x3fc4ed3d
 80015d8:	d9b5e95b 	.word	0xd9b5e95b
 80015dc:	3f898958 	.word	0x3f898958
 80015e0:	4bc6a7f0 	.word	0x4bc6a7f0
 80015e4:	3fb98937 	.word	0x3fb98937
 80015e8:	8769ec2d 	.word	0x8769ec2d
 80015ec:	3fc326bf 	.word	0x3fc326bf
 80015f0:	4bc6a7f0 	.word	0x4bc6a7f0
 80015f4:	3fa98937 	.word	0x3fa98937
 80015f8:	44417870 	.word	0x44417870
 80015fc:	3fadda6a 	.word	0x3fadda6a
 8001600:	601ffb48 	.word	0x601ffb48
 8001604:	3faddaad 	.word	0x3faddaad

08001608 <C>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void C(man_t *manip){
 8001608:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800160c:	b08a      	sub	sp, #40	; 0x28
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
    double q1, q2, dq1, dq2;
    rblast(&manip->q0_actual, &q1);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001618:	f107 0220 	add.w	r2, r7, #32
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fdba 	bl	8002198 <rblast>
    rblast(&manip->q1_actual, &q2);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800162a:	f107 0218 	add.w	r2, r7, #24
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fdb1 	bl	8002198 <rblast>
    rblast(&manip->dq0_actual, &dq1);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800163c:	f107 0210 	add.w	r2, r7, #16
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fda8 	bl	8002198 <rblast>
    rblast(&manip->dq1_actual, &dq2);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800164e:	f107 0208 	add.w	r2, r7, #8
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fd9f 	bl	8002198 <rblast>
    manip->C[0] = (double) ( - 0.5*dq2*(0.024938*sin(q1 + 2*q2) + 0.049875*sin(q1 + q2) + 0.049875*sin(q2)));
 800165a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4bb1      	ldr	r3, [pc, #708]	; (8001928 <C+0x320>)
 8001664:	f7fe ffd8 	bl	8000618 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4614      	mov	r4, r2
 800166e:	461d      	mov	r5, r3
 8001670:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	f7fe fe18 	bl	80002ac <__adddf3>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001688:	f7fe fe10 	bl	80002ac <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	ec43 2b17 	vmov	d7, r2, r3
 8001694:	eeb0 0a47 	vmov.f32	s0, s14
 8001698:	eef0 0a67 	vmov.f32	s1, s15
 800169c:	f004 febc 	bl	8006418 <sin>
 80016a0:	ec51 0b10 	vmov	r0, r1, d0
 80016a4:	a398      	add	r3, pc, #608	; (adr r3, 8001908 <C+0x300>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe ffb5 	bl	8000618 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4690      	mov	r8, r2
 80016b4:	4699      	mov	r9, r3
 80016b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016be:	f7fe fdf5 	bl	80002ac <__adddf3>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	ec43 2b17 	vmov	d7, r2, r3
 80016ca:	eeb0 0a47 	vmov.f32	s0, s14
 80016ce:	eef0 0a67 	vmov.f32	s1, s15
 80016d2:	f004 fea1 	bl	8006418 <sin>
 80016d6:	ec51 0b10 	vmov	r0, r1, d0
 80016da:	a38d      	add	r3, pc, #564	; (adr r3, 8001910 <C+0x308>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ff9a 	bl	8000618 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4640      	mov	r0, r8
 80016ea:	4649      	mov	r1, r9
 80016ec:	f7fe fdde 	bl	80002ac <__adddf3>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4690      	mov	r8, r2
 80016f6:	4699      	mov	r9, r3
 80016f8:	ed97 7b06 	vldr	d7, [r7, #24]
 80016fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001700:	eef0 0a67 	vmov.f32	s1, s15
 8001704:	f004 fe88 	bl	8006418 <sin>
 8001708:	ec51 0b10 	vmov	r0, r1, d0
 800170c:	a380      	add	r3, pc, #512	; (adr r3, 8001910 <C+0x308>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ff81 	bl	8000618 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4640      	mov	r0, r8
 800171c:	4649      	mov	r1, r9
 800171e:	f7fe fdc5 	bl	80002ac <__adddf3>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4620      	mov	r0, r4
 8001728:	4629      	mov	r1, r5
 800172a:	f7fe ff75 	bl	8000618 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 8001738:	e9c1 2300 	strd	r2, r3, [r1]
    manip->C[1] = (double) ( - 0.012469*(dq1 + dq2)*(sin(q1 + 2*q2) + 2*sin(q1 + q2) + 2*sin(q2)));
 800173c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001744:	f7fe fdb2 	bl	80002ac <__adddf3>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	a371      	add	r3, pc, #452	; (adr r3, 8001918 <C+0x310>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7fe ff5f 	bl	8000618 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4614      	mov	r4, r2
 8001760:	461d      	mov	r5, r3
 8001762:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	f7fe fd9f 	bl	80002ac <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800177a:	f7fe fd97 	bl	80002ac <__adddf3>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	ec43 2b17 	vmov	d7, r2, r3
 8001786:	eeb0 0a47 	vmov.f32	s0, s14
 800178a:	eef0 0a67 	vmov.f32	s1, s15
 800178e:	f004 fe43 	bl	8006418 <sin>
 8001792:	ec59 8b10 	vmov	r8, r9, d0
 8001796:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800179a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800179e:	f7fe fd85 	bl	80002ac <__adddf3>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	ec43 2b17 	vmov	d7, r2, r3
 80017aa:	eeb0 0a47 	vmov.f32	s0, s14
 80017ae:	eef0 0a67 	vmov.f32	s1, s15
 80017b2:	f004 fe31 	bl	8006418 <sin>
 80017b6:	ec51 0b10 	vmov	r0, r1, d0
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	f7fe fd75 	bl	80002ac <__adddf3>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4640      	mov	r0, r8
 80017c8:	4649      	mov	r1, r9
 80017ca:	f7fe fd6f 	bl	80002ac <__adddf3>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4690      	mov	r8, r2
 80017d4:	4699      	mov	r9, r3
 80017d6:	ed97 7b06 	vldr	d7, [r7, #24]
 80017da:	eeb0 0a47 	vmov.f32	s0, s14
 80017de:	eef0 0a67 	vmov.f32	s1, s15
 80017e2:	f004 fe19 	bl	8006418 <sin>
 80017e6:	ec51 0b10 	vmov	r0, r1, d0
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	f7fe fd5d 	bl	80002ac <__adddf3>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4640      	mov	r0, r8
 80017f8:	4649      	mov	r1, r9
 80017fa:	f7fe fd57 	bl	80002ac <__adddf3>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7fe ff07 	bl	8000618 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8001814:	e941 2302 	strd	r2, r3, [r1, #-8]
    manip->C[2] = (double) (dq1*(0.012469*sin(q1 + 2*q2) + 0.024938*sin(q1 + q2) + 0.024938*sin(q2)));
 8001818:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	f7fe fd44 	bl	80002ac <__adddf3>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001830:	f7fe fd3c 	bl	80002ac <__adddf3>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	ec43 2b17 	vmov	d7, r2, r3
 800183c:	eeb0 0a47 	vmov.f32	s0, s14
 8001840:	eef0 0a67 	vmov.f32	s1, s15
 8001844:	f004 fde8 	bl	8006418 <sin>
 8001848:	ec51 0b10 	vmov	r0, r1, d0
 800184c:	a334      	add	r3, pc, #208	; (adr r3, 8001920 <C+0x318>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fee1 	bl	8000618 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4614      	mov	r4, r2
 800185c:	461d      	mov	r5, r3
 800185e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001862:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001866:	f7fe fd21 	bl	80002ac <__adddf3>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	ec43 2b17 	vmov	d7, r2, r3
 8001872:	eeb0 0a47 	vmov.f32	s0, s14
 8001876:	eef0 0a67 	vmov.f32	s1, s15
 800187a:	f004 fdcd 	bl	8006418 <sin>
 800187e:	ec51 0b10 	vmov	r0, r1, d0
 8001882:	a321      	add	r3, pc, #132	; (adr r3, 8001908 <C+0x300>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe fec6 	bl	8000618 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4620      	mov	r0, r4
 8001892:	4629      	mov	r1, r5
 8001894:	f7fe fd0a 	bl	80002ac <__adddf3>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4614      	mov	r4, r2
 800189e:	461d      	mov	r5, r3
 80018a0:	ed97 7b06 	vldr	d7, [r7, #24]
 80018a4:	eeb0 0a47 	vmov.f32	s0, s14
 80018a8:	eef0 0a67 	vmov.f32	s1, s15
 80018ac:	f004 fdb4 	bl	8006418 <sin>
 80018b0:	ec51 0b10 	vmov	r0, r1, d0
 80018b4:	a314      	add	r3, pc, #80	; (adr r3, 8001908 <C+0x300>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fead 	bl	8000618 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7fe fcf1 	bl	80002ac <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018d6:	f7fe fe9f 	bl	8000618 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80018e4:	e9c1 2300 	strd	r2, r3, [r1]
    manip->C[3] = (double) 0.0;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80018ee:	4619      	mov	r1, r3
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e941 2302 	strd	r2, r3, [r1, #-8]
    /*  manip::C is actually a vector, but it can be seen as follows: 
        [C[0], C[1]]
        [C[2], C[3]] */
}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	; 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001906:	bf00      	nop
 8001908:	d9b5e95b 	.word	0xd9b5e95b
 800190c:	3f998958 	.word	0x3f998958
 8001910:	4bc6a7f0 	.word	0x4bc6a7f0
 8001914:	3fa98937 	.word	0x3fa98937
 8001918:	d9b5e95b 	.word	0xd9b5e95b
 800191c:	bf898958 	.word	0xbf898958
 8001920:	d9b5e95b 	.word	0xd9b5e95b
 8001924:	3f898958 	.word	0x3f898958
 8001928:	bfe00000 	.word	0xbfe00000

0800192c <controller>:
- double *u: double[2] vector pointer that holds the control input to apply to motors (speed control);
@outputs: 
- void;
@#
*/
void controller(man_t *manip, double *u){
 800192c:	b580      	push	{r7, lr}
 800192e:	b0ce      	sub	sp, #312	; 0x138
 8001930:	af04      	add	r7, sp, #16
 8001932:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001936:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800193a:	6018      	str	r0, [r3, #0]
 800193c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001940:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001944:	6019      	str	r1, [r3, #0]
    double q[2], dq[2], ddq[2], q_actual[2], dq_actual[2], ddq_actual[2];
    double ep[2], ed[2], y[2], tau[2], Kpep[2], Kded[2], By[2], Cdq[2];
    double Bddq[2], invC[4], result[2];

    /* data preparation */
    rbpop(&manip->q0, &q[0]);
 8001946:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800194a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fbe4 	bl	8002124 <rbpop>
    rbpop(&manip->q1, &q[1]);
 800195c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001960:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800196a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800196e:	3308      	adds	r3, #8
 8001970:	4619      	mov	r1, r3
 8001972:	4610      	mov	r0, r2
 8001974:	f000 fbd6 	bl	8002124 <rbpop>
    rbpop(&manip->dq0, &dq[0]);
 8001978:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800197c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	33b0      	adds	r3, #176	; 0xb0
 8001984:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fbca 	bl	8002124 <rbpop>
    rbpop(&manip->dq1, &dq[1]);
 8001990:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001994:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800199e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80019a2:	3308      	adds	r3, #8
 80019a4:	4619      	mov	r1, r3
 80019a6:	4610      	mov	r0, r2
 80019a8:	f000 fbbc 	bl	8002124 <rbpop>
    rbpop(&manip->ddq0, &ddq[0]);
 80019ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80019ba:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fbaf 	bl	8002124 <rbpop>
    rbpop(&manip->ddq1, &ddq[1]);
 80019c6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019ca:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 80019d4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019d8:	3308      	adds	r3, #8
 80019da:	4619      	mov	r1, r3
 80019dc:	4610      	mov	r0, r2
 80019de:	f000 fba1 	bl	8002124 <rbpop>
    rblast(&manip->q0_actual, &q_actual[0]);
 80019e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80019f0:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fbce 	bl	8002198 <rblast>
    rblast(&manip->q1_actual, &q_actual[1]);
 80019fc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 8001a0a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a0e:	3308      	adds	r3, #8
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f000 fbc0 	bl	8002198 <rblast>
    rblast(&manip->dq0_actual, &dq_actual[0]);
 8001a18:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001a26:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fbb3 	bl	8002198 <rblast>
    rblast(&manip->dq1_actual, &dq_actual[1]);
 8001a32:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a36:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f503 725c 	add.w	r2, r3, #880	; 0x370
 8001a40:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a44:	3308      	adds	r3, #8
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f000 fba5 	bl	8002198 <rblast>
    rblast(&manip->ddq0_actual, &ddq_actual[0]);
 8001a4e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a52:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8001a5c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fb98 	bl	8002198 <rblast>
    rblast(&manip->ddq1_actual, &ddq_actual[1]);
 8001a68:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 8001a76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	f000 fb8a 	bl	8002198 <rblast>
    B(manip);
 8001a84:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	f7ff fc0b 	bl	80012a8 <B>
    C(manip);
 8001a92:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a96:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	f7ff fdb4 	bl	8001608 <C>

    diff(q, q_actual, 2, ep); /* q - q_d */
 8001aa0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001aa4:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001aa8:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001aac:	2202      	movs	r2, #2
 8001aae:	f7ff fbcd 	bl	800124c <diff>
    diff(dq, dq_actual, 2, ed); /* dq - dq_d */
 8001ab2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ab6:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001aba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f7ff fbc4 	bl	800124c <diff>

    dot(Kp, 2, 2, ep, 2, 1, Kpep); /* Kp*ep */
 8001ac4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001ac8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	2202      	movs	r2, #2
 8001ada:	2102      	movs	r1, #2
 8001adc:	484c      	ldr	r0, [pc, #304]	; (8001c10 <controller+0x2e4>)
 8001ade:	f7ff fa83 	bl	8000fe8 <dot>
    dot(Kd, 2, 2, ed, 2, 1, Kded); /* Kd*ed */
 8001ae2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ae6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	2301      	movs	r3, #1
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2302      	movs	r3, #2
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	4613      	mov	r3, r2
 8001af6:	2202      	movs	r2, #2
 8001af8:	2102      	movs	r1, #2
 8001afa:	4846      	ldr	r0, [pc, #280]	; (8001c14 <controller+0x2e8>)
 8001afc:	f7ff fa74 	bl	8000fe8 <dot>

    /* y = Kp*e_p + Kd*e_d + ddq */
    sum(Kpep, Kded, 2, y);
 8001b00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b04:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001b08:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f7ff fb70 	bl	80011f2 <sum>
    sum(y, ddq, 2, y);
 8001b12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b16:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8001b1a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f7ff fb67 	bl	80011f2 <sum>

    dot(manip->B, 2, 2, y, 2, 1, By); /* B*y */
 8001b24:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f503 609a 	add.w	r0, r3, #1232	; 0x4d0
 8001b32:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001b36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2302      	movs	r3, #2
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	2202      	movs	r2, #2
 8001b48:	2102      	movs	r1, #2
 8001b4a:	f7ff fa4d 	bl	8000fe8 <dot>
    dot(manip->C, 2, 2, dq_actual, 2, 1, Cdq); /* C*dq */
 8001b4e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b52:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f503 609e 	add.w	r0, r3, #1264	; 0x4f0
 8001b5c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001b60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b64:	9302      	str	r3, [sp, #8]
 8001b66:	2301      	movs	r3, #1
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	2202      	movs	r2, #2
 8001b72:	2102      	movs	r1, #2
 8001b74:	f7ff fa38 	bl	8000fe8 <dot>
    sum(By, Cdq, 2, tau); /* tau = B*y+C*dq  */
 8001b78:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b7c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b80:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001b84:	2202      	movs	r2, #2
 8001b86:	f7ff fb34 	bl	80011f2 <sum>

    dot(manip->B, 2, 2, ddq_actual, 2, 1, Bddq); /* B*ddq */
 8001b8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b8e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 609a 	add.w	r0, r3, #1232	; 0x4d0
 8001b98:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001b9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ba0:	9302      	str	r3, [sp, #8]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4613      	mov	r3, r2
 8001bac:	2202      	movs	r2, #2
 8001bae:	2102      	movs	r1, #2
 8001bb0:	f7ff fa1a 	bl	8000fe8 <dot>
    diff(tau, Bddq, 2, result); /* tau - B*ddq */
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001bbc:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	f7ff fb43 	bl	800124c <diff>
    inv2x2(manip->C, invC); /* inv(C) */
 8001bc6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bca:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8001bd4:	f107 0218 	add.w	r2, r7, #24
 8001bd8:	4611      	mov	r1, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fa8a 	bl	80010f4 <inv2x2>
    dot(invC, 2, 2, result, 2, 1, u); /* u = inv(C) * (tau - B*ddq) */
 8001be0:	f107 0208 	add.w	r2, r7, #8
 8001be4:	f107 0018 	add.w	r0, r7, #24
 8001be8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	2202      	movs	r2, #2
 8001c00:	2102      	movs	r1, #2
 8001c02:	f7ff f9f1 	bl	8000fe8 <dot>
}
 8001c06:	bf00      	nop
 8001c08:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	080074d8 	.word	0x080074d8
 8001c14:	080074f8 	.word	0x080074f8

08001c18 <rad2stepdir>:
- int8_t *dir: pointer to the variable that will hold the direction (+1 means counterclockwise, -1 means clockwise);
@outputs: 
- void;
@#
*/
void rad2stepdir(double dq, double resolution, double frequency, uint16_t *steps, int8_t *dir){
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	ed87 0b06 	vstr	d0, [r7, #24]
 8001c22:	ed87 1b04 	vstr	d1, [r7, #16]
 8001c26:	ed87 2b02 	vstr	d2, [r7, #8]
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
    dq = delta_q/delta_t = delta_q*f -> stepdir*Resolution*f
    stepdir = dq/(Resolution*f)
    dir = sign(stepdir)
    step = abs(stepdir)
    */
    int16_t stepdir = (int16_t) dq/(resolution*frequency);
 8001c2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c32:	f7fe ff8b 	bl	8000b4c <__aeabi_d2iz>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc82 	bl	8000544 <__aeabi_i2d>
 8001c40:	4604      	mov	r4, r0
 8001c42:	460d      	mov	r5, r1
 8001c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c4c:	f7fe fce4 	bl	8000618 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4620      	mov	r0, r4
 8001c56:	4629      	mov	r1, r5
 8001c58:	f7fe fe08 	bl	800086c <__aeabi_ddiv>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f7fe ff72 	bl	8000b4c <__aeabi_d2iz>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	84fb      	strh	r3, [r7, #38]	; 0x26
    *dir = SIGN(stepdir);
 8001c6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	0bdb      	lsrs	r3, r3, #15
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bfd4      	ite	le
 8001c80:	2301      	movle	r3, #1
 8001c82:	2300      	movgt	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	b25a      	sxtb	r2, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	701a      	strb	r2, [r3, #0]
    *steps = abs(stepdir);
 8001c90:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bfb8      	it	lt
 8001c98:	425b      	neglt	r3, r3
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	801a      	strh	r2, [r3, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bdb0      	pop	{r4, r5, r7, pc}

08001ca8 <init_rate>:
- uint16_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint16_t ms){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
    rate->last_time = (double) NOW_TIME;
 8001cb4:	f003 f97c 	bl	8004fb0 <clock>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc32 	bl	8000524 <__aeabi_ui2d>
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <init_rate+0x3c>)
 8001cc6:	f7fe fdd1 	bl	800086c <__aeabi_ddiv>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	e9c1 2300 	strd	r2, r3, [r1]
    rate->delta_time = ms;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	811a      	strh	r2, [r3, #8]
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40590000 	.word	0x40590000

08001ce8 <rate_sleep>:
- rate_t *rate: pointer to the rate struct;
@outputs: 
- void;
@#
*/
void rate_sleep(rate_t *rate){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
    double now, interval;
    now = (double) NOW_TIME;
 8001cf0:	f003 f95e 	bl	8004fb0 <clock>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc14 	bl	8000524 <__aeabi_ui2d>
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <rate_sleep+0xa0>)
 8001d02:	f7fe fdb3 	bl	800086c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    interval = (double) (now - rate->last_time); /* time passed from the last rate_sleep call */
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d18:	f7fe fac6 	bl	80002a8 <__aeabi_dsub>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	e9c7 2302 	strd	r2, r3, [r7, #8]
    /* wait until enough time has passed from the last rate_sleep call */
    while( interval < rate->delta_time){
 8001d24:	e019      	b.n	8001d5a <rate_sleep+0x72>
        now = (double) NOW_TIME;
 8001d26:	f003 f943 	bl	8004fb0 <clock>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fbf9 	bl	8000524 <__aeabi_ui2d>
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <rate_sleep+0xa0>)
 8001d38:	f7fe fd98 	bl	800086c <__aeabi_ddiv>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	e9c7 2304 	strd	r2, r3, [r7, #16]
        interval = (double) (now - rate->last_time);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d4e:	f7fe faab 	bl	80002a8 <__aeabi_dsub>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while( interval < rate->delta_time){
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	891b      	ldrh	r3, [r3, #8]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fbf0 	bl	8000544 <__aeabi_i2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d6c:	f7fe fec6 	bl	8000afc <__aeabi_dcmplt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1d7      	bne.n	8001d26 <rate_sleep+0x3e>
    }
    /* if enough time has passed, save the time stamp and go on with the process */
    rate->last_time = now;
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d7c:	e9c1 2300 	strd	r2, r3, [r1]
    return;
 8001d80:	bf00      	nop
}
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40590000 	.word	0x40590000
 8001d8c:	00000000 	.word	0x00000000

08001d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d96:	f000 fc49 	bl	800262c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d9a:	f000 f84f 	bl	8001e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d9e:	f000 f901 	bl	8001fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001da2:	f000 f8df 	bl	8001f64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001da6:	f000 f8b3 	bl	8001f10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip); /* initialize the manipulator struct */
 8001daa:	4821      	ldr	r0, [pc, #132]	; (8001e30 <main+0xa0>)
 8001dac:	f7ff f8e2 	bl	8000f74 <init_man>
  init_rate(&rate, T_C); /* initialize the rate struct */
 8001db0:	f107 0318 	add.w	r3, r7, #24
 8001db4:	2101      	movs	r1, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff76 	bl	8001ca8 <init_rate>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8001dbc:	2240      	movs	r2, #64	; 0x40
 8001dbe:	491d      	ldr	r1, [pc, #116]	; (8001e34 <main+0xa4>)
 8001dc0:	481d      	ldr	r0, [pc, #116]	; (8001e38 <main+0xa8>)
 8001dc2:	f002 f83c 	bl	8003e3e <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    controller(&manip, &u); /* apply the control law to find the input */
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4818      	ldr	r0, [pc, #96]	; (8001e30 <main+0xa0>)
 8001dce:	f7ff fdad 	bl	800192c <controller>
    /* change the input from [rad/s] to [steps] and [direction] (stepdir) */
    rad2stepdir(u[0], (double) RESOLUTION, (double) 1/T_C, &steps0, &dir0); /* first motor */
 8001dd2:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dd6:	1cfa      	adds	r2, r7, #3
 8001dd8:	1dbb      	adds	r3, r7, #6
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8001e20 <main+0x90>
 8001de2:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001e28 <main+0x98>
 8001de6:	eeb0 0a47 	vmov.f32	s0, s14
 8001dea:	eef0 0a67 	vmov.f32	s1, s15
 8001dee:	f7ff ff13 	bl	8001c18 <rad2stepdir>
    rad2stepdir(u[2], (double) RESOLUTION, (double) 1/T_C, &steps1, &dir1); /* second motor */
 8001df2:	ed97 7b06 	vldr	d7, [r7, #24]
 8001df6:	1cba      	adds	r2, r7, #2
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	ed9f 2b08 	vldr	d2, [pc, #32]	; 8001e20 <main+0x90>
 8001e02:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001e28 <main+0x98>
 8001e06:	eeb0 0a47 	vmov.f32	s0, s14
 8001e0a:	eef0 0a67 	vmov.f32	s1, s15
 8001e0e:	f7ff ff03 	bl	8001c18 <rad2stepdir>
    /* apply the inputs to the motors */
    // TODO: implement methods to apply inputs to motors !!
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    rate_sleep(&rate); /* wait with a fixed frequency */
 8001e12:	f107 0318 	add.w	r3, r7, #24
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff66 	bl	8001ce8 <rate_sleep>
    controller(&manip, &u); /* apply the control law to find the input */
 8001e1c:	e7d3      	b.n	8001dc6 <main+0x36>
 8001e1e:	bf00      	nop
 8001e20:	00000000 	.word	0x00000000
 8001e24:	3ff00000 	.word	0x3ff00000
 8001e28:	cccccccd 	.word	0xcccccccd
 8001e2c:	3ffccccc 	.word	0x3ffccccc
 8001e30:	200000d0 	.word	0x200000d0
 8001e34:	2000008c 	.word	0x2000008c
 8001e38:	200005e0 	.word	0x200005e0

08001e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b094      	sub	sp, #80	; 0x50
 8001e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e42:	f107 0320 	add.w	r3, r7, #32
 8001e46:	2230      	movs	r2, #48	; 0x30
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 f8ee 	bl	800502c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <SystemClock_Config+0xcc>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <SystemClock_Config+0xcc>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <SystemClock_Config+0xcc>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <SystemClock_Config+0xd0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <SystemClock_Config+0xd0>)
 8001e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <SystemClock_Config+0xd0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001eac:	2310      	movs	r3, #16
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001eb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001eb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebe:	f107 0320 	add.w	r3, r7, #32
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 fad6 	bl	8003474 <HAL_RCC_OscConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ece:	f000 f8d7 	bl	8002080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed2:	230f      	movs	r3, #15
 8001ed4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	2102      	movs	r1, #2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fd38 	bl	8003964 <HAL_RCC_ClockConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001efa:	f000 f8c1 	bl	8002080 <Error_Handler>
  }
}
 8001efe:	bf00      	nop
 8001f00:	3750      	adds	r7, #80	; 0x50
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40007000 	.word	0x40007000

08001f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <MX_USART2_UART_Init+0x50>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f48:	f001 ff2c 	bl	8003da4 <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f52:	f000 f895 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200005e0 	.word	0x200005e0
 8001f60:	40004400 	.word	0x40004400

08001f64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_DMA_Init+0x3c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <MX_DMA_Init+0x3c>)
 8001f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_DMA_Init+0x3c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2010      	movs	r0, #16
 8001f8c:	f000 fc9b 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f90:	2010      	movs	r0, #16
 8001f92:	f000 fcb4 	bl	80028fe <HAL_NVIC_EnableIRQ>

}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <MX_GPIO_Init+0xd0>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_GPIO_Init+0xd0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <MX_GPIO_Init+0xd0>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <MX_GPIO_Init+0xd0>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	2120      	movs	r1, #32
 800202e:	4812      	ldr	r0, [pc, #72]	; (8002078 <MX_GPIO_Init+0xd4>)
 8002030:	f001 fa06 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800203a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	480c      	ldr	r0, [pc, #48]	; (800207c <MX_GPIO_Init+0xd8>)
 800204c:	f001 f874 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002050:	2320      	movs	r3, #32
 8002052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	4804      	ldr	r0, [pc, #16]	; (8002078 <MX_GPIO_Init+0xd4>)
 8002068:	f001 f866 	bl	8003138 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020800 	.word	0x40020800

08002080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002084:	b672      	cpsid	i
}
 8002086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002088:	e7fe      	b.n	8002088 <Error_Handler+0x8>
	...

0800208c <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	ed87 0b00 	vstr	d0, [r7]
    buffer->buffer[buffer->tail] = data;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	3301      	adds	r3, #1
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	18d1      	adds	r1, r2, r3
 80020a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020a8:	e9c1 2300 	strd	r2, r3, [r1]
    buffer->tail++;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	3301      	adds	r3, #1
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	781a      	ldrb	r2, [r3, #0]
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <rbpush+0x94>)
 80020be:	fba3 1302 	umull	r1, r3, r3, r2
 80020c2:	08d9      	lsrs	r1, r3, #3
 80020c4:	460b      	mov	r3, r1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	789b      	ldrb	r3, [r3, #2]
 80020d8:	2b0a      	cmp	r3, #10
 80020da:	d114      	bne.n	8002106 <rbpush+0x7a>
        /* overwriting data: also move head forward */
        buffer->head++;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	785b      	ldrb	r3, [r3, #1]
 80020e0:	3301      	adds	r3, #1
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	785a      	ldrb	r2, [r3, #1]
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <rbpush+0x94>)
 80020ee:	fba3 1302 	umull	r1, r3, r3, r2
 80020f2:	08d9      	lsrs	r1, r3, #3
 80020f4:	460b      	mov	r3, r1
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	705a      	strb	r2, [r3, #1]
 8002104:	e005      	b.n	8002112 <rbpush+0x86>
    }else{
        buffer->length++;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	789b      	ldrb	r3, [r3, #2]
 800210a:	3301      	adds	r3, #1
 800210c:	b2da      	uxtb	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	cccccccd 	.word	0xcccccccd

08002124 <rbpop>:
- rbelement_t *data: pointer to the variable that will hold the popped value;
@outputs: 
- rberror_t: whether the popping procedure was concluded successfully.
@#
*/
rberror_t rbpop(ringbuffer_t *buffer, rbelement_t *data){
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	789b      	ldrb	r3, [r3, #2]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <rbpop+0x16>
        return 0; /* pop operation could not be completed because the buffer is empty */
 8002136:	2300      	movs	r3, #0
 8002138:	e025      	b.n	8002186 <rbpop+0x62>
    }
    *data = buffer->buffer[buffer->head];
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	785b      	ldrb	r3, [r3, #1]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	3301      	adds	r3, #1
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	e9c1 2300 	strd	r2, r3, [r1]
    buffer->head++;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	785b      	ldrb	r3, [r3, #1]
 8002154:	3301      	adds	r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	705a      	strb	r2, [r3, #1]
    buffer->head %= RBUF_SZ;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	785a      	ldrb	r2, [r3, #1]
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <rbpop+0x70>)
 8002162:	fba3 1302 	umull	r1, r3, r3, r2
 8002166:	08d9      	lsrs	r1, r3, #3
 8002168:	460b      	mov	r3, r1
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	b2da      	uxtb	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	705a      	strb	r2, [r3, #1]
    buffer->length--;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	789b      	ldrb	r3, [r3, #2]
 800217c:	3b01      	subs	r3, #1
 800217e:	b2da      	uxtb	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	709a      	strb	r2, [r3, #2]
    return 1;
 8002184:	2301      	movs	r3, #1
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	cccccccd 	.word	0xcccccccd

08002198 <rblast>:
- rbelement_t *data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	789b      	ldrb	r3, [r3, #2]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <rblast+0x16>
        return 0; // operation failed
 80021aa:	2300      	movs	r3, #0
 80021ac:	e00e      	b.n	80021cc <rblast+0x34>
    }
    uint8_t index = buffer->tail-1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
        index += RBUF_SZ;
    }
    *data = buffer->buffer[index];
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	3301      	adds	r3, #1
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	e9c1 2300 	strd	r2, r3, [r1]
    return 1;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <rbclear>:
- ringbuffer_t *buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e00d      	b.n	8002206 <rbclear+0x2e>
        buffer->buffer[i] = 0;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	3301      	adds	r3, #1
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	18d1      	adds	r1, r2, r3
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < RBUF_SZ; i++){
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	3301      	adds	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b09      	cmp	r3, #9
 800220a:	d9ee      	bls.n	80021ea <rbclear+0x12>
    }
    buffer->length = 0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_MspInit+0x4c>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_MspInit+0x4c>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_MspInit+0x4c>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_MspInit+0x4c>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <HAL_MspInit+0x4c>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_MspInit+0x4c>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800226a:	2007      	movs	r0, #7
 800226c:	f000 fb20 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a39      	ldr	r2, [pc, #228]	; (8002380 <HAL_UART_MspInit+0x104>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d16b      	bne.n	8002376 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <HAL_UART_MspInit+0x108>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a37      	ldr	r2, [pc, #220]	; (8002384 <HAL_UART_MspInit+0x108>)
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b35      	ldr	r3, [pc, #212]	; (8002384 <HAL_UART_MspInit+0x108>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_UART_MspInit+0x108>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a30      	ldr	r2, [pc, #192]	; (8002384 <HAL_UART_MspInit+0x108>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <HAL_UART_MspInit+0x108>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022d6:	230c      	movs	r3, #12
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e6:	2307      	movs	r3, #7
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4825      	ldr	r0, [pc, #148]	; (8002388 <HAL_UART_MspInit+0x10c>)
 80022f2:	f000 ff21 	bl	8003138 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80022f6:	4b25      	ldr	r3, [pc, #148]	; (800238c <HAL_UART_MspInit+0x110>)
 80022f8:	4a25      	ldr	r2, [pc, #148]	; (8002390 <HAL_UART_MspInit+0x114>)
 80022fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80022fc:	4b23      	ldr	r3, [pc, #140]	; (800238c <HAL_UART_MspInit+0x110>)
 80022fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002302:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_UART_MspInit+0x110>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_UART_MspInit+0x110>)
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_UART_MspInit+0x110>)
 8002312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002316:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_UART_MspInit+0x110>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_UART_MspInit+0x110>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_UART_MspInit+0x110>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_UART_MspInit+0x110>)
 800232c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002330:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_UART_MspInit+0x110>)
 8002334:	2204      	movs	r2, #4
 8002336:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002338:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_UART_MspInit+0x110>)
 800233a:	2203      	movs	r2, #3
 800233c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_UART_MspInit+0x110>)
 8002340:	2200      	movs	r2, #0
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_UART_MspInit+0x110>)
 8002346:	2200      	movs	r2, #0
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800234a:	4810      	ldr	r0, [pc, #64]	; (800238c <HAL_UART_MspInit+0x110>)
 800234c:	f000 faf2 	bl	8002934 <HAL_DMA_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8002356:	f7ff fe93 	bl	8002080 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a0b      	ldr	r2, [pc, #44]	; (800238c <HAL_UART_MspInit+0x110>)
 800235e:	639a      	str	r2, [r3, #56]	; 0x38
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_UART_MspInit+0x110>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	2026      	movs	r0, #38	; 0x26
 800236c:	f000 faab 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002370:	2026      	movs	r0, #38	; 0x26
 8002372:	f000 fac4 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40004400 	.word	0x40004400
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000
 800238c:	20000624 	.word	0x20000624
 8002390:	40026088 	.word	0x40026088

08002394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <NMI_Handler+0x4>

0800239a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <HardFault_Handler+0x4>

080023a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <MemManage_Handler+0x4>

080023a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <BusFault_Handler+0x4>

080023ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <UsageFault_Handler+0x4>

080023b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e0:	f000 f976 	bl	80026d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <DMA1_Stream5_IRQHandler+0x10>)
 80023ee:	f000 fc39 	bl	8002c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000624 	.word	0x20000624

080023fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <USART2_IRQHandler+0x10>)
 8002402:	f001 fd4d 	bl	8003ea0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200005e0 	.word	0x200005e0

08002410 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
	return 1;
 8002414:	2301      	movs	r3, #1
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_kill>:

int _kill(int pid, int sig)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800242a:	f002 fdd5 	bl	8004fd8 <__errno>
 800242e:	4603      	mov	r3, r0
 8002430:	2216      	movs	r2, #22
 8002432:	601a      	str	r2, [r3, #0]
	return -1;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_exit>:

void _exit (int status)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ffe7 	bl	8002420 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002452:	e7fe      	b.n	8002452 <_exit+0x12>

08002454 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e00a      	b.n	800247c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002466:	f3af 8000 	nop.w
 800246a:	4601      	mov	r1, r0
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	60ba      	str	r2, [r7, #8]
 8002472:	b2ca      	uxtb	r2, r1
 8002474:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	429a      	cmp	r2, r3
 8002482:	dbf0      	blt.n	8002466 <_read+0x12>
	}

return len;
 8002484:	687b      	ldr	r3, [r7, #4]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	e009      	b.n	80024b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	60ba      	str	r2, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3301      	adds	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	dbf1      	blt.n	80024a0 <_write+0x12>
	}
	return len;
 80024bc:	687b      	ldr	r3, [r7, #4]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <_close>:

int _close(int file)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
	return -1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ee:	605a      	str	r2, [r3, #4]
	return 0;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <_isatty>:

int _isatty(int file)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
	return 1;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
	return 0;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
	return -1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <_sbrk+0x5c>)
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <_sbrk+0x60>)
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <_sbrk+0x64>)
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <_sbrk+0x68>)
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <_sbrk+0x64>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	429a      	cmp	r2, r3
 8002576:	d207      	bcs.n	8002588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002578:	f002 fd2e 	bl	8004fd8 <__errno>
 800257c:	4603      	mov	r3, r0
 800257e:	220c      	movs	r2, #12
 8002580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	e009      	b.n	800259c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <_sbrk+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	4a05      	ldr	r2, [pc, #20]	; (80025ac <_sbrk+0x64>)
 8002598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20020000 	.word	0x20020000
 80025a8:	00000400 	.word	0x00000400
 80025ac:	20000684 	.word	0x20000684
 80025b0:	200006a0 	.word	0x200006a0

080025b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <SystemInit+0x20>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <SystemInit+0x20>)
 80025c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002610 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025dc:	480d      	ldr	r0, [pc, #52]	; (8002614 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025de:	490e      	ldr	r1, [pc, #56]	; (8002618 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025e0:	4a0e      	ldr	r2, [pc, #56]	; (800261c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e4:	e002      	b.n	80025ec <LoopCopyDataInit>

080025e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ea:	3304      	adds	r3, #4

080025ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f0:	d3f9      	bcc.n	80025e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f2:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025f4:	4c0b      	ldr	r4, [pc, #44]	; (8002624 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f8:	e001      	b.n	80025fe <LoopFillZerobss>

080025fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025fc:	3204      	adds	r2, #4

080025fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002600:	d3fb      	bcc.n	80025fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002602:	f7ff ffd7 	bl	80025b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002606:	f002 fced 	bl	8004fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260a:	f7ff fbc1 	bl	8001d90 <main>
  bx  lr    
 800260e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002618:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800261c:	08007968 	.word	0x08007968
  ldr r2, =_sbss
 8002620:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002624:	2000069c 	.word	0x2000069c

08002628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC_IRQHandler>
	...

0800262c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_Init+0x40>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0d      	ldr	r2, [pc, #52]	; (800266c <HAL_Init+0x40>)
 8002636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_Init+0x40>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0a      	ldr	r2, [pc, #40]	; (800266c <HAL_Init+0x40>)
 8002642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_Init+0x40>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a07      	ldr	r2, [pc, #28]	; (800266c <HAL_Init+0x40>)
 800264e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002654:	2003      	movs	r0, #3
 8002656:	f000 f92b 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265a:	2000      	movs	r0, #0
 800265c:	f000 f808 	bl	8002670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002660:	f7ff fde4 	bl	800222c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00

08002670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_InitTick+0x54>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_InitTick+0x58>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002686:	fbb3 f3f1 	udiv	r3, r3, r1
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f943 	bl	800291a <HAL_SYSTICK_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e00e      	b.n	80026bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d80a      	bhi.n	80026ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a4:	2200      	movs	r2, #0
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f000 f90b 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b0:	4a06      	ldr	r2, [pc, #24]	; (80026cc <HAL_InitTick+0x5c>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000000 	.word	0x20000000
 80026c8:	20000008 	.word	0x20000008
 80026cc:	20000004 	.word	0x20000004

080026d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_IncTick+0x20>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_IncTick+0x24>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_IncTick+0x24>)
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000008 	.word	0x20000008
 80026f4:	20000688 	.word	0x20000688

080026f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return uwTick;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_GetTick+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000688 	.word	0x20000688

08002710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800272c:	4013      	ands	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800273c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	db0b      	blt.n	800279e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4907      	ldr	r1, [pc, #28]	; (80027ac <__NVIC_EnableIRQ+0x38>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2001      	movs	r0, #1
 8002796:	fa00 f202 	lsl.w	r2, r0, r2
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	; (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	; (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
         );
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f7ff ff8e 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	; (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff29 	bl	8002710 <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff3e 	bl	8002758 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff8e 	bl	8002804 <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff5d 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff31 	bl	8002774 <__NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffa2 	bl	800286c <SysTick_Config>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff feda 	bl	80026f8 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e099      	b.n	8002a84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002970:	e00f      	b.n	8002992 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002972:	f7ff fec1 	bl	80026f8 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b05      	cmp	r3, #5
 800297e:	d908      	bls.n	8002992 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2203      	movs	r2, #3
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e078      	b.n	8002a84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e8      	bne.n	8002972 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <HAL_DMA_Init+0x158>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d107      	bne.n	80029fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4313      	orrs	r3, r2
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f023 0307 	bic.w	r3, r3, #7
 8002a12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d117      	bne.n	8002a56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fb01 	bl	8003040 <DMA_CheckFifoParam>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2240      	movs	r2, #64	; 0x40
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a52:	2301      	movs	r3, #1
 8002a54:	e016      	b.n	8002a84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fab8 	bl	8002fd4 <DMA_CalcBaseAndBitshift>
 8002a64:	4603      	mov	r3, r0
 8002a66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	223f      	movs	r2, #63	; 0x3f
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	f010803f 	.word	0xf010803f

08002a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_DMA_Start_IT+0x26>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e040      	b.n	8002b38 <HAL_DMA_Start_IT+0xa8>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d12f      	bne.n	8002b2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fa4a 	bl	8002f78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	223f      	movs	r2, #63	; 0x3f
 8002aea:	409a      	lsls	r2, r3
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0216 	orr.w	r2, r2, #22
 8002afe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e005      	b.n	8002b36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
 8002b34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b4e:	f7ff fdd3 	bl	80026f8 <HAL_GetTick>
 8002b52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d008      	beq.n	8002b72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e052      	b.n	8002c18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0216 	bic.w	r2, r2, #22
 8002b80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <HAL_DMA_Abort+0x62>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0208 	bic.w	r2, r2, #8
 8002bb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc2:	e013      	b.n	8002bec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc4:	f7ff fd98 	bl	80026f8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d90c      	bls.n	8002bec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e015      	b.n	8002c18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e4      	bne.n	8002bc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	223f      	movs	r2, #63	; 0x3f
 8002c00:	409a      	lsls	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d004      	beq.n	8002c3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e00c      	b.n	8002c58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2205      	movs	r2, #5
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c70:	4b8e      	ldr	r3, [pc, #568]	; (8002eac <HAL_DMA_IRQHandler+0x248>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a8e      	ldr	r2, [pc, #568]	; (8002eb0 <HAL_DMA_IRQHandler+0x24c>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	0a9b      	lsrs	r3, r3, #10
 8002c7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	2208      	movs	r2, #8
 8002c90:	409a      	lsls	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01a      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0204 	bic.w	r2, r2, #4
 8002cb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	f043 0202 	orr.w	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d012      	beq.n	8002d3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	2204      	movs	r2, #4
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	2210      	movs	r2, #16
 8002d42:	409a      	lsls	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d043      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d03c      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	2210      	movs	r2, #16
 8002d60:	409a      	lsls	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d018      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d108      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d024      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
 8002d92:	e01f      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01b      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
 8002da4:	e016      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0208 	bic.w	r2, r2, #8
 8002dc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	2220      	movs	r2, #32
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 808f 	beq.w	8002f04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 8087 	beq.w	8002f04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d136      	bne.n	8002e7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0216 	bic.w	r2, r2, #22
 8002e1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x1da>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0208 	bic.w	r2, r2, #8
 8002e4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	223f      	movs	r2, #63	; 0x3f
 8002e54:	409a      	lsls	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d07e      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
        }
        return;
 8002e7a:	e079      	b.n	8002f70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01d      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10d      	bne.n	8002eb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d031      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
 8002ea8:	e02c      	b.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
 8002eaa:	bf00      	nop
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d023      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
 8002ec4:	e01e      	b.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0210 	bic.w	r2, r2, #16
 8002ee2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d032      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d022      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	3301      	adds	r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d307      	bcc.n	8002f4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f2      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x2cc>
 8002f4a:	e000      	b.n	8002f4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
 8002f6e:	e000      	b.n	8002f72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f70:	bf00      	nop
    }
  }
}
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b40      	cmp	r3, #64	; 0x40
 8002fa4:	d108      	bne.n	8002fb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fb6:	e007      	b.n	8002fc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	60da      	str	r2, [r3, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	3b10      	subs	r3, #16
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <DMA_CalcBaseAndBitshift+0x64>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fee:	4a13      	ldr	r2, [pc, #76]	; (800303c <DMA_CalcBaseAndBitshift+0x68>)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d909      	bls.n	8003016 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	1d1a      	adds	r2, r3, #4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	659a      	str	r2, [r3, #88]	; 0x58
 8003014:	e007      	b.n	8003026 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800301e:	f023 0303 	bic.w	r3, r3, #3
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	aaaaaaab 	.word	0xaaaaaaab
 800303c:	08007530 	.word	0x08007530

08003040 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11f      	bne.n	800309a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d856      	bhi.n	800310e <DMA_CheckFifoParam+0xce>
 8003060:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <DMA_CheckFifoParam+0x28>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	08003079 	.word	0x08003079
 800306c:	0800308b 	.word	0x0800308b
 8003070:	08003079 	.word	0x08003079
 8003074:	0800310f 	.word	0x0800310f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d046      	beq.n	8003112 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003088:	e043      	b.n	8003112 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003092:	d140      	bne.n	8003116 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003098:	e03d      	b.n	8003116 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a2:	d121      	bne.n	80030e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d837      	bhi.n	800311a <DMA_CheckFifoParam+0xda>
 80030aa:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <DMA_CheckFifoParam+0x70>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030c7 	.word	0x080030c7
 80030b8:	080030c1 	.word	0x080030c1
 80030bc:	080030d9 	.word	0x080030d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      break;
 80030c4:	e030      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d025      	beq.n	800311e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d6:	e022      	b.n	800311e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030e0:	d11f      	bne.n	8003122 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030e6:	e01c      	b.n	8003122 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d903      	bls.n	80030f6 <DMA_CheckFifoParam+0xb6>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d003      	beq.n	80030fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030f4:	e018      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
      break;
 80030fa:	e015      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      break;
 800310c:	e00b      	b.n	8003126 <DMA_CheckFifoParam+0xe6>
      break;
 800310e:	bf00      	nop
 8003110:	e00a      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
 8003114:	e008      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
 8003118:	e006      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 800311a:	bf00      	nop
 800311c:	e004      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 800311e:	bf00      	nop
 8003120:	e002      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;   
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 8003126:	bf00      	nop
    }
  } 
  
  return status; 
 8003128:	7bfb      	ldrb	r3, [r7, #15]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop

08003138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	e159      	b.n	8003408 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	429a      	cmp	r2, r3
 800316e:	f040 8148 	bne.w	8003402 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d005      	beq.n	800318a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003186:	2b02      	cmp	r3, #2
 8003188:	d130      	bne.n	80031ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	2203      	movs	r2, #3
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c0:	2201      	movs	r2, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 0201 	and.w	r2, r3, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d017      	beq.n	8003228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d123      	bne.n	800327c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	08da      	lsrs	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3208      	adds	r2, #8
 800323c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	220f      	movs	r2, #15
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	08da      	lsrs	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3208      	adds	r2, #8
 8003276:	69b9      	ldr	r1, [r7, #24]
 8003278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0203 	and.w	r2, r3, #3
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a2 	beq.w	8003402 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	4b57      	ldr	r3, [pc, #348]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	4a56      	ldr	r2, [pc, #344]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80032c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032cc:	6453      	str	r3, [r2, #68]	; 0x44
 80032ce:	4b54      	ldr	r3, [pc, #336]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032da:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_GPIO_Init+0x2ec>)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	089b      	lsrs	r3, r3, #2
 80032e0:	3302      	adds	r3, #2
 80032e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	220f      	movs	r2, #15
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a49      	ldr	r2, [pc, #292]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d019      	beq.n	800333a <HAL_GPIO_Init+0x202>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a48      	ldr	r2, [pc, #288]	; (800342c <HAL_GPIO_Init+0x2f4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_GPIO_Init+0x1fe>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a47      	ldr	r2, [pc, #284]	; (8003430 <HAL_GPIO_Init+0x2f8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00d      	beq.n	8003332 <HAL_GPIO_Init+0x1fa>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a46      	ldr	r2, [pc, #280]	; (8003434 <HAL_GPIO_Init+0x2fc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <HAL_GPIO_Init+0x1f6>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a45      	ldr	r2, [pc, #276]	; (8003438 <HAL_GPIO_Init+0x300>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_GPIO_Init+0x1f2>
 8003326:	2304      	movs	r3, #4
 8003328:	e008      	b.n	800333c <HAL_GPIO_Init+0x204>
 800332a:	2307      	movs	r3, #7
 800332c:	e006      	b.n	800333c <HAL_GPIO_Init+0x204>
 800332e:	2303      	movs	r3, #3
 8003330:	e004      	b.n	800333c <HAL_GPIO_Init+0x204>
 8003332:	2302      	movs	r3, #2
 8003334:	e002      	b.n	800333c <HAL_GPIO_Init+0x204>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_GPIO_Init+0x204>
 800333a:	2300      	movs	r3, #0
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	f002 0203 	and.w	r2, r2, #3
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	4093      	lsls	r3, r2
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800334c:	4935      	ldr	r1, [pc, #212]	; (8003424 <HAL_GPIO_Init+0x2ec>)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	3302      	adds	r3, #2
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <HAL_GPIO_Init+0x304>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800337e:	4a2f      	ldr	r2, [pc, #188]	; (800343c <HAL_GPIO_Init+0x304>)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003384:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_GPIO_Init+0x304>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033a8:	4a24      	ldr	r2, [pc, #144]	; (800343c <HAL_GPIO_Init+0x304>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ae:	4b23      	ldr	r3, [pc, #140]	; (800343c <HAL_GPIO_Init+0x304>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d2:	4a1a      	ldr	r2, [pc, #104]	; (800343c <HAL_GPIO_Init+0x304>)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d8:	4b18      	ldr	r3, [pc, #96]	; (800343c <HAL_GPIO_Init+0x304>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033fc:	4a0f      	ldr	r2, [pc, #60]	; (800343c <HAL_GPIO_Init+0x304>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3301      	adds	r3, #1
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b0f      	cmp	r3, #15
 800340c:	f67f aea2 	bls.w	8003154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	40013800 	.word	0x40013800
 8003428:	40020000 	.word	0x40020000
 800342c:	40020400 	.word	0x40020400
 8003430:	40020800 	.word	0x40020800
 8003434:	40020c00 	.word	0x40020c00
 8003438:	40021000 	.word	0x40021000
 800343c:	40013c00 	.word	0x40013c00

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800345c:	e003      	b.n	8003466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	041a      	lsls	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e267      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d075      	beq.n	800357e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003492:	4b88      	ldr	r3, [pc, #544]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b04      	cmp	r3, #4
 800349c:	d00c      	beq.n	80034b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349e:	4b85      	ldr	r3, [pc, #532]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d112      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034aa:	4b82      	ldr	r3, [pc, #520]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b6:	d10b      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	4b7e      	ldr	r3, [pc, #504]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d05b      	beq.n	800357c <HAL_RCC_OscConfig+0x108>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d157      	bne.n	800357c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e242      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d8:	d106      	bne.n	80034e8 <HAL_RCC_OscConfig+0x74>
 80034da:	4b76      	ldr	r3, [pc, #472]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a75      	ldr	r2, [pc, #468]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e01d      	b.n	8003524 <HAL_RCC_OscConfig+0xb0>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0x98>
 80034f2:	4b70      	ldr	r3, [pc, #448]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a6f      	ldr	r2, [pc, #444]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b6d      	ldr	r3, [pc, #436]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6c      	ldr	r2, [pc, #432]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0xb0>
 800350c:	4b69      	ldr	r3, [pc, #420]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a68      	ldr	r2, [pc, #416]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b66      	ldr	r3, [pc, #408]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a65      	ldr	r2, [pc, #404]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 800351e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7ff f8e4 	bl	80026f8 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003534:	f7ff f8e0 	bl	80026f8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e207      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b5b      	ldr	r3, [pc, #364]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0xc0>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7ff f8d0 	bl	80026f8 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355c:	f7ff f8cc 	bl	80026f8 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e1f3      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	4b51      	ldr	r3, [pc, #324]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0xe8>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d063      	beq.n	8003652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800358a:	4b4a      	ldr	r3, [pc, #296]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11c      	bne.n	80035dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a2:	4b44      	ldr	r3, [pc, #272]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x152>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e1c7      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4937      	ldr	r1, [pc, #220]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	e03a      	b.n	8003652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e4:	4b34      	ldr	r3, [pc, #208]	; (80036b8 <HAL_RCC_OscConfig+0x244>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7ff f885 	bl	80026f8 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f2:	f7ff f881 	bl	80026f8 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e1a8      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4925      	ldr	r1, [pc, #148]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
 8003624:	e015      	b.n	8003652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_RCC_OscConfig+0x244>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7ff f864 	bl	80026f8 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003634:	f7ff f860 	bl	80026f8 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e187      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d036      	beq.n	80036cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003666:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_RCC_OscConfig+0x248>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7ff f844 	bl	80026f8 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003674:	f7ff f840 	bl	80026f8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e167      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x200>
 8003692:	e01b      	b.n	80036cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_OscConfig+0x248>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369a:	f7ff f82d 	bl	80026f8 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	e00e      	b.n	80036c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a2:	f7ff f829 	bl	80026f8 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d907      	bls.n	80036c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e150      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
 80036b4:	40023800 	.word	0x40023800
 80036b8:	42470000 	.word	0x42470000
 80036bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	4b88      	ldr	r3, [pc, #544]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ea      	bne.n	80036a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8097 	beq.w	8003808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036de:	4b81      	ldr	r3, [pc, #516]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10f      	bne.n	800370a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	4b7d      	ldr	r3, [pc, #500]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a7c      	ldr	r2, [pc, #496]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
 80036fa:	4b7a      	ldr	r3, [pc, #488]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003706:	2301      	movs	r3, #1
 8003708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370a:	4b77      	ldr	r3, [pc, #476]	; (80038e8 <HAL_RCC_OscConfig+0x474>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d118      	bne.n	8003748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003716:	4b74      	ldr	r3, [pc, #464]	; (80038e8 <HAL_RCC_OscConfig+0x474>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a73      	ldr	r2, [pc, #460]	; (80038e8 <HAL_RCC_OscConfig+0x474>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003722:	f7fe ffe9 	bl	80026f8 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372a:	f7fe ffe5 	bl	80026f8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e10c      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <HAL_RCC_OscConfig+0x474>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x2ea>
 8003750:	4b64      	ldr	r3, [pc, #400]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	4a63      	ldr	r2, [pc, #396]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6713      	str	r3, [r2, #112]	; 0x70
 800375c:	e01c      	b.n	8003798 <HAL_RCC_OscConfig+0x324>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b05      	cmp	r3, #5
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x30c>
 8003766:	4b5f      	ldr	r3, [pc, #380]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	4a5e      	ldr	r2, [pc, #376]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	6713      	str	r3, [r2, #112]	; 0x70
 8003772:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4a5b      	ldr	r2, [pc, #364]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6713      	str	r3, [r2, #112]	; 0x70
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0x324>
 8003780:	4b58      	ldr	r3, [pc, #352]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4a57      	ldr	r2, [pc, #348]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	6713      	str	r3, [r2, #112]	; 0x70
 800378c:	4b55      	ldr	r3, [pc, #340]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a54      	ldr	r2, [pc, #336]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003792:	f023 0304 	bic.w	r3, r3, #4
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d015      	beq.n	80037cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fe ffaa 	bl	80026f8 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fe ffa6 	bl	80026f8 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0cb      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037be:	4b49      	ldr	r3, [pc, #292]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ee      	beq.n	80037a8 <HAL_RCC_OscConfig+0x334>
 80037ca:	e014      	b.n	80037f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037cc:	f7fe ff94 	bl	80026f8 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fe ff90 	bl	80026f8 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0b5      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ea:	4b3e      	ldr	r3, [pc, #248]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1ee      	bne.n	80037d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d105      	bne.n	8003808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fc:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	4a38      	ldr	r2, [pc, #224]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80a1 	beq.w	8003954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003812:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b08      	cmp	r3, #8
 800381c:	d05c      	beq.n	80038d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d141      	bne.n	80038aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b31      	ldr	r3, [pc, #196]	; (80038ec <HAL_RCC_OscConfig+0x478>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe ff64 	bl	80026f8 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003834:	f7fe ff60 	bl	80026f8 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e087      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	019b      	lsls	r3, r3, #6
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	3b01      	subs	r3, #1
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	491b      	ldr	r1, [pc, #108]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800387c:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_RCC_OscConfig+0x478>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fe ff39 	bl	80026f8 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388a:	f7fe ff35 	bl	80026f8 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e05c      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x416>
 80038a8:	e054      	b.n	8003954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4b10      	ldr	r3, [pc, #64]	; (80038ec <HAL_RCC_OscConfig+0x478>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe ff22 	bl	80026f8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fe ff1e 	bl	80026f8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e045      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <HAL_RCC_OscConfig+0x470>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x444>
 80038d6:	e03d      	b.n	8003954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e038      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40007000 	.word	0x40007000
 80038ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_RCC_OscConfig+0x4ec>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d028      	beq.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d121      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d11a      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003928:	4293      	cmp	r3, r2
 800392a:	d111      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	3b01      	subs	r3, #1
 800393a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d107      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800

08003964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0cc      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003978:	4b68      	ldr	r3, [pc, #416]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d90c      	bls.n	80039a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b65      	ldr	r3, [pc, #404]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b63      	ldr	r3, [pc, #396]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0b8      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d020      	beq.n	80039ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b8:	4b59      	ldr	r3, [pc, #356]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4a58      	ldr	r2, [pc, #352]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d0:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4a52      	ldr	r2, [pc, #328]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039dc:	4b50      	ldr	r3, [pc, #320]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	494d      	ldr	r1, [pc, #308]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d044      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d119      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e07f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a22:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e06f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a32:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e067      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a42:	4b37      	ldr	r3, [pc, #220]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f023 0203 	bic.w	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	4934      	ldr	r1, [pc, #208]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a54:	f7fe fe50 	bl	80026f8 <HAL_GetTick>
 8003a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a5c:	f7fe fe4c 	bl	80026f8 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e04f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 020c 	and.w	r2, r3, #12
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d1eb      	bne.n	8003a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a84:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d20c      	bcs.n	8003aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e032      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab8:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4916      	ldr	r1, [pc, #88]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	490e      	ldr	r1, [pc, #56]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aea:	f000 f821 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003aee:	4602      	mov	r2, r0
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	490a      	ldr	r1, [pc, #40]	; (8003b24 <HAL_RCC_ClockConfig+0x1c0>)
 8003afc:	5ccb      	ldrb	r3, [r1, r3]
 8003afe:	fa22 f303 	lsr.w	r3, r2, r3
 8003b02:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fdb0 	bl	8002670 <HAL_InitTick>

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023c00 	.word	0x40023c00
 8003b20:	40023800 	.word	0x40023800
 8003b24:	08007518 	.word	0x08007518
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	20000004 	.word	0x20000004

08003b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b34:	b094      	sub	sp, #80	; 0x50
 8003b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b40:	2300      	movs	r3, #0
 8003b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b48:	4b79      	ldr	r3, [pc, #484]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d00d      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x40>
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	f200 80e1 	bhi.w	8003d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x34>
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b62:	e0db      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b73      	ldr	r3, [pc, #460]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b68:	e0db      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b6a:	4b73      	ldr	r3, [pc, #460]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b6e:	e0d8      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b70:	4b6f      	ldr	r3, [pc, #444]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b7a:	4b6d      	ldr	r3, [pc, #436]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d063      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b86:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	099b      	lsrs	r3, r3, #6
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	0159      	lsls	r1, r3, #5
 8003bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb4:	0150      	lsls	r0, r2, #5
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4621      	mov	r1, r4
 8003bbc:	1a51      	subs	r1, r2, r1
 8003bbe:	6139      	str	r1, [r7, #16]
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bd4:	4659      	mov	r1, fp
 8003bd6:	018b      	lsls	r3, r1, #6
 8003bd8:	4651      	mov	r1, sl
 8003bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bde:	4651      	mov	r1, sl
 8003be0:	018a      	lsls	r2, r1, #6
 8003be2:	4651      	mov	r1, sl
 8003be4:	ebb2 0801 	subs.w	r8, r2, r1
 8003be8:	4659      	mov	r1, fp
 8003bea:	eb63 0901 	sbc.w	r9, r3, r1
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c02:	4690      	mov	r8, r2
 8003c04:	4699      	mov	r9, r3
 8003c06:	4623      	mov	r3, r4
 8003c08:	eb18 0303 	adds.w	r3, r8, r3
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	462b      	mov	r3, r5
 8003c10:	eb49 0303 	adc.w	r3, r9, r3
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c22:	4629      	mov	r1, r5
 8003c24:	024b      	lsls	r3, r1, #9
 8003c26:	4621      	mov	r1, r4
 8003c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	024a      	lsls	r2, r1, #9
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c36:	2200      	movs	r2, #0
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c40:	f7fc ffac 	bl	8000b9c <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4613      	mov	r3, r2
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c4c:	e058      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4e:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	2200      	movs	r2, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	4611      	mov	r1, r2
 8003c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c5e:	623b      	str	r3, [r7, #32]
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
 8003c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c68:	4642      	mov	r2, r8
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	f04f 0000 	mov.w	r0, #0
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	0159      	lsls	r1, r3, #5
 8003c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7a:	0150      	lsls	r0, r2, #5
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4641      	mov	r1, r8
 8003c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c86:	4649      	mov	r1, r9
 8003c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	00eb      	lsls	r3, r5, #3
 8003cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb6:	00e2      	lsls	r2, r4, #3
 8003cb8:	4614      	mov	r4, r2
 8003cba:	461d      	mov	r5, r3
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	18e3      	adds	r3, r4, r3
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	eb45 0303 	adc.w	r3, r5, r3
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	028b      	lsls	r3, r1, #10
 8003cda:	4621      	mov	r1, r4
 8003cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	028a      	lsls	r2, r1, #10
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cea:	2200      	movs	r2, #0
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	61fa      	str	r2, [r7, #28]
 8003cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf4:	f7fc ff52 	bl	8000b9c <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d1a:	e002      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3750      	adds	r7, #80	; 0x50
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200

08003d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000000 	.word	0x20000000

08003d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d58:	f7ff fff0 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4903      	ldr	r1, [pc, #12]	; (8003d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	08007528 	.word	0x08007528

08003d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d80:	f7ff ffdc 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0b5b      	lsrs	r3, r3, #13
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	08007528 	.word	0x08007528

08003da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e03f      	b.n	8003e36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fe fa56 	bl	800227c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2224      	movs	r2, #36	; 0x24
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fe69 	bl	8004ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d11d      	bne.n	8003e94 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_UART_Receive_DMA+0x26>
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e016      	b.n	8003e96 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_UART_Receive_DMA+0x38>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e00f      	b.n	8003e96 <HAL_UART_Receive_DMA+0x58>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	461a      	mov	r2, r3
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fbb8 	bl	8004600 <UART_Start_Receive_DMA>
 8003e90:	4603      	mov	r3, r0
 8003e92:	e000      	b.n	8003e96 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b0ba      	sub	sp, #232	; 0xe8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_UART_IRQHandler+0x66>
 8003ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fd23 	bl	800494a <UART_Receive_IT>
      return;
 8003f04:	e256      	b.n	80043b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80de 	beq.w	80040cc <HAL_UART_IRQHandler+0x22c>
 8003f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80d1 	beq.w	80040cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <HAL_UART_IRQHandler+0xae>
 8003f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f043 0201 	orr.w	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00b      	beq.n	8003f72 <HAL_UART_IRQHandler+0xd2>
 8003f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f043 0202 	orr.w	r2, r3, #2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_UART_IRQHandler+0xf6>
 8003f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f043 0204 	orr.w	r2, r3, #4
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d011      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x126>
 8003fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f043 0208 	orr.w	r2, r3, #8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 81ed 	beq.w	80043aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_UART_IRQHandler+0x14e>
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fcae 	bl	800494a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <HAL_UART_IRQHandler+0x17a>
 8004012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d04f      	beq.n	80040ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fbb6 	bl	800478c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	d141      	bne.n	80040b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3314      	adds	r3, #20
 8004034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800404c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3314      	adds	r3, #20
 8004056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800405a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800405e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1d9      	bne.n	800402e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	2b00      	cmp	r3, #0
 8004080:	d013      	beq.n	80040aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	4a7d      	ldr	r2, [pc, #500]	; (800427c <HAL_UART_IRQHandler+0x3dc>)
 8004088:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fdc6 	bl	8002c20 <HAL_DMA_Abort_IT>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040a4:	4610      	mov	r0, r2
 80040a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	e00e      	b.n	80040c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f99a 	bl	80043e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	e00a      	b.n	80040c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f996 	bl	80043e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	e006      	b.n	80040c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f992 	bl	80043e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040c6:	e170      	b.n	80043aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c8:	bf00      	nop
    return;
 80040ca:	e16e      	b.n	80043aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	f040 814a 	bne.w	800436a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8143 	beq.w	800436a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 813c 	beq.w	800436a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	f040 80b4 	bne.w	8004280 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004124:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8140 	beq.w	80043ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004136:	429a      	cmp	r2, r3
 8004138:	f080 8139 	bcs.w	80043ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004142:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414e:	f000 8088 	beq.w	8004262 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800416c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800417e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800418a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1d9      	bne.n	8004152 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3314      	adds	r3, #20
 80041a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3314      	adds	r3, #20
 80041be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e1      	bne.n	800419e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3314      	adds	r3, #20
 80041e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3314      	adds	r3, #20
 80041fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004200:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004204:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800420c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e3      	bne.n	80041da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004232:	f023 0310 	bic.w	r3, r3, #16
 8004236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	330c      	adds	r3, #12
 8004240:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004244:	65ba      	str	r2, [r7, #88]	; 0x58
 8004246:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800424a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e3      	bne.n	8004220 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe fc6f 	bl	8002b40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800426a:	b29b      	uxth	r3, r3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	b29b      	uxth	r3, r3
 8004270:	4619      	mov	r1, r3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8c0 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004278:	e099      	b.n	80043ae <HAL_UART_IRQHandler+0x50e>
 800427a:	bf00      	nop
 800427c:	08004853 	.word	0x08004853
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004288:	b29b      	uxth	r3, r3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 808b 	beq.w	80043b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800429c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8086 	beq.w	80043b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042ca:	647a      	str	r2, [r7, #68]	; 0x44
 80042cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e3      	bne.n	80042a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	623b      	str	r3, [r7, #32]
   return(result);
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3314      	adds	r3, #20
 80042fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004302:	633a      	str	r2, [r7, #48]	; 0x30
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e3      	bne.n	80042de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	60fb      	str	r3, [r7, #12]
   return(result);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0310 	bic.w	r3, r3, #16
 800433a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004348:	61fa      	str	r2, [r7, #28]
 800434a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	69b9      	ldr	r1, [r7, #24]
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	617b      	str	r3, [r7, #20]
   return(result);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e3      	bne.n	8004324 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800435c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004360:	4619      	mov	r1, r3
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f848 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004368:	e023      	b.n	80043b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <HAL_UART_IRQHandler+0x4ea>
 8004376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa79 	bl	800487a <UART_Transmit_IT>
    return;
 8004388:	e014      	b.n	80043b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <HAL_UART_IRQHandler+0x514>
 8004396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fab9 	bl	800491a <UART_EndTransmit_IT>
    return;
 80043a8:	e004      	b.n	80043b4 <HAL_UART_IRQHandler+0x514>
    return;
 80043aa:	bf00      	nop
 80043ac:	e002      	b.n	80043b4 <HAL_UART_IRQHandler+0x514>
      return;
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <HAL_UART_IRQHandler+0x514>
      return;
 80043b2:	bf00      	nop
  }
}
 80043b4:	37e8      	adds	r7, #232	; 0xe8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop

080043bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b09c      	sub	sp, #112	; 0x70
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d172      	bne.n	8004512 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800442c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442e:	2200      	movs	r2, #0
 8004430:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	330c      	adds	r3, #12
 8004438:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004448:	66bb      	str	r3, [r7, #104]	; 0x68
 800444a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004452:	65ba      	str	r2, [r7, #88]	; 0x58
 8004454:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3314      	adds	r3, #20
 800446c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	667b      	str	r3, [r7, #100]	; 0x64
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004486:	647a      	str	r2, [r7, #68]	; 0x44
 8004488:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800448c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e5      	bne.n	8004466 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	623b      	str	r3, [r7, #32]
   return(result);
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b0:	663b      	str	r3, [r7, #96]	; 0x60
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3314      	adds	r3, #20
 80044b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044ba:	633a      	str	r2, [r7, #48]	; 0x30
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d119      	bne.n	8004512 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f023 0310 	bic.w	r3, r3, #16
 80044f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044fe:	61fa      	str	r2, [r7, #28]
 8004500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	69b9      	ldr	r1, [r7, #24]
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	617b      	str	r3, [r7, #20]
   return(result);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e5      	bne.n	80044de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	2b01      	cmp	r3, #1
 8004518:	d106      	bne.n	8004528 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800451e:	4619      	mov	r1, r3
 8004520:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004522:	f7ff ff69 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004526:	e002      	b.n	800452e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004528:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800452a:	f7fc fcb9 	bl	8000ea0 <HAL_UART_RxCpltCallback>
}
 800452e:	bf00      	nop
 8004530:	3770      	adds	r7, #112	; 0x70
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2b01      	cmp	r3, #1
 800454a:	d108      	bne.n	800455e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	b29b      	uxth	r3, r3
 8004554:	4619      	mov	r1, r3
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff ff4e 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800455c:	e002      	b.n	8004564 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff ff36 	bl	80043d0 <HAL_UART_RxHalfCpltCallback>
}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b21      	cmp	r3, #33	; 0x21
 800459e:	d108      	bne.n	80045b2 <UART_DMAError+0x46>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2200      	movs	r2, #0
 80045aa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80045ac:	68b8      	ldr	r0, [r7, #8]
 80045ae:	f000 f8c5 	bl	800473c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b22      	cmp	r3, #34	; 0x22
 80045d2:	d108      	bne.n	80045e6 <UART_DMAError+0x7a>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2200      	movs	r2, #0
 80045de:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80045e0:	68b8      	ldr	r0, [r7, #8]
 80045e2:	f000 f8d3 	bl	800478c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f043 0210 	orr.w	r2, r3, #16
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045f2:	68b8      	ldr	r0, [r7, #8]
 80045f4:	f7ff fef6 	bl	80043e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b098      	sub	sp, #96	; 0x60
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2222      	movs	r2, #34	; 0x22
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	4a40      	ldr	r2, [pc, #256]	; (8004730 <UART_Start_Receive_DMA+0x130>)
 800462e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	4a3f      	ldr	r2, [pc, #252]	; (8004734 <UART_Start_Receive_DMA+0x134>)
 8004636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	4a3e      	ldr	r2, [pc, #248]	; (8004738 <UART_Start_Receive_DMA+0x138>)
 800463e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	2200      	movs	r2, #0
 8004646:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004648:	f107 0308 	add.w	r3, r7, #8
 800464c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	f7fe fa16 	bl	8002a90 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d019      	beq.n	80046be <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800469a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80046ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80046b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80046b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e5      	bne.n	800468a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	657b      	str	r3, [r7, #84]	; 0x54
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3314      	adds	r3, #20
 80046dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046de:	63ba      	str	r2, [r7, #56]	; 0x38
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	617b      	str	r3, [r7, #20]
   return(result);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004708:	653b      	str	r3, [r7, #80]	; 0x50
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004712:	627a      	str	r2, [r7, #36]	; 0x24
 8004714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6a39      	ldr	r1, [r7, #32]
 8004718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e5      	bne.n	80046f2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3760      	adds	r7, #96	; 0x60
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	08004411 	.word	0x08004411
 8004734:	08004537 	.word	0x08004537
 8004738:	0800456d 	.word	0x0800456d

0800473c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b089      	sub	sp, #36	; 0x24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	330c      	adds	r3, #12
 800474a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	e853 3f00 	ldrex	r3, [r3]
 8004752:	60bb      	str	r3, [r7, #8]
   return(result);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	61ba      	str	r2, [r7, #24]
 8004766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6979      	ldr	r1, [r7, #20]
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	613b      	str	r3, [r7, #16]
   return(result);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e5      	bne.n	8004744 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004780:	bf00      	nop
 8004782:	3724      	adds	r7, #36	; 0x24
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b095      	sub	sp, #84	; 0x54
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	330c      	adds	r3, #12
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	330c      	adds	r3, #12
 80047b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047b4:	643a      	str	r2, [r7, #64]	; 0x40
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e5      	bne.n	8004794 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3314      	adds	r3, #20
 80047ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3314      	adds	r3, #20
 80047e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e5      	bne.n	80047c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	2b01      	cmp	r3, #1
 8004802:	d119      	bne.n	8004838 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	330c      	adds	r3, #12
 800480a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	60bb      	str	r3, [r7, #8]
   return(result);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f023 0310 	bic.w	r3, r3, #16
 800481a:	647b      	str	r3, [r7, #68]	; 0x44
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004824:	61ba      	str	r2, [r7, #24]
 8004826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6979      	ldr	r1, [r7, #20]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	613b      	str	r3, [r7, #16]
   return(result);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e5      	bne.n	8004804 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004846:	bf00      	nop
 8004848:	3754      	adds	r7, #84	; 0x54
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7ff fdb9 	bl	80043e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b21      	cmp	r3, #33	; 0x21
 800488c:	d13e      	bne.n	800490c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	d114      	bne.n	80048c2 <UART_Transmit_IT+0x48>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d110      	bne.n	80048c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	1c9a      	adds	r2, r3, #2
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	621a      	str	r2, [r3, #32]
 80048c0:	e008      	b.n	80048d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	1c59      	adds	r1, r3, #1
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6211      	str	r1, [r2, #32]
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29b      	uxth	r3, r3
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4619      	mov	r1, r3
 80048e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10f      	bne.n	8004908 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004906:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004930:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fd3e 	bl	80043bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b08c      	sub	sp, #48	; 0x30
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b22      	cmp	r3, #34	; 0x22
 800495c:	f040 80ab 	bne.w	8004ab6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004968:	d117      	bne.n	800499a <UART_Receive_IT+0x50>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d113      	bne.n	800499a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004988:	b29a      	uxth	r2, r3
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	1c9a      	adds	r2, r3, #2
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
 8004998:	e026      	b.n	80049e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ac:	d007      	beq.n	80049be <UART_Receive_IT+0x74>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <UART_Receive_IT+0x82>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	e008      	b.n	80049de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4619      	mov	r1, r3
 80049f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d15a      	bne.n	8004ab2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0220 	bic.w	r2, r2, #32
 8004a0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0201 	bic.w	r2, r2, #1
 8004a2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d135      	bne.n	8004aa8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	330c      	adds	r3, #12
 8004a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	613b      	str	r3, [r7, #16]
   return(result);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f023 0310 	bic.w	r3, r3, #16
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a62:	623a      	str	r2, [r7, #32]
 8004a64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	69f9      	ldr	r1, [r7, #28]
 8004a68:	6a3a      	ldr	r2, [r7, #32]
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e5      	bne.n	8004a42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d10a      	bne.n	8004a9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff fca9 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
 8004aa6:	e002      	b.n	8004aae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fc f9f9 	bl	8000ea0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e002      	b.n	8004ab8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e000      	b.n	8004ab8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ab6:	2302      	movs	r3, #2
  }
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3730      	adds	r7, #48	; 0x30
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac4:	b0c0      	sub	sp, #256	; 0x100
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	68d9      	ldr	r1, [r3, #12]
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	ea40 0301 	orr.w	r3, r0, r1
 8004ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b18:	f021 010c 	bic.w	r1, r1, #12
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b26:	430b      	orrs	r3, r1
 8004b28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	6999      	ldr	r1, [r3, #24]
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	ea40 0301 	orr.w	r3, r0, r1
 8004b46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b8f      	ldr	r3, [pc, #572]	; (8004d8c <UART_SetConfig+0x2cc>)
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d005      	beq.n	8004b60 <UART_SetConfig+0xa0>
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b8d      	ldr	r3, [pc, #564]	; (8004d90 <UART_SetConfig+0x2d0>)
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d104      	bne.n	8004b6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b60:	f7ff f90c 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8004b64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b68:	e003      	b.n	8004b72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b6a:	f7ff f8f3 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8004b6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7c:	f040 810c 	bne.w	8004d98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b84:	2200      	movs	r2, #0
 8004b86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b92:	4622      	mov	r2, r4
 8004b94:	462b      	mov	r3, r5
 8004b96:	1891      	adds	r1, r2, r2
 8004b98:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b9a:	415b      	adcs	r3, r3
 8004b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	eb12 0801 	adds.w	r8, r2, r1
 8004ba8:	4629      	mov	r1, r5
 8004baa:	eb43 0901 	adc.w	r9, r3, r1
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bc2:	4690      	mov	r8, r2
 8004bc4:	4699      	mov	r9, r3
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	eb18 0303 	adds.w	r3, r8, r3
 8004bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	eb49 0303 	adc.w	r3, r9, r3
 8004bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004be6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bee:	460b      	mov	r3, r1
 8004bf0:	18db      	adds	r3, r3, r3
 8004bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	eb42 0303 	adc.w	r3, r2, r3
 8004bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8004bfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c04:	f7fb ffca 	bl	8000b9c <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4b61      	ldr	r3, [pc, #388]	; (8004d94 <UART_SetConfig+0x2d4>)
 8004c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	011c      	lsls	r4, r3, #4
 8004c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c30:	415b      	adcs	r3, r3
 8004c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c38:	4641      	mov	r1, r8
 8004c3a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c3e:	4649      	mov	r1, r9
 8004c40:	eb43 0b01 	adc.w	fp, r3, r1
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c58:	4692      	mov	sl, r2
 8004c5a:	469b      	mov	fp, r3
 8004c5c:	4643      	mov	r3, r8
 8004c5e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c66:	464b      	mov	r3, r9
 8004c68:	eb4b 0303 	adc.w	r3, fp, r3
 8004c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c84:	460b      	mov	r3, r1
 8004c86:	18db      	adds	r3, r3, r3
 8004c88:	643b      	str	r3, [r7, #64]	; 0x40
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	eb42 0303 	adc.w	r3, r2, r3
 8004c90:	647b      	str	r3, [r7, #68]	; 0x44
 8004c92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c9a:	f7fb ff7f 	bl	8000b9c <__aeabi_uldivmod>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4b3b      	ldr	r3, [pc, #236]	; (8004d94 <UART_SetConfig+0x2d4>)
 8004ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	2264      	movs	r2, #100	; 0x64
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	1acb      	subs	r3, r1, r3
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cba:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <UART_SetConfig+0x2d4>)
 8004cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cc8:	441c      	add	r4, r3
 8004cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	1891      	adds	r1, r2, r2
 8004ce2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ce4:	415b      	adcs	r3, r3
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cec:	4641      	mov	r1, r8
 8004cee:	1851      	adds	r1, r2, r1
 8004cf0:	6339      	str	r1, [r7, #48]	; 0x30
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	414b      	adcs	r3, r1
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d04:	4659      	mov	r1, fp
 8004d06:	00cb      	lsls	r3, r1, #3
 8004d08:	4651      	mov	r1, sl
 8004d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0e:	4651      	mov	r1, sl
 8004d10:	00ca      	lsls	r2, r1, #3
 8004d12:	4610      	mov	r0, r2
 8004d14:	4619      	mov	r1, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	4642      	mov	r2, r8
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d20:	464b      	mov	r3, r9
 8004d22:	460a      	mov	r2, r1
 8004d24:	eb42 0303 	adc.w	r3, r2, r3
 8004d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d40:	460b      	mov	r3, r1
 8004d42:	18db      	adds	r3, r3, r3
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d46:	4613      	mov	r3, r2
 8004d48:	eb42 0303 	adc.w	r3, r2, r3
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d56:	f7fb ff21 	bl	8000b9c <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <UART_SetConfig+0x2d4>)
 8004d60:	fba3 1302 	umull	r1, r3, r3, r2
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	2164      	movs	r1, #100	; 0x64
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	3332      	adds	r3, #50	; 0x32
 8004d72:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <UART_SetConfig+0x2d4>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	f003 0207 	and.w	r2, r3, #7
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4422      	add	r2, r4
 8004d86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d88:	e105      	b.n	8004f96 <UART_SetConfig+0x4d6>
 8004d8a:	bf00      	nop
 8004d8c:	40011000 	.word	0x40011000
 8004d90:	40011400 	.word	0x40011400
 8004d94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004da2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004da6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004daa:	4642      	mov	r2, r8
 8004dac:	464b      	mov	r3, r9
 8004dae:	1891      	adds	r1, r2, r2
 8004db0:	6239      	str	r1, [r7, #32]
 8004db2:	415b      	adcs	r3, r3
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dba:	4641      	mov	r1, r8
 8004dbc:	1854      	adds	r4, r2, r1
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	eb43 0501 	adc.w	r5, r3, r1
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	00eb      	lsls	r3, r5, #3
 8004dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd2:	00e2      	lsls	r2, r4, #3
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	461d      	mov	r5, r3
 8004dd8:	4643      	mov	r3, r8
 8004dda:	18e3      	adds	r3, r4, r3
 8004ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004de0:	464b      	mov	r3, r9
 8004de2:	eb45 0303 	adc.w	r3, r5, r3
 8004de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004df6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e06:	4629      	mov	r1, r5
 8004e08:	008b      	lsls	r3, r1, #2
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e10:	4621      	mov	r1, r4
 8004e12:	008a      	lsls	r2, r1, #2
 8004e14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e18:	f7fb fec0 	bl	8000b9c <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4b60      	ldr	r3, [pc, #384]	; (8004fa4 <UART_SetConfig+0x4e4>)
 8004e22:	fba3 2302 	umull	r2, r3, r3, r2
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	011c      	lsls	r4, r3, #4
 8004e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	464b      	mov	r3, r9
 8004e40:	1891      	adds	r1, r2, r2
 8004e42:	61b9      	str	r1, [r7, #24]
 8004e44:	415b      	adcs	r3, r3
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	1851      	adds	r1, r2, r1
 8004e50:	6139      	str	r1, [r7, #16]
 8004e52:	4649      	mov	r1, r9
 8004e54:	414b      	adcs	r3, r1
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e64:	4659      	mov	r1, fp
 8004e66:	00cb      	lsls	r3, r1, #3
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6e:	4651      	mov	r1, sl
 8004e70:	00ca      	lsls	r2, r1, #3
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	4642      	mov	r2, r8
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e80:	464b      	mov	r3, r9
 8004e82:	460a      	mov	r2, r1
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	008b      	lsls	r3, r1, #2
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eae:	4641      	mov	r1, r8
 8004eb0:	008a      	lsls	r2, r1, #2
 8004eb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004eb6:	f7fb fe71 	bl	8000b9c <__aeabi_uldivmod>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <UART_SetConfig+0x4e4>)
 8004ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	2164      	movs	r1, #100	; 0x64
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	3332      	adds	r3, #50	; 0x32
 8004ed2:	4a34      	ldr	r2, [pc, #208]	; (8004fa4 <UART_SetConfig+0x4e4>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ede:	441c      	add	r4, r3
 8004ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ee8:	677a      	str	r2, [r7, #116]	; 0x74
 8004eea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004eee:	4642      	mov	r2, r8
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	1891      	adds	r1, r2, r2
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	415b      	adcs	r3, r3
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004efe:	4641      	mov	r1, r8
 8004f00:	1851      	adds	r1, r2, r1
 8004f02:	6039      	str	r1, [r7, #0]
 8004f04:	4649      	mov	r1, r9
 8004f06:	414b      	adcs	r3, r1
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f16:	4659      	mov	r1, fp
 8004f18:	00cb      	lsls	r3, r1, #3
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f20:	4651      	mov	r1, sl
 8004f22:	00ca      	lsls	r2, r1, #3
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4642      	mov	r2, r8
 8004f2c:	189b      	adds	r3, r3, r2
 8004f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f30:	464b      	mov	r3, r9
 8004f32:	460a      	mov	r2, r1
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	663b      	str	r3, [r7, #96]	; 0x60
 8004f44:	667a      	str	r2, [r7, #100]	; 0x64
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f52:	4649      	mov	r1, r9
 8004f54:	008b      	lsls	r3, r1, #2
 8004f56:	4641      	mov	r1, r8
 8004f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	008a      	lsls	r2, r1, #2
 8004f60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f64:	f7fb fe1a 	bl	8000b9c <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <UART_SetConfig+0x4e4>)
 8004f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2164      	movs	r1, #100	; 0x64
 8004f76:	fb01 f303 	mul.w	r3, r1, r3
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	3332      	adds	r3, #50	; 0x32
 8004f80:	4a08      	ldr	r2, [pc, #32]	; (8004fa4 <UART_SetConfig+0x4e4>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	f003 020f 	and.w	r2, r3, #15
 8004f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4422      	add	r2, r4
 8004f94:	609a      	str	r2, [r3, #8]
}
 8004f96:	bf00      	nop
 8004f98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fa2:	bf00      	nop
 8004fa4:	51eb851f 	.word	0x51eb851f

08004fa8 <atoi>:
 8004fa8:	220a      	movs	r2, #10
 8004faa:	2100      	movs	r1, #0
 8004fac:	f000 b934 	b.w	8005218 <strtol>

08004fb0 <clock>:
 8004fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <clock+0x24>)
 8004fb4:	4669      	mov	r1, sp
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	f000 f9da 	bl	8005370 <_times_r>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d006      	beq.n	8004fce <clock+0x1e>
 8004fc0:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004fc4:	4418      	add	r0, r3
 8004fc6:	9b02      	ldr	r3, [sp, #8]
 8004fc8:	4418      	add	r0, r3
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	4418      	add	r0, r3
 8004fce:	b005      	add	sp, #20
 8004fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fd4:	2000000c 	.word	0x2000000c

08004fd8 <__errno>:
 8004fd8:	4b01      	ldr	r3, [pc, #4]	; (8004fe0 <__errno+0x8>)
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	2000000c 	.word	0x2000000c

08004fe4 <__libc_init_array>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	4d0d      	ldr	r5, [pc, #52]	; (800501c <__libc_init_array+0x38>)
 8004fe8:	4c0d      	ldr	r4, [pc, #52]	; (8005020 <__libc_init_array+0x3c>)
 8004fea:	1b64      	subs	r4, r4, r5
 8004fec:	10a4      	asrs	r4, r4, #2
 8004fee:	2600      	movs	r6, #0
 8004ff0:	42a6      	cmp	r6, r4
 8004ff2:	d109      	bne.n	8005008 <__libc_init_array+0x24>
 8004ff4:	4d0b      	ldr	r5, [pc, #44]	; (8005024 <__libc_init_array+0x40>)
 8004ff6:	4c0c      	ldr	r4, [pc, #48]	; (8005028 <__libc_init_array+0x44>)
 8004ff8:	f002 fa58 	bl	80074ac <_init>
 8004ffc:	1b64      	subs	r4, r4, r5
 8004ffe:	10a4      	asrs	r4, r4, #2
 8005000:	2600      	movs	r6, #0
 8005002:	42a6      	cmp	r6, r4
 8005004:	d105      	bne.n	8005012 <__libc_init_array+0x2e>
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	f855 3b04 	ldr.w	r3, [r5], #4
 800500c:	4798      	blx	r3
 800500e:	3601      	adds	r6, #1
 8005010:	e7ee      	b.n	8004ff0 <__libc_init_array+0xc>
 8005012:	f855 3b04 	ldr.w	r3, [r5], #4
 8005016:	4798      	blx	r3
 8005018:	3601      	adds	r6, #1
 800501a:	e7f2      	b.n	8005002 <__libc_init_array+0x1e>
 800501c:	08007960 	.word	0x08007960
 8005020:	08007960 	.word	0x08007960
 8005024:	08007960 	.word	0x08007960
 8005028:	08007964 	.word	0x08007964

0800502c <memset>:
 800502c:	4402      	add	r2, r0
 800502e:	4603      	mov	r3, r0
 8005030:	4293      	cmp	r3, r2
 8005032:	d100      	bne.n	8005036 <memset+0xa>
 8005034:	4770      	bx	lr
 8005036:	f803 1b01 	strb.w	r1, [r3], #1
 800503a:	e7f9      	b.n	8005030 <memset+0x4>

0800503c <strcat>:
 800503c:	b510      	push	{r4, lr}
 800503e:	4602      	mov	r2, r0
 8005040:	7814      	ldrb	r4, [r2, #0]
 8005042:	4613      	mov	r3, r2
 8005044:	3201      	adds	r2, #1
 8005046:	2c00      	cmp	r4, #0
 8005048:	d1fa      	bne.n	8005040 <strcat+0x4>
 800504a:	3b01      	subs	r3, #1
 800504c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005050:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005054:	2a00      	cmp	r2, #0
 8005056:	d1f9      	bne.n	800504c <strcat+0x10>
 8005058:	bd10      	pop	{r4, pc}
	...

0800505c <strtok>:
 800505c:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <strtok+0x5c>)
 800505e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005060:	681e      	ldr	r6, [r3, #0]
 8005062:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005064:	4605      	mov	r5, r0
 8005066:	b9fc      	cbnz	r4, 80050a8 <strtok+0x4c>
 8005068:	2050      	movs	r0, #80	; 0x50
 800506a:	9101      	str	r1, [sp, #4]
 800506c:	f000 f9b4 	bl	80053d8 <malloc>
 8005070:	9901      	ldr	r1, [sp, #4]
 8005072:	65b0      	str	r0, [r6, #88]	; 0x58
 8005074:	4602      	mov	r2, r0
 8005076:	b920      	cbnz	r0, 8005082 <strtok+0x26>
 8005078:	4b10      	ldr	r3, [pc, #64]	; (80050bc <strtok+0x60>)
 800507a:	4811      	ldr	r0, [pc, #68]	; (80050c0 <strtok+0x64>)
 800507c:	2157      	movs	r1, #87	; 0x57
 800507e:	f000 f97b 	bl	8005378 <__assert_func>
 8005082:	e9c0 4400 	strd	r4, r4, [r0]
 8005086:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800508a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800508e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005092:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005096:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800509a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800509e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80050a2:	6184      	str	r4, [r0, #24]
 80050a4:	7704      	strb	r4, [r0, #28]
 80050a6:	6244      	str	r4, [r0, #36]	; 0x24
 80050a8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80050aa:	2301      	movs	r3, #1
 80050ac:	4628      	mov	r0, r5
 80050ae:	b002      	add	sp, #8
 80050b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050b4:	f000 b806 	b.w	80050c4 <__strtok_r>
 80050b8:	2000000c 	.word	0x2000000c
 80050bc:	0800753c 	.word	0x0800753c
 80050c0:	08007553 	.word	0x08007553

080050c4 <__strtok_r>:
 80050c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c6:	b908      	cbnz	r0, 80050cc <__strtok_r+0x8>
 80050c8:	6810      	ldr	r0, [r2, #0]
 80050ca:	b188      	cbz	r0, 80050f0 <__strtok_r+0x2c>
 80050cc:	4604      	mov	r4, r0
 80050ce:	4620      	mov	r0, r4
 80050d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80050d4:	460f      	mov	r7, r1
 80050d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80050da:	b91e      	cbnz	r6, 80050e4 <__strtok_r+0x20>
 80050dc:	b965      	cbnz	r5, 80050f8 <__strtok_r+0x34>
 80050de:	6015      	str	r5, [r2, #0]
 80050e0:	4628      	mov	r0, r5
 80050e2:	e005      	b.n	80050f0 <__strtok_r+0x2c>
 80050e4:	42b5      	cmp	r5, r6
 80050e6:	d1f6      	bne.n	80050d6 <__strtok_r+0x12>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1f0      	bne.n	80050ce <__strtok_r+0xa>
 80050ec:	6014      	str	r4, [r2, #0]
 80050ee:	7003      	strb	r3, [r0, #0]
 80050f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050f2:	461c      	mov	r4, r3
 80050f4:	e00c      	b.n	8005110 <__strtok_r+0x4c>
 80050f6:	b915      	cbnz	r5, 80050fe <__strtok_r+0x3a>
 80050f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050fc:	460e      	mov	r6, r1
 80050fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005102:	42ab      	cmp	r3, r5
 8005104:	d1f7      	bne.n	80050f6 <__strtok_r+0x32>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f3      	beq.n	80050f2 <__strtok_r+0x2e>
 800510a:	2300      	movs	r3, #0
 800510c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005110:	6014      	str	r4, [r2, #0]
 8005112:	e7ed      	b.n	80050f0 <__strtok_r+0x2c>

08005114 <_strtol_l.constprop.0>:
 8005114:	2b01      	cmp	r3, #1
 8005116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800511a:	d001      	beq.n	8005120 <_strtol_l.constprop.0+0xc>
 800511c:	2b24      	cmp	r3, #36	; 0x24
 800511e:	d906      	bls.n	800512e <_strtol_l.constprop.0+0x1a>
 8005120:	f7ff ff5a 	bl	8004fd8 <__errno>
 8005124:	2316      	movs	r3, #22
 8005126:	6003      	str	r3, [r0, #0]
 8005128:	2000      	movs	r0, #0
 800512a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005214 <_strtol_l.constprop.0+0x100>
 8005132:	460d      	mov	r5, r1
 8005134:	462e      	mov	r6, r5
 8005136:	f815 4b01 	ldrb.w	r4, [r5], #1
 800513a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800513e:	f017 0708 	ands.w	r7, r7, #8
 8005142:	d1f7      	bne.n	8005134 <_strtol_l.constprop.0+0x20>
 8005144:	2c2d      	cmp	r4, #45	; 0x2d
 8005146:	d132      	bne.n	80051ae <_strtol_l.constprop.0+0x9a>
 8005148:	782c      	ldrb	r4, [r5, #0]
 800514a:	2701      	movs	r7, #1
 800514c:	1cb5      	adds	r5, r6, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d05b      	beq.n	800520a <_strtol_l.constprop.0+0xf6>
 8005152:	2b10      	cmp	r3, #16
 8005154:	d109      	bne.n	800516a <_strtol_l.constprop.0+0x56>
 8005156:	2c30      	cmp	r4, #48	; 0x30
 8005158:	d107      	bne.n	800516a <_strtol_l.constprop.0+0x56>
 800515a:	782c      	ldrb	r4, [r5, #0]
 800515c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005160:	2c58      	cmp	r4, #88	; 0x58
 8005162:	d14d      	bne.n	8005200 <_strtol_l.constprop.0+0xec>
 8005164:	786c      	ldrb	r4, [r5, #1]
 8005166:	2310      	movs	r3, #16
 8005168:	3502      	adds	r5, #2
 800516a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800516e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005172:	f04f 0c00 	mov.w	ip, #0
 8005176:	fbb8 f9f3 	udiv	r9, r8, r3
 800517a:	4666      	mov	r6, ip
 800517c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005180:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005184:	f1be 0f09 	cmp.w	lr, #9
 8005188:	d816      	bhi.n	80051b8 <_strtol_l.constprop.0+0xa4>
 800518a:	4674      	mov	r4, lr
 800518c:	42a3      	cmp	r3, r4
 800518e:	dd24      	ble.n	80051da <_strtol_l.constprop.0+0xc6>
 8005190:	f1bc 0f00 	cmp.w	ip, #0
 8005194:	db1e      	blt.n	80051d4 <_strtol_l.constprop.0+0xc0>
 8005196:	45b1      	cmp	r9, r6
 8005198:	d31c      	bcc.n	80051d4 <_strtol_l.constprop.0+0xc0>
 800519a:	d101      	bne.n	80051a0 <_strtol_l.constprop.0+0x8c>
 800519c:	45a2      	cmp	sl, r4
 800519e:	db19      	blt.n	80051d4 <_strtol_l.constprop.0+0xc0>
 80051a0:	fb06 4603 	mla	r6, r6, r3, r4
 80051a4:	f04f 0c01 	mov.w	ip, #1
 80051a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051ac:	e7e8      	b.n	8005180 <_strtol_l.constprop.0+0x6c>
 80051ae:	2c2b      	cmp	r4, #43	; 0x2b
 80051b0:	bf04      	itt	eq
 80051b2:	782c      	ldrbeq	r4, [r5, #0]
 80051b4:	1cb5      	addeq	r5, r6, #2
 80051b6:	e7ca      	b.n	800514e <_strtol_l.constprop.0+0x3a>
 80051b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80051bc:	f1be 0f19 	cmp.w	lr, #25
 80051c0:	d801      	bhi.n	80051c6 <_strtol_l.constprop.0+0xb2>
 80051c2:	3c37      	subs	r4, #55	; 0x37
 80051c4:	e7e2      	b.n	800518c <_strtol_l.constprop.0+0x78>
 80051c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80051ca:	f1be 0f19 	cmp.w	lr, #25
 80051ce:	d804      	bhi.n	80051da <_strtol_l.constprop.0+0xc6>
 80051d0:	3c57      	subs	r4, #87	; 0x57
 80051d2:	e7db      	b.n	800518c <_strtol_l.constprop.0+0x78>
 80051d4:	f04f 3cff 	mov.w	ip, #4294967295
 80051d8:	e7e6      	b.n	80051a8 <_strtol_l.constprop.0+0x94>
 80051da:	f1bc 0f00 	cmp.w	ip, #0
 80051de:	da05      	bge.n	80051ec <_strtol_l.constprop.0+0xd8>
 80051e0:	2322      	movs	r3, #34	; 0x22
 80051e2:	6003      	str	r3, [r0, #0]
 80051e4:	4646      	mov	r6, r8
 80051e6:	b942      	cbnz	r2, 80051fa <_strtol_l.constprop.0+0xe6>
 80051e8:	4630      	mov	r0, r6
 80051ea:	e79e      	b.n	800512a <_strtol_l.constprop.0+0x16>
 80051ec:	b107      	cbz	r7, 80051f0 <_strtol_l.constprop.0+0xdc>
 80051ee:	4276      	negs	r6, r6
 80051f0:	2a00      	cmp	r2, #0
 80051f2:	d0f9      	beq.n	80051e8 <_strtol_l.constprop.0+0xd4>
 80051f4:	f1bc 0f00 	cmp.w	ip, #0
 80051f8:	d000      	beq.n	80051fc <_strtol_l.constprop.0+0xe8>
 80051fa:	1e69      	subs	r1, r5, #1
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	e7f3      	b.n	80051e8 <_strtol_l.constprop.0+0xd4>
 8005200:	2430      	movs	r4, #48	; 0x30
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1b1      	bne.n	800516a <_strtol_l.constprop.0+0x56>
 8005206:	2308      	movs	r3, #8
 8005208:	e7af      	b.n	800516a <_strtol_l.constprop.0+0x56>
 800520a:	2c30      	cmp	r4, #48	; 0x30
 800520c:	d0a5      	beq.n	800515a <_strtol_l.constprop.0+0x46>
 800520e:	230a      	movs	r3, #10
 8005210:	e7ab      	b.n	800516a <_strtol_l.constprop.0+0x56>
 8005212:	bf00      	nop
 8005214:	080075ed 	.word	0x080075ed

08005218 <strtol>:
 8005218:	4613      	mov	r3, r2
 800521a:	460a      	mov	r2, r1
 800521c:	4601      	mov	r1, r0
 800521e:	4802      	ldr	r0, [pc, #8]	; (8005228 <strtol+0x10>)
 8005220:	6800      	ldr	r0, [r0, #0]
 8005222:	f7ff bf77 	b.w	8005114 <_strtol_l.constprop.0>
 8005226:	bf00      	nop
 8005228:	2000000c 	.word	0x2000000c

0800522c <_strtoull_l.constprop.0>:
 800522c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005230:	4692      	mov	sl, r2
 8005232:	4a49      	ldr	r2, [pc, #292]	; (8005358 <_strtoull_l.constprop.0+0x12c>)
 8005234:	9001      	str	r0, [sp, #4]
 8005236:	4689      	mov	r9, r1
 8005238:	461d      	mov	r5, r3
 800523a:	460e      	mov	r6, r1
 800523c:	4633      	mov	r3, r6
 800523e:	f816 4b01 	ldrb.w	r4, [r6], #1
 8005242:	5ca7      	ldrb	r7, [r4, r2]
 8005244:	f017 0708 	ands.w	r7, r7, #8
 8005248:	d1f8      	bne.n	800523c <_strtoull_l.constprop.0+0x10>
 800524a:	2c2d      	cmp	r4, #45	; 0x2d
 800524c:	d14a      	bne.n	80052e4 <_strtoull_l.constprop.0+0xb8>
 800524e:	7834      	ldrb	r4, [r6, #0]
 8005250:	2701      	movs	r7, #1
 8005252:	1c9e      	adds	r6, r3, #2
 8005254:	2d00      	cmp	r5, #0
 8005256:	d07b      	beq.n	8005350 <_strtoull_l.constprop.0+0x124>
 8005258:	2d10      	cmp	r5, #16
 800525a:	d109      	bne.n	8005270 <_strtoull_l.constprop.0+0x44>
 800525c:	2c30      	cmp	r4, #48	; 0x30
 800525e:	d107      	bne.n	8005270 <_strtoull_l.constprop.0+0x44>
 8005260:	7833      	ldrb	r3, [r6, #0]
 8005262:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005266:	2b58      	cmp	r3, #88	; 0x58
 8005268:	d16d      	bne.n	8005346 <_strtoull_l.constprop.0+0x11a>
 800526a:	7874      	ldrb	r4, [r6, #1]
 800526c:	2510      	movs	r5, #16
 800526e:	3602      	adds	r6, #2
 8005270:	ea4f 7be5 	mov.w	fp, r5, asr #31
 8005274:	462a      	mov	r2, r5
 8005276:	465b      	mov	r3, fp
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	f04f 31ff 	mov.w	r1, #4294967295
 8005280:	f7fb fc8c 	bl	8000b9c <__aeabi_uldivmod>
 8005284:	462a      	mov	r2, r5
 8005286:	9000      	str	r0, [sp, #0]
 8005288:	4688      	mov	r8, r1
 800528a:	465b      	mov	r3, fp
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	f04f 31ff 	mov.w	r1, #4294967295
 8005294:	f7fb fc82 	bl	8000b9c <__aeabi_uldivmod>
 8005298:	2300      	movs	r3, #0
 800529a:	4618      	mov	r0, r3
 800529c:	4619      	mov	r1, r3
 800529e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80052a2:	f1bc 0f09 	cmp.w	ip, #9
 80052a6:	d822      	bhi.n	80052ee <_strtoull_l.constprop.0+0xc2>
 80052a8:	4664      	mov	r4, ip
 80052aa:	42a5      	cmp	r5, r4
 80052ac:	dd30      	ble.n	8005310 <_strtoull_l.constprop.0+0xe4>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	db2b      	blt.n	800530a <_strtoull_l.constprop.0+0xde>
 80052b2:	9b00      	ldr	r3, [sp, #0]
 80052b4:	4283      	cmp	r3, r0
 80052b6:	eb78 0301 	sbcs.w	r3, r8, r1
 80052ba:	d326      	bcc.n	800530a <_strtoull_l.constprop.0+0xde>
 80052bc:	9b00      	ldr	r3, [sp, #0]
 80052be:	4588      	cmp	r8, r1
 80052c0:	bf08      	it	eq
 80052c2:	4283      	cmpeq	r3, r0
 80052c4:	d101      	bne.n	80052ca <_strtoull_l.constprop.0+0x9e>
 80052c6:	42a2      	cmp	r2, r4
 80052c8:	db1f      	blt.n	800530a <_strtoull_l.constprop.0+0xde>
 80052ca:	4369      	muls	r1, r5
 80052cc:	fb00 110b 	mla	r1, r0, fp, r1
 80052d0:	fba5 0300 	umull	r0, r3, r5, r0
 80052d4:	4419      	add	r1, r3
 80052d6:	1820      	adds	r0, r4, r0
 80052d8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80052dc:	2301      	movs	r3, #1
 80052de:	f816 4b01 	ldrb.w	r4, [r6], #1
 80052e2:	e7dc      	b.n	800529e <_strtoull_l.constprop.0+0x72>
 80052e4:	2c2b      	cmp	r4, #43	; 0x2b
 80052e6:	bf04      	itt	eq
 80052e8:	7834      	ldrbeq	r4, [r6, #0]
 80052ea:	1c9e      	addeq	r6, r3, #2
 80052ec:	e7b2      	b.n	8005254 <_strtoull_l.constprop.0+0x28>
 80052ee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80052f2:	f1bc 0f19 	cmp.w	ip, #25
 80052f6:	d801      	bhi.n	80052fc <_strtoull_l.constprop.0+0xd0>
 80052f8:	3c37      	subs	r4, #55	; 0x37
 80052fa:	e7d6      	b.n	80052aa <_strtoull_l.constprop.0+0x7e>
 80052fc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005300:	f1bc 0f19 	cmp.w	ip, #25
 8005304:	d804      	bhi.n	8005310 <_strtoull_l.constprop.0+0xe4>
 8005306:	3c57      	subs	r4, #87	; 0x57
 8005308:	e7cf      	b.n	80052aa <_strtoull_l.constprop.0+0x7e>
 800530a:	f04f 33ff 	mov.w	r3, #4294967295
 800530e:	e7e6      	b.n	80052de <_strtoull_l.constprop.0+0xb2>
 8005310:	2b00      	cmp	r3, #0
 8005312:	da0b      	bge.n	800532c <_strtoull_l.constprop.0+0x100>
 8005314:	9a01      	ldr	r2, [sp, #4]
 8005316:	2322      	movs	r3, #34	; 0x22
 8005318:	f04f 30ff 	mov.w	r0, #4294967295
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	4601      	mov	r1, r0
 8005320:	f1ba 0f00 	cmp.w	sl, #0
 8005324:	d10a      	bne.n	800533c <_strtoull_l.constprop.0+0x110>
 8005326:	b003      	add	sp, #12
 8005328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532c:	b117      	cbz	r7, 8005334 <_strtoull_l.constprop.0+0x108>
 800532e:	4240      	negs	r0, r0
 8005330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005334:	f1ba 0f00 	cmp.w	sl, #0
 8005338:	d0f5      	beq.n	8005326 <_strtoull_l.constprop.0+0xfa>
 800533a:	b10b      	cbz	r3, 8005340 <_strtoull_l.constprop.0+0x114>
 800533c:	f106 39ff 	add.w	r9, r6, #4294967295
 8005340:	f8ca 9000 	str.w	r9, [sl]
 8005344:	e7ef      	b.n	8005326 <_strtoull_l.constprop.0+0xfa>
 8005346:	2430      	movs	r4, #48	; 0x30
 8005348:	2d00      	cmp	r5, #0
 800534a:	d191      	bne.n	8005270 <_strtoull_l.constprop.0+0x44>
 800534c:	2508      	movs	r5, #8
 800534e:	e78f      	b.n	8005270 <_strtoull_l.constprop.0+0x44>
 8005350:	2c30      	cmp	r4, #48	; 0x30
 8005352:	d085      	beq.n	8005260 <_strtoull_l.constprop.0+0x34>
 8005354:	250a      	movs	r5, #10
 8005356:	e78b      	b.n	8005270 <_strtoull_l.constprop.0+0x44>
 8005358:	080075ed 	.word	0x080075ed

0800535c <strtoull>:
 800535c:	4613      	mov	r3, r2
 800535e:	460a      	mov	r2, r1
 8005360:	4601      	mov	r1, r0
 8005362:	4802      	ldr	r0, [pc, #8]	; (800536c <strtoull+0x10>)
 8005364:	6800      	ldr	r0, [r0, #0]
 8005366:	f7ff bf61 	b.w	800522c <_strtoull_l.constprop.0>
 800536a:	bf00      	nop
 800536c:	2000000c 	.word	0x2000000c

08005370 <_times_r>:
 8005370:	4608      	mov	r0, r1
 8005372:	f7fd b8dc 	b.w	800252e <_times>
	...

08005378 <__assert_func>:
 8005378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800537a:	4614      	mov	r4, r2
 800537c:	461a      	mov	r2, r3
 800537e:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <__assert_func+0x2c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4605      	mov	r5, r0
 8005384:	68d8      	ldr	r0, [r3, #12]
 8005386:	b14c      	cbz	r4, 800539c <__assert_func+0x24>
 8005388:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <__assert_func+0x30>)
 800538a:	9100      	str	r1, [sp, #0]
 800538c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005390:	4906      	ldr	r1, [pc, #24]	; (80053ac <__assert_func+0x34>)
 8005392:	462b      	mov	r3, r5
 8005394:	f000 f80e 	bl	80053b4 <fiprintf>
 8005398:	f000 fcc4 	bl	8005d24 <abort>
 800539c:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <__assert_func+0x38>)
 800539e:	461c      	mov	r4, r3
 80053a0:	e7f3      	b.n	800538a <__assert_func+0x12>
 80053a2:	bf00      	nop
 80053a4:	2000000c 	.word	0x2000000c
 80053a8:	080075b0 	.word	0x080075b0
 80053ac:	080075bd 	.word	0x080075bd
 80053b0:	080075eb 	.word	0x080075eb

080053b4 <fiprintf>:
 80053b4:	b40e      	push	{r1, r2, r3}
 80053b6:	b503      	push	{r0, r1, lr}
 80053b8:	4601      	mov	r1, r0
 80053ba:	ab03      	add	r3, sp, #12
 80053bc:	4805      	ldr	r0, [pc, #20]	; (80053d4 <fiprintf+0x20>)
 80053be:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c2:	6800      	ldr	r0, [r0, #0]
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	f000 f919 	bl	80055fc <_vfiprintf_r>
 80053ca:	b002      	add	sp, #8
 80053cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80053d0:	b003      	add	sp, #12
 80053d2:	4770      	bx	lr
 80053d4:	2000000c 	.word	0x2000000c

080053d8 <malloc>:
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <malloc+0xc>)
 80053da:	4601      	mov	r1, r0
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	f000 b86f 	b.w	80054c0 <_malloc_r>
 80053e2:	bf00      	nop
 80053e4:	2000000c 	.word	0x2000000c

080053e8 <_free_r>:
 80053e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ea:	2900      	cmp	r1, #0
 80053ec:	d044      	beq.n	8005478 <_free_r+0x90>
 80053ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f2:	9001      	str	r0, [sp, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f1a1 0404 	sub.w	r4, r1, #4
 80053fa:	bfb8      	it	lt
 80053fc:	18e4      	addlt	r4, r4, r3
 80053fe:	f000 feb9 	bl	8006174 <__malloc_lock>
 8005402:	4a1e      	ldr	r2, [pc, #120]	; (800547c <_free_r+0x94>)
 8005404:	9801      	ldr	r0, [sp, #4]
 8005406:	6813      	ldr	r3, [r2, #0]
 8005408:	b933      	cbnz	r3, 8005418 <_free_r+0x30>
 800540a:	6063      	str	r3, [r4, #4]
 800540c:	6014      	str	r4, [r2, #0]
 800540e:	b003      	add	sp, #12
 8005410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005414:	f000 beb4 	b.w	8006180 <__malloc_unlock>
 8005418:	42a3      	cmp	r3, r4
 800541a:	d908      	bls.n	800542e <_free_r+0x46>
 800541c:	6825      	ldr	r5, [r4, #0]
 800541e:	1961      	adds	r1, r4, r5
 8005420:	428b      	cmp	r3, r1
 8005422:	bf01      	itttt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	1949      	addeq	r1, r1, r5
 800542a:	6021      	streq	r1, [r4, #0]
 800542c:	e7ed      	b.n	800540a <_free_r+0x22>
 800542e:	461a      	mov	r2, r3
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	b10b      	cbz	r3, 8005438 <_free_r+0x50>
 8005434:	42a3      	cmp	r3, r4
 8005436:	d9fa      	bls.n	800542e <_free_r+0x46>
 8005438:	6811      	ldr	r1, [r2, #0]
 800543a:	1855      	adds	r5, r2, r1
 800543c:	42a5      	cmp	r5, r4
 800543e:	d10b      	bne.n	8005458 <_free_r+0x70>
 8005440:	6824      	ldr	r4, [r4, #0]
 8005442:	4421      	add	r1, r4
 8005444:	1854      	adds	r4, r2, r1
 8005446:	42a3      	cmp	r3, r4
 8005448:	6011      	str	r1, [r2, #0]
 800544a:	d1e0      	bne.n	800540e <_free_r+0x26>
 800544c:	681c      	ldr	r4, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	6053      	str	r3, [r2, #4]
 8005452:	4421      	add	r1, r4
 8005454:	6011      	str	r1, [r2, #0]
 8005456:	e7da      	b.n	800540e <_free_r+0x26>
 8005458:	d902      	bls.n	8005460 <_free_r+0x78>
 800545a:	230c      	movs	r3, #12
 800545c:	6003      	str	r3, [r0, #0]
 800545e:	e7d6      	b.n	800540e <_free_r+0x26>
 8005460:	6825      	ldr	r5, [r4, #0]
 8005462:	1961      	adds	r1, r4, r5
 8005464:	428b      	cmp	r3, r1
 8005466:	bf04      	itt	eq
 8005468:	6819      	ldreq	r1, [r3, #0]
 800546a:	685b      	ldreq	r3, [r3, #4]
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	bf04      	itt	eq
 8005470:	1949      	addeq	r1, r1, r5
 8005472:	6021      	streq	r1, [r4, #0]
 8005474:	6054      	str	r4, [r2, #4]
 8005476:	e7ca      	b.n	800540e <_free_r+0x26>
 8005478:	b003      	add	sp, #12
 800547a:	bd30      	pop	{r4, r5, pc}
 800547c:	2000068c 	.word	0x2000068c

08005480 <sbrk_aligned>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	4e0e      	ldr	r6, [pc, #56]	; (80054bc <sbrk_aligned+0x3c>)
 8005484:	460c      	mov	r4, r1
 8005486:	6831      	ldr	r1, [r6, #0]
 8005488:	4605      	mov	r5, r0
 800548a:	b911      	cbnz	r1, 8005492 <sbrk_aligned+0x12>
 800548c:	f000 fb7a 	bl	8005b84 <_sbrk_r>
 8005490:	6030      	str	r0, [r6, #0]
 8005492:	4621      	mov	r1, r4
 8005494:	4628      	mov	r0, r5
 8005496:	f000 fb75 	bl	8005b84 <_sbrk_r>
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	d00a      	beq.n	80054b4 <sbrk_aligned+0x34>
 800549e:	1cc4      	adds	r4, r0, #3
 80054a0:	f024 0403 	bic.w	r4, r4, #3
 80054a4:	42a0      	cmp	r0, r4
 80054a6:	d007      	beq.n	80054b8 <sbrk_aligned+0x38>
 80054a8:	1a21      	subs	r1, r4, r0
 80054aa:	4628      	mov	r0, r5
 80054ac:	f000 fb6a 	bl	8005b84 <_sbrk_r>
 80054b0:	3001      	adds	r0, #1
 80054b2:	d101      	bne.n	80054b8 <sbrk_aligned+0x38>
 80054b4:	f04f 34ff 	mov.w	r4, #4294967295
 80054b8:	4620      	mov	r0, r4
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	20000690 	.word	0x20000690

080054c0 <_malloc_r>:
 80054c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c4:	1ccd      	adds	r5, r1, #3
 80054c6:	f025 0503 	bic.w	r5, r5, #3
 80054ca:	3508      	adds	r5, #8
 80054cc:	2d0c      	cmp	r5, #12
 80054ce:	bf38      	it	cc
 80054d0:	250c      	movcc	r5, #12
 80054d2:	2d00      	cmp	r5, #0
 80054d4:	4607      	mov	r7, r0
 80054d6:	db01      	blt.n	80054dc <_malloc_r+0x1c>
 80054d8:	42a9      	cmp	r1, r5
 80054da:	d905      	bls.n	80054e8 <_malloc_r+0x28>
 80054dc:	230c      	movs	r3, #12
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	2600      	movs	r6, #0
 80054e2:	4630      	mov	r0, r6
 80054e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e8:	4e2e      	ldr	r6, [pc, #184]	; (80055a4 <_malloc_r+0xe4>)
 80054ea:	f000 fe43 	bl	8006174 <__malloc_lock>
 80054ee:	6833      	ldr	r3, [r6, #0]
 80054f0:	461c      	mov	r4, r3
 80054f2:	bb34      	cbnz	r4, 8005542 <_malloc_r+0x82>
 80054f4:	4629      	mov	r1, r5
 80054f6:	4638      	mov	r0, r7
 80054f8:	f7ff ffc2 	bl	8005480 <sbrk_aligned>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	4604      	mov	r4, r0
 8005500:	d14d      	bne.n	800559e <_malloc_r+0xde>
 8005502:	6834      	ldr	r4, [r6, #0]
 8005504:	4626      	mov	r6, r4
 8005506:	2e00      	cmp	r6, #0
 8005508:	d140      	bne.n	800558c <_malloc_r+0xcc>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	4631      	mov	r1, r6
 800550e:	4638      	mov	r0, r7
 8005510:	eb04 0803 	add.w	r8, r4, r3
 8005514:	f000 fb36 	bl	8005b84 <_sbrk_r>
 8005518:	4580      	cmp	r8, r0
 800551a:	d13a      	bne.n	8005592 <_malloc_r+0xd2>
 800551c:	6821      	ldr	r1, [r4, #0]
 800551e:	3503      	adds	r5, #3
 8005520:	1a6d      	subs	r5, r5, r1
 8005522:	f025 0503 	bic.w	r5, r5, #3
 8005526:	3508      	adds	r5, #8
 8005528:	2d0c      	cmp	r5, #12
 800552a:	bf38      	it	cc
 800552c:	250c      	movcc	r5, #12
 800552e:	4629      	mov	r1, r5
 8005530:	4638      	mov	r0, r7
 8005532:	f7ff ffa5 	bl	8005480 <sbrk_aligned>
 8005536:	3001      	adds	r0, #1
 8005538:	d02b      	beq.n	8005592 <_malloc_r+0xd2>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	442b      	add	r3, r5
 800553e:	6023      	str	r3, [r4, #0]
 8005540:	e00e      	b.n	8005560 <_malloc_r+0xa0>
 8005542:	6822      	ldr	r2, [r4, #0]
 8005544:	1b52      	subs	r2, r2, r5
 8005546:	d41e      	bmi.n	8005586 <_malloc_r+0xc6>
 8005548:	2a0b      	cmp	r2, #11
 800554a:	d916      	bls.n	800557a <_malloc_r+0xba>
 800554c:	1961      	adds	r1, r4, r5
 800554e:	42a3      	cmp	r3, r4
 8005550:	6025      	str	r5, [r4, #0]
 8005552:	bf18      	it	ne
 8005554:	6059      	strne	r1, [r3, #4]
 8005556:	6863      	ldr	r3, [r4, #4]
 8005558:	bf08      	it	eq
 800555a:	6031      	streq	r1, [r6, #0]
 800555c:	5162      	str	r2, [r4, r5]
 800555e:	604b      	str	r3, [r1, #4]
 8005560:	4638      	mov	r0, r7
 8005562:	f104 060b 	add.w	r6, r4, #11
 8005566:	f000 fe0b 	bl	8006180 <__malloc_unlock>
 800556a:	f026 0607 	bic.w	r6, r6, #7
 800556e:	1d23      	adds	r3, r4, #4
 8005570:	1af2      	subs	r2, r6, r3
 8005572:	d0b6      	beq.n	80054e2 <_malloc_r+0x22>
 8005574:	1b9b      	subs	r3, r3, r6
 8005576:	50a3      	str	r3, [r4, r2]
 8005578:	e7b3      	b.n	80054e2 <_malloc_r+0x22>
 800557a:	6862      	ldr	r2, [r4, #4]
 800557c:	42a3      	cmp	r3, r4
 800557e:	bf0c      	ite	eq
 8005580:	6032      	streq	r2, [r6, #0]
 8005582:	605a      	strne	r2, [r3, #4]
 8005584:	e7ec      	b.n	8005560 <_malloc_r+0xa0>
 8005586:	4623      	mov	r3, r4
 8005588:	6864      	ldr	r4, [r4, #4]
 800558a:	e7b2      	b.n	80054f2 <_malloc_r+0x32>
 800558c:	4634      	mov	r4, r6
 800558e:	6876      	ldr	r6, [r6, #4]
 8005590:	e7b9      	b.n	8005506 <_malloc_r+0x46>
 8005592:	230c      	movs	r3, #12
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	4638      	mov	r0, r7
 8005598:	f000 fdf2 	bl	8006180 <__malloc_unlock>
 800559c:	e7a1      	b.n	80054e2 <_malloc_r+0x22>
 800559e:	6025      	str	r5, [r4, #0]
 80055a0:	e7de      	b.n	8005560 <_malloc_r+0xa0>
 80055a2:	bf00      	nop
 80055a4:	2000068c 	.word	0x2000068c

080055a8 <__sfputc_r>:
 80055a8:	6893      	ldr	r3, [r2, #8]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	b410      	push	{r4}
 80055b0:	6093      	str	r3, [r2, #8]
 80055b2:	da08      	bge.n	80055c6 <__sfputc_r+0x1e>
 80055b4:	6994      	ldr	r4, [r2, #24]
 80055b6:	42a3      	cmp	r3, r4
 80055b8:	db01      	blt.n	80055be <__sfputc_r+0x16>
 80055ba:	290a      	cmp	r1, #10
 80055bc:	d103      	bne.n	80055c6 <__sfputc_r+0x1e>
 80055be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055c2:	f000 baef 	b.w	8005ba4 <__swbuf_r>
 80055c6:	6813      	ldr	r3, [r2, #0]
 80055c8:	1c58      	adds	r0, r3, #1
 80055ca:	6010      	str	r0, [r2, #0]
 80055cc:	7019      	strb	r1, [r3, #0]
 80055ce:	4608      	mov	r0, r1
 80055d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <__sfputs_r>:
 80055d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d8:	4606      	mov	r6, r0
 80055da:	460f      	mov	r7, r1
 80055dc:	4614      	mov	r4, r2
 80055de:	18d5      	adds	r5, r2, r3
 80055e0:	42ac      	cmp	r4, r5
 80055e2:	d101      	bne.n	80055e8 <__sfputs_r+0x12>
 80055e4:	2000      	movs	r0, #0
 80055e6:	e007      	b.n	80055f8 <__sfputs_r+0x22>
 80055e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ec:	463a      	mov	r2, r7
 80055ee:	4630      	mov	r0, r6
 80055f0:	f7ff ffda 	bl	80055a8 <__sfputc_r>
 80055f4:	1c43      	adds	r3, r0, #1
 80055f6:	d1f3      	bne.n	80055e0 <__sfputs_r+0xa>
 80055f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055fc <_vfiprintf_r>:
 80055fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	460d      	mov	r5, r1
 8005602:	b09d      	sub	sp, #116	; 0x74
 8005604:	4614      	mov	r4, r2
 8005606:	4698      	mov	r8, r3
 8005608:	4606      	mov	r6, r0
 800560a:	b118      	cbz	r0, 8005614 <_vfiprintf_r+0x18>
 800560c:	6983      	ldr	r3, [r0, #24]
 800560e:	b90b      	cbnz	r3, 8005614 <_vfiprintf_r+0x18>
 8005610:	f000 fcaa 	bl	8005f68 <__sinit>
 8005614:	4b89      	ldr	r3, [pc, #548]	; (800583c <_vfiprintf_r+0x240>)
 8005616:	429d      	cmp	r5, r3
 8005618:	d11b      	bne.n	8005652 <_vfiprintf_r+0x56>
 800561a:	6875      	ldr	r5, [r6, #4]
 800561c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800561e:	07d9      	lsls	r1, r3, #31
 8005620:	d405      	bmi.n	800562e <_vfiprintf_r+0x32>
 8005622:	89ab      	ldrh	r3, [r5, #12]
 8005624:	059a      	lsls	r2, r3, #22
 8005626:	d402      	bmi.n	800562e <_vfiprintf_r+0x32>
 8005628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800562a:	f000 fd3b 	bl	80060a4 <__retarget_lock_acquire_recursive>
 800562e:	89ab      	ldrh	r3, [r5, #12]
 8005630:	071b      	lsls	r3, r3, #28
 8005632:	d501      	bpl.n	8005638 <_vfiprintf_r+0x3c>
 8005634:	692b      	ldr	r3, [r5, #16]
 8005636:	b9eb      	cbnz	r3, 8005674 <_vfiprintf_r+0x78>
 8005638:	4629      	mov	r1, r5
 800563a:	4630      	mov	r0, r6
 800563c:	f000 fb04 	bl	8005c48 <__swsetup_r>
 8005640:	b1c0      	cbz	r0, 8005674 <_vfiprintf_r+0x78>
 8005642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005644:	07dc      	lsls	r4, r3, #31
 8005646:	d50e      	bpl.n	8005666 <_vfiprintf_r+0x6a>
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	b01d      	add	sp, #116	; 0x74
 800564e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005652:	4b7b      	ldr	r3, [pc, #492]	; (8005840 <_vfiprintf_r+0x244>)
 8005654:	429d      	cmp	r5, r3
 8005656:	d101      	bne.n	800565c <_vfiprintf_r+0x60>
 8005658:	68b5      	ldr	r5, [r6, #8]
 800565a:	e7df      	b.n	800561c <_vfiprintf_r+0x20>
 800565c:	4b79      	ldr	r3, [pc, #484]	; (8005844 <_vfiprintf_r+0x248>)
 800565e:	429d      	cmp	r5, r3
 8005660:	bf08      	it	eq
 8005662:	68f5      	ldreq	r5, [r6, #12]
 8005664:	e7da      	b.n	800561c <_vfiprintf_r+0x20>
 8005666:	89ab      	ldrh	r3, [r5, #12]
 8005668:	0598      	lsls	r0, r3, #22
 800566a:	d4ed      	bmi.n	8005648 <_vfiprintf_r+0x4c>
 800566c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800566e:	f000 fd1a 	bl	80060a6 <__retarget_lock_release_recursive>
 8005672:	e7e9      	b.n	8005648 <_vfiprintf_r+0x4c>
 8005674:	2300      	movs	r3, #0
 8005676:	9309      	str	r3, [sp, #36]	; 0x24
 8005678:	2320      	movs	r3, #32
 800567a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800567e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005682:	2330      	movs	r3, #48	; 0x30
 8005684:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005848 <_vfiprintf_r+0x24c>
 8005688:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800568c:	f04f 0901 	mov.w	r9, #1
 8005690:	4623      	mov	r3, r4
 8005692:	469a      	mov	sl, r3
 8005694:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005698:	b10a      	cbz	r2, 800569e <_vfiprintf_r+0xa2>
 800569a:	2a25      	cmp	r2, #37	; 0x25
 800569c:	d1f9      	bne.n	8005692 <_vfiprintf_r+0x96>
 800569e:	ebba 0b04 	subs.w	fp, sl, r4
 80056a2:	d00b      	beq.n	80056bc <_vfiprintf_r+0xc0>
 80056a4:	465b      	mov	r3, fp
 80056a6:	4622      	mov	r2, r4
 80056a8:	4629      	mov	r1, r5
 80056aa:	4630      	mov	r0, r6
 80056ac:	f7ff ff93 	bl	80055d6 <__sfputs_r>
 80056b0:	3001      	adds	r0, #1
 80056b2:	f000 80aa 	beq.w	800580a <_vfiprintf_r+0x20e>
 80056b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056b8:	445a      	add	r2, fp
 80056ba:	9209      	str	r2, [sp, #36]	; 0x24
 80056bc:	f89a 3000 	ldrb.w	r3, [sl]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80a2 	beq.w	800580a <_vfiprintf_r+0x20e>
 80056c6:	2300      	movs	r3, #0
 80056c8:	f04f 32ff 	mov.w	r2, #4294967295
 80056cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056d0:	f10a 0a01 	add.w	sl, sl, #1
 80056d4:	9304      	str	r3, [sp, #16]
 80056d6:	9307      	str	r3, [sp, #28]
 80056d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056dc:	931a      	str	r3, [sp, #104]	; 0x68
 80056de:	4654      	mov	r4, sl
 80056e0:	2205      	movs	r2, #5
 80056e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e6:	4858      	ldr	r0, [pc, #352]	; (8005848 <_vfiprintf_r+0x24c>)
 80056e8:	f7fa fd8a 	bl	8000200 <memchr>
 80056ec:	9a04      	ldr	r2, [sp, #16]
 80056ee:	b9d8      	cbnz	r0, 8005728 <_vfiprintf_r+0x12c>
 80056f0:	06d1      	lsls	r1, r2, #27
 80056f2:	bf44      	itt	mi
 80056f4:	2320      	movmi	r3, #32
 80056f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056fa:	0713      	lsls	r3, r2, #28
 80056fc:	bf44      	itt	mi
 80056fe:	232b      	movmi	r3, #43	; 0x2b
 8005700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005704:	f89a 3000 	ldrb.w	r3, [sl]
 8005708:	2b2a      	cmp	r3, #42	; 0x2a
 800570a:	d015      	beq.n	8005738 <_vfiprintf_r+0x13c>
 800570c:	9a07      	ldr	r2, [sp, #28]
 800570e:	4654      	mov	r4, sl
 8005710:	2000      	movs	r0, #0
 8005712:	f04f 0c0a 	mov.w	ip, #10
 8005716:	4621      	mov	r1, r4
 8005718:	f811 3b01 	ldrb.w	r3, [r1], #1
 800571c:	3b30      	subs	r3, #48	; 0x30
 800571e:	2b09      	cmp	r3, #9
 8005720:	d94e      	bls.n	80057c0 <_vfiprintf_r+0x1c4>
 8005722:	b1b0      	cbz	r0, 8005752 <_vfiprintf_r+0x156>
 8005724:	9207      	str	r2, [sp, #28]
 8005726:	e014      	b.n	8005752 <_vfiprintf_r+0x156>
 8005728:	eba0 0308 	sub.w	r3, r0, r8
 800572c:	fa09 f303 	lsl.w	r3, r9, r3
 8005730:	4313      	orrs	r3, r2
 8005732:	9304      	str	r3, [sp, #16]
 8005734:	46a2      	mov	sl, r4
 8005736:	e7d2      	b.n	80056de <_vfiprintf_r+0xe2>
 8005738:	9b03      	ldr	r3, [sp, #12]
 800573a:	1d19      	adds	r1, r3, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	9103      	str	r1, [sp, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	bfbb      	ittet	lt
 8005744:	425b      	neglt	r3, r3
 8005746:	f042 0202 	orrlt.w	r2, r2, #2
 800574a:	9307      	strge	r3, [sp, #28]
 800574c:	9307      	strlt	r3, [sp, #28]
 800574e:	bfb8      	it	lt
 8005750:	9204      	strlt	r2, [sp, #16]
 8005752:	7823      	ldrb	r3, [r4, #0]
 8005754:	2b2e      	cmp	r3, #46	; 0x2e
 8005756:	d10c      	bne.n	8005772 <_vfiprintf_r+0x176>
 8005758:	7863      	ldrb	r3, [r4, #1]
 800575a:	2b2a      	cmp	r3, #42	; 0x2a
 800575c:	d135      	bne.n	80057ca <_vfiprintf_r+0x1ce>
 800575e:	9b03      	ldr	r3, [sp, #12]
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	9203      	str	r2, [sp, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	bfb8      	it	lt
 800576a:	f04f 33ff 	movlt.w	r3, #4294967295
 800576e:	3402      	adds	r4, #2
 8005770:	9305      	str	r3, [sp, #20]
 8005772:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005858 <_vfiprintf_r+0x25c>
 8005776:	7821      	ldrb	r1, [r4, #0]
 8005778:	2203      	movs	r2, #3
 800577a:	4650      	mov	r0, sl
 800577c:	f7fa fd40 	bl	8000200 <memchr>
 8005780:	b140      	cbz	r0, 8005794 <_vfiprintf_r+0x198>
 8005782:	2340      	movs	r3, #64	; 0x40
 8005784:	eba0 000a 	sub.w	r0, r0, sl
 8005788:	fa03 f000 	lsl.w	r0, r3, r0
 800578c:	9b04      	ldr	r3, [sp, #16]
 800578e:	4303      	orrs	r3, r0
 8005790:	3401      	adds	r4, #1
 8005792:	9304      	str	r3, [sp, #16]
 8005794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005798:	482c      	ldr	r0, [pc, #176]	; (800584c <_vfiprintf_r+0x250>)
 800579a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800579e:	2206      	movs	r2, #6
 80057a0:	f7fa fd2e 	bl	8000200 <memchr>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d03f      	beq.n	8005828 <_vfiprintf_r+0x22c>
 80057a8:	4b29      	ldr	r3, [pc, #164]	; (8005850 <_vfiprintf_r+0x254>)
 80057aa:	bb1b      	cbnz	r3, 80057f4 <_vfiprintf_r+0x1f8>
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	3307      	adds	r3, #7
 80057b0:	f023 0307 	bic.w	r3, r3, #7
 80057b4:	3308      	adds	r3, #8
 80057b6:	9303      	str	r3, [sp, #12]
 80057b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ba:	443b      	add	r3, r7
 80057bc:	9309      	str	r3, [sp, #36]	; 0x24
 80057be:	e767      	b.n	8005690 <_vfiprintf_r+0x94>
 80057c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80057c4:	460c      	mov	r4, r1
 80057c6:	2001      	movs	r0, #1
 80057c8:	e7a5      	b.n	8005716 <_vfiprintf_r+0x11a>
 80057ca:	2300      	movs	r3, #0
 80057cc:	3401      	adds	r4, #1
 80057ce:	9305      	str	r3, [sp, #20]
 80057d0:	4619      	mov	r1, r3
 80057d2:	f04f 0c0a 	mov.w	ip, #10
 80057d6:	4620      	mov	r0, r4
 80057d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057dc:	3a30      	subs	r2, #48	; 0x30
 80057de:	2a09      	cmp	r2, #9
 80057e0:	d903      	bls.n	80057ea <_vfiprintf_r+0x1ee>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0c5      	beq.n	8005772 <_vfiprintf_r+0x176>
 80057e6:	9105      	str	r1, [sp, #20]
 80057e8:	e7c3      	b.n	8005772 <_vfiprintf_r+0x176>
 80057ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ee:	4604      	mov	r4, r0
 80057f0:	2301      	movs	r3, #1
 80057f2:	e7f0      	b.n	80057d6 <_vfiprintf_r+0x1da>
 80057f4:	ab03      	add	r3, sp, #12
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	462a      	mov	r2, r5
 80057fa:	4b16      	ldr	r3, [pc, #88]	; (8005854 <_vfiprintf_r+0x258>)
 80057fc:	a904      	add	r1, sp, #16
 80057fe:	4630      	mov	r0, r6
 8005800:	f3af 8000 	nop.w
 8005804:	4607      	mov	r7, r0
 8005806:	1c78      	adds	r0, r7, #1
 8005808:	d1d6      	bne.n	80057b8 <_vfiprintf_r+0x1bc>
 800580a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800580c:	07d9      	lsls	r1, r3, #31
 800580e:	d405      	bmi.n	800581c <_vfiprintf_r+0x220>
 8005810:	89ab      	ldrh	r3, [r5, #12]
 8005812:	059a      	lsls	r2, r3, #22
 8005814:	d402      	bmi.n	800581c <_vfiprintf_r+0x220>
 8005816:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005818:	f000 fc45 	bl	80060a6 <__retarget_lock_release_recursive>
 800581c:	89ab      	ldrh	r3, [r5, #12]
 800581e:	065b      	lsls	r3, r3, #25
 8005820:	f53f af12 	bmi.w	8005648 <_vfiprintf_r+0x4c>
 8005824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005826:	e711      	b.n	800564c <_vfiprintf_r+0x50>
 8005828:	ab03      	add	r3, sp, #12
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	462a      	mov	r2, r5
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <_vfiprintf_r+0x258>)
 8005830:	a904      	add	r1, sp, #16
 8005832:	4630      	mov	r0, r6
 8005834:	f000 f880 	bl	8005938 <_printf_i>
 8005838:	e7e4      	b.n	8005804 <_vfiprintf_r+0x208>
 800583a:	bf00      	nop
 800583c:	08007740 	.word	0x08007740
 8005840:	08007760 	.word	0x08007760
 8005844:	08007720 	.word	0x08007720
 8005848:	080076ed 	.word	0x080076ed
 800584c:	080076f7 	.word	0x080076f7
 8005850:	00000000 	.word	0x00000000
 8005854:	080055d7 	.word	0x080055d7
 8005858:	080076f3 	.word	0x080076f3

0800585c <_printf_common>:
 800585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	4616      	mov	r6, r2
 8005862:	4699      	mov	r9, r3
 8005864:	688a      	ldr	r2, [r1, #8]
 8005866:	690b      	ldr	r3, [r1, #16]
 8005868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800586c:	4293      	cmp	r3, r2
 800586e:	bfb8      	it	lt
 8005870:	4613      	movlt	r3, r2
 8005872:	6033      	str	r3, [r6, #0]
 8005874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005878:	4607      	mov	r7, r0
 800587a:	460c      	mov	r4, r1
 800587c:	b10a      	cbz	r2, 8005882 <_printf_common+0x26>
 800587e:	3301      	adds	r3, #1
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	0699      	lsls	r1, r3, #26
 8005886:	bf42      	ittt	mi
 8005888:	6833      	ldrmi	r3, [r6, #0]
 800588a:	3302      	addmi	r3, #2
 800588c:	6033      	strmi	r3, [r6, #0]
 800588e:	6825      	ldr	r5, [r4, #0]
 8005890:	f015 0506 	ands.w	r5, r5, #6
 8005894:	d106      	bne.n	80058a4 <_printf_common+0x48>
 8005896:	f104 0a19 	add.w	sl, r4, #25
 800589a:	68e3      	ldr	r3, [r4, #12]
 800589c:	6832      	ldr	r2, [r6, #0]
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	42ab      	cmp	r3, r5
 80058a2:	dc26      	bgt.n	80058f2 <_printf_common+0x96>
 80058a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058a8:	1e13      	subs	r3, r2, #0
 80058aa:	6822      	ldr	r2, [r4, #0]
 80058ac:	bf18      	it	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	0692      	lsls	r2, r2, #26
 80058b2:	d42b      	bmi.n	800590c <_printf_common+0xb0>
 80058b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058b8:	4649      	mov	r1, r9
 80058ba:	4638      	mov	r0, r7
 80058bc:	47c0      	blx	r8
 80058be:	3001      	adds	r0, #1
 80058c0:	d01e      	beq.n	8005900 <_printf_common+0xa4>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	68e5      	ldr	r5, [r4, #12]
 80058c6:	6832      	ldr	r2, [r6, #0]
 80058c8:	f003 0306 	and.w	r3, r3, #6
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	bf08      	it	eq
 80058d0:	1aad      	subeq	r5, r5, r2
 80058d2:	68a3      	ldr	r3, [r4, #8]
 80058d4:	6922      	ldr	r2, [r4, #16]
 80058d6:	bf0c      	ite	eq
 80058d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058dc:	2500      	movne	r5, #0
 80058de:	4293      	cmp	r3, r2
 80058e0:	bfc4      	itt	gt
 80058e2:	1a9b      	subgt	r3, r3, r2
 80058e4:	18ed      	addgt	r5, r5, r3
 80058e6:	2600      	movs	r6, #0
 80058e8:	341a      	adds	r4, #26
 80058ea:	42b5      	cmp	r5, r6
 80058ec:	d11a      	bne.n	8005924 <_printf_common+0xc8>
 80058ee:	2000      	movs	r0, #0
 80058f0:	e008      	b.n	8005904 <_printf_common+0xa8>
 80058f2:	2301      	movs	r3, #1
 80058f4:	4652      	mov	r2, sl
 80058f6:	4649      	mov	r1, r9
 80058f8:	4638      	mov	r0, r7
 80058fa:	47c0      	blx	r8
 80058fc:	3001      	adds	r0, #1
 80058fe:	d103      	bne.n	8005908 <_printf_common+0xac>
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005908:	3501      	adds	r5, #1
 800590a:	e7c6      	b.n	800589a <_printf_common+0x3e>
 800590c:	18e1      	adds	r1, r4, r3
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	2030      	movs	r0, #48	; 0x30
 8005912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005916:	4422      	add	r2, r4
 8005918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800591c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005920:	3302      	adds	r3, #2
 8005922:	e7c7      	b.n	80058b4 <_printf_common+0x58>
 8005924:	2301      	movs	r3, #1
 8005926:	4622      	mov	r2, r4
 8005928:	4649      	mov	r1, r9
 800592a:	4638      	mov	r0, r7
 800592c:	47c0      	blx	r8
 800592e:	3001      	adds	r0, #1
 8005930:	d0e6      	beq.n	8005900 <_printf_common+0xa4>
 8005932:	3601      	adds	r6, #1
 8005934:	e7d9      	b.n	80058ea <_printf_common+0x8e>
	...

08005938 <_printf_i>:
 8005938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	7e0f      	ldrb	r7, [r1, #24]
 800593e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005940:	2f78      	cmp	r7, #120	; 0x78
 8005942:	4691      	mov	r9, r2
 8005944:	4680      	mov	r8, r0
 8005946:	460c      	mov	r4, r1
 8005948:	469a      	mov	sl, r3
 800594a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800594e:	d807      	bhi.n	8005960 <_printf_i+0x28>
 8005950:	2f62      	cmp	r7, #98	; 0x62
 8005952:	d80a      	bhi.n	800596a <_printf_i+0x32>
 8005954:	2f00      	cmp	r7, #0
 8005956:	f000 80d8 	beq.w	8005b0a <_printf_i+0x1d2>
 800595a:	2f58      	cmp	r7, #88	; 0x58
 800595c:	f000 80a3 	beq.w	8005aa6 <_printf_i+0x16e>
 8005960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005968:	e03a      	b.n	80059e0 <_printf_i+0xa8>
 800596a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800596e:	2b15      	cmp	r3, #21
 8005970:	d8f6      	bhi.n	8005960 <_printf_i+0x28>
 8005972:	a101      	add	r1, pc, #4	; (adr r1, 8005978 <_printf_i+0x40>)
 8005974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005978:	080059d1 	.word	0x080059d1
 800597c:	080059e5 	.word	0x080059e5
 8005980:	08005961 	.word	0x08005961
 8005984:	08005961 	.word	0x08005961
 8005988:	08005961 	.word	0x08005961
 800598c:	08005961 	.word	0x08005961
 8005990:	080059e5 	.word	0x080059e5
 8005994:	08005961 	.word	0x08005961
 8005998:	08005961 	.word	0x08005961
 800599c:	08005961 	.word	0x08005961
 80059a0:	08005961 	.word	0x08005961
 80059a4:	08005af1 	.word	0x08005af1
 80059a8:	08005a15 	.word	0x08005a15
 80059ac:	08005ad3 	.word	0x08005ad3
 80059b0:	08005961 	.word	0x08005961
 80059b4:	08005961 	.word	0x08005961
 80059b8:	08005b13 	.word	0x08005b13
 80059bc:	08005961 	.word	0x08005961
 80059c0:	08005a15 	.word	0x08005a15
 80059c4:	08005961 	.word	0x08005961
 80059c8:	08005961 	.word	0x08005961
 80059cc:	08005adb 	.word	0x08005adb
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	1d1a      	adds	r2, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	602a      	str	r2, [r5, #0]
 80059d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e0:	2301      	movs	r3, #1
 80059e2:	e0a3      	b.n	8005b2c <_printf_i+0x1f4>
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	6829      	ldr	r1, [r5, #0]
 80059e8:	0606      	lsls	r6, r0, #24
 80059ea:	f101 0304 	add.w	r3, r1, #4
 80059ee:	d50a      	bpl.n	8005a06 <_printf_i+0xce>
 80059f0:	680e      	ldr	r6, [r1, #0]
 80059f2:	602b      	str	r3, [r5, #0]
 80059f4:	2e00      	cmp	r6, #0
 80059f6:	da03      	bge.n	8005a00 <_printf_i+0xc8>
 80059f8:	232d      	movs	r3, #45	; 0x2d
 80059fa:	4276      	negs	r6, r6
 80059fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a00:	485e      	ldr	r0, [pc, #376]	; (8005b7c <_printf_i+0x244>)
 8005a02:	230a      	movs	r3, #10
 8005a04:	e019      	b.n	8005a3a <_printf_i+0x102>
 8005a06:	680e      	ldr	r6, [r1, #0]
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a0e:	bf18      	it	ne
 8005a10:	b236      	sxthne	r6, r6
 8005a12:	e7ef      	b.n	80059f4 <_printf_i+0xbc>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	6820      	ldr	r0, [r4, #0]
 8005a18:	1d19      	adds	r1, r3, #4
 8005a1a:	6029      	str	r1, [r5, #0]
 8005a1c:	0601      	lsls	r1, r0, #24
 8005a1e:	d501      	bpl.n	8005a24 <_printf_i+0xec>
 8005a20:	681e      	ldr	r6, [r3, #0]
 8005a22:	e002      	b.n	8005a2a <_printf_i+0xf2>
 8005a24:	0646      	lsls	r6, r0, #25
 8005a26:	d5fb      	bpl.n	8005a20 <_printf_i+0xe8>
 8005a28:	881e      	ldrh	r6, [r3, #0]
 8005a2a:	4854      	ldr	r0, [pc, #336]	; (8005b7c <_printf_i+0x244>)
 8005a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a2e:	bf0c      	ite	eq
 8005a30:	2308      	moveq	r3, #8
 8005a32:	230a      	movne	r3, #10
 8005a34:	2100      	movs	r1, #0
 8005a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a3a:	6865      	ldr	r5, [r4, #4]
 8005a3c:	60a5      	str	r5, [r4, #8]
 8005a3e:	2d00      	cmp	r5, #0
 8005a40:	bfa2      	ittt	ge
 8005a42:	6821      	ldrge	r1, [r4, #0]
 8005a44:	f021 0104 	bicge.w	r1, r1, #4
 8005a48:	6021      	strge	r1, [r4, #0]
 8005a4a:	b90e      	cbnz	r6, 8005a50 <_printf_i+0x118>
 8005a4c:	2d00      	cmp	r5, #0
 8005a4e:	d04d      	beq.n	8005aec <_printf_i+0x1b4>
 8005a50:	4615      	mov	r5, r2
 8005a52:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a56:	fb03 6711 	mls	r7, r3, r1, r6
 8005a5a:	5dc7      	ldrb	r7, [r0, r7]
 8005a5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a60:	4637      	mov	r7, r6
 8005a62:	42bb      	cmp	r3, r7
 8005a64:	460e      	mov	r6, r1
 8005a66:	d9f4      	bls.n	8005a52 <_printf_i+0x11a>
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d10b      	bne.n	8005a84 <_printf_i+0x14c>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	07de      	lsls	r6, r3, #31
 8005a70:	d508      	bpl.n	8005a84 <_printf_i+0x14c>
 8005a72:	6923      	ldr	r3, [r4, #16]
 8005a74:	6861      	ldr	r1, [r4, #4]
 8005a76:	4299      	cmp	r1, r3
 8005a78:	bfde      	ittt	le
 8005a7a:	2330      	movle	r3, #48	; 0x30
 8005a7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a84:	1b52      	subs	r2, r2, r5
 8005a86:	6122      	str	r2, [r4, #16]
 8005a88:	f8cd a000 	str.w	sl, [sp]
 8005a8c:	464b      	mov	r3, r9
 8005a8e:	aa03      	add	r2, sp, #12
 8005a90:	4621      	mov	r1, r4
 8005a92:	4640      	mov	r0, r8
 8005a94:	f7ff fee2 	bl	800585c <_printf_common>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d14c      	bne.n	8005b36 <_printf_i+0x1fe>
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	b004      	add	sp, #16
 8005aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa6:	4835      	ldr	r0, [pc, #212]	; (8005b7c <_printf_i+0x244>)
 8005aa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005aac:	6829      	ldr	r1, [r5, #0]
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ab4:	6029      	str	r1, [r5, #0]
 8005ab6:	061d      	lsls	r5, r3, #24
 8005ab8:	d514      	bpl.n	8005ae4 <_printf_i+0x1ac>
 8005aba:	07df      	lsls	r7, r3, #31
 8005abc:	bf44      	itt	mi
 8005abe:	f043 0320 	orrmi.w	r3, r3, #32
 8005ac2:	6023      	strmi	r3, [r4, #0]
 8005ac4:	b91e      	cbnz	r6, 8005ace <_printf_i+0x196>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	f023 0320 	bic.w	r3, r3, #32
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	2310      	movs	r3, #16
 8005ad0:	e7b0      	b.n	8005a34 <_printf_i+0xfc>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	f043 0320 	orr.w	r3, r3, #32
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	2378      	movs	r3, #120	; 0x78
 8005adc:	4828      	ldr	r0, [pc, #160]	; (8005b80 <_printf_i+0x248>)
 8005ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ae2:	e7e3      	b.n	8005aac <_printf_i+0x174>
 8005ae4:	0659      	lsls	r1, r3, #25
 8005ae6:	bf48      	it	mi
 8005ae8:	b2b6      	uxthmi	r6, r6
 8005aea:	e7e6      	b.n	8005aba <_printf_i+0x182>
 8005aec:	4615      	mov	r5, r2
 8005aee:	e7bb      	b.n	8005a68 <_printf_i+0x130>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	6826      	ldr	r6, [r4, #0]
 8005af4:	6961      	ldr	r1, [r4, #20]
 8005af6:	1d18      	adds	r0, r3, #4
 8005af8:	6028      	str	r0, [r5, #0]
 8005afa:	0635      	lsls	r5, r6, #24
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	d501      	bpl.n	8005b04 <_printf_i+0x1cc>
 8005b00:	6019      	str	r1, [r3, #0]
 8005b02:	e002      	b.n	8005b0a <_printf_i+0x1d2>
 8005b04:	0670      	lsls	r0, r6, #25
 8005b06:	d5fb      	bpl.n	8005b00 <_printf_i+0x1c8>
 8005b08:	8019      	strh	r1, [r3, #0]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6123      	str	r3, [r4, #16]
 8005b0e:	4615      	mov	r5, r2
 8005b10:	e7ba      	b.n	8005a88 <_printf_i+0x150>
 8005b12:	682b      	ldr	r3, [r5, #0]
 8005b14:	1d1a      	adds	r2, r3, #4
 8005b16:	602a      	str	r2, [r5, #0]
 8005b18:	681d      	ldr	r5, [r3, #0]
 8005b1a:	6862      	ldr	r2, [r4, #4]
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f7fa fb6e 	bl	8000200 <memchr>
 8005b24:	b108      	cbz	r0, 8005b2a <_printf_i+0x1f2>
 8005b26:	1b40      	subs	r0, r0, r5
 8005b28:	6060      	str	r0, [r4, #4]
 8005b2a:	6863      	ldr	r3, [r4, #4]
 8005b2c:	6123      	str	r3, [r4, #16]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b34:	e7a8      	b.n	8005a88 <_printf_i+0x150>
 8005b36:	6923      	ldr	r3, [r4, #16]
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	47d0      	blx	sl
 8005b40:	3001      	adds	r0, #1
 8005b42:	d0ab      	beq.n	8005a9c <_printf_i+0x164>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	079b      	lsls	r3, r3, #30
 8005b48:	d413      	bmi.n	8005b72 <_printf_i+0x23a>
 8005b4a:	68e0      	ldr	r0, [r4, #12]
 8005b4c:	9b03      	ldr	r3, [sp, #12]
 8005b4e:	4298      	cmp	r0, r3
 8005b50:	bfb8      	it	lt
 8005b52:	4618      	movlt	r0, r3
 8005b54:	e7a4      	b.n	8005aa0 <_printf_i+0x168>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4632      	mov	r2, r6
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	47d0      	blx	sl
 8005b60:	3001      	adds	r0, #1
 8005b62:	d09b      	beq.n	8005a9c <_printf_i+0x164>
 8005b64:	3501      	adds	r5, #1
 8005b66:	68e3      	ldr	r3, [r4, #12]
 8005b68:	9903      	ldr	r1, [sp, #12]
 8005b6a:	1a5b      	subs	r3, r3, r1
 8005b6c:	42ab      	cmp	r3, r5
 8005b6e:	dcf2      	bgt.n	8005b56 <_printf_i+0x21e>
 8005b70:	e7eb      	b.n	8005b4a <_printf_i+0x212>
 8005b72:	2500      	movs	r5, #0
 8005b74:	f104 0619 	add.w	r6, r4, #25
 8005b78:	e7f5      	b.n	8005b66 <_printf_i+0x22e>
 8005b7a:	bf00      	nop
 8005b7c:	080076fe 	.word	0x080076fe
 8005b80:	0800770f 	.word	0x0800770f

08005b84 <_sbrk_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4d06      	ldr	r5, [pc, #24]	; (8005ba0 <_sbrk_r+0x1c>)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	602b      	str	r3, [r5, #0]
 8005b90:	f7fc fcda 	bl	8002548 <_sbrk>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_sbrk_r+0x1a>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_sbrk_r+0x1a>
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	20000698 	.word	0x20000698

08005ba4 <__swbuf_r>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	460e      	mov	r6, r1
 8005ba8:	4614      	mov	r4, r2
 8005baa:	4605      	mov	r5, r0
 8005bac:	b118      	cbz	r0, 8005bb6 <__swbuf_r+0x12>
 8005bae:	6983      	ldr	r3, [r0, #24]
 8005bb0:	b90b      	cbnz	r3, 8005bb6 <__swbuf_r+0x12>
 8005bb2:	f000 f9d9 	bl	8005f68 <__sinit>
 8005bb6:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <__swbuf_r+0x98>)
 8005bb8:	429c      	cmp	r4, r3
 8005bba:	d12b      	bne.n	8005c14 <__swbuf_r+0x70>
 8005bbc:	686c      	ldr	r4, [r5, #4]
 8005bbe:	69a3      	ldr	r3, [r4, #24]
 8005bc0:	60a3      	str	r3, [r4, #8]
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	071a      	lsls	r2, r3, #28
 8005bc6:	d52f      	bpl.n	8005c28 <__swbuf_r+0x84>
 8005bc8:	6923      	ldr	r3, [r4, #16]
 8005bca:	b36b      	cbz	r3, 8005c28 <__swbuf_r+0x84>
 8005bcc:	6923      	ldr	r3, [r4, #16]
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	1ac0      	subs	r0, r0, r3
 8005bd2:	6963      	ldr	r3, [r4, #20]
 8005bd4:	b2f6      	uxtb	r6, r6
 8005bd6:	4283      	cmp	r3, r0
 8005bd8:	4637      	mov	r7, r6
 8005bda:	dc04      	bgt.n	8005be6 <__swbuf_r+0x42>
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 f92e 	bl	8005e40 <_fflush_r>
 8005be4:	bb30      	cbnz	r0, 8005c34 <__swbuf_r+0x90>
 8005be6:	68a3      	ldr	r3, [r4, #8]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	60a3      	str	r3, [r4, #8]
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	6022      	str	r2, [r4, #0]
 8005bf2:	701e      	strb	r6, [r3, #0]
 8005bf4:	6963      	ldr	r3, [r4, #20]
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	4283      	cmp	r3, r0
 8005bfa:	d004      	beq.n	8005c06 <__swbuf_r+0x62>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	07db      	lsls	r3, r3, #31
 8005c00:	d506      	bpl.n	8005c10 <__swbuf_r+0x6c>
 8005c02:	2e0a      	cmp	r6, #10
 8005c04:	d104      	bne.n	8005c10 <__swbuf_r+0x6c>
 8005c06:	4621      	mov	r1, r4
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f000 f919 	bl	8005e40 <_fflush_r>
 8005c0e:	b988      	cbnz	r0, 8005c34 <__swbuf_r+0x90>
 8005c10:	4638      	mov	r0, r7
 8005c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c14:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <__swbuf_r+0x9c>)
 8005c16:	429c      	cmp	r4, r3
 8005c18:	d101      	bne.n	8005c1e <__swbuf_r+0x7a>
 8005c1a:	68ac      	ldr	r4, [r5, #8]
 8005c1c:	e7cf      	b.n	8005bbe <__swbuf_r+0x1a>
 8005c1e:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <__swbuf_r+0xa0>)
 8005c20:	429c      	cmp	r4, r3
 8005c22:	bf08      	it	eq
 8005c24:	68ec      	ldreq	r4, [r5, #12]
 8005c26:	e7ca      	b.n	8005bbe <__swbuf_r+0x1a>
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f000 f80c 	bl	8005c48 <__swsetup_r>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d0cb      	beq.n	8005bcc <__swbuf_r+0x28>
 8005c34:	f04f 37ff 	mov.w	r7, #4294967295
 8005c38:	e7ea      	b.n	8005c10 <__swbuf_r+0x6c>
 8005c3a:	bf00      	nop
 8005c3c:	08007740 	.word	0x08007740
 8005c40:	08007760 	.word	0x08007760
 8005c44:	08007720 	.word	0x08007720

08005c48 <__swsetup_r>:
 8005c48:	4b32      	ldr	r3, [pc, #200]	; (8005d14 <__swsetup_r+0xcc>)
 8005c4a:	b570      	push	{r4, r5, r6, lr}
 8005c4c:	681d      	ldr	r5, [r3, #0]
 8005c4e:	4606      	mov	r6, r0
 8005c50:	460c      	mov	r4, r1
 8005c52:	b125      	cbz	r5, 8005c5e <__swsetup_r+0x16>
 8005c54:	69ab      	ldr	r3, [r5, #24]
 8005c56:	b913      	cbnz	r3, 8005c5e <__swsetup_r+0x16>
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 f985 	bl	8005f68 <__sinit>
 8005c5e:	4b2e      	ldr	r3, [pc, #184]	; (8005d18 <__swsetup_r+0xd0>)
 8005c60:	429c      	cmp	r4, r3
 8005c62:	d10f      	bne.n	8005c84 <__swsetup_r+0x3c>
 8005c64:	686c      	ldr	r4, [r5, #4]
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c6c:	0719      	lsls	r1, r3, #28
 8005c6e:	d42c      	bmi.n	8005cca <__swsetup_r+0x82>
 8005c70:	06dd      	lsls	r5, r3, #27
 8005c72:	d411      	bmi.n	8005c98 <__swsetup_r+0x50>
 8005c74:	2309      	movs	r3, #9
 8005c76:	6033      	str	r3, [r6, #0]
 8005c78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c7c:	81a3      	strh	r3, [r4, #12]
 8005c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c82:	e03e      	b.n	8005d02 <__swsetup_r+0xba>
 8005c84:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <__swsetup_r+0xd4>)
 8005c86:	429c      	cmp	r4, r3
 8005c88:	d101      	bne.n	8005c8e <__swsetup_r+0x46>
 8005c8a:	68ac      	ldr	r4, [r5, #8]
 8005c8c:	e7eb      	b.n	8005c66 <__swsetup_r+0x1e>
 8005c8e:	4b24      	ldr	r3, [pc, #144]	; (8005d20 <__swsetup_r+0xd8>)
 8005c90:	429c      	cmp	r4, r3
 8005c92:	bf08      	it	eq
 8005c94:	68ec      	ldreq	r4, [r5, #12]
 8005c96:	e7e6      	b.n	8005c66 <__swsetup_r+0x1e>
 8005c98:	0758      	lsls	r0, r3, #29
 8005c9a:	d512      	bpl.n	8005cc2 <__swsetup_r+0x7a>
 8005c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c9e:	b141      	cbz	r1, 8005cb2 <__swsetup_r+0x6a>
 8005ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ca4:	4299      	cmp	r1, r3
 8005ca6:	d002      	beq.n	8005cae <__swsetup_r+0x66>
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7ff fb9d 	bl	80053e8 <_free_r>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6363      	str	r3, [r4, #52]	; 0x34
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cb8:	81a3      	strh	r3, [r4, #12]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	6063      	str	r3, [r4, #4]
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	f043 0308 	orr.w	r3, r3, #8
 8005cc8:	81a3      	strh	r3, [r4, #12]
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	b94b      	cbnz	r3, 8005ce2 <__swsetup_r+0x9a>
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd8:	d003      	beq.n	8005ce2 <__swsetup_r+0x9a>
 8005cda:	4621      	mov	r1, r4
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f000 fa09 	bl	80060f4 <__smakebuf_r>
 8005ce2:	89a0      	ldrh	r0, [r4, #12]
 8005ce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ce8:	f010 0301 	ands.w	r3, r0, #1
 8005cec:	d00a      	beq.n	8005d04 <__swsetup_r+0xbc>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60a3      	str	r3, [r4, #8]
 8005cf2:	6963      	ldr	r3, [r4, #20]
 8005cf4:	425b      	negs	r3, r3
 8005cf6:	61a3      	str	r3, [r4, #24]
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	b943      	cbnz	r3, 8005d0e <__swsetup_r+0xc6>
 8005cfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d00:	d1ba      	bne.n	8005c78 <__swsetup_r+0x30>
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	0781      	lsls	r1, r0, #30
 8005d06:	bf58      	it	pl
 8005d08:	6963      	ldrpl	r3, [r4, #20]
 8005d0a:	60a3      	str	r3, [r4, #8]
 8005d0c:	e7f4      	b.n	8005cf8 <__swsetup_r+0xb0>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e7f7      	b.n	8005d02 <__swsetup_r+0xba>
 8005d12:	bf00      	nop
 8005d14:	2000000c 	.word	0x2000000c
 8005d18:	08007740 	.word	0x08007740
 8005d1c:	08007760 	.word	0x08007760
 8005d20:	08007720 	.word	0x08007720

08005d24 <abort>:
 8005d24:	b508      	push	{r3, lr}
 8005d26:	2006      	movs	r0, #6
 8005d28:	f000 fa58 	bl	80061dc <raise>
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	f7fc fb87 	bl	8002440 <_exit>
	...

08005d34 <__sflush_r>:
 8005d34:	898a      	ldrh	r2, [r1, #12]
 8005d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	0710      	lsls	r0, r2, #28
 8005d3e:	460c      	mov	r4, r1
 8005d40:	d458      	bmi.n	8005df4 <__sflush_r+0xc0>
 8005d42:	684b      	ldr	r3, [r1, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dc05      	bgt.n	8005d54 <__sflush_r+0x20>
 8005d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dc02      	bgt.n	8005d54 <__sflush_r+0x20>
 8005d4e:	2000      	movs	r0, #0
 8005d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d56:	2e00      	cmp	r6, #0
 8005d58:	d0f9      	beq.n	8005d4e <__sflush_r+0x1a>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d60:	682f      	ldr	r7, [r5, #0]
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	d032      	beq.n	8005dcc <__sflush_r+0x98>
 8005d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	075a      	lsls	r2, r3, #29
 8005d6c:	d505      	bpl.n	8005d7a <__sflush_r+0x46>
 8005d6e:	6863      	ldr	r3, [r4, #4]
 8005d70:	1ac0      	subs	r0, r0, r3
 8005d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d74:	b10b      	cbz	r3, 8005d7a <__sflush_r+0x46>
 8005d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d78:	1ac0      	subs	r0, r0, r3
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d80:	6a21      	ldr	r1, [r4, #32]
 8005d82:	4628      	mov	r0, r5
 8005d84:	47b0      	blx	r6
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	d106      	bne.n	8005d9a <__sflush_r+0x66>
 8005d8c:	6829      	ldr	r1, [r5, #0]
 8005d8e:	291d      	cmp	r1, #29
 8005d90:	d82c      	bhi.n	8005dec <__sflush_r+0xb8>
 8005d92:	4a2a      	ldr	r2, [pc, #168]	; (8005e3c <__sflush_r+0x108>)
 8005d94:	40ca      	lsrs	r2, r1
 8005d96:	07d6      	lsls	r6, r2, #31
 8005d98:	d528      	bpl.n	8005dec <__sflush_r+0xb8>
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	6062      	str	r2, [r4, #4]
 8005d9e:	04d9      	lsls	r1, r3, #19
 8005da0:	6922      	ldr	r2, [r4, #16]
 8005da2:	6022      	str	r2, [r4, #0]
 8005da4:	d504      	bpl.n	8005db0 <__sflush_r+0x7c>
 8005da6:	1c42      	adds	r2, r0, #1
 8005da8:	d101      	bne.n	8005dae <__sflush_r+0x7a>
 8005daa:	682b      	ldr	r3, [r5, #0]
 8005dac:	b903      	cbnz	r3, 8005db0 <__sflush_r+0x7c>
 8005dae:	6560      	str	r0, [r4, #84]	; 0x54
 8005db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005db2:	602f      	str	r7, [r5, #0]
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d0ca      	beq.n	8005d4e <__sflush_r+0x1a>
 8005db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dbc:	4299      	cmp	r1, r3
 8005dbe:	d002      	beq.n	8005dc6 <__sflush_r+0x92>
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f7ff fb11 	bl	80053e8 <_free_r>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8005dca:	e7c1      	b.n	8005d50 <__sflush_r+0x1c>
 8005dcc:	6a21      	ldr	r1, [r4, #32]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b0      	blx	r6
 8005dd4:	1c41      	adds	r1, r0, #1
 8005dd6:	d1c7      	bne.n	8005d68 <__sflush_r+0x34>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0c4      	beq.n	8005d68 <__sflush_r+0x34>
 8005dde:	2b1d      	cmp	r3, #29
 8005de0:	d001      	beq.n	8005de6 <__sflush_r+0xb2>
 8005de2:	2b16      	cmp	r3, #22
 8005de4:	d101      	bne.n	8005dea <__sflush_r+0xb6>
 8005de6:	602f      	str	r7, [r5, #0]
 8005de8:	e7b1      	b.n	8005d4e <__sflush_r+0x1a>
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	e7ad      	b.n	8005d50 <__sflush_r+0x1c>
 8005df4:	690f      	ldr	r7, [r1, #16]
 8005df6:	2f00      	cmp	r7, #0
 8005df8:	d0a9      	beq.n	8005d4e <__sflush_r+0x1a>
 8005dfa:	0793      	lsls	r3, r2, #30
 8005dfc:	680e      	ldr	r6, [r1, #0]
 8005dfe:	bf08      	it	eq
 8005e00:	694b      	ldreq	r3, [r1, #20]
 8005e02:	600f      	str	r7, [r1, #0]
 8005e04:	bf18      	it	ne
 8005e06:	2300      	movne	r3, #0
 8005e08:	eba6 0807 	sub.w	r8, r6, r7
 8005e0c:	608b      	str	r3, [r1, #8]
 8005e0e:	f1b8 0f00 	cmp.w	r8, #0
 8005e12:	dd9c      	ble.n	8005d4e <__sflush_r+0x1a>
 8005e14:	6a21      	ldr	r1, [r4, #32]
 8005e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e18:	4643      	mov	r3, r8
 8005e1a:	463a      	mov	r2, r7
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b0      	blx	r6
 8005e20:	2800      	cmp	r0, #0
 8005e22:	dc06      	bgt.n	8005e32 <__sflush_r+0xfe>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2a:	81a3      	strh	r3, [r4, #12]
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	e78e      	b.n	8005d50 <__sflush_r+0x1c>
 8005e32:	4407      	add	r7, r0
 8005e34:	eba8 0800 	sub.w	r8, r8, r0
 8005e38:	e7e9      	b.n	8005e0e <__sflush_r+0xda>
 8005e3a:	bf00      	nop
 8005e3c:	20400001 	.word	0x20400001

08005e40 <_fflush_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	690b      	ldr	r3, [r1, #16]
 8005e44:	4605      	mov	r5, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	b913      	cbnz	r3, 8005e50 <_fflush_r+0x10>
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	b118      	cbz	r0, 8005e5a <_fflush_r+0x1a>
 8005e52:	6983      	ldr	r3, [r0, #24]
 8005e54:	b90b      	cbnz	r3, 8005e5a <_fflush_r+0x1a>
 8005e56:	f000 f887 	bl	8005f68 <__sinit>
 8005e5a:	4b14      	ldr	r3, [pc, #80]	; (8005eac <_fflush_r+0x6c>)
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	d11b      	bne.n	8005e98 <_fflush_r+0x58>
 8005e60:	686c      	ldr	r4, [r5, #4]
 8005e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0ef      	beq.n	8005e4a <_fflush_r+0xa>
 8005e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e6c:	07d0      	lsls	r0, r2, #31
 8005e6e:	d404      	bmi.n	8005e7a <_fflush_r+0x3a>
 8005e70:	0599      	lsls	r1, r3, #22
 8005e72:	d402      	bmi.n	8005e7a <_fflush_r+0x3a>
 8005e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e76:	f000 f915 	bl	80060a4 <__retarget_lock_acquire_recursive>
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	f7ff ff59 	bl	8005d34 <__sflush_r>
 8005e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e84:	07da      	lsls	r2, r3, #31
 8005e86:	4605      	mov	r5, r0
 8005e88:	d4e0      	bmi.n	8005e4c <_fflush_r+0xc>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	059b      	lsls	r3, r3, #22
 8005e8e:	d4dd      	bmi.n	8005e4c <_fflush_r+0xc>
 8005e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e92:	f000 f908 	bl	80060a6 <__retarget_lock_release_recursive>
 8005e96:	e7d9      	b.n	8005e4c <_fflush_r+0xc>
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <_fflush_r+0x70>)
 8005e9a:	429c      	cmp	r4, r3
 8005e9c:	d101      	bne.n	8005ea2 <_fflush_r+0x62>
 8005e9e:	68ac      	ldr	r4, [r5, #8]
 8005ea0:	e7df      	b.n	8005e62 <_fflush_r+0x22>
 8005ea2:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <_fflush_r+0x74>)
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	bf08      	it	eq
 8005ea8:	68ec      	ldreq	r4, [r5, #12]
 8005eaa:	e7da      	b.n	8005e62 <_fflush_r+0x22>
 8005eac:	08007740 	.word	0x08007740
 8005eb0:	08007760 	.word	0x08007760
 8005eb4:	08007720 	.word	0x08007720

08005eb8 <std>:
 8005eb8:	2300      	movs	r3, #0
 8005eba:	b510      	push	{r4, lr}
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8005ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ec6:	6083      	str	r3, [r0, #8]
 8005ec8:	8181      	strh	r1, [r0, #12]
 8005eca:	6643      	str	r3, [r0, #100]	; 0x64
 8005ecc:	81c2      	strh	r2, [r0, #14]
 8005ece:	6183      	str	r3, [r0, #24]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	305c      	adds	r0, #92	; 0x5c
 8005ed6:	f7ff f8a9 	bl	800502c <memset>
 8005eda:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <std+0x38>)
 8005edc:	6263      	str	r3, [r4, #36]	; 0x24
 8005ede:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <std+0x3c>)
 8005ee0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ee2:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <std+0x40>)
 8005ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ee6:	4b05      	ldr	r3, [pc, #20]	; (8005efc <std+0x44>)
 8005ee8:	6224      	str	r4, [r4, #32]
 8005eea:	6323      	str	r3, [r4, #48]	; 0x30
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	bf00      	nop
 8005ef0:	08006215 	.word	0x08006215
 8005ef4:	08006237 	.word	0x08006237
 8005ef8:	0800626f 	.word	0x0800626f
 8005efc:	08006293 	.word	0x08006293

08005f00 <_cleanup_r>:
 8005f00:	4901      	ldr	r1, [pc, #4]	; (8005f08 <_cleanup_r+0x8>)
 8005f02:	f000 b8af 	b.w	8006064 <_fwalk_reent>
 8005f06:	bf00      	nop
 8005f08:	08005e41 	.word	0x08005e41

08005f0c <__sfmoreglue>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	2268      	movs	r2, #104	; 0x68
 8005f10:	1e4d      	subs	r5, r1, #1
 8005f12:	4355      	muls	r5, r2
 8005f14:	460e      	mov	r6, r1
 8005f16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f1a:	f7ff fad1 	bl	80054c0 <_malloc_r>
 8005f1e:	4604      	mov	r4, r0
 8005f20:	b140      	cbz	r0, 8005f34 <__sfmoreglue+0x28>
 8005f22:	2100      	movs	r1, #0
 8005f24:	e9c0 1600 	strd	r1, r6, [r0]
 8005f28:	300c      	adds	r0, #12
 8005f2a:	60a0      	str	r0, [r4, #8]
 8005f2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f30:	f7ff f87c 	bl	800502c <memset>
 8005f34:	4620      	mov	r0, r4
 8005f36:	bd70      	pop	{r4, r5, r6, pc}

08005f38 <__sfp_lock_acquire>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__sfp_lock_acquire+0x8>)
 8005f3a:	f000 b8b3 	b.w	80060a4 <__retarget_lock_acquire_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20000695 	.word	0x20000695

08005f44 <__sfp_lock_release>:
 8005f44:	4801      	ldr	r0, [pc, #4]	; (8005f4c <__sfp_lock_release+0x8>)
 8005f46:	f000 b8ae 	b.w	80060a6 <__retarget_lock_release_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	20000695 	.word	0x20000695

08005f50 <__sinit_lock_acquire>:
 8005f50:	4801      	ldr	r0, [pc, #4]	; (8005f58 <__sinit_lock_acquire+0x8>)
 8005f52:	f000 b8a7 	b.w	80060a4 <__retarget_lock_acquire_recursive>
 8005f56:	bf00      	nop
 8005f58:	20000696 	.word	0x20000696

08005f5c <__sinit_lock_release>:
 8005f5c:	4801      	ldr	r0, [pc, #4]	; (8005f64 <__sinit_lock_release+0x8>)
 8005f5e:	f000 b8a2 	b.w	80060a6 <__retarget_lock_release_recursive>
 8005f62:	bf00      	nop
 8005f64:	20000696 	.word	0x20000696

08005f68 <__sinit>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	f7ff fff0 	bl	8005f50 <__sinit_lock_acquire>
 8005f70:	69a3      	ldr	r3, [r4, #24]
 8005f72:	b11b      	cbz	r3, 8005f7c <__sinit+0x14>
 8005f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f78:	f7ff bff0 	b.w	8005f5c <__sinit_lock_release>
 8005f7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f80:	6523      	str	r3, [r4, #80]	; 0x50
 8005f82:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <__sinit+0x68>)
 8005f84:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <__sinit+0x6c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f8a:	42a3      	cmp	r3, r4
 8005f8c:	bf04      	itt	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	61a3      	streq	r3, [r4, #24]
 8005f92:	4620      	mov	r0, r4
 8005f94:	f000 f820 	bl	8005fd8 <__sfp>
 8005f98:	6060      	str	r0, [r4, #4]
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f000 f81c 	bl	8005fd8 <__sfp>
 8005fa0:	60a0      	str	r0, [r4, #8]
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 f818 	bl	8005fd8 <__sfp>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	60e0      	str	r0, [r4, #12]
 8005fac:	2104      	movs	r1, #4
 8005fae:	6860      	ldr	r0, [r4, #4]
 8005fb0:	f7ff ff82 	bl	8005eb8 <std>
 8005fb4:	68a0      	ldr	r0, [r4, #8]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	2109      	movs	r1, #9
 8005fba:	f7ff ff7d 	bl	8005eb8 <std>
 8005fbe:	68e0      	ldr	r0, [r4, #12]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	2112      	movs	r1, #18
 8005fc4:	f7ff ff78 	bl	8005eb8 <std>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	61a3      	str	r3, [r4, #24]
 8005fcc:	e7d2      	b.n	8005f74 <__sinit+0xc>
 8005fce:	bf00      	nop
 8005fd0:	08007538 	.word	0x08007538
 8005fd4:	08005f01 	.word	0x08005f01

08005fd8 <__sfp>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	4607      	mov	r7, r0
 8005fdc:	f7ff ffac 	bl	8005f38 <__sfp_lock_acquire>
 8005fe0:	4b1e      	ldr	r3, [pc, #120]	; (800605c <__sfp+0x84>)
 8005fe2:	681e      	ldr	r6, [r3, #0]
 8005fe4:	69b3      	ldr	r3, [r6, #24]
 8005fe6:	b913      	cbnz	r3, 8005fee <__sfp+0x16>
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff ffbd 	bl	8005f68 <__sinit>
 8005fee:	3648      	adds	r6, #72	; 0x48
 8005ff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	d503      	bpl.n	8006000 <__sfp+0x28>
 8005ff8:	6833      	ldr	r3, [r6, #0]
 8005ffa:	b30b      	cbz	r3, 8006040 <__sfp+0x68>
 8005ffc:	6836      	ldr	r6, [r6, #0]
 8005ffe:	e7f7      	b.n	8005ff0 <__sfp+0x18>
 8006000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006004:	b9d5      	cbnz	r5, 800603c <__sfp+0x64>
 8006006:	4b16      	ldr	r3, [pc, #88]	; (8006060 <__sfp+0x88>)
 8006008:	60e3      	str	r3, [r4, #12]
 800600a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800600e:	6665      	str	r5, [r4, #100]	; 0x64
 8006010:	f000 f847 	bl	80060a2 <__retarget_lock_init_recursive>
 8006014:	f7ff ff96 	bl	8005f44 <__sfp_lock_release>
 8006018:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800601c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006020:	6025      	str	r5, [r4, #0]
 8006022:	61a5      	str	r5, [r4, #24]
 8006024:	2208      	movs	r2, #8
 8006026:	4629      	mov	r1, r5
 8006028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800602c:	f7fe fffe 	bl	800502c <memset>
 8006030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006038:	4620      	mov	r0, r4
 800603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800603c:	3468      	adds	r4, #104	; 0x68
 800603e:	e7d9      	b.n	8005ff4 <__sfp+0x1c>
 8006040:	2104      	movs	r1, #4
 8006042:	4638      	mov	r0, r7
 8006044:	f7ff ff62 	bl	8005f0c <__sfmoreglue>
 8006048:	4604      	mov	r4, r0
 800604a:	6030      	str	r0, [r6, #0]
 800604c:	2800      	cmp	r0, #0
 800604e:	d1d5      	bne.n	8005ffc <__sfp+0x24>
 8006050:	f7ff ff78 	bl	8005f44 <__sfp_lock_release>
 8006054:	230c      	movs	r3, #12
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	e7ee      	b.n	8006038 <__sfp+0x60>
 800605a:	bf00      	nop
 800605c:	08007538 	.word	0x08007538
 8006060:	ffff0001 	.word	0xffff0001

08006064 <_fwalk_reent>:
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	4606      	mov	r6, r0
 800606a:	4688      	mov	r8, r1
 800606c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006070:	2700      	movs	r7, #0
 8006072:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006076:	f1b9 0901 	subs.w	r9, r9, #1
 800607a:	d505      	bpl.n	8006088 <_fwalk_reent+0x24>
 800607c:	6824      	ldr	r4, [r4, #0]
 800607e:	2c00      	cmp	r4, #0
 8006080:	d1f7      	bne.n	8006072 <_fwalk_reent+0xe>
 8006082:	4638      	mov	r0, r7
 8006084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006088:	89ab      	ldrh	r3, [r5, #12]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d907      	bls.n	800609e <_fwalk_reent+0x3a>
 800608e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006092:	3301      	adds	r3, #1
 8006094:	d003      	beq.n	800609e <_fwalk_reent+0x3a>
 8006096:	4629      	mov	r1, r5
 8006098:	4630      	mov	r0, r6
 800609a:	47c0      	blx	r8
 800609c:	4307      	orrs	r7, r0
 800609e:	3568      	adds	r5, #104	; 0x68
 80060a0:	e7e9      	b.n	8006076 <_fwalk_reent+0x12>

080060a2 <__retarget_lock_init_recursive>:
 80060a2:	4770      	bx	lr

080060a4 <__retarget_lock_acquire_recursive>:
 80060a4:	4770      	bx	lr

080060a6 <__retarget_lock_release_recursive>:
 80060a6:	4770      	bx	lr

080060a8 <__swhatbuf_r>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	460e      	mov	r6, r1
 80060ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b0:	2900      	cmp	r1, #0
 80060b2:	b096      	sub	sp, #88	; 0x58
 80060b4:	4614      	mov	r4, r2
 80060b6:	461d      	mov	r5, r3
 80060b8:	da08      	bge.n	80060cc <__swhatbuf_r+0x24>
 80060ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	602a      	str	r2, [r5, #0]
 80060c2:	061a      	lsls	r2, r3, #24
 80060c4:	d410      	bmi.n	80060e8 <__swhatbuf_r+0x40>
 80060c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ca:	e00e      	b.n	80060ea <__swhatbuf_r+0x42>
 80060cc:	466a      	mov	r2, sp
 80060ce:	f000 f907 	bl	80062e0 <_fstat_r>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	dbf1      	blt.n	80060ba <__swhatbuf_r+0x12>
 80060d6:	9a01      	ldr	r2, [sp, #4]
 80060d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060e0:	425a      	negs	r2, r3
 80060e2:	415a      	adcs	r2, r3
 80060e4:	602a      	str	r2, [r5, #0]
 80060e6:	e7ee      	b.n	80060c6 <__swhatbuf_r+0x1e>
 80060e8:	2340      	movs	r3, #64	; 0x40
 80060ea:	2000      	movs	r0, #0
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	b016      	add	sp, #88	; 0x58
 80060f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080060f4 <__smakebuf_r>:
 80060f4:	898b      	ldrh	r3, [r1, #12]
 80060f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060f8:	079d      	lsls	r5, r3, #30
 80060fa:	4606      	mov	r6, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	d507      	bpl.n	8006110 <__smakebuf_r+0x1c>
 8006100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	6123      	str	r3, [r4, #16]
 8006108:	2301      	movs	r3, #1
 800610a:	6163      	str	r3, [r4, #20]
 800610c:	b002      	add	sp, #8
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	ab01      	add	r3, sp, #4
 8006112:	466a      	mov	r2, sp
 8006114:	f7ff ffc8 	bl	80060a8 <__swhatbuf_r>
 8006118:	9900      	ldr	r1, [sp, #0]
 800611a:	4605      	mov	r5, r0
 800611c:	4630      	mov	r0, r6
 800611e:	f7ff f9cf 	bl	80054c0 <_malloc_r>
 8006122:	b948      	cbnz	r0, 8006138 <__smakebuf_r+0x44>
 8006124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006128:	059a      	lsls	r2, r3, #22
 800612a:	d4ef      	bmi.n	800610c <__smakebuf_r+0x18>
 800612c:	f023 0303 	bic.w	r3, r3, #3
 8006130:	f043 0302 	orr.w	r3, r3, #2
 8006134:	81a3      	strh	r3, [r4, #12]
 8006136:	e7e3      	b.n	8006100 <__smakebuf_r+0xc>
 8006138:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <__smakebuf_r+0x7c>)
 800613a:	62b3      	str	r3, [r6, #40]	; 0x28
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	6020      	str	r0, [r4, #0]
 8006140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006144:	81a3      	strh	r3, [r4, #12]
 8006146:	9b00      	ldr	r3, [sp, #0]
 8006148:	6163      	str	r3, [r4, #20]
 800614a:	9b01      	ldr	r3, [sp, #4]
 800614c:	6120      	str	r0, [r4, #16]
 800614e:	b15b      	cbz	r3, 8006168 <__smakebuf_r+0x74>
 8006150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006154:	4630      	mov	r0, r6
 8006156:	f000 f8d5 	bl	8006304 <_isatty_r>
 800615a:	b128      	cbz	r0, 8006168 <__smakebuf_r+0x74>
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	81a3      	strh	r3, [r4, #12]
 8006168:	89a0      	ldrh	r0, [r4, #12]
 800616a:	4305      	orrs	r5, r0
 800616c:	81a5      	strh	r5, [r4, #12]
 800616e:	e7cd      	b.n	800610c <__smakebuf_r+0x18>
 8006170:	08005f01 	.word	0x08005f01

08006174 <__malloc_lock>:
 8006174:	4801      	ldr	r0, [pc, #4]	; (800617c <__malloc_lock+0x8>)
 8006176:	f7ff bf95 	b.w	80060a4 <__retarget_lock_acquire_recursive>
 800617a:	bf00      	nop
 800617c:	20000694 	.word	0x20000694

08006180 <__malloc_unlock>:
 8006180:	4801      	ldr	r0, [pc, #4]	; (8006188 <__malloc_unlock+0x8>)
 8006182:	f7ff bf90 	b.w	80060a6 <__retarget_lock_release_recursive>
 8006186:	bf00      	nop
 8006188:	20000694 	.word	0x20000694

0800618c <_raise_r>:
 800618c:	291f      	cmp	r1, #31
 800618e:	b538      	push	{r3, r4, r5, lr}
 8006190:	4604      	mov	r4, r0
 8006192:	460d      	mov	r5, r1
 8006194:	d904      	bls.n	80061a0 <_raise_r+0x14>
 8006196:	2316      	movs	r3, #22
 8006198:	6003      	str	r3, [r0, #0]
 800619a:	f04f 30ff 	mov.w	r0, #4294967295
 800619e:	bd38      	pop	{r3, r4, r5, pc}
 80061a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80061a2:	b112      	cbz	r2, 80061aa <_raise_r+0x1e>
 80061a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061a8:	b94b      	cbnz	r3, 80061be <_raise_r+0x32>
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 f830 	bl	8006210 <_getpid_r>
 80061b0:	462a      	mov	r2, r5
 80061b2:	4601      	mov	r1, r0
 80061b4:	4620      	mov	r0, r4
 80061b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061ba:	f000 b817 	b.w	80061ec <_kill_r>
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d00a      	beq.n	80061d8 <_raise_r+0x4c>
 80061c2:	1c59      	adds	r1, r3, #1
 80061c4:	d103      	bne.n	80061ce <_raise_r+0x42>
 80061c6:	2316      	movs	r3, #22
 80061c8:	6003      	str	r3, [r0, #0]
 80061ca:	2001      	movs	r0, #1
 80061cc:	e7e7      	b.n	800619e <_raise_r+0x12>
 80061ce:	2400      	movs	r4, #0
 80061d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061d4:	4628      	mov	r0, r5
 80061d6:	4798      	blx	r3
 80061d8:	2000      	movs	r0, #0
 80061da:	e7e0      	b.n	800619e <_raise_r+0x12>

080061dc <raise>:
 80061dc:	4b02      	ldr	r3, [pc, #8]	; (80061e8 <raise+0xc>)
 80061de:	4601      	mov	r1, r0
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	f7ff bfd3 	b.w	800618c <_raise_r>
 80061e6:	bf00      	nop
 80061e8:	2000000c 	.word	0x2000000c

080061ec <_kill_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4d07      	ldr	r5, [pc, #28]	; (800620c <_kill_r+0x20>)
 80061f0:	2300      	movs	r3, #0
 80061f2:	4604      	mov	r4, r0
 80061f4:	4608      	mov	r0, r1
 80061f6:	4611      	mov	r1, r2
 80061f8:	602b      	str	r3, [r5, #0]
 80061fa:	f7fc f911 	bl	8002420 <_kill>
 80061fe:	1c43      	adds	r3, r0, #1
 8006200:	d102      	bne.n	8006208 <_kill_r+0x1c>
 8006202:	682b      	ldr	r3, [r5, #0]
 8006204:	b103      	cbz	r3, 8006208 <_kill_r+0x1c>
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	bd38      	pop	{r3, r4, r5, pc}
 800620a:	bf00      	nop
 800620c:	20000698 	.word	0x20000698

08006210 <_getpid_r>:
 8006210:	f7fc b8fe 	b.w	8002410 <_getpid>

08006214 <__sread>:
 8006214:	b510      	push	{r4, lr}
 8006216:	460c      	mov	r4, r1
 8006218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621c:	f000 f894 	bl	8006348 <_read_r>
 8006220:	2800      	cmp	r0, #0
 8006222:	bfab      	itete	ge
 8006224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006226:	89a3      	ldrhlt	r3, [r4, #12]
 8006228:	181b      	addge	r3, r3, r0
 800622a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800622e:	bfac      	ite	ge
 8006230:	6563      	strge	r3, [r4, #84]	; 0x54
 8006232:	81a3      	strhlt	r3, [r4, #12]
 8006234:	bd10      	pop	{r4, pc}

08006236 <__swrite>:
 8006236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800623a:	461f      	mov	r7, r3
 800623c:	898b      	ldrh	r3, [r1, #12]
 800623e:	05db      	lsls	r3, r3, #23
 8006240:	4605      	mov	r5, r0
 8006242:	460c      	mov	r4, r1
 8006244:	4616      	mov	r6, r2
 8006246:	d505      	bpl.n	8006254 <__swrite+0x1e>
 8006248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800624c:	2302      	movs	r3, #2
 800624e:	2200      	movs	r2, #0
 8006250:	f000 f868 	bl	8006324 <_lseek_r>
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800625a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800625e:	81a3      	strh	r3, [r4, #12]
 8006260:	4632      	mov	r2, r6
 8006262:	463b      	mov	r3, r7
 8006264:	4628      	mov	r0, r5
 8006266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800626a:	f000 b817 	b.w	800629c <_write_r>

0800626e <__sseek>:
 800626e:	b510      	push	{r4, lr}
 8006270:	460c      	mov	r4, r1
 8006272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006276:	f000 f855 	bl	8006324 <_lseek_r>
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	bf15      	itete	ne
 8006280:	6560      	strne	r0, [r4, #84]	; 0x54
 8006282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800628a:	81a3      	strheq	r3, [r4, #12]
 800628c:	bf18      	it	ne
 800628e:	81a3      	strhne	r3, [r4, #12]
 8006290:	bd10      	pop	{r4, pc}

08006292 <__sclose>:
 8006292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006296:	f000 b813 	b.w	80062c0 <_close_r>
	...

0800629c <_write_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d07      	ldr	r5, [pc, #28]	; (80062bc <_write_r+0x20>)
 80062a0:	4604      	mov	r4, r0
 80062a2:	4608      	mov	r0, r1
 80062a4:	4611      	mov	r1, r2
 80062a6:	2200      	movs	r2, #0
 80062a8:	602a      	str	r2, [r5, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f7fc f8ef 	bl	800248e <_write>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_write_r+0x1e>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_write_r+0x1e>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20000698 	.word	0x20000698

080062c0 <_close_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4d06      	ldr	r5, [pc, #24]	; (80062dc <_close_r+0x1c>)
 80062c4:	2300      	movs	r3, #0
 80062c6:	4604      	mov	r4, r0
 80062c8:	4608      	mov	r0, r1
 80062ca:	602b      	str	r3, [r5, #0]
 80062cc:	f7fc f8fb 	bl	80024c6 <_close>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d102      	bne.n	80062da <_close_r+0x1a>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	b103      	cbz	r3, 80062da <_close_r+0x1a>
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	20000698 	.word	0x20000698

080062e0 <_fstat_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4d07      	ldr	r5, [pc, #28]	; (8006300 <_fstat_r+0x20>)
 80062e4:	2300      	movs	r3, #0
 80062e6:	4604      	mov	r4, r0
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	f7fc f8f6 	bl	80024de <_fstat>
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	d102      	bne.n	80062fc <_fstat_r+0x1c>
 80062f6:	682b      	ldr	r3, [r5, #0]
 80062f8:	b103      	cbz	r3, 80062fc <_fstat_r+0x1c>
 80062fa:	6023      	str	r3, [r4, #0]
 80062fc:	bd38      	pop	{r3, r4, r5, pc}
 80062fe:	bf00      	nop
 8006300:	20000698 	.word	0x20000698

08006304 <_isatty_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d06      	ldr	r5, [pc, #24]	; (8006320 <_isatty_r+0x1c>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	602b      	str	r3, [r5, #0]
 8006310:	f7fc f8f5 	bl	80024fe <_isatty>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_isatty_r+0x1a>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_isatty_r+0x1a>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	20000698 	.word	0x20000698

08006324 <_lseek_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4d07      	ldr	r5, [pc, #28]	; (8006344 <_lseek_r+0x20>)
 8006328:	4604      	mov	r4, r0
 800632a:	4608      	mov	r0, r1
 800632c:	4611      	mov	r1, r2
 800632e:	2200      	movs	r2, #0
 8006330:	602a      	str	r2, [r5, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	f7fc f8ee 	bl	8002514 <_lseek>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_lseek_r+0x1e>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	b103      	cbz	r3, 8006342 <_lseek_r+0x1e>
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	20000698 	.word	0x20000698

08006348 <_read_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4d07      	ldr	r5, [pc, #28]	; (8006368 <_read_r+0x20>)
 800634c:	4604      	mov	r4, r0
 800634e:	4608      	mov	r0, r1
 8006350:	4611      	mov	r1, r2
 8006352:	2200      	movs	r2, #0
 8006354:	602a      	str	r2, [r5, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	f7fc f87c 	bl	8002454 <_read>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_read_r+0x1e>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_read_r+0x1e>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	20000698 	.word	0x20000698
 800636c:	00000000 	.word	0x00000000

08006370 <cos>:
 8006370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006372:	ec53 2b10 	vmov	r2, r3, d0
 8006376:	4826      	ldr	r0, [pc, #152]	; (8006410 <cos+0xa0>)
 8006378:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800637c:	4281      	cmp	r1, r0
 800637e:	dc06      	bgt.n	800638e <cos+0x1e>
 8006380:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006408 <cos+0x98>
 8006384:	b005      	add	sp, #20
 8006386:	f85d eb04 	ldr.w	lr, [sp], #4
 800638a:	f000 baa9 	b.w	80068e0 <__kernel_cos>
 800638e:	4821      	ldr	r0, [pc, #132]	; (8006414 <cos+0xa4>)
 8006390:	4281      	cmp	r1, r0
 8006392:	dd09      	ble.n	80063a8 <cos+0x38>
 8006394:	ee10 0a10 	vmov	r0, s0
 8006398:	4619      	mov	r1, r3
 800639a:	f7f9 ff85 	bl	80002a8 <__aeabi_dsub>
 800639e:	ec41 0b10 	vmov	d0, r0, r1
 80063a2:	b005      	add	sp, #20
 80063a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80063a8:	4668      	mov	r0, sp
 80063aa:	f000 f88d 	bl	80064c8 <__ieee754_rem_pio2>
 80063ae:	f000 0003 	and.w	r0, r0, #3
 80063b2:	2801      	cmp	r0, #1
 80063b4:	d00b      	beq.n	80063ce <cos+0x5e>
 80063b6:	2802      	cmp	r0, #2
 80063b8:	d016      	beq.n	80063e8 <cos+0x78>
 80063ba:	b9e0      	cbnz	r0, 80063f6 <cos+0x86>
 80063bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063c0:	ed9d 0b00 	vldr	d0, [sp]
 80063c4:	f000 fa8c 	bl	80068e0 <__kernel_cos>
 80063c8:	ec51 0b10 	vmov	r0, r1, d0
 80063cc:	e7e7      	b.n	800639e <cos+0x2e>
 80063ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063d2:	ed9d 0b00 	vldr	d0, [sp]
 80063d6:	f000 fe9b 	bl	8007110 <__kernel_sin>
 80063da:	ec53 2b10 	vmov	r2, r3, d0
 80063de:	ee10 0a10 	vmov	r0, s0
 80063e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80063e6:	e7da      	b.n	800639e <cos+0x2e>
 80063e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063ec:	ed9d 0b00 	vldr	d0, [sp]
 80063f0:	f000 fa76 	bl	80068e0 <__kernel_cos>
 80063f4:	e7f1      	b.n	80063da <cos+0x6a>
 80063f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063fa:	ed9d 0b00 	vldr	d0, [sp]
 80063fe:	2001      	movs	r0, #1
 8006400:	f000 fe86 	bl	8007110 <__kernel_sin>
 8006404:	e7e0      	b.n	80063c8 <cos+0x58>
 8006406:	bf00      	nop
	...
 8006410:	3fe921fb 	.word	0x3fe921fb
 8006414:	7fefffff 	.word	0x7fefffff

08006418 <sin>:
 8006418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800641a:	ec53 2b10 	vmov	r2, r3, d0
 800641e:	4828      	ldr	r0, [pc, #160]	; (80064c0 <sin+0xa8>)
 8006420:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006424:	4281      	cmp	r1, r0
 8006426:	dc07      	bgt.n	8006438 <sin+0x20>
 8006428:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80064b8 <sin+0xa0>
 800642c:	2000      	movs	r0, #0
 800642e:	b005      	add	sp, #20
 8006430:	f85d eb04 	ldr.w	lr, [sp], #4
 8006434:	f000 be6c 	b.w	8007110 <__kernel_sin>
 8006438:	4822      	ldr	r0, [pc, #136]	; (80064c4 <sin+0xac>)
 800643a:	4281      	cmp	r1, r0
 800643c:	dd09      	ble.n	8006452 <sin+0x3a>
 800643e:	ee10 0a10 	vmov	r0, s0
 8006442:	4619      	mov	r1, r3
 8006444:	f7f9 ff30 	bl	80002a8 <__aeabi_dsub>
 8006448:	ec41 0b10 	vmov	d0, r0, r1
 800644c:	b005      	add	sp, #20
 800644e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006452:	4668      	mov	r0, sp
 8006454:	f000 f838 	bl	80064c8 <__ieee754_rem_pio2>
 8006458:	f000 0003 	and.w	r0, r0, #3
 800645c:	2801      	cmp	r0, #1
 800645e:	d00c      	beq.n	800647a <sin+0x62>
 8006460:	2802      	cmp	r0, #2
 8006462:	d011      	beq.n	8006488 <sin+0x70>
 8006464:	b9f0      	cbnz	r0, 80064a4 <sin+0x8c>
 8006466:	ed9d 1b02 	vldr	d1, [sp, #8]
 800646a:	ed9d 0b00 	vldr	d0, [sp]
 800646e:	2001      	movs	r0, #1
 8006470:	f000 fe4e 	bl	8007110 <__kernel_sin>
 8006474:	ec51 0b10 	vmov	r0, r1, d0
 8006478:	e7e6      	b.n	8006448 <sin+0x30>
 800647a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800647e:	ed9d 0b00 	vldr	d0, [sp]
 8006482:	f000 fa2d 	bl	80068e0 <__kernel_cos>
 8006486:	e7f5      	b.n	8006474 <sin+0x5c>
 8006488:	ed9d 1b02 	vldr	d1, [sp, #8]
 800648c:	ed9d 0b00 	vldr	d0, [sp]
 8006490:	2001      	movs	r0, #1
 8006492:	f000 fe3d 	bl	8007110 <__kernel_sin>
 8006496:	ec53 2b10 	vmov	r2, r3, d0
 800649a:	ee10 0a10 	vmov	r0, s0
 800649e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80064a2:	e7d1      	b.n	8006448 <sin+0x30>
 80064a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064a8:	ed9d 0b00 	vldr	d0, [sp]
 80064ac:	f000 fa18 	bl	80068e0 <__kernel_cos>
 80064b0:	e7f1      	b.n	8006496 <sin+0x7e>
 80064b2:	bf00      	nop
 80064b4:	f3af 8000 	nop.w
	...
 80064c0:	3fe921fb 	.word	0x3fe921fb
 80064c4:	7fefffff 	.word	0x7fefffff

080064c8 <__ieee754_rem_pio2>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	ed2d 8b02 	vpush	{d8}
 80064d0:	ec55 4b10 	vmov	r4, r5, d0
 80064d4:	4bca      	ldr	r3, [pc, #808]	; (8006800 <__ieee754_rem_pio2+0x338>)
 80064d6:	b08b      	sub	sp, #44	; 0x2c
 80064d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80064dc:	4598      	cmp	r8, r3
 80064de:	4682      	mov	sl, r0
 80064e0:	9502      	str	r5, [sp, #8]
 80064e2:	dc08      	bgt.n	80064f6 <__ieee754_rem_pio2+0x2e>
 80064e4:	2200      	movs	r2, #0
 80064e6:	2300      	movs	r3, #0
 80064e8:	ed80 0b00 	vstr	d0, [r0]
 80064ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80064f0:	f04f 0b00 	mov.w	fp, #0
 80064f4:	e028      	b.n	8006548 <__ieee754_rem_pio2+0x80>
 80064f6:	4bc3      	ldr	r3, [pc, #780]	; (8006804 <__ieee754_rem_pio2+0x33c>)
 80064f8:	4598      	cmp	r8, r3
 80064fa:	dc78      	bgt.n	80065ee <__ieee754_rem_pio2+0x126>
 80064fc:	9b02      	ldr	r3, [sp, #8]
 80064fe:	4ec2      	ldr	r6, [pc, #776]	; (8006808 <__ieee754_rem_pio2+0x340>)
 8006500:	2b00      	cmp	r3, #0
 8006502:	ee10 0a10 	vmov	r0, s0
 8006506:	a3b0      	add	r3, pc, #704	; (adr r3, 80067c8 <__ieee754_rem_pio2+0x300>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	4629      	mov	r1, r5
 800650e:	dd39      	ble.n	8006584 <__ieee754_rem_pio2+0xbc>
 8006510:	f7f9 feca 	bl	80002a8 <__aeabi_dsub>
 8006514:	45b0      	cmp	r8, r6
 8006516:	4604      	mov	r4, r0
 8006518:	460d      	mov	r5, r1
 800651a:	d01b      	beq.n	8006554 <__ieee754_rem_pio2+0x8c>
 800651c:	a3ac      	add	r3, pc, #688	; (adr r3, 80067d0 <__ieee754_rem_pio2+0x308>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f7f9 fec1 	bl	80002a8 <__aeabi_dsub>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	e9ca 2300 	strd	r2, r3, [sl]
 800652e:	4620      	mov	r0, r4
 8006530:	4629      	mov	r1, r5
 8006532:	f7f9 feb9 	bl	80002a8 <__aeabi_dsub>
 8006536:	a3a6      	add	r3, pc, #664	; (adr r3, 80067d0 <__ieee754_rem_pio2+0x308>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f7f9 feb4 	bl	80002a8 <__aeabi_dsub>
 8006540:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006544:	f04f 0b01 	mov.w	fp, #1
 8006548:	4658      	mov	r0, fp
 800654a:	b00b      	add	sp, #44	; 0x2c
 800654c:	ecbd 8b02 	vpop	{d8}
 8006550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006554:	a3a0      	add	r3, pc, #640	; (adr r3, 80067d8 <__ieee754_rem_pio2+0x310>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f7f9 fea5 	bl	80002a8 <__aeabi_dsub>
 800655e:	a3a0      	add	r3, pc, #640	; (adr r3, 80067e0 <__ieee754_rem_pio2+0x318>)
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	4604      	mov	r4, r0
 8006566:	460d      	mov	r5, r1
 8006568:	f7f9 fe9e 	bl	80002a8 <__aeabi_dsub>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	e9ca 2300 	strd	r2, r3, [sl]
 8006574:	4620      	mov	r0, r4
 8006576:	4629      	mov	r1, r5
 8006578:	f7f9 fe96 	bl	80002a8 <__aeabi_dsub>
 800657c:	a398      	add	r3, pc, #608	; (adr r3, 80067e0 <__ieee754_rem_pio2+0x318>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	e7db      	b.n	800653c <__ieee754_rem_pio2+0x74>
 8006584:	f7f9 fe92 	bl	80002ac <__adddf3>
 8006588:	45b0      	cmp	r8, r6
 800658a:	4604      	mov	r4, r0
 800658c:	460d      	mov	r5, r1
 800658e:	d016      	beq.n	80065be <__ieee754_rem_pio2+0xf6>
 8006590:	a38f      	add	r3, pc, #572	; (adr r3, 80067d0 <__ieee754_rem_pio2+0x308>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7f9 fe89 	bl	80002ac <__adddf3>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	e9ca 2300 	strd	r2, r3, [sl]
 80065a2:	4620      	mov	r0, r4
 80065a4:	4629      	mov	r1, r5
 80065a6:	f7f9 fe7f 	bl	80002a8 <__aeabi_dsub>
 80065aa:	a389      	add	r3, pc, #548	; (adr r3, 80067d0 <__ieee754_rem_pio2+0x308>)
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f7f9 fe7c 	bl	80002ac <__adddf3>
 80065b4:	f04f 3bff 	mov.w	fp, #4294967295
 80065b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80065bc:	e7c4      	b.n	8006548 <__ieee754_rem_pio2+0x80>
 80065be:	a386      	add	r3, pc, #536	; (adr r3, 80067d8 <__ieee754_rem_pio2+0x310>)
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f7f9 fe72 	bl	80002ac <__adddf3>
 80065c8:	a385      	add	r3, pc, #532	; (adr r3, 80067e0 <__ieee754_rem_pio2+0x318>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	4604      	mov	r4, r0
 80065d0:	460d      	mov	r5, r1
 80065d2:	f7f9 fe6b 	bl	80002ac <__adddf3>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	e9ca 2300 	strd	r2, r3, [sl]
 80065de:	4620      	mov	r0, r4
 80065e0:	4629      	mov	r1, r5
 80065e2:	f7f9 fe61 	bl	80002a8 <__aeabi_dsub>
 80065e6:	a37e      	add	r3, pc, #504	; (adr r3, 80067e0 <__ieee754_rem_pio2+0x318>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	e7e0      	b.n	80065b0 <__ieee754_rem_pio2+0xe8>
 80065ee:	4b87      	ldr	r3, [pc, #540]	; (800680c <__ieee754_rem_pio2+0x344>)
 80065f0:	4598      	cmp	r8, r3
 80065f2:	f300 80d9 	bgt.w	80067a8 <__ieee754_rem_pio2+0x2e0>
 80065f6:	f000 fe49 	bl	800728c <fabs>
 80065fa:	ec55 4b10 	vmov	r4, r5, d0
 80065fe:	ee10 0a10 	vmov	r0, s0
 8006602:	a379      	add	r3, pc, #484	; (adr r3, 80067e8 <__ieee754_rem_pio2+0x320>)
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	4629      	mov	r1, r5
 800660a:	f7fa f805 	bl	8000618 <__aeabi_dmul>
 800660e:	4b80      	ldr	r3, [pc, #512]	; (8006810 <__ieee754_rem_pio2+0x348>)
 8006610:	2200      	movs	r2, #0
 8006612:	f7f9 fe4b 	bl	80002ac <__adddf3>
 8006616:	f7fa fa99 	bl	8000b4c <__aeabi_d2iz>
 800661a:	4683      	mov	fp, r0
 800661c:	f7f9 ff92 	bl	8000544 <__aeabi_i2d>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	ec43 2b18 	vmov	d8, r2, r3
 8006628:	a367      	add	r3, pc, #412	; (adr r3, 80067c8 <__ieee754_rem_pio2+0x300>)
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f7f9 fff3 	bl	8000618 <__aeabi_dmul>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4620      	mov	r0, r4
 8006638:	4629      	mov	r1, r5
 800663a:	f7f9 fe35 	bl	80002a8 <__aeabi_dsub>
 800663e:	a364      	add	r3, pc, #400	; (adr r3, 80067d0 <__ieee754_rem_pio2+0x308>)
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	4606      	mov	r6, r0
 8006646:	460f      	mov	r7, r1
 8006648:	ec51 0b18 	vmov	r0, r1, d8
 800664c:	f7f9 ffe4 	bl	8000618 <__aeabi_dmul>
 8006650:	f1bb 0f1f 	cmp.w	fp, #31
 8006654:	4604      	mov	r4, r0
 8006656:	460d      	mov	r5, r1
 8006658:	dc0d      	bgt.n	8006676 <__ieee754_rem_pio2+0x1ae>
 800665a:	4b6e      	ldr	r3, [pc, #440]	; (8006814 <__ieee754_rem_pio2+0x34c>)
 800665c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006664:	4543      	cmp	r3, r8
 8006666:	d006      	beq.n	8006676 <__ieee754_rem_pio2+0x1ae>
 8006668:	4622      	mov	r2, r4
 800666a:	462b      	mov	r3, r5
 800666c:	4630      	mov	r0, r6
 800666e:	4639      	mov	r1, r7
 8006670:	f7f9 fe1a 	bl	80002a8 <__aeabi_dsub>
 8006674:	e00f      	b.n	8006696 <__ieee754_rem_pio2+0x1ce>
 8006676:	462b      	mov	r3, r5
 8006678:	4622      	mov	r2, r4
 800667a:	4630      	mov	r0, r6
 800667c:	4639      	mov	r1, r7
 800667e:	f7f9 fe13 	bl	80002a8 <__aeabi_dsub>
 8006682:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800668c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006690:	f1b8 0f10 	cmp.w	r8, #16
 8006694:	dc02      	bgt.n	800669c <__ieee754_rem_pio2+0x1d4>
 8006696:	e9ca 0100 	strd	r0, r1, [sl]
 800669a:	e039      	b.n	8006710 <__ieee754_rem_pio2+0x248>
 800669c:	a34e      	add	r3, pc, #312	; (adr r3, 80067d8 <__ieee754_rem_pio2+0x310>)
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	ec51 0b18 	vmov	r0, r1, d8
 80066a6:	f7f9 ffb7 	bl	8000618 <__aeabi_dmul>
 80066aa:	4604      	mov	r4, r0
 80066ac:	460d      	mov	r5, r1
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4630      	mov	r0, r6
 80066b4:	4639      	mov	r1, r7
 80066b6:	f7f9 fdf7 	bl	80002a8 <__aeabi_dsub>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4680      	mov	r8, r0
 80066c0:	4689      	mov	r9, r1
 80066c2:	4630      	mov	r0, r6
 80066c4:	4639      	mov	r1, r7
 80066c6:	f7f9 fdef 	bl	80002a8 <__aeabi_dsub>
 80066ca:	4622      	mov	r2, r4
 80066cc:	462b      	mov	r3, r5
 80066ce:	f7f9 fdeb 	bl	80002a8 <__aeabi_dsub>
 80066d2:	a343      	add	r3, pc, #268	; (adr r3, 80067e0 <__ieee754_rem_pio2+0x318>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	4604      	mov	r4, r0
 80066da:	460d      	mov	r5, r1
 80066dc:	ec51 0b18 	vmov	r0, r1, d8
 80066e0:	f7f9 ff9a 	bl	8000618 <__aeabi_dmul>
 80066e4:	4622      	mov	r2, r4
 80066e6:	462b      	mov	r3, r5
 80066e8:	f7f9 fdde 	bl	80002a8 <__aeabi_dsub>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4604      	mov	r4, r0
 80066f2:	460d      	mov	r5, r1
 80066f4:	4640      	mov	r0, r8
 80066f6:	4649      	mov	r1, r9
 80066f8:	f7f9 fdd6 	bl	80002a8 <__aeabi_dsub>
 80066fc:	9a03      	ldr	r2, [sp, #12]
 80066fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b31      	cmp	r3, #49	; 0x31
 8006706:	dc24      	bgt.n	8006752 <__ieee754_rem_pio2+0x28a>
 8006708:	e9ca 0100 	strd	r0, r1, [sl]
 800670c:	4646      	mov	r6, r8
 800670e:	464f      	mov	r7, r9
 8006710:	e9da 8900 	ldrd	r8, r9, [sl]
 8006714:	4630      	mov	r0, r6
 8006716:	4642      	mov	r2, r8
 8006718:	464b      	mov	r3, r9
 800671a:	4639      	mov	r1, r7
 800671c:	f7f9 fdc4 	bl	80002a8 <__aeabi_dsub>
 8006720:	462b      	mov	r3, r5
 8006722:	4622      	mov	r2, r4
 8006724:	f7f9 fdc0 	bl	80002a8 <__aeabi_dsub>
 8006728:	9b02      	ldr	r3, [sp, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006730:	f6bf af0a 	bge.w	8006548 <__ieee754_rem_pio2+0x80>
 8006734:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006738:	f8ca 3004 	str.w	r3, [sl, #4]
 800673c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006740:	f8ca 8000 	str.w	r8, [sl]
 8006744:	f8ca 0008 	str.w	r0, [sl, #8]
 8006748:	f8ca 300c 	str.w	r3, [sl, #12]
 800674c:	f1cb 0b00 	rsb	fp, fp, #0
 8006750:	e6fa      	b.n	8006548 <__ieee754_rem_pio2+0x80>
 8006752:	a327      	add	r3, pc, #156	; (adr r3, 80067f0 <__ieee754_rem_pio2+0x328>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	ec51 0b18 	vmov	r0, r1, d8
 800675c:	f7f9 ff5c 	bl	8000618 <__aeabi_dmul>
 8006760:	4604      	mov	r4, r0
 8006762:	460d      	mov	r5, r1
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4640      	mov	r0, r8
 800676a:	4649      	mov	r1, r9
 800676c:	f7f9 fd9c 	bl	80002a8 <__aeabi_dsub>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4606      	mov	r6, r0
 8006776:	460f      	mov	r7, r1
 8006778:	4640      	mov	r0, r8
 800677a:	4649      	mov	r1, r9
 800677c:	f7f9 fd94 	bl	80002a8 <__aeabi_dsub>
 8006780:	4622      	mov	r2, r4
 8006782:	462b      	mov	r3, r5
 8006784:	f7f9 fd90 	bl	80002a8 <__aeabi_dsub>
 8006788:	a31b      	add	r3, pc, #108	; (adr r3, 80067f8 <__ieee754_rem_pio2+0x330>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	4604      	mov	r4, r0
 8006790:	460d      	mov	r5, r1
 8006792:	ec51 0b18 	vmov	r0, r1, d8
 8006796:	f7f9 ff3f 	bl	8000618 <__aeabi_dmul>
 800679a:	4622      	mov	r2, r4
 800679c:	462b      	mov	r3, r5
 800679e:	f7f9 fd83 	bl	80002a8 <__aeabi_dsub>
 80067a2:	4604      	mov	r4, r0
 80067a4:	460d      	mov	r5, r1
 80067a6:	e75f      	b.n	8006668 <__ieee754_rem_pio2+0x1a0>
 80067a8:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <__ieee754_rem_pio2+0x350>)
 80067aa:	4598      	cmp	r8, r3
 80067ac:	dd36      	ble.n	800681c <__ieee754_rem_pio2+0x354>
 80067ae:	ee10 2a10 	vmov	r2, s0
 80067b2:	462b      	mov	r3, r5
 80067b4:	4620      	mov	r0, r4
 80067b6:	4629      	mov	r1, r5
 80067b8:	f7f9 fd76 	bl	80002a8 <__aeabi_dsub>
 80067bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80067c0:	e9ca 0100 	strd	r0, r1, [sl]
 80067c4:	e694      	b.n	80064f0 <__ieee754_rem_pio2+0x28>
 80067c6:	bf00      	nop
 80067c8:	54400000 	.word	0x54400000
 80067cc:	3ff921fb 	.word	0x3ff921fb
 80067d0:	1a626331 	.word	0x1a626331
 80067d4:	3dd0b461 	.word	0x3dd0b461
 80067d8:	1a600000 	.word	0x1a600000
 80067dc:	3dd0b461 	.word	0x3dd0b461
 80067e0:	2e037073 	.word	0x2e037073
 80067e4:	3ba3198a 	.word	0x3ba3198a
 80067e8:	6dc9c883 	.word	0x6dc9c883
 80067ec:	3fe45f30 	.word	0x3fe45f30
 80067f0:	2e000000 	.word	0x2e000000
 80067f4:	3ba3198a 	.word	0x3ba3198a
 80067f8:	252049c1 	.word	0x252049c1
 80067fc:	397b839a 	.word	0x397b839a
 8006800:	3fe921fb 	.word	0x3fe921fb
 8006804:	4002d97b 	.word	0x4002d97b
 8006808:	3ff921fb 	.word	0x3ff921fb
 800680c:	413921fb 	.word	0x413921fb
 8006810:	3fe00000 	.word	0x3fe00000
 8006814:	08007780 	.word	0x08007780
 8006818:	7fefffff 	.word	0x7fefffff
 800681c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006820:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006824:	ee10 0a10 	vmov	r0, s0
 8006828:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800682c:	ee10 6a10 	vmov	r6, s0
 8006830:	460f      	mov	r7, r1
 8006832:	f7fa f98b 	bl	8000b4c <__aeabi_d2iz>
 8006836:	f7f9 fe85 	bl	8000544 <__aeabi_i2d>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4630      	mov	r0, r6
 8006840:	4639      	mov	r1, r7
 8006842:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006846:	f7f9 fd2f 	bl	80002a8 <__aeabi_dsub>
 800684a:	4b23      	ldr	r3, [pc, #140]	; (80068d8 <__ieee754_rem_pio2+0x410>)
 800684c:	2200      	movs	r2, #0
 800684e:	f7f9 fee3 	bl	8000618 <__aeabi_dmul>
 8006852:	460f      	mov	r7, r1
 8006854:	4606      	mov	r6, r0
 8006856:	f7fa f979 	bl	8000b4c <__aeabi_d2iz>
 800685a:	f7f9 fe73 	bl	8000544 <__aeabi_i2d>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4630      	mov	r0, r6
 8006864:	4639      	mov	r1, r7
 8006866:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800686a:	f7f9 fd1d 	bl	80002a8 <__aeabi_dsub>
 800686e:	4b1a      	ldr	r3, [pc, #104]	; (80068d8 <__ieee754_rem_pio2+0x410>)
 8006870:	2200      	movs	r2, #0
 8006872:	f7f9 fed1 	bl	8000618 <__aeabi_dmul>
 8006876:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800687a:	ad04      	add	r5, sp, #16
 800687c:	f04f 0803 	mov.w	r8, #3
 8006880:	46a9      	mov	r9, r5
 8006882:	2600      	movs	r6, #0
 8006884:	2700      	movs	r7, #0
 8006886:	4632      	mov	r2, r6
 8006888:	463b      	mov	r3, r7
 800688a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800688e:	46c3      	mov	fp, r8
 8006890:	3d08      	subs	r5, #8
 8006892:	f108 38ff 	add.w	r8, r8, #4294967295
 8006896:	f7fa f927 	bl	8000ae8 <__aeabi_dcmpeq>
 800689a:	2800      	cmp	r0, #0
 800689c:	d1f3      	bne.n	8006886 <__ieee754_rem_pio2+0x3be>
 800689e:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <__ieee754_rem_pio2+0x414>)
 80068a0:	9301      	str	r3, [sp, #4]
 80068a2:	2302      	movs	r3, #2
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4622      	mov	r2, r4
 80068a8:	465b      	mov	r3, fp
 80068aa:	4651      	mov	r1, sl
 80068ac:	4648      	mov	r0, r9
 80068ae:	f000 f8df 	bl	8006a70 <__kernel_rem_pio2>
 80068b2:	9b02      	ldr	r3, [sp, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	4683      	mov	fp, r0
 80068b8:	f6bf ae46 	bge.w	8006548 <__ieee754_rem_pio2+0x80>
 80068bc:	e9da 2100 	ldrd	r2, r1, [sl]
 80068c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068c4:	e9ca 2300 	strd	r2, r3, [sl]
 80068c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80068cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80068d4:	e73a      	b.n	800674c <__ieee754_rem_pio2+0x284>
 80068d6:	bf00      	nop
 80068d8:	41700000 	.word	0x41700000
 80068dc:	08007800 	.word	0x08007800

080068e0 <__kernel_cos>:
 80068e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	ec57 6b10 	vmov	r6, r7, d0
 80068e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80068ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80068f0:	ed8d 1b00 	vstr	d1, [sp]
 80068f4:	da07      	bge.n	8006906 <__kernel_cos+0x26>
 80068f6:	ee10 0a10 	vmov	r0, s0
 80068fa:	4639      	mov	r1, r7
 80068fc:	f7fa f926 	bl	8000b4c <__aeabi_d2iz>
 8006900:	2800      	cmp	r0, #0
 8006902:	f000 8088 	beq.w	8006a16 <__kernel_cos+0x136>
 8006906:	4632      	mov	r2, r6
 8006908:	463b      	mov	r3, r7
 800690a:	4630      	mov	r0, r6
 800690c:	4639      	mov	r1, r7
 800690e:	f7f9 fe83 	bl	8000618 <__aeabi_dmul>
 8006912:	4b51      	ldr	r3, [pc, #324]	; (8006a58 <__kernel_cos+0x178>)
 8006914:	2200      	movs	r2, #0
 8006916:	4604      	mov	r4, r0
 8006918:	460d      	mov	r5, r1
 800691a:	f7f9 fe7d 	bl	8000618 <__aeabi_dmul>
 800691e:	a340      	add	r3, pc, #256	; (adr r3, 8006a20 <__kernel_cos+0x140>)
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	4682      	mov	sl, r0
 8006926:	468b      	mov	fp, r1
 8006928:	4620      	mov	r0, r4
 800692a:	4629      	mov	r1, r5
 800692c:	f7f9 fe74 	bl	8000618 <__aeabi_dmul>
 8006930:	a33d      	add	r3, pc, #244	; (adr r3, 8006a28 <__kernel_cos+0x148>)
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f7f9 fcb9 	bl	80002ac <__adddf3>
 800693a:	4622      	mov	r2, r4
 800693c:	462b      	mov	r3, r5
 800693e:	f7f9 fe6b 	bl	8000618 <__aeabi_dmul>
 8006942:	a33b      	add	r3, pc, #236	; (adr r3, 8006a30 <__kernel_cos+0x150>)
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	f7f9 fcae 	bl	80002a8 <__aeabi_dsub>
 800694c:	4622      	mov	r2, r4
 800694e:	462b      	mov	r3, r5
 8006950:	f7f9 fe62 	bl	8000618 <__aeabi_dmul>
 8006954:	a338      	add	r3, pc, #224	; (adr r3, 8006a38 <__kernel_cos+0x158>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f7f9 fca7 	bl	80002ac <__adddf3>
 800695e:	4622      	mov	r2, r4
 8006960:	462b      	mov	r3, r5
 8006962:	f7f9 fe59 	bl	8000618 <__aeabi_dmul>
 8006966:	a336      	add	r3, pc, #216	; (adr r3, 8006a40 <__kernel_cos+0x160>)
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f7f9 fc9c 	bl	80002a8 <__aeabi_dsub>
 8006970:	4622      	mov	r2, r4
 8006972:	462b      	mov	r3, r5
 8006974:	f7f9 fe50 	bl	8000618 <__aeabi_dmul>
 8006978:	a333      	add	r3, pc, #204	; (adr r3, 8006a48 <__kernel_cos+0x168>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7f9 fc95 	bl	80002ac <__adddf3>
 8006982:	4622      	mov	r2, r4
 8006984:	462b      	mov	r3, r5
 8006986:	f7f9 fe47 	bl	8000618 <__aeabi_dmul>
 800698a:	4622      	mov	r2, r4
 800698c:	462b      	mov	r3, r5
 800698e:	f7f9 fe43 	bl	8000618 <__aeabi_dmul>
 8006992:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006996:	4604      	mov	r4, r0
 8006998:	460d      	mov	r5, r1
 800699a:	4630      	mov	r0, r6
 800699c:	4639      	mov	r1, r7
 800699e:	f7f9 fe3b 	bl	8000618 <__aeabi_dmul>
 80069a2:	460b      	mov	r3, r1
 80069a4:	4602      	mov	r2, r0
 80069a6:	4629      	mov	r1, r5
 80069a8:	4620      	mov	r0, r4
 80069aa:	f7f9 fc7d 	bl	80002a8 <__aeabi_dsub>
 80069ae:	4b2b      	ldr	r3, [pc, #172]	; (8006a5c <__kernel_cos+0x17c>)
 80069b0:	4598      	cmp	r8, r3
 80069b2:	4606      	mov	r6, r0
 80069b4:	460f      	mov	r7, r1
 80069b6:	dc10      	bgt.n	80069da <__kernel_cos+0xfa>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4650      	mov	r0, sl
 80069be:	4659      	mov	r1, fp
 80069c0:	f7f9 fc72 	bl	80002a8 <__aeabi_dsub>
 80069c4:	460b      	mov	r3, r1
 80069c6:	4926      	ldr	r1, [pc, #152]	; (8006a60 <__kernel_cos+0x180>)
 80069c8:	4602      	mov	r2, r0
 80069ca:	2000      	movs	r0, #0
 80069cc:	f7f9 fc6c 	bl	80002a8 <__aeabi_dsub>
 80069d0:	ec41 0b10 	vmov	d0, r0, r1
 80069d4:	b003      	add	sp, #12
 80069d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069da:	4b22      	ldr	r3, [pc, #136]	; (8006a64 <__kernel_cos+0x184>)
 80069dc:	4920      	ldr	r1, [pc, #128]	; (8006a60 <__kernel_cos+0x180>)
 80069de:	4598      	cmp	r8, r3
 80069e0:	bfcc      	ite	gt
 80069e2:	4d21      	ldrgt	r5, [pc, #132]	; (8006a68 <__kernel_cos+0x188>)
 80069e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80069e8:	2400      	movs	r4, #0
 80069ea:	4622      	mov	r2, r4
 80069ec:	462b      	mov	r3, r5
 80069ee:	2000      	movs	r0, #0
 80069f0:	f7f9 fc5a 	bl	80002a8 <__aeabi_dsub>
 80069f4:	4622      	mov	r2, r4
 80069f6:	4680      	mov	r8, r0
 80069f8:	4689      	mov	r9, r1
 80069fa:	462b      	mov	r3, r5
 80069fc:	4650      	mov	r0, sl
 80069fe:	4659      	mov	r1, fp
 8006a00:	f7f9 fc52 	bl	80002a8 <__aeabi_dsub>
 8006a04:	4632      	mov	r2, r6
 8006a06:	463b      	mov	r3, r7
 8006a08:	f7f9 fc4e 	bl	80002a8 <__aeabi_dsub>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4640      	mov	r0, r8
 8006a12:	4649      	mov	r1, r9
 8006a14:	e7da      	b.n	80069cc <__kernel_cos+0xec>
 8006a16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006a50 <__kernel_cos+0x170>
 8006a1a:	e7db      	b.n	80069d4 <__kernel_cos+0xf4>
 8006a1c:	f3af 8000 	nop.w
 8006a20:	be8838d4 	.word	0xbe8838d4
 8006a24:	bda8fae9 	.word	0xbda8fae9
 8006a28:	bdb4b1c4 	.word	0xbdb4b1c4
 8006a2c:	3e21ee9e 	.word	0x3e21ee9e
 8006a30:	809c52ad 	.word	0x809c52ad
 8006a34:	3e927e4f 	.word	0x3e927e4f
 8006a38:	19cb1590 	.word	0x19cb1590
 8006a3c:	3efa01a0 	.word	0x3efa01a0
 8006a40:	16c15177 	.word	0x16c15177
 8006a44:	3f56c16c 	.word	0x3f56c16c
 8006a48:	5555554c 	.word	0x5555554c
 8006a4c:	3fa55555 	.word	0x3fa55555
 8006a50:	00000000 	.word	0x00000000
 8006a54:	3ff00000 	.word	0x3ff00000
 8006a58:	3fe00000 	.word	0x3fe00000
 8006a5c:	3fd33332 	.word	0x3fd33332
 8006a60:	3ff00000 	.word	0x3ff00000
 8006a64:	3fe90000 	.word	0x3fe90000
 8006a68:	3fd20000 	.word	0x3fd20000
 8006a6c:	00000000 	.word	0x00000000

08006a70 <__kernel_rem_pio2>:
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	ed2d 8b02 	vpush	{d8}
 8006a78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006a7c:	f112 0f14 	cmn.w	r2, #20
 8006a80:	9308      	str	r3, [sp, #32]
 8006a82:	9101      	str	r1, [sp, #4]
 8006a84:	4bc4      	ldr	r3, [pc, #784]	; (8006d98 <__kernel_rem_pio2+0x328>)
 8006a86:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006a88:	900b      	str	r0, [sp, #44]	; 0x2c
 8006a8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a8e:	9302      	str	r3, [sp, #8]
 8006a90:	9b08      	ldr	r3, [sp, #32]
 8006a92:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a96:	bfa8      	it	ge
 8006a98:	1ed4      	subge	r4, r2, #3
 8006a9a:	9306      	str	r3, [sp, #24]
 8006a9c:	bfb2      	itee	lt
 8006a9e:	2400      	movlt	r4, #0
 8006aa0:	2318      	movge	r3, #24
 8006aa2:	fb94 f4f3 	sdivge	r4, r4, r3
 8006aa6:	f06f 0317 	mvn.w	r3, #23
 8006aaa:	fb04 3303 	mla	r3, r4, r3, r3
 8006aae:	eb03 0a02 	add.w	sl, r3, r2
 8006ab2:	9b02      	ldr	r3, [sp, #8]
 8006ab4:	9a06      	ldr	r2, [sp, #24]
 8006ab6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006d88 <__kernel_rem_pio2+0x318>
 8006aba:	eb03 0802 	add.w	r8, r3, r2
 8006abe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006ac0:	1aa7      	subs	r7, r4, r2
 8006ac2:	ae22      	add	r6, sp, #136	; 0x88
 8006ac4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006ac8:	2500      	movs	r5, #0
 8006aca:	4545      	cmp	r5, r8
 8006acc:	dd13      	ble.n	8006af6 <__kernel_rem_pio2+0x86>
 8006ace:	9b08      	ldr	r3, [sp, #32]
 8006ad0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006d88 <__kernel_rem_pio2+0x318>
 8006ad4:	aa22      	add	r2, sp, #136	; 0x88
 8006ad6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006ada:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006ade:	f04f 0800 	mov.w	r8, #0
 8006ae2:	9b02      	ldr	r3, [sp, #8]
 8006ae4:	4598      	cmp	r8, r3
 8006ae6:	dc2f      	bgt.n	8006b48 <__kernel_rem_pio2+0xd8>
 8006ae8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006aec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006af0:	462f      	mov	r7, r5
 8006af2:	2600      	movs	r6, #0
 8006af4:	e01b      	b.n	8006b2e <__kernel_rem_pio2+0xbe>
 8006af6:	42ef      	cmn	r7, r5
 8006af8:	d407      	bmi.n	8006b0a <__kernel_rem_pio2+0x9a>
 8006afa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006afe:	f7f9 fd21 	bl	8000544 <__aeabi_i2d>
 8006b02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006b06:	3501      	adds	r5, #1
 8006b08:	e7df      	b.n	8006aca <__kernel_rem_pio2+0x5a>
 8006b0a:	ec51 0b18 	vmov	r0, r1, d8
 8006b0e:	e7f8      	b.n	8006b02 <__kernel_rem_pio2+0x92>
 8006b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006b18:	f7f9 fd7e 	bl	8000618 <__aeabi_dmul>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b24:	f7f9 fbc2 	bl	80002ac <__adddf3>
 8006b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b2c:	3601      	adds	r6, #1
 8006b2e:	9b06      	ldr	r3, [sp, #24]
 8006b30:	429e      	cmp	r6, r3
 8006b32:	f1a7 0708 	sub.w	r7, r7, #8
 8006b36:	ddeb      	ble.n	8006b10 <__kernel_rem_pio2+0xa0>
 8006b38:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006b3c:	f108 0801 	add.w	r8, r8, #1
 8006b40:	ecab 7b02 	vstmia	fp!, {d7}
 8006b44:	3508      	adds	r5, #8
 8006b46:	e7cc      	b.n	8006ae2 <__kernel_rem_pio2+0x72>
 8006b48:	9b02      	ldr	r3, [sp, #8]
 8006b4a:	aa0e      	add	r2, sp, #56	; 0x38
 8006b4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b50:	930d      	str	r3, [sp, #52]	; 0x34
 8006b52:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006b54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006b58:	9c02      	ldr	r4, [sp, #8]
 8006b5a:	930c      	str	r3, [sp, #48]	; 0x30
 8006b5c:	00e3      	lsls	r3, r4, #3
 8006b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b60:	ab9a      	add	r3, sp, #616	; 0x268
 8006b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006b6a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006b6e:	ab72      	add	r3, sp, #456	; 0x1c8
 8006b70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006b74:	46c3      	mov	fp, r8
 8006b76:	46a1      	mov	r9, r4
 8006b78:	f1b9 0f00 	cmp.w	r9, #0
 8006b7c:	f1a5 0508 	sub.w	r5, r5, #8
 8006b80:	dc77      	bgt.n	8006c72 <__kernel_rem_pio2+0x202>
 8006b82:	ec47 6b10 	vmov	d0, r6, r7
 8006b86:	4650      	mov	r0, sl
 8006b88:	f000 fc0a 	bl	80073a0 <scalbn>
 8006b8c:	ec57 6b10 	vmov	r6, r7, d0
 8006b90:	2200      	movs	r2, #0
 8006b92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006b96:	ee10 0a10 	vmov	r0, s0
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	f7f9 fd3c 	bl	8000618 <__aeabi_dmul>
 8006ba0:	ec41 0b10 	vmov	d0, r0, r1
 8006ba4:	f000 fb7c 	bl	80072a0 <floor>
 8006ba8:	4b7c      	ldr	r3, [pc, #496]	; (8006d9c <__kernel_rem_pio2+0x32c>)
 8006baa:	ec51 0b10 	vmov	r0, r1, d0
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f7f9 fd32 	bl	8000618 <__aeabi_dmul>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4630      	mov	r0, r6
 8006bba:	4639      	mov	r1, r7
 8006bbc:	f7f9 fb74 	bl	80002a8 <__aeabi_dsub>
 8006bc0:	460f      	mov	r7, r1
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	f7f9 ffc2 	bl	8000b4c <__aeabi_d2iz>
 8006bc8:	9004      	str	r0, [sp, #16]
 8006bca:	f7f9 fcbb 	bl	8000544 <__aeabi_i2d>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	f7f9 fb67 	bl	80002a8 <__aeabi_dsub>
 8006bda:	f1ba 0f00 	cmp.w	sl, #0
 8006bde:	4606      	mov	r6, r0
 8006be0:	460f      	mov	r7, r1
 8006be2:	dd6d      	ble.n	8006cc0 <__kernel_rem_pio2+0x250>
 8006be4:	1e62      	subs	r2, r4, #1
 8006be6:	ab0e      	add	r3, sp, #56	; 0x38
 8006be8:	9d04      	ldr	r5, [sp, #16]
 8006bea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006bee:	f1ca 0118 	rsb	r1, sl, #24
 8006bf2:	fa40 f301 	asr.w	r3, r0, r1
 8006bf6:	441d      	add	r5, r3
 8006bf8:	408b      	lsls	r3, r1
 8006bfa:	1ac0      	subs	r0, r0, r3
 8006bfc:	ab0e      	add	r3, sp, #56	; 0x38
 8006bfe:	9504      	str	r5, [sp, #16]
 8006c00:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006c04:	f1ca 0317 	rsb	r3, sl, #23
 8006c08:	fa40 fb03 	asr.w	fp, r0, r3
 8006c0c:	f1bb 0f00 	cmp.w	fp, #0
 8006c10:	dd65      	ble.n	8006cde <__kernel_rem_pio2+0x26e>
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	2200      	movs	r2, #0
 8006c16:	3301      	adds	r3, #1
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	4615      	mov	r5, r2
 8006c1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006c20:	4294      	cmp	r4, r2
 8006c22:	f300 809c 	bgt.w	8006d5e <__kernel_rem_pio2+0x2ee>
 8006c26:	f1ba 0f00 	cmp.w	sl, #0
 8006c2a:	dd07      	ble.n	8006c3c <__kernel_rem_pio2+0x1cc>
 8006c2c:	f1ba 0f01 	cmp.w	sl, #1
 8006c30:	f000 80c0 	beq.w	8006db4 <__kernel_rem_pio2+0x344>
 8006c34:	f1ba 0f02 	cmp.w	sl, #2
 8006c38:	f000 80c6 	beq.w	8006dc8 <__kernel_rem_pio2+0x358>
 8006c3c:	f1bb 0f02 	cmp.w	fp, #2
 8006c40:	d14d      	bne.n	8006cde <__kernel_rem_pio2+0x26e>
 8006c42:	4632      	mov	r2, r6
 8006c44:	463b      	mov	r3, r7
 8006c46:	4956      	ldr	r1, [pc, #344]	; (8006da0 <__kernel_rem_pio2+0x330>)
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f7f9 fb2d 	bl	80002a8 <__aeabi_dsub>
 8006c4e:	4606      	mov	r6, r0
 8006c50:	460f      	mov	r7, r1
 8006c52:	2d00      	cmp	r5, #0
 8006c54:	d043      	beq.n	8006cde <__kernel_rem_pio2+0x26e>
 8006c56:	4650      	mov	r0, sl
 8006c58:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006d90 <__kernel_rem_pio2+0x320>
 8006c5c:	f000 fba0 	bl	80073a0 <scalbn>
 8006c60:	4630      	mov	r0, r6
 8006c62:	4639      	mov	r1, r7
 8006c64:	ec53 2b10 	vmov	r2, r3, d0
 8006c68:	f7f9 fb1e 	bl	80002a8 <__aeabi_dsub>
 8006c6c:	4606      	mov	r6, r0
 8006c6e:	460f      	mov	r7, r1
 8006c70:	e035      	b.n	8006cde <__kernel_rem_pio2+0x26e>
 8006c72:	4b4c      	ldr	r3, [pc, #304]	; (8006da4 <__kernel_rem_pio2+0x334>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	4630      	mov	r0, r6
 8006c78:	4639      	mov	r1, r7
 8006c7a:	f7f9 fccd 	bl	8000618 <__aeabi_dmul>
 8006c7e:	f7f9 ff65 	bl	8000b4c <__aeabi_d2iz>
 8006c82:	f7f9 fc5f 	bl	8000544 <__aeabi_i2d>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	ec43 2b18 	vmov	d8, r2, r3
 8006c8e:	4b46      	ldr	r3, [pc, #280]	; (8006da8 <__kernel_rem_pio2+0x338>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	f7f9 fcc1 	bl	8000618 <__aeabi_dmul>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 fb03 	bl	80002a8 <__aeabi_dsub>
 8006ca2:	f7f9 ff53 	bl	8000b4c <__aeabi_d2iz>
 8006ca6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006caa:	f84b 0b04 	str.w	r0, [fp], #4
 8006cae:	ec51 0b18 	vmov	r0, r1, d8
 8006cb2:	f7f9 fafb 	bl	80002ac <__adddf3>
 8006cb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8006cba:	4606      	mov	r6, r0
 8006cbc:	460f      	mov	r7, r1
 8006cbe:	e75b      	b.n	8006b78 <__kernel_rem_pio2+0x108>
 8006cc0:	d106      	bne.n	8006cd0 <__kernel_rem_pio2+0x260>
 8006cc2:	1e63      	subs	r3, r4, #1
 8006cc4:	aa0e      	add	r2, sp, #56	; 0x38
 8006cc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006cca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006cce:	e79d      	b.n	8006c0c <__kernel_rem_pio2+0x19c>
 8006cd0:	4b36      	ldr	r3, [pc, #216]	; (8006dac <__kernel_rem_pio2+0x33c>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f7f9 ff26 	bl	8000b24 <__aeabi_dcmpge>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d13d      	bne.n	8006d58 <__kernel_rem_pio2+0x2e8>
 8006cdc:	4683      	mov	fp, r0
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	f7f9 feff 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	f000 80c0 	beq.w	8006e70 <__kernel_rem_pio2+0x400>
 8006cf0:	1e65      	subs	r5, r4, #1
 8006cf2:	462b      	mov	r3, r5
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	9902      	ldr	r1, [sp, #8]
 8006cf8:	428b      	cmp	r3, r1
 8006cfa:	da6c      	bge.n	8006dd6 <__kernel_rem_pio2+0x366>
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	f000 8089 	beq.w	8006e14 <__kernel_rem_pio2+0x3a4>
 8006d02:	ab0e      	add	r3, sp, #56	; 0x38
 8006d04:	f1aa 0a18 	sub.w	sl, sl, #24
 8006d08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80ad 	beq.w	8006e6c <__kernel_rem_pio2+0x3fc>
 8006d12:	4650      	mov	r0, sl
 8006d14:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006d90 <__kernel_rem_pio2+0x320>
 8006d18:	f000 fb42 	bl	80073a0 <scalbn>
 8006d1c:	ab9a      	add	r3, sp, #616	; 0x268
 8006d1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006d22:	ec57 6b10 	vmov	r6, r7, d0
 8006d26:	00ec      	lsls	r4, r5, #3
 8006d28:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006d2c:	46aa      	mov	sl, r5
 8006d2e:	f1ba 0f00 	cmp.w	sl, #0
 8006d32:	f280 80d6 	bge.w	8006ee2 <__kernel_rem_pio2+0x472>
 8006d36:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006d88 <__kernel_rem_pio2+0x318>
 8006d3a:	462e      	mov	r6, r5
 8006d3c:	2e00      	cmp	r6, #0
 8006d3e:	f2c0 8104 	blt.w	8006f4a <__kernel_rem_pio2+0x4da>
 8006d42:	ab72      	add	r3, sp, #456	; 0x1c8
 8006d44:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006d48:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006db0 <__kernel_rem_pio2+0x340>
 8006d4c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006d50:	f04f 0800 	mov.w	r8, #0
 8006d54:	1baf      	subs	r7, r5, r6
 8006d56:	e0ea      	b.n	8006f2e <__kernel_rem_pio2+0x4be>
 8006d58:	f04f 0b02 	mov.w	fp, #2
 8006d5c:	e759      	b.n	8006c12 <__kernel_rem_pio2+0x1a2>
 8006d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d62:	b955      	cbnz	r5, 8006d7a <__kernel_rem_pio2+0x30a>
 8006d64:	b123      	cbz	r3, 8006d70 <__kernel_rem_pio2+0x300>
 8006d66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006d6a:	f8c8 3000 	str.w	r3, [r8]
 8006d6e:	2301      	movs	r3, #1
 8006d70:	3201      	adds	r2, #1
 8006d72:	f108 0804 	add.w	r8, r8, #4
 8006d76:	461d      	mov	r5, r3
 8006d78:	e752      	b.n	8006c20 <__kernel_rem_pio2+0x1b0>
 8006d7a:	1acb      	subs	r3, r1, r3
 8006d7c:	f8c8 3000 	str.w	r3, [r8]
 8006d80:	462b      	mov	r3, r5
 8006d82:	e7f5      	b.n	8006d70 <__kernel_rem_pio2+0x300>
 8006d84:	f3af 8000 	nop.w
	...
 8006d94:	3ff00000 	.word	0x3ff00000
 8006d98:	08007948 	.word	0x08007948
 8006d9c:	40200000 	.word	0x40200000
 8006da0:	3ff00000 	.word	0x3ff00000
 8006da4:	3e700000 	.word	0x3e700000
 8006da8:	41700000 	.word	0x41700000
 8006dac:	3fe00000 	.word	0x3fe00000
 8006db0:	08007908 	.word	0x08007908
 8006db4:	1e62      	subs	r2, r4, #1
 8006db6:	ab0e      	add	r3, sp, #56	; 0x38
 8006db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006dc0:	a90e      	add	r1, sp, #56	; 0x38
 8006dc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006dc6:	e739      	b.n	8006c3c <__kernel_rem_pio2+0x1cc>
 8006dc8:	1e62      	subs	r2, r4, #1
 8006dca:	ab0e      	add	r3, sp, #56	; 0x38
 8006dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006dd4:	e7f4      	b.n	8006dc0 <__kernel_rem_pio2+0x350>
 8006dd6:	a90e      	add	r1, sp, #56	; 0x38
 8006dd8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	430a      	orrs	r2, r1
 8006de0:	e789      	b.n	8006cf6 <__kernel_rem_pio2+0x286>
 8006de2:	3301      	adds	r3, #1
 8006de4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006de8:	2900      	cmp	r1, #0
 8006dea:	d0fa      	beq.n	8006de2 <__kernel_rem_pio2+0x372>
 8006dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006df2:	446a      	add	r2, sp
 8006df4:	3a98      	subs	r2, #152	; 0x98
 8006df6:	920a      	str	r2, [sp, #40]	; 0x28
 8006df8:	9a08      	ldr	r2, [sp, #32]
 8006dfa:	18e3      	adds	r3, r4, r3
 8006dfc:	18a5      	adds	r5, r4, r2
 8006dfe:	aa22      	add	r2, sp, #136	; 0x88
 8006e00:	f104 0801 	add.w	r8, r4, #1
 8006e04:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	9b04      	ldr	r3, [sp, #16]
 8006e0c:	4543      	cmp	r3, r8
 8006e0e:	da04      	bge.n	8006e1a <__kernel_rem_pio2+0x3aa>
 8006e10:	461c      	mov	r4, r3
 8006e12:	e6a3      	b.n	8006b5c <__kernel_rem_pio2+0xec>
 8006e14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e16:	2301      	movs	r3, #1
 8006e18:	e7e4      	b.n	8006de4 <__kernel_rem_pio2+0x374>
 8006e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006e20:	f7f9 fb90 	bl	8000544 <__aeabi_i2d>
 8006e24:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e2a:	46ab      	mov	fp, r5
 8006e2c:	461c      	mov	r4, r3
 8006e2e:	f04f 0900 	mov.w	r9, #0
 8006e32:	2600      	movs	r6, #0
 8006e34:	2700      	movs	r7, #0
 8006e36:	9b06      	ldr	r3, [sp, #24]
 8006e38:	4599      	cmp	r9, r3
 8006e3a:	dd06      	ble.n	8006e4a <__kernel_rem_pio2+0x3da>
 8006e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006e42:	f108 0801 	add.w	r8, r8, #1
 8006e46:	930a      	str	r3, [sp, #40]	; 0x28
 8006e48:	e7df      	b.n	8006e0a <__kernel_rem_pio2+0x39a>
 8006e4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006e4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006e52:	f7f9 fbe1 	bl	8000618 <__aeabi_dmul>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	f7f9 fa25 	bl	80002ac <__adddf3>
 8006e62:	f109 0901 	add.w	r9, r9, #1
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	e7e4      	b.n	8006e36 <__kernel_rem_pio2+0x3c6>
 8006e6c:	3d01      	subs	r5, #1
 8006e6e:	e748      	b.n	8006d02 <__kernel_rem_pio2+0x292>
 8006e70:	ec47 6b10 	vmov	d0, r6, r7
 8006e74:	f1ca 0000 	rsb	r0, sl, #0
 8006e78:	f000 fa92 	bl	80073a0 <scalbn>
 8006e7c:	ec57 6b10 	vmov	r6, r7, d0
 8006e80:	4ba0      	ldr	r3, [pc, #640]	; (8007104 <__kernel_rem_pio2+0x694>)
 8006e82:	ee10 0a10 	vmov	r0, s0
 8006e86:	2200      	movs	r2, #0
 8006e88:	4639      	mov	r1, r7
 8006e8a:	f7f9 fe4b 	bl	8000b24 <__aeabi_dcmpge>
 8006e8e:	b1f8      	cbz	r0, 8006ed0 <__kernel_rem_pio2+0x460>
 8006e90:	4b9d      	ldr	r3, [pc, #628]	; (8007108 <__kernel_rem_pio2+0x698>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	4630      	mov	r0, r6
 8006e96:	4639      	mov	r1, r7
 8006e98:	f7f9 fbbe 	bl	8000618 <__aeabi_dmul>
 8006e9c:	f7f9 fe56 	bl	8000b4c <__aeabi_d2iz>
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	f7f9 fb4f 	bl	8000544 <__aeabi_i2d>
 8006ea6:	4b97      	ldr	r3, [pc, #604]	; (8007104 <__kernel_rem_pio2+0x694>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f7f9 fbb5 	bl	8000618 <__aeabi_dmul>
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f7f9 f9f7 	bl	80002a8 <__aeabi_dsub>
 8006eba:	f7f9 fe47 	bl	8000b4c <__aeabi_d2iz>
 8006ebe:	1c65      	adds	r5, r4, #1
 8006ec0:	ab0e      	add	r3, sp, #56	; 0x38
 8006ec2:	f10a 0a18 	add.w	sl, sl, #24
 8006ec6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006eca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006ece:	e720      	b.n	8006d12 <__kernel_rem_pio2+0x2a2>
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	4639      	mov	r1, r7
 8006ed4:	f7f9 fe3a 	bl	8000b4c <__aeabi_d2iz>
 8006ed8:	ab0e      	add	r3, sp, #56	; 0x38
 8006eda:	4625      	mov	r5, r4
 8006edc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006ee0:	e717      	b.n	8006d12 <__kernel_rem_pio2+0x2a2>
 8006ee2:	ab0e      	add	r3, sp, #56	; 0x38
 8006ee4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006ee8:	f7f9 fb2c 	bl	8000544 <__aeabi_i2d>
 8006eec:	4632      	mov	r2, r6
 8006eee:	463b      	mov	r3, r7
 8006ef0:	f7f9 fb92 	bl	8000618 <__aeabi_dmul>
 8006ef4:	4b84      	ldr	r3, [pc, #528]	; (8007108 <__kernel_rem_pio2+0x698>)
 8006ef6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006efa:	2200      	movs	r2, #0
 8006efc:	4630      	mov	r0, r6
 8006efe:	4639      	mov	r1, r7
 8006f00:	f7f9 fb8a 	bl	8000618 <__aeabi_dmul>
 8006f04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f08:	4606      	mov	r6, r0
 8006f0a:	460f      	mov	r7, r1
 8006f0c:	e70f      	b.n	8006d2e <__kernel_rem_pio2+0x2be>
 8006f0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006f12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006f16:	f7f9 fb7f 	bl	8000618 <__aeabi_dmul>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f22:	f7f9 f9c3 	bl	80002ac <__adddf3>
 8006f26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f2a:	f108 0801 	add.w	r8, r8, #1
 8006f2e:	9b02      	ldr	r3, [sp, #8]
 8006f30:	4598      	cmp	r8, r3
 8006f32:	dc01      	bgt.n	8006f38 <__kernel_rem_pio2+0x4c8>
 8006f34:	45b8      	cmp	r8, r7
 8006f36:	ddea      	ble.n	8006f0e <__kernel_rem_pio2+0x49e>
 8006f38:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006f3c:	ab4a      	add	r3, sp, #296	; 0x128
 8006f3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006f42:	ed87 7b00 	vstr	d7, [r7]
 8006f46:	3e01      	subs	r6, #1
 8006f48:	e6f8      	b.n	8006d3c <__kernel_rem_pio2+0x2cc>
 8006f4a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	dc0b      	bgt.n	8006f68 <__kernel_rem_pio2+0x4f8>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	dc35      	bgt.n	8006fc0 <__kernel_rem_pio2+0x550>
 8006f54:	d059      	beq.n	800700a <__kernel_rem_pio2+0x59a>
 8006f56:	9b04      	ldr	r3, [sp, #16]
 8006f58:	f003 0007 	and.w	r0, r3, #7
 8006f5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006f60:	ecbd 8b02 	vpop	{d8}
 8006f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d1f3      	bne.n	8006f56 <__kernel_rem_pio2+0x4e6>
 8006f6e:	ab4a      	add	r3, sp, #296	; 0x128
 8006f70:	4423      	add	r3, r4
 8006f72:	9306      	str	r3, [sp, #24]
 8006f74:	461c      	mov	r4, r3
 8006f76:	469a      	mov	sl, r3
 8006f78:	9502      	str	r5, [sp, #8]
 8006f7a:	9b02      	ldr	r3, [sp, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f1aa 0a08 	sub.w	sl, sl, #8
 8006f82:	dc6b      	bgt.n	800705c <__kernel_rem_pio2+0x5ec>
 8006f84:	46aa      	mov	sl, r5
 8006f86:	f1ba 0f01 	cmp.w	sl, #1
 8006f8a:	f1a4 0408 	sub.w	r4, r4, #8
 8006f8e:	f300 8085 	bgt.w	800709c <__kernel_rem_pio2+0x62c>
 8006f92:	9c06      	ldr	r4, [sp, #24]
 8006f94:	2000      	movs	r0, #0
 8006f96:	3408      	adds	r4, #8
 8006f98:	2100      	movs	r1, #0
 8006f9a:	2d01      	cmp	r5, #1
 8006f9c:	f300 809d 	bgt.w	80070da <__kernel_rem_pio2+0x66a>
 8006fa0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006fa4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006fa8:	f1bb 0f00 	cmp.w	fp, #0
 8006fac:	f040 809b 	bne.w	80070e6 <__kernel_rem_pio2+0x676>
 8006fb0:	9b01      	ldr	r3, [sp, #4]
 8006fb2:	e9c3 5600 	strd	r5, r6, [r3]
 8006fb6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006fba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006fbe:	e7ca      	b.n	8006f56 <__kernel_rem_pio2+0x4e6>
 8006fc0:	3408      	adds	r4, #8
 8006fc2:	ab4a      	add	r3, sp, #296	; 0x128
 8006fc4:	441c      	add	r4, r3
 8006fc6:	462e      	mov	r6, r5
 8006fc8:	2000      	movs	r0, #0
 8006fca:	2100      	movs	r1, #0
 8006fcc:	2e00      	cmp	r6, #0
 8006fce:	da36      	bge.n	800703e <__kernel_rem_pio2+0x5ce>
 8006fd0:	f1bb 0f00 	cmp.w	fp, #0
 8006fd4:	d039      	beq.n	800704a <__kernel_rem_pio2+0x5da>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fdc:	9c01      	ldr	r4, [sp, #4]
 8006fde:	e9c4 2300 	strd	r2, r3, [r4]
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006fea:	f7f9 f95d 	bl	80002a8 <__aeabi_dsub>
 8006fee:	ae4c      	add	r6, sp, #304	; 0x130
 8006ff0:	2401      	movs	r4, #1
 8006ff2:	42a5      	cmp	r5, r4
 8006ff4:	da2c      	bge.n	8007050 <__kernel_rem_pio2+0x5e0>
 8006ff6:	f1bb 0f00 	cmp.w	fp, #0
 8006ffa:	d002      	beq.n	8007002 <__kernel_rem_pio2+0x592>
 8006ffc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007000:	4619      	mov	r1, r3
 8007002:	9b01      	ldr	r3, [sp, #4]
 8007004:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007008:	e7a5      	b.n	8006f56 <__kernel_rem_pio2+0x4e6>
 800700a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800700e:	eb0d 0403 	add.w	r4, sp, r3
 8007012:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007016:	2000      	movs	r0, #0
 8007018:	2100      	movs	r1, #0
 800701a:	2d00      	cmp	r5, #0
 800701c:	da09      	bge.n	8007032 <__kernel_rem_pio2+0x5c2>
 800701e:	f1bb 0f00 	cmp.w	fp, #0
 8007022:	d002      	beq.n	800702a <__kernel_rem_pio2+0x5ba>
 8007024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007028:	4619      	mov	r1, r3
 800702a:	9b01      	ldr	r3, [sp, #4]
 800702c:	e9c3 0100 	strd	r0, r1, [r3]
 8007030:	e791      	b.n	8006f56 <__kernel_rem_pio2+0x4e6>
 8007032:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007036:	f7f9 f939 	bl	80002ac <__adddf3>
 800703a:	3d01      	subs	r5, #1
 800703c:	e7ed      	b.n	800701a <__kernel_rem_pio2+0x5aa>
 800703e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007042:	f7f9 f933 	bl	80002ac <__adddf3>
 8007046:	3e01      	subs	r6, #1
 8007048:	e7c0      	b.n	8006fcc <__kernel_rem_pio2+0x55c>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	e7c5      	b.n	8006fdc <__kernel_rem_pio2+0x56c>
 8007050:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007054:	f7f9 f92a 	bl	80002ac <__adddf3>
 8007058:	3401      	adds	r4, #1
 800705a:	e7ca      	b.n	8006ff2 <__kernel_rem_pio2+0x582>
 800705c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007060:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007064:	9b02      	ldr	r3, [sp, #8]
 8007066:	3b01      	subs	r3, #1
 8007068:	9302      	str	r3, [sp, #8]
 800706a:	4632      	mov	r2, r6
 800706c:	463b      	mov	r3, r7
 800706e:	4640      	mov	r0, r8
 8007070:	4649      	mov	r1, r9
 8007072:	f7f9 f91b 	bl	80002ac <__adddf3>
 8007076:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	4640      	mov	r0, r8
 8007080:	4649      	mov	r1, r9
 8007082:	f7f9 f911 	bl	80002a8 <__aeabi_dsub>
 8007086:	4632      	mov	r2, r6
 8007088:	463b      	mov	r3, r7
 800708a:	f7f9 f90f 	bl	80002ac <__adddf3>
 800708e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007092:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007096:	ed8a 7b00 	vstr	d7, [sl]
 800709a:	e76e      	b.n	8006f7a <__kernel_rem_pio2+0x50a>
 800709c:	e9d4 8900 	ldrd	r8, r9, [r4]
 80070a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80070a4:	4640      	mov	r0, r8
 80070a6:	4632      	mov	r2, r6
 80070a8:	463b      	mov	r3, r7
 80070aa:	4649      	mov	r1, r9
 80070ac:	f7f9 f8fe 	bl	80002ac <__adddf3>
 80070b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4640      	mov	r0, r8
 80070ba:	4649      	mov	r1, r9
 80070bc:	f7f9 f8f4 	bl	80002a8 <__aeabi_dsub>
 80070c0:	4632      	mov	r2, r6
 80070c2:	463b      	mov	r3, r7
 80070c4:	f7f9 f8f2 	bl	80002ac <__adddf3>
 80070c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80070d0:	ed84 7b00 	vstr	d7, [r4]
 80070d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070d8:	e755      	b.n	8006f86 <__kernel_rem_pio2+0x516>
 80070da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80070de:	f7f9 f8e5 	bl	80002ac <__adddf3>
 80070e2:	3d01      	subs	r5, #1
 80070e4:	e759      	b.n	8006f9a <__kernel_rem_pio2+0x52a>
 80070e6:	9b01      	ldr	r3, [sp, #4]
 80070e8:	9a01      	ldr	r2, [sp, #4]
 80070ea:	601d      	str	r5, [r3, #0]
 80070ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80070f0:	605c      	str	r4, [r3, #4]
 80070f2:	609f      	str	r7, [r3, #8]
 80070f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80070f8:	60d3      	str	r3, [r2, #12]
 80070fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070fe:	6110      	str	r0, [r2, #16]
 8007100:	6153      	str	r3, [r2, #20]
 8007102:	e728      	b.n	8006f56 <__kernel_rem_pio2+0x4e6>
 8007104:	41700000 	.word	0x41700000
 8007108:	3e700000 	.word	0x3e700000
 800710c:	00000000 	.word	0x00000000

08007110 <__kernel_sin>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	ed2d 8b04 	vpush	{d8-d9}
 8007118:	eeb0 8a41 	vmov.f32	s16, s2
 800711c:	eef0 8a61 	vmov.f32	s17, s3
 8007120:	ec55 4b10 	vmov	r4, r5, d0
 8007124:	b083      	sub	sp, #12
 8007126:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800712a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800712e:	9001      	str	r0, [sp, #4]
 8007130:	da06      	bge.n	8007140 <__kernel_sin+0x30>
 8007132:	ee10 0a10 	vmov	r0, s0
 8007136:	4629      	mov	r1, r5
 8007138:	f7f9 fd08 	bl	8000b4c <__aeabi_d2iz>
 800713c:	2800      	cmp	r0, #0
 800713e:	d051      	beq.n	80071e4 <__kernel_sin+0xd4>
 8007140:	4622      	mov	r2, r4
 8007142:	462b      	mov	r3, r5
 8007144:	4620      	mov	r0, r4
 8007146:	4629      	mov	r1, r5
 8007148:	f7f9 fa66 	bl	8000618 <__aeabi_dmul>
 800714c:	4682      	mov	sl, r0
 800714e:	468b      	mov	fp, r1
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4620      	mov	r0, r4
 8007156:	4629      	mov	r1, r5
 8007158:	f7f9 fa5e 	bl	8000618 <__aeabi_dmul>
 800715c:	a341      	add	r3, pc, #260	; (adr r3, 8007264 <__kernel_sin+0x154>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	4680      	mov	r8, r0
 8007164:	4689      	mov	r9, r1
 8007166:	4650      	mov	r0, sl
 8007168:	4659      	mov	r1, fp
 800716a:	f7f9 fa55 	bl	8000618 <__aeabi_dmul>
 800716e:	a33f      	add	r3, pc, #252	; (adr r3, 800726c <__kernel_sin+0x15c>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f7f9 f898 	bl	80002a8 <__aeabi_dsub>
 8007178:	4652      	mov	r2, sl
 800717a:	465b      	mov	r3, fp
 800717c:	f7f9 fa4c 	bl	8000618 <__aeabi_dmul>
 8007180:	a33c      	add	r3, pc, #240	; (adr r3, 8007274 <__kernel_sin+0x164>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f7f9 f891 	bl	80002ac <__adddf3>
 800718a:	4652      	mov	r2, sl
 800718c:	465b      	mov	r3, fp
 800718e:	f7f9 fa43 	bl	8000618 <__aeabi_dmul>
 8007192:	a33a      	add	r3, pc, #232	; (adr r3, 800727c <__kernel_sin+0x16c>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f7f9 f886 	bl	80002a8 <__aeabi_dsub>
 800719c:	4652      	mov	r2, sl
 800719e:	465b      	mov	r3, fp
 80071a0:	f7f9 fa3a 	bl	8000618 <__aeabi_dmul>
 80071a4:	a337      	add	r3, pc, #220	; (adr r3, 8007284 <__kernel_sin+0x174>)
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f7f9 f87f 	bl	80002ac <__adddf3>
 80071ae:	9b01      	ldr	r3, [sp, #4]
 80071b0:	4606      	mov	r6, r0
 80071b2:	460f      	mov	r7, r1
 80071b4:	b9eb      	cbnz	r3, 80071f2 <__kernel_sin+0xe2>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4650      	mov	r0, sl
 80071bc:	4659      	mov	r1, fp
 80071be:	f7f9 fa2b 	bl	8000618 <__aeabi_dmul>
 80071c2:	a325      	add	r3, pc, #148	; (adr r3, 8007258 <__kernel_sin+0x148>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 f86e 	bl	80002a8 <__aeabi_dsub>
 80071cc:	4642      	mov	r2, r8
 80071ce:	464b      	mov	r3, r9
 80071d0:	f7f9 fa22 	bl	8000618 <__aeabi_dmul>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4620      	mov	r0, r4
 80071da:	4629      	mov	r1, r5
 80071dc:	f7f9 f866 	bl	80002ac <__adddf3>
 80071e0:	4604      	mov	r4, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	ec45 4b10 	vmov	d0, r4, r5
 80071e8:	b003      	add	sp, #12
 80071ea:	ecbd 8b04 	vpop	{d8-d9}
 80071ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f2:	4b1b      	ldr	r3, [pc, #108]	; (8007260 <__kernel_sin+0x150>)
 80071f4:	ec51 0b18 	vmov	r0, r1, d8
 80071f8:	2200      	movs	r2, #0
 80071fa:	f7f9 fa0d 	bl	8000618 <__aeabi_dmul>
 80071fe:	4632      	mov	r2, r6
 8007200:	ec41 0b19 	vmov	d9, r0, r1
 8007204:	463b      	mov	r3, r7
 8007206:	4640      	mov	r0, r8
 8007208:	4649      	mov	r1, r9
 800720a:	f7f9 fa05 	bl	8000618 <__aeabi_dmul>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	ec51 0b19 	vmov	r0, r1, d9
 8007216:	f7f9 f847 	bl	80002a8 <__aeabi_dsub>
 800721a:	4652      	mov	r2, sl
 800721c:	465b      	mov	r3, fp
 800721e:	f7f9 f9fb 	bl	8000618 <__aeabi_dmul>
 8007222:	ec53 2b18 	vmov	r2, r3, d8
 8007226:	f7f9 f83f 	bl	80002a8 <__aeabi_dsub>
 800722a:	a30b      	add	r3, pc, #44	; (adr r3, 8007258 <__kernel_sin+0x148>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	4606      	mov	r6, r0
 8007232:	460f      	mov	r7, r1
 8007234:	4640      	mov	r0, r8
 8007236:	4649      	mov	r1, r9
 8007238:	f7f9 f9ee 	bl	8000618 <__aeabi_dmul>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 f832 	bl	80002ac <__adddf3>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4620      	mov	r0, r4
 800724e:	4629      	mov	r1, r5
 8007250:	f7f9 f82a 	bl	80002a8 <__aeabi_dsub>
 8007254:	e7c4      	b.n	80071e0 <__kernel_sin+0xd0>
 8007256:	bf00      	nop
 8007258:	55555549 	.word	0x55555549
 800725c:	3fc55555 	.word	0x3fc55555
 8007260:	3fe00000 	.word	0x3fe00000
 8007264:	5acfd57c 	.word	0x5acfd57c
 8007268:	3de5d93a 	.word	0x3de5d93a
 800726c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007270:	3e5ae5e6 	.word	0x3e5ae5e6
 8007274:	57b1fe7d 	.word	0x57b1fe7d
 8007278:	3ec71de3 	.word	0x3ec71de3
 800727c:	19c161d5 	.word	0x19c161d5
 8007280:	3f2a01a0 	.word	0x3f2a01a0
 8007284:	1110f8a6 	.word	0x1110f8a6
 8007288:	3f811111 	.word	0x3f811111

0800728c <fabs>:
 800728c:	ec51 0b10 	vmov	r0, r1, d0
 8007290:	ee10 2a10 	vmov	r2, s0
 8007294:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007298:	ec43 2b10 	vmov	d0, r2, r3
 800729c:	4770      	bx	lr
	...

080072a0 <floor>:
 80072a0:	ec51 0b10 	vmov	r0, r1, d0
 80072a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80072ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80072b0:	2e13      	cmp	r6, #19
 80072b2:	ee10 5a10 	vmov	r5, s0
 80072b6:	ee10 8a10 	vmov	r8, s0
 80072ba:	460c      	mov	r4, r1
 80072bc:	dc32      	bgt.n	8007324 <floor+0x84>
 80072be:	2e00      	cmp	r6, #0
 80072c0:	da14      	bge.n	80072ec <floor+0x4c>
 80072c2:	a333      	add	r3, pc, #204	; (adr r3, 8007390 <floor+0xf0>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f7f8 fff0 	bl	80002ac <__adddf3>
 80072cc:	2200      	movs	r2, #0
 80072ce:	2300      	movs	r3, #0
 80072d0:	f7f9 fc32 	bl	8000b38 <__aeabi_dcmpgt>
 80072d4:	b138      	cbz	r0, 80072e6 <floor+0x46>
 80072d6:	2c00      	cmp	r4, #0
 80072d8:	da57      	bge.n	800738a <floor+0xea>
 80072da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80072de:	431d      	orrs	r5, r3
 80072e0:	d001      	beq.n	80072e6 <floor+0x46>
 80072e2:	4c2d      	ldr	r4, [pc, #180]	; (8007398 <floor+0xf8>)
 80072e4:	2500      	movs	r5, #0
 80072e6:	4621      	mov	r1, r4
 80072e8:	4628      	mov	r0, r5
 80072ea:	e025      	b.n	8007338 <floor+0x98>
 80072ec:	4f2b      	ldr	r7, [pc, #172]	; (800739c <floor+0xfc>)
 80072ee:	4137      	asrs	r7, r6
 80072f0:	ea01 0307 	and.w	r3, r1, r7
 80072f4:	4303      	orrs	r3, r0
 80072f6:	d01f      	beq.n	8007338 <floor+0x98>
 80072f8:	a325      	add	r3, pc, #148	; (adr r3, 8007390 <floor+0xf0>)
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f7f8 ffd5 	bl	80002ac <__adddf3>
 8007302:	2200      	movs	r2, #0
 8007304:	2300      	movs	r3, #0
 8007306:	f7f9 fc17 	bl	8000b38 <__aeabi_dcmpgt>
 800730a:	2800      	cmp	r0, #0
 800730c:	d0eb      	beq.n	80072e6 <floor+0x46>
 800730e:	2c00      	cmp	r4, #0
 8007310:	bfbe      	ittt	lt
 8007312:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007316:	fa43 f606 	asrlt.w	r6, r3, r6
 800731a:	19a4      	addlt	r4, r4, r6
 800731c:	ea24 0407 	bic.w	r4, r4, r7
 8007320:	2500      	movs	r5, #0
 8007322:	e7e0      	b.n	80072e6 <floor+0x46>
 8007324:	2e33      	cmp	r6, #51	; 0x33
 8007326:	dd0b      	ble.n	8007340 <floor+0xa0>
 8007328:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800732c:	d104      	bne.n	8007338 <floor+0x98>
 800732e:	ee10 2a10 	vmov	r2, s0
 8007332:	460b      	mov	r3, r1
 8007334:	f7f8 ffba 	bl	80002ac <__adddf3>
 8007338:	ec41 0b10 	vmov	d0, r0, r1
 800733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007340:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007344:	f04f 33ff 	mov.w	r3, #4294967295
 8007348:	fa23 f707 	lsr.w	r7, r3, r7
 800734c:	4207      	tst	r7, r0
 800734e:	d0f3      	beq.n	8007338 <floor+0x98>
 8007350:	a30f      	add	r3, pc, #60	; (adr r3, 8007390 <floor+0xf0>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f7f8 ffa9 	bl	80002ac <__adddf3>
 800735a:	2200      	movs	r2, #0
 800735c:	2300      	movs	r3, #0
 800735e:	f7f9 fbeb 	bl	8000b38 <__aeabi_dcmpgt>
 8007362:	2800      	cmp	r0, #0
 8007364:	d0bf      	beq.n	80072e6 <floor+0x46>
 8007366:	2c00      	cmp	r4, #0
 8007368:	da02      	bge.n	8007370 <floor+0xd0>
 800736a:	2e14      	cmp	r6, #20
 800736c:	d103      	bne.n	8007376 <floor+0xd6>
 800736e:	3401      	adds	r4, #1
 8007370:	ea25 0507 	bic.w	r5, r5, r7
 8007374:	e7b7      	b.n	80072e6 <floor+0x46>
 8007376:	2301      	movs	r3, #1
 8007378:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800737c:	fa03 f606 	lsl.w	r6, r3, r6
 8007380:	4435      	add	r5, r6
 8007382:	4545      	cmp	r5, r8
 8007384:	bf38      	it	cc
 8007386:	18e4      	addcc	r4, r4, r3
 8007388:	e7f2      	b.n	8007370 <floor+0xd0>
 800738a:	2500      	movs	r5, #0
 800738c:	462c      	mov	r4, r5
 800738e:	e7aa      	b.n	80072e6 <floor+0x46>
 8007390:	8800759c 	.word	0x8800759c
 8007394:	7e37e43c 	.word	0x7e37e43c
 8007398:	bff00000 	.word	0xbff00000
 800739c:	000fffff 	.word	0x000fffff

080073a0 <scalbn>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	ec55 4b10 	vmov	r4, r5, d0
 80073a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80073aa:	4606      	mov	r6, r0
 80073ac:	462b      	mov	r3, r5
 80073ae:	b99a      	cbnz	r2, 80073d8 <scalbn+0x38>
 80073b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80073b4:	4323      	orrs	r3, r4
 80073b6:	d036      	beq.n	8007426 <scalbn+0x86>
 80073b8:	4b39      	ldr	r3, [pc, #228]	; (80074a0 <scalbn+0x100>)
 80073ba:	4629      	mov	r1, r5
 80073bc:	ee10 0a10 	vmov	r0, s0
 80073c0:	2200      	movs	r2, #0
 80073c2:	f7f9 f929 	bl	8000618 <__aeabi_dmul>
 80073c6:	4b37      	ldr	r3, [pc, #220]	; (80074a4 <scalbn+0x104>)
 80073c8:	429e      	cmp	r6, r3
 80073ca:	4604      	mov	r4, r0
 80073cc:	460d      	mov	r5, r1
 80073ce:	da10      	bge.n	80073f2 <scalbn+0x52>
 80073d0:	a32b      	add	r3, pc, #172	; (adr r3, 8007480 <scalbn+0xe0>)
 80073d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d6:	e03a      	b.n	800744e <scalbn+0xae>
 80073d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80073dc:	428a      	cmp	r2, r1
 80073de:	d10c      	bne.n	80073fa <scalbn+0x5a>
 80073e0:	ee10 2a10 	vmov	r2, s0
 80073e4:	4620      	mov	r0, r4
 80073e6:	4629      	mov	r1, r5
 80073e8:	f7f8 ff60 	bl	80002ac <__adddf3>
 80073ec:	4604      	mov	r4, r0
 80073ee:	460d      	mov	r5, r1
 80073f0:	e019      	b.n	8007426 <scalbn+0x86>
 80073f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80073f6:	460b      	mov	r3, r1
 80073f8:	3a36      	subs	r2, #54	; 0x36
 80073fa:	4432      	add	r2, r6
 80073fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007400:	428a      	cmp	r2, r1
 8007402:	dd08      	ble.n	8007416 <scalbn+0x76>
 8007404:	2d00      	cmp	r5, #0
 8007406:	a120      	add	r1, pc, #128	; (adr r1, 8007488 <scalbn+0xe8>)
 8007408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800740c:	da1c      	bge.n	8007448 <scalbn+0xa8>
 800740e:	a120      	add	r1, pc, #128	; (adr r1, 8007490 <scalbn+0xf0>)
 8007410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007414:	e018      	b.n	8007448 <scalbn+0xa8>
 8007416:	2a00      	cmp	r2, #0
 8007418:	dd08      	ble.n	800742c <scalbn+0x8c>
 800741a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800741e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007422:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007426:	ec45 4b10 	vmov	d0, r4, r5
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007430:	da19      	bge.n	8007466 <scalbn+0xc6>
 8007432:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007436:	429e      	cmp	r6, r3
 8007438:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800743c:	dd0a      	ble.n	8007454 <scalbn+0xb4>
 800743e:	a112      	add	r1, pc, #72	; (adr r1, 8007488 <scalbn+0xe8>)
 8007440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e2      	bne.n	800740e <scalbn+0x6e>
 8007448:	a30f      	add	r3, pc, #60	; (adr r3, 8007488 <scalbn+0xe8>)
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	f7f9 f8e3 	bl	8000618 <__aeabi_dmul>
 8007452:	e7cb      	b.n	80073ec <scalbn+0x4c>
 8007454:	a10a      	add	r1, pc, #40	; (adr r1, 8007480 <scalbn+0xe0>)
 8007456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0b8      	beq.n	80073d0 <scalbn+0x30>
 800745e:	a10e      	add	r1, pc, #56	; (adr r1, 8007498 <scalbn+0xf8>)
 8007460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007464:	e7b4      	b.n	80073d0 <scalbn+0x30>
 8007466:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800746a:	3236      	adds	r2, #54	; 0x36
 800746c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007470:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007474:	4620      	mov	r0, r4
 8007476:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <scalbn+0x108>)
 8007478:	2200      	movs	r2, #0
 800747a:	e7e8      	b.n	800744e <scalbn+0xae>
 800747c:	f3af 8000 	nop.w
 8007480:	c2f8f359 	.word	0xc2f8f359
 8007484:	01a56e1f 	.word	0x01a56e1f
 8007488:	8800759c 	.word	0x8800759c
 800748c:	7e37e43c 	.word	0x7e37e43c
 8007490:	8800759c 	.word	0x8800759c
 8007494:	fe37e43c 	.word	0xfe37e43c
 8007498:	c2f8f359 	.word	0xc2f8f359
 800749c:	81a56e1f 	.word	0x81a56e1f
 80074a0:	43500000 	.word	0x43500000
 80074a4:	ffff3cb0 	.word	0xffff3cb0
 80074a8:	3c900000 	.word	0x3c900000

080074ac <_init>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	bf00      	nop
 80074b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b2:	bc08      	pop	{r3}
 80074b4:	469e      	mov	lr, r3
 80074b6:	4770      	bx	lr

080074b8 <_fini>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	bf00      	nop
 80074bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074be:	bc08      	pop	{r3}
 80074c0:	469e      	mov	lr, r3
 80074c2:	4770      	bx	lr
