
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a538  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800a6d8  0800a6d8  0001a6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abc4  0800abc4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800abc4  0800abc4  0001abc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abcc  0800abcc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abcc  0800abcc  0001abcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abd0  0800abd0  0001abd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800abd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  200001e0  0800adb4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  0800adb4  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121ee  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c8  00000000  00000000  000323fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  000349c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00035898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017916  00000000  00000000  00036680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d4c  00000000  00000000  0004df96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c37  00000000  00000000  0005ece2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef919  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052a4  00000000  00000000  000ef96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a6c0 	.word	0x0800a6c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a6c0 	.word	0x0800a6c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <HAL_UART_RxCpltCallback>:
uint8_t log_triggered = 0;




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b0ab      	sub	sp, #172	; 0xac
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]



    double value;
    unsigned long long encoding;
    uint8_t i = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    /* read the first characters */

    memcpy(str,rx_data,sizeof str);
 8000fca:	4a4f      	ldr	r2, [pc, #316]	; (8001108 <HAL_UART_RxCpltCallback+0x14c>)
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	2278      	movs	r2, #120	; 0x78
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 fb7c 	bl	80076d2 <memcpy>

    char  *save_ptr;

    cmd = strtok_r((char*) str, ":", &save_ptr);
 8000fda:	f107 020c 	add.w	r2, r7, #12
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	494a      	ldr	r1, [pc, #296]	; (800110c <HAL_UART_RxCpltCallback+0x150>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f007 f9fe 	bl	80083e6 <strtok_r>
 8000fea:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    //printf(cmd);
    // printf("wry \n");
    //printf("%d \n",!strcmp(cmd, "HOM"));
    //fflush(stdout);

    if(!strcmp(cmd, "TRJ")){
 8000fee:	4948      	ldr	r1, [pc, #288]	; (8001110 <HAL_UART_RxCpltCallback+0x154>)
 8000ff0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000ff4:	f7ff f8f4 	bl	80001e0 <strcmp>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d157      	bne.n	80010ae <HAL_UART_RxCpltCallback+0xf2>
    	   count++;
 8000ffe:	4b45      	ldr	r3, [pc, #276]	; (8001114 <HAL_UART_RxCpltCallback+0x158>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a43      	ldr	r2, [pc, #268]	; (8001114 <HAL_UART_RxCpltCallback+0x158>)
 8001006:	6013      	str	r3, [r2, #0]

    	/* trj case*/
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        //data = strtok(cmd+sizeof cmd, ":");
	   data = strtok_r(cmd+sizeof cmd, ":",  &save_ptr);
 8001008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800100c:	3304      	adds	r3, #4
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	493e      	ldr	r1, [pc, #248]	; (800110c <HAL_UART_RxCpltCallback+0x150>)
 8001014:	4618      	mov	r0, r3
 8001016:	f007 f9e6 	bl	80083e6 <strtok_r>
 800101a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        while(data != NULL){
 800101e:	e032      	b.n	8001086 <HAL_UART_RxCpltCallback+0xca>
            if(i == 6) break; /* reading penup */
 8001020:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001024:	2b06      	cmp	r3, #6
 8001026:	d033      	beq.n	8001090 <HAL_UART_RxCpltCallback+0xd4>
            // value = "0x"; /* will contain the value extracted from the received string */
            encoding = strtoull(data, NULL, 16);
 8001028:	2210      	movs	r2, #16
 800102a:	2100      	movs	r1, #0
 800102c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001030:	f007 fb00 	bl	8008634 <strtoull>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800103c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
            memcpy(&value, &encoding, sizeof value);
 8001040:	e9c7 2306 	strd	r2, r3, [r7, #24]

            // value = strcat(value, data); /* string concatenation REF: https://www.programiz.com/c-programming/library-function/string.h/strcat */
            rbpush((((ringbuffer_t *) &manip)+i), (float) value); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 8001044:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001048:	222c      	movs	r2, #44	; 0x2c
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	4a32      	ldr	r2, [pc, #200]	; (8001118 <HAL_UART_RxCpltCallback+0x15c>)
 8001050:	189c      	adds	r4, r3, r2
 8001052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fddd 	bl	8000c18 <__aeabi_d2f>
 800105e:	4603      	mov	r3, r0
 8001060:	ee00 3a10 	vmov	s0, r3
 8001064:	4620      	mov	r0, r4
 8001066:	f001 ffb9 	bl	8002fdc <rbpush>
            data = strtok_r(NULL, ":", &save_ptr);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	461a      	mov	r2, r3
 8001070:	4926      	ldr	r1, [pc, #152]	; (800110c <HAL_UART_RxCpltCallback+0x150>)
 8001072:	2000      	movs	r0, #0
 8001074:	f007 f9b7 	bl	80083e6 <strtok_r>
 8001078:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
            i++;
 800107c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001080:	3301      	adds	r3, #1
 8001082:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        while(data != NULL){
 8001086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1c8      	bne.n	8001020 <HAL_UART_RxCpltCallback+0x64>
 800108e:	e000      	b.n	8001092 <HAL_UART_RxCpltCallback+0xd6>
            if(i == 6) break; /* reading penup */
 8001090:	bf00      	nop
        }
        rbpush(&manip.penup, (float) atoi(data));
 8001092:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001096:	f006 f921 	bl	80072dc <atoi>
 800109a:	ee07 0a90 	vmov	s15, r0
 800109e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	481d      	ldr	r0, [pc, #116]	; (800111c <HAL_UART_RxCpltCallback+0x160>)
 80010a8:	f001 ff98 	bl	8002fdc <rbpush>
 80010ac:	e01f      	b.n	80010ee <HAL_UART_RxCpltCallback+0x132>
    }else if(!strcmp(cmd, "HOM")){
 80010ae:	491c      	ldr	r1, [pc, #112]	; (8001120 <HAL_UART_RxCpltCallback+0x164>)
 80010b0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80010b4:	f7ff f894 	bl	80001e0 <strcmp>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10c      	bne.n	80010d8 <HAL_UART_RxCpltCallback+0x11c>

    	printf(rx_data);
 80010be:	4812      	ldr	r0, [pc, #72]	; (8001108 <HAL_UART_RxCpltCallback+0x14c>)
 80010c0:	f007 f868 	bl	8008194 <iprintf>
    	    fflush(stdout);
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_UART_RxCpltCallback+0x168>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f006 f9d2 	bl	8007474 <fflush>

    homing_triggered=1;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_UART_RxCpltCallback+0x16c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e00a      	b.n	80010ee <HAL_UART_RxCpltCallback+0x132>



    }else if(!strcmp(cmd, "POS")){
 80010d8:	4914      	ldr	r1, [pc, #80]	; (800112c <HAL_UART_RxCpltCallback+0x170>)
 80010da:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80010de:	f7ff f87f 	bl	80001e0 <strcmp>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <HAL_UART_RxCpltCallback+0x132>
        log_triggered = 1;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_UART_RxCpltCallback+0x174>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(huart, rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 80010ee:	2278      	movs	r2, #120	; 0x78
 80010f0:	4905      	ldr	r1, [pc, #20]	; (8001108 <HAL_UART_RxCpltCallback+0x14c>)
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f004 ffd8 	bl	80060a8 <HAL_UART_Receive_DMA>


    //__enable_irq();

       return
	   count++;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_UART_RxCpltCallback+0x158>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <HAL_UART_RxCpltCallback+0x158>)
 8001100:	6013      	str	r3, [r2, #0]

		  //HAL_UART_Receive_DMA(huart, rx_data, 121);



}
 8001102:	37ac      	adds	r7, #172	; 0xac
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	200001fc 	.word	0x200001fc
 800110c:	0800a6d8 	.word	0x0800a6d8
 8001110:	0800a6dc 	.word	0x0800a6dc
 8001114:	20000658 	.word	0x20000658
 8001118:	2000028c 	.word	0x2000028c
 800111c:	20000394 	.word	0x20000394
 8001120:	0800a6e0 	.word	0x0800a6e0
 8001124:	20000010 	.word	0x20000010
 8001128:	20000662 	.word	0x20000662
 800112c:	0800a6e4 	.word	0x0800a6e4
 8001130:	20000663 	.word	0x20000663

08001134 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
    // TODO: Implement limit switch handling
    uint32_t now;
    now = HAL_GetTick();
 800113e:	f002 fc3d 	bl	80039bc <HAL_GetTick>
 8001142:	60f8      	str	r0, [r7, #12]


    if((now - previous_trigger1) > DEBOUNCE_DELAY ){
 8001144:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b50      	cmp	r3, #80	; 0x50
 800114e:	d942      	bls.n	80011d6 <HAL_GPIO_EXTI_Callback+0xa2>
       if (GPIO_Pin==LIMIT_SWITCH_1_Pin){
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001156:	d13e      	bne.n	80011d6 <HAL_GPIO_EXTI_Callback+0xa2>
    	if(!triggered1){
 8001158:	4b46      	ldr	r3, [pc, #280]	; (8001274 <HAL_GPIO_EXTI_Callback+0x140>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_EXTI_Callback+0x8e>
          limit_switch1 = 1;
 8001160:	4b45      	ldr	r3, [pc, #276]	; (8001278 <HAL_GPIO_EXTI_Callback+0x144>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]
          if(is_home1){
 8001166:	4b45      	ldr	r3, [pc, #276]	; (800127c <HAL_GPIO_EXTI_Callback+0x148>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d015      	beq.n	800119a <HAL_GPIO_EXTI_Callback+0x66>
          rblast(&manip.q0_actual,&offset1);
 800116e:	4944      	ldr	r1, [pc, #272]	; (8001280 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001170:	4844      	ldr	r0, [pc, #272]	; (8001284 <HAL_GPIO_EXTI_Callback+0x150>)
 8001172:	f001 ffa1 	bl	80030b8 <rblast>
          printf("CNT1: %x \n",manip.htim_encoder1->Instance->CNT);
 8001176:	4b44      	ldr	r3, [pc, #272]	; (8001288 <HAL_GPIO_EXTI_Callback+0x154>)
 8001178:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	4842      	ldr	r0, [pc, #264]	; (800128c <HAL_GPIO_EXTI_Callback+0x158>)
 8001184:	f007 f806 	bl	8008194 <iprintf>
         fflush(stdout);
 8001188:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_GPIO_EXTI_Callback+0x15c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4618      	mov	r0, r3
 8001190:	f006 f970 	bl	8007474 <fflush>
          //offset1=2*M_PI-offset1;

          is_home1=0;
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <HAL_GPIO_EXTI_Callback+0x148>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
          }
            // SECTION - DEBUG
          printf("trigger1 offset1: %f \n",offset1);
 800119a:	4b39      	ldr	r3, [pc, #228]	; (8001280 <HAL_GPIO_EXTI_Callback+0x14c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9ea 	bl	8000578 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	483a      	ldr	r0, [pc, #232]	; (8001294 <HAL_GPIO_EXTI_Callback+0x160>)
 80011aa:	f006 fff3 	bl	8008194 <iprintf>
         		 fflush(stdout);
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <HAL_GPIO_EXTI_Callback+0x15c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 f95d 	bl	8007474 <fflush>
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011ba:	2120      	movs	r1, #32
 80011bc:	4836      	ldr	r0, [pc, #216]	; (8001298 <HAL_GPIO_EXTI_Callback+0x164>)
 80011be:	f003 fade 	bl	800477e <HAL_GPIO_TogglePin>
            // !SECTION - DEBUG
        }
        triggered1 = 1-triggered1;
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <HAL_GPIO_EXTI_Callback+0x140>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	f1c3 0301 	rsb	r3, r3, #1
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <HAL_GPIO_EXTI_Callback+0x140>)
 80011ce:	701a      	strb	r2, [r3, #0]
        previous_trigger1 = now;
 80011d0:	4a27      	ldr	r2, [pc, #156]	; (8001270 <HAL_GPIO_EXTI_Callback+0x13c>)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6013      	str	r3, [r2, #0]
       }
     }

 if((now - previous_trigger2) > DEBOUNCE_DELAY ){
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <HAL_GPIO_EXTI_Callback+0x168>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b50      	cmp	r3, #80	; 0x50
 80011e0:	d942      	bls.n	8001268 <HAL_GPIO_EXTI_Callback+0x134>
    if(GPIO_Pin==LIMIT_SWITCH_2_Pin){
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e8:	d13e      	bne.n	8001268 <HAL_GPIO_EXTI_Callback+0x134>
        if(!triggered2){
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x16c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_EXTI_Callback+0x120>
            limit_switch2 = 1;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x170>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
            if(is_home2){
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x174>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d015      	beq.n	800122c <HAL_GPIO_EXTI_Callback+0xf8>
            rblast(&manip.q1_actual,&offset2);
 8001200:	492a      	ldr	r1, [pc, #168]	; (80012ac <HAL_GPIO_EXTI_Callback+0x178>)
 8001202:	482b      	ldr	r0, [pc, #172]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001204:	f001 ff58 	bl	80030b8 <rblast>
            printf("CNT2: %x \n",manip.htim_encoder2->Instance->CNT);
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <HAL_GPIO_EXTI_Callback+0x154>)
 800120a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	4619      	mov	r1, r3
 8001214:	4827      	ldr	r0, [pc, #156]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x180>)
 8001216:	f006 ffbd 	bl	8008194 <iprintf>
            fflush(stdout);
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_GPIO_EXTI_Callback+0x15c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4618      	mov	r0, r3
 8001222:	f006 f927 	bl	8007474 <fflush>

            is_home2=0;
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
		 }
		   // SECTION - DEBUG
		 printf("trigger2 offset2: %f \n",offset2);
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <HAL_GPIO_EXTI_Callback+0x178>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9a1 	bl	8000578 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	481f      	ldr	r0, [pc, #124]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x184>)
 800123c:	f006 ffaa 	bl	8008194 <iprintf>

		 fflush(stdout);
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	4618      	mov	r0, r3
 8001248:	f006 f914 	bl	8007474 <fflush>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800124c:	2120      	movs	r1, #32
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <HAL_GPIO_EXTI_Callback+0x164>)
 8001250:	f003 fa95 	bl	800477e <HAL_GPIO_TogglePin>
		   // !SECTION - DEBUG
	   }
	   triggered2 = 1-triggered2;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	f1c3 0301 	rsb	r3, r3, #1
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001260:	701a      	strb	r2, [r3, #0]
	   previous_trigger2 = now;
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_GPIO_EXTI_Callback+0x168>)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6013      	str	r3, [r2, #0]
       }

  }

    
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000604 	.word	0x20000604
 8001274:	2000060c 	.word	0x2000060c
 8001278:	2000065c 	.word	0x2000065c
 800127c:	20000660 	.word	0x20000660
 8001280:	20000644 	.word	0x20000644
 8001284:	200003c0 	.word	0x200003c0
 8001288:	2000028c 	.word	0x2000028c
 800128c:	0800a6e8 	.word	0x0800a6e8
 8001290:	20000010 	.word	0x20000010
 8001294:	0800a6f4 	.word	0x0800a6f4
 8001298:	40020000 	.word	0x40020000
 800129c:	20000608 	.word	0x20000608
 80012a0:	2000060d 	.word	0x2000060d
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000661 	.word	0x20000661
 80012ac:	20000648 	.word	0x20000648
 80012b0:	200003ec 	.word	0x200003ec
 80012b4:	0800a70c 	.word	0x0800a70c
 80012b8:	0800a718 	.word	0x0800a718

080012bc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d102      	bne.n	80012d4 <HAL_TIM_PeriodElapsedCallback+0x18>
		/* check if it is the proper instance */
		read_encoders(&manip);
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012d0:	f000 fa56 	bl	8001780 <read_encoders>

	}
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40014400 	.word	0x40014400
 80012e0:	2000028c 	.word	0x2000028c

080012e4 <ITM_Sendchar>:

#define DEMCR               *((volatile uint32_t*) 0xE000EDFCU)
#define ITM_STIMULUS_PORT0  *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN        *((volatile uint32_t*) 0xE0000E00)

void ITM_Sendchar(uint8_t ch){
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <ITM_Sendchar+0x48>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <ITM_Sendchar+0x48>)
 80012f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012f8:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <ITM_Sendchar+0x4c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <ITM_Sendchar+0x4c>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(! (ITM_STIMULUS_PORT0 & 1));
 8001306:	bf00      	nop
 8001308:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f8      	beq.n	8001308 <ITM_Sendchar+0x24>

	// Write to IT Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 8001316:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	6013      	str	r3, [r2, #0]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000edfc 	.word	0xe000edfc
 8001330:	e0000e00 	.word	0xe0000e00

08001334 <_write>:

int _write(int file,char *ptr, int len){
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]

	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	e009      	b.n	800135a <_write+0x26>
	{
		ITM_Sendchar(*ptr++);
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	60ba      	str	r2, [r7, #8]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ffc8 	bl	80012e4 <ITM_Sendchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	dbf1      	blt.n	8001346 <_write+0x12>
	}
	return len;
 8001362:	687b      	ldr	r3, [r7, #4]

}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <init_man>:
- TIM_HandleTypeDef *htim2: pointer to the timer used to decode the output of the second encode;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip, TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3,TIM_HandleTypeDef *htim4){
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
 800137e:	e00b      	b.n	8001398 <init_man+0x2c>
        rbclear((((ringbuffer_t *) manip)+i));
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	222c      	movs	r2, #44	; 0x2c
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f001 ff03 	bl	8003198 <rbclear>
    for(i = 0; i < 14; i++){
 8001392:	7dfb      	ldrb	r3, [r7, #23]
 8001394:	3301      	adds	r3, #1
 8001396:	75fb      	strb	r3, [r7, #23]
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	2b0d      	cmp	r3, #13
 800139c:	d9f0      	bls.n	8001380 <init_man+0x14>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]
 80013a2:	e012      	b.n	80013ca <init_man+0x5e>
        manip->B[i] = (float) 0;
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	339a      	adds	r3, #154	; 0x9a
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
        manip->C[i] = (float) 0;
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	339e      	adds	r3, #158	; 0x9e
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 4; i++){
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	3301      	adds	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d9e9      	bls.n	80013a4 <init_man+0x38>
    }
    manip->htim_encoder1 = htim1;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    manip->htim_encoder2 = htim2;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    manip->htim_motor1 = htim3;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    manip->htim_motor2 = htim4;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a3a      	ldr	r2, [r7, #32]
 80013ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
}
 80013f0:	bf00      	nop
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <speed_estimation>:
- float *a_est: pointer to the variable that will hold the acceleration estimation;
@outputs: 
- void;
@#
*/
void speed_estimation(ringbuffer_t *q_actual, ringbuffer_t *dq_actual, ringbuffer_t *ddq_actual, float reduction, float *v_est, float *a_est){
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b0d6      	sub	sp, #344	; 0x158
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 8001402:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
 8001406:	6020      	str	r0, [r4, #0]
 8001408:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800140c:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
 8001410:	6001      	str	r1, [r0, #0]
 8001412:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8001416:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 800141a:	600a      	str	r2, [r1, #0]
 800141c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001420:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8001424:	ed82 0a00 	vstr	s0, [r2]
 8001428:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800142c:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8001430:	6013      	str	r3, [r2, #0]
    uint8_t i;



    float prev, succ, vel,acc, a, b;
    succ=0;
 8001432:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
    prev=0;
 8001440:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001444:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 5; i++){
 800144e:	2300      	movs	r3, #0
 8001450:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001454:	e023      	b.n	800149e <speed_estimation+0xa6>
    	rbget(q_actual, i, &a);
 8001456:	f997 1157 	ldrsb.w	r1, [r7, #343]	; 0x157
 800145a:	f107 021c 	add.w	r2, r7, #28
 800145e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001462:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	f001 fe56 	bl	8003118 <rbget>
    	prev+=a;
 800146c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001474:	ed93 7a00 	vldr	s14, [r3]
 8001478:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800147c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800148c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001490:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < 5; i++){
 8001494:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001498:	3301      	adds	r3, #1
 800149a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 800149e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d9d7      	bls.n	8001456 <speed_estimation+0x5e>
    }
    for(i = 0; i < 5; i++){
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 80014ac:	e026      	b.n	80014fc <speed_estimation+0x104>
    	rbget(q_actual, 5+i, &a);
 80014ae:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80014b2:	3305      	adds	r3, #5
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	b259      	sxtb	r1, r3
 80014b8:	f107 021c 	add.w	r2, r7, #28
 80014bc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80014c0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	f001 fe27 	bl	8003118 <rbget>
    	succ+=a;
 80014ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80014ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80014da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80014ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014ee:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < 5; i++){
 80014f2:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80014f6:	3301      	adds	r3, #1
 80014f8:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 80014fc:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001500:	2b04      	cmp	r3, #4
 8001502:	d9d4      	bls.n	80014ae <speed_estimation+0xb6>
    }
    prev /=5;
 8001504:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800150c:	ed93 7a00 	vldr	s14, [r3]
 8001510:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001518:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800151c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001520:	edc3 7a00 	vstr	s15, [r3]
    succ /=5;
 8001524:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800152c:	ed93 7a00 	vldr	s14, [r3]
 8001530:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001538:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800153c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001540:	edc3 7a00 	vstr	s15, [r3]


    /* filtering velocity with a first order filter  */

    rblast(dq_actual,&vel);
 8001544:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001548:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800154c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001550:	4611      	mov	r1, r2
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	f001 fdb0 	bl	80030b8 <rblast>


    *v_est=0.8546*vel+((1-0.8546)*(succ-prev)/(T_C*5) );
 8001558:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800155c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff f808 	bl	8000578 <__aeabi_f2d>
 8001568:	a34f      	add	r3, pc, #316	; (adr r3, 80016a8 <speed_estimation+0x2b0>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f85b 	bl	8000628 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	461d      	mov	r5, r3
 800157a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800157e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001582:	ed93 7a00 	vldr	s14, [r3]
 8001586:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800158a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001596:	ee17 0a90 	vmov	r0, s15
 800159a:	f7fe ffed 	bl	8000578 <__aeabi_f2d>
 800159e:	a344      	add	r3, pc, #272	; (adr r3, 80016b0 <speed_estimation+0x2b8>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f840 	bl	8000628 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	a341      	add	r3, pc, #260	; (adr r3, 80016b8 <speed_estimation+0x2c0>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f961 	bl	800087c <__aeabi_ddiv>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7fe fe7b 	bl	80002bc <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fb23 	bl	8000c18 <__aeabi_d2f>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015d8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	601a      	str	r2, [r3, #0]

    /* filtering accelleration  with a first order filter  */

    rbget(dq_actual, RBUF_SZ-1, &succ);
 80015e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015ec:	2109      	movs	r1, #9
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	f001 fd92 	bl	8003118 <rbget>
    rbget(dq_actual, RBUF_SZ-2, &prev);
 80015f4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80015f8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001600:	2108      	movs	r1, #8
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	f001 fd88 	bl	8003118 <rbget>
    //*a_est = (succ-prev)/T_C;
    rblast(ddq_actual,&acc);
 8001608:	f107 0220 	add.w	r2, r7, #32
 800160c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001610:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001614:	4611      	mov	r1, r2
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	f001 fd4e 	bl	80030b8 <rblast>
    *a_est= 0.9245*acc+((1- 0.9245)*(succ-prev)/(T_C) );
 800161c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001620:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffa6 	bl	8000578 <__aeabi_f2d>
 800162c:	a324      	add	r3, pc, #144	; (adr r3, 80016c0 <speed_estimation+0x2c8>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe fff9 	bl	8000628 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4614      	mov	r4, r2
 800163c:	461d      	mov	r5, r3
 800163e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001646:	ed93 7a00 	vldr	s14, [r3]
 800164a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800164e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165a:	ee17 0a90 	vmov	r0, s15
 800165e:	f7fe ff8b 	bl	8000578 <__aeabi_f2d>
 8001662:	a319      	add	r3, pc, #100	; (adr r3, 80016c8 <speed_estimation+0x2d0>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ffde 	bl	8000628 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	a316      	add	r3, pc, #88	; (adr r3, 80016d0 <speed_estimation+0x2d8>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7ff f8ff 	bl	800087c <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4620      	mov	r0, r4
 8001684:	4629      	mov	r1, r5
 8001686:	f7fe fe19 	bl	80002bc <__adddf3>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fac1 	bl	8000c18 <__aeabi_d2f>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800169c:	601a      	str	r2, [r3, #0]


}
 800169e:	bf00      	nop
 80016a0:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bdb0      	pop	{r4, r5, r7, pc}
 80016a8:	19652bd4 	.word	0x19652bd4
 80016ac:	3feb58e2 	.word	0x3feb58e2
 80016b0:	9a6b50b0 	.word	0x9a6b50b0
 80016b4:	3fc29c77 	.word	0x3fc29c77
 80016b8:	9999999a 	.word	0x9999999a
 80016bc:	3fa99999 	.word	0x3fa99999
 80016c0:	0624dd2f 	.word	0x0624dd2f
 80016c4:	3fed9581 	.word	0x3fed9581
 80016c8:	ced91688 	.word	0xced91688
 80016cc:	3fb353f7 	.word	0x3fb353f7
 80016d0:	47ae147b 	.word	0x47ae147b
 80016d4:	3f847ae1 	.word	0x3f847ae1

080016d8 <init_rate>:
- uint32_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint32_t ms){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
    rate->last_time = HAL_GetTick();
 80016e2:	f002 f96b 	bl	80039bc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	601a      	str	r2, [r3, #0]
    rate->delta_time = ms;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	605a      	str	r2, [r3, #4]
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <rate_sleep>:
- rate_t *rate: pointer to the rate struct;
@outputs: 
- void;
@#
*/
void rate_sleep(rate_t *rate){
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
    float now, interval;
    now = HAL_GetTick();
 8001702:	f002 f95b 	bl	80039bc <HAL_GetTick>
 8001706:	ee07 0a90 	vmov	s15, r0
 800170a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170e:	edc7 7a03 	vstr	s15, [r7, #12]
    interval = (uint32_t) (now - rate->last_time); /* time passed from the last rate_sleep call */
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800171e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800172a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800172e:	edc7 7a02 	vstr	s15, [r7, #8]
    /* wait until enough time has passed from the last rate_sleep call */
    if(interval < rate->delta_time){
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800173e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174a:	d50f      	bpl.n	800176c <rate_sleep+0x72>
        HAL_Delay(rate->delta_time-interval);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001758:	edd7 7a02 	vldr	s15, [r7, #8]
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f002 f934 	bl	80039d4 <HAL_Delay>
    }
    /* if enough time has passed, save the time stamp and go on with the process */
    rate->last_time = HAL_GetTick();
 800176c:	f002 f926 	bl	80039bc <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
    return;
 8001776:	bf00      	nop
}
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <read_encoders>:
@inputs: 
- man_t *manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void read_encoders(man_t *manip){
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
    uint16_t counter; 
    float displacement1, displacement2;
    // float v_est, a_est; /* used to hold temporarily the estimations of speed and acceleration */
    TIM_HandleTypeDef *htim1, *htim2;

    htim1 = manip->htim_encoder1; /* pointer to the timer struct that decodes the first encoder output */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800178e:	613b      	str	r3, [r7, #16]
    htim2 = manip->htim_encoder2; /* pointer to the timer struct that decodes the first encoder output */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001796:	60fb      	str	r3, [r7, #12]

    /* first encoder */
    counter = (htim1->Instance->CNT);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim1->Instance->ARR){
 80017a0:	8bfa      	ldrh	r2, [r7, #30]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d309      	bcc.n	80017c0 <read_encoders+0x40>
        counter = (htim1->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	83fb      	strh	r3, [r7, #30]
        htim1->Instance->CNT = counter; /* correct cnt value */
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	8bfa      	ldrh	r2, [r7, #30]
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
    }

    displacement1 = (float) (2*M_PI*counter/(htim1->Instance->ARR)-offset1);
 80017c0:	8bfb      	ldrh	r3, [r7, #30]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fec6 	bl	8000554 <__aeabi_i2d>
 80017c8:	a389      	add	r3, pc, #548	; (adr r3, 80019f0 <read_encoders+0x270>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff2b 	bl	8000628 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4614      	mov	r4, r2
 80017d8:	461d      	mov	r5, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fea7 	bl	8000534 <__aeabi_ui2d>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4620      	mov	r0, r4
 80017ec:	4629      	mov	r1, r5
 80017ee:	f7ff f845 	bl	800087c <__aeabi_ddiv>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4614      	mov	r4, r2
 80017f8:	461d      	mov	r5, r3
 80017fa:	4b83      	ldr	r3, [pc, #524]	; (8001a08 <read_encoders+0x288>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f7fe fd54 	bl	80002b8 <__aeabi_dsub>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9fe 	bl	8000c18 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	61bb      	str	r3, [r7, #24]

    /* second encoder */
    counter = (htim2->Instance->CNT);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim2->Instance->ARR){
 8001828:	8bfa      	ldrh	r2, [r7, #30]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	429a      	cmp	r2, r3
 8001832:	d309      	bcc.n	8001848 <read_encoders+0xc8>
        counter = (htim2->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	b29b      	uxth	r3, r3
 800183c:	3b01      	subs	r3, #1
 800183e:	83fb      	strh	r3, [r7, #30]
        htim2->Instance->CNT = counter;  /* correct cnt value */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	8bfa      	ldrh	r2, [r7, #30]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
    }
    displacement2 = (float) ((2*M_PI) -  (2*M_PI*counter/(htim2->Instance->ARR))); /* the motor is upside down */
 8001848:	8bfb      	ldrh	r3, [r7, #30]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe82 	bl	8000554 <__aeabi_i2d>
 8001850:	a367      	add	r3, pc, #412	; (adr r3, 80019f0 <read_encoders+0x270>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fee7 	bl	8000628 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4614      	mov	r4, r2
 8001860:	461d      	mov	r5, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe63 	bl	8000534 <__aeabi_ui2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4620      	mov	r0, r4
 8001874:	4629      	mov	r1, r5
 8001876:	f7ff f801 	bl	800087c <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	a15c      	add	r1, pc, #368	; (adr r1, 80019f0 <read_encoders+0x270>)
 8001880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001884:	f7fe fd18 	bl	80002b8 <__aeabi_dsub>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f9c2 	bl	8000c18 <__aeabi_d2f>
 8001894:	4603      	mov	r3, r0
 8001896:	617b      	str	r3, [r7, #20]

   //displacement2 = (float) (2*M_PI*counter/(htim2->Instance->ARR)-offset2);
    displacement2-=offset2;
 8001898:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <read_encoders+0x28c>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ed97 7a05 	vldr	s14, [r7, #20]
 80018a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a6:	edc7 7a05 	vstr	s15, [r7, #20]




    if(displacement1 > 2*M_PI){
 80018aa:	69b8      	ldr	r0, [r7, #24]
 80018ac:	f7fe fe64 	bl	8000578 <__aeabi_f2d>
 80018b0:	a34f      	add	r3, pc, #316	; (adr r3, 80019f0 <read_encoders+0x270>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7ff f947 	bl	8000b48 <__aeabi_dcmpgt>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <read_encoders+0x144>
    	displacement1 = 2*M_PI; /* clamping */
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <read_encoders+0x290>)
 80018c2:	61bb      	str	r3, [r7, #24]
	}
	if(displacement2 > 2*M_PI){
 80018c4:	6978      	ldr	r0, [r7, #20]
 80018c6:	f7fe fe57 	bl	8000578 <__aeabi_f2d>
 80018ca:	a349      	add	r3, pc, #292	; (adr r3, 80019f0 <read_encoders+0x270>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7ff f93a 	bl	8000b48 <__aeabi_dcmpgt>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <read_encoders+0x15e>
		displacement2 = 2*M_PI; /* clamping */
 80018da:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <read_encoders+0x290>)
 80018dc:	617b      	str	r3, [r7, #20]
	}
	if(!is_home1 && !is_home2){
 80018de:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <read_encoders+0x294>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d16f      	bne.n	80019c6 <read_encoders+0x246>
 80018e6:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <read_encoders+0x298>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d16b      	bne.n	80019c6 <read_encoders+0x246>
		if(displacement1 < -M_PI){
 80018ee:	69b8      	ldr	r0, [r7, #24]
 80018f0:	f7fe fe42 	bl	8000578 <__aeabi_f2d>
 80018f4:	a340      	add	r3, pc, #256	; (adr r3, 80019f8 <read_encoders+0x278>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7ff f907 	bl	8000b0c <__aeabi_dcmplt>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00f      	beq.n	8001924 <read_encoders+0x1a4>
				displacement1 = 2*M_PI+displacement1; // clamping
 8001904:	69b8      	ldr	r0, [r7, #24]
 8001906:	f7fe fe37 	bl	8000578 <__aeabi_f2d>
 800190a:	a339      	add	r3, pc, #228	; (adr r3, 80019f0 <read_encoders+0x270>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fcd4 	bl	80002bc <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f97c 	bl	8000c18 <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	61bb      	str	r3, [r7, #24]
		}

		if(displacement2 < -M_PI){
 8001924:	6978      	ldr	r0, [r7, #20]
 8001926:	f7fe fe27 	bl	8000578 <__aeabi_f2d>
 800192a:	a333      	add	r3, pc, #204	; (adr r3, 80019f8 <read_encoders+0x278>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7ff f8ec 	bl	8000b0c <__aeabi_dcmplt>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00f      	beq.n	800195a <read_encoders+0x1da>
			displacement2 = 2*M_PI+displacement2; //clamping
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7fe fe1c 	bl	8000578 <__aeabi_f2d>
 8001940:	a32b      	add	r3, pc, #172	; (adr r3, 80019f0 <read_encoders+0x270>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	f7fe fcb9 	bl	80002bc <__adddf3>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f961 	bl	8000c18 <__aeabi_d2f>
 8001956:	4603      	mov	r3, r0
 8001958:	617b      	str	r3, [r7, #20]
		}

		if(displacement1 > M_PI){
 800195a:	69b8      	ldr	r0, [r7, #24]
 800195c:	f7fe fe0c 	bl	8000578 <__aeabi_f2d>
 8001960:	a327      	add	r3, pc, #156	; (adr r3, 8001a00 <read_encoders+0x280>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7ff f8ef 	bl	8000b48 <__aeabi_dcmpgt>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00f      	beq.n	8001990 <read_encoders+0x210>
			displacement1 = displacement1 - (2*M_PI); // redefining the domain between -PI and +PI
 8001970:	69b8      	ldr	r0, [r7, #24]
 8001972:	f7fe fe01 	bl	8000578 <__aeabi_f2d>
 8001976:	a31e      	add	r3, pc, #120	; (adr r3, 80019f0 <read_encoders+0x270>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fc9c 	bl	80002b8 <__aeabi_dsub>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f946 	bl	8000c18 <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
 800198e:	61bb      	str	r3, [r7, #24]
		}
		if(displacement2 > M_PI){
 8001990:	6978      	ldr	r0, [r7, #20]
 8001992:	f7fe fdf1 	bl	8000578 <__aeabi_f2d>
 8001996:	a31a      	add	r3, pc, #104	; (adr r3, 8001a00 <read_encoders+0x280>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7ff f8d4 	bl	8000b48 <__aeabi_dcmpgt>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00f      	beq.n	80019c6 <read_encoders+0x246>
			displacement2 = displacement2 - (2*M_PI); // redefining the domain between -PI and +PI
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7fe fde6 	bl	8000578 <__aeabi_f2d>
 80019ac:	a310      	add	r3, pc, #64	; (adr r3, 80019f0 <read_encoders+0x270>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe fc81 	bl	80002b8 <__aeabi_dsub>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f92b 	bl	8000c18 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	617b      	str	r3, [r7, #20]
    /*
    uint8_t dir1 = (uint8_t) (htim1->Instance->CR1 >> 4) & 1;
    uint8_t dir2 = (uint8_t) (htim2->Instance->CR1 >> 4) & 1;
    */
    // SECTION DEBUG
    rbpush(&manip->q0_actual, displacement1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80019cc:	ed97 0a06 	vldr	s0, [r7, #24]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 fb03 	bl	8002fdc <rbpush>
    rbpush(&manip->q1_actual, displacement2);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80019dc:	ed97 0a05 	vldr	s0, [r7, #20]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 fafb 	bl	8002fdc <rbpush>
    rbpush(&manip->dq1_actual, v_est);
    rbpush(&manip->ddq1_actual, a_est);
    */


}
 80019e6:	bf00      	nop
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	54442d18 	.word	0x54442d18
 80019f4:	401921fb 	.word	0x401921fb
 80019f8:	54442d18 	.word	0x54442d18
 80019fc:	c00921fb 	.word	0xc00921fb
 8001a00:	54442d18 	.word	0x54442d18
 8001a04:	400921fb 	.word	0x400921fb
 8001a08:	20000644 	.word	0x20000644
 8001a0c:	20000648 	.word	0x20000648
 8001a10:	40c90fdb 	.word	0x40c90fdb
 8001a14:	20000660 	.word	0x20000660
 8001a18:	20000661 	.word	0x20000661

08001a1c <update_speeds>:
- man_t *manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/

void update_speeds(man_t *manip){
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	6078      	str	r0, [r7, #4]
	float v_est, a_est;
	speed_estimation(&manip->q0_actual, &manip->dq0_actual,&manip->ddq0_actual, reduction1, &v_est, &a_est);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f503 709a 	add.w	r0, r3, #308	; 0x134
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f503 71c6 	add.w	r1, r3, #396	; 0x18c
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 8001a36:	eddf 7a28 	vldr	s15, [pc, #160]	; 8001ad8 <update_speeds+0xbc>
 8001a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3e:	f107 040c 	add.w	r4, r7, #12
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4623      	mov	r3, r4
 8001a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4e:	f7ff fcd3 	bl	80013f8 <speed_estimation>
	//disp1 = v_est;
	rbpush(&manip->dq0_actual, v_est);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fabb 	bl	8002fdc <rbpush>
	rbpush(&manip->ddq0_actual, a_est);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a70:	eeb0 0a67 	vmov.f32	s0, s15
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 fab1 	bl	8002fdc <rbpush>

	speed_estimation(&manip->q1_actual, &manip->dq1_actual,&manip->ddq1_actual, reduction2, &v_est, &a_est);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8001a8c:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001adc <update_speeds+0xc0>
 8001a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a94:	f107 040c 	add.w	r4, r7, #12
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa4:	f7ff fca8 	bl	80013f8 <speed_estimation>
	//disp2 = v_est;
	rbpush(&manip->dq1_actual, v_est);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 fa90 	bl	8002fdc <rbpush>
	rbpush(&manip->ddq1_actual, a_est);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ac2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 fa86 	bl	8002fdc <rbpush>
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	0000000a 	.word	0x0000000a
 8001adc:	00000005 	.word	0x00000005

08001ae0 <apply_velocity_input>:

void apply_velocity_input(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, float *u){
 8001ae0:	b5b0      	push	{r4, r5, r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
    int32_t stepdir;
    uint32_t steps, ARR, CCR;
    uint32_t prescaler1, prescaler2;
    float clock_period;

   dir1 = u[0] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afa:	bf4c      	ite	mi
 8001afc:	2301      	movmi	r3, #1
 8001afe:	2300      	movpl	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   // dir1 = 1; // DEBUG
   HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, dir1);
 8001b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b10:	4879      	ldr	r0, [pc, #484]	; (8001cf8 <apply_velocity_input+0x218>)
 8001b12:	f002 fe1b 	bl	800474c <HAL_GPIO_WritePin>

   dir2 = u[1] > 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	bfcc      	ite	gt
 8001b28:	2301      	movgt	r3, #1
 8001b2a:	2300      	movle	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   //dir2 = u[1] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;

   // dir2 = 1; // DEBUG
   HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, dir2);
 8001b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b36:	461a      	mov	r2, r3
 8001b38:	2102      	movs	r1, #2
 8001b3a:	4870      	ldr	r0, [pc, #448]	; (8001cfc <apply_velocity_input+0x21c>)
 8001b3c:	f002 fe06 	bl	800474c <HAL_GPIO_WritePin>


	prescaler1= (uint16_t)  5200;// 8400;//12000 ;//8400;
 8001b40:	f241 4350 	movw	r3, #5200	; 0x1450
 8001b44:	623b      	str	r3, [r7, #32]
	f=HAL_RCC_GetPCLK1Freq()*2;
 8001b46:	f003 fabd 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
	ARR= ABS(u[0]) < 0.001 ? 0:(uint32_t)  (RESOLUTION*f/(ABS(u[0])*reduction1*16*prescaler1));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	eef0 7ae7 	vabs.f32	s15, s15
 8001b5a:	ee17 0a90 	vmov	r0, s15
 8001b5e:	f7fe fd0b 	bl	8000578 <__aeabi_f2d>
 8001b62:	a361      	add	r3, pc, #388	; (adr r3, 8001ce8 <apply_velocity_input+0x208>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe ffd0 	bl	8000b0c <__aeabi_dcmplt>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <apply_velocity_input+0x96>
 8001b72:	2300      	movs	r3, #0
 8001b74:	e033      	b.n	8001bde <apply_velocity_input+0xfe>
 8001b76:	69f8      	ldr	r0, [r7, #28]
 8001b78:	f7fe fcdc 	bl	8000534 <__aeabi_ui2d>
 8001b7c:	a35c      	add	r3, pc, #368	; (adr r3, 8001cf0 <apply_velocity_input+0x210>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fd51 	bl	8000628 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4614      	mov	r4, r2
 8001b8c:	461d      	mov	r5, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b98:	230a      	movs	r3, #10
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001baa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	ee07 3a90 	vmov	s15, r3
 8001bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbc:	ee17 0a90 	vmov	r0, s15
 8001bc0:	f7fe fcda 	bl	8000578 <__aeabi_f2d>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4620      	mov	r0, r4
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f7fe fe56 	bl	800087c <__aeabi_ddiv>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7fe fffe 	bl	8000bd8 <__aeabi_d2uiz>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	61bb      	str	r3, [r7, #24]
	CCR= ARR /2;
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_PRESCALER(htim1, prescaler1);//2625
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6a3a      	ldr	r2, [r7, #32]
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_TIM_SET_AUTORELOAD(htim1, ARR);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	60da      	str	r2, [r3, #12]
   	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34
   	htim1->Instance->EGR = TIM_EGR_UG;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	615a      	str	r2, [r3, #20]

   	prescaler2= (uint16_t)  8400;//12000 ;//8400;
 8001c0c:	f242 03d0 	movw	r3, #8400	; 0x20d0
 8001c10:	613b      	str	r3, [r7, #16]
   	f=HAL_RCC_GetPCLK1Freq()*2;
 8001c12:	f003 fa57 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 8001c16:	4603      	mov	r3, r0
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
   	ARR=  ABS(u[1]) < 0.001 ? 0:(uint32_t)  (RESOLUTION*f/(ABS(u[1])*reduction2*16*prescaler2));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	eef0 7ae7 	vabs.f32	s15, s15
 8001c28:	ee17 0a90 	vmov	r0, s15
 8001c2c:	f7fe fca4 	bl	8000578 <__aeabi_f2d>
 8001c30:	a32d      	add	r3, pc, #180	; (adr r3, 8001ce8 <apply_velocity_input+0x208>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe ff69 	bl	8000b0c <__aeabi_dcmplt>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <apply_velocity_input+0x164>
 8001c40:	2300      	movs	r3, #0
 8001c42:	e034      	b.n	8001cae <apply_velocity_input+0x1ce>
 8001c44:	69f8      	ldr	r0, [r7, #28]
 8001c46:	f7fe fc75 	bl	8000534 <__aeabi_ui2d>
 8001c4a:	a329      	add	r3, pc, #164	; (adr r3, 8001cf0 <apply_velocity_input+0x210>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fcea 	bl	8000628 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	eeb0 7ae7 	vabs.f32	s14, s15
 8001c68:	2305      	movs	r3, #5
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001c7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8c:	ee17 0a90 	vmov	r0, s15
 8001c90:	f7fe fc72 	bl	8000578 <__aeabi_f2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4620      	mov	r0, r4
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	f7fe fdee 	bl	800087c <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ff96 	bl	8000bd8 <__aeabi_d2uiz>
 8001cac:	4603      	mov	r3, r0
 8001cae:	61bb      	str	r3, [r7, #24]
   	CCR= ARR /2;
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
   	__HAL_TIM_SET_PRESCALER(htim2, prescaler2);//2625
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
   	__HAL_TIM_SET_AUTORELOAD(htim2, ARR);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
   	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	635a      	str	r2, [r3, #52]	; 0x34
   	htim2->Instance->EGR = TIM_EGR_UG;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	615a      	str	r2, [r3, #20]

    return;
 8001cdc:	bf00      	nop



}
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cec:	3f50624d 	.word	0x3f50624d
 8001cf0:	ae261898 	.word	0xae261898
 8001cf4:	3fa015be 	.word	0x3fa015be
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	40020000 	.word	0x40020000

08001d00 <start_timers>:
- TIM_HandleTypeDef *htim4
@outputs: void
@#
*/

void start_timers(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, TIM_HandleTypeDef *htim4){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
    HAL_TIM_Base_Start_IT(htim1);
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f003 fa50 	bl	80051b4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim2);
 8001d14:	68b8      	ldr	r0, [r7, #8]
 8001d16:	f003 fa4d 	bl	80051b4 <HAL_TIM_Base_Start_IT>
    /* start motor PWM */
    HAL_TIM_Base_Start_IT(htim3);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f003 fa4a 	bl	80051b4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim4);
 8001d20:	6838      	ldr	r0, [r7, #0]
 8001d22:	f003 fa47 	bl	80051b4 <HAL_TIM_Base_Start_IT>
    /* start PWM */
    if(HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1) != HAL_OK){
 8001d26:	2100      	movs	r1, #0
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f003 faf5 	bl	8005318 <HAL_TIM_PWM_Start>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <start_timers+0x38>
        HardFault_Handler();
 8001d34:	f001 fc83 	bl	800363e <HardFault_Handler>
    }
    if(HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_1) != HAL_OK){
 8001d38:	2100      	movs	r1, #0
 8001d3a:	6838      	ldr	r0, [r7, #0]
 8001d3c:	f003 faec 	bl	8005318 <HAL_TIM_PWM_Start>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <start_timers+0x4a>
        HardFault_Handler();
 8001d46:	f001 fc7a 	bl	800363e <HardFault_Handler>
    }
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <log_data>:
- UART_HandleTypeDef *huart
- man_t *manip
@outputs: void
@#
*/
void log_data(UART_HandleTypeDef *huart, man_t *manip){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
    //unsigned  int encoding_q0, encoding_q1, encoding_q0_d, encoding_q1_d;
	uint32_t encoding_q0, encoding_q1, encoding_q0_d, encoding_q1_d;
    uint32_t timestamp;
    uint8_t i;
    // SECTION DEBUG
    for(i = 0; i < sizeof tx_data; i++){
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d64:	e009      	b.n	8001d7a <log_data+0x26>
        tx_data[i] = 0;
 8001d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d6a:	4a28      	ldr	r2, [pc, #160]	; (8001e0c <log_data+0xb8>)
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < sizeof tx_data; i++){
 8001d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d74:	3301      	adds	r3, #1
 8001d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d7e:	2b15      	cmp	r3, #21
 8001d80:	d9f1      	bls.n	8001d66 <log_data+0x12>
    }
    // !SECTION DEBUG
    float q;
    rblast(&manip->q0_actual, &q);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001d88:	f107 020c 	add.w	r2, r7, #12
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f001 f992 	bl	80030b8 <rblast>
 8001d94:	68fb      	ldr	r3, [r7, #12]
    memcpy(&encoding_q0, &q, sizeof q);
 8001d96:	61fb      	str	r3, [r7, #28]
    rblast(&manip->q1_actual, &q);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001d9e:	f107 020c 	add.w	r2, r7, #12
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 f987 	bl	80030b8 <rblast>
 8001daa:	68fb      	ldr	r3, [r7, #12]
    memcpy(&encoding_q1, &q, sizeof q);
 8001dac:	61bb      	str	r3, [r7, #24]
    rbpeek(&manip->q0, &q);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f107 020c 	add.w	r2, r7, #12
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 f95a 	bl	8003070 <rbpeek>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    memcpy(&encoding_q0_d, &q, sizeof q);
 8001dbe:	617b      	str	r3, [r7, #20]
    rbpeek(&manip->q1, &q);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	332c      	adds	r3, #44	; 0x2c
 8001dc4:	f107 020c 	add.w	r2, r7, #12
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 f950 	bl	8003070 <rbpeek>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    memcpy(&encoding_q1_d, &q, sizeof q);
 8001dd2:	613b      	str	r3, [r7, #16]
    timestamp = HAL_GetTick();
 8001dd4:	f001 fdf2 	bl	80039bc <HAL_GetTick>
 8001dd8:	6238      	str	r0, [r7, #32]
    //sprintf(tx_data, "%X:%X:%X:%X:%X\n", (unsigned long long int) timestamp, encoding_q0, encoding_q1, encoding_q0_d, encoding_q1_d); /*Timestamp:q0:q1*/
    sprintf(tx_data, "0x%08x:0x%08x\n", encoding_q0  , encoding_q1);
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	490c      	ldr	r1, [pc, #48]	; (8001e10 <log_data+0xbc>)
 8001de0:	480a      	ldr	r0, [pc, #40]	; (8001e0c <log_data+0xb8>)
 8001de2:	f006 fa75 	bl	80082d0 <siprintf>
    printf("%s \n",tx_data);
 8001de6:	4909      	ldr	r1, [pc, #36]	; (8001e0c <log_data+0xb8>)
 8001de8:	480a      	ldr	r0, [pc, #40]	; (8001e14 <log_data+0xc0>)
 8001dea:	f006 f9d3 	bl	8008194 <iprintf>
    fflush(stdout);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <log_data+0xc4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f005 fb3d 	bl	8007474 <fflush>
    HAL_UART_Transmit_DMA(huart, (uint8_t *) tx_data, sizeof tx_data); /* send encoder data for    purposes */
 8001dfa:	2216      	movs	r2, #22
 8001dfc:	4903      	ldr	r1, [pc, #12]	; (8001e0c <log_data+0xb8>)
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f004 f8d4 	bl	8005fac <HAL_UART_Transmit_DMA>
}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	; 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000274 	.word	0x20000274
 8001e10:	0800a730 	.word	0x0800a730
 8001e14:	0800a740 	.word	0x0800a740
 8001e18:	20000010 	.word	0x20000010
 8001e1c:	00000000 	.word	0x00000000

08001e20 <setup_encoders>:
- TIM_HandleTypeDef *htim
@outputs: void
@#
*/

void setup_encoders(TIM_HandleTypeDef *htim){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	const uint32_t clock_freq = 84000000;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <setup_encoders+0x78>)
 8001e2a:	60fb      	str	r3, [r7, #12]
	uint16_t ARR;
	ARR = (T_S*clock_freq)/PRESCALER_ENCODER;
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f7fe fb81 	bl	8000534 <__aeabi_ui2d>
 8001e32:	a317      	add	r3, pc, #92	; (adr r3, 8001e90 <setup_encoders+0x70>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fbf6 	bl	8000628 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <setup_encoders+0x7c>)
 8001e4a:	f7fe fd17 	bl	800087c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe febf 	bl	8000bd8 <__aeabi_d2uiz>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_PRESCALER(htim, PRESCALER_ENCODER);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2210      	movs	r2, #16
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	897a      	ldrh	r2, [r7, #10]
 8001e6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e6e:	897a      	ldrh	r2, [r7, #10]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]
	htim->Instance->EGR = TIM_EGR_UG;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f003 f999 	bl	80051b4 <HAL_TIM_Base_Start_IT>
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	f3af 8000 	nop.w
 8001e90:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e94:	3f60624d 	.word	0x3f60624d
 8001e98:	0501bd00 	.word	0x0501bd00
 8001e9c:	40300000 	.word	0x40300000

08001ea0 <PID_controller_position>:

@outputs:
- void;
@#
*/
void PID_controller_position(man_t *manip, pid_controller_t *pid1,pid_controller_t *pid2, float *u , float setpoint){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6178      	str	r0, [r7, #20]
 8001ea8:	6139      	str	r1, [r7, #16]
 8001eaa:	60fa      	str	r2, [r7, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	ed87 0a01 	vstr	s0, [r7, #4]

	float set_point1,set_point2,measure1, measure2,u0,u1,tc0,tc1;

	rbpeek(&manip->q0,&set_point1);
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 f8d8 	bl	8003070 <rbpeek>
	rbpeek(&manip->q1,&set_point2);
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	332c      	adds	r3, #44	; 0x2c
 8001ec4:	f107 0220 	add.w	r2, r7, #32
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f001 f8d0 	bl	8003070 <rbpeek>



	dq_actual0=set_point1;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	4a81      	ldr	r2, [pc, #516]	; (80020d8 <PID_controller_position+0x238>)
 8001ed4:	6013      	str	r3, [r2, #0]
	//ddq_actual1=set_point2;


	rblast(&manip->q0_actual,&measure1);
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8001edc:	f107 021c 	add.w	r2, r7, #28
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 f8e8 	bl	80030b8 <rblast>
	rblast(&manip->q1_actual,&measure2);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001eee:	f107 0218 	add.w	r2, r7, #24
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 f8df 	bl	80030b8 <rblast>

	disp1=measure1;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	4a77      	ldr	r2, [pc, #476]	; (80020dc <PID_controller_position+0x23c>)
 8001efe:	6013      	str	r3, [r2, #0]
	disp2=measure2;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	4a77      	ldr	r2, [pc, #476]	; (80020e0 <PID_controller_position+0x240>)
 8001f04:	6013      	str	r3, [r2, #0]


	PID_update(pid1,set_point1, measure1,T_C);
 8001f06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f0e:	ed9f 1a75 	vldr	s2, [pc, #468]	; 80020e4 <PID_controller_position+0x244>
 8001f12:	eef0 0a47 	vmov.f32	s1, s14
 8001f16:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1a:	6938      	ldr	r0, [r7, #16]
 8001f1c:	f000 ff6e 	bl	8002dfc <PID_update>
	PID_update(pid2,set_point2, measure2,T_C);
 8001f20:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f24:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f28:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 80020e4 <PID_controller_position+0x244>
 8001f2c:	eef0 0a47 	vmov.f32	s1, s14
 8001f30:	eeb0 0a67 	vmov.f32	s0, s15
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 ff61 	bl	8002dfc <PID_update>



	//printf("%d ;%f ; %f ; %f \n",count ,setpoint ,measure2 ,pid1->out );

	*u=pid1->out;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	601a      	str	r2, [r3, #0]
	*(u+1)=pid2->out;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3304      	adds	r3, #4
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f4a:	601a      	str	r2, [r3, #0]

    if (ABS(u[0]-measure1)<0.01){
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	ed93 7a00 	vldr	s14, [r3]
 8001f52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5a:	eef0 7ae7 	vabs.f32	s15, s15
 8001f5e:	ee17 0a90 	vmov	r0, s15
 8001f62:	f7fe fb09 	bl	8000578 <__aeabi_f2d>
 8001f66:	a356      	add	r3, pc, #344	; (adr r3, 80020c0 <PID_controller_position+0x220>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fdce 	bl	8000b0c <__aeabi_dcmplt>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <PID_controller_position+0xdc>
    	tc0= 1000000;
 8001f76:	4b5c      	ldr	r3, [pc, #368]	; (80020e8 <PID_controller_position+0x248>)
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
 8001f7a:	e02c      	b.n	8001fd6 <PID_controller_position+0x136>
    }else{
    tc0 = sqrt(2*M_PI*ABS(u[0]-measure1)/0.4);//1.05
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	ed93 7a00 	vldr	s14, [r3]
 8001f82:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8a:	eef0 7ae7 	vabs.f32	s15, s15
 8001f8e:	ee17 0a90 	vmov	r0, s15
 8001f92:	f7fe faf1 	bl	8000578 <__aeabi_f2d>
 8001f96:	a34c      	add	r3, pc, #304	; (adr r3, 80020c8 <PID_controller_position+0x228>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe fb44 	bl	8000628 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	a349      	add	r3, pc, #292	; (adr r3, 80020d0 <PID_controller_position+0x230>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fc65 	bl	800087c <__aeabi_ddiv>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	ec43 2b17 	vmov	d7, r2, r3
 8001fba:	eeb0 0a47 	vmov.f32	s0, s14
 8001fbe:	eef0 0a67 	vmov.f32	s1, s15
 8001fc2:	f008 fa9f 	bl	800a504 <sqrt>
 8001fc6:	ec53 2b10 	vmov	r2, r3, d0
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fe23 	bl	8000c18 <__aeabi_d2f>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	637b      	str	r3, [r7, #52]	; 0x34
    }

   // fflush(stdout);
    if (ABS(u[1]- measure2)<0.01){
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	ed93 7a00 	vldr	s14, [r3]
 8001fde:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe6:	eef0 7ae7 	vabs.f32	s15, s15
 8001fea:	ee17 0a90 	vmov	r0, s15
 8001fee:	f7fe fac3 	bl	8000578 <__aeabi_f2d>
 8001ff2:	a333      	add	r3, pc, #204	; (adr r3, 80020c0 <PID_controller_position+0x220>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	f7fe fd88 	bl	8000b0c <__aeabi_dcmplt>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <PID_controller_position+0x168>
        	tc1= 1000000;
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <PID_controller_position+0x248>)
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
 8002006:	e02d      	b.n	8002064 <PID_controller_position+0x1c4>
        }else{
        tc1 = sqrt(2*M_PI*ABS(u[1]-measure2)/0.4);   //1.5 ----> come se fosse un jerk
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3304      	adds	r3, #4
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	edd7 7a06 	vldr	s15, [r7, #24]
 8002014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002018:	eef0 7ae7 	vabs.f32	s15, s15
 800201c:	ee17 0a90 	vmov	r0, s15
 8002020:	f7fe faaa 	bl	8000578 <__aeabi_f2d>
 8002024:	a328      	add	r3, pc, #160	; (adr r3, 80020c8 <PID_controller_position+0x228>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fafd 	bl	8000628 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	a326      	add	r3, pc, #152	; (adr r3, 80020d0 <PID_controller_position+0x230>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fc1e 	bl	800087c <__aeabi_ddiv>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	ec43 2b17 	vmov	d7, r2, r3
 8002048:	eeb0 0a47 	vmov.f32	s0, s14
 800204c:	eef0 0a67 	vmov.f32	s1, s15
 8002050:	f008 fa58 	bl	800a504 <sqrt>
 8002054:	ec53 2b10 	vmov	r2, r3, d0
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f7fe fddc 	bl	8000c18 <__aeabi_d2f>
 8002060:	4603      	mov	r3, r0
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
        }


    u0=(u[0]-measure1)/tc0;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	ed93 7a00 	vldr	s14, [r3]
 800206a:	edd7 7a07 	vldr	s15, [r7, #28]
 800206e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002072:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800207a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    u1=(u[1]-measure2)/tc1;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3304      	adds	r3, #4
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	edd7 7a06 	vldr	s15, [r7, #24]
 800208a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800208e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002096:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    *u=u0;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800209e:	601a      	str	r2, [r3, #0]
    *(u+1)=u1;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3304      	adds	r3, #4
 80020a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020a6:	601a      	str	r2, [r3, #0]


    ddq_actual0=pid1->out;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ac:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <PID_controller_position+0x24c>)
 80020ae:	6013      	str	r3, [r2, #0]
    ddq_actual1=pid2->out;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <PID_controller_position+0x250>)
 80020b6:	6013      	str	r3, [r2, #0]



}
 80020b8:	bf00      	nop
 80020ba:	3738      	adds	r7, #56	; 0x38
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	47ae147b 	.word	0x47ae147b
 80020c4:	3f847ae1 	.word	0x3f847ae1
 80020c8:	54442d18 	.word	0x54442d18
 80020cc:	401921fb 	.word	0x401921fb
 80020d0:	9999999a 	.word	0x9999999a
 80020d4:	3fd99999 	.word	0x3fd99999
 80020d8:	2000064c 	.word	0x2000064c
 80020dc:	2000063c 	.word	0x2000063c
 80020e0:	20000640 	.word	0x20000640
 80020e4:	3c23d70a 	.word	0x3c23d70a
 80020e8:	49742400 	.word	0x49742400
 80020ec:	20000650 	.word	0x20000650
 80020f0:	20000654 	.word	0x20000654

080020f4 <PID_controller_velocity>:
@outputs:
- void;
@#
*/

void PID_controller_velocity(man_t *manip, pid_controller_t *pid1,pid_controller_t *pid2, float *u , float setpoint){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6178      	str	r0, [r7, #20]
 80020fc:	6139      	str	r1, [r7, #16]
 80020fe:	60fa      	str	r2, [r7, #12]
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	ed87 0a01 	vstr	s0, [r7, #4]

	float set_point1,set_point2,measure1, measure2;

	rbpeek(&manip->dq0,&set_point1);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3358      	adds	r3, #88	; 0x58
 800210a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f000 ffad 	bl	8003070 <rbpeek>
	rbpeek(&manip->dq1,&set_point2);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3384      	adds	r3, #132	; 0x84
 800211a:	f107 0220 	add.w	r2, r7, #32
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f000 ffa5 	bl	8003070 <rbpeek>

	//set_point1 = 0;
	//set_point2 = setpoint;

	dq_actual0=set_point1;
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	4a28      	ldr	r2, [pc, #160]	; (80021cc <PID_controller_velocity+0xd8>)
 800212a:	6013      	str	r3, [r2, #0]
	//ddq_actual1=set_point2;



	rblast(&manip->dq0_actual,&measure1);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002132:	f107 021c 	add.w	r2, r7, #28
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f000 ffbd 	bl	80030b8 <rblast>
	rblast(&manip->dq1_actual,&measure2);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002144:	f107 0218 	add.w	r2, r7, #24
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f000 ffb4 	bl	80030b8 <rblast>

	rblast(&manip->q0_actual,&disp1);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002156:	491e      	ldr	r1, [pc, #120]	; (80021d0 <PID_controller_velocity+0xdc>)
 8002158:	4618      	mov	r0, r3
 800215a:	f000 ffad 	bl	80030b8 <rblast>
	rblast(&manip->q1_actual,&disp2);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002164:	491b      	ldr	r1, [pc, #108]	; (80021d4 <PID_controller_velocity+0xe0>)
 8002166:	4618      	mov	r0, r3
 8002168:	f000 ffa6 	bl	80030b8 <rblast>


	PID_update(pid1,set_point1, measure1,T_C);
 800216c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002170:	ed97 7a07 	vldr	s14, [r7, #28]
 8002174:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80021d8 <PID_controller_velocity+0xe4>
 8002178:	eef0 0a47 	vmov.f32	s1, s14
 800217c:	eeb0 0a67 	vmov.f32	s0, s15
 8002180:	6938      	ldr	r0, [r7, #16]
 8002182:	f000 fe3b 	bl	8002dfc <PID_update>
	PID_update(pid2,set_point2, measure2,T_C);
 8002186:	edd7 7a08 	vldr	s15, [r7, #32]
 800218a:	ed97 7a06 	vldr	s14, [r7, #24]
 800218e:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80021d8 <PID_controller_velocity+0xe4>
 8002192:	eef0 0a47 	vmov.f32	s1, s14
 8002196:	eeb0 0a67 	vmov.f32	s0, s15
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fe2e 	bl	8002dfc <PID_update>

	ddq_actual0=pid1->out;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <PID_controller_velocity+0xe8>)
 80021a6:	6013      	str	r3, [r2, #0]
	ddq_actual1=pid2->out;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <PID_controller_velocity+0xec>)
 80021ae:	6013      	str	r3, [r2, #0]


	//printf("%d ;%f ; %f ; %f \n",count ,setpoint ,measure2 ,pid1->out );

	*u=pid1->out;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	601a      	str	r2, [r3, #0]
	*(u+1)=pid2->out;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	3304      	adds	r3, #4
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021c0:	601a      	str	r2, [r3, #0]
	//*(u)=0;


}
 80021c2:	bf00      	nop
 80021c4:	3728      	adds	r7, #40	; 0x28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000064c 	.word	0x2000064c
 80021d0:	2000063c 	.word	0x2000063c
 80021d4:	20000640 	.word	0x20000640
 80021d8:	3c23d70a 	.word	0x3c23d70a
 80021dc:	20000650 	.word	0x20000650
 80021e0:	20000654 	.word	0x20000654
 80021e4:	00000000 	.word	0x00000000

080021e8 <homing>:
@outputs:
- void;
@#
*/

void homing(man_t *manip,TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, pid_controller_t *pid_v1,pid_controller_t *pid_v2, pid_controller_t *pid_p1, pid_controller_t *pid_p2){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]

    float u[2]={0, 0};
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
    float pos[2]={0, 0};
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
    float pos_real[2]={-2.11350, 2.39353 };
 800220e:	4ab0      	ldr	r2, [pc, #704]	; (80024d0 <homing+0x2e8>)
 8002210:	f107 0310 	add.w	r3, r7, #16
 8002214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002218:	e883 0003 	stmia.w	r3, {r0, r1}

    is_home1=1;
 800221c:	4bad      	ldr	r3, [pc, #692]	; (80024d4 <homing+0x2ec>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
    is_home2=1;
 8002222:	4bad      	ldr	r3, [pc, #692]	; (80024d8 <homing+0x2f0>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]

    limit_switch1=0;
 8002228:	4bac      	ldr	r3, [pc, #688]	; (80024dc <homing+0x2f4>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
    limit_switch2=0;
 800222e:	4bac      	ldr	r3, [pc, #688]	; (80024e0 <homing+0x2f8>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

     offset1=0;
 8002234:	4bab      	ldr	r3, [pc, #684]	; (80024e4 <homing+0x2fc>)
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
     offset2=0;
 800223c:	4baa      	ldr	r3, [pc, #680]	; (80024e8 <homing+0x300>)
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

	/*apply velocity input*/
	while(!limit_switch1 ){
 8002244:	e01c      	b.n	8002280 <homing+0x98>

	rbpush(&manip->dq0,-0.7);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3358      	adds	r3, #88	; 0x58
 800224a:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80024ec <homing+0x304>
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fec4 	bl	8002fdc <rbpush>

	 update_speeds(manip);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff fbe1 	bl	8001a1c <update_speeds>
	 PID_controller_velocity( manip, pid_v1, pid_v2, u ,0);
 800225a:	f107 0320 	add.w	r3, r7, #32
 800225e:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 80024f0 <homing+0x308>
 8002262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002264:	6839      	ldr	r1, [r7, #0]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7ff ff44 	bl	80020f4 <PID_controller_velocity>
	 apply_velocity_input(htim1, htim2, u);
 800226c:	f107 0320 	add.w	r3, r7, #32
 8002270:	461a      	mov	r2, r3
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	68b8      	ldr	r0, [r7, #8]
 8002276:	f7ff fc33 	bl	8001ae0 <apply_velocity_input>

	 HAL_Delay((uint32_t) (T_C*1000));
 800227a:	200a      	movs	r0, #10
 800227c:	f001 fbaa 	bl	80039d4 <HAL_Delay>
	while(!limit_switch1 ){
 8002280:	4b96      	ldr	r3, [pc, #600]	; (80024dc <homing+0x2f4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0de      	beq.n	8002246 <homing+0x5e>

	}



	u[0]=0;
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
	u[1]=0;
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
	apply_velocity_input(htim1, htim2, u);
 8002294:	f107 0320 	add.w	r3, r7, #32
 8002298:	461a      	mov	r2, r3
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	68b8      	ldr	r0, [r7, #8]
 800229e:	f7ff fc1f 	bl	8001ae0 <apply_velocity_input>

	while(!limit_switch2 ){
 80022a2:	e023      	b.n	80022ec <homing+0x104>


	rbpush(&manip->dq0,0);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3358      	adds	r3, #88	; 0x58
 80022a8:	ed9f 0a91 	vldr	s0, [pc, #580]	; 80024f0 <homing+0x308>
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fe95 	bl	8002fdc <rbpush>
    rbpush(&manip->dq1,0.5);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3384      	adds	r3, #132	; 0x84
 80022b6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fe8e 	bl	8002fdc <rbpush>

		 update_speeds(manip);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff fbab 	bl	8001a1c <update_speeds>
		 PID_controller_velocity( manip, pid_v1, pid_v2, u ,0);
 80022c6:	f107 0320 	add.w	r3, r7, #32
 80022ca:	ed9f 0a89 	vldr	s0, [pc, #548]	; 80024f0 <homing+0x308>
 80022ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d0:	6839      	ldr	r1, [r7, #0]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff ff0e 	bl	80020f4 <PID_controller_velocity>
		 apply_velocity_input(htim1, htim2, u);
 80022d8:	f107 0320 	add.w	r3, r7, #32
 80022dc:	461a      	mov	r2, r3
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	68b8      	ldr	r0, [r7, #8]
 80022e2:	f7ff fbfd 	bl	8001ae0 <apply_velocity_input>

		 HAL_Delay((uint32_t) (T_C*1000));
 80022e6:	200a      	movs	r0, #10
 80022e8:	f001 fb74 	bl	80039d4 <HAL_Delay>
	while(!limit_switch2 ){
 80022ec:	4b7c      	ldr	r3, [pc, #496]	; (80024e0 <homing+0x2f8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0d7      	beq.n	80022a4 <homing+0xbc>

		}



	printf(" primo while \n");
 80022f4:	487f      	ldr	r0, [pc, #508]	; (80024f4 <homing+0x30c>)
 80022f6:	f005 ffd3 	bl	80082a0 <puts>
	fflush(stdout);
 80022fa:	4b7f      	ldr	r3, [pc, #508]	; (80024f8 <homing+0x310>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4618      	mov	r0, r3
 8002302:	f005 f8b7 	bl	8007474 <fflush>

	limit_switch1=0;
 8002306:	4b75      	ldr	r3, [pc, #468]	; (80024dc <homing+0x2f4>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
	limit_switch2=0;
 800230c:	4b74      	ldr	r3, [pc, #464]	; (80024e0 <homing+0x2f8>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]

	u[0]=0;
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
	u[1]=0;
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
	apply_velocity_input(htim1, htim2, u);
 800231e:	f107 0320 	add.w	r3, r7, #32
 8002322:	461a      	mov	r2, r3
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	68b8      	ldr	r0, [r7, #8]
 8002328:	f7ff fbda 	bl	8001ae0 <apply_velocity_input>

	printf(" WHILE: offset2: %f \n ",offset2);
 800232c:	4b6e      	ldr	r3, [pc, #440]	; (80024e8 <homing+0x300>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f921 	bl	8000578 <__aeabi_f2d>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4870      	ldr	r0, [pc, #448]	; (80024fc <homing+0x314>)
 800233c:	f005 ff2a 	bl	8008194 <iprintf>
	fflush(stdout);
 8002340:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <homing+0x310>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4618      	mov	r0, r3
 8002348:	f005 f894 	bl	8007474 <fflush>

    offset1-=pos_real[0];
 800234c:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <homing+0x2fc>)
 800234e:	ed93 7a00 	vldr	s14, [r3]
 8002352:	edd7 7a04 	vldr	s15, [r7, #16]
 8002356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235a:	4b62      	ldr	r3, [pc, #392]	; (80024e4 <homing+0x2fc>)
 800235c:	edc3 7a00 	vstr	s15, [r3]
    offset2-=pos_real[1];
 8002360:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <homing+0x300>)
 8002362:	ed93 7a00 	vldr	s14, [r3]
 8002366:	edd7 7a05 	vldr	s15, [r7, #20]
 800236a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236e:	4b5e      	ldr	r3, [pc, #376]	; (80024e8 <homing+0x300>)
 8002370:	edc3 7a00 	vstr	s15, [r3]
    rblast(&manip->q0_actual,&pos[0]);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800237a:	f107 0218 	add.w	r2, r7, #24
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fe99 	bl	80030b8 <rblast>
    rblast(&manip->q1_actual,&pos[1]);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 800238c:	f107 0318 	add.w	r3, r7, #24
 8002390:	3304      	adds	r3, #4
 8002392:	4619      	mov	r1, r3
 8002394:	4610      	mov	r0, r2
 8002396:	f000 fe8f 	bl	80030b8 <rblast>


    printf("pos_real[1]: %f \n",pos_real[1]);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8eb 	bl	8000578 <__aeabi_f2d>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4856      	ldr	r0, [pc, #344]	; (8002500 <homing+0x318>)
 80023a8:	f005 fef4 	bl	8008194 <iprintf>
    printf("pos[0]: %f \n",pos[0]);
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f8e2 	bl	8000578 <__aeabi_f2d>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4852      	ldr	r0, [pc, #328]	; (8002504 <homing+0x31c>)
 80023ba:	f005 feeb 	bl	8008194 <iprintf>
    printf("pos[1]: %f \n",pos[1]);
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f8d9 	bl	8000578 <__aeabi_f2d>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	484f      	ldr	r0, [pc, #316]	; (8002508 <homing+0x320>)
 80023cc:	f005 fee2 	bl	8008194 <iprintf>
    fflush(stdout);
 80023d0:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <homing+0x310>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f005 f84c 	bl	8007474 <fflush>

	while(1){

	if((ABS(pos[0])> 0.001) || (ABS(pos[1])> 0.001)){
 80023dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80023e0:	eef0 7ae7 	vabs.f32	s15, s15
 80023e4:	ee17 0a90 	vmov	r0, s15
 80023e8:	f7fe f8c6 	bl	8000578 <__aeabi_f2d>
 80023ec:	a336      	add	r3, pc, #216	; (adr r3, 80024c8 <homing+0x2e0>)
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f7fe fba9 	bl	8000b48 <__aeabi_dcmpgt>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10f      	bne.n	800241c <homing+0x234>
 80023fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002400:	eef0 7ae7 	vabs.f32	s15, s15
 8002404:	ee17 0a90 	vmov	r0, s15
 8002408:	f7fe f8b6 	bl	8000578 <__aeabi_f2d>
 800240c:	a32e      	add	r3, pc, #184	; (adr r3, 80024c8 <homing+0x2e0>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fe fb99 	bl	8000b48 <__aeabi_dcmpgt>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d035      	beq.n	8002488 <homing+0x2a0>

		PID_controller_position( manip, pid_p1, pid_p2, u ,0);
 800241c:	f107 0320 	add.w	r3, r7, #32
 8002420:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80024f0 <homing+0x308>
 8002424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002426:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff fd39 	bl	8001ea0 <PID_controller_position>
		apply_velocity_input(htim1, htim2,  u);
 800242e:	f107 0320 	add.w	r3, r7, #32
 8002432:	461a      	mov	r2, r3
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	68b8      	ldr	r0, [r7, #8]
 8002438:	f7ff fb52 	bl	8001ae0 <apply_velocity_input>
		rblast(&manip->q0_actual,&pos[0]);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002442:	f107 0218 	add.w	r2, r7, #24
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fe35 	bl	80030b8 <rblast>
		rblast(&manip->q1_actual,&pos[1]);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 8002454:	f107 0318 	add.w	r3, r7, #24
 8002458:	3304      	adds	r3, #4
 800245a:	4619      	mov	r1, r3
 800245c:	4610      	mov	r0, r2
 800245e:	f000 fe2b 	bl	80030b8 <rblast>
		HAL_Delay((uint32_t) (T_C*1000));
 8002462:	200a      	movs	r0, #10
 8002464:	f001 fab6 	bl	80039d4 <HAL_Delay>

		  printf("pos[0]: %f \n",pos[0]);
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f884 	bl	8000578 <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4823      	ldr	r0, [pc, #140]	; (8002504 <homing+0x31c>)
 8002476:	f005 fe8d 	bl	8008194 <iprintf>
		  fflush(stdout);
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <homing+0x310>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4618      	mov	r0, r3
 8002482:	f004 fff7 	bl	8007474 <fflush>
	if((ABS(pos[0])> 0.001) || (ABS(pos[1])> 0.001)){
 8002486:	e7a9      	b.n	80023dc <homing+0x1f4>
	 }
	}



	u[0]=0;
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
	u[1]=0;
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
	apply_velocity_input(htim1, htim2, u);
 8002494:	f107 0320 	add.w	r3, r7, #32
 8002498:	461a      	mov	r2, r3
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	68b8      	ldr	r0, [r7, #8]
 800249e:	f7ff fb1f 	bl	8001ae0 <apply_velocity_input>

	//is_home1=0;
	//is_home2=0;

	limit_switch1=0;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <homing+0x2f4>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
	limit_switch2=0;
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <homing+0x2f8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
	printf("  end homing \n");
 80024ae:	4817      	ldr	r0, [pc, #92]	; (800250c <homing+0x324>)
 80024b0:	f005 fef6 	bl	80082a0 <puts>
	fflush(stdout);
 80024b4:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <homing+0x310>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 ffda 	bl	8007474 <fflush>
}
 80024c0:	bf00      	nop
 80024c2:	3728      	adds	r7, #40	; 0x28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80024cc:	3f50624d 	.word	0x3f50624d
 80024d0:	0800a7b4 	.word	0x0800a7b4
 80024d4:	20000660 	.word	0x20000660
 80024d8:	20000661 	.word	0x20000661
 80024dc:	2000065c 	.word	0x2000065c
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000644 	.word	0x20000644
 80024e8:	20000648 	.word	0x20000648
 80024ec:	bf333333 	.word	0xbf333333
 80024f0:	00000000 	.word	0x00000000
 80024f4:	0800a748 	.word	0x0800a748
 80024f8:	20000010 	.word	0x20000010
 80024fc:	0800a758 	.word	0x0800a758
 8002500:	0800a770 	.word	0x0800a770
 8002504:	0800a784 	.word	0x0800a784
 8002508:	0800a794 	.word	0x0800a794
 800250c:	0800a7a4 	.word	0x0800a7a4

08002510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08e      	sub	sp, #56	; 0x38
 8002514:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  rate_t rate;
  float v[2], v_est, a_est;
  char *data = "\n";
 8002516:	4b75      	ldr	r3, [pc, #468]	; (80026ec <main+0x1dc>)
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
  float i = 1*T_C;
 800251a:	4b75      	ldr	r3, [pc, #468]	; (80026f0 <main+0x1e0>)
 800251c:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800251e:	f001 f9e7 	bl	80038f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002522:	f000 f92f 	bl	8002784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002526:	f000 fb67 	bl	8002bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 800252a:	f000 fb3d 	bl	8002ba8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800252e:	f000 fb11 	bl	8002b54 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002532:	f000 f9e9 	bl	8002908 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002536:	f000 fa3b 	bl	80029b0 <MX_TIM4_Init>
  MX_TIM2_Init();
 800253a:	f000 f98d 	bl	8002858 <MX_TIM2_Init>
  MX_TIM5_Init();
 800253e:	f000 fa8b 	bl	8002a58 <MX_TIM5_Init>
  MX_TIM10_Init();
 8002542:	f000 fae3 	bl	8002b0c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip, &htim3, &htim4,&htim2,&htim5); /* initialize the manipulator struct */
 8002546:	4b6b      	ldr	r3, [pc, #428]	; (80026f4 <main+0x1e4>)
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	4b6b      	ldr	r3, [pc, #428]	; (80026f8 <main+0x1e8>)
 800254c:	4a6b      	ldr	r2, [pc, #428]	; (80026fc <main+0x1ec>)
 800254e:	496c      	ldr	r1, [pc, #432]	; (8002700 <main+0x1f0>)
 8002550:	486c      	ldr	r0, [pc, #432]	; (8002704 <main+0x1f4>)
 8002552:	f7fe ff0b 	bl	800136c <init_man>

  /* PID controllers*/

  PID_init(&pid_pos1,KP_P1,TI_P1,TD_P1,N1,0); /*initialize the PID controllers for position*/
 8002556:	2100      	movs	r1, #0
 8002558:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 800255c:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8002708 <main+0x1f8>
 8002560:	eddf 0a6a 	vldr	s1, [pc, #424]	; 800270c <main+0x1fc>
 8002564:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8002710 <main+0x200>
 8002568:	486a      	ldr	r0, [pc, #424]	; (8002714 <main+0x204>)
 800256a:	f000 fbe4 	bl	8002d36 <PID_init>
  PID_init(&pid_pos2,KP_P2,TI_P2,TD_P2,N2,0);
 800256e:	2100      	movs	r1, #0
 8002570:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8002574:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002708 <main+0x1f8>
 8002578:	eddf 0a67 	vldr	s1, [pc, #412]	; 8002718 <main+0x208>
 800257c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800271c <main+0x20c>
 8002580:	4867      	ldr	r0, [pc, #412]	; (8002720 <main+0x210>)
 8002582:	f000 fbd8 	bl	8002d36 <PID_init>

  set_limit(&pid_pos1,-4*M_PI,4*M_PI,-M_PI/2,M_PI/2);/*initialize the PID controllers output limits*/
 8002586:	eddf 1a67 	vldr	s3, [pc, #412]	; 8002724 <main+0x214>
 800258a:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8002728 <main+0x218>
 800258e:	eddf 0a67 	vldr	s1, [pc, #412]	; 800272c <main+0x21c>
 8002592:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8002730 <main+0x220>
 8002596:	485f      	ldr	r0, [pc, #380]	; (8002714 <main+0x204>)
 8002598:	f000 fc10 	bl	8002dbc <set_limit>
  set_limit(&pid_pos2,-8*M_PI,8*M_PI,-6*(M_PI/2),6*(M_PI/2));
 800259c:	eddf 1a65 	vldr	s3, [pc, #404]	; 8002734 <main+0x224>
 80025a0:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8002738 <main+0x228>
 80025a4:	eddf 0a65 	vldr	s1, [pc, #404]	; 800273c <main+0x22c>
 80025a8:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8002740 <main+0x230>
 80025ac:	485c      	ldr	r0, [pc, #368]	; (8002720 <main+0x210>)
 80025ae:	f000 fc05 	bl	8002dbc <set_limit>

  /* PI controllers*/
  PID_init(&pid_vel1,KP_V1,TI_V1,0,N1,1); /*initialize the PI controllers for velocity*/
 80025b2:	2101      	movs	r1, #1
 80025b4:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80025b8:	ed9f 1a62 	vldr	s2, [pc, #392]	; 8002744 <main+0x234>
 80025bc:	eddf 0a62 	vldr	s1, [pc, #392]	; 8002748 <main+0x238>
 80025c0:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800274c <main+0x23c>
 80025c4:	4862      	ldr	r0, [pc, #392]	; (8002750 <main+0x240>)
 80025c6:	f000 fbb6 	bl	8002d36 <PID_init>
  PID_init(&pid_vel2,KP_V2,TI_V2,0,N2,1);
 80025ca:	2101      	movs	r1, #1
 80025cc:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80025d0:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8002744 <main+0x234>
 80025d4:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8002748 <main+0x238>
 80025d8:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800274c <main+0x23c>
 80025dc:	485d      	ldr	r0, [pc, #372]	; (8002754 <main+0x244>)
 80025de:	f000 fbaa 	bl	8002d36 <PID_init>

  set_limit(&pid_vel1,-4*M_PI,4*M_PI,-M_PI/2,M_PI/2);/*initialize the PI controllers output limits*/
 80025e2:	eddf 1a50 	vldr	s3, [pc, #320]	; 8002724 <main+0x214>
 80025e6:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8002728 <main+0x218>
 80025ea:	eddf 0a50 	vldr	s1, [pc, #320]	; 800272c <main+0x21c>
 80025ee:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8002730 <main+0x220>
 80025f2:	4857      	ldr	r0, [pc, #348]	; (8002750 <main+0x240>)
 80025f4:	f000 fbe2 	bl	8002dbc <set_limit>
  set_limit(&pid_vel2,-8*M_PI,8*M_PI,-6*(M_PI/2),6*(M_PI/2));
 80025f8:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8002734 <main+0x224>
 80025fc:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8002738 <main+0x228>
 8002600:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800273c <main+0x22c>
 8002604:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8002740 <main+0x230>
 8002608:	4852      	ldr	r0, [pc, #328]	; (8002754 <main+0x244>)
 800260a:	f000 fbd7 	bl	8002dbc <set_limit>



  init_rate(&rate, (uint32_t) (T_C*1000)); /* initialize the rate struct */
 800260e:	f107 0314 	add.w	r3, r7, #20
 8002612:	210a      	movs	r1, #10
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff f85f 	bl	80016d8 <init_rate>
  rbclear(&timestamps);
 800261a:	484f      	ldr	r0, [pc, #316]	; (8002758 <main+0x248>)
 800261c:	f000 fdbc 	bl	8003198 <rbclear>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8002620:	2278      	movs	r2, #120	; 0x78
 8002622:	494e      	ldr	r1, [pc, #312]	; (800275c <main+0x24c>)
 8002624:	484e      	ldr	r0, [pc, #312]	; (8002760 <main+0x250>)
 8002626:	f003 fd3f 	bl	80060a8 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* start timers */
  start_timers(&htim3, &htim4, &htim2, &htim5);
 800262a:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <main+0x1e4>)
 800262c:	4a32      	ldr	r2, [pc, #200]	; (80026f8 <main+0x1e8>)
 800262e:	4933      	ldr	r1, [pc, #204]	; (80026fc <main+0x1ec>)
 8002630:	4833      	ldr	r0, [pc, #204]	; (8002700 <main+0x1f0>)
 8002632:	f7ff fb65 	bl	8001d00 <start_timers>
  setup_encoders(&htim10);
 8002636:	484b      	ldr	r0, [pc, #300]	; (8002764 <main+0x254>)
 8002638:	f7ff fbf2 	bl	8001e20 <setup_encoders>
  while (1)
  {



  if (homing_triggered){
 800263c:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <main+0x258>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d012      	beq.n	800266a <main+0x15a>
	  //is_home1=1;
	  //is_home2=1;
	  homing(&manip, manip.htim_motor1, manip.htim_motor2, &pid_vel1, &pid_vel2,&pid_pos1,&pid_pos2);
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <main+0x1f4>)
 8002646:	f8d3 1290 	ldr.w	r1, [r3, #656]	; 0x290
 800264a:	4b2e      	ldr	r3, [pc, #184]	; (8002704 <main+0x1f4>)
 800264c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
 8002650:	4b33      	ldr	r3, [pc, #204]	; (8002720 <main+0x210>)
 8002652:	9302      	str	r3, [sp, #8]
 8002654:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <main+0x204>)
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <main+0x244>)
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <main+0x240>)
 800265e:	4829      	ldr	r0, [pc, #164]	; (8002704 <main+0x1f4>)
 8002660:	f7ff fdc2 	bl	80021e8 <homing>
	  homing_triggered=0;
 8002664:	4b40      	ldr	r3, [pc, #256]	; (8002768 <main+0x258>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]

  }



    update_speeds(&manip);
 800266a:	4826      	ldr	r0, [pc, #152]	; (8002704 <main+0x1f4>)
 800266c:	f7ff f9d6 	bl	8001a1c <update_speeds>
    /* log data */
    if(log_triggered){
 8002670:	4b3e      	ldr	r3, [pc, #248]	; (800276c <main+0x25c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00f      	beq.n	8002698 <main+0x188>
      log_data(&huart2, &manip);
 8002678:	4922      	ldr	r1, [pc, #136]	; (8002704 <main+0x1f4>)
 800267a:	4839      	ldr	r0, [pc, #228]	; (8002760 <main+0x250>)
 800267c:	f7ff fb6a 	bl	8001d54 <log_data>
      printf("logData");
 8002680:	483b      	ldr	r0, [pc, #236]	; (8002770 <main+0x260>)
 8002682:	f005 fd87 	bl	8008194 <iprintf>
      fflush(stdout);
 8002686:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <main+0x264>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4618      	mov	r0, r3
 800268e:	f004 fef1 	bl	8007474 <fflush>
      log_triggered = 0;
 8002692:	4b36      	ldr	r3, [pc, #216]	; (800276c <main+0x25c>)
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
    /* apply the inputs to the motors */




    setpoint=0;
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
   // ! debug NB ricorda di togliere il setpoint dal valore passato a pid e prenderlo direttamente da manip

     PID_controller_position( &manip, &pid_pos1, &pid_pos2, v ,setpoint);
 800269e:	f107 030c 	add.w	r3, r7, #12
 80026a2:	ed97 0a07 	vldr	s0, [r7, #28]
 80026a6:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <main+0x210>)
 80026a8:	491a      	ldr	r1, [pc, #104]	; (8002714 <main+0x204>)
 80026aa:	4816      	ldr	r0, [pc, #88]	; (8002704 <main+0x1f4>)
 80026ac:	f7ff fbf8 	bl	8001ea0 <PID_controller_position>




    rblast(&manip.q0_actual,&pos[0]);
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4830      	ldr	r0, [pc, #192]	; (8002778 <main+0x268>)
 80026b6:	f000 fcff 	bl	80030b8 <rblast>
    rblast(&manip.q1_actual,&pos[1]);
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	3304      	adds	r3, #4
 80026be:	4619      	mov	r1, r3
 80026c0:	482e      	ldr	r0, [pc, #184]	; (800277c <main+0x26c>)
 80026c2:	f000 fcf9 	bl	80030b8 <rblast>

    apply_velocity_input(&htim2, &htim5, v, pos);
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	f107 020c 	add.w	r2, r7, #12
 80026cc:	4909      	ldr	r1, [pc, #36]	; (80026f4 <main+0x1e4>)
 80026ce:	480a      	ldr	r0, [pc, #40]	; (80026f8 <main+0x1e8>)
 80026d0:	f7ff fa06 	bl	8001ae0 <apply_velocity_input>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    rate_sleep(&rate); /* wait with a fixed frequency */
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff f80e 	bl	80016fa <rate_sleep>
    //HAL_Delay((uint32_t) (T_C*1000));
    count++;
 80026de:	4b28      	ldr	r3, [pc, #160]	; (8002780 <main+0x270>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	4a26      	ldr	r2, [pc, #152]	; (8002780 <main+0x270>)
 80026e6:	6013      	str	r3, [r2, #0]
  {
 80026e8:	e7a8      	b.n	800263c <main+0x12c>
 80026ea:	bf00      	nop
 80026ec:	0800a7bc 	.word	0x0800a7bc
 80026f0:	3c23d70a 	.word	0x3c23d70a
 80026f4:	2000073c 	.word	0x2000073c
 80026f8:	20000664 	.word	0x20000664
 80026fc:	200006f4 	.word	0x200006f4
 8002700:	200006ac 	.word	0x200006ac
 8002704:	2000028c 	.word	0x2000028c
 8002708:	3bf5c28f 	.word	0x3bf5c28f
 800270c:	3d072b02 	.word	0x3d072b02
 8002710:	4019999a 	.word	0x4019999a
 8002714:	20000524 	.word	0x20000524
 8002718:	3d3020c5 	.word	0x3d3020c5
 800271c:	400acd9f 	.word	0x400acd9f
 8002720:	2000055c 	.word	0x2000055c
 8002724:	3fc90fdb 	.word	0x3fc90fdb
 8002728:	bfc90fdb 	.word	0xbfc90fdb
 800272c:	41490fdb 	.word	0x41490fdb
 8002730:	c1490fdb 	.word	0xc1490fdb
 8002734:	4116cbe4 	.word	0x4116cbe4
 8002738:	c116cbe4 	.word	0xc116cbe4
 800273c:	41c90fdb 	.word	0x41c90fdb
 8002740:	c1c90fdb 	.word	0xc1c90fdb
 8002744:	00000000 	.word	0x00000000
 8002748:	3f23d70a 	.word	0x3f23d70a
 800274c:	3e94fdf4 	.word	0x3e94fdf4
 8002750:	20000594 	.word	0x20000594
 8002754:	200005cc 	.word	0x200005cc
 8002758:	20000610 	.word	0x20000610
 800275c:	200001fc 	.word	0x200001fc
 8002760:	200007cc 	.word	0x200007cc
 8002764:	20000784 	.word	0x20000784
 8002768:	20000662 	.word	0x20000662
 800276c:	20000663 	.word	0x20000663
 8002770:	0800a7c0 	.word	0x0800a7c0
 8002774:	20000010 	.word	0x20000010
 8002778:	200003c0 	.word	0x200003c0
 800277c:	200003ec 	.word	0x200003ec
 8002780:	20000658 	.word	0x20000658

08002784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b094      	sub	sp, #80	; 0x50
 8002788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800278a:	f107 0320 	add.w	r3, r7, #32
 800278e:	2230      	movs	r2, #48	; 0x30
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f004 ffab 	bl	80076ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <SystemClock_Config+0xcc>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	4a27      	ldr	r2, [pc, #156]	; (8002850 <SystemClock_Config+0xcc>)
 80027b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b6:	6413      	str	r3, [r2, #64]	; 0x40
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <SystemClock_Config+0xcc>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027c4:	2300      	movs	r3, #0
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <SystemClock_Config+0xd0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a21      	ldr	r2, [pc, #132]	; (8002854 <SystemClock_Config+0xd0>)
 80027ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b1f      	ldr	r3, [pc, #124]	; (8002854 <SystemClock_Config+0xd0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027e0:	2302      	movs	r3, #2
 80027e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027e4:	2301      	movs	r3, #1
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027e8:	2310      	movs	r3, #16
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ec:	2302      	movs	r3, #2
 80027ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027f0:	2300      	movs	r3, #0
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80027f4:	2310      	movs	r3, #16
 80027f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80027f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80027fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80027fe:	2304      	movs	r3, #4
 8002800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002802:	2304      	movs	r3, #4
 8002804:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002806:	f107 0320 	add.w	r3, r7, #32
 800280a:	4618      	mov	r0, r3
 800280c:	f001 ffea 	bl	80047e4 <HAL_RCC_OscConfig>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002816:	f000 fa89 	bl	8002d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800281a:	230f      	movs	r3, #15
 800281c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800281e:	2302      	movs	r3, #2
 8002820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	2102      	movs	r1, #2
 8002836:	4618      	mov	r0, r3
 8002838:	f002 fa4c 	bl	8004cd4 <HAL_RCC_ClockConfig>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002842:	f000 fa73 	bl	8002d2c <Error_Handler>
  }
}
 8002846:	bf00      	nop
 8002848:	3750      	adds	r7, #80	; 0x50
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000

08002858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285e:	f107 0320 	add.w	r3, r7, #32
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	615a      	str	r2, [r3, #20]
 8002878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <MX_TIM2_Init+0xac>)
 800287c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002880:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <MX_TIM2_Init+0xac>)
 8002884:	2200      	movs	r2, #0
 8002886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <MX_TIM2_Init+0xac>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <MX_TIM2_Init+0xac>)
 8002890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002894:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <MX_TIM2_Init+0xac>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <MX_TIM2_Init+0xac>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028a2:	4818      	ldr	r0, [pc, #96]	; (8002904 <MX_TIM2_Init+0xac>)
 80028a4:	f002 fce8 	bl	8005278 <HAL_TIM_PWM_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80028ae:	f000 fa3d 	bl	8002d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028ba:	f107 0320 	add.w	r3, r7, #32
 80028be:	4619      	mov	r1, r3
 80028c0:	4810      	ldr	r0, [pc, #64]	; (8002904 <MX_TIM2_Init+0xac>)
 80028c2:	f003 faa3 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80028cc:	f000 fa2e 	bl	8002d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028d0:	2360      	movs	r3, #96	; 0x60
 80028d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	2200      	movs	r2, #0
 80028e4:	4619      	mov	r1, r3
 80028e6:	4807      	ldr	r0, [pc, #28]	; (8002904 <MX_TIM2_Init+0xac>)
 80028e8:	f002 ff74 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80028f2:	f000 fa1b 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028f6:	4803      	ldr	r0, [pc, #12]	; (8002904 <MX_TIM2_Init+0xac>)
 80028f8:	f000 fd88 	bl	800340c <HAL_TIM_MspPostInit>

}
 80028fc:	bf00      	nop
 80028fe:	3728      	adds	r7, #40	; 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000664 	.word	0x20000664

08002908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f004 fee9 	bl	80076ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002924:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <MX_TIM3_Init+0xa0>)
 8002926:	4a21      	ldr	r2, [pc, #132]	; (80029ac <MX_TIM3_Init+0xa4>)
 8002928:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800292a:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <MX_TIM3_Init+0xa0>)
 800292c:	2200      	movs	r2, #0
 800292e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <MX_TIM3_Init+0xa0>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <MX_TIM3_Init+0xa0>)
 8002938:	f649 4240 	movw	r2, #40000	; 0x9c40
 800293c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <MX_TIM3_Init+0xa0>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_TIM3_Init+0xa0>)
 8002946:	2200      	movs	r2, #0
 8002948:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800294a:	2303      	movs	r3, #3
 800294c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002952:	2301      	movs	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002962:	2301      	movs	r3, #1
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	4619      	mov	r1, r3
 8002974:	480c      	ldr	r0, [pc, #48]	; (80029a8 <MX_TIM3_Init+0xa0>)
 8002976:	f002 fd7f 	bl	8005478 <HAL_TIM_Encoder_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002980:	f000 f9d4 	bl	8002d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_TIM3_Init+0xa0>)
 8002992:	f003 fa3b 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800299c:	f000 f9c6 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	3730      	adds	r7, #48	; 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	200006ac 	.word	0x200006ac
 80029ac:	40000400 	.word	0x40000400

080029b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	; 0x30
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	2224      	movs	r2, #36	; 0x24
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fe95 	bl	80076ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029cc:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <MX_TIM4_Init+0xa0>)
 80029ce:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <MX_TIM4_Init+0xa4>)
 80029d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <MX_TIM4_Init+0xa0>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <MX_TIM4_Init+0xa0>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <MX_TIM4_Init+0xa0>)
 80029e0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80029e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <MX_TIM4_Init+0xa0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ec:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <MX_TIM4_Init+0xa0>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029f2:	2303      	movs	r3, #3
 80029f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029fa:	2301      	movs	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a16:	f107 030c 	add.w	r3, r7, #12
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480c      	ldr	r0, [pc, #48]	; (8002a50 <MX_TIM4_Init+0xa0>)
 8002a1e:	f002 fd2b 	bl	8005478 <HAL_TIM_Encoder_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002a28:	f000 f980 	bl	8002d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	4619      	mov	r1, r3
 8002a38:	4805      	ldr	r0, [pc, #20]	; (8002a50 <MX_TIM4_Init+0xa0>)
 8002a3a:	f003 f9e7 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002a44:	f000 f972 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a48:	bf00      	nop
 8002a4a:	3730      	adds	r7, #48	; 0x30
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200006f4 	.word	0x200006f4
 8002a54:	40000800 	.word	0x40000800

08002a58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5e:	f107 0320 	add.w	r3, r7, #32
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	611a      	str	r2, [r3, #16]
 8002a76:	615a      	str	r2, [r3, #20]
 8002a78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <MX_TIM5_Init+0xac>)
 8002a7c:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <MX_TIM5_Init+0xb0>)
 8002a7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <MX_TIM5_Init+0xac>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a86:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <MX_TIM5_Init+0xac>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <MX_TIM5_Init+0xac>)
 8002a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <MX_TIM5_Init+0xac>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <MX_TIM5_Init+0xac>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002aa0:	4818      	ldr	r0, [pc, #96]	; (8002b04 <MX_TIM5_Init+0xac>)
 8002aa2:	f002 fbe9 	bl	8005278 <HAL_TIM_PWM_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002aac:	f000 f93e 	bl	8002d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ab8:	f107 0320 	add.w	r3, r7, #32
 8002abc:	4619      	mov	r1, r3
 8002abe:	4811      	ldr	r0, [pc, #68]	; (8002b04 <MX_TIM5_Init+0xac>)
 8002ac0:	f003 f9a4 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002aca:	f000 f92f 	bl	8002d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ace:	2360      	movs	r3, #96	; 0x60
 8002ad0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4807      	ldr	r0, [pc, #28]	; (8002b04 <MX_TIM5_Init+0xac>)
 8002ae6:	f002 fe75 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002af0:	f000 f91c 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002af4:	4803      	ldr	r0, [pc, #12]	; (8002b04 <MX_TIM5_Init+0xac>)
 8002af6:	f000 fc89 	bl	800340c <HAL_TIM_MspPostInit>

}
 8002afa:	bf00      	nop
 8002afc:	3728      	adds	r7, #40	; 0x28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	2000073c 	.word	0x2000073c
 8002b08:	40000c00 	.word	0x40000c00

08002b0c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <MX_TIM10_Init+0x40>)
 8002b12:	4a0f      	ldr	r2, [pc, #60]	; (8002b50 <MX_TIM10_Init+0x44>)
 8002b14:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16;
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <MX_TIM10_Init+0x40>)
 8002b18:	2210      	movs	r2, #16
 8002b1a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <MX_TIM10_Init+0x40>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 52500;
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <MX_TIM10_Init+0x40>)
 8002b24:	f64c 5214 	movw	r2, #52500	; 0xcd14
 8002b28:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <MX_TIM10_Init+0x40>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <MX_TIM10_Init+0x40>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b36:	4805      	ldr	r0, [pc, #20]	; (8002b4c <MX_TIM10_Init+0x40>)
 8002b38:	f002 faec 	bl	8005114 <HAL_TIM_Base_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002b42:	f000 f8f3 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000784 	.word	0x20000784
 8002b50:	40014400 	.word	0x40014400

08002b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_USART2_UART_Init+0x4c>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <MX_USART2_UART_Init+0x50>)
 8002b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <MX_USART2_UART_Init+0x4c>)
 8002b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_USART2_UART_Init+0x4c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_USART2_UART_Init+0x4c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <MX_USART2_UART_Init+0x4c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_USART2_UART_Init+0x4c>)
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <MX_USART2_UART_Init+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_USART2_UART_Init+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <MX_USART2_UART_Init+0x4c>)
 8002b8c:	f003 f9c0 	bl	8005f10 <HAL_UART_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b96:	f000 f8c9 	bl	8002d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200007cc 	.word	0x200007cc
 8002ba4:	40004400 	.word	0x40004400

08002ba8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <MX_DMA_Init+0x4c>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	4a0f      	ldr	r2, [pc, #60]	; (8002bf4 <MX_DMA_Init+0x4c>)
 8002bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <MX_DMA_Init+0x4c>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2010      	movs	r0, #16
 8002bd0:	f000 ffff 	bl	8003bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002bd4:	2010      	movs	r0, #16
 8002bd6:	f001 f818 	bl	8003c0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2011      	movs	r0, #17
 8002be0:	f000 fff7 	bl	8003bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002be4:	2011      	movs	r0, #17
 8002be6:	f001 f810 	bl	8003c0a <HAL_NVIC_EnableIRQ>

}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800

08002bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a42      	ldr	r2, [pc, #264]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a34      	ldr	r2, [pc, #208]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b32      	ldr	r3, [pc, #200]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a2d      	ldr	r2, [pc, #180]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <MX_GPIO_Init+0x128>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2122      	movs	r1, #34	; 0x22
 8002c82:	4828      	ldr	r0, [pc, #160]	; (8002d24 <MX_GPIO_Init+0x12c>)
 8002c84:	f001 fd62 	bl	800474c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c8e:	4826      	ldr	r0, [pc, #152]	; (8002d28 <MX_GPIO_Init+0x130>)
 8002c90:	f001 fd5c 	bl	800474c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4619      	mov	r1, r3
 8002caa:	481f      	ldr	r0, [pc, #124]	; (8002d28 <MX_GPIO_Init+0x130>)
 8002cac:	f001 fbca 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|LD2_Pin;
 8002cb0:	2322      	movs	r3, #34	; 0x22
 8002cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4817      	ldr	r0, [pc, #92]	; (8002d24 <MX_GPIO_Init+0x12c>)
 8002cc8:	f001 fbbc 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|LIMIT_SWITCH_2_Pin;
 8002ccc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4810      	ldr	r0, [pc, #64]	; (8002d24 <MX_GPIO_Init+0x12c>)
 8002ce4:	f001 fbae 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_1_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin;
 8002ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	f107 0314 	add.w	r3, r7, #20
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4809      	ldr	r0, [pc, #36]	; (8002d28 <MX_GPIO_Init+0x130>)
 8002d02:	f001 fb9f 	bl	8004444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	2028      	movs	r0, #40	; 0x28
 8002d0c:	f000 ff61 	bl	8003bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d10:	2028      	movs	r0, #40	; 0x28
 8002d12:	f000 ff7a 	bl	8003c0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d16:	bf00      	nop
 8002d18:	3728      	adds	r7, #40	; 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40020800 	.word	0x40020800

08002d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d30:	b672      	cpsid	i
}
 8002d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <Error_Handler+0x8>

08002d36 <PID_init>:

*/



int PID_init(pid_controller_t *pid, float KP,float TI, float TD, float N,int Controller_type){
 8002d36:	b480      	push	{r7}
 8002d38:	b087      	sub	sp, #28
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6178      	str	r0, [r7, #20]
 8002d3e:	ed87 0a04 	vstr	s0, [r7, #16]
 8002d42:	edc7 0a03 	vstr	s1, [r7, #12]
 8002d46:	ed87 1a02 	vstr	s2, [r7, #8]
 8002d4a:	edc7 1a01 	vstr	s3, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]


	pid->type=Controller_type;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	601a      	str	r2, [r3, #0]
	pid->Kp= KP;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	605a      	str	r2, [r3, #4]
	pid->Ti=TI;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	609a      	str	r2, [r3, #8]
	pid->Td=TD;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	60da      	str	r2, [r3, #12]
	pid->N=N;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	611a      	str	r2, [r3, #16]

	pid->integrator=0.f;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
	pid->derivative=0.f;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	621a      	str	r2, [r3, #32]
	pid->prev_err=0.f;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	615a      	str	r2, [r3, #20]

	pid->out=0.f;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34


	/*NB the limit must be set using the proper method */
	pid->lim_out_min=0.f;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lim_out_max=0.f;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	629a      	str	r2, [r3, #40]	; 0x28

	pid->lim_integ_min=0.f;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->lim_integ_max=0.f;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30




	return 0;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <set_limit>:
- float lim_out_max;
- float lim_integ_min;
- float lim_integ_max ;

*/
int set_limit(pid_controller_t *pid, float lim_out_min, float lim_out_max, float lim_integ_min,float lim_integ_max ){
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6178      	str	r0, [r7, #20]
 8002dc4:	ed87 0a04 	vstr	s0, [r7, #16]
 8002dc8:	edc7 0a03 	vstr	s1, [r7, #12]
 8002dcc:	ed87 1a02 	vstr	s2, [r7, #8]
 8002dd0:	edc7 1a01 	vstr	s3, [r7, #4]

	pid->lim_out_min=lim_out_min;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lim_out_max=lim_out_max;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28

	pid->lim_integ_min=lim_integ_min;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->lim_integ_max=lim_integ_max;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30


	return 0;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <PID_update>:
@outputs:
pid->out: contain the value calculated by the controller

*/

int PID_update(pid_controller_t *pid, float set_point , float measure, float T_C){
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e08:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e0c:	ed87 1a00 	vstr	s2, [r7]

	float u=0.f;
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
	float error=0.f;
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
	float proportional=0.f;
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
	float alpha= pid->Td/T_C;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	edd3 6a03 	vldr	s13, [r3, #12]
 8002e28:	ed97 7a00 	vldr	s14, [r7]
 8002e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e30:	edc7 7a04 	vstr	s15, [r7, #16]


    /* calculate the error*/
	error=set_point-measure;
 8002e34:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e38:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e40:	edc7 7a06 	vstr	s15, [r7, #24]



	/* proportional contribute*/

	proportional= pid->Kp*error;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e52:	edc7 7a05 	vstr	s15, [r7, #20]

	/*integral contribute*/



	pid->integrator+=(pid->Kp/pid->Ti)*0.5f*T_C*(error-pid->prev_err);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	ed93 7a07 	vldr	s14, [r3, #28]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	ed93 6a01 	vldr	s12, [r3, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e68:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e6c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002e70:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e74:	edd7 7a00 	vldr	s15, [r7]
 8002e78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e82:	ed97 6a06 	vldr	s12, [r7, #24]
 8002e86:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	edc3 7a07 	vstr	s15, [r3, #28]

	/* try of anti wind-up*/

	if(pid->integrator > pid->lim_integ_max){
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eac:	dd04      	ble.n	8002eb8 <PID_update+0xbc>

		pid->integrator=pid->lim_integ_max;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	61da      	str	r2, [r3, #28]
 8002eb6:	e00e      	b.n	8002ed6 <PID_update+0xda>

	}else if(pid->integrator < pid->lim_integ_min)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ecc:	d503      	bpl.n	8002ed6 <PID_update+0xda>
	{
		pid->integrator=pid->lim_integ_min;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	61da      	str	r2, [r3, #28]


	/* output  */


	if (pid->type>0){
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	dd09      	ble.n	8002ef2 <PID_update+0xf6>

	u=proportional+pid->integrator;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ee4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	edc7 7a07 	vstr	s15, [r7, #28]
 8002ef0:	e044      	b.n	8002f7c <PID_update+0x180>

	}else{

	/*derivative contribute*/
	pid->derivative= (2*(pid->Kp)*alpha*error - pid->derivative*(1-(2*alpha)/pid->N))/(1+(2*alpha)/pid->N);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ef8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002efc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f04:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f12:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f16:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	ed93 6a04 	vldr	s12, [r3, #16]
 8002f20:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002f24:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002f28:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f30:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002f34:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f38:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f42:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8002f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	edc3 7a08 	vstr	s15, [r3, #32]
	u=proportional+pid->integrator+0*pid->derivative;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002f5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f6c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002fd8 <PID_update+0x1dc>
 8002f70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f78:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if(u>pid->lim_out_max)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002f82:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8e:	dd04      	ble.n	8002f9a <PID_update+0x19e>
	{
		pid->out=pid->lim_out_max;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	635a      	str	r2, [r3, #52]	; 0x34
 8002f98:	e011      	b.n	8002fbe <PID_update+0x1c2>
	}else if(u<pid->lim_out_min){
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002fa0:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fac:	d504      	bpl.n	8002fb8 <PID_update+0x1bc>

		pid->out=pid->lim_out_min;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb6:	e002      	b.n	8002fbe <PID_update+0x1c2>

	}else{
		pid->out=u;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
	}


	pid->prev_err=error;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	615a      	str	r2, [r3, #20]
	pid->prev_meas=measure;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	619a      	str	r2, [r3, #24]

	return 0;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3724      	adds	r7, #36	; 0x24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	00000000 	.word	0x00000000

08002fdc <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	781a      	ldrb	r2, [r3, #0]
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <rbpush+0x90>)
 800300a:	fba3 1302 	umull	r1, r3, r3, r2
 800300e:	08d9      	lsrs	r1, r3, #3
 8003010:	460b      	mov	r3, r1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	b2da      	uxtb	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	789b      	ldrb	r3, [r3, #2]
 8003024:	2b0a      	cmp	r3, #10
 8003026:	d114      	bne.n	8003052 <rbpush+0x76>
        /* overwriting data: also move head forward */
        buffer->head++;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	3301      	adds	r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	785a      	ldrb	r2, [r3, #1]
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <rbpush+0x90>)
 800303a:	fba3 1302 	umull	r1, r3, r3, r2
 800303e:	08d9      	lsrs	r1, r3, #3
 8003040:	460b      	mov	r3, r1
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	b2da      	uxtb	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	705a      	strb	r2, [r3, #1]
 8003050:	e005      	b.n	800305e <rbpush+0x82>
    }else{
        buffer->length++;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	789b      	ldrb	r3, [r3, #2]
 8003056:	3301      	adds	r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 800305e:	2301      	movs	r3, #1
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	cccccccd 	.word	0xcccccccd

08003070 <rbpeek>:
- rbelement_t *data: pointer to the variable that will hold the value;
@outputs: 
- rberror_t: whether the operation was concluded successfully or not;
@#
*/
rberror_t rbpeek(ringbuffer_t *buffer, rbelement_t *data){
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	789b      	ldrb	r3, [r3, #2]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <rbpeek+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	785b      	ldrb	r3, [r3, #1]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	601a      	str	r2, [r3, #0]
        return 0; /* peek operation could not be completed because the buffer is empty */
 8003094:	2300      	movs	r3, #0
 8003096:	e009      	b.n	80030ac <rbpeek+0x3c>
    }
    *data = buffer->buffer[buffer->head];
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	3304      	adds	r3, #4
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	601a      	str	r2, [r3, #0]
    return 1;
 80030aa:	2301      	movs	r3, #1
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <rblast>:
- rbelement_t *data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	789b      	ldrb	r3, [r3, #2]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <rblast+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	3304      	adds	r3, #4
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	601a      	str	r2, [r3, #0]
        return 0; // operation failed
 80030dc:	2300      	movs	r3, #0
 80030de:	e015      	b.n	800310c <rblast+0x54>
    }
    // uint8_t index = (uint8_t) ((buffer->tail-1+RBUF_SZ)%RBUF_SZ);
    int8_t index = buffer->tail-1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
 80030ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da03      	bge.n	80030fa <rblast+0x42>
    	index += RBUF_SZ;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	330a      	adds	r3, #10
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	73fb      	strb	r3, [r7, #15]
    }
    *data = buffer->buffer[(uint8_t) index];
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	3304      	adds	r3, #4
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	601a      	str	r2, [r3, #0]
    return 1;
 800310a:	2301      	movs	r3, #1
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <rbget>:


rberror_t rbget(ringbuffer_t *buffer, int8_t i, rbelement_t *data){
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	460b      	mov	r3, r1
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 8003126:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800312a:	2b00      	cmp	r3, #0
 800312c:	db05      	blt.n	800313a <rbget+0x22>
 800312e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	7892      	ldrb	r2, [r2, #2]
 8003136:	4293      	cmp	r3, r2
 8003138:	db0a      	blt.n	8003150 <rbget+0x38>
        /* out of bounds */
    	*data =  buffer->buffer[buffer->head];
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	3304      	adds	r3, #4
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	601a      	str	r2, [r3, #0]
        return 0;
 800314c:	2300      	movs	r3, #0
 800314e:	e01b      	b.n	8003188 <rbget+0x70>
    }
    uint8_t index = (uint8_t) ((buffer->head+i) % RBUF_SZ);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	785b      	ldrb	r3, [r3, #1]
 8003154:	461a      	mov	r2, r3
 8003156:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800315a:	441a      	add	r2, r3
 800315c:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <rbget+0x7c>)
 800315e:	fb83 1302 	smull	r1, r3, r3, r2
 8003162:	1099      	asrs	r1, r3, #2
 8003164:	17d3      	asrs	r3, r2, #31
 8003166:	1ac9      	subs	r1, r1, r3
 8003168:	460b      	mov	r3, r1
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	1ad1      	subs	r1, r2, r3
 8003172:	460b      	mov	r3, r1
 8003174:	75fb      	strb	r3, [r7, #23]
    *data = buffer->buffer[index];
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	601a      	str	r2, [r3, #0]
    return 1;
 8003186:	2301      	movs	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	66666667 	.word	0x66666667

08003198 <rbclear>:
- ringbuffer_t *buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e00a      	b.n	80031c0 <rbclear+0x28>
        buffer->buffer[i] = 0;
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	3301      	adds	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b09      	cmp	r3, #9
 80031c4:	d9f1      	bls.n	80031aa <rbclear+0x12>
    }
    buffer->length = 0;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_MspInit+0x4c>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HAL_MspInit+0x4c>)
 80031f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f8:	6453      	str	r3, [r2, #68]	; 0x44
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_MspInit+0x4c>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_MspInit+0x4c>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a08      	ldr	r2, [pc, #32]	; (8003230 <HAL_MspInit+0x4c>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_MspInit+0x4c>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003222:	2007      	movs	r0, #7
 8003224:	f000 fcca 	bl	8003bbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40023800 	.word	0x40023800

08003234 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d10e      	bne.n	8003264 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_TIM_PWM_MspInit+0x64>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a12      	ldr	r2, [pc, #72]	; (8003298 <HAL_TIM_PWM_MspInit+0x64>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_TIM_PWM_MspInit+0x64>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003262:	e012      	b.n	800328a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0c      	ldr	r2, [pc, #48]	; (800329c <HAL_TIM_PWM_MspInit+0x68>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10d      	bne.n	800328a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_TIM_PWM_MspInit+0x64>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a08      	ldr	r2, [pc, #32]	; (8003298 <HAL_TIM_PWM_MspInit+0x64>)
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_TIM_PWM_MspInit+0x64>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	40000c00 	.word	0x40000c00

080032a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08c      	sub	sp, #48	; 0x30
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 031c 	add.w	r3, r7, #28
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a3a      	ldr	r2, [pc, #232]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x108>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d134      	bne.n	800332c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	4b39      	ldr	r3, [pc, #228]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a38      	ldr	r2, [pc, #224]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	4b32      	ldr	r3, [pc, #200]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a31      	ldr	r2, [pc, #196]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032fa:	23c0      	movs	r3, #192	; 0xc0
 80032fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003306:	2300      	movs	r3, #0
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800330a:	2302      	movs	r3, #2
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f107 031c 	add.w	r3, r7, #28
 8003312:	4619      	mov	r1, r3
 8003314:	4826      	ldr	r0, [pc, #152]	; (80033b0 <HAL_TIM_Encoder_MspInit+0x110>)
 8003316:	f001 f895 	bl	8004444 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	201d      	movs	r0, #29
 8003320:	f000 fc57 	bl	8003bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003324:	201d      	movs	r0, #29
 8003326:	f000 fc70 	bl	8003c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800332a:	e038      	b.n	800339e <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a20      	ldr	r2, [pc, #128]	; (80033b4 <HAL_TIM_Encoder_MspInit+0x114>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d133      	bne.n	800339e <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	4a1b      	ldr	r2, [pc, #108]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 8003340:	f043 0304 	orr.w	r3, r3, #4
 8003344:	6413      	str	r3, [r2, #64]	; 0x40
 8003346:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a14      	ldr	r2, [pc, #80]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_TIM_Encoder_MspInit+0x10c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800336e:	23c0      	movs	r3, #192	; 0xc0
 8003370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800337e:	2302      	movs	r3, #2
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003382:	f107 031c 	add.w	r3, r7, #28
 8003386:	4619      	mov	r1, r3
 8003388:	480b      	ldr	r0, [pc, #44]	; (80033b8 <HAL_TIM_Encoder_MspInit+0x118>)
 800338a:	f001 f85b 	bl	8004444 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800338e:	2200      	movs	r2, #0
 8003390:	2100      	movs	r1, #0
 8003392:	201e      	movs	r0, #30
 8003394:	f000 fc1d 	bl	8003bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003398:	201e      	movs	r0, #30
 800339a:	f000 fc36 	bl	8003c0a <HAL_NVIC_EnableIRQ>
}
 800339e:	bf00      	nop
 80033a0:	3730      	adds	r7, #48	; 0x30
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020000 	.word	0x40020000
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40020400 	.word	0x40020400

080033bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <HAL_TIM_Base_MspInit+0x48>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d115      	bne.n	80033fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_TIM_Base_MspInit+0x4c>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <HAL_TIM_Base_MspInit+0x4c>)
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033dc:	6453      	str	r3, [r2, #68]	; 0x44
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_TIM_Base_MspInit+0x4c>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80033ea:	2200      	movs	r2, #0
 80033ec:	2100      	movs	r1, #0
 80033ee:	2019      	movs	r0, #25
 80033f0:	f000 fbef 	bl	8003bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80033f4:	2019      	movs	r0, #25
 80033f6:	f000 fc08 	bl	8003c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40014400 	.word	0x40014400
 8003408:	40023800 	.word	0x40023800

0800340c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342c:	d11f      	bne.n	800346e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <HAL_TIM_MspPostInit+0xb0>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a21      	ldr	r2, [pc, #132]	; (80034bc <HAL_TIM_MspPostInit+0xb0>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b1f      	ldr	r3, [pc, #124]	; (80034bc <HAL_TIM_MspPostInit+0xb0>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800344a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800344e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800345c:	2301      	movs	r3, #1
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	4619      	mov	r1, r3
 8003466:	4816      	ldr	r0, [pc, #88]	; (80034c0 <HAL_TIM_MspPostInit+0xb4>)
 8003468:	f000 ffec 	bl	8004444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800346c:	e022      	b.n	80034b4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <HAL_TIM_MspPostInit+0xb8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d11d      	bne.n	80034b4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <HAL_TIM_MspPostInit+0xb0>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	4a0e      	ldr	r2, [pc, #56]	; (80034bc <HAL_TIM_MspPostInit+0xb0>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6313      	str	r3, [r2, #48]	; 0x30
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <HAL_TIM_MspPostInit+0xb0>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003494:	2301      	movs	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a0:	2300      	movs	r3, #0
 80034a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034a4:	2302      	movs	r3, #2
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a8:	f107 0314 	add.w	r3, r7, #20
 80034ac:	4619      	mov	r1, r3
 80034ae:	4804      	ldr	r0, [pc, #16]	; (80034c0 <HAL_TIM_MspPostInit+0xb4>)
 80034b0:	f000 ffc8 	bl	8004444 <HAL_GPIO_Init>
}
 80034b4:	bf00      	nop
 80034b6:	3728      	adds	r7, #40	; 0x28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40020000 	.word	0x40020000
 80034c4:	40000c00 	.word	0x40000c00

080034c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	; 0x28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a4d      	ldr	r2, [pc, #308]	; (800361c <HAL_UART_MspInit+0x154>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	f040 8094 	bne.w	8003614 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	4b4b      	ldr	r3, [pc, #300]	; (8003620 <HAL_UART_MspInit+0x158>)
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	4a4a      	ldr	r2, [pc, #296]	; (8003620 <HAL_UART_MspInit+0x158>)
 80034f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fa:	6413      	str	r3, [r2, #64]	; 0x40
 80034fc:	4b48      	ldr	r3, [pc, #288]	; (8003620 <HAL_UART_MspInit+0x158>)
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	4b44      	ldr	r3, [pc, #272]	; (8003620 <HAL_UART_MspInit+0x158>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	4a43      	ldr	r2, [pc, #268]	; (8003620 <HAL_UART_MspInit+0x158>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6313      	str	r3, [r2, #48]	; 0x30
 8003518:	4b41      	ldr	r3, [pc, #260]	; (8003620 <HAL_UART_MspInit+0x158>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003524:	230c      	movs	r3, #12
 8003526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003530:	2303      	movs	r3, #3
 8003532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003534:	2307      	movs	r3, #7
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	4619      	mov	r1, r3
 800353e:	4839      	ldr	r0, [pc, #228]	; (8003624 <HAL_UART_MspInit+0x15c>)
 8003540:	f000 ff80 	bl	8004444 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003544:	4b38      	ldr	r3, [pc, #224]	; (8003628 <HAL_UART_MspInit+0x160>)
 8003546:	4a39      	ldr	r2, [pc, #228]	; (800362c <HAL_UART_MspInit+0x164>)
 8003548:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800354a:	4b37      	ldr	r3, [pc, #220]	; (8003628 <HAL_UART_MspInit+0x160>)
 800354c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003550:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003552:	4b35      	ldr	r3, [pc, #212]	; (8003628 <HAL_UART_MspInit+0x160>)
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003558:	4b33      	ldr	r3, [pc, #204]	; (8003628 <HAL_UART_MspInit+0x160>)
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800355e:	4b32      	ldr	r3, [pc, #200]	; (8003628 <HAL_UART_MspInit+0x160>)
 8003560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003564:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003566:	4b30      	ldr	r3, [pc, #192]	; (8003628 <HAL_UART_MspInit+0x160>)
 8003568:	2200      	movs	r2, #0
 800356a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800356c:	4b2e      	ldr	r3, [pc, #184]	; (8003628 <HAL_UART_MspInit+0x160>)
 800356e:	2200      	movs	r2, #0
 8003570:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003572:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <HAL_UART_MspInit+0x160>)
 8003574:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003578:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800357a:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_UART_MspInit+0x160>)
 800357c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003580:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003582:	4b29      	ldr	r3, [pc, #164]	; (8003628 <HAL_UART_MspInit+0x160>)
 8003584:	2200      	movs	r2, #0
 8003586:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003588:	4827      	ldr	r0, [pc, #156]	; (8003628 <HAL_UART_MspInit+0x160>)
 800358a:	f000 fb59 	bl	8003c40 <HAL_DMA_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003594:	f7ff fbca 	bl	8002d2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a23      	ldr	r2, [pc, #140]	; (8003628 <HAL_UART_MspInit+0x160>)
 800359c:	639a      	str	r2, [r3, #56]	; 0x38
 800359e:	4a22      	ldr	r2, [pc, #136]	; (8003628 <HAL_UART_MspInit+0x160>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80035a4:	4b22      	ldr	r3, [pc, #136]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035a6:	4a23      	ldr	r2, [pc, #140]	; (8003634 <HAL_UART_MspInit+0x16c>)
 80035a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80035aa:	4b21      	ldr	r3, [pc, #132]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035b2:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035b4:	2240      	movs	r2, #64	; 0x40
 80035b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035be:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c6:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035cc:	4b18      	ldr	r3, [pc, #96]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80035d2:	4b17      	ldr	r3, [pc, #92]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80035e8:	4811      	ldr	r0, [pc, #68]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035ea:	f000 fb29 	bl	8003c40 <HAL_DMA_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 80035f4:	f7ff fb9a 	bl	8002d2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0d      	ldr	r2, [pc, #52]	; (8003630 <HAL_UART_MspInit+0x168>)
 80035fc:	635a      	str	r2, [r3, #52]	; 0x34
 80035fe:	4a0c      	ldr	r2, [pc, #48]	; (8003630 <HAL_UART_MspInit+0x168>)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003604:	2200      	movs	r2, #0
 8003606:	2100      	movs	r1, #0
 8003608:	2026      	movs	r0, #38	; 0x26
 800360a:	f000 fae2 	bl	8003bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800360e:	2026      	movs	r0, #38	; 0x26
 8003610:	f000 fafb 	bl	8003c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003614:	bf00      	nop
 8003616:	3728      	adds	r7, #40	; 0x28
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40004400 	.word	0x40004400
 8003620:	40023800 	.word	0x40023800
 8003624:	40020000 	.word	0x40020000
 8003628:	20000810 	.word	0x20000810
 800362c:	40026088 	.word	0x40026088
 8003630:	20000870 	.word	0x20000870
 8003634:	400260a0 	.word	0x400260a0

08003638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800363c:	e7fe      	b.n	800363c <NMI_Handler+0x4>

0800363e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003642:	e7fe      	b.n	8003642 <HardFault_Handler+0x4>

08003644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003648:	e7fe      	b.n	8003648 <MemManage_Handler+0x4>

0800364a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800364a:	b480      	push	{r7}
 800364c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800364e:	e7fe      	b.n	800364e <BusFault_Handler+0x4>

08003650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003654:	e7fe      	b.n	8003654 <UsageFault_Handler+0x4>

08003656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003672:	b480      	push	{r7}
 8003674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003684:	f000 f986 	bl	8003994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003688:	bf00      	nop
 800368a:	bd80      	pop	{r7, pc}

0800368c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003690:	4802      	ldr	r0, [pc, #8]	; (800369c <DMA1_Stream5_IRQHandler+0x10>)
 8003692:	f000 fc6d 	bl	8003f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000810 	.word	0x20000810

080036a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <DMA1_Stream6_IRQHandler+0x10>)
 80036a6:	f000 fc63 	bl	8003f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000870 	.word	0x20000870

080036b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80036ba:	f001 ff83 	bl	80055c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000784 	.word	0x20000784

080036c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036cc:	4802      	ldr	r0, [pc, #8]	; (80036d8 <TIM3_IRQHandler+0x10>)
 80036ce:	f001 ff79 	bl	80055c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	200006ac 	.word	0x200006ac

080036dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80036e0:	4802      	ldr	r0, [pc, #8]	; (80036ec <TIM4_IRQHandler+0x10>)
 80036e2:	f001 ff6f 	bl	80055c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200006f4 	.word	0x200006f4

080036f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036f4:	4802      	ldr	r0, [pc, #8]	; (8003700 <USART2_IRQHandler+0x10>)
 80036f6:	f002 fd07 	bl	8006108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200007cc 	.word	0x200007cc

08003704 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_1_Pin);
 8003708:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800370c:	f001 f852 	bl	80047b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_2_Pin);
 8003710:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003714:	f001 f84e 	bl	80047b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003718:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800371c:	f001 f84a 	bl	80047b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003720:	bf00      	nop
 8003722:	bd80      	pop	{r7, pc}

08003724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
	return 1;
 8003728:	2301      	movs	r3, #1
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <_kill>:

int _kill(int pid, int sig)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800373e:	f003 fdd1 	bl	80072e4 <__errno>
 8003742:	4603      	mov	r3, r0
 8003744:	2216      	movs	r2, #22
 8003746:	601a      	str	r2, [r3, #0]
	return -1;
 8003748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <_exit>:

void _exit (int status)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800375c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ffe7 	bl	8003734 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003766:	e7fe      	b.n	8003766 <_exit+0x12>

08003768 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	e00a      	b.n	8003790 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800377a:	f3af 8000 	nop.w
 800377e:	4601      	mov	r1, r0
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	60ba      	str	r2, [r7, #8]
 8003786:	b2ca      	uxtb	r2, r1
 8003788:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	3301      	adds	r3, #1
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	dbf0      	blt.n	800377a <_read+0x12>
	}

return len;
 8003798:	687b      	ldr	r3, [r7, #4]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
	return -1;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037ca:	605a      	str	r2, [r3, #4]
	return 0;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <_isatty>:

int _isatty(int file)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
	return 1;
 80037e2:	2301      	movs	r3, #1
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
	return 0;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <_sbrk+0x5c>)
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <_sbrk+0x60>)
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003820:	4b13      	ldr	r3, [pc, #76]	; (8003870 <_sbrk+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <_sbrk+0x64>)
 800382a:	4a12      	ldr	r2, [pc, #72]	; (8003874 <_sbrk+0x68>)
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800382e:	4b10      	ldr	r3, [pc, #64]	; (8003870 <_sbrk+0x64>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	429a      	cmp	r2, r3
 800383a:	d207      	bcs.n	800384c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800383c:	f003 fd52 	bl	80072e4 <__errno>
 8003840:	4603      	mov	r3, r0
 8003842:	220c      	movs	r2, #12
 8003844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800384a:	e009      	b.n	8003860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <_sbrk+0x64>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <_sbrk+0x64>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	4a05      	ldr	r2, [pc, #20]	; (8003870 <_sbrk+0x64>)
 800385c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20020000 	.word	0x20020000
 800386c:	00000400 	.word	0x00000400
 8003870:	200008d0 	.word	0x200008d0
 8003874:	200008e8 	.word	0x200008e8

08003878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <SystemInit+0x20>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	4a05      	ldr	r2, [pc, #20]	; (8003898 <SystemInit+0x20>)
 8003884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <Reset_Handler>:
 800389c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038d4 <LoopFillZerobss+0x12>
 80038a0:	480d      	ldr	r0, [pc, #52]	; (80038d8 <LoopFillZerobss+0x16>)
 80038a2:	490e      	ldr	r1, [pc, #56]	; (80038dc <LoopFillZerobss+0x1a>)
 80038a4:	4a0e      	ldr	r2, [pc, #56]	; (80038e0 <LoopFillZerobss+0x1e>)
 80038a6:	2300      	movs	r3, #0
 80038a8:	e002      	b.n	80038b0 <LoopCopyDataInit>

080038aa <CopyDataInit>:
 80038aa:	58d4      	ldr	r4, [r2, r3]
 80038ac:	50c4      	str	r4, [r0, r3]
 80038ae:	3304      	adds	r3, #4

080038b0 <LoopCopyDataInit>:
 80038b0:	18c4      	adds	r4, r0, r3
 80038b2:	428c      	cmp	r4, r1
 80038b4:	d3f9      	bcc.n	80038aa <CopyDataInit>
 80038b6:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <LoopFillZerobss+0x22>)
 80038b8:	4c0b      	ldr	r4, [pc, #44]	; (80038e8 <LoopFillZerobss+0x26>)
 80038ba:	2300      	movs	r3, #0
 80038bc:	e001      	b.n	80038c2 <LoopFillZerobss>

080038be <FillZerobss>:
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	3204      	adds	r2, #4

080038c2 <LoopFillZerobss>:
 80038c2:	42a2      	cmp	r2, r4
 80038c4:	d3fb      	bcc.n	80038be <FillZerobss>
 80038c6:	f7ff ffd7 	bl	8003878 <SystemInit>
 80038ca:	f003 fedb 	bl	8007684 <__libc_init_array>
 80038ce:	f7fe fe1f 	bl	8002510 <main>
 80038d2:	4770      	bx	lr
 80038d4:	20020000 	.word	0x20020000
 80038d8:	20000000 	.word	0x20000000
 80038dc:	200001e0 	.word	0x200001e0
 80038e0:	0800abd4 	.word	0x0800abd4
 80038e4:	200001e0 	.word	0x200001e0
 80038e8:	200008e8 	.word	0x200008e8

080038ec <ADC_IRQHandler>:
 80038ec:	e7fe      	b.n	80038ec <ADC_IRQHandler>
	...

080038f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038f4:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <HAL_Init+0x40>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0d      	ldr	r2, [pc, #52]	; (8003930 <HAL_Init+0x40>)
 80038fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_Init+0x40>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <HAL_Init+0x40>)
 8003906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800390a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_Init+0x40>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a07      	ldr	r2, [pc, #28]	; (8003930 <HAL_Init+0x40>)
 8003912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003918:	2003      	movs	r0, #3
 800391a:	f000 f94f 	bl	8003bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800391e:	2000      	movs	r0, #0
 8003920:	f000 f808 	bl	8003934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003924:	f7ff fc5e 	bl	80031e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023c00 	.word	0x40023c00

08003934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_InitTick+0x54>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <HAL_InitTick+0x58>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	4619      	mov	r1, r3
 8003946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800394a:	fbb3 f3f1 	udiv	r3, r3, r1
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f967 	bl	8003c26 <HAL_SYSTICK_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e00e      	b.n	8003980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b0f      	cmp	r3, #15
 8003966:	d80a      	bhi.n	800397e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003968:	2200      	movs	r2, #0
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003970:	f000 f92f 	bl	8003bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003974:	4a06      	ldr	r2, [pc, #24]	; (8003990 <HAL_InitTick+0x5c>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000004 	.word	0x20000004
 800398c:	2000000c 	.word	0x2000000c
 8003990:	20000008 	.word	0x20000008

08003994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_IncTick+0x20>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_IncTick+0x24>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4413      	add	r3, r2
 80039a4:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <HAL_IncTick+0x24>)
 80039a6:	6013      	str	r3, [r2, #0]
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	2000000c 	.word	0x2000000c
 80039b8:	200008d4 	.word	0x200008d4

080039bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return uwTick;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_GetTick+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	200008d4 	.word	0x200008d4

080039d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7ff ffee 	bl	80039bc <HAL_GetTick>
 80039e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ec:	d005      	beq.n	80039fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_Delay+0x44>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039fa:	bf00      	nop
 80039fc:	f7ff ffde 	bl	80039bc <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d8f7      	bhi.n	80039fc <HAL_Delay+0x28>
  {
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2000000c 	.word	0x2000000c

08003a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <__NVIC_SetPriorityGrouping+0x44>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a38:	4013      	ands	r3, r2
 8003a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a4e:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <__NVIC_SetPriorityGrouping+0x44>)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	60d3      	str	r3, [r2, #12]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <__NVIC_GetPriorityGrouping+0x18>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	0a1b      	lsrs	r3, r3, #8
 8003a6e:	f003 0307 	and.w	r3, r3, #7
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	db0b      	blt.n	8003aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	f003 021f 	and.w	r2, r3, #31
 8003a98:	4907      	ldr	r1, [pc, #28]	; (8003ab8 <__NVIC_EnableIRQ+0x38>)
 8003a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8003aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000e100 	.word	0xe000e100

08003abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	6039      	str	r1, [r7, #0]
 8003ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	db0a      	blt.n	8003ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	490c      	ldr	r1, [pc, #48]	; (8003b08 <__NVIC_SetPriority+0x4c>)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	440b      	add	r3, r1
 8003ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae4:	e00a      	b.n	8003afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	4908      	ldr	r1, [pc, #32]	; (8003b0c <__NVIC_SetPriority+0x50>)
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	3b04      	subs	r3, #4
 8003af4:	0112      	lsls	r2, r2, #4
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	440b      	add	r3, r1
 8003afa:	761a      	strb	r2, [r3, #24]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	e000e100 	.word	0xe000e100
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	; 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f1c3 0307 	rsb	r3, r3, #7
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	bf28      	it	cs
 8003b2e:	2304      	movcs	r3, #4
 8003b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d902      	bls.n	8003b40 <NVIC_EncodePriority+0x30>
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3b03      	subs	r3, #3
 8003b3e:	e000      	b.n	8003b42 <NVIC_EncodePriority+0x32>
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	401a      	ands	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	43d9      	mvns	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	4313      	orrs	r3, r2
         );
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b88:	d301      	bcc.n	8003b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e00f      	b.n	8003bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <SysTick_Config+0x40>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b96:	210f      	movs	r1, #15
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b9c:	f7ff ff8e 	bl	8003abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <SysTick_Config+0x40>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <SysTick_Config+0x40>)
 8003ba8:	2207      	movs	r2, #7
 8003baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	e000e010 	.word	0xe000e010

08003bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ff29 	bl	8003a1c <__NVIC_SetPriorityGrouping>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b086      	sub	sp, #24
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	4603      	mov	r3, r0
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003be4:	f7ff ff3e 	bl	8003a64 <__NVIC_GetPriorityGrouping>
 8003be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	6978      	ldr	r0, [r7, #20]
 8003bf0:	f7ff ff8e 	bl	8003b10 <NVIC_EncodePriority>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ff5d 	bl	8003abc <__NVIC_SetPriority>
}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	4603      	mov	r3, r0
 8003c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff ff31 	bl	8003a80 <__NVIC_EnableIRQ>
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ffa2 	bl	8003b78 <SysTick_Config>
 8003c34:	4603      	mov	r3, r0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c4c:	f7ff feb6 	bl	80039bc <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e099      	b.n	8003d90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c7c:	e00f      	b.n	8003c9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c7e:	f7ff fe9d 	bl	80039bc <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d908      	bls.n	8003c9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2203      	movs	r2, #3
 8003c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e078      	b.n	8003d90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e8      	bne.n	8003c7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <HAL_DMA_Init+0x158>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d107      	bne.n	8003d08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	4313      	orrs	r3, r2
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f023 0307 	bic.w	r3, r3, #7
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d117      	bne.n	8003d62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00e      	beq.n	8003d62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fb01 	bl	800434c <DMA_CheckFifoParam>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2240      	movs	r2, #64	; 0x40
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e016      	b.n	8003d90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fab8 	bl	80042e0 <DMA_CalcBaseAndBitshift>
 8003d70:	4603      	mov	r3, r0
 8003d72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	223f      	movs	r2, #63	; 0x3f
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	f010803f 	.word	0xf010803f

08003d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_DMA_Start_IT+0x26>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e040      	b.n	8003e44 <HAL_DMA_Start_IT+0xa8>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d12f      	bne.n	8003e36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fa4a 	bl	8004284 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df4:	223f      	movs	r2, #63	; 0x3f
 8003df6:	409a      	lsls	r2, r3
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0216 	orr.w	r2, r2, #22
 8003e0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d007      	beq.n	8003e24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0208 	orr.w	r2, r2, #8
 8003e22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e005      	b.n	8003e42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e5a:	f7ff fdaf 	bl	80039bc <HAL_GetTick>
 8003e5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d008      	beq.n	8003e7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2280      	movs	r2, #128	; 0x80
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e052      	b.n	8003f24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0216 	bic.w	r2, r2, #22
 8003e8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <HAL_DMA_Abort+0x62>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0208 	bic.w	r2, r2, #8
 8003ebc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ece:	e013      	b.n	8003ef8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ed0:	f7ff fd74 	bl	80039bc <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d90c      	bls.n	8003ef8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e015      	b.n	8003f24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e4      	bne.n	8003ed0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0a:	223f      	movs	r2, #63	; 0x3f
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d004      	beq.n	8003f4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e00c      	b.n	8003f64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2205      	movs	r2, #5
 8003f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f7c:	4b8e      	ldr	r3, [pc, #568]	; (80041b8 <HAL_DMA_IRQHandler+0x248>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a8e      	ldr	r2, [pc, #568]	; (80041bc <HAL_DMA_IRQHandler+0x24c>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	0a9b      	lsrs	r3, r3, #10
 8003f88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d01a      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0204 	bic.w	r2, r2, #4
 8003fc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc8:	2208      	movs	r2, #8
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd4:	f043 0201 	orr.w	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d012      	beq.n	8004012 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	2201      	movs	r2, #1
 8004000:	409a      	lsls	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	f043 0202 	orr.w	r2, r3, #2
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	2204      	movs	r2, #4
 8004018:	409a      	lsls	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d012      	beq.n	8004048 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00b      	beq.n	8004048 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	2204      	movs	r2, #4
 8004036:	409a      	lsls	r2, r3
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	f043 0204 	orr.w	r2, r3, #4
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	2210      	movs	r2, #16
 800404e:	409a      	lsls	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d043      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d03c      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406a:	2210      	movs	r2, #16
 800406c:	409a      	lsls	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d018      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d024      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	4798      	blx	r3
 800409e:	e01f      	b.n	80040e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01b      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
 80040b0:	e016      	b.n	80040e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d107      	bne.n	80040d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0208 	bic.w	r2, r2, #8
 80040ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	2220      	movs	r2, #32
 80040e6:	409a      	lsls	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 808f 	beq.w	8004210 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8087 	beq.w	8004210 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	2220      	movs	r2, #32
 8004108:	409a      	lsls	r2, r3
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b05      	cmp	r3, #5
 8004118:	d136      	bne.n	8004188 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0216 	bic.w	r2, r2, #22
 8004128:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004138:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <HAL_DMA_IRQHandler+0x1da>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0208 	bic.w	r2, r2, #8
 8004158:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	223f      	movs	r2, #63	; 0x3f
 8004160:	409a      	lsls	r2, r3
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417a:	2b00      	cmp	r3, #0
 800417c:	d07e      	beq.n	800427c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
        }
        return;
 8004186:	e079      	b.n	800427c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01d      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10d      	bne.n	80041c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d031      	beq.n	8004210 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
 80041b4:	e02c      	b.n	8004210 <HAL_DMA_IRQHandler+0x2a0>
 80041b6:	bf00      	nop
 80041b8:	20000004 	.word	0x20000004
 80041bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d023      	beq.n	8004210 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
 80041d0:	e01e      	b.n	8004210 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10f      	bne.n	8004200 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0210 	bic.w	r2, r2, #16
 80041ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	2b00      	cmp	r3, #0
 8004216:	d032      	beq.n	800427e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d022      	beq.n	800426a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2205      	movs	r2, #5
 8004228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0201 	bic.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	3301      	adds	r3, #1
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	429a      	cmp	r2, r3
 8004246:	d307      	bcc.n	8004258 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f2      	bne.n	800423c <HAL_DMA_IRQHandler+0x2cc>
 8004256:	e000      	b.n	800425a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004258:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
 800427a:	e000      	b.n	800427e <HAL_DMA_IRQHandler+0x30e>
        return;
 800427c:	bf00      	nop
    }
  }
}
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d108      	bne.n	80042c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042c2:	e007      	b.n	80042d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	60da      	str	r2, [r3, #12]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	3b10      	subs	r3, #16
 80042f0:	4a14      	ldr	r2, [pc, #80]	; (8004344 <DMA_CalcBaseAndBitshift+0x64>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042fa:	4a13      	ldr	r2, [pc, #76]	; (8004348 <DMA_CalcBaseAndBitshift+0x68>)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4413      	add	r3, r2
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d909      	bls.n	8004322 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	1d1a      	adds	r2, r3, #4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	659a      	str	r2, [r3, #88]	; 0x58
 8004320:	e007      	b.n	8004332 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800432a:	f023 0303 	bic.w	r3, r3, #3
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	aaaaaaab 	.word	0xaaaaaaab
 8004348:	0800a7e0 	.word	0x0800a7e0

0800434c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d11f      	bne.n	80043a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b03      	cmp	r3, #3
 800436a:	d856      	bhi.n	800441a <DMA_CheckFifoParam+0xce>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <DMA_CheckFifoParam+0x28>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004385 	.word	0x08004385
 8004378:	08004397 	.word	0x08004397
 800437c:	08004385 	.word	0x08004385
 8004380:	0800441b 	.word	0x0800441b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d046      	beq.n	800441e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004394:	e043      	b.n	800441e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800439e:	d140      	bne.n	8004422 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a4:	e03d      	b.n	8004422 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ae:	d121      	bne.n	80043f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d837      	bhi.n	8004426 <DMA_CheckFifoParam+0xda>
 80043b6:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <DMA_CheckFifoParam+0x70>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	080043cd 	.word	0x080043cd
 80043c0:	080043d3 	.word	0x080043d3
 80043c4:	080043cd 	.word	0x080043cd
 80043c8:	080043e5 	.word	0x080043e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      break;
 80043d0:	e030      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d025      	beq.n	800442a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e2:	e022      	b.n	800442a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043ec:	d11f      	bne.n	800442e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043f2:	e01c      	b.n	800442e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d903      	bls.n	8004402 <DMA_CheckFifoParam+0xb6>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d003      	beq.n	8004408 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004400:	e018      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
      break;
 8004406:	e015      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00e      	beq.n	8004432 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
      break;
 8004418:	e00b      	b.n	8004432 <DMA_CheckFifoParam+0xe6>
      break;
 800441a:	bf00      	nop
 800441c:	e00a      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
      break;
 800441e:	bf00      	nop
 8004420:	e008      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
      break;
 8004422:	bf00      	nop
 8004424:	e006      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
      break;
 8004426:	bf00      	nop
 8004428:	e004      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
      break;
 800442a:	bf00      	nop
 800442c:	e002      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
      break;   
 800442e:	bf00      	nop
 8004430:	e000      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
      break;
 8004432:	bf00      	nop
    }
  } 
  
  return status; 
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop

08004444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004444:	b480      	push	{r7}
 8004446:	b089      	sub	sp, #36	; 0x24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004456:	2300      	movs	r3, #0
 8004458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e159      	b.n	8004714 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004460:	2201      	movs	r2, #1
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4013      	ands	r3, r2
 8004472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	429a      	cmp	r2, r3
 800447a:	f040 8148 	bne.w	800470e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d005      	beq.n	8004496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004492:	2b02      	cmp	r3, #2
 8004494:	d130      	bne.n	80044f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	2203      	movs	r2, #3
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43db      	mvns	r3, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4013      	ands	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044cc:	2201      	movs	r2, #1
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 0201 	and.w	r2, r3, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b03      	cmp	r3, #3
 8004502:	d017      	beq.n	8004534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	2203      	movs	r2, #3
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d123      	bne.n	8004588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	08da      	lsrs	r2, r3, #3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3208      	adds	r2, #8
 8004548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	220f      	movs	r2, #15
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43db      	mvns	r3, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4013      	ands	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4313      	orrs	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	08da      	lsrs	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3208      	adds	r2, #8
 8004582:	69b9      	ldr	r1, [r7, #24]
 8004584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0203 	and.w	r2, r3, #3
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80a2 	beq.w	800470e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	4b57      	ldr	r3, [pc, #348]	; (800472c <HAL_GPIO_Init+0x2e8>)
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	4a56      	ldr	r2, [pc, #344]	; (800472c <HAL_GPIO_Init+0x2e8>)
 80045d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045d8:	6453      	str	r3, [r2, #68]	; 0x44
 80045da:	4b54      	ldr	r3, [pc, #336]	; (800472c <HAL_GPIO_Init+0x2e8>)
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045e6:	4a52      	ldr	r2, [pc, #328]	; (8004730 <HAL_GPIO_Init+0x2ec>)
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	3302      	adds	r3, #2
 80045ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	220f      	movs	r2, #15
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a49      	ldr	r2, [pc, #292]	; (8004734 <HAL_GPIO_Init+0x2f0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d019      	beq.n	8004646 <HAL_GPIO_Init+0x202>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a48      	ldr	r2, [pc, #288]	; (8004738 <HAL_GPIO_Init+0x2f4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_GPIO_Init+0x1fe>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a47      	ldr	r2, [pc, #284]	; (800473c <HAL_GPIO_Init+0x2f8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00d      	beq.n	800463e <HAL_GPIO_Init+0x1fa>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a46      	ldr	r2, [pc, #280]	; (8004740 <HAL_GPIO_Init+0x2fc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <HAL_GPIO_Init+0x1f6>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a45      	ldr	r2, [pc, #276]	; (8004744 <HAL_GPIO_Init+0x300>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <HAL_GPIO_Init+0x1f2>
 8004632:	2304      	movs	r3, #4
 8004634:	e008      	b.n	8004648 <HAL_GPIO_Init+0x204>
 8004636:	2307      	movs	r3, #7
 8004638:	e006      	b.n	8004648 <HAL_GPIO_Init+0x204>
 800463a:	2303      	movs	r3, #3
 800463c:	e004      	b.n	8004648 <HAL_GPIO_Init+0x204>
 800463e:	2302      	movs	r3, #2
 8004640:	e002      	b.n	8004648 <HAL_GPIO_Init+0x204>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_GPIO_Init+0x204>
 8004646:	2300      	movs	r3, #0
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	f002 0203 	and.w	r2, r2, #3
 800464e:	0092      	lsls	r2, r2, #2
 8004650:	4093      	lsls	r3, r2
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004658:	4935      	ldr	r1, [pc, #212]	; (8004730 <HAL_GPIO_Init+0x2ec>)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	3302      	adds	r3, #2
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004666:	4b38      	ldr	r3, [pc, #224]	; (8004748 <HAL_GPIO_Init+0x304>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	43db      	mvns	r3, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4013      	ands	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800468a:	4a2f      	ldr	r2, [pc, #188]	; (8004748 <HAL_GPIO_Init+0x304>)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004690:	4b2d      	ldr	r3, [pc, #180]	; (8004748 <HAL_GPIO_Init+0x304>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	43db      	mvns	r3, r3
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	4013      	ands	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046b4:	4a24      	ldr	r2, [pc, #144]	; (8004748 <HAL_GPIO_Init+0x304>)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <HAL_GPIO_Init+0x304>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <HAL_GPIO_Init+0x304>)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_GPIO_Init+0x304>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004708:	4a0f      	ldr	r2, [pc, #60]	; (8004748 <HAL_GPIO_Init+0x304>)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3301      	adds	r3, #1
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b0f      	cmp	r3, #15
 8004718:	f67f aea2 	bls.w	8004460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	3724      	adds	r7, #36	; 0x24
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
 8004730:	40013800 	.word	0x40013800
 8004734:	40020000 	.word	0x40020000
 8004738:	40020400 	.word	0x40020400
 800473c:	40020800 	.word	0x40020800
 8004740:	40020c00 	.word	0x40020c00
 8004744:	40021000 	.word	0x40021000
 8004748:	40013c00 	.word	0x40013c00

0800474c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	807b      	strh	r3, [r7, #2]
 8004758:	4613      	mov	r3, r2
 800475a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800475c:	787b      	ldrb	r3, [r7, #1]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004762:	887a      	ldrh	r2, [r7, #2]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004768:	e003      	b.n	8004772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800476a:	887b      	ldrh	r3, [r7, #2]
 800476c:	041a      	lsls	r2, r3, #16
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	619a      	str	r2, [r3, #24]
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004790:	887a      	ldrh	r2, [r7, #2]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4013      	ands	r3, r2
 8004796:	041a      	lsls	r2, r3, #16
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	43d9      	mvns	r1, r3
 800479c:	887b      	ldrh	r3, [r7, #2]
 800479e:	400b      	ands	r3, r1
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	619a      	str	r2, [r3, #24]
}
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047be:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d006      	beq.n	80047d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047ca:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fc fcae 	bl	8001134 <HAL_GPIO_EXTI_Callback>
  }
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40013c00 	.word	0x40013c00

080047e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e267      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d075      	beq.n	80048ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004802:	4b88      	ldr	r3, [pc, #544]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b04      	cmp	r3, #4
 800480c:	d00c      	beq.n	8004828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800480e:	4b85      	ldr	r3, [pc, #532]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004816:	2b08      	cmp	r3, #8
 8004818:	d112      	bne.n	8004840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481a:	4b82      	ldr	r3, [pc, #520]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004826:	d10b      	bne.n	8004840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004828:	4b7e      	ldr	r3, [pc, #504]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d05b      	beq.n	80048ec <HAL_RCC_OscConfig+0x108>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d157      	bne.n	80048ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e242      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004848:	d106      	bne.n	8004858 <HAL_RCC_OscConfig+0x74>
 800484a:	4b76      	ldr	r3, [pc, #472]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a75      	ldr	r2, [pc, #468]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e01d      	b.n	8004894 <HAL_RCC_OscConfig+0xb0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004860:	d10c      	bne.n	800487c <HAL_RCC_OscConfig+0x98>
 8004862:	4b70      	ldr	r3, [pc, #448]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a6f      	ldr	r2, [pc, #444]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	4b6d      	ldr	r3, [pc, #436]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a6c      	ldr	r2, [pc, #432]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e00b      	b.n	8004894 <HAL_RCC_OscConfig+0xb0>
 800487c:	4b69      	ldr	r3, [pc, #420]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a68      	ldr	r2, [pc, #416]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	4b66      	ldr	r3, [pc, #408]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a65      	ldr	r2, [pc, #404]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 800488e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d013      	beq.n	80048c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7ff f88e 	bl	80039bc <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a4:	f7ff f88a 	bl	80039bc <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	; 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e207      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b6:	4b5b      	ldr	r3, [pc, #364]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0xc0>
 80048c2:	e014      	b.n	80048ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7ff f87a 	bl	80039bc <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048cc:	f7ff f876 	bl	80039bc <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	; 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e1f3      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048de:	4b51      	ldr	r3, [pc, #324]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0xe8>
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d063      	beq.n	80049c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048fa:	4b4a      	ldr	r3, [pc, #296]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800490e:	2b08      	cmp	r3, #8
 8004910:	d11c      	bne.n	800494c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004912:	4b44      	ldr	r3, [pc, #272]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d116      	bne.n	800494c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491e:	4b41      	ldr	r3, [pc, #260]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_RCC_OscConfig+0x152>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d001      	beq.n	8004936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e1c7      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004936:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4937      	ldr	r1, [pc, #220]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800494a:	e03a      	b.n	80049c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004954:	4b34      	ldr	r3, [pc, #208]	; (8004a28 <HAL_RCC_OscConfig+0x244>)
 8004956:	2201      	movs	r2, #1
 8004958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495a:	f7ff f82f 	bl	80039bc <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004962:	f7ff f82b 	bl	80039bc <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e1a8      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004974:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004980:	4b28      	ldr	r3, [pc, #160]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4925      	ldr	r1, [pc, #148]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004990:	4313      	orrs	r3, r2
 8004992:	600b      	str	r3, [r1, #0]
 8004994:	e015      	b.n	80049c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004996:	4b24      	ldr	r3, [pc, #144]	; (8004a28 <HAL_RCC_OscConfig+0x244>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7ff f80e 	bl	80039bc <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049a4:	f7ff f80a 	bl	80039bc <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e187      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d036      	beq.n	8004a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <HAL_RCC_OscConfig+0x248>)
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fe ffee 	bl	80039bc <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e4:	f7fe ffea 	bl	80039bc <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e167      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f6:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCC_OscConfig+0x240>)
 80049f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x200>
 8004a02:	e01b      	b.n	8004a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_RCC_OscConfig+0x248>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a0a:	f7fe ffd7 	bl	80039bc <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a10:	e00e      	b.n	8004a30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a12:	f7fe ffd3 	bl	80039bc <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d907      	bls.n	8004a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e150      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
 8004a24:	40023800 	.word	0x40023800
 8004a28:	42470000 	.word	0x42470000
 8004a2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a30:	4b88      	ldr	r3, [pc, #544]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1ea      	bne.n	8004a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8097 	beq.w	8004b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a4e:	4b81      	ldr	r3, [pc, #516]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10f      	bne.n	8004a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	4b7d      	ldr	r3, [pc, #500]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a7c      	ldr	r2, [pc, #496]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6a:	4b7a      	ldr	r3, [pc, #488]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	60bb      	str	r3, [r7, #8]
 8004a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a76:	2301      	movs	r3, #1
 8004a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7a:	4b77      	ldr	r3, [pc, #476]	; (8004c58 <HAL_RCC_OscConfig+0x474>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d118      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a86:	4b74      	ldr	r3, [pc, #464]	; (8004c58 <HAL_RCC_OscConfig+0x474>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a73      	ldr	r2, [pc, #460]	; (8004c58 <HAL_RCC_OscConfig+0x474>)
 8004a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a92:	f7fe ff93 	bl	80039bc <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9a:	f7fe ff8f 	bl	80039bc <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e10c      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aac:	4b6a      	ldr	r3, [pc, #424]	; (8004c58 <HAL_RCC_OscConfig+0x474>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f0      	beq.n	8004a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d106      	bne.n	8004ace <HAL_RCC_OscConfig+0x2ea>
 8004ac0:	4b64      	ldr	r3, [pc, #400]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	4a63      	ldr	r2, [pc, #396]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	6713      	str	r3, [r2, #112]	; 0x70
 8004acc:	e01c      	b.n	8004b08 <HAL_RCC_OscConfig+0x324>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x30c>
 8004ad6:	4b5f      	ldr	r3, [pc, #380]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a5e      	ldr	r2, [pc, #376]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004adc:	f043 0304 	orr.w	r3, r3, #4
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae2:	4b5c      	ldr	r3, [pc, #368]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a5b      	ldr	r2, [pc, #364]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	6713      	str	r3, [r2, #112]	; 0x70
 8004aee:	e00b      	b.n	8004b08 <HAL_RCC_OscConfig+0x324>
 8004af0:	4b58      	ldr	r3, [pc, #352]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	4a57      	ldr	r2, [pc, #348]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	6713      	str	r3, [r2, #112]	; 0x70
 8004afc:	4b55      	ldr	r3, [pc, #340]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	4a54      	ldr	r2, [pc, #336]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b02:	f023 0304 	bic.w	r3, r3, #4
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d015      	beq.n	8004b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fe ff54 	bl	80039bc <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fe ff50 	bl	80039bc <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e0cb      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2e:	4b49      	ldr	r3, [pc, #292]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ee      	beq.n	8004b18 <HAL_RCC_OscConfig+0x334>
 8004b3a:	e014      	b.n	8004b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3c:	f7fe ff3e 	bl	80039bc <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b44:	f7fe ff3a 	bl	80039bc <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e0b5      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b5a:	4b3e      	ldr	r3, [pc, #248]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1ee      	bne.n	8004b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d105      	bne.n	8004b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6c:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	4a38      	ldr	r2, [pc, #224]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80a1 	beq.w	8004cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b82:	4b34      	ldr	r3, [pc, #208]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d05c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d141      	bne.n	8004c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b96:	4b31      	ldr	r3, [pc, #196]	; (8004c5c <HAL_RCC_OscConfig+0x478>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fe ff0e 	bl	80039bc <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fe ff0a 	bl	80039bc <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e087      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb6:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	019b      	lsls	r3, r3, #6
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	041b      	lsls	r3, r3, #16
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	491b      	ldr	r1, [pc, #108]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bec:	4b1b      	ldr	r3, [pc, #108]	; (8004c5c <HAL_RCC_OscConfig+0x478>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf2:	f7fe fee3 	bl	80039bc <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bfa:	f7fe fedf 	bl	80039bc <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e05c      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0c:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <HAL_RCC_OscConfig+0x416>
 8004c18:	e054      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_RCC_OscConfig+0x478>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fe fecc 	bl	80039bc <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c28:	f7fe fec8 	bl	80039bc <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e045      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x444>
 8004c46:	e03d      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d107      	bne.n	8004c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e038      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
 8004c54:	40023800 	.word	0x40023800
 8004c58:	40007000 	.word	0x40007000
 8004c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c60:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <HAL_RCC_OscConfig+0x4ec>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d028      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d121      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d11a      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d111      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d107      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800

08004cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0cc      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b68      	ldr	r3, [pc, #416]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d90c      	bls.n	8004d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b65      	ldr	r3, [pc, #404]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	4b63      	ldr	r3, [pc, #396]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0b8      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d020      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d28:	4b59      	ldr	r3, [pc, #356]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4a58      	ldr	r2, [pc, #352]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d40:	4b53      	ldr	r3, [pc, #332]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4a52      	ldr	r2, [pc, #328]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d4c:	4b50      	ldr	r3, [pc, #320]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	494d      	ldr	r1, [pc, #308]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d044      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	4b47      	ldr	r3, [pc, #284]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d119      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e07f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d92:	4b3f      	ldr	r3, [pc, #252]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e06f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da2:	4b3b      	ldr	r3, [pc, #236]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e067      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004db2:	4b37      	ldr	r3, [pc, #220]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f023 0203 	bic.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4934      	ldr	r1, [pc, #208]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc4:	f7fe fdfa 	bl	80039bc <HAL_GetTick>
 8004dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	e00a      	b.n	8004de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dcc:	f7fe fdf6 	bl	80039bc <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e04f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de2:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 020c 	and.w	r2, r3, #12
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d1eb      	bne.n	8004dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d20c      	bcs.n	8004e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0a:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e032      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e28:	4b19      	ldr	r3, [pc, #100]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4916      	ldr	r1, [pc, #88]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	490e      	ldr	r1, [pc, #56]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e5a:	f000 f821 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	490a      	ldr	r1, [pc, #40]	; (8004e94 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6c:	5ccb      	ldrb	r3, [r1, r3]
 8004e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e72:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_RCC_ClockConfig+0x1c8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fd5a 	bl	8003934 <HAL_InitTick>

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023c00 	.word	0x40023c00
 8004e90:	40023800 	.word	0x40023800
 8004e94:	0800a7c8 	.word	0x0800a7c8
 8004e98:	20000004 	.word	0x20000004
 8004e9c:	20000008 	.word	0x20000008

08004ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea4:	b094      	sub	sp, #80	; 0x50
 8004ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8004eac:	2300      	movs	r3, #0
 8004eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb8:	4b79      	ldr	r3, [pc, #484]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 030c 	and.w	r3, r3, #12
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d00d      	beq.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	f200 80e1 	bhi.w	800508c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d003      	beq.n	8004eda <HAL_RCC_GetSysClockFreq+0x3a>
 8004ed2:	e0db      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ed4:	4b73      	ldr	r3, [pc, #460]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ed6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ed8:	e0db      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eda:	4b73      	ldr	r3, [pc, #460]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ede:	e0d8      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ee0:	4b6f      	ldr	r3, [pc, #444]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ee8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eea:	4b6d      	ldr	r3, [pc, #436]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d063      	beq.n	8004fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef6:	4b6a      	ldr	r3, [pc, #424]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	2200      	movs	r2, #0
 8004efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f08:	633b      	str	r3, [r7, #48]	; 0x30
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f12:	4622      	mov	r2, r4
 8004f14:	462b      	mov	r3, r5
 8004f16:	f04f 0000 	mov.w	r0, #0
 8004f1a:	f04f 0100 	mov.w	r1, #0
 8004f1e:	0159      	lsls	r1, r3, #5
 8004f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f24:	0150      	lsls	r0, r2, #5
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	1a51      	subs	r1, r2, r1
 8004f2e:	6139      	str	r1, [r7, #16]
 8004f30:	4629      	mov	r1, r5
 8004f32:	eb63 0301 	sbc.w	r3, r3, r1
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f44:	4659      	mov	r1, fp
 8004f46:	018b      	lsls	r3, r1, #6
 8004f48:	4651      	mov	r1, sl
 8004f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f4e:	4651      	mov	r1, sl
 8004f50:	018a      	lsls	r2, r1, #6
 8004f52:	4651      	mov	r1, sl
 8004f54:	ebb2 0801 	subs.w	r8, r2, r1
 8004f58:	4659      	mov	r1, fp
 8004f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f72:	4690      	mov	r8, r2
 8004f74:	4699      	mov	r9, r3
 8004f76:	4623      	mov	r3, r4
 8004f78:	eb18 0303 	adds.w	r3, r8, r3
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	462b      	mov	r3, r5
 8004f80:	eb49 0303 	adc.w	r3, r9, r3
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f92:	4629      	mov	r1, r5
 8004f94:	024b      	lsls	r3, r1, #9
 8004f96:	4621      	mov	r1, r4
 8004f98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	024a      	lsls	r2, r1, #9
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fb0:	f7fb fe82 	bl	8000cb8 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4613      	mov	r3, r2
 8004fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fbc:	e058      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fbe:	4b38      	ldr	r3, [pc, #224]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	099b      	lsrs	r3, r3, #6
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	4611      	mov	r1, r2
 8004fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fd8:	4642      	mov	r2, r8
 8004fda:	464b      	mov	r3, r9
 8004fdc:	f04f 0000 	mov.w	r0, #0
 8004fe0:	f04f 0100 	mov.w	r1, #0
 8004fe4:	0159      	lsls	r1, r3, #5
 8004fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fea:	0150      	lsls	r0, r2, #5
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800500c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005010:	ebb2 040a 	subs.w	r4, r2, sl
 8005014:	eb63 050b 	sbc.w	r5, r3, fp
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	00eb      	lsls	r3, r5, #3
 8005022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005026:	00e2      	lsls	r2, r4, #3
 8005028:	4614      	mov	r4, r2
 800502a:	461d      	mov	r5, r3
 800502c:	4643      	mov	r3, r8
 800502e:	18e3      	adds	r3, r4, r3
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	464b      	mov	r3, r9
 8005034:	eb45 0303 	adc.w	r3, r5, r3
 8005038:	607b      	str	r3, [r7, #4]
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005046:	4629      	mov	r1, r5
 8005048:	028b      	lsls	r3, r1, #10
 800504a:	4621      	mov	r1, r4
 800504c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005050:	4621      	mov	r1, r4
 8005052:	028a      	lsls	r2, r1, #10
 8005054:	4610      	mov	r0, r2
 8005056:	4619      	mov	r1, r3
 8005058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505a:	2200      	movs	r2, #0
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	61fa      	str	r2, [r7, #28]
 8005060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005064:	f7fb fe28 	bl	8000cb8 <__aeabi_uldivmod>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4613      	mov	r3, r2
 800506e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	3301      	adds	r3, #1
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800508a:	e002      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800508e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005094:	4618      	mov	r0, r3
 8005096:	3750      	adds	r7, #80	; 0x50
 8005098:	46bd      	mov	sp, r7
 800509a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800509e:	bf00      	nop
 80050a0:	40023800 	.word	0x40023800
 80050a4:	00f42400 	.word	0x00f42400
 80050a8:	007a1200 	.word	0x007a1200

080050ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b2:	681b      	ldr	r3, [r3, #0]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000004 	.word	0x20000004

080050c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050c8:	f7ff fff0 	bl	80050ac <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	0a9b      	lsrs	r3, r3, #10
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4903      	ldr	r1, [pc, #12]	; (80050e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40023800 	.word	0x40023800
 80050e8:	0800a7d8 	.word	0x0800a7d8

080050ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050f0:	f7ff ffdc 	bl	80050ac <HAL_RCC_GetHCLKFreq>
 80050f4:	4602      	mov	r2, r0
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <HAL_RCC_GetPCLK2Freq+0x20>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	0b5b      	lsrs	r3, r3, #13
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	4903      	ldr	r1, [pc, #12]	; (8005110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005102:	5ccb      	ldrb	r3, [r1, r3]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005108:	4618      	mov	r0, r3
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40023800 	.word	0x40023800
 8005110:	0800a7d8 	.word	0x0800a7d8

08005114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e041      	b.n	80051aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fe f93e 	bl	80033bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3304      	adds	r3, #4
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f000 fc28 	bl	80059a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d001      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e044      	b.n	8005256 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1e      	ldr	r2, [pc, #120]	; (8005264 <HAL_TIM_Base_Start_IT+0xb0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d018      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x6c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d013      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x6c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1a      	ldr	r2, [pc, #104]	; (8005268 <HAL_TIM_Base_Start_IT+0xb4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x6c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a19      	ldr	r2, [pc, #100]	; (800526c <HAL_TIM_Base_Start_IT+0xb8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d009      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x6c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a17      	ldr	r2, [pc, #92]	; (8005270 <HAL_TIM_Base_Start_IT+0xbc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x6c>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a16      	ldr	r2, [pc, #88]	; (8005274 <HAL_TIM_Base_Start_IT+0xc0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d111      	bne.n	8005244 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b06      	cmp	r3, #6
 8005230:	d010      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005242:	e007      	b.n	8005254 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40010000 	.word	0x40010000
 8005268:	40000400 	.word	0x40000400
 800526c:	40000800 	.word	0x40000800
 8005270:	40000c00 	.word	0x40000c00
 8005274:	40014000 	.word	0x40014000

08005278 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e041      	b.n	800530e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fd ffc8 	bl	8003234 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3304      	adds	r3, #4
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f000 fb76 	bl	80059a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <HAL_TIM_PWM_Start+0x24>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	e022      	b.n	8005382 <HAL_TIM_PWM_Start+0x6a>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2b04      	cmp	r3, #4
 8005340:	d109      	bne.n	8005356 <HAL_TIM_PWM_Start+0x3e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	bf14      	ite	ne
 800534e:	2301      	movne	r3, #1
 8005350:	2300      	moveq	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	e015      	b.n	8005382 <HAL_TIM_PWM_Start+0x6a>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start+0x58>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e008      	b.n	8005382 <HAL_TIM_PWM_Start+0x6a>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e068      	b.n	800545c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Start+0x82>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005398:	e013      	b.n	80053c2 <HAL_TIM_PWM_Start+0xaa>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b04      	cmp	r3, #4
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Start+0x92>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a8:	e00b      	b.n	80053c2 <HAL_TIM_PWM_Start+0xaa>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d104      	bne.n	80053ba <HAL_TIM_PWM_Start+0xa2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b8:	e003      	b.n	80053c2 <HAL_TIM_PWM_Start+0xaa>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2202      	movs	r2, #2
 80053be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2201      	movs	r2, #1
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fcf8 	bl	8005dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a23      	ldr	r2, [pc, #140]	; (8005464 <HAL_TIM_PWM_Start+0x14c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d107      	bne.n	80053ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <HAL_TIM_PWM_Start+0x14c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d018      	beq.n	8005426 <HAL_TIM_PWM_Start+0x10e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fc:	d013      	beq.n	8005426 <HAL_TIM_PWM_Start+0x10e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a19      	ldr	r2, [pc, #100]	; (8005468 <HAL_TIM_PWM_Start+0x150>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_TIM_PWM_Start+0x10e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a17      	ldr	r2, [pc, #92]	; (800546c <HAL_TIM_PWM_Start+0x154>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d009      	beq.n	8005426 <HAL_TIM_PWM_Start+0x10e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a16      	ldr	r2, [pc, #88]	; (8005470 <HAL_TIM_PWM_Start+0x158>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_TIM_PWM_Start+0x10e>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a14      	ldr	r2, [pc, #80]	; (8005474 <HAL_TIM_PWM_Start+0x15c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d111      	bne.n	800544a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b06      	cmp	r3, #6
 8005436:	d010      	beq.n	800545a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005448:	e007      	b.n	800545a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40010000 	.word	0x40010000
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40014000 	.word	0x40014000

08005478 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e097      	b.n	80055bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7fd fefd 	bl	80032a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054bc:	f023 0307 	bic.w	r3, r3, #7
 80054c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3304      	adds	r3, #4
 80054ca:	4619      	mov	r1, r3
 80054cc:	4610      	mov	r0, r2
 80054ce:	f000 fa6b 	bl	80059a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fa:	f023 0303 	bic.w	r3, r3, #3
 80054fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	4313      	orrs	r3, r2
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005518:	f023 030c 	bic.w	r3, r3, #12
 800551c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005524:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005528:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	4313      	orrs	r3, r2
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	011a      	lsls	r2, r3, #4
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	031b      	lsls	r3, r3, #12
 8005548:	4313      	orrs	r3, r2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005556:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800555e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	4313      	orrs	r3, r2
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d122      	bne.n	8005620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d11b      	bne.n	8005620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0202 	mvn.w	r2, #2
 80055f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f9b0 	bl	800596c <HAL_TIM_IC_CaptureCallback>
 800560c:	e005      	b.n	800561a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f9a2 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f9b3 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b04      	cmp	r3, #4
 800562c:	d122      	bne.n	8005674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d11b      	bne.n	8005674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0204 	mvn.w	r2, #4
 8005644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f986 	bl	800596c <HAL_TIM_IC_CaptureCallback>
 8005660:	e005      	b.n	800566e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f978 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f989 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b08      	cmp	r3, #8
 8005680:	d122      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b08      	cmp	r3, #8
 800568e:	d11b      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0208 	mvn.w	r2, #8
 8005698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2204      	movs	r2, #4
 800569e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f95c 	bl	800596c <HAL_TIM_IC_CaptureCallback>
 80056b4:	e005      	b.n	80056c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f94e 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f95f 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	2b10      	cmp	r3, #16
 80056d4:	d122      	bne.n	800571c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d11b      	bne.n	800571c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0210 	mvn.w	r2, #16
 80056ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2208      	movs	r2, #8
 80056f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f932 	bl	800596c <HAL_TIM_IC_CaptureCallback>
 8005708:	e005      	b.n	8005716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f924 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f935 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d10e      	bne.n	8005748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d107      	bne.n	8005748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0201 	mvn.w	r2, #1
 8005740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fb fdba 	bl	80012bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d10e      	bne.n	8005774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005760:	2b80      	cmp	r3, #128	; 0x80
 8005762:	d107      	bne.n	8005774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800576c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fbc4 	bl	8005efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d107      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f8fa 	bl	8005994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0220 	mvn.w	r2, #32
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fb8e 	bl	8005ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057cc:	bf00      	nop
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e0ae      	b.n	8005950 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b0c      	cmp	r3, #12
 80057fe:	f200 809f 	bhi.w	8005940 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	0800583d 	.word	0x0800583d
 800580c:	08005941 	.word	0x08005941
 8005810:	08005941 	.word	0x08005941
 8005814:	08005941 	.word	0x08005941
 8005818:	0800587d 	.word	0x0800587d
 800581c:	08005941 	.word	0x08005941
 8005820:	08005941 	.word	0x08005941
 8005824:	08005941 	.word	0x08005941
 8005828:	080058bf 	.word	0x080058bf
 800582c:	08005941 	.word	0x08005941
 8005830:	08005941 	.word	0x08005941
 8005834:	08005941 	.word	0x08005941
 8005838:	080058ff 	.word	0x080058ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f930 	bl	8005aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0208 	orr.w	r2, r2, #8
 8005856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0204 	bic.w	r2, r2, #4
 8005866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6999      	ldr	r1, [r3, #24]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	619a      	str	r2, [r3, #24]
      break;
 800587a:	e064      	b.n	8005946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 f976 	bl	8005b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6999      	ldr	r1, [r3, #24]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	021a      	lsls	r2, r3, #8
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	619a      	str	r2, [r3, #24]
      break;
 80058bc:	e043      	b.n	8005946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 f9c1 	bl	8005c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0208 	orr.w	r2, r2, #8
 80058d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0204 	bic.w	r2, r2, #4
 80058e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69d9      	ldr	r1, [r3, #28]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	61da      	str	r2, [r3, #28]
      break;
 80058fc:	e023      	b.n	8005946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fa0b 	bl	8005d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69d9      	ldr	r1, [r3, #28]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	021a      	lsls	r2, r3, #8
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	61da      	str	r2, [r3, #28]
      break;
 800593e:	e002      	b.n	8005946 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	75fb      	strb	r3, [r7, #23]
      break;
 8005944:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800594e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a34      	ldr	r2, [pc, #208]	; (8005a8c <TIM_Base_SetConfig+0xe4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00f      	beq.n	80059e0 <TIM_Base_SetConfig+0x38>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c6:	d00b      	beq.n	80059e0 <TIM_Base_SetConfig+0x38>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a31      	ldr	r2, [pc, #196]	; (8005a90 <TIM_Base_SetConfig+0xe8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d007      	beq.n	80059e0 <TIM_Base_SetConfig+0x38>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a30      	ldr	r2, [pc, #192]	; (8005a94 <TIM_Base_SetConfig+0xec>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_Base_SetConfig+0x38>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a2f      	ldr	r2, [pc, #188]	; (8005a98 <TIM_Base_SetConfig+0xf0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d108      	bne.n	80059f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a25      	ldr	r2, [pc, #148]	; (8005a8c <TIM_Base_SetConfig+0xe4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d01b      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a00:	d017      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <TIM_Base_SetConfig+0xe8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a21      	ldr	r2, [pc, #132]	; (8005a94 <TIM_Base_SetConfig+0xec>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00f      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a20      	ldr	r2, [pc, #128]	; (8005a98 <TIM_Base_SetConfig+0xf0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00b      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <TIM_Base_SetConfig+0xf4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d007      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a1e      	ldr	r2, [pc, #120]	; (8005aa0 <TIM_Base_SetConfig+0xf8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d003      	beq.n	8005a32 <TIM_Base_SetConfig+0x8a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <TIM_Base_SetConfig+0xfc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d108      	bne.n	8005a44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <TIM_Base_SetConfig+0xe4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d103      	bne.n	8005a78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	615a      	str	r2, [r3, #20]
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800

08005aa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f023 0201 	bic.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0303 	bic.w	r3, r3, #3
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 0302 	bic.w	r3, r3, #2
 8005af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <TIM_OC1_SetConfig+0xc8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d10c      	bne.n	8005b1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0308 	bic.w	r3, r3, #8
 8005b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f023 0304 	bic.w	r3, r3, #4
 8005b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <TIM_OC1_SetConfig+0xc8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d111      	bne.n	8005b4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	621a      	str	r2, [r3, #32]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	40010000 	.word	0x40010000

08005b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0210 	bic.w	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0320 	bic.w	r3, r3, #32
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <TIM_OC2_SetConfig+0xd4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10d      	bne.n	8005bf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <TIM_OC2_SetConfig+0xd4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d113      	bne.n	8005c20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000

08005c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <TIM_OC3_SetConfig+0xd0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d10d      	bne.n	8005cc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a14      	ldr	r2, [pc, #80]	; (8005d1c <TIM_OC3_SetConfig+0xd0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d113      	bne.n	8005cf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	621a      	str	r2, [r3, #32]
}
 8005d10:	bf00      	nop
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	40010000 	.word	0x40010000

08005d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	031b      	lsls	r3, r3, #12
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a10      	ldr	r2, [pc, #64]	; (8005dbc <TIM_OC4_SetConfig+0x9c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d109      	bne.n	8005d94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	019b      	lsls	r3, r3, #6
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40010000 	.word	0x40010000

08005dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a1a      	ldr	r2, [r3, #32]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	401a      	ands	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	fa01 f303 	lsl.w	r3, r1, r3
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
	...

08005e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e050      	b.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d018      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e70:	d013      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a18      	ldr	r2, [pc, #96]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a16      	ldr	r2, [pc, #88]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a15      	ldr	r2, [pc, #84]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d10c      	bne.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40014000 	.word	0x40014000

08005ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e03f      	b.n	8005fa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fd fac6 	bl	80034c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2224      	movs	r2, #36	; 0x24
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 ff4d 	bl	8006df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695a      	ldr	r2, [r3, #20]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08c      	sub	sp, #48	; 0x30
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d165      	bne.n	8006092 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_UART_Transmit_DMA+0x26>
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e05e      	b.n	8006094 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_UART_Transmit_DMA+0x38>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e057      	b.n	8006094 <HAL_UART_Transmit_DMA+0xe8>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	88fa      	ldrh	r2, [r7, #6]
 8005ffc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2221      	movs	r2, #33	; 0x21
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006010:	4a22      	ldr	r2, [pc, #136]	; (800609c <HAL_UART_Transmit_DMA+0xf0>)
 8006012:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006018:	4a21      	ldr	r2, [pc, #132]	; (80060a0 <HAL_UART_Transmit_DMA+0xf4>)
 800601a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006020:	4a20      	ldr	r2, [pc, #128]	; (80060a4 <HAL_UART_Transmit_DMA+0xf8>)
 8006022:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006028:	2200      	movs	r2, #0
 800602a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800602c:	f107 0308 	add.w	r3, r7, #8
 8006030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	6819      	ldr	r1, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3304      	adds	r3, #4
 8006040:	461a      	mov	r2, r3
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	f7fd feaa 	bl	8003d9c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006050:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3314      	adds	r3, #20
 8006060:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	617b      	str	r3, [r7, #20]
   return(result);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3314      	adds	r3, #20
 8006078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800607a:	627a      	str	r2, [r7, #36]	; 0x24
 800607c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6a39      	ldr	r1, [r7, #32]
 8006080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	61fb      	str	r3, [r7, #28]
   return(result);
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e5      	bne.n	800605a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	e000      	b.n	8006094 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006092:	2302      	movs	r3, #2
  }
}
 8006094:	4618      	mov	r0, r3
 8006096:	3730      	adds	r7, #48	; 0x30
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	0800668d 	.word	0x0800668d
 80060a0:	08006727 	.word	0x08006727
 80060a4:	0800689f 	.word	0x0800689f

080060a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	4613      	mov	r3, r2
 80060b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d11d      	bne.n	80060fe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <HAL_UART_Receive_DMA+0x26>
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e016      	b.n	8006100 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_UART_Receive_DMA+0x38>
 80060dc:	2302      	movs	r3, #2
 80060de:	e00f      	b.n	8006100 <HAL_UART_Receive_DMA+0x58>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	461a      	mov	r2, r3
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fc1d 	bl	8006934 <UART_Start_Receive_DMA>
 80060fa:	4603      	mov	r3, r0
 80060fc:	e000      	b.n	8006100 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
  }
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b0ba      	sub	sp, #232	; 0xe8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800612e:	2300      	movs	r3, #0
 8006130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10f      	bne.n	800616e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <HAL_UART_IRQHandler+0x66>
 800615a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fd89 	bl	8006c7e <UART_Receive_IT>
      return;
 800616c:	e256      	b.n	800661c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800616e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80de 	beq.w	8006334 <HAL_UART_IRQHandler+0x22c>
 8006178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d106      	bne.n	8006192 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006188:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80d1 	beq.w	8006334 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <HAL_UART_IRQHandler+0xae>
 800619e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f043 0201 	orr.w	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <HAL_UART_IRQHandler+0xd2>
 80061c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f043 0202 	orr.w	r2, r3, #2
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_UART_IRQHandler+0xf6>
 80061e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f043 0204 	orr.w	r2, r3, #4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d011      	beq.n	800622e <HAL_UART_IRQHandler+0x126>
 800620a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d105      	bne.n	8006222 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f043 0208 	orr.w	r2, r3, #8
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 81ed 	beq.w	8006612 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_UART_IRQHandler+0x14e>
 8006244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fd14 	bl	8006c7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006260:	2b40      	cmp	r3, #64	; 0x40
 8006262:	bf0c      	ite	eq
 8006264:	2301      	moveq	r3, #1
 8006266:	2300      	movne	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <HAL_UART_IRQHandler+0x17a>
 800627a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d04f      	beq.n	8006322 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fc1c 	bl	8006ac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d141      	bne.n	800631a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3314      	adds	r3, #20
 800629c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3314      	adds	r3, #20
 80062be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1d9      	bne.n	8006296 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d013      	beq.n	8006312 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	4a7d      	ldr	r2, [pc, #500]	; (80064e4 <HAL_UART_IRQHandler+0x3dc>)
 80062f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fd fe18 	bl	8003f2c <HAL_DMA_Abort_IT>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006310:	e00e      	b.n	8006330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f9a4 	bl	8006660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	e00a      	b.n	8006330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f9a0 	bl	8006660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	e006      	b.n	8006330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f99c 	bl	8006660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800632e:	e170      	b.n	8006612 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	bf00      	nop
    return;
 8006332:	e16e      	b.n	8006612 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006338:	2b01      	cmp	r3, #1
 800633a:	f040 814a 	bne.w	80065d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800633e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006342:	f003 0310 	and.w	r3, r3, #16
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 8143 	beq.w	80065d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800634c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 813c 	beq.w	80065d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800635a:	2300      	movs	r3, #0
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	f040 80b4 	bne.w	80064e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800638c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8140 	beq.w	8006616 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800639a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800639e:	429a      	cmp	r2, r3
 80063a0:	f080 8139 	bcs.w	8006616 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b6:	f000 8088 	beq.w	80064ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	330c      	adds	r3, #12
 80063c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330c      	adds	r3, #12
 80063e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1d9      	bne.n	80063ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3314      	adds	r3, #20
 800640c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006418:	f023 0301 	bic.w	r3, r3, #1
 800641c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3314      	adds	r3, #20
 8006426:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800642a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800642e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006432:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800643c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e1      	bne.n	8006406 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3314      	adds	r3, #20
 8006448:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3314      	adds	r3, #20
 8006462:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006466:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006468:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800646c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e3      	bne.n	8006442 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649a:	f023 0310 	bic.w	r3, r3, #16
 800649e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	330c      	adds	r3, #12
 80064a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80064ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e3      	bne.n	8006488 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fd fcc1 	bl	8003e4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f8ca 	bl	8006674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064e0:	e099      	b.n	8006616 <HAL_UART_IRQHandler+0x50e>
 80064e2:	bf00      	nop
 80064e4:	08006b87 	.word	0x08006b87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 808b 	beq.w	800661a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8086 	beq.w	800661a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	330c      	adds	r3, #12
 8006514:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800651e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006524:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006532:	647a      	str	r2, [r7, #68]	; 0x44
 8006534:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e3      	bne.n	800650e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3314      	adds	r3, #20
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	623b      	str	r3, [r7, #32]
   return(result);
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	f023 0301 	bic.w	r3, r3, #1
 800655c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3314      	adds	r3, #20
 8006566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800656a:	633a      	str	r2, [r7, #48]	; 0x30
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e3      	bne.n	8006546 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	330c      	adds	r3, #12
 8006592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	60fb      	str	r3, [r7, #12]
   return(result);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0310 	bic.w	r3, r3, #16
 80065a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	330c      	adds	r3, #12
 80065ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065b0:	61fa      	str	r2, [r7, #28]
 80065b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	69b9      	ldr	r1, [r7, #24]
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	617b      	str	r3, [r7, #20]
   return(result);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e3      	bne.n	800658c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f852 	bl	8006674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065d0:	e023      	b.n	800661a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_UART_IRQHandler+0x4ea>
 80065de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fadf 	bl	8006bae <UART_Transmit_IT>
    return;
 80065f0:	e014      	b.n	800661c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00e      	beq.n	800661c <HAL_UART_IRQHandler+0x514>
 80065fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fb1f 	bl	8006c4e <UART_EndTransmit_IT>
    return;
 8006610:	e004      	b.n	800661c <HAL_UART_IRQHandler+0x514>
    return;
 8006612:	bf00      	nop
 8006614:	e002      	b.n	800661c <HAL_UART_IRQHandler+0x514>
      return;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <HAL_UART_IRQHandler+0x514>
      return;
 800661a:	bf00      	nop
  }
}
 800661c:	37e8      	adds	r7, #232	; 0xe8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop

08006624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b090      	sub	sp, #64	; 0x40
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d137      	bne.n	8006718 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80066a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066aa:	2200      	movs	r2, #0
 80066ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3314      	adds	r3, #20
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	623b      	str	r3, [r7, #32]
   return(result);
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80066c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3314      	adds	r3, #20
 80066cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ce:	633a      	str	r2, [r7, #48]	; 0x30
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e5      	bne.n	80066ae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	330c      	adds	r3, #12
 80066e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
 80066fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	330c      	adds	r3, #12
 8006700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006702:	61fa      	str	r2, [r7, #28]
 8006704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	69b9      	ldr	r1, [r7, #24]
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	617b      	str	r3, [r7, #20]
   return(result);
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e5      	bne.n	80066e2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006716:	e002      	b.n	800671e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006718:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800671a:	f7ff ff83 	bl	8006624 <HAL_UART_TxCpltCallback>
}
 800671e:	bf00      	nop
 8006720:	3740      	adds	r7, #64	; 0x40
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff ff7f 	bl	8006638 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800673a:	bf00      	nop
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b09c      	sub	sp, #112	; 0x70
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675a:	2b00      	cmp	r3, #0
 800675c:	d172      	bne.n	8006844 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800675e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006760:	2200      	movs	r2, #0
 8006762:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800677a:	66bb      	str	r3, [r7, #104]	; 0x68
 800677c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006784:	65ba      	str	r2, [r7, #88]	; 0x58
 8006786:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800678a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e5      	bne.n	8006764 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3314      	adds	r3, #20
 800679e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	667b      	str	r3, [r7, #100]	; 0x64
 80067b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80067b8:	647a      	str	r2, [r7, #68]	; 0x44
 80067ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e5      	bne.n	8006798 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3314      	adds	r3, #20
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	623b      	str	r3, [r7, #32]
   return(result);
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e2:	663b      	str	r3, [r7, #96]	; 0x60
 80067e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3314      	adds	r3, #20
 80067ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067ec:	633a      	str	r2, [r7, #48]	; 0x30
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e5      	bne.n	80067cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006802:	2220      	movs	r2, #32
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	2b01      	cmp	r3, #1
 800680e:	d119      	bne.n	8006844 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	330c      	adds	r3, #12
 8006816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0310 	bic.w	r3, r3, #16
 8006826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	330c      	adds	r3, #12
 800682e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006830:	61fa      	str	r2, [r7, #28]
 8006832:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	69b9      	ldr	r1, [r7, #24]
 8006836:	69fa      	ldr	r2, [r7, #28]
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	617b      	str	r3, [r7, #20]
   return(result);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e5      	bne.n	8006810 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	2b01      	cmp	r3, #1
 800684a:	d106      	bne.n	800685a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800684c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006850:	4619      	mov	r1, r3
 8006852:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006854:	f7ff ff0e 	bl	8006674 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006858:	e002      	b.n	8006860 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800685a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800685c:	f7fa fbae 	bl	8000fbc <HAL_UART_RxCpltCallback>
}
 8006860:	bf00      	nop
 8006862:	3770      	adds	r7, #112	; 0x70
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	2b01      	cmp	r3, #1
 800687c:	d108      	bne.n	8006890 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	b29b      	uxth	r3, r3
 8006886:	4619      	mov	r1, r3
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7ff fef3 	bl	8006674 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800688e:	e002      	b.n	8006896 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7ff fedb 	bl	800664c <HAL_UART_RxHalfCpltCallback>
}
 8006896:	bf00      	nop
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ba:	2b80      	cmp	r3, #128	; 0x80
 80068bc:	bf0c      	ite	eq
 80068be:	2301      	moveq	r3, #1
 80068c0:	2300      	movne	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b21      	cmp	r3, #33	; 0x21
 80068d0:	d108      	bne.n	80068e4 <UART_DMAError+0x46>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2200      	movs	r2, #0
 80068dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80068de:	68b8      	ldr	r0, [r7, #8]
 80068e0:	f000 f8c6 	bl	8006a70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ee:	2b40      	cmp	r3, #64	; 0x40
 80068f0:	bf0c      	ite	eq
 80068f2:	2301      	moveq	r3, #1
 80068f4:	2300      	movne	r3, #0
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b22      	cmp	r3, #34	; 0x22
 8006904:	d108      	bne.n	8006918 <UART_DMAError+0x7a>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d005      	beq.n	8006918 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2200      	movs	r2, #0
 8006910:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006912:	68b8      	ldr	r0, [r7, #8]
 8006914:	f000 f8d4 	bl	8006ac0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	f043 0210 	orr.w	r2, r3, #16
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006924:	68b8      	ldr	r0, [r7, #8]
 8006926:	f7ff fe9b 	bl	8006660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b098      	sub	sp, #96	; 0x60
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	88fa      	ldrh	r2, [r7, #6]
 800694c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2222      	movs	r2, #34	; 0x22
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	4a40      	ldr	r2, [pc, #256]	; (8006a64 <UART_Start_Receive_DMA+0x130>)
 8006962:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	4a3f      	ldr	r2, [pc, #252]	; (8006a68 <UART_Start_Receive_DMA+0x134>)
 800696a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006970:	4a3e      	ldr	r2, [pc, #248]	; (8006a6c <UART_Start_Receive_DMA+0x138>)
 8006972:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	2200      	movs	r2, #0
 800697a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800697c:	f107 0308 	add.w	r3, r7, #8
 8006980:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3304      	adds	r3, #4
 800698c:	4619      	mov	r1, r3
 800698e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	f7fd fa02 	bl	8003d9c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d019      	beq.n	80069f2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	330c      	adds	r3, #12
 80069c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	330c      	adds	r3, #12
 80069dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80069e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80069e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80069ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e5      	bne.n	80069be <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3314      	adds	r3, #20
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	657b      	str	r3, [r7, #84]	; 0x54
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3314      	adds	r3, #20
 8006a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a12:	63ba      	str	r2, [r7, #56]	; 0x38
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e5      	bne.n	80069f2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	617b      	str	r3, [r7, #20]
   return(result);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3314      	adds	r3, #20
 8006a44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a46:	627a      	str	r2, [r7, #36]	; 0x24
 8006a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	6a39      	ldr	r1, [r7, #32]
 8006a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e5      	bne.n	8006a26 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3760      	adds	r7, #96	; 0x60
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	08006743 	.word	0x08006743
 8006a68:	08006869 	.word	0x08006869
 8006a6c:	0800689f 	.word	0x0800689f

08006a70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b089      	sub	sp, #36	; 0x24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a8e:	61fb      	str	r3, [r7, #28]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	330c      	adds	r3, #12
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	61ba      	str	r2, [r7, #24]
 8006a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6979      	ldr	r1, [r7, #20]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e5      	bne.n	8006a78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006ab4:	bf00      	nop
 8006ab6:	3724      	adds	r7, #36	; 0x24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b095      	sub	sp, #84	; 0x54
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	330c      	adds	r3, #12
 8006ace:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	330c      	adds	r3, #12
 8006ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ae8:	643a      	str	r2, [r7, #64]	; 0x40
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e5      	bne.n	8006ac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3314      	adds	r3, #20
 8006b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f023 0301 	bic.w	r3, r3, #1
 8006b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3314      	adds	r3, #20
 8006b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e5      	bne.n	8006afc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d119      	bne.n	8006b6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f023 0310 	bic.w	r3, r3, #16
 8006b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b58:	61ba      	str	r2, [r7, #24]
 8006b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6979      	ldr	r1, [r7, #20]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	613b      	str	r3, [r7, #16]
   return(result);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e5      	bne.n	8006b38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b7a:	bf00      	nop
 8006b7c:	3754      	adds	r7, #84	; 0x54
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff fd5d 	bl	8006660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b21      	cmp	r3, #33	; 0x21
 8006bc0:	d13e      	bne.n	8006c40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bca:	d114      	bne.n	8006bf6 <UART_Transmit_IT+0x48>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d110      	bne.n	8006bf6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	1c9a      	adds	r2, r3, #2
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	621a      	str	r2, [r3, #32]
 8006bf4:	e008      	b.n	8006c08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6211      	str	r1, [r2, #32]
 8006c00:	781a      	ldrb	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4619      	mov	r1, r3
 8006c16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10f      	bne.n	8006c3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e000      	b.n	8006c42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c40:	2302      	movs	r3, #2
  }
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fcd8 	bl	8006624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b08c      	sub	sp, #48	; 0x30
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b22      	cmp	r3, #34	; 0x22
 8006c90:	f040 80ab 	bne.w	8006dea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9c:	d117      	bne.n	8006cce <UART_Receive_IT+0x50>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d113      	bne.n	8006cce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	1c9a      	adds	r2, r3, #2
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	629a      	str	r2, [r3, #40]	; 0x28
 8006ccc:	e026      	b.n	8006d1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce0:	d007      	beq.n	8006cf2 <UART_Receive_IT+0x74>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <UART_Receive_IT+0x82>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	e008      	b.n	8006d12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d15a      	bne.n	8006de6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0220 	bic.w	r2, r2, #32
 8006d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695a      	ldr	r2, [r3, #20]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d135      	bne.n	8006ddc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	330c      	adds	r3, #12
 8006d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	613b      	str	r3, [r7, #16]
   return(result);
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f023 0310 	bic.w	r3, r3, #16
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	330c      	adds	r3, #12
 8006d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d96:	623a      	str	r2, [r7, #32]
 8006d98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	69f9      	ldr	r1, [r7, #28]
 8006d9c:	6a3a      	ldr	r2, [r7, #32]
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e5      	bne.n	8006d76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0310 	and.w	r3, r3, #16
 8006db4:	2b10      	cmp	r3, #16
 8006db6:	d10a      	bne.n	8006dce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff fc4d 	bl	8006674 <HAL_UARTEx_RxEventCallback>
 8006dda:	e002      	b.n	8006de2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7fa f8ed 	bl	8000fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	e002      	b.n	8006dec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e000      	b.n	8006dec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006dea:	2302      	movs	r3, #2
  }
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3730      	adds	r7, #48	; 0x30
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df8:	b0c0      	sub	sp, #256	; 0x100
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e10:	68d9      	ldr	r1, [r3, #12]
 8006e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	ea40 0301 	orr.w	r3, r0, r1
 8006e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e4c:	f021 010c 	bic.w	r1, r1, #12
 8006e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e5a:	430b      	orrs	r3, r1
 8006e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6e:	6999      	ldr	r1, [r3, #24]
 8006e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	ea40 0301 	orr.w	r3, r0, r1
 8006e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	4b8f      	ldr	r3, [pc, #572]	; (80070c0 <UART_SetConfig+0x2cc>)
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d005      	beq.n	8006e94 <UART_SetConfig+0xa0>
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b8d      	ldr	r3, [pc, #564]	; (80070c4 <UART_SetConfig+0x2d0>)
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d104      	bne.n	8006e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e94:	f7fe f92a 	bl	80050ec <HAL_RCC_GetPCLK2Freq>
 8006e98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e9c:	e003      	b.n	8006ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e9e:	f7fe f911 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 8006ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb0:	f040 810c 	bne.w	80070cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ec6:	4622      	mov	r2, r4
 8006ec8:	462b      	mov	r3, r5
 8006eca:	1891      	adds	r1, r2, r2
 8006ecc:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ece:	415b      	adcs	r3, r3
 8006ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	eb12 0801 	adds.w	r8, r2, r1
 8006edc:	4629      	mov	r1, r5
 8006ede:	eb43 0901 	adc.w	r9, r3, r1
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	f04f 0300 	mov.w	r3, #0
 8006eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ef6:	4690      	mov	r8, r2
 8006ef8:	4699      	mov	r9, r3
 8006efa:	4623      	mov	r3, r4
 8006efc:	eb18 0303 	adds.w	r3, r8, r3
 8006f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f04:	462b      	mov	r3, r5
 8006f06:	eb49 0303 	adc.w	r3, r9, r3
 8006f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f22:	460b      	mov	r3, r1
 8006f24:	18db      	adds	r3, r3, r3
 8006f26:	653b      	str	r3, [r7, #80]	; 0x50
 8006f28:	4613      	mov	r3, r2
 8006f2a:	eb42 0303 	adc.w	r3, r2, r3
 8006f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8006f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f38:	f7f9 febe 	bl	8000cb8 <__aeabi_uldivmod>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4b61      	ldr	r3, [pc, #388]	; (80070c8 <UART_SetConfig+0x2d4>)
 8006f42:	fba3 2302 	umull	r2, r3, r3, r2
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	011c      	lsls	r4, r3, #4
 8006f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	464b      	mov	r3, r9
 8006f60:	1891      	adds	r1, r2, r2
 8006f62:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f64:	415b      	adcs	r3, r3
 8006f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f6c:	4641      	mov	r1, r8
 8006f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8006f72:	4649      	mov	r1, r9
 8006f74:	eb43 0b01 	adc.w	fp, r3, r1
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f8c:	4692      	mov	sl, r2
 8006f8e:	469b      	mov	fp, r3
 8006f90:	4643      	mov	r3, r8
 8006f92:	eb1a 0303 	adds.w	r3, sl, r3
 8006f96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8006fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	18db      	adds	r3, r3, r3
 8006fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	eb42 0303 	adc.w	r3, r2, r3
 8006fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006fce:	f7f9 fe73 	bl	8000cb8 <__aeabi_uldivmod>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	4b3b      	ldr	r3, [pc, #236]	; (80070c8 <UART_SetConfig+0x2d4>)
 8006fda:	fba3 2301 	umull	r2, r3, r3, r1
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	2264      	movs	r2, #100	; 0x64
 8006fe2:	fb02 f303 	mul.w	r3, r2, r3
 8006fe6:	1acb      	subs	r3, r1, r3
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fee:	4b36      	ldr	r3, [pc, #216]	; (80070c8 <UART_SetConfig+0x2d4>)
 8006ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ffc:	441c      	add	r4, r3
 8006ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007002:	2200      	movs	r2, #0
 8007004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007008:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800700c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007010:	4642      	mov	r2, r8
 8007012:	464b      	mov	r3, r9
 8007014:	1891      	adds	r1, r2, r2
 8007016:	63b9      	str	r1, [r7, #56]	; 0x38
 8007018:	415b      	adcs	r3, r3
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800701c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007020:	4641      	mov	r1, r8
 8007022:	1851      	adds	r1, r2, r1
 8007024:	6339      	str	r1, [r7, #48]	; 0x30
 8007026:	4649      	mov	r1, r9
 8007028:	414b      	adcs	r3, r1
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007038:	4659      	mov	r1, fp
 800703a:	00cb      	lsls	r3, r1, #3
 800703c:	4651      	mov	r1, sl
 800703e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007042:	4651      	mov	r1, sl
 8007044:	00ca      	lsls	r2, r1, #3
 8007046:	4610      	mov	r0, r2
 8007048:	4619      	mov	r1, r3
 800704a:	4603      	mov	r3, r0
 800704c:	4642      	mov	r2, r8
 800704e:	189b      	adds	r3, r3, r2
 8007050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007054:	464b      	mov	r3, r9
 8007056:	460a      	mov	r2, r1
 8007058:	eb42 0303 	adc.w	r3, r2, r3
 800705c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800706c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007074:	460b      	mov	r3, r1
 8007076:	18db      	adds	r3, r3, r3
 8007078:	62bb      	str	r3, [r7, #40]	; 0x28
 800707a:	4613      	mov	r3, r2
 800707c:	eb42 0303 	adc.w	r3, r2, r3
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800708a:	f7f9 fe15 	bl	8000cb8 <__aeabi_uldivmod>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <UART_SetConfig+0x2d4>)
 8007094:	fba3 1302 	umull	r1, r3, r3, r2
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	2164      	movs	r1, #100	; 0x64
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	3332      	adds	r3, #50	; 0x32
 80070a6:	4a08      	ldr	r2, [pc, #32]	; (80070c8 <UART_SetConfig+0x2d4>)
 80070a8:	fba2 2303 	umull	r2, r3, r2, r3
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	f003 0207 	and.w	r2, r3, #7
 80070b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4422      	add	r2, r4
 80070ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070bc:	e105      	b.n	80072ca <UART_SetConfig+0x4d6>
 80070be:	bf00      	nop
 80070c0:	40011000 	.word	0x40011000
 80070c4:	40011400 	.word	0x40011400
 80070c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80070da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80070de:	4642      	mov	r2, r8
 80070e0:	464b      	mov	r3, r9
 80070e2:	1891      	adds	r1, r2, r2
 80070e4:	6239      	str	r1, [r7, #32]
 80070e6:	415b      	adcs	r3, r3
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
 80070ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070ee:	4641      	mov	r1, r8
 80070f0:	1854      	adds	r4, r2, r1
 80070f2:	4649      	mov	r1, r9
 80070f4:	eb43 0501 	adc.w	r5, r3, r1
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	00eb      	lsls	r3, r5, #3
 8007102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007106:	00e2      	lsls	r2, r4, #3
 8007108:	4614      	mov	r4, r2
 800710a:	461d      	mov	r5, r3
 800710c:	4643      	mov	r3, r8
 800710e:	18e3      	adds	r3, r4, r3
 8007110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007114:	464b      	mov	r3, r9
 8007116:	eb45 0303 	adc.w	r3, r5, r3
 800711a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800711e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800712a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800712e:	f04f 0200 	mov.w	r2, #0
 8007132:	f04f 0300 	mov.w	r3, #0
 8007136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800713a:	4629      	mov	r1, r5
 800713c:	008b      	lsls	r3, r1, #2
 800713e:	4621      	mov	r1, r4
 8007140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007144:	4621      	mov	r1, r4
 8007146:	008a      	lsls	r2, r1, #2
 8007148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800714c:	f7f9 fdb4 	bl	8000cb8 <__aeabi_uldivmod>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4b60      	ldr	r3, [pc, #384]	; (80072d8 <UART_SetConfig+0x4e4>)
 8007156:	fba3 2302 	umull	r2, r3, r3, r2
 800715a:	095b      	lsrs	r3, r3, #5
 800715c:	011c      	lsls	r4, r3, #4
 800715e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007162:	2200      	movs	r2, #0
 8007164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007168:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800716c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007170:	4642      	mov	r2, r8
 8007172:	464b      	mov	r3, r9
 8007174:	1891      	adds	r1, r2, r2
 8007176:	61b9      	str	r1, [r7, #24]
 8007178:	415b      	adcs	r3, r3
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007180:	4641      	mov	r1, r8
 8007182:	1851      	adds	r1, r2, r1
 8007184:	6139      	str	r1, [r7, #16]
 8007186:	4649      	mov	r1, r9
 8007188:	414b      	adcs	r3, r1
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	f04f 0300 	mov.w	r3, #0
 8007194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007198:	4659      	mov	r1, fp
 800719a:	00cb      	lsls	r3, r1, #3
 800719c:	4651      	mov	r1, sl
 800719e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071a2:	4651      	mov	r1, sl
 80071a4:	00ca      	lsls	r2, r1, #3
 80071a6:	4610      	mov	r0, r2
 80071a8:	4619      	mov	r1, r3
 80071aa:	4603      	mov	r3, r0
 80071ac:	4642      	mov	r2, r8
 80071ae:	189b      	adds	r3, r3, r2
 80071b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071b4:	464b      	mov	r3, r9
 80071b6:	460a      	mov	r2, r1
 80071b8:	eb42 0303 	adc.w	r3, r2, r3
 80071bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80071ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80071d8:	4649      	mov	r1, r9
 80071da:	008b      	lsls	r3, r1, #2
 80071dc:	4641      	mov	r1, r8
 80071de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071e2:	4641      	mov	r1, r8
 80071e4:	008a      	lsls	r2, r1, #2
 80071e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071ea:	f7f9 fd65 	bl	8000cb8 <__aeabi_uldivmod>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4b39      	ldr	r3, [pc, #228]	; (80072d8 <UART_SetConfig+0x4e4>)
 80071f4:	fba3 1302 	umull	r1, r3, r3, r2
 80071f8:	095b      	lsrs	r3, r3, #5
 80071fa:	2164      	movs	r1, #100	; 0x64
 80071fc:	fb01 f303 	mul.w	r3, r1, r3
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	3332      	adds	r3, #50	; 0x32
 8007206:	4a34      	ldr	r2, [pc, #208]	; (80072d8 <UART_SetConfig+0x4e4>)
 8007208:	fba2 2303 	umull	r2, r3, r2, r3
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007212:	441c      	add	r4, r3
 8007214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007218:	2200      	movs	r2, #0
 800721a:	673b      	str	r3, [r7, #112]	; 0x70
 800721c:	677a      	str	r2, [r7, #116]	; 0x74
 800721e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007222:	4642      	mov	r2, r8
 8007224:	464b      	mov	r3, r9
 8007226:	1891      	adds	r1, r2, r2
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	415b      	adcs	r3, r3
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007232:	4641      	mov	r1, r8
 8007234:	1851      	adds	r1, r2, r1
 8007236:	6039      	str	r1, [r7, #0]
 8007238:	4649      	mov	r1, r9
 800723a:	414b      	adcs	r3, r1
 800723c:	607b      	str	r3, [r7, #4]
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800724a:	4659      	mov	r1, fp
 800724c:	00cb      	lsls	r3, r1, #3
 800724e:	4651      	mov	r1, sl
 8007250:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007254:	4651      	mov	r1, sl
 8007256:	00ca      	lsls	r2, r1, #3
 8007258:	4610      	mov	r0, r2
 800725a:	4619      	mov	r1, r3
 800725c:	4603      	mov	r3, r0
 800725e:	4642      	mov	r2, r8
 8007260:	189b      	adds	r3, r3, r2
 8007262:	66bb      	str	r3, [r7, #104]	; 0x68
 8007264:	464b      	mov	r3, r9
 8007266:	460a      	mov	r2, r1
 8007268:	eb42 0303 	adc.w	r3, r2, r3
 800726c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	663b      	str	r3, [r7, #96]	; 0x60
 8007278:	667a      	str	r2, [r7, #100]	; 0x64
 800727a:	f04f 0200 	mov.w	r2, #0
 800727e:	f04f 0300 	mov.w	r3, #0
 8007282:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007286:	4649      	mov	r1, r9
 8007288:	008b      	lsls	r3, r1, #2
 800728a:	4641      	mov	r1, r8
 800728c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007290:	4641      	mov	r1, r8
 8007292:	008a      	lsls	r2, r1, #2
 8007294:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007298:	f7f9 fd0e 	bl	8000cb8 <__aeabi_uldivmod>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <UART_SetConfig+0x4e4>)
 80072a2:	fba3 1302 	umull	r1, r3, r3, r2
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	2164      	movs	r1, #100	; 0x64
 80072aa:	fb01 f303 	mul.w	r3, r1, r3
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	3332      	adds	r3, #50	; 0x32
 80072b4:	4a08      	ldr	r2, [pc, #32]	; (80072d8 <UART_SetConfig+0x4e4>)
 80072b6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	f003 020f 	and.w	r2, r3, #15
 80072c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4422      	add	r2, r4
 80072c8:	609a      	str	r2, [r3, #8]
}
 80072ca:	bf00      	nop
 80072cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80072d0:	46bd      	mov	sp, r7
 80072d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072d6:	bf00      	nop
 80072d8:	51eb851f 	.word	0x51eb851f

080072dc <atoi>:
 80072dc:	220a      	movs	r2, #10
 80072de:	2100      	movs	r1, #0
 80072e0:	f001 b906 	b.w	80084f0 <strtol>

080072e4 <__errno>:
 80072e4:	4b01      	ldr	r3, [pc, #4]	; (80072ec <__errno+0x8>)
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000010 	.word	0x20000010

080072f0 <__sflush_r>:
 80072f0:	898a      	ldrh	r2, [r1, #12]
 80072f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f6:	4605      	mov	r5, r0
 80072f8:	0710      	lsls	r0, r2, #28
 80072fa:	460c      	mov	r4, r1
 80072fc:	d458      	bmi.n	80073b0 <__sflush_r+0xc0>
 80072fe:	684b      	ldr	r3, [r1, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	dc05      	bgt.n	8007310 <__sflush_r+0x20>
 8007304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007306:	2b00      	cmp	r3, #0
 8007308:	dc02      	bgt.n	8007310 <__sflush_r+0x20>
 800730a:	2000      	movs	r0, #0
 800730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007312:	2e00      	cmp	r6, #0
 8007314:	d0f9      	beq.n	800730a <__sflush_r+0x1a>
 8007316:	2300      	movs	r3, #0
 8007318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800731c:	682f      	ldr	r7, [r5, #0]
 800731e:	602b      	str	r3, [r5, #0]
 8007320:	d032      	beq.n	8007388 <__sflush_r+0x98>
 8007322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	075a      	lsls	r2, r3, #29
 8007328:	d505      	bpl.n	8007336 <__sflush_r+0x46>
 800732a:	6863      	ldr	r3, [r4, #4]
 800732c:	1ac0      	subs	r0, r0, r3
 800732e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007330:	b10b      	cbz	r3, 8007336 <__sflush_r+0x46>
 8007332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007334:	1ac0      	subs	r0, r0, r3
 8007336:	2300      	movs	r3, #0
 8007338:	4602      	mov	r2, r0
 800733a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800733c:	6a21      	ldr	r1, [r4, #32]
 800733e:	4628      	mov	r0, r5
 8007340:	47b0      	blx	r6
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	d106      	bne.n	8007356 <__sflush_r+0x66>
 8007348:	6829      	ldr	r1, [r5, #0]
 800734a:	291d      	cmp	r1, #29
 800734c:	d82c      	bhi.n	80073a8 <__sflush_r+0xb8>
 800734e:	4a2a      	ldr	r2, [pc, #168]	; (80073f8 <__sflush_r+0x108>)
 8007350:	40ca      	lsrs	r2, r1
 8007352:	07d6      	lsls	r6, r2, #31
 8007354:	d528      	bpl.n	80073a8 <__sflush_r+0xb8>
 8007356:	2200      	movs	r2, #0
 8007358:	6062      	str	r2, [r4, #4]
 800735a:	04d9      	lsls	r1, r3, #19
 800735c:	6922      	ldr	r2, [r4, #16]
 800735e:	6022      	str	r2, [r4, #0]
 8007360:	d504      	bpl.n	800736c <__sflush_r+0x7c>
 8007362:	1c42      	adds	r2, r0, #1
 8007364:	d101      	bne.n	800736a <__sflush_r+0x7a>
 8007366:	682b      	ldr	r3, [r5, #0]
 8007368:	b903      	cbnz	r3, 800736c <__sflush_r+0x7c>
 800736a:	6560      	str	r0, [r4, #84]	; 0x54
 800736c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800736e:	602f      	str	r7, [r5, #0]
 8007370:	2900      	cmp	r1, #0
 8007372:	d0ca      	beq.n	800730a <__sflush_r+0x1a>
 8007374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007378:	4299      	cmp	r1, r3
 800737a:	d002      	beq.n	8007382 <__sflush_r+0x92>
 800737c:	4628      	mov	r0, r5
 800737e:	f000 f9bf 	bl	8007700 <_free_r>
 8007382:	2000      	movs	r0, #0
 8007384:	6360      	str	r0, [r4, #52]	; 0x34
 8007386:	e7c1      	b.n	800730c <__sflush_r+0x1c>
 8007388:	6a21      	ldr	r1, [r4, #32]
 800738a:	2301      	movs	r3, #1
 800738c:	4628      	mov	r0, r5
 800738e:	47b0      	blx	r6
 8007390:	1c41      	adds	r1, r0, #1
 8007392:	d1c7      	bne.n	8007324 <__sflush_r+0x34>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0c4      	beq.n	8007324 <__sflush_r+0x34>
 800739a:	2b1d      	cmp	r3, #29
 800739c:	d001      	beq.n	80073a2 <__sflush_r+0xb2>
 800739e:	2b16      	cmp	r3, #22
 80073a0:	d101      	bne.n	80073a6 <__sflush_r+0xb6>
 80073a2:	602f      	str	r7, [r5, #0]
 80073a4:	e7b1      	b.n	800730a <__sflush_r+0x1a>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	e7ad      	b.n	800730c <__sflush_r+0x1c>
 80073b0:	690f      	ldr	r7, [r1, #16]
 80073b2:	2f00      	cmp	r7, #0
 80073b4:	d0a9      	beq.n	800730a <__sflush_r+0x1a>
 80073b6:	0793      	lsls	r3, r2, #30
 80073b8:	680e      	ldr	r6, [r1, #0]
 80073ba:	bf08      	it	eq
 80073bc:	694b      	ldreq	r3, [r1, #20]
 80073be:	600f      	str	r7, [r1, #0]
 80073c0:	bf18      	it	ne
 80073c2:	2300      	movne	r3, #0
 80073c4:	eba6 0807 	sub.w	r8, r6, r7
 80073c8:	608b      	str	r3, [r1, #8]
 80073ca:	f1b8 0f00 	cmp.w	r8, #0
 80073ce:	dd9c      	ble.n	800730a <__sflush_r+0x1a>
 80073d0:	6a21      	ldr	r1, [r4, #32]
 80073d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073d4:	4643      	mov	r3, r8
 80073d6:	463a      	mov	r2, r7
 80073d8:	4628      	mov	r0, r5
 80073da:	47b0      	blx	r6
 80073dc:	2800      	cmp	r0, #0
 80073de:	dc06      	bgt.n	80073ee <__sflush_r+0xfe>
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073ec:	e78e      	b.n	800730c <__sflush_r+0x1c>
 80073ee:	4407      	add	r7, r0
 80073f0:	eba8 0800 	sub.w	r8, r8, r0
 80073f4:	e7e9      	b.n	80073ca <__sflush_r+0xda>
 80073f6:	bf00      	nop
 80073f8:	20400001 	.word	0x20400001

080073fc <_fflush_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	690b      	ldr	r3, [r1, #16]
 8007400:	4605      	mov	r5, r0
 8007402:	460c      	mov	r4, r1
 8007404:	b913      	cbnz	r3, 800740c <_fflush_r+0x10>
 8007406:	2500      	movs	r5, #0
 8007408:	4628      	mov	r0, r5
 800740a:	bd38      	pop	{r3, r4, r5, pc}
 800740c:	b118      	cbz	r0, 8007416 <_fflush_r+0x1a>
 800740e:	6983      	ldr	r3, [r0, #24]
 8007410:	b90b      	cbnz	r3, 8007416 <_fflush_r+0x1a>
 8007412:	f000 f899 	bl	8007548 <__sinit>
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <_fflush_r+0x6c>)
 8007418:	429c      	cmp	r4, r3
 800741a:	d11b      	bne.n	8007454 <_fflush_r+0x58>
 800741c:	686c      	ldr	r4, [r5, #4]
 800741e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0ef      	beq.n	8007406 <_fflush_r+0xa>
 8007426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007428:	07d0      	lsls	r0, r2, #31
 800742a:	d404      	bmi.n	8007436 <_fflush_r+0x3a>
 800742c:	0599      	lsls	r1, r3, #22
 800742e:	d402      	bmi.n	8007436 <_fflush_r+0x3a>
 8007430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007432:	f000 f94c 	bl	80076ce <__retarget_lock_acquire_recursive>
 8007436:	4628      	mov	r0, r5
 8007438:	4621      	mov	r1, r4
 800743a:	f7ff ff59 	bl	80072f0 <__sflush_r>
 800743e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007440:	07da      	lsls	r2, r3, #31
 8007442:	4605      	mov	r5, r0
 8007444:	d4e0      	bmi.n	8007408 <_fflush_r+0xc>
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	059b      	lsls	r3, r3, #22
 800744a:	d4dd      	bmi.n	8007408 <_fflush_r+0xc>
 800744c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800744e:	f000 f93f 	bl	80076d0 <__retarget_lock_release_recursive>
 8007452:	e7d9      	b.n	8007408 <_fflush_r+0xc>
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <_fflush_r+0x70>)
 8007456:	429c      	cmp	r4, r3
 8007458:	d101      	bne.n	800745e <_fflush_r+0x62>
 800745a:	68ac      	ldr	r4, [r5, #8]
 800745c:	e7df      	b.n	800741e <_fflush_r+0x22>
 800745e:	4b04      	ldr	r3, [pc, #16]	; (8007470 <_fflush_r+0x74>)
 8007460:	429c      	cmp	r4, r3
 8007462:	bf08      	it	eq
 8007464:	68ec      	ldreq	r4, [r5, #12]
 8007466:	e7da      	b.n	800741e <_fflush_r+0x22>
 8007468:	0800a808 	.word	0x0800a808
 800746c:	0800a828 	.word	0x0800a828
 8007470:	0800a7e8 	.word	0x0800a7e8

08007474 <fflush>:
 8007474:	4601      	mov	r1, r0
 8007476:	b920      	cbnz	r0, 8007482 <fflush+0xe>
 8007478:	4b04      	ldr	r3, [pc, #16]	; (800748c <fflush+0x18>)
 800747a:	4905      	ldr	r1, [pc, #20]	; (8007490 <fflush+0x1c>)
 800747c:	6818      	ldr	r0, [r3, #0]
 800747e:	f000 b8e1 	b.w	8007644 <_fwalk_reent>
 8007482:	4b04      	ldr	r3, [pc, #16]	; (8007494 <fflush+0x20>)
 8007484:	6818      	ldr	r0, [r3, #0]
 8007486:	f7ff bfb9 	b.w	80073fc <_fflush_r>
 800748a:	bf00      	nop
 800748c:	0800a848 	.word	0x0800a848
 8007490:	080073fd 	.word	0x080073fd
 8007494:	20000010 	.word	0x20000010

08007498 <std>:
 8007498:	2300      	movs	r3, #0
 800749a:	b510      	push	{r4, lr}
 800749c:	4604      	mov	r4, r0
 800749e:	e9c0 3300 	strd	r3, r3, [r0]
 80074a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074a6:	6083      	str	r3, [r0, #8]
 80074a8:	8181      	strh	r1, [r0, #12]
 80074aa:	6643      	str	r3, [r0, #100]	; 0x64
 80074ac:	81c2      	strh	r2, [r0, #14]
 80074ae:	6183      	str	r3, [r0, #24]
 80074b0:	4619      	mov	r1, r3
 80074b2:	2208      	movs	r2, #8
 80074b4:	305c      	adds	r0, #92	; 0x5c
 80074b6:	f000 f91a 	bl	80076ee <memset>
 80074ba:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <std+0x38>)
 80074bc:	6263      	str	r3, [r4, #36]	; 0x24
 80074be:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <std+0x3c>)
 80074c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80074c2:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <std+0x40>)
 80074c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074c6:	4b05      	ldr	r3, [pc, #20]	; (80074dc <std+0x44>)
 80074c8:	6224      	str	r4, [r4, #32]
 80074ca:	6323      	str	r3, [r4, #48]	; 0x30
 80074cc:	bd10      	pop	{r4, pc}
 80074ce:	bf00      	nop
 80074d0:	08008311 	.word	0x08008311
 80074d4:	08008333 	.word	0x08008333
 80074d8:	0800836b 	.word	0x0800836b
 80074dc:	0800838f 	.word	0x0800838f

080074e0 <_cleanup_r>:
 80074e0:	4901      	ldr	r1, [pc, #4]	; (80074e8 <_cleanup_r+0x8>)
 80074e2:	f000 b8af 	b.w	8007644 <_fwalk_reent>
 80074e6:	bf00      	nop
 80074e8:	080073fd 	.word	0x080073fd

080074ec <__sfmoreglue>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	2268      	movs	r2, #104	; 0x68
 80074f0:	1e4d      	subs	r5, r1, #1
 80074f2:	4355      	muls	r5, r2
 80074f4:	460e      	mov	r6, r1
 80074f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074fa:	f000 f96d 	bl	80077d8 <_malloc_r>
 80074fe:	4604      	mov	r4, r0
 8007500:	b140      	cbz	r0, 8007514 <__sfmoreglue+0x28>
 8007502:	2100      	movs	r1, #0
 8007504:	e9c0 1600 	strd	r1, r6, [r0]
 8007508:	300c      	adds	r0, #12
 800750a:	60a0      	str	r0, [r4, #8]
 800750c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007510:	f000 f8ed 	bl	80076ee <memset>
 8007514:	4620      	mov	r0, r4
 8007516:	bd70      	pop	{r4, r5, r6, pc}

08007518 <__sfp_lock_acquire>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__sfp_lock_acquire+0x8>)
 800751a:	f000 b8d8 	b.w	80076ce <__retarget_lock_acquire_recursive>
 800751e:	bf00      	nop
 8007520:	200008d9 	.word	0x200008d9

08007524 <__sfp_lock_release>:
 8007524:	4801      	ldr	r0, [pc, #4]	; (800752c <__sfp_lock_release+0x8>)
 8007526:	f000 b8d3 	b.w	80076d0 <__retarget_lock_release_recursive>
 800752a:	bf00      	nop
 800752c:	200008d9 	.word	0x200008d9

08007530 <__sinit_lock_acquire>:
 8007530:	4801      	ldr	r0, [pc, #4]	; (8007538 <__sinit_lock_acquire+0x8>)
 8007532:	f000 b8cc 	b.w	80076ce <__retarget_lock_acquire_recursive>
 8007536:	bf00      	nop
 8007538:	200008da 	.word	0x200008da

0800753c <__sinit_lock_release>:
 800753c:	4801      	ldr	r0, [pc, #4]	; (8007544 <__sinit_lock_release+0x8>)
 800753e:	f000 b8c7 	b.w	80076d0 <__retarget_lock_release_recursive>
 8007542:	bf00      	nop
 8007544:	200008da 	.word	0x200008da

08007548 <__sinit>:
 8007548:	b510      	push	{r4, lr}
 800754a:	4604      	mov	r4, r0
 800754c:	f7ff fff0 	bl	8007530 <__sinit_lock_acquire>
 8007550:	69a3      	ldr	r3, [r4, #24]
 8007552:	b11b      	cbz	r3, 800755c <__sinit+0x14>
 8007554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007558:	f7ff bff0 	b.w	800753c <__sinit_lock_release>
 800755c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007560:	6523      	str	r3, [r4, #80]	; 0x50
 8007562:	4b13      	ldr	r3, [pc, #76]	; (80075b0 <__sinit+0x68>)
 8007564:	4a13      	ldr	r2, [pc, #76]	; (80075b4 <__sinit+0x6c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	62a2      	str	r2, [r4, #40]	; 0x28
 800756a:	42a3      	cmp	r3, r4
 800756c:	bf04      	itt	eq
 800756e:	2301      	moveq	r3, #1
 8007570:	61a3      	streq	r3, [r4, #24]
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f820 	bl	80075b8 <__sfp>
 8007578:	6060      	str	r0, [r4, #4]
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f81c 	bl	80075b8 <__sfp>
 8007580:	60a0      	str	r0, [r4, #8]
 8007582:	4620      	mov	r0, r4
 8007584:	f000 f818 	bl	80075b8 <__sfp>
 8007588:	2200      	movs	r2, #0
 800758a:	60e0      	str	r0, [r4, #12]
 800758c:	2104      	movs	r1, #4
 800758e:	6860      	ldr	r0, [r4, #4]
 8007590:	f7ff ff82 	bl	8007498 <std>
 8007594:	68a0      	ldr	r0, [r4, #8]
 8007596:	2201      	movs	r2, #1
 8007598:	2109      	movs	r1, #9
 800759a:	f7ff ff7d 	bl	8007498 <std>
 800759e:	68e0      	ldr	r0, [r4, #12]
 80075a0:	2202      	movs	r2, #2
 80075a2:	2112      	movs	r1, #18
 80075a4:	f7ff ff78 	bl	8007498 <std>
 80075a8:	2301      	movs	r3, #1
 80075aa:	61a3      	str	r3, [r4, #24]
 80075ac:	e7d2      	b.n	8007554 <__sinit+0xc>
 80075ae:	bf00      	nop
 80075b0:	0800a848 	.word	0x0800a848
 80075b4:	080074e1 	.word	0x080074e1

080075b8 <__sfp>:
 80075b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ba:	4607      	mov	r7, r0
 80075bc:	f7ff ffac 	bl	8007518 <__sfp_lock_acquire>
 80075c0:	4b1e      	ldr	r3, [pc, #120]	; (800763c <__sfp+0x84>)
 80075c2:	681e      	ldr	r6, [r3, #0]
 80075c4:	69b3      	ldr	r3, [r6, #24]
 80075c6:	b913      	cbnz	r3, 80075ce <__sfp+0x16>
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff ffbd 	bl	8007548 <__sinit>
 80075ce:	3648      	adds	r6, #72	; 0x48
 80075d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	d503      	bpl.n	80075e0 <__sfp+0x28>
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	b30b      	cbz	r3, 8007620 <__sfp+0x68>
 80075dc:	6836      	ldr	r6, [r6, #0]
 80075de:	e7f7      	b.n	80075d0 <__sfp+0x18>
 80075e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075e4:	b9d5      	cbnz	r5, 800761c <__sfp+0x64>
 80075e6:	4b16      	ldr	r3, [pc, #88]	; (8007640 <__sfp+0x88>)
 80075e8:	60e3      	str	r3, [r4, #12]
 80075ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075ee:	6665      	str	r5, [r4, #100]	; 0x64
 80075f0:	f000 f86c 	bl	80076cc <__retarget_lock_init_recursive>
 80075f4:	f7ff ff96 	bl	8007524 <__sfp_lock_release>
 80075f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007600:	6025      	str	r5, [r4, #0]
 8007602:	61a5      	str	r5, [r4, #24]
 8007604:	2208      	movs	r2, #8
 8007606:	4629      	mov	r1, r5
 8007608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800760c:	f000 f86f 	bl	80076ee <memset>
 8007610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007618:	4620      	mov	r0, r4
 800761a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800761c:	3468      	adds	r4, #104	; 0x68
 800761e:	e7d9      	b.n	80075d4 <__sfp+0x1c>
 8007620:	2104      	movs	r1, #4
 8007622:	4638      	mov	r0, r7
 8007624:	f7ff ff62 	bl	80074ec <__sfmoreglue>
 8007628:	4604      	mov	r4, r0
 800762a:	6030      	str	r0, [r6, #0]
 800762c:	2800      	cmp	r0, #0
 800762e:	d1d5      	bne.n	80075dc <__sfp+0x24>
 8007630:	f7ff ff78 	bl	8007524 <__sfp_lock_release>
 8007634:	230c      	movs	r3, #12
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	e7ee      	b.n	8007618 <__sfp+0x60>
 800763a:	bf00      	nop
 800763c:	0800a848 	.word	0x0800a848
 8007640:	ffff0001 	.word	0xffff0001

08007644 <_fwalk_reent>:
 8007644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007648:	4606      	mov	r6, r0
 800764a:	4688      	mov	r8, r1
 800764c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007650:	2700      	movs	r7, #0
 8007652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007656:	f1b9 0901 	subs.w	r9, r9, #1
 800765a:	d505      	bpl.n	8007668 <_fwalk_reent+0x24>
 800765c:	6824      	ldr	r4, [r4, #0]
 800765e:	2c00      	cmp	r4, #0
 8007660:	d1f7      	bne.n	8007652 <_fwalk_reent+0xe>
 8007662:	4638      	mov	r0, r7
 8007664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007668:	89ab      	ldrh	r3, [r5, #12]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d907      	bls.n	800767e <_fwalk_reent+0x3a>
 800766e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007672:	3301      	adds	r3, #1
 8007674:	d003      	beq.n	800767e <_fwalk_reent+0x3a>
 8007676:	4629      	mov	r1, r5
 8007678:	4630      	mov	r0, r6
 800767a:	47c0      	blx	r8
 800767c:	4307      	orrs	r7, r0
 800767e:	3568      	adds	r5, #104	; 0x68
 8007680:	e7e9      	b.n	8007656 <_fwalk_reent+0x12>
	...

08007684 <__libc_init_array>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	4d0d      	ldr	r5, [pc, #52]	; (80076bc <__libc_init_array+0x38>)
 8007688:	4c0d      	ldr	r4, [pc, #52]	; (80076c0 <__libc_init_array+0x3c>)
 800768a:	1b64      	subs	r4, r4, r5
 800768c:	10a4      	asrs	r4, r4, #2
 800768e:	2600      	movs	r6, #0
 8007690:	42a6      	cmp	r6, r4
 8007692:	d109      	bne.n	80076a8 <__libc_init_array+0x24>
 8007694:	4d0b      	ldr	r5, [pc, #44]	; (80076c4 <__libc_init_array+0x40>)
 8007696:	4c0c      	ldr	r4, [pc, #48]	; (80076c8 <__libc_init_array+0x44>)
 8007698:	f003 f812 	bl	800a6c0 <_init>
 800769c:	1b64      	subs	r4, r4, r5
 800769e:	10a4      	asrs	r4, r4, #2
 80076a0:	2600      	movs	r6, #0
 80076a2:	42a6      	cmp	r6, r4
 80076a4:	d105      	bne.n	80076b2 <__libc_init_array+0x2e>
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ac:	4798      	blx	r3
 80076ae:	3601      	adds	r6, #1
 80076b0:	e7ee      	b.n	8007690 <__libc_init_array+0xc>
 80076b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b6:	4798      	blx	r3
 80076b8:	3601      	adds	r6, #1
 80076ba:	e7f2      	b.n	80076a2 <__libc_init_array+0x1e>
 80076bc:	0800abcc 	.word	0x0800abcc
 80076c0:	0800abcc 	.word	0x0800abcc
 80076c4:	0800abcc 	.word	0x0800abcc
 80076c8:	0800abd0 	.word	0x0800abd0

080076cc <__retarget_lock_init_recursive>:
 80076cc:	4770      	bx	lr

080076ce <__retarget_lock_acquire_recursive>:
 80076ce:	4770      	bx	lr

080076d0 <__retarget_lock_release_recursive>:
 80076d0:	4770      	bx	lr

080076d2 <memcpy>:
 80076d2:	440a      	add	r2, r1
 80076d4:	4291      	cmp	r1, r2
 80076d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076da:	d100      	bne.n	80076de <memcpy+0xc>
 80076dc:	4770      	bx	lr
 80076de:	b510      	push	{r4, lr}
 80076e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076e8:	4291      	cmp	r1, r2
 80076ea:	d1f9      	bne.n	80076e0 <memcpy+0xe>
 80076ec:	bd10      	pop	{r4, pc}

080076ee <memset>:
 80076ee:	4402      	add	r2, r0
 80076f0:	4603      	mov	r3, r0
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d100      	bne.n	80076f8 <memset+0xa>
 80076f6:	4770      	bx	lr
 80076f8:	f803 1b01 	strb.w	r1, [r3], #1
 80076fc:	e7f9      	b.n	80076f2 <memset+0x4>
	...

08007700 <_free_r>:
 8007700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007702:	2900      	cmp	r1, #0
 8007704:	d044      	beq.n	8007790 <_free_r+0x90>
 8007706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770a:	9001      	str	r0, [sp, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f1a1 0404 	sub.w	r4, r1, #4
 8007712:	bfb8      	it	lt
 8007714:	18e4      	addlt	r4, r4, r3
 8007716:	f001 ff79 	bl	800960c <__malloc_lock>
 800771a:	4a1e      	ldr	r2, [pc, #120]	; (8007794 <_free_r+0x94>)
 800771c:	9801      	ldr	r0, [sp, #4]
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	b933      	cbnz	r3, 8007730 <_free_r+0x30>
 8007722:	6063      	str	r3, [r4, #4]
 8007724:	6014      	str	r4, [r2, #0]
 8007726:	b003      	add	sp, #12
 8007728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800772c:	f001 bf74 	b.w	8009618 <__malloc_unlock>
 8007730:	42a3      	cmp	r3, r4
 8007732:	d908      	bls.n	8007746 <_free_r+0x46>
 8007734:	6825      	ldr	r5, [r4, #0]
 8007736:	1961      	adds	r1, r4, r5
 8007738:	428b      	cmp	r3, r1
 800773a:	bf01      	itttt	eq
 800773c:	6819      	ldreq	r1, [r3, #0]
 800773e:	685b      	ldreq	r3, [r3, #4]
 8007740:	1949      	addeq	r1, r1, r5
 8007742:	6021      	streq	r1, [r4, #0]
 8007744:	e7ed      	b.n	8007722 <_free_r+0x22>
 8007746:	461a      	mov	r2, r3
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	b10b      	cbz	r3, 8007750 <_free_r+0x50>
 800774c:	42a3      	cmp	r3, r4
 800774e:	d9fa      	bls.n	8007746 <_free_r+0x46>
 8007750:	6811      	ldr	r1, [r2, #0]
 8007752:	1855      	adds	r5, r2, r1
 8007754:	42a5      	cmp	r5, r4
 8007756:	d10b      	bne.n	8007770 <_free_r+0x70>
 8007758:	6824      	ldr	r4, [r4, #0]
 800775a:	4421      	add	r1, r4
 800775c:	1854      	adds	r4, r2, r1
 800775e:	42a3      	cmp	r3, r4
 8007760:	6011      	str	r1, [r2, #0]
 8007762:	d1e0      	bne.n	8007726 <_free_r+0x26>
 8007764:	681c      	ldr	r4, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	6053      	str	r3, [r2, #4]
 800776a:	4421      	add	r1, r4
 800776c:	6011      	str	r1, [r2, #0]
 800776e:	e7da      	b.n	8007726 <_free_r+0x26>
 8007770:	d902      	bls.n	8007778 <_free_r+0x78>
 8007772:	230c      	movs	r3, #12
 8007774:	6003      	str	r3, [r0, #0]
 8007776:	e7d6      	b.n	8007726 <_free_r+0x26>
 8007778:	6825      	ldr	r5, [r4, #0]
 800777a:	1961      	adds	r1, r4, r5
 800777c:	428b      	cmp	r3, r1
 800777e:	bf04      	itt	eq
 8007780:	6819      	ldreq	r1, [r3, #0]
 8007782:	685b      	ldreq	r3, [r3, #4]
 8007784:	6063      	str	r3, [r4, #4]
 8007786:	bf04      	itt	eq
 8007788:	1949      	addeq	r1, r1, r5
 800778a:	6021      	streq	r1, [r4, #0]
 800778c:	6054      	str	r4, [r2, #4]
 800778e:	e7ca      	b.n	8007726 <_free_r+0x26>
 8007790:	b003      	add	sp, #12
 8007792:	bd30      	pop	{r4, r5, pc}
 8007794:	200008dc 	.word	0x200008dc

08007798 <sbrk_aligned>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	4e0e      	ldr	r6, [pc, #56]	; (80077d4 <sbrk_aligned+0x3c>)
 800779c:	460c      	mov	r4, r1
 800779e:	6831      	ldr	r1, [r6, #0]
 80077a0:	4605      	mov	r5, r0
 80077a2:	b911      	cbnz	r1, 80077aa <sbrk_aligned+0x12>
 80077a4:	f000 fd84 	bl	80082b0 <_sbrk_r>
 80077a8:	6030      	str	r0, [r6, #0]
 80077aa:	4621      	mov	r1, r4
 80077ac:	4628      	mov	r0, r5
 80077ae:	f000 fd7f 	bl	80082b0 <_sbrk_r>
 80077b2:	1c43      	adds	r3, r0, #1
 80077b4:	d00a      	beq.n	80077cc <sbrk_aligned+0x34>
 80077b6:	1cc4      	adds	r4, r0, #3
 80077b8:	f024 0403 	bic.w	r4, r4, #3
 80077bc:	42a0      	cmp	r0, r4
 80077be:	d007      	beq.n	80077d0 <sbrk_aligned+0x38>
 80077c0:	1a21      	subs	r1, r4, r0
 80077c2:	4628      	mov	r0, r5
 80077c4:	f000 fd74 	bl	80082b0 <_sbrk_r>
 80077c8:	3001      	adds	r0, #1
 80077ca:	d101      	bne.n	80077d0 <sbrk_aligned+0x38>
 80077cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077d0:	4620      	mov	r0, r4
 80077d2:	bd70      	pop	{r4, r5, r6, pc}
 80077d4:	200008e0 	.word	0x200008e0

080077d8 <_malloc_r>:
 80077d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077dc:	1ccd      	adds	r5, r1, #3
 80077de:	f025 0503 	bic.w	r5, r5, #3
 80077e2:	3508      	adds	r5, #8
 80077e4:	2d0c      	cmp	r5, #12
 80077e6:	bf38      	it	cc
 80077e8:	250c      	movcc	r5, #12
 80077ea:	2d00      	cmp	r5, #0
 80077ec:	4607      	mov	r7, r0
 80077ee:	db01      	blt.n	80077f4 <_malloc_r+0x1c>
 80077f0:	42a9      	cmp	r1, r5
 80077f2:	d905      	bls.n	8007800 <_malloc_r+0x28>
 80077f4:	230c      	movs	r3, #12
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	2600      	movs	r6, #0
 80077fa:	4630      	mov	r0, r6
 80077fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007800:	4e2e      	ldr	r6, [pc, #184]	; (80078bc <_malloc_r+0xe4>)
 8007802:	f001 ff03 	bl	800960c <__malloc_lock>
 8007806:	6833      	ldr	r3, [r6, #0]
 8007808:	461c      	mov	r4, r3
 800780a:	bb34      	cbnz	r4, 800785a <_malloc_r+0x82>
 800780c:	4629      	mov	r1, r5
 800780e:	4638      	mov	r0, r7
 8007810:	f7ff ffc2 	bl	8007798 <sbrk_aligned>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	4604      	mov	r4, r0
 8007818:	d14d      	bne.n	80078b6 <_malloc_r+0xde>
 800781a:	6834      	ldr	r4, [r6, #0]
 800781c:	4626      	mov	r6, r4
 800781e:	2e00      	cmp	r6, #0
 8007820:	d140      	bne.n	80078a4 <_malloc_r+0xcc>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	4631      	mov	r1, r6
 8007826:	4638      	mov	r0, r7
 8007828:	eb04 0803 	add.w	r8, r4, r3
 800782c:	f000 fd40 	bl	80082b0 <_sbrk_r>
 8007830:	4580      	cmp	r8, r0
 8007832:	d13a      	bne.n	80078aa <_malloc_r+0xd2>
 8007834:	6821      	ldr	r1, [r4, #0]
 8007836:	3503      	adds	r5, #3
 8007838:	1a6d      	subs	r5, r5, r1
 800783a:	f025 0503 	bic.w	r5, r5, #3
 800783e:	3508      	adds	r5, #8
 8007840:	2d0c      	cmp	r5, #12
 8007842:	bf38      	it	cc
 8007844:	250c      	movcc	r5, #12
 8007846:	4629      	mov	r1, r5
 8007848:	4638      	mov	r0, r7
 800784a:	f7ff ffa5 	bl	8007798 <sbrk_aligned>
 800784e:	3001      	adds	r0, #1
 8007850:	d02b      	beq.n	80078aa <_malloc_r+0xd2>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	442b      	add	r3, r5
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	e00e      	b.n	8007878 <_malloc_r+0xa0>
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	1b52      	subs	r2, r2, r5
 800785e:	d41e      	bmi.n	800789e <_malloc_r+0xc6>
 8007860:	2a0b      	cmp	r2, #11
 8007862:	d916      	bls.n	8007892 <_malloc_r+0xba>
 8007864:	1961      	adds	r1, r4, r5
 8007866:	42a3      	cmp	r3, r4
 8007868:	6025      	str	r5, [r4, #0]
 800786a:	bf18      	it	ne
 800786c:	6059      	strne	r1, [r3, #4]
 800786e:	6863      	ldr	r3, [r4, #4]
 8007870:	bf08      	it	eq
 8007872:	6031      	streq	r1, [r6, #0]
 8007874:	5162      	str	r2, [r4, r5]
 8007876:	604b      	str	r3, [r1, #4]
 8007878:	4638      	mov	r0, r7
 800787a:	f104 060b 	add.w	r6, r4, #11
 800787e:	f001 fecb 	bl	8009618 <__malloc_unlock>
 8007882:	f026 0607 	bic.w	r6, r6, #7
 8007886:	1d23      	adds	r3, r4, #4
 8007888:	1af2      	subs	r2, r6, r3
 800788a:	d0b6      	beq.n	80077fa <_malloc_r+0x22>
 800788c:	1b9b      	subs	r3, r3, r6
 800788e:	50a3      	str	r3, [r4, r2]
 8007890:	e7b3      	b.n	80077fa <_malloc_r+0x22>
 8007892:	6862      	ldr	r2, [r4, #4]
 8007894:	42a3      	cmp	r3, r4
 8007896:	bf0c      	ite	eq
 8007898:	6032      	streq	r2, [r6, #0]
 800789a:	605a      	strne	r2, [r3, #4]
 800789c:	e7ec      	b.n	8007878 <_malloc_r+0xa0>
 800789e:	4623      	mov	r3, r4
 80078a0:	6864      	ldr	r4, [r4, #4]
 80078a2:	e7b2      	b.n	800780a <_malloc_r+0x32>
 80078a4:	4634      	mov	r4, r6
 80078a6:	6876      	ldr	r6, [r6, #4]
 80078a8:	e7b9      	b.n	800781e <_malloc_r+0x46>
 80078aa:	230c      	movs	r3, #12
 80078ac:	603b      	str	r3, [r7, #0]
 80078ae:	4638      	mov	r0, r7
 80078b0:	f001 feb2 	bl	8009618 <__malloc_unlock>
 80078b4:	e7a1      	b.n	80077fa <_malloc_r+0x22>
 80078b6:	6025      	str	r5, [r4, #0]
 80078b8:	e7de      	b.n	8007878 <_malloc_r+0xa0>
 80078ba:	bf00      	nop
 80078bc:	200008dc 	.word	0x200008dc

080078c0 <__cvt>:
 80078c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078c4:	ec55 4b10 	vmov	r4, r5, d0
 80078c8:	2d00      	cmp	r5, #0
 80078ca:	460e      	mov	r6, r1
 80078cc:	4619      	mov	r1, r3
 80078ce:	462b      	mov	r3, r5
 80078d0:	bfbb      	ittet	lt
 80078d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078d6:	461d      	movlt	r5, r3
 80078d8:	2300      	movge	r3, #0
 80078da:	232d      	movlt	r3, #45	; 0x2d
 80078dc:	700b      	strb	r3, [r1, #0]
 80078de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078e4:	4691      	mov	r9, r2
 80078e6:	f023 0820 	bic.w	r8, r3, #32
 80078ea:	bfbc      	itt	lt
 80078ec:	4622      	movlt	r2, r4
 80078ee:	4614      	movlt	r4, r2
 80078f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078f4:	d005      	beq.n	8007902 <__cvt+0x42>
 80078f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078fa:	d100      	bne.n	80078fe <__cvt+0x3e>
 80078fc:	3601      	adds	r6, #1
 80078fe:	2102      	movs	r1, #2
 8007900:	e000      	b.n	8007904 <__cvt+0x44>
 8007902:	2103      	movs	r1, #3
 8007904:	ab03      	add	r3, sp, #12
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	ab02      	add	r3, sp, #8
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	ec45 4b10 	vmov	d0, r4, r5
 8007910:	4653      	mov	r3, sl
 8007912:	4632      	mov	r2, r6
 8007914:	f001 f808 	bl	8008928 <_dtoa_r>
 8007918:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800791c:	4607      	mov	r7, r0
 800791e:	d102      	bne.n	8007926 <__cvt+0x66>
 8007920:	f019 0f01 	tst.w	r9, #1
 8007924:	d022      	beq.n	800796c <__cvt+0xac>
 8007926:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800792a:	eb07 0906 	add.w	r9, r7, r6
 800792e:	d110      	bne.n	8007952 <__cvt+0x92>
 8007930:	783b      	ldrb	r3, [r7, #0]
 8007932:	2b30      	cmp	r3, #48	; 0x30
 8007934:	d10a      	bne.n	800794c <__cvt+0x8c>
 8007936:	2200      	movs	r2, #0
 8007938:	2300      	movs	r3, #0
 800793a:	4620      	mov	r0, r4
 800793c:	4629      	mov	r1, r5
 800793e:	f7f9 f8db 	bl	8000af8 <__aeabi_dcmpeq>
 8007942:	b918      	cbnz	r0, 800794c <__cvt+0x8c>
 8007944:	f1c6 0601 	rsb	r6, r6, #1
 8007948:	f8ca 6000 	str.w	r6, [sl]
 800794c:	f8da 3000 	ldr.w	r3, [sl]
 8007950:	4499      	add	r9, r3
 8007952:	2200      	movs	r2, #0
 8007954:	2300      	movs	r3, #0
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f9 f8cd 	bl	8000af8 <__aeabi_dcmpeq>
 800795e:	b108      	cbz	r0, 8007964 <__cvt+0xa4>
 8007960:	f8cd 900c 	str.w	r9, [sp, #12]
 8007964:	2230      	movs	r2, #48	; 0x30
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	454b      	cmp	r3, r9
 800796a:	d307      	bcc.n	800797c <__cvt+0xbc>
 800796c:	9b03      	ldr	r3, [sp, #12]
 800796e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007970:	1bdb      	subs	r3, r3, r7
 8007972:	4638      	mov	r0, r7
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	b004      	add	sp, #16
 8007978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797c:	1c59      	adds	r1, r3, #1
 800797e:	9103      	str	r1, [sp, #12]
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	e7f0      	b.n	8007966 <__cvt+0xa6>

08007984 <__exponent>:
 8007984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007986:	4603      	mov	r3, r0
 8007988:	2900      	cmp	r1, #0
 800798a:	bfb8      	it	lt
 800798c:	4249      	neglt	r1, r1
 800798e:	f803 2b02 	strb.w	r2, [r3], #2
 8007992:	bfb4      	ite	lt
 8007994:	222d      	movlt	r2, #45	; 0x2d
 8007996:	222b      	movge	r2, #43	; 0x2b
 8007998:	2909      	cmp	r1, #9
 800799a:	7042      	strb	r2, [r0, #1]
 800799c:	dd2a      	ble.n	80079f4 <__exponent+0x70>
 800799e:	f10d 0407 	add.w	r4, sp, #7
 80079a2:	46a4      	mov	ip, r4
 80079a4:	270a      	movs	r7, #10
 80079a6:	46a6      	mov	lr, r4
 80079a8:	460a      	mov	r2, r1
 80079aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80079ae:	fb07 1516 	mls	r5, r7, r6, r1
 80079b2:	3530      	adds	r5, #48	; 0x30
 80079b4:	2a63      	cmp	r2, #99	; 0x63
 80079b6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80079ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079be:	4631      	mov	r1, r6
 80079c0:	dcf1      	bgt.n	80079a6 <__exponent+0x22>
 80079c2:	3130      	adds	r1, #48	; 0x30
 80079c4:	f1ae 0502 	sub.w	r5, lr, #2
 80079c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079cc:	1c44      	adds	r4, r0, #1
 80079ce:	4629      	mov	r1, r5
 80079d0:	4561      	cmp	r1, ip
 80079d2:	d30a      	bcc.n	80079ea <__exponent+0x66>
 80079d4:	f10d 0209 	add.w	r2, sp, #9
 80079d8:	eba2 020e 	sub.w	r2, r2, lr
 80079dc:	4565      	cmp	r5, ip
 80079de:	bf88      	it	hi
 80079e0:	2200      	movhi	r2, #0
 80079e2:	4413      	add	r3, r2
 80079e4:	1a18      	subs	r0, r3, r0
 80079e6:	b003      	add	sp, #12
 80079e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80079f2:	e7ed      	b.n	80079d0 <__exponent+0x4c>
 80079f4:	2330      	movs	r3, #48	; 0x30
 80079f6:	3130      	adds	r1, #48	; 0x30
 80079f8:	7083      	strb	r3, [r0, #2]
 80079fa:	70c1      	strb	r1, [r0, #3]
 80079fc:	1d03      	adds	r3, r0, #4
 80079fe:	e7f1      	b.n	80079e4 <__exponent+0x60>

08007a00 <_printf_float>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	ed2d 8b02 	vpush	{d8}
 8007a08:	b08d      	sub	sp, #52	; 0x34
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a10:	4616      	mov	r6, r2
 8007a12:	461f      	mov	r7, r3
 8007a14:	4605      	mov	r5, r0
 8007a16:	f001 fd75 	bl	8009504 <_localeconv_r>
 8007a1a:	f8d0 a000 	ldr.w	sl, [r0]
 8007a1e:	4650      	mov	r0, sl
 8007a20:	f7f8 fbe8 	bl	80001f4 <strlen>
 8007a24:	2300      	movs	r3, #0
 8007a26:	930a      	str	r3, [sp, #40]	; 0x28
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	9305      	str	r3, [sp, #20]
 8007a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a34:	3307      	adds	r3, #7
 8007a36:	f023 0307 	bic.w	r3, r3, #7
 8007a3a:	f103 0208 	add.w	r2, r3, #8
 8007a3e:	f8c8 2000 	str.w	r2, [r8]
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a52:	9307      	str	r3, [sp, #28]
 8007a54:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a58:	ee08 0a10 	vmov	s16, r0
 8007a5c:	4b9f      	ldr	r3, [pc, #636]	; (8007cdc <_printf_float+0x2dc>)
 8007a5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a66:	f7f9 f879 	bl	8000b5c <__aeabi_dcmpun>
 8007a6a:	bb88      	cbnz	r0, 8007ad0 <_printf_float+0xd0>
 8007a6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a70:	4b9a      	ldr	r3, [pc, #616]	; (8007cdc <_printf_float+0x2dc>)
 8007a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a76:	f7f9 f853 	bl	8000b20 <__aeabi_dcmple>
 8007a7a:	bb48      	cbnz	r0, 8007ad0 <_printf_float+0xd0>
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4640      	mov	r0, r8
 8007a82:	4649      	mov	r1, r9
 8007a84:	f7f9 f842 	bl	8000b0c <__aeabi_dcmplt>
 8007a88:	b110      	cbz	r0, 8007a90 <_printf_float+0x90>
 8007a8a:	232d      	movs	r3, #45	; 0x2d
 8007a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a90:	4b93      	ldr	r3, [pc, #588]	; (8007ce0 <_printf_float+0x2e0>)
 8007a92:	4894      	ldr	r0, [pc, #592]	; (8007ce4 <_printf_float+0x2e4>)
 8007a94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a98:	bf94      	ite	ls
 8007a9a:	4698      	movls	r8, r3
 8007a9c:	4680      	movhi	r8, r0
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	6123      	str	r3, [r4, #16]
 8007aa2:	9b05      	ldr	r3, [sp, #20]
 8007aa4:	f023 0204 	bic.w	r2, r3, #4
 8007aa8:	6022      	str	r2, [r4, #0]
 8007aaa:	f04f 0900 	mov.w	r9, #0
 8007aae:	9700      	str	r7, [sp, #0]
 8007ab0:	4633      	mov	r3, r6
 8007ab2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f000 f9d8 	bl	8007e6c <_printf_common>
 8007abc:	3001      	adds	r0, #1
 8007abe:	f040 8090 	bne.w	8007be2 <_printf_float+0x1e2>
 8007ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ac6:	b00d      	add	sp, #52	; 0x34
 8007ac8:	ecbd 8b02 	vpop	{d8}
 8007acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	4640      	mov	r0, r8
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	f7f9 f840 	bl	8000b5c <__aeabi_dcmpun>
 8007adc:	b140      	cbz	r0, 8007af0 <_printf_float+0xf0>
 8007ade:	464b      	mov	r3, r9
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bfbc      	itt	lt
 8007ae4:	232d      	movlt	r3, #45	; 0x2d
 8007ae6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007aea:	487f      	ldr	r0, [pc, #508]	; (8007ce8 <_printf_float+0x2e8>)
 8007aec:	4b7f      	ldr	r3, [pc, #508]	; (8007cec <_printf_float+0x2ec>)
 8007aee:	e7d1      	b.n	8007a94 <_printf_float+0x94>
 8007af0:	6863      	ldr	r3, [r4, #4]
 8007af2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007af6:	9206      	str	r2, [sp, #24]
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	d13f      	bne.n	8007b7c <_printf_float+0x17c>
 8007afc:	2306      	movs	r3, #6
 8007afe:	6063      	str	r3, [r4, #4]
 8007b00:	9b05      	ldr	r3, [sp, #20]
 8007b02:	6861      	ldr	r1, [r4, #4]
 8007b04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b08:	2300      	movs	r3, #0
 8007b0a:	9303      	str	r3, [sp, #12]
 8007b0c:	ab0a      	add	r3, sp, #40	; 0x28
 8007b0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b12:	ab09      	add	r3, sp, #36	; 0x24
 8007b14:	ec49 8b10 	vmov	d0, r8, r9
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	6022      	str	r2, [r4, #0]
 8007b1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b20:	4628      	mov	r0, r5
 8007b22:	f7ff fecd 	bl	80078c0 <__cvt>
 8007b26:	9b06      	ldr	r3, [sp, #24]
 8007b28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b2a:	2b47      	cmp	r3, #71	; 0x47
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	d108      	bne.n	8007b42 <_printf_float+0x142>
 8007b30:	1cc8      	adds	r0, r1, #3
 8007b32:	db02      	blt.n	8007b3a <_printf_float+0x13a>
 8007b34:	6863      	ldr	r3, [r4, #4]
 8007b36:	4299      	cmp	r1, r3
 8007b38:	dd41      	ble.n	8007bbe <_printf_float+0x1be>
 8007b3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b3e:	fa5f fb8b 	uxtb.w	fp, fp
 8007b42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b46:	d820      	bhi.n	8007b8a <_printf_float+0x18a>
 8007b48:	3901      	subs	r1, #1
 8007b4a:	465a      	mov	r2, fp
 8007b4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b50:	9109      	str	r1, [sp, #36]	; 0x24
 8007b52:	f7ff ff17 	bl	8007984 <__exponent>
 8007b56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b58:	1813      	adds	r3, r2, r0
 8007b5a:	2a01      	cmp	r2, #1
 8007b5c:	4681      	mov	r9, r0
 8007b5e:	6123      	str	r3, [r4, #16]
 8007b60:	dc02      	bgt.n	8007b68 <_printf_float+0x168>
 8007b62:	6822      	ldr	r2, [r4, #0]
 8007b64:	07d2      	lsls	r2, r2, #31
 8007b66:	d501      	bpl.n	8007b6c <_printf_float+0x16c>
 8007b68:	3301      	adds	r3, #1
 8007b6a:	6123      	str	r3, [r4, #16]
 8007b6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d09c      	beq.n	8007aae <_printf_float+0xae>
 8007b74:	232d      	movs	r3, #45	; 0x2d
 8007b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b7a:	e798      	b.n	8007aae <_printf_float+0xae>
 8007b7c:	9a06      	ldr	r2, [sp, #24]
 8007b7e:	2a47      	cmp	r2, #71	; 0x47
 8007b80:	d1be      	bne.n	8007b00 <_printf_float+0x100>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1bc      	bne.n	8007b00 <_printf_float+0x100>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e7b9      	b.n	8007afe <_printf_float+0xfe>
 8007b8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b8e:	d118      	bne.n	8007bc2 <_printf_float+0x1c2>
 8007b90:	2900      	cmp	r1, #0
 8007b92:	6863      	ldr	r3, [r4, #4]
 8007b94:	dd0b      	ble.n	8007bae <_printf_float+0x1ae>
 8007b96:	6121      	str	r1, [r4, #16]
 8007b98:	b913      	cbnz	r3, 8007ba0 <_printf_float+0x1a0>
 8007b9a:	6822      	ldr	r2, [r4, #0]
 8007b9c:	07d0      	lsls	r0, r2, #31
 8007b9e:	d502      	bpl.n	8007ba6 <_printf_float+0x1a6>
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	440b      	add	r3, r1
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ba8:	f04f 0900 	mov.w	r9, #0
 8007bac:	e7de      	b.n	8007b6c <_printf_float+0x16c>
 8007bae:	b913      	cbnz	r3, 8007bb6 <_printf_float+0x1b6>
 8007bb0:	6822      	ldr	r2, [r4, #0]
 8007bb2:	07d2      	lsls	r2, r2, #31
 8007bb4:	d501      	bpl.n	8007bba <_printf_float+0x1ba>
 8007bb6:	3302      	adds	r3, #2
 8007bb8:	e7f4      	b.n	8007ba4 <_printf_float+0x1a4>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e7f2      	b.n	8007ba4 <_printf_float+0x1a4>
 8007bbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc4:	4299      	cmp	r1, r3
 8007bc6:	db05      	blt.n	8007bd4 <_printf_float+0x1d4>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	6121      	str	r1, [r4, #16]
 8007bcc:	07d8      	lsls	r0, r3, #31
 8007bce:	d5ea      	bpl.n	8007ba6 <_printf_float+0x1a6>
 8007bd0:	1c4b      	adds	r3, r1, #1
 8007bd2:	e7e7      	b.n	8007ba4 <_printf_float+0x1a4>
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	bfd4      	ite	le
 8007bd8:	f1c1 0202 	rsble	r2, r1, #2
 8007bdc:	2201      	movgt	r2, #1
 8007bde:	4413      	add	r3, r2
 8007be0:	e7e0      	b.n	8007ba4 <_printf_float+0x1a4>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	055a      	lsls	r2, r3, #21
 8007be6:	d407      	bmi.n	8007bf8 <_printf_float+0x1f8>
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	4642      	mov	r2, r8
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b8      	blx	r7
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	d12c      	bne.n	8007c50 <_printf_float+0x250>
 8007bf6:	e764      	b.n	8007ac2 <_printf_float+0xc2>
 8007bf8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bfc:	f240 80e0 	bls.w	8007dc0 <_printf_float+0x3c0>
 8007c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c04:	2200      	movs	r2, #0
 8007c06:	2300      	movs	r3, #0
 8007c08:	f7f8 ff76 	bl	8000af8 <__aeabi_dcmpeq>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d034      	beq.n	8007c7a <_printf_float+0x27a>
 8007c10:	4a37      	ldr	r2, [pc, #220]	; (8007cf0 <_printf_float+0x2f0>)
 8007c12:	2301      	movs	r3, #1
 8007c14:	4631      	mov	r1, r6
 8007c16:	4628      	mov	r0, r5
 8007c18:	47b8      	blx	r7
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	f43f af51 	beq.w	8007ac2 <_printf_float+0xc2>
 8007c20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c24:	429a      	cmp	r2, r3
 8007c26:	db02      	blt.n	8007c2e <_printf_float+0x22e>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	07d8      	lsls	r0, r3, #31
 8007c2c:	d510      	bpl.n	8007c50 <_printf_float+0x250>
 8007c2e:	ee18 3a10 	vmov	r3, s16
 8007c32:	4652      	mov	r2, sl
 8007c34:	4631      	mov	r1, r6
 8007c36:	4628      	mov	r0, r5
 8007c38:	47b8      	blx	r7
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f43f af41 	beq.w	8007ac2 <_printf_float+0xc2>
 8007c40:	f04f 0800 	mov.w	r8, #0
 8007c44:	f104 091a 	add.w	r9, r4, #26
 8007c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	4543      	cmp	r3, r8
 8007c4e:	dc09      	bgt.n	8007c64 <_printf_float+0x264>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	079b      	lsls	r3, r3, #30
 8007c54:	f100 8105 	bmi.w	8007e62 <_printf_float+0x462>
 8007c58:	68e0      	ldr	r0, [r4, #12]
 8007c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c5c:	4298      	cmp	r0, r3
 8007c5e:	bfb8      	it	lt
 8007c60:	4618      	movlt	r0, r3
 8007c62:	e730      	b.n	8007ac6 <_printf_float+0xc6>
 8007c64:	2301      	movs	r3, #1
 8007c66:	464a      	mov	r2, r9
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f af27 	beq.w	8007ac2 <_printf_float+0xc2>
 8007c74:	f108 0801 	add.w	r8, r8, #1
 8007c78:	e7e6      	b.n	8007c48 <_printf_float+0x248>
 8007c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	dc39      	bgt.n	8007cf4 <_printf_float+0x2f4>
 8007c80:	4a1b      	ldr	r2, [pc, #108]	; (8007cf0 <_printf_float+0x2f0>)
 8007c82:	2301      	movs	r3, #1
 8007c84:	4631      	mov	r1, r6
 8007c86:	4628      	mov	r0, r5
 8007c88:	47b8      	blx	r7
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	f43f af19 	beq.w	8007ac2 <_printf_float+0xc2>
 8007c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c94:	4313      	orrs	r3, r2
 8007c96:	d102      	bne.n	8007c9e <_printf_float+0x29e>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	07d9      	lsls	r1, r3, #31
 8007c9c:	d5d8      	bpl.n	8007c50 <_printf_float+0x250>
 8007c9e:	ee18 3a10 	vmov	r3, s16
 8007ca2:	4652      	mov	r2, sl
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b8      	blx	r7
 8007caa:	3001      	adds	r0, #1
 8007cac:	f43f af09 	beq.w	8007ac2 <_printf_float+0xc2>
 8007cb0:	f04f 0900 	mov.w	r9, #0
 8007cb4:	f104 0a1a 	add.w	sl, r4, #26
 8007cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cba:	425b      	negs	r3, r3
 8007cbc:	454b      	cmp	r3, r9
 8007cbe:	dc01      	bgt.n	8007cc4 <_printf_float+0x2c4>
 8007cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc2:	e792      	b.n	8007bea <_printf_float+0x1ea>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	4652      	mov	r2, sl
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	f43f aef7 	beq.w	8007ac2 <_printf_float+0xc2>
 8007cd4:	f109 0901 	add.w	r9, r9, #1
 8007cd8:	e7ee      	b.n	8007cb8 <_printf_float+0x2b8>
 8007cda:	bf00      	nop
 8007cdc:	7fefffff 	.word	0x7fefffff
 8007ce0:	0800a84c 	.word	0x0800a84c
 8007ce4:	0800a850 	.word	0x0800a850
 8007ce8:	0800a858 	.word	0x0800a858
 8007cec:	0800a854 	.word	0x0800a854
 8007cf0:	0800a85c 	.word	0x0800a85c
 8007cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	bfa8      	it	ge
 8007cfc:	461a      	movge	r2, r3
 8007cfe:	2a00      	cmp	r2, #0
 8007d00:	4691      	mov	r9, r2
 8007d02:	dc37      	bgt.n	8007d74 <_printf_float+0x374>
 8007d04:	f04f 0b00 	mov.w	fp, #0
 8007d08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d0c:	f104 021a 	add.w	r2, r4, #26
 8007d10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d12:	9305      	str	r3, [sp, #20]
 8007d14:	eba3 0309 	sub.w	r3, r3, r9
 8007d18:	455b      	cmp	r3, fp
 8007d1a:	dc33      	bgt.n	8007d84 <_printf_float+0x384>
 8007d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d20:	429a      	cmp	r2, r3
 8007d22:	db3b      	blt.n	8007d9c <_printf_float+0x39c>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	07da      	lsls	r2, r3, #31
 8007d28:	d438      	bmi.n	8007d9c <_printf_float+0x39c>
 8007d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2c:	9a05      	ldr	r2, [sp, #20]
 8007d2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d30:	1a9a      	subs	r2, r3, r2
 8007d32:	eba3 0901 	sub.w	r9, r3, r1
 8007d36:	4591      	cmp	r9, r2
 8007d38:	bfa8      	it	ge
 8007d3a:	4691      	movge	r9, r2
 8007d3c:	f1b9 0f00 	cmp.w	r9, #0
 8007d40:	dc35      	bgt.n	8007dae <_printf_float+0x3ae>
 8007d42:	f04f 0800 	mov.w	r8, #0
 8007d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d4a:	f104 0a1a 	add.w	sl, r4, #26
 8007d4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d52:	1a9b      	subs	r3, r3, r2
 8007d54:	eba3 0309 	sub.w	r3, r3, r9
 8007d58:	4543      	cmp	r3, r8
 8007d5a:	f77f af79 	ble.w	8007c50 <_printf_float+0x250>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	4652      	mov	r2, sl
 8007d62:	4631      	mov	r1, r6
 8007d64:	4628      	mov	r0, r5
 8007d66:	47b8      	blx	r7
 8007d68:	3001      	adds	r0, #1
 8007d6a:	f43f aeaa 	beq.w	8007ac2 <_printf_float+0xc2>
 8007d6e:	f108 0801 	add.w	r8, r8, #1
 8007d72:	e7ec      	b.n	8007d4e <_printf_float+0x34e>
 8007d74:	4613      	mov	r3, r2
 8007d76:	4631      	mov	r1, r6
 8007d78:	4642      	mov	r2, r8
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b8      	blx	r7
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d1c0      	bne.n	8007d04 <_printf_float+0x304>
 8007d82:	e69e      	b.n	8007ac2 <_printf_float+0xc2>
 8007d84:	2301      	movs	r3, #1
 8007d86:	4631      	mov	r1, r6
 8007d88:	4628      	mov	r0, r5
 8007d8a:	9205      	str	r2, [sp, #20]
 8007d8c:	47b8      	blx	r7
 8007d8e:	3001      	adds	r0, #1
 8007d90:	f43f ae97 	beq.w	8007ac2 <_printf_float+0xc2>
 8007d94:	9a05      	ldr	r2, [sp, #20]
 8007d96:	f10b 0b01 	add.w	fp, fp, #1
 8007d9a:	e7b9      	b.n	8007d10 <_printf_float+0x310>
 8007d9c:	ee18 3a10 	vmov	r3, s16
 8007da0:	4652      	mov	r2, sl
 8007da2:	4631      	mov	r1, r6
 8007da4:	4628      	mov	r0, r5
 8007da6:	47b8      	blx	r7
 8007da8:	3001      	adds	r0, #1
 8007daa:	d1be      	bne.n	8007d2a <_printf_float+0x32a>
 8007dac:	e689      	b.n	8007ac2 <_printf_float+0xc2>
 8007dae:	9a05      	ldr	r2, [sp, #20]
 8007db0:	464b      	mov	r3, r9
 8007db2:	4442      	add	r2, r8
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b8      	blx	r7
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d1c1      	bne.n	8007d42 <_printf_float+0x342>
 8007dbe:	e680      	b.n	8007ac2 <_printf_float+0xc2>
 8007dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dc2:	2a01      	cmp	r2, #1
 8007dc4:	dc01      	bgt.n	8007dca <_printf_float+0x3ca>
 8007dc6:	07db      	lsls	r3, r3, #31
 8007dc8:	d538      	bpl.n	8007e3c <_printf_float+0x43c>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	4642      	mov	r2, r8
 8007dce:	4631      	mov	r1, r6
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	47b8      	blx	r7
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	f43f ae74 	beq.w	8007ac2 <_printf_float+0xc2>
 8007dda:	ee18 3a10 	vmov	r3, s16
 8007dde:	4652      	mov	r2, sl
 8007de0:	4631      	mov	r1, r6
 8007de2:	4628      	mov	r0, r5
 8007de4:	47b8      	blx	r7
 8007de6:	3001      	adds	r0, #1
 8007de8:	f43f ae6b 	beq.w	8007ac2 <_printf_float+0xc2>
 8007dec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007df0:	2200      	movs	r2, #0
 8007df2:	2300      	movs	r3, #0
 8007df4:	f7f8 fe80 	bl	8000af8 <__aeabi_dcmpeq>
 8007df8:	b9d8      	cbnz	r0, 8007e32 <_printf_float+0x432>
 8007dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dfc:	f108 0201 	add.w	r2, r8, #1
 8007e00:	3b01      	subs	r3, #1
 8007e02:	4631      	mov	r1, r6
 8007e04:	4628      	mov	r0, r5
 8007e06:	47b8      	blx	r7
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d10e      	bne.n	8007e2a <_printf_float+0x42a>
 8007e0c:	e659      	b.n	8007ac2 <_printf_float+0xc2>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	4652      	mov	r2, sl
 8007e12:	4631      	mov	r1, r6
 8007e14:	4628      	mov	r0, r5
 8007e16:	47b8      	blx	r7
 8007e18:	3001      	adds	r0, #1
 8007e1a:	f43f ae52 	beq.w	8007ac2 <_printf_float+0xc2>
 8007e1e:	f108 0801 	add.w	r8, r8, #1
 8007e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e24:	3b01      	subs	r3, #1
 8007e26:	4543      	cmp	r3, r8
 8007e28:	dcf1      	bgt.n	8007e0e <_printf_float+0x40e>
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e30:	e6dc      	b.n	8007bec <_printf_float+0x1ec>
 8007e32:	f04f 0800 	mov.w	r8, #0
 8007e36:	f104 0a1a 	add.w	sl, r4, #26
 8007e3a:	e7f2      	b.n	8007e22 <_printf_float+0x422>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	4642      	mov	r2, r8
 8007e40:	e7df      	b.n	8007e02 <_printf_float+0x402>
 8007e42:	2301      	movs	r3, #1
 8007e44:	464a      	mov	r2, r9
 8007e46:	4631      	mov	r1, r6
 8007e48:	4628      	mov	r0, r5
 8007e4a:	47b8      	blx	r7
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	f43f ae38 	beq.w	8007ac2 <_printf_float+0xc2>
 8007e52:	f108 0801 	add.w	r8, r8, #1
 8007e56:	68e3      	ldr	r3, [r4, #12]
 8007e58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e5a:	1a5b      	subs	r3, r3, r1
 8007e5c:	4543      	cmp	r3, r8
 8007e5e:	dcf0      	bgt.n	8007e42 <_printf_float+0x442>
 8007e60:	e6fa      	b.n	8007c58 <_printf_float+0x258>
 8007e62:	f04f 0800 	mov.w	r8, #0
 8007e66:	f104 0919 	add.w	r9, r4, #25
 8007e6a:	e7f4      	b.n	8007e56 <_printf_float+0x456>

08007e6c <_printf_common>:
 8007e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e70:	4616      	mov	r6, r2
 8007e72:	4699      	mov	r9, r3
 8007e74:	688a      	ldr	r2, [r1, #8]
 8007e76:	690b      	ldr	r3, [r1, #16]
 8007e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	bfb8      	it	lt
 8007e80:	4613      	movlt	r3, r2
 8007e82:	6033      	str	r3, [r6, #0]
 8007e84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e88:	4607      	mov	r7, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	b10a      	cbz	r2, 8007e92 <_printf_common+0x26>
 8007e8e:	3301      	adds	r3, #1
 8007e90:	6033      	str	r3, [r6, #0]
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	0699      	lsls	r1, r3, #26
 8007e96:	bf42      	ittt	mi
 8007e98:	6833      	ldrmi	r3, [r6, #0]
 8007e9a:	3302      	addmi	r3, #2
 8007e9c:	6033      	strmi	r3, [r6, #0]
 8007e9e:	6825      	ldr	r5, [r4, #0]
 8007ea0:	f015 0506 	ands.w	r5, r5, #6
 8007ea4:	d106      	bne.n	8007eb4 <_printf_common+0x48>
 8007ea6:	f104 0a19 	add.w	sl, r4, #25
 8007eaa:	68e3      	ldr	r3, [r4, #12]
 8007eac:	6832      	ldr	r2, [r6, #0]
 8007eae:	1a9b      	subs	r3, r3, r2
 8007eb0:	42ab      	cmp	r3, r5
 8007eb2:	dc26      	bgt.n	8007f02 <_printf_common+0x96>
 8007eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007eb8:	1e13      	subs	r3, r2, #0
 8007eba:	6822      	ldr	r2, [r4, #0]
 8007ebc:	bf18      	it	ne
 8007ebe:	2301      	movne	r3, #1
 8007ec0:	0692      	lsls	r2, r2, #26
 8007ec2:	d42b      	bmi.n	8007f1c <_printf_common+0xb0>
 8007ec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ec8:	4649      	mov	r1, r9
 8007eca:	4638      	mov	r0, r7
 8007ecc:	47c0      	blx	r8
 8007ece:	3001      	adds	r0, #1
 8007ed0:	d01e      	beq.n	8007f10 <_printf_common+0xa4>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	68e5      	ldr	r5, [r4, #12]
 8007ed6:	6832      	ldr	r2, [r6, #0]
 8007ed8:	f003 0306 	and.w	r3, r3, #6
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	bf08      	it	eq
 8007ee0:	1aad      	subeq	r5, r5, r2
 8007ee2:	68a3      	ldr	r3, [r4, #8]
 8007ee4:	6922      	ldr	r2, [r4, #16]
 8007ee6:	bf0c      	ite	eq
 8007ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eec:	2500      	movne	r5, #0
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	bfc4      	itt	gt
 8007ef2:	1a9b      	subgt	r3, r3, r2
 8007ef4:	18ed      	addgt	r5, r5, r3
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	341a      	adds	r4, #26
 8007efa:	42b5      	cmp	r5, r6
 8007efc:	d11a      	bne.n	8007f34 <_printf_common+0xc8>
 8007efe:	2000      	movs	r0, #0
 8007f00:	e008      	b.n	8007f14 <_printf_common+0xa8>
 8007f02:	2301      	movs	r3, #1
 8007f04:	4652      	mov	r2, sl
 8007f06:	4649      	mov	r1, r9
 8007f08:	4638      	mov	r0, r7
 8007f0a:	47c0      	blx	r8
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d103      	bne.n	8007f18 <_printf_common+0xac>
 8007f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f18:	3501      	adds	r5, #1
 8007f1a:	e7c6      	b.n	8007eaa <_printf_common+0x3e>
 8007f1c:	18e1      	adds	r1, r4, r3
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	2030      	movs	r0, #48	; 0x30
 8007f22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f26:	4422      	add	r2, r4
 8007f28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f30:	3302      	adds	r3, #2
 8007f32:	e7c7      	b.n	8007ec4 <_printf_common+0x58>
 8007f34:	2301      	movs	r3, #1
 8007f36:	4622      	mov	r2, r4
 8007f38:	4649      	mov	r1, r9
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	47c0      	blx	r8
 8007f3e:	3001      	adds	r0, #1
 8007f40:	d0e6      	beq.n	8007f10 <_printf_common+0xa4>
 8007f42:	3601      	adds	r6, #1
 8007f44:	e7d9      	b.n	8007efa <_printf_common+0x8e>
	...

08007f48 <_printf_i>:
 8007f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4c:	7e0f      	ldrb	r7, [r1, #24]
 8007f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f50:	2f78      	cmp	r7, #120	; 0x78
 8007f52:	4691      	mov	r9, r2
 8007f54:	4680      	mov	r8, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	469a      	mov	sl, r3
 8007f5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f5e:	d807      	bhi.n	8007f70 <_printf_i+0x28>
 8007f60:	2f62      	cmp	r7, #98	; 0x62
 8007f62:	d80a      	bhi.n	8007f7a <_printf_i+0x32>
 8007f64:	2f00      	cmp	r7, #0
 8007f66:	f000 80d8 	beq.w	800811a <_printf_i+0x1d2>
 8007f6a:	2f58      	cmp	r7, #88	; 0x58
 8007f6c:	f000 80a3 	beq.w	80080b6 <_printf_i+0x16e>
 8007f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f78:	e03a      	b.n	8007ff0 <_printf_i+0xa8>
 8007f7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f7e:	2b15      	cmp	r3, #21
 8007f80:	d8f6      	bhi.n	8007f70 <_printf_i+0x28>
 8007f82:	a101      	add	r1, pc, #4	; (adr r1, 8007f88 <_printf_i+0x40>)
 8007f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f88:	08007fe1 	.word	0x08007fe1
 8007f8c:	08007ff5 	.word	0x08007ff5
 8007f90:	08007f71 	.word	0x08007f71
 8007f94:	08007f71 	.word	0x08007f71
 8007f98:	08007f71 	.word	0x08007f71
 8007f9c:	08007f71 	.word	0x08007f71
 8007fa0:	08007ff5 	.word	0x08007ff5
 8007fa4:	08007f71 	.word	0x08007f71
 8007fa8:	08007f71 	.word	0x08007f71
 8007fac:	08007f71 	.word	0x08007f71
 8007fb0:	08007f71 	.word	0x08007f71
 8007fb4:	08008101 	.word	0x08008101
 8007fb8:	08008025 	.word	0x08008025
 8007fbc:	080080e3 	.word	0x080080e3
 8007fc0:	08007f71 	.word	0x08007f71
 8007fc4:	08007f71 	.word	0x08007f71
 8007fc8:	08008123 	.word	0x08008123
 8007fcc:	08007f71 	.word	0x08007f71
 8007fd0:	08008025 	.word	0x08008025
 8007fd4:	08007f71 	.word	0x08007f71
 8007fd8:	08007f71 	.word	0x08007f71
 8007fdc:	080080eb 	.word	0x080080eb
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	1d1a      	adds	r2, r3, #4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	602a      	str	r2, [r5, #0]
 8007fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e0a3      	b.n	800813c <_printf_i+0x1f4>
 8007ff4:	6820      	ldr	r0, [r4, #0]
 8007ff6:	6829      	ldr	r1, [r5, #0]
 8007ff8:	0606      	lsls	r6, r0, #24
 8007ffa:	f101 0304 	add.w	r3, r1, #4
 8007ffe:	d50a      	bpl.n	8008016 <_printf_i+0xce>
 8008000:	680e      	ldr	r6, [r1, #0]
 8008002:	602b      	str	r3, [r5, #0]
 8008004:	2e00      	cmp	r6, #0
 8008006:	da03      	bge.n	8008010 <_printf_i+0xc8>
 8008008:	232d      	movs	r3, #45	; 0x2d
 800800a:	4276      	negs	r6, r6
 800800c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008010:	485e      	ldr	r0, [pc, #376]	; (800818c <_printf_i+0x244>)
 8008012:	230a      	movs	r3, #10
 8008014:	e019      	b.n	800804a <_printf_i+0x102>
 8008016:	680e      	ldr	r6, [r1, #0]
 8008018:	602b      	str	r3, [r5, #0]
 800801a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800801e:	bf18      	it	ne
 8008020:	b236      	sxthne	r6, r6
 8008022:	e7ef      	b.n	8008004 <_printf_i+0xbc>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	6820      	ldr	r0, [r4, #0]
 8008028:	1d19      	adds	r1, r3, #4
 800802a:	6029      	str	r1, [r5, #0]
 800802c:	0601      	lsls	r1, r0, #24
 800802e:	d501      	bpl.n	8008034 <_printf_i+0xec>
 8008030:	681e      	ldr	r6, [r3, #0]
 8008032:	e002      	b.n	800803a <_printf_i+0xf2>
 8008034:	0646      	lsls	r6, r0, #25
 8008036:	d5fb      	bpl.n	8008030 <_printf_i+0xe8>
 8008038:	881e      	ldrh	r6, [r3, #0]
 800803a:	4854      	ldr	r0, [pc, #336]	; (800818c <_printf_i+0x244>)
 800803c:	2f6f      	cmp	r7, #111	; 0x6f
 800803e:	bf0c      	ite	eq
 8008040:	2308      	moveq	r3, #8
 8008042:	230a      	movne	r3, #10
 8008044:	2100      	movs	r1, #0
 8008046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800804a:	6865      	ldr	r5, [r4, #4]
 800804c:	60a5      	str	r5, [r4, #8]
 800804e:	2d00      	cmp	r5, #0
 8008050:	bfa2      	ittt	ge
 8008052:	6821      	ldrge	r1, [r4, #0]
 8008054:	f021 0104 	bicge.w	r1, r1, #4
 8008058:	6021      	strge	r1, [r4, #0]
 800805a:	b90e      	cbnz	r6, 8008060 <_printf_i+0x118>
 800805c:	2d00      	cmp	r5, #0
 800805e:	d04d      	beq.n	80080fc <_printf_i+0x1b4>
 8008060:	4615      	mov	r5, r2
 8008062:	fbb6 f1f3 	udiv	r1, r6, r3
 8008066:	fb03 6711 	mls	r7, r3, r1, r6
 800806a:	5dc7      	ldrb	r7, [r0, r7]
 800806c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008070:	4637      	mov	r7, r6
 8008072:	42bb      	cmp	r3, r7
 8008074:	460e      	mov	r6, r1
 8008076:	d9f4      	bls.n	8008062 <_printf_i+0x11a>
 8008078:	2b08      	cmp	r3, #8
 800807a:	d10b      	bne.n	8008094 <_printf_i+0x14c>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	07de      	lsls	r6, r3, #31
 8008080:	d508      	bpl.n	8008094 <_printf_i+0x14c>
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	6861      	ldr	r1, [r4, #4]
 8008086:	4299      	cmp	r1, r3
 8008088:	bfde      	ittt	le
 800808a:	2330      	movle	r3, #48	; 0x30
 800808c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008090:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008094:	1b52      	subs	r2, r2, r5
 8008096:	6122      	str	r2, [r4, #16]
 8008098:	f8cd a000 	str.w	sl, [sp]
 800809c:	464b      	mov	r3, r9
 800809e:	aa03      	add	r2, sp, #12
 80080a0:	4621      	mov	r1, r4
 80080a2:	4640      	mov	r0, r8
 80080a4:	f7ff fee2 	bl	8007e6c <_printf_common>
 80080a8:	3001      	adds	r0, #1
 80080aa:	d14c      	bne.n	8008146 <_printf_i+0x1fe>
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080b0:	b004      	add	sp, #16
 80080b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b6:	4835      	ldr	r0, [pc, #212]	; (800818c <_printf_i+0x244>)
 80080b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080bc:	6829      	ldr	r1, [r5, #0]
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80080c4:	6029      	str	r1, [r5, #0]
 80080c6:	061d      	lsls	r5, r3, #24
 80080c8:	d514      	bpl.n	80080f4 <_printf_i+0x1ac>
 80080ca:	07df      	lsls	r7, r3, #31
 80080cc:	bf44      	itt	mi
 80080ce:	f043 0320 	orrmi.w	r3, r3, #32
 80080d2:	6023      	strmi	r3, [r4, #0]
 80080d4:	b91e      	cbnz	r6, 80080de <_printf_i+0x196>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	f023 0320 	bic.w	r3, r3, #32
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	2310      	movs	r3, #16
 80080e0:	e7b0      	b.n	8008044 <_printf_i+0xfc>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	f043 0320 	orr.w	r3, r3, #32
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	2378      	movs	r3, #120	; 0x78
 80080ec:	4828      	ldr	r0, [pc, #160]	; (8008190 <_printf_i+0x248>)
 80080ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080f2:	e7e3      	b.n	80080bc <_printf_i+0x174>
 80080f4:	0659      	lsls	r1, r3, #25
 80080f6:	bf48      	it	mi
 80080f8:	b2b6      	uxthmi	r6, r6
 80080fa:	e7e6      	b.n	80080ca <_printf_i+0x182>
 80080fc:	4615      	mov	r5, r2
 80080fe:	e7bb      	b.n	8008078 <_printf_i+0x130>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	6826      	ldr	r6, [r4, #0]
 8008104:	6961      	ldr	r1, [r4, #20]
 8008106:	1d18      	adds	r0, r3, #4
 8008108:	6028      	str	r0, [r5, #0]
 800810a:	0635      	lsls	r5, r6, #24
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	d501      	bpl.n	8008114 <_printf_i+0x1cc>
 8008110:	6019      	str	r1, [r3, #0]
 8008112:	e002      	b.n	800811a <_printf_i+0x1d2>
 8008114:	0670      	lsls	r0, r6, #25
 8008116:	d5fb      	bpl.n	8008110 <_printf_i+0x1c8>
 8008118:	8019      	strh	r1, [r3, #0]
 800811a:	2300      	movs	r3, #0
 800811c:	6123      	str	r3, [r4, #16]
 800811e:	4615      	mov	r5, r2
 8008120:	e7ba      	b.n	8008098 <_printf_i+0x150>
 8008122:	682b      	ldr	r3, [r5, #0]
 8008124:	1d1a      	adds	r2, r3, #4
 8008126:	602a      	str	r2, [r5, #0]
 8008128:	681d      	ldr	r5, [r3, #0]
 800812a:	6862      	ldr	r2, [r4, #4]
 800812c:	2100      	movs	r1, #0
 800812e:	4628      	mov	r0, r5
 8008130:	f7f8 f86e 	bl	8000210 <memchr>
 8008134:	b108      	cbz	r0, 800813a <_printf_i+0x1f2>
 8008136:	1b40      	subs	r0, r0, r5
 8008138:	6060      	str	r0, [r4, #4]
 800813a:	6863      	ldr	r3, [r4, #4]
 800813c:	6123      	str	r3, [r4, #16]
 800813e:	2300      	movs	r3, #0
 8008140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008144:	e7a8      	b.n	8008098 <_printf_i+0x150>
 8008146:	6923      	ldr	r3, [r4, #16]
 8008148:	462a      	mov	r2, r5
 800814a:	4649      	mov	r1, r9
 800814c:	4640      	mov	r0, r8
 800814e:	47d0      	blx	sl
 8008150:	3001      	adds	r0, #1
 8008152:	d0ab      	beq.n	80080ac <_printf_i+0x164>
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	079b      	lsls	r3, r3, #30
 8008158:	d413      	bmi.n	8008182 <_printf_i+0x23a>
 800815a:	68e0      	ldr	r0, [r4, #12]
 800815c:	9b03      	ldr	r3, [sp, #12]
 800815e:	4298      	cmp	r0, r3
 8008160:	bfb8      	it	lt
 8008162:	4618      	movlt	r0, r3
 8008164:	e7a4      	b.n	80080b0 <_printf_i+0x168>
 8008166:	2301      	movs	r3, #1
 8008168:	4632      	mov	r2, r6
 800816a:	4649      	mov	r1, r9
 800816c:	4640      	mov	r0, r8
 800816e:	47d0      	blx	sl
 8008170:	3001      	adds	r0, #1
 8008172:	d09b      	beq.n	80080ac <_printf_i+0x164>
 8008174:	3501      	adds	r5, #1
 8008176:	68e3      	ldr	r3, [r4, #12]
 8008178:	9903      	ldr	r1, [sp, #12]
 800817a:	1a5b      	subs	r3, r3, r1
 800817c:	42ab      	cmp	r3, r5
 800817e:	dcf2      	bgt.n	8008166 <_printf_i+0x21e>
 8008180:	e7eb      	b.n	800815a <_printf_i+0x212>
 8008182:	2500      	movs	r5, #0
 8008184:	f104 0619 	add.w	r6, r4, #25
 8008188:	e7f5      	b.n	8008176 <_printf_i+0x22e>
 800818a:	bf00      	nop
 800818c:	0800a85e 	.word	0x0800a85e
 8008190:	0800a86f 	.word	0x0800a86f

08008194 <iprintf>:
 8008194:	b40f      	push	{r0, r1, r2, r3}
 8008196:	4b0a      	ldr	r3, [pc, #40]	; (80081c0 <iprintf+0x2c>)
 8008198:	b513      	push	{r0, r1, r4, lr}
 800819a:	681c      	ldr	r4, [r3, #0]
 800819c:	b124      	cbz	r4, 80081a8 <iprintf+0x14>
 800819e:	69a3      	ldr	r3, [r4, #24]
 80081a0:	b913      	cbnz	r3, 80081a8 <iprintf+0x14>
 80081a2:	4620      	mov	r0, r4
 80081a4:	f7ff f9d0 	bl	8007548 <__sinit>
 80081a8:	ab05      	add	r3, sp, #20
 80081aa:	9a04      	ldr	r2, [sp, #16]
 80081ac:	68a1      	ldr	r1, [r4, #8]
 80081ae:	9301      	str	r3, [sp, #4]
 80081b0:	4620      	mov	r0, r4
 80081b2:	f001 ff57 	bl	800a064 <_vfiprintf_r>
 80081b6:	b002      	add	sp, #8
 80081b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081bc:	b004      	add	sp, #16
 80081be:	4770      	bx	lr
 80081c0:	20000010 	.word	0x20000010

080081c4 <_puts_r>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	460e      	mov	r6, r1
 80081c8:	4605      	mov	r5, r0
 80081ca:	b118      	cbz	r0, 80081d4 <_puts_r+0x10>
 80081cc:	6983      	ldr	r3, [r0, #24]
 80081ce:	b90b      	cbnz	r3, 80081d4 <_puts_r+0x10>
 80081d0:	f7ff f9ba 	bl	8007548 <__sinit>
 80081d4:	69ab      	ldr	r3, [r5, #24]
 80081d6:	68ac      	ldr	r4, [r5, #8]
 80081d8:	b913      	cbnz	r3, 80081e0 <_puts_r+0x1c>
 80081da:	4628      	mov	r0, r5
 80081dc:	f7ff f9b4 	bl	8007548 <__sinit>
 80081e0:	4b2c      	ldr	r3, [pc, #176]	; (8008294 <_puts_r+0xd0>)
 80081e2:	429c      	cmp	r4, r3
 80081e4:	d120      	bne.n	8008228 <_puts_r+0x64>
 80081e6:	686c      	ldr	r4, [r5, #4]
 80081e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ea:	07db      	lsls	r3, r3, #31
 80081ec:	d405      	bmi.n	80081fa <_puts_r+0x36>
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	0598      	lsls	r0, r3, #22
 80081f2:	d402      	bmi.n	80081fa <_puts_r+0x36>
 80081f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081f6:	f7ff fa6a 	bl	80076ce <__retarget_lock_acquire_recursive>
 80081fa:	89a3      	ldrh	r3, [r4, #12]
 80081fc:	0719      	lsls	r1, r3, #28
 80081fe:	d51d      	bpl.n	800823c <_puts_r+0x78>
 8008200:	6923      	ldr	r3, [r4, #16]
 8008202:	b1db      	cbz	r3, 800823c <_puts_r+0x78>
 8008204:	3e01      	subs	r6, #1
 8008206:	68a3      	ldr	r3, [r4, #8]
 8008208:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800820c:	3b01      	subs	r3, #1
 800820e:	60a3      	str	r3, [r4, #8]
 8008210:	bb39      	cbnz	r1, 8008262 <_puts_r+0x9e>
 8008212:	2b00      	cmp	r3, #0
 8008214:	da38      	bge.n	8008288 <_puts_r+0xc4>
 8008216:	4622      	mov	r2, r4
 8008218:	210a      	movs	r1, #10
 800821a:	4628      	mov	r0, r5
 800821c:	f000 fa14 	bl	8008648 <__swbuf_r>
 8008220:	3001      	adds	r0, #1
 8008222:	d011      	beq.n	8008248 <_puts_r+0x84>
 8008224:	250a      	movs	r5, #10
 8008226:	e011      	b.n	800824c <_puts_r+0x88>
 8008228:	4b1b      	ldr	r3, [pc, #108]	; (8008298 <_puts_r+0xd4>)
 800822a:	429c      	cmp	r4, r3
 800822c:	d101      	bne.n	8008232 <_puts_r+0x6e>
 800822e:	68ac      	ldr	r4, [r5, #8]
 8008230:	e7da      	b.n	80081e8 <_puts_r+0x24>
 8008232:	4b1a      	ldr	r3, [pc, #104]	; (800829c <_puts_r+0xd8>)
 8008234:	429c      	cmp	r4, r3
 8008236:	bf08      	it	eq
 8008238:	68ec      	ldreq	r4, [r5, #12]
 800823a:	e7d5      	b.n	80081e8 <_puts_r+0x24>
 800823c:	4621      	mov	r1, r4
 800823e:	4628      	mov	r0, r5
 8008240:	f000 fa66 	bl	8008710 <__swsetup_r>
 8008244:	2800      	cmp	r0, #0
 8008246:	d0dd      	beq.n	8008204 <_puts_r+0x40>
 8008248:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800824c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800824e:	07da      	lsls	r2, r3, #31
 8008250:	d405      	bmi.n	800825e <_puts_r+0x9a>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	059b      	lsls	r3, r3, #22
 8008256:	d402      	bmi.n	800825e <_puts_r+0x9a>
 8008258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800825a:	f7ff fa39 	bl	80076d0 <__retarget_lock_release_recursive>
 800825e:	4628      	mov	r0, r5
 8008260:	bd70      	pop	{r4, r5, r6, pc}
 8008262:	2b00      	cmp	r3, #0
 8008264:	da04      	bge.n	8008270 <_puts_r+0xac>
 8008266:	69a2      	ldr	r2, [r4, #24]
 8008268:	429a      	cmp	r2, r3
 800826a:	dc06      	bgt.n	800827a <_puts_r+0xb6>
 800826c:	290a      	cmp	r1, #10
 800826e:	d004      	beq.n	800827a <_puts_r+0xb6>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	6022      	str	r2, [r4, #0]
 8008276:	7019      	strb	r1, [r3, #0]
 8008278:	e7c5      	b.n	8008206 <_puts_r+0x42>
 800827a:	4622      	mov	r2, r4
 800827c:	4628      	mov	r0, r5
 800827e:	f000 f9e3 	bl	8008648 <__swbuf_r>
 8008282:	3001      	adds	r0, #1
 8008284:	d1bf      	bne.n	8008206 <_puts_r+0x42>
 8008286:	e7df      	b.n	8008248 <_puts_r+0x84>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	250a      	movs	r5, #10
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	6022      	str	r2, [r4, #0]
 8008290:	701d      	strb	r5, [r3, #0]
 8008292:	e7db      	b.n	800824c <_puts_r+0x88>
 8008294:	0800a808 	.word	0x0800a808
 8008298:	0800a828 	.word	0x0800a828
 800829c:	0800a7e8 	.word	0x0800a7e8

080082a0 <puts>:
 80082a0:	4b02      	ldr	r3, [pc, #8]	; (80082ac <puts+0xc>)
 80082a2:	4601      	mov	r1, r0
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	f7ff bf8d 	b.w	80081c4 <_puts_r>
 80082aa:	bf00      	nop
 80082ac:	20000010 	.word	0x20000010

080082b0 <_sbrk_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4d06      	ldr	r5, [pc, #24]	; (80082cc <_sbrk_r+0x1c>)
 80082b4:	2300      	movs	r3, #0
 80082b6:	4604      	mov	r4, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	f7fb faa6 	bl	800380c <_sbrk>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_sbrk_r+0x1a>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_sbrk_r+0x1a>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	200008e4 	.word	0x200008e4

080082d0 <siprintf>:
 80082d0:	b40e      	push	{r1, r2, r3}
 80082d2:	b500      	push	{lr}
 80082d4:	b09c      	sub	sp, #112	; 0x70
 80082d6:	ab1d      	add	r3, sp, #116	; 0x74
 80082d8:	9002      	str	r0, [sp, #8]
 80082da:	9006      	str	r0, [sp, #24]
 80082dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082e0:	4809      	ldr	r0, [pc, #36]	; (8008308 <siprintf+0x38>)
 80082e2:	9107      	str	r1, [sp, #28]
 80082e4:	9104      	str	r1, [sp, #16]
 80082e6:	4909      	ldr	r1, [pc, #36]	; (800830c <siprintf+0x3c>)
 80082e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ec:	9105      	str	r1, [sp, #20]
 80082ee:	6800      	ldr	r0, [r0, #0]
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	a902      	add	r1, sp, #8
 80082f4:	f001 fd8c 	bl	8009e10 <_svfiprintf_r>
 80082f8:	9b02      	ldr	r3, [sp, #8]
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	b01c      	add	sp, #112	; 0x70
 8008300:	f85d eb04 	ldr.w	lr, [sp], #4
 8008304:	b003      	add	sp, #12
 8008306:	4770      	bx	lr
 8008308:	20000010 	.word	0x20000010
 800830c:	ffff0208 	.word	0xffff0208

08008310 <__sread>:
 8008310:	b510      	push	{r4, lr}
 8008312:	460c      	mov	r4, r1
 8008314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008318:	f001 ffd4 	bl	800a2c4 <_read_r>
 800831c:	2800      	cmp	r0, #0
 800831e:	bfab      	itete	ge
 8008320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008322:	89a3      	ldrhlt	r3, [r4, #12]
 8008324:	181b      	addge	r3, r3, r0
 8008326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800832a:	bfac      	ite	ge
 800832c:	6563      	strge	r3, [r4, #84]	; 0x54
 800832e:	81a3      	strhlt	r3, [r4, #12]
 8008330:	bd10      	pop	{r4, pc}

08008332 <__swrite>:
 8008332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008336:	461f      	mov	r7, r3
 8008338:	898b      	ldrh	r3, [r1, #12]
 800833a:	05db      	lsls	r3, r3, #23
 800833c:	4605      	mov	r5, r0
 800833e:	460c      	mov	r4, r1
 8008340:	4616      	mov	r6, r2
 8008342:	d505      	bpl.n	8008350 <__swrite+0x1e>
 8008344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008348:	2302      	movs	r3, #2
 800834a:	2200      	movs	r2, #0
 800834c:	f001 f8de 	bl	800950c <_lseek_r>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	4632      	mov	r2, r6
 800835e:	463b      	mov	r3, r7
 8008360:	4628      	mov	r0, r5
 8008362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008366:	f000 b9c1 	b.w	80086ec <_write_r>

0800836a <__sseek>:
 800836a:	b510      	push	{r4, lr}
 800836c:	460c      	mov	r4, r1
 800836e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008372:	f001 f8cb 	bl	800950c <_lseek_r>
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	bf15      	itete	ne
 800837c:	6560      	strne	r0, [r4, #84]	; 0x54
 800837e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008386:	81a3      	strheq	r3, [r4, #12]
 8008388:	bf18      	it	ne
 800838a:	81a3      	strhne	r3, [r4, #12]
 800838c:	bd10      	pop	{r4, pc}

0800838e <__sclose>:
 800838e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008392:	f000 ba2b 	b.w	80087ec <_close_r>

08008396 <__strtok_r>:
 8008396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008398:	b908      	cbnz	r0, 800839e <__strtok_r+0x8>
 800839a:	6810      	ldr	r0, [r2, #0]
 800839c:	b188      	cbz	r0, 80083c2 <__strtok_r+0x2c>
 800839e:	4604      	mov	r4, r0
 80083a0:	4620      	mov	r0, r4
 80083a2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80083a6:	460f      	mov	r7, r1
 80083a8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80083ac:	b91e      	cbnz	r6, 80083b6 <__strtok_r+0x20>
 80083ae:	b965      	cbnz	r5, 80083ca <__strtok_r+0x34>
 80083b0:	6015      	str	r5, [r2, #0]
 80083b2:	4628      	mov	r0, r5
 80083b4:	e005      	b.n	80083c2 <__strtok_r+0x2c>
 80083b6:	42b5      	cmp	r5, r6
 80083b8:	d1f6      	bne.n	80083a8 <__strtok_r+0x12>
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1f0      	bne.n	80083a0 <__strtok_r+0xa>
 80083be:	6014      	str	r4, [r2, #0]
 80083c0:	7003      	strb	r3, [r0, #0]
 80083c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083c4:	461c      	mov	r4, r3
 80083c6:	e00c      	b.n	80083e2 <__strtok_r+0x4c>
 80083c8:	b915      	cbnz	r5, 80083d0 <__strtok_r+0x3a>
 80083ca:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083ce:	460e      	mov	r6, r1
 80083d0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80083d4:	42ab      	cmp	r3, r5
 80083d6:	d1f7      	bne.n	80083c8 <__strtok_r+0x32>
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0f3      	beq.n	80083c4 <__strtok_r+0x2e>
 80083dc:	2300      	movs	r3, #0
 80083de:	f804 3c01 	strb.w	r3, [r4, #-1]
 80083e2:	6014      	str	r4, [r2, #0]
 80083e4:	e7ed      	b.n	80083c2 <__strtok_r+0x2c>

080083e6 <strtok_r>:
 80083e6:	2301      	movs	r3, #1
 80083e8:	f7ff bfd5 	b.w	8008396 <__strtok_r>

080083ec <_strtol_l.constprop.0>:
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f2:	d001      	beq.n	80083f8 <_strtol_l.constprop.0+0xc>
 80083f4:	2b24      	cmp	r3, #36	; 0x24
 80083f6:	d906      	bls.n	8008406 <_strtol_l.constprop.0+0x1a>
 80083f8:	f7fe ff74 	bl	80072e4 <__errno>
 80083fc:	2316      	movs	r3, #22
 80083fe:	6003      	str	r3, [r0, #0]
 8008400:	2000      	movs	r0, #0
 8008402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008406:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80084ec <_strtol_l.constprop.0+0x100>
 800840a:	460d      	mov	r5, r1
 800840c:	462e      	mov	r6, r5
 800840e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008412:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008416:	f017 0708 	ands.w	r7, r7, #8
 800841a:	d1f7      	bne.n	800840c <_strtol_l.constprop.0+0x20>
 800841c:	2c2d      	cmp	r4, #45	; 0x2d
 800841e:	d132      	bne.n	8008486 <_strtol_l.constprop.0+0x9a>
 8008420:	782c      	ldrb	r4, [r5, #0]
 8008422:	2701      	movs	r7, #1
 8008424:	1cb5      	adds	r5, r6, #2
 8008426:	2b00      	cmp	r3, #0
 8008428:	d05b      	beq.n	80084e2 <_strtol_l.constprop.0+0xf6>
 800842a:	2b10      	cmp	r3, #16
 800842c:	d109      	bne.n	8008442 <_strtol_l.constprop.0+0x56>
 800842e:	2c30      	cmp	r4, #48	; 0x30
 8008430:	d107      	bne.n	8008442 <_strtol_l.constprop.0+0x56>
 8008432:	782c      	ldrb	r4, [r5, #0]
 8008434:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008438:	2c58      	cmp	r4, #88	; 0x58
 800843a:	d14d      	bne.n	80084d8 <_strtol_l.constprop.0+0xec>
 800843c:	786c      	ldrb	r4, [r5, #1]
 800843e:	2310      	movs	r3, #16
 8008440:	3502      	adds	r5, #2
 8008442:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008446:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800844a:	f04f 0c00 	mov.w	ip, #0
 800844e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008452:	4666      	mov	r6, ip
 8008454:	fb03 8a19 	mls	sl, r3, r9, r8
 8008458:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800845c:	f1be 0f09 	cmp.w	lr, #9
 8008460:	d816      	bhi.n	8008490 <_strtol_l.constprop.0+0xa4>
 8008462:	4674      	mov	r4, lr
 8008464:	42a3      	cmp	r3, r4
 8008466:	dd24      	ble.n	80084b2 <_strtol_l.constprop.0+0xc6>
 8008468:	f1bc 0f00 	cmp.w	ip, #0
 800846c:	db1e      	blt.n	80084ac <_strtol_l.constprop.0+0xc0>
 800846e:	45b1      	cmp	r9, r6
 8008470:	d31c      	bcc.n	80084ac <_strtol_l.constprop.0+0xc0>
 8008472:	d101      	bne.n	8008478 <_strtol_l.constprop.0+0x8c>
 8008474:	45a2      	cmp	sl, r4
 8008476:	db19      	blt.n	80084ac <_strtol_l.constprop.0+0xc0>
 8008478:	fb06 4603 	mla	r6, r6, r3, r4
 800847c:	f04f 0c01 	mov.w	ip, #1
 8008480:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008484:	e7e8      	b.n	8008458 <_strtol_l.constprop.0+0x6c>
 8008486:	2c2b      	cmp	r4, #43	; 0x2b
 8008488:	bf04      	itt	eq
 800848a:	782c      	ldrbeq	r4, [r5, #0]
 800848c:	1cb5      	addeq	r5, r6, #2
 800848e:	e7ca      	b.n	8008426 <_strtol_l.constprop.0+0x3a>
 8008490:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008494:	f1be 0f19 	cmp.w	lr, #25
 8008498:	d801      	bhi.n	800849e <_strtol_l.constprop.0+0xb2>
 800849a:	3c37      	subs	r4, #55	; 0x37
 800849c:	e7e2      	b.n	8008464 <_strtol_l.constprop.0+0x78>
 800849e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80084a2:	f1be 0f19 	cmp.w	lr, #25
 80084a6:	d804      	bhi.n	80084b2 <_strtol_l.constprop.0+0xc6>
 80084a8:	3c57      	subs	r4, #87	; 0x57
 80084aa:	e7db      	b.n	8008464 <_strtol_l.constprop.0+0x78>
 80084ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80084b0:	e7e6      	b.n	8008480 <_strtol_l.constprop.0+0x94>
 80084b2:	f1bc 0f00 	cmp.w	ip, #0
 80084b6:	da05      	bge.n	80084c4 <_strtol_l.constprop.0+0xd8>
 80084b8:	2322      	movs	r3, #34	; 0x22
 80084ba:	6003      	str	r3, [r0, #0]
 80084bc:	4646      	mov	r6, r8
 80084be:	b942      	cbnz	r2, 80084d2 <_strtol_l.constprop.0+0xe6>
 80084c0:	4630      	mov	r0, r6
 80084c2:	e79e      	b.n	8008402 <_strtol_l.constprop.0+0x16>
 80084c4:	b107      	cbz	r7, 80084c8 <_strtol_l.constprop.0+0xdc>
 80084c6:	4276      	negs	r6, r6
 80084c8:	2a00      	cmp	r2, #0
 80084ca:	d0f9      	beq.n	80084c0 <_strtol_l.constprop.0+0xd4>
 80084cc:	f1bc 0f00 	cmp.w	ip, #0
 80084d0:	d000      	beq.n	80084d4 <_strtol_l.constprop.0+0xe8>
 80084d2:	1e69      	subs	r1, r5, #1
 80084d4:	6011      	str	r1, [r2, #0]
 80084d6:	e7f3      	b.n	80084c0 <_strtol_l.constprop.0+0xd4>
 80084d8:	2430      	movs	r4, #48	; 0x30
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1b1      	bne.n	8008442 <_strtol_l.constprop.0+0x56>
 80084de:	2308      	movs	r3, #8
 80084e0:	e7af      	b.n	8008442 <_strtol_l.constprop.0+0x56>
 80084e2:	2c30      	cmp	r4, #48	; 0x30
 80084e4:	d0a5      	beq.n	8008432 <_strtol_l.constprop.0+0x46>
 80084e6:	230a      	movs	r3, #10
 80084e8:	e7ab      	b.n	8008442 <_strtol_l.constprop.0+0x56>
 80084ea:	bf00      	nop
 80084ec:	0800a881 	.word	0x0800a881

080084f0 <strtol>:
 80084f0:	4613      	mov	r3, r2
 80084f2:	460a      	mov	r2, r1
 80084f4:	4601      	mov	r1, r0
 80084f6:	4802      	ldr	r0, [pc, #8]	; (8008500 <strtol+0x10>)
 80084f8:	6800      	ldr	r0, [r0, #0]
 80084fa:	f7ff bf77 	b.w	80083ec <_strtol_l.constprop.0>
 80084fe:	bf00      	nop
 8008500:	20000010 	.word	0x20000010

08008504 <_strtoull_l.constprop.0>:
 8008504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008508:	4692      	mov	sl, r2
 800850a:	4a49      	ldr	r2, [pc, #292]	; (8008630 <_strtoull_l.constprop.0+0x12c>)
 800850c:	9001      	str	r0, [sp, #4]
 800850e:	4689      	mov	r9, r1
 8008510:	461d      	mov	r5, r3
 8008512:	460e      	mov	r6, r1
 8008514:	4633      	mov	r3, r6
 8008516:	f816 4b01 	ldrb.w	r4, [r6], #1
 800851a:	5ca7      	ldrb	r7, [r4, r2]
 800851c:	f017 0708 	ands.w	r7, r7, #8
 8008520:	d1f8      	bne.n	8008514 <_strtoull_l.constprop.0+0x10>
 8008522:	2c2d      	cmp	r4, #45	; 0x2d
 8008524:	d14a      	bne.n	80085bc <_strtoull_l.constprop.0+0xb8>
 8008526:	7834      	ldrb	r4, [r6, #0]
 8008528:	2701      	movs	r7, #1
 800852a:	1c9e      	adds	r6, r3, #2
 800852c:	2d00      	cmp	r5, #0
 800852e:	d07b      	beq.n	8008628 <_strtoull_l.constprop.0+0x124>
 8008530:	2d10      	cmp	r5, #16
 8008532:	d109      	bne.n	8008548 <_strtoull_l.constprop.0+0x44>
 8008534:	2c30      	cmp	r4, #48	; 0x30
 8008536:	d107      	bne.n	8008548 <_strtoull_l.constprop.0+0x44>
 8008538:	7833      	ldrb	r3, [r6, #0]
 800853a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800853e:	2b58      	cmp	r3, #88	; 0x58
 8008540:	d16d      	bne.n	800861e <_strtoull_l.constprop.0+0x11a>
 8008542:	7874      	ldrb	r4, [r6, #1]
 8008544:	2510      	movs	r5, #16
 8008546:	3602      	adds	r6, #2
 8008548:	ea4f 7be5 	mov.w	fp, r5, asr #31
 800854c:	462a      	mov	r2, r5
 800854e:	465b      	mov	r3, fp
 8008550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008558:	f7f8 fbae 	bl	8000cb8 <__aeabi_uldivmod>
 800855c:	462a      	mov	r2, r5
 800855e:	9000      	str	r0, [sp, #0]
 8008560:	4688      	mov	r8, r1
 8008562:	465b      	mov	r3, fp
 8008564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008568:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800856c:	f7f8 fba4 	bl	8000cb8 <__aeabi_uldivmod>
 8008570:	2300      	movs	r3, #0
 8008572:	4618      	mov	r0, r3
 8008574:	4619      	mov	r1, r3
 8008576:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800857a:	f1bc 0f09 	cmp.w	ip, #9
 800857e:	d822      	bhi.n	80085c6 <_strtoull_l.constprop.0+0xc2>
 8008580:	4664      	mov	r4, ip
 8008582:	42a5      	cmp	r5, r4
 8008584:	dd30      	ble.n	80085e8 <_strtoull_l.constprop.0+0xe4>
 8008586:	2b00      	cmp	r3, #0
 8008588:	db2b      	blt.n	80085e2 <_strtoull_l.constprop.0+0xde>
 800858a:	9b00      	ldr	r3, [sp, #0]
 800858c:	4283      	cmp	r3, r0
 800858e:	eb78 0301 	sbcs.w	r3, r8, r1
 8008592:	d326      	bcc.n	80085e2 <_strtoull_l.constprop.0+0xde>
 8008594:	9b00      	ldr	r3, [sp, #0]
 8008596:	4588      	cmp	r8, r1
 8008598:	bf08      	it	eq
 800859a:	4283      	cmpeq	r3, r0
 800859c:	d101      	bne.n	80085a2 <_strtoull_l.constprop.0+0x9e>
 800859e:	42a2      	cmp	r2, r4
 80085a0:	db1f      	blt.n	80085e2 <_strtoull_l.constprop.0+0xde>
 80085a2:	4369      	muls	r1, r5
 80085a4:	fb00 110b 	mla	r1, r0, fp, r1
 80085a8:	fba5 0300 	umull	r0, r3, r5, r0
 80085ac:	4419      	add	r1, r3
 80085ae:	1820      	adds	r0, r4, r0
 80085b0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80085b4:	2301      	movs	r3, #1
 80085b6:	f816 4b01 	ldrb.w	r4, [r6], #1
 80085ba:	e7dc      	b.n	8008576 <_strtoull_l.constprop.0+0x72>
 80085bc:	2c2b      	cmp	r4, #43	; 0x2b
 80085be:	bf04      	itt	eq
 80085c0:	7834      	ldrbeq	r4, [r6, #0]
 80085c2:	1c9e      	addeq	r6, r3, #2
 80085c4:	e7b2      	b.n	800852c <_strtoull_l.constprop.0+0x28>
 80085c6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80085ca:	f1bc 0f19 	cmp.w	ip, #25
 80085ce:	d801      	bhi.n	80085d4 <_strtoull_l.constprop.0+0xd0>
 80085d0:	3c37      	subs	r4, #55	; 0x37
 80085d2:	e7d6      	b.n	8008582 <_strtoull_l.constprop.0+0x7e>
 80085d4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80085d8:	f1bc 0f19 	cmp.w	ip, #25
 80085dc:	d804      	bhi.n	80085e8 <_strtoull_l.constprop.0+0xe4>
 80085de:	3c57      	subs	r4, #87	; 0x57
 80085e0:	e7cf      	b.n	8008582 <_strtoull_l.constprop.0+0x7e>
 80085e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085e6:	e7e6      	b.n	80085b6 <_strtoull_l.constprop.0+0xb2>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	da0b      	bge.n	8008604 <_strtoull_l.constprop.0+0x100>
 80085ec:	9a01      	ldr	r2, [sp, #4]
 80085ee:	2322      	movs	r3, #34	; 0x22
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	4601      	mov	r1, r0
 80085f8:	f1ba 0f00 	cmp.w	sl, #0
 80085fc:	d10a      	bne.n	8008614 <_strtoull_l.constprop.0+0x110>
 80085fe:	b003      	add	sp, #12
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008604:	b117      	cbz	r7, 800860c <_strtoull_l.constprop.0+0x108>
 8008606:	4240      	negs	r0, r0
 8008608:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800860c:	f1ba 0f00 	cmp.w	sl, #0
 8008610:	d0f5      	beq.n	80085fe <_strtoull_l.constprop.0+0xfa>
 8008612:	b10b      	cbz	r3, 8008618 <_strtoull_l.constprop.0+0x114>
 8008614:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8008618:	f8ca 9000 	str.w	r9, [sl]
 800861c:	e7ef      	b.n	80085fe <_strtoull_l.constprop.0+0xfa>
 800861e:	2430      	movs	r4, #48	; 0x30
 8008620:	2d00      	cmp	r5, #0
 8008622:	d191      	bne.n	8008548 <_strtoull_l.constprop.0+0x44>
 8008624:	2508      	movs	r5, #8
 8008626:	e78f      	b.n	8008548 <_strtoull_l.constprop.0+0x44>
 8008628:	2c30      	cmp	r4, #48	; 0x30
 800862a:	d085      	beq.n	8008538 <_strtoull_l.constprop.0+0x34>
 800862c:	250a      	movs	r5, #10
 800862e:	e78b      	b.n	8008548 <_strtoull_l.constprop.0+0x44>
 8008630:	0800a881 	.word	0x0800a881

08008634 <strtoull>:
 8008634:	4613      	mov	r3, r2
 8008636:	460a      	mov	r2, r1
 8008638:	4601      	mov	r1, r0
 800863a:	4802      	ldr	r0, [pc, #8]	; (8008644 <strtoull+0x10>)
 800863c:	6800      	ldr	r0, [r0, #0]
 800863e:	f7ff bf61 	b.w	8008504 <_strtoull_l.constprop.0>
 8008642:	bf00      	nop
 8008644:	20000010 	.word	0x20000010

08008648 <__swbuf_r>:
 8008648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864a:	460e      	mov	r6, r1
 800864c:	4614      	mov	r4, r2
 800864e:	4605      	mov	r5, r0
 8008650:	b118      	cbz	r0, 800865a <__swbuf_r+0x12>
 8008652:	6983      	ldr	r3, [r0, #24]
 8008654:	b90b      	cbnz	r3, 800865a <__swbuf_r+0x12>
 8008656:	f7fe ff77 	bl	8007548 <__sinit>
 800865a:	4b21      	ldr	r3, [pc, #132]	; (80086e0 <__swbuf_r+0x98>)
 800865c:	429c      	cmp	r4, r3
 800865e:	d12b      	bne.n	80086b8 <__swbuf_r+0x70>
 8008660:	686c      	ldr	r4, [r5, #4]
 8008662:	69a3      	ldr	r3, [r4, #24]
 8008664:	60a3      	str	r3, [r4, #8]
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	071a      	lsls	r2, r3, #28
 800866a:	d52f      	bpl.n	80086cc <__swbuf_r+0x84>
 800866c:	6923      	ldr	r3, [r4, #16]
 800866e:	b36b      	cbz	r3, 80086cc <__swbuf_r+0x84>
 8008670:	6923      	ldr	r3, [r4, #16]
 8008672:	6820      	ldr	r0, [r4, #0]
 8008674:	1ac0      	subs	r0, r0, r3
 8008676:	6963      	ldr	r3, [r4, #20]
 8008678:	b2f6      	uxtb	r6, r6
 800867a:	4283      	cmp	r3, r0
 800867c:	4637      	mov	r7, r6
 800867e:	dc04      	bgt.n	800868a <__swbuf_r+0x42>
 8008680:	4621      	mov	r1, r4
 8008682:	4628      	mov	r0, r5
 8008684:	f7fe feba 	bl	80073fc <_fflush_r>
 8008688:	bb30      	cbnz	r0, 80086d8 <__swbuf_r+0x90>
 800868a:	68a3      	ldr	r3, [r4, #8]
 800868c:	3b01      	subs	r3, #1
 800868e:	60a3      	str	r3, [r4, #8]
 8008690:	6823      	ldr	r3, [r4, #0]
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	6022      	str	r2, [r4, #0]
 8008696:	701e      	strb	r6, [r3, #0]
 8008698:	6963      	ldr	r3, [r4, #20]
 800869a:	3001      	adds	r0, #1
 800869c:	4283      	cmp	r3, r0
 800869e:	d004      	beq.n	80086aa <__swbuf_r+0x62>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	07db      	lsls	r3, r3, #31
 80086a4:	d506      	bpl.n	80086b4 <__swbuf_r+0x6c>
 80086a6:	2e0a      	cmp	r6, #10
 80086a8:	d104      	bne.n	80086b4 <__swbuf_r+0x6c>
 80086aa:	4621      	mov	r1, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	f7fe fea5 	bl	80073fc <_fflush_r>
 80086b2:	b988      	cbnz	r0, 80086d8 <__swbuf_r+0x90>
 80086b4:	4638      	mov	r0, r7
 80086b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b8:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <__swbuf_r+0x9c>)
 80086ba:	429c      	cmp	r4, r3
 80086bc:	d101      	bne.n	80086c2 <__swbuf_r+0x7a>
 80086be:	68ac      	ldr	r4, [r5, #8]
 80086c0:	e7cf      	b.n	8008662 <__swbuf_r+0x1a>
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <__swbuf_r+0xa0>)
 80086c4:	429c      	cmp	r4, r3
 80086c6:	bf08      	it	eq
 80086c8:	68ec      	ldreq	r4, [r5, #12]
 80086ca:	e7ca      	b.n	8008662 <__swbuf_r+0x1a>
 80086cc:	4621      	mov	r1, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 f81e 	bl	8008710 <__swsetup_r>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d0cb      	beq.n	8008670 <__swbuf_r+0x28>
 80086d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80086dc:	e7ea      	b.n	80086b4 <__swbuf_r+0x6c>
 80086de:	bf00      	nop
 80086e0:	0800a808 	.word	0x0800a808
 80086e4:	0800a828 	.word	0x0800a828
 80086e8:	0800a7e8 	.word	0x0800a7e8

080086ec <_write_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4d07      	ldr	r5, [pc, #28]	; (800870c <_write_r+0x20>)
 80086f0:	4604      	mov	r4, r0
 80086f2:	4608      	mov	r0, r1
 80086f4:	4611      	mov	r1, r2
 80086f6:	2200      	movs	r2, #0
 80086f8:	602a      	str	r2, [r5, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	f7f8 fe1a 	bl	8001334 <_write>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_write_r+0x1e>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_write_r+0x1e>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	200008e4 	.word	0x200008e4

08008710 <__swsetup_r>:
 8008710:	4b32      	ldr	r3, [pc, #200]	; (80087dc <__swsetup_r+0xcc>)
 8008712:	b570      	push	{r4, r5, r6, lr}
 8008714:	681d      	ldr	r5, [r3, #0]
 8008716:	4606      	mov	r6, r0
 8008718:	460c      	mov	r4, r1
 800871a:	b125      	cbz	r5, 8008726 <__swsetup_r+0x16>
 800871c:	69ab      	ldr	r3, [r5, #24]
 800871e:	b913      	cbnz	r3, 8008726 <__swsetup_r+0x16>
 8008720:	4628      	mov	r0, r5
 8008722:	f7fe ff11 	bl	8007548 <__sinit>
 8008726:	4b2e      	ldr	r3, [pc, #184]	; (80087e0 <__swsetup_r+0xd0>)
 8008728:	429c      	cmp	r4, r3
 800872a:	d10f      	bne.n	800874c <__swsetup_r+0x3c>
 800872c:	686c      	ldr	r4, [r5, #4]
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008734:	0719      	lsls	r1, r3, #28
 8008736:	d42c      	bmi.n	8008792 <__swsetup_r+0x82>
 8008738:	06dd      	lsls	r5, r3, #27
 800873a:	d411      	bmi.n	8008760 <__swsetup_r+0x50>
 800873c:	2309      	movs	r3, #9
 800873e:	6033      	str	r3, [r6, #0]
 8008740:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008744:	81a3      	strh	r3, [r4, #12]
 8008746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800874a:	e03e      	b.n	80087ca <__swsetup_r+0xba>
 800874c:	4b25      	ldr	r3, [pc, #148]	; (80087e4 <__swsetup_r+0xd4>)
 800874e:	429c      	cmp	r4, r3
 8008750:	d101      	bne.n	8008756 <__swsetup_r+0x46>
 8008752:	68ac      	ldr	r4, [r5, #8]
 8008754:	e7eb      	b.n	800872e <__swsetup_r+0x1e>
 8008756:	4b24      	ldr	r3, [pc, #144]	; (80087e8 <__swsetup_r+0xd8>)
 8008758:	429c      	cmp	r4, r3
 800875a:	bf08      	it	eq
 800875c:	68ec      	ldreq	r4, [r5, #12]
 800875e:	e7e6      	b.n	800872e <__swsetup_r+0x1e>
 8008760:	0758      	lsls	r0, r3, #29
 8008762:	d512      	bpl.n	800878a <__swsetup_r+0x7a>
 8008764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008766:	b141      	cbz	r1, 800877a <__swsetup_r+0x6a>
 8008768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800876c:	4299      	cmp	r1, r3
 800876e:	d002      	beq.n	8008776 <__swsetup_r+0x66>
 8008770:	4630      	mov	r0, r6
 8008772:	f7fe ffc5 	bl	8007700 <_free_r>
 8008776:	2300      	movs	r3, #0
 8008778:	6363      	str	r3, [r4, #52]	; 0x34
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008780:	81a3      	strh	r3, [r4, #12]
 8008782:	2300      	movs	r3, #0
 8008784:	6063      	str	r3, [r4, #4]
 8008786:	6923      	ldr	r3, [r4, #16]
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	f043 0308 	orr.w	r3, r3, #8
 8008790:	81a3      	strh	r3, [r4, #12]
 8008792:	6923      	ldr	r3, [r4, #16]
 8008794:	b94b      	cbnz	r3, 80087aa <__swsetup_r+0x9a>
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800879c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087a0:	d003      	beq.n	80087aa <__swsetup_r+0x9a>
 80087a2:	4621      	mov	r1, r4
 80087a4:	4630      	mov	r0, r6
 80087a6:	f000 fee9 	bl	800957c <__smakebuf_r>
 80087aa:	89a0      	ldrh	r0, [r4, #12]
 80087ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087b0:	f010 0301 	ands.w	r3, r0, #1
 80087b4:	d00a      	beq.n	80087cc <__swsetup_r+0xbc>
 80087b6:	2300      	movs	r3, #0
 80087b8:	60a3      	str	r3, [r4, #8]
 80087ba:	6963      	ldr	r3, [r4, #20]
 80087bc:	425b      	negs	r3, r3
 80087be:	61a3      	str	r3, [r4, #24]
 80087c0:	6923      	ldr	r3, [r4, #16]
 80087c2:	b943      	cbnz	r3, 80087d6 <__swsetup_r+0xc6>
 80087c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087c8:	d1ba      	bne.n	8008740 <__swsetup_r+0x30>
 80087ca:	bd70      	pop	{r4, r5, r6, pc}
 80087cc:	0781      	lsls	r1, r0, #30
 80087ce:	bf58      	it	pl
 80087d0:	6963      	ldrpl	r3, [r4, #20]
 80087d2:	60a3      	str	r3, [r4, #8]
 80087d4:	e7f4      	b.n	80087c0 <__swsetup_r+0xb0>
 80087d6:	2000      	movs	r0, #0
 80087d8:	e7f7      	b.n	80087ca <__swsetup_r+0xba>
 80087da:	bf00      	nop
 80087dc:	20000010 	.word	0x20000010
 80087e0:	0800a808 	.word	0x0800a808
 80087e4:	0800a828 	.word	0x0800a828
 80087e8:	0800a7e8 	.word	0x0800a7e8

080087ec <_close_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d06      	ldr	r5, [pc, #24]	; (8008808 <_close_r+0x1c>)
 80087f0:	2300      	movs	r3, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	f7fa ffd3 	bl	80037a2 <_close>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_close_r+0x1a>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_close_r+0x1a>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	200008e4 	.word	0x200008e4

0800880c <quorem>:
 800880c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	6903      	ldr	r3, [r0, #16]
 8008812:	690c      	ldr	r4, [r1, #16]
 8008814:	42a3      	cmp	r3, r4
 8008816:	4607      	mov	r7, r0
 8008818:	f2c0 8081 	blt.w	800891e <quorem+0x112>
 800881c:	3c01      	subs	r4, #1
 800881e:	f101 0814 	add.w	r8, r1, #20
 8008822:	f100 0514 	add.w	r5, r0, #20
 8008826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008834:	3301      	adds	r3, #1
 8008836:	429a      	cmp	r2, r3
 8008838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800883c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008840:	fbb2 f6f3 	udiv	r6, r2, r3
 8008844:	d331      	bcc.n	80088aa <quorem+0x9e>
 8008846:	f04f 0e00 	mov.w	lr, #0
 800884a:	4640      	mov	r0, r8
 800884c:	46ac      	mov	ip, r5
 800884e:	46f2      	mov	sl, lr
 8008850:	f850 2b04 	ldr.w	r2, [r0], #4
 8008854:	b293      	uxth	r3, r2
 8008856:	fb06 e303 	mla	r3, r6, r3, lr
 800885a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800885e:	b29b      	uxth	r3, r3
 8008860:	ebaa 0303 	sub.w	r3, sl, r3
 8008864:	f8dc a000 	ldr.w	sl, [ip]
 8008868:	0c12      	lsrs	r2, r2, #16
 800886a:	fa13 f38a 	uxtah	r3, r3, sl
 800886e:	fb06 e202 	mla	r2, r6, r2, lr
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	9b00      	ldr	r3, [sp, #0]
 8008876:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800887a:	b292      	uxth	r2, r2
 800887c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008884:	f8bd 3000 	ldrh.w	r3, [sp]
 8008888:	4581      	cmp	r9, r0
 800888a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800888e:	f84c 3b04 	str.w	r3, [ip], #4
 8008892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008896:	d2db      	bcs.n	8008850 <quorem+0x44>
 8008898:	f855 300b 	ldr.w	r3, [r5, fp]
 800889c:	b92b      	cbnz	r3, 80088aa <quorem+0x9e>
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	3b04      	subs	r3, #4
 80088a2:	429d      	cmp	r5, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	d32e      	bcc.n	8008906 <quorem+0xfa>
 80088a8:	613c      	str	r4, [r7, #16]
 80088aa:	4638      	mov	r0, r7
 80088ac:	f001 f93c 	bl	8009b28 <__mcmp>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	db24      	blt.n	80088fe <quorem+0xf2>
 80088b4:	3601      	adds	r6, #1
 80088b6:	4628      	mov	r0, r5
 80088b8:	f04f 0c00 	mov.w	ip, #0
 80088bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80088c0:	f8d0 e000 	ldr.w	lr, [r0]
 80088c4:	b293      	uxth	r3, r2
 80088c6:	ebac 0303 	sub.w	r3, ip, r3
 80088ca:	0c12      	lsrs	r2, r2, #16
 80088cc:	fa13 f38e 	uxtah	r3, r3, lr
 80088d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088d8:	b29b      	uxth	r3, r3
 80088da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088de:	45c1      	cmp	r9, r8
 80088e0:	f840 3b04 	str.w	r3, [r0], #4
 80088e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80088e8:	d2e8      	bcs.n	80088bc <quorem+0xb0>
 80088ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088f2:	b922      	cbnz	r2, 80088fe <quorem+0xf2>
 80088f4:	3b04      	subs	r3, #4
 80088f6:	429d      	cmp	r5, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	d30a      	bcc.n	8008912 <quorem+0x106>
 80088fc:	613c      	str	r4, [r7, #16]
 80088fe:	4630      	mov	r0, r6
 8008900:	b003      	add	sp, #12
 8008902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008906:	6812      	ldr	r2, [r2, #0]
 8008908:	3b04      	subs	r3, #4
 800890a:	2a00      	cmp	r2, #0
 800890c:	d1cc      	bne.n	80088a8 <quorem+0x9c>
 800890e:	3c01      	subs	r4, #1
 8008910:	e7c7      	b.n	80088a2 <quorem+0x96>
 8008912:	6812      	ldr	r2, [r2, #0]
 8008914:	3b04      	subs	r3, #4
 8008916:	2a00      	cmp	r2, #0
 8008918:	d1f0      	bne.n	80088fc <quorem+0xf0>
 800891a:	3c01      	subs	r4, #1
 800891c:	e7eb      	b.n	80088f6 <quorem+0xea>
 800891e:	2000      	movs	r0, #0
 8008920:	e7ee      	b.n	8008900 <quorem+0xf4>
 8008922:	0000      	movs	r0, r0
 8008924:	0000      	movs	r0, r0
	...

08008928 <_dtoa_r>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	ed2d 8b04 	vpush	{d8-d9}
 8008930:	ec57 6b10 	vmov	r6, r7, d0
 8008934:	b093      	sub	sp, #76	; 0x4c
 8008936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800893c:	9106      	str	r1, [sp, #24]
 800893e:	ee10 aa10 	vmov	sl, s0
 8008942:	4604      	mov	r4, r0
 8008944:	9209      	str	r2, [sp, #36]	; 0x24
 8008946:	930c      	str	r3, [sp, #48]	; 0x30
 8008948:	46bb      	mov	fp, r7
 800894a:	b975      	cbnz	r5, 800896a <_dtoa_r+0x42>
 800894c:	2010      	movs	r0, #16
 800894e:	f000 fe55 	bl	80095fc <malloc>
 8008952:	4602      	mov	r2, r0
 8008954:	6260      	str	r0, [r4, #36]	; 0x24
 8008956:	b920      	cbnz	r0, 8008962 <_dtoa_r+0x3a>
 8008958:	4ba7      	ldr	r3, [pc, #668]	; (8008bf8 <_dtoa_r+0x2d0>)
 800895a:	21ea      	movs	r1, #234	; 0xea
 800895c:	48a7      	ldr	r0, [pc, #668]	; (8008bfc <_dtoa_r+0x2d4>)
 800895e:	f001 fcc3 	bl	800a2e8 <__assert_func>
 8008962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008966:	6005      	str	r5, [r0, #0]
 8008968:	60c5      	str	r5, [r0, #12]
 800896a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800896c:	6819      	ldr	r1, [r3, #0]
 800896e:	b151      	cbz	r1, 8008986 <_dtoa_r+0x5e>
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	604a      	str	r2, [r1, #4]
 8008974:	2301      	movs	r3, #1
 8008976:	4093      	lsls	r3, r2
 8008978:	608b      	str	r3, [r1, #8]
 800897a:	4620      	mov	r0, r4
 800897c:	f000 fe92 	bl	80096a4 <_Bfree>
 8008980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	1e3b      	subs	r3, r7, #0
 8008988:	bfaa      	itet	ge
 800898a:	2300      	movge	r3, #0
 800898c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008990:	f8c8 3000 	strge.w	r3, [r8]
 8008994:	4b9a      	ldr	r3, [pc, #616]	; (8008c00 <_dtoa_r+0x2d8>)
 8008996:	bfbc      	itt	lt
 8008998:	2201      	movlt	r2, #1
 800899a:	f8c8 2000 	strlt.w	r2, [r8]
 800899e:	ea33 030b 	bics.w	r3, r3, fp
 80089a2:	d11b      	bne.n	80089dc <_dtoa_r+0xb4>
 80089a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80089aa:	6013      	str	r3, [r2, #0]
 80089ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089b0:	4333      	orrs	r3, r6
 80089b2:	f000 8592 	beq.w	80094da <_dtoa_r+0xbb2>
 80089b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089b8:	b963      	cbnz	r3, 80089d4 <_dtoa_r+0xac>
 80089ba:	4b92      	ldr	r3, [pc, #584]	; (8008c04 <_dtoa_r+0x2dc>)
 80089bc:	e022      	b.n	8008a04 <_dtoa_r+0xdc>
 80089be:	4b92      	ldr	r3, [pc, #584]	; (8008c08 <_dtoa_r+0x2e0>)
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	3308      	adds	r3, #8
 80089c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	9801      	ldr	r0, [sp, #4]
 80089ca:	b013      	add	sp, #76	; 0x4c
 80089cc:	ecbd 8b04 	vpop	{d8-d9}
 80089d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	4b8b      	ldr	r3, [pc, #556]	; (8008c04 <_dtoa_r+0x2dc>)
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	3303      	adds	r3, #3
 80089da:	e7f3      	b.n	80089c4 <_dtoa_r+0x9c>
 80089dc:	2200      	movs	r2, #0
 80089de:	2300      	movs	r3, #0
 80089e0:	4650      	mov	r0, sl
 80089e2:	4659      	mov	r1, fp
 80089e4:	f7f8 f888 	bl	8000af8 <__aeabi_dcmpeq>
 80089e8:	ec4b ab19 	vmov	d9, sl, fp
 80089ec:	4680      	mov	r8, r0
 80089ee:	b158      	cbz	r0, 8008a08 <_dtoa_r+0xe0>
 80089f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089f2:	2301      	movs	r3, #1
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 856b 	beq.w	80094d4 <_dtoa_r+0xbac>
 80089fe:	4883      	ldr	r0, [pc, #524]	; (8008c0c <_dtoa_r+0x2e4>)
 8008a00:	6018      	str	r0, [r3, #0]
 8008a02:	1e43      	subs	r3, r0, #1
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	e7df      	b.n	80089c8 <_dtoa_r+0xa0>
 8008a08:	ec4b ab10 	vmov	d0, sl, fp
 8008a0c:	aa10      	add	r2, sp, #64	; 0x40
 8008a0e:	a911      	add	r1, sp, #68	; 0x44
 8008a10:	4620      	mov	r0, r4
 8008a12:	f001 f92f 	bl	8009c74 <__d2b>
 8008a16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008a1a:	ee08 0a10 	vmov	s16, r0
 8008a1e:	2d00      	cmp	r5, #0
 8008a20:	f000 8084 	beq.w	8008b2c <_dtoa_r+0x204>
 8008a24:	ee19 3a90 	vmov	r3, s19
 8008a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a30:	4656      	mov	r6, sl
 8008a32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008a3e:	4b74      	ldr	r3, [pc, #464]	; (8008c10 <_dtoa_r+0x2e8>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	4630      	mov	r0, r6
 8008a44:	4639      	mov	r1, r7
 8008a46:	f7f7 fc37 	bl	80002b8 <__aeabi_dsub>
 8008a4a:	a365      	add	r3, pc, #404	; (adr r3, 8008be0 <_dtoa_r+0x2b8>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f7f7 fdea 	bl	8000628 <__aeabi_dmul>
 8008a54:	a364      	add	r3, pc, #400	; (adr r3, 8008be8 <_dtoa_r+0x2c0>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 fc2f 	bl	80002bc <__adddf3>
 8008a5e:	4606      	mov	r6, r0
 8008a60:	4628      	mov	r0, r5
 8008a62:	460f      	mov	r7, r1
 8008a64:	f7f7 fd76 	bl	8000554 <__aeabi_i2d>
 8008a68:	a361      	add	r3, pc, #388	; (adr r3, 8008bf0 <_dtoa_r+0x2c8>)
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	f7f7 fddb 	bl	8000628 <__aeabi_dmul>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	4630      	mov	r0, r6
 8008a78:	4639      	mov	r1, r7
 8008a7a:	f7f7 fc1f 	bl	80002bc <__adddf3>
 8008a7e:	4606      	mov	r6, r0
 8008a80:	460f      	mov	r7, r1
 8008a82:	f7f8 f881 	bl	8000b88 <__aeabi_d2iz>
 8008a86:	2200      	movs	r2, #0
 8008a88:	9000      	str	r0, [sp, #0]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	4639      	mov	r1, r7
 8008a90:	f7f8 f83c 	bl	8000b0c <__aeabi_dcmplt>
 8008a94:	b150      	cbz	r0, 8008aac <_dtoa_r+0x184>
 8008a96:	9800      	ldr	r0, [sp, #0]
 8008a98:	f7f7 fd5c 	bl	8000554 <__aeabi_i2d>
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	f7f8 f82a 	bl	8000af8 <__aeabi_dcmpeq>
 8008aa4:	b910      	cbnz	r0, 8008aac <_dtoa_r+0x184>
 8008aa6:	9b00      	ldr	r3, [sp, #0]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	9b00      	ldr	r3, [sp, #0]
 8008aae:	2b16      	cmp	r3, #22
 8008ab0:	d85a      	bhi.n	8008b68 <_dtoa_r+0x240>
 8008ab2:	9a00      	ldr	r2, [sp, #0]
 8008ab4:	4b57      	ldr	r3, [pc, #348]	; (8008c14 <_dtoa_r+0x2ec>)
 8008ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	ec51 0b19 	vmov	r0, r1, d9
 8008ac2:	f7f8 f823 	bl	8000b0c <__aeabi_dcmplt>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d050      	beq.n	8008b6c <_dtoa_r+0x244>
 8008aca:	9b00      	ldr	r3, [sp, #0]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ad6:	1b5d      	subs	r5, r3, r5
 8008ad8:	1e6b      	subs	r3, r5, #1
 8008ada:	9305      	str	r3, [sp, #20]
 8008adc:	bf45      	ittet	mi
 8008ade:	f1c5 0301 	rsbmi	r3, r5, #1
 8008ae2:	9304      	strmi	r3, [sp, #16]
 8008ae4:	2300      	movpl	r3, #0
 8008ae6:	2300      	movmi	r3, #0
 8008ae8:	bf4c      	ite	mi
 8008aea:	9305      	strmi	r3, [sp, #20]
 8008aec:	9304      	strpl	r3, [sp, #16]
 8008aee:	9b00      	ldr	r3, [sp, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	db3d      	blt.n	8008b70 <_dtoa_r+0x248>
 8008af4:	9b05      	ldr	r3, [sp, #20]
 8008af6:	9a00      	ldr	r2, [sp, #0]
 8008af8:	920a      	str	r2, [sp, #40]	; 0x28
 8008afa:	4413      	add	r3, r2
 8008afc:	9305      	str	r3, [sp, #20]
 8008afe:	2300      	movs	r3, #0
 8008b00:	9307      	str	r3, [sp, #28]
 8008b02:	9b06      	ldr	r3, [sp, #24]
 8008b04:	2b09      	cmp	r3, #9
 8008b06:	f200 8089 	bhi.w	8008c1c <_dtoa_r+0x2f4>
 8008b0a:	2b05      	cmp	r3, #5
 8008b0c:	bfc4      	itt	gt
 8008b0e:	3b04      	subgt	r3, #4
 8008b10:	9306      	strgt	r3, [sp, #24]
 8008b12:	9b06      	ldr	r3, [sp, #24]
 8008b14:	f1a3 0302 	sub.w	r3, r3, #2
 8008b18:	bfcc      	ite	gt
 8008b1a:	2500      	movgt	r5, #0
 8008b1c:	2501      	movle	r5, #1
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	f200 8087 	bhi.w	8008c32 <_dtoa_r+0x30a>
 8008b24:	e8df f003 	tbb	[pc, r3]
 8008b28:	59383a2d 	.word	0x59383a2d
 8008b2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b30:	441d      	add	r5, r3
 8008b32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b36:	2b20      	cmp	r3, #32
 8008b38:	bfc1      	itttt	gt
 8008b3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b42:	fa0b f303 	lslgt.w	r3, fp, r3
 8008b46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b4a:	bfda      	itte	le
 8008b4c:	f1c3 0320 	rsble	r3, r3, #32
 8008b50:	fa06 f003 	lslle.w	r0, r6, r3
 8008b54:	4318      	orrgt	r0, r3
 8008b56:	f7f7 fced 	bl	8000534 <__aeabi_ui2d>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b62:	3d01      	subs	r5, #1
 8008b64:	930e      	str	r3, [sp, #56]	; 0x38
 8008b66:	e76a      	b.n	8008a3e <_dtoa_r+0x116>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e7b2      	b.n	8008ad2 <_dtoa_r+0x1aa>
 8008b6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b6e:	e7b1      	b.n	8008ad4 <_dtoa_r+0x1ac>
 8008b70:	9b04      	ldr	r3, [sp, #16]
 8008b72:	9a00      	ldr	r2, [sp, #0]
 8008b74:	1a9b      	subs	r3, r3, r2
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	4253      	negs	r3, r2
 8008b7a:	9307      	str	r3, [sp, #28]
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b80:	e7bf      	b.n	8008b02 <_dtoa_r+0x1da>
 8008b82:	2300      	movs	r3, #0
 8008b84:	9308      	str	r3, [sp, #32]
 8008b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	dc55      	bgt.n	8008c38 <_dtoa_r+0x310>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b92:	461a      	mov	r2, r3
 8008b94:	9209      	str	r2, [sp, #36]	; 0x24
 8008b96:	e00c      	b.n	8008bb2 <_dtoa_r+0x28a>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e7f3      	b.n	8008b84 <_dtoa_r+0x25c>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ba0:	9308      	str	r3, [sp, #32]
 8008ba2:	9b00      	ldr	r3, [sp, #0]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	9302      	str	r3, [sp, #8]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	9303      	str	r3, [sp, #12]
 8008bae:	bfb8      	it	lt
 8008bb0:	2301      	movlt	r3, #1
 8008bb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	6042      	str	r2, [r0, #4]
 8008bb8:	2204      	movs	r2, #4
 8008bba:	f102 0614 	add.w	r6, r2, #20
 8008bbe:	429e      	cmp	r6, r3
 8008bc0:	6841      	ldr	r1, [r0, #4]
 8008bc2:	d93d      	bls.n	8008c40 <_dtoa_r+0x318>
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f000 fd2d 	bl	8009624 <_Balloc>
 8008bca:	9001      	str	r0, [sp, #4]
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d13b      	bne.n	8008c48 <_dtoa_r+0x320>
 8008bd0:	4b11      	ldr	r3, [pc, #68]	; (8008c18 <_dtoa_r+0x2f0>)
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008bd8:	e6c0      	b.n	800895c <_dtoa_r+0x34>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e7df      	b.n	8008b9e <_dtoa_r+0x276>
 8008bde:	bf00      	nop
 8008be0:	636f4361 	.word	0x636f4361
 8008be4:	3fd287a7 	.word	0x3fd287a7
 8008be8:	8b60c8b3 	.word	0x8b60c8b3
 8008bec:	3fc68a28 	.word	0x3fc68a28
 8008bf0:	509f79fb 	.word	0x509f79fb
 8008bf4:	3fd34413 	.word	0x3fd34413
 8008bf8:	0800a98e 	.word	0x0800a98e
 8008bfc:	0800a9a5 	.word	0x0800a9a5
 8008c00:	7ff00000 	.word	0x7ff00000
 8008c04:	0800a98a 	.word	0x0800a98a
 8008c08:	0800a981 	.word	0x0800a981
 8008c0c:	0800a85d 	.word	0x0800a85d
 8008c10:	3ff80000 	.word	0x3ff80000
 8008c14:	0800aa98 	.word	0x0800aa98
 8008c18:	0800aa00 	.word	0x0800aa00
 8008c1c:	2501      	movs	r5, #1
 8008c1e:	2300      	movs	r3, #0
 8008c20:	9306      	str	r3, [sp, #24]
 8008c22:	9508      	str	r5, [sp, #32]
 8008c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2312      	movs	r3, #18
 8008c30:	e7b0      	b.n	8008b94 <_dtoa_r+0x26c>
 8008c32:	2301      	movs	r3, #1
 8008c34:	9308      	str	r3, [sp, #32]
 8008c36:	e7f5      	b.n	8008c24 <_dtoa_r+0x2fc>
 8008c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c3e:	e7b8      	b.n	8008bb2 <_dtoa_r+0x28a>
 8008c40:	3101      	adds	r1, #1
 8008c42:	6041      	str	r1, [r0, #4]
 8008c44:	0052      	lsls	r2, r2, #1
 8008c46:	e7b8      	b.n	8008bba <_dtoa_r+0x292>
 8008c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c4a:	9a01      	ldr	r2, [sp, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	2b0e      	cmp	r3, #14
 8008c52:	f200 809d 	bhi.w	8008d90 <_dtoa_r+0x468>
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	f000 809a 	beq.w	8008d90 <_dtoa_r+0x468>
 8008c5c:	9b00      	ldr	r3, [sp, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	dd32      	ble.n	8008cc8 <_dtoa_r+0x3a0>
 8008c62:	4ab7      	ldr	r2, [pc, #732]	; (8008f40 <_dtoa_r+0x618>)
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c70:	9b00      	ldr	r3, [sp, #0]
 8008c72:	05d8      	lsls	r0, r3, #23
 8008c74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008c78:	d516      	bpl.n	8008ca8 <_dtoa_r+0x380>
 8008c7a:	4bb2      	ldr	r3, [pc, #712]	; (8008f44 <_dtoa_r+0x61c>)
 8008c7c:	ec51 0b19 	vmov	r0, r1, d9
 8008c80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c84:	f7f7 fdfa 	bl	800087c <__aeabi_ddiv>
 8008c88:	f007 070f 	and.w	r7, r7, #15
 8008c8c:	4682      	mov	sl, r0
 8008c8e:	468b      	mov	fp, r1
 8008c90:	2503      	movs	r5, #3
 8008c92:	4eac      	ldr	r6, [pc, #688]	; (8008f44 <_dtoa_r+0x61c>)
 8008c94:	b957      	cbnz	r7, 8008cac <_dtoa_r+0x384>
 8008c96:	4642      	mov	r2, r8
 8008c98:	464b      	mov	r3, r9
 8008c9a:	4650      	mov	r0, sl
 8008c9c:	4659      	mov	r1, fp
 8008c9e:	f7f7 fded 	bl	800087c <__aeabi_ddiv>
 8008ca2:	4682      	mov	sl, r0
 8008ca4:	468b      	mov	fp, r1
 8008ca6:	e028      	b.n	8008cfa <_dtoa_r+0x3d2>
 8008ca8:	2502      	movs	r5, #2
 8008caa:	e7f2      	b.n	8008c92 <_dtoa_r+0x36a>
 8008cac:	07f9      	lsls	r1, r7, #31
 8008cae:	d508      	bpl.n	8008cc2 <_dtoa_r+0x39a>
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cb8:	f7f7 fcb6 	bl	8000628 <__aeabi_dmul>
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	4680      	mov	r8, r0
 8008cc0:	4689      	mov	r9, r1
 8008cc2:	107f      	asrs	r7, r7, #1
 8008cc4:	3608      	adds	r6, #8
 8008cc6:	e7e5      	b.n	8008c94 <_dtoa_r+0x36c>
 8008cc8:	f000 809b 	beq.w	8008e02 <_dtoa_r+0x4da>
 8008ccc:	9b00      	ldr	r3, [sp, #0]
 8008cce:	4f9d      	ldr	r7, [pc, #628]	; (8008f44 <_dtoa_r+0x61c>)
 8008cd0:	425e      	negs	r6, r3
 8008cd2:	4b9b      	ldr	r3, [pc, #620]	; (8008f40 <_dtoa_r+0x618>)
 8008cd4:	f006 020f 	and.w	r2, r6, #15
 8008cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	ec51 0b19 	vmov	r0, r1, d9
 8008ce4:	f7f7 fca0 	bl	8000628 <__aeabi_dmul>
 8008ce8:	1136      	asrs	r6, r6, #4
 8008cea:	4682      	mov	sl, r0
 8008cec:	468b      	mov	fp, r1
 8008cee:	2300      	movs	r3, #0
 8008cf0:	2502      	movs	r5, #2
 8008cf2:	2e00      	cmp	r6, #0
 8008cf4:	d17a      	bne.n	8008dec <_dtoa_r+0x4c4>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1d3      	bne.n	8008ca2 <_dtoa_r+0x37a>
 8008cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 8082 	beq.w	8008e06 <_dtoa_r+0x4de>
 8008d02:	4b91      	ldr	r3, [pc, #580]	; (8008f48 <_dtoa_r+0x620>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	4650      	mov	r0, sl
 8008d08:	4659      	mov	r1, fp
 8008d0a:	f7f7 feff 	bl	8000b0c <__aeabi_dcmplt>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d079      	beq.n	8008e06 <_dtoa_r+0x4de>
 8008d12:	9b03      	ldr	r3, [sp, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d076      	beq.n	8008e06 <_dtoa_r+0x4de>
 8008d18:	9b02      	ldr	r3, [sp, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	dd36      	ble.n	8008d8c <_dtoa_r+0x464>
 8008d1e:	9b00      	ldr	r3, [sp, #0]
 8008d20:	4650      	mov	r0, sl
 8008d22:	4659      	mov	r1, fp
 8008d24:	1e5f      	subs	r7, r3, #1
 8008d26:	2200      	movs	r2, #0
 8008d28:	4b88      	ldr	r3, [pc, #544]	; (8008f4c <_dtoa_r+0x624>)
 8008d2a:	f7f7 fc7d 	bl	8000628 <__aeabi_dmul>
 8008d2e:	9e02      	ldr	r6, [sp, #8]
 8008d30:	4682      	mov	sl, r0
 8008d32:	468b      	mov	fp, r1
 8008d34:	3501      	adds	r5, #1
 8008d36:	4628      	mov	r0, r5
 8008d38:	f7f7 fc0c 	bl	8000554 <__aeabi_i2d>
 8008d3c:	4652      	mov	r2, sl
 8008d3e:	465b      	mov	r3, fp
 8008d40:	f7f7 fc72 	bl	8000628 <__aeabi_dmul>
 8008d44:	4b82      	ldr	r3, [pc, #520]	; (8008f50 <_dtoa_r+0x628>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	f7f7 fab8 	bl	80002bc <__adddf3>
 8008d4c:	46d0      	mov	r8, sl
 8008d4e:	46d9      	mov	r9, fp
 8008d50:	4682      	mov	sl, r0
 8008d52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008d56:	2e00      	cmp	r6, #0
 8008d58:	d158      	bne.n	8008e0c <_dtoa_r+0x4e4>
 8008d5a:	4b7e      	ldr	r3, [pc, #504]	; (8008f54 <_dtoa_r+0x62c>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4640      	mov	r0, r8
 8008d60:	4649      	mov	r1, r9
 8008d62:	f7f7 faa9 	bl	80002b8 <__aeabi_dsub>
 8008d66:	4652      	mov	r2, sl
 8008d68:	465b      	mov	r3, fp
 8008d6a:	4680      	mov	r8, r0
 8008d6c:	4689      	mov	r9, r1
 8008d6e:	f7f7 feeb 	bl	8000b48 <__aeabi_dcmpgt>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	f040 8295 	bne.w	80092a2 <_dtoa_r+0x97a>
 8008d78:	4652      	mov	r2, sl
 8008d7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 fec3 	bl	8000b0c <__aeabi_dcmplt>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f040 8289 	bne.w	800929e <_dtoa_r+0x976>
 8008d8c:	ec5b ab19 	vmov	sl, fp, d9
 8008d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f2c0 8148 	blt.w	8009028 <_dtoa_r+0x700>
 8008d98:	9a00      	ldr	r2, [sp, #0]
 8008d9a:	2a0e      	cmp	r2, #14
 8008d9c:	f300 8144 	bgt.w	8009028 <_dtoa_r+0x700>
 8008da0:	4b67      	ldr	r3, [pc, #412]	; (8008f40 <_dtoa_r+0x618>)
 8008da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008da6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f280 80d5 	bge.w	8008f5c <_dtoa_r+0x634>
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f300 80d1 	bgt.w	8008f5c <_dtoa_r+0x634>
 8008dba:	f040 826f 	bne.w	800929c <_dtoa_r+0x974>
 8008dbe:	4b65      	ldr	r3, [pc, #404]	; (8008f54 <_dtoa_r+0x62c>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	f7f7 fc2f 	bl	8000628 <__aeabi_dmul>
 8008dca:	4652      	mov	r2, sl
 8008dcc:	465b      	mov	r3, fp
 8008dce:	f7f7 feb1 	bl	8000b34 <__aeabi_dcmpge>
 8008dd2:	9e03      	ldr	r6, [sp, #12]
 8008dd4:	4637      	mov	r7, r6
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f040 8245 	bne.w	8009266 <_dtoa_r+0x93e>
 8008ddc:	9d01      	ldr	r5, [sp, #4]
 8008dde:	2331      	movs	r3, #49	; 0x31
 8008de0:	f805 3b01 	strb.w	r3, [r5], #1
 8008de4:	9b00      	ldr	r3, [sp, #0]
 8008de6:	3301      	adds	r3, #1
 8008de8:	9300      	str	r3, [sp, #0]
 8008dea:	e240      	b.n	800926e <_dtoa_r+0x946>
 8008dec:	07f2      	lsls	r2, r6, #31
 8008dee:	d505      	bpl.n	8008dfc <_dtoa_r+0x4d4>
 8008df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df4:	f7f7 fc18 	bl	8000628 <__aeabi_dmul>
 8008df8:	3501      	adds	r5, #1
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	1076      	asrs	r6, r6, #1
 8008dfe:	3708      	adds	r7, #8
 8008e00:	e777      	b.n	8008cf2 <_dtoa_r+0x3ca>
 8008e02:	2502      	movs	r5, #2
 8008e04:	e779      	b.n	8008cfa <_dtoa_r+0x3d2>
 8008e06:	9f00      	ldr	r7, [sp, #0]
 8008e08:	9e03      	ldr	r6, [sp, #12]
 8008e0a:	e794      	b.n	8008d36 <_dtoa_r+0x40e>
 8008e0c:	9901      	ldr	r1, [sp, #4]
 8008e0e:	4b4c      	ldr	r3, [pc, #304]	; (8008f40 <_dtoa_r+0x618>)
 8008e10:	4431      	add	r1, r6
 8008e12:	910d      	str	r1, [sp, #52]	; 0x34
 8008e14:	9908      	ldr	r1, [sp, #32]
 8008e16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	d043      	beq.n	8008eaa <_dtoa_r+0x582>
 8008e22:	494d      	ldr	r1, [pc, #308]	; (8008f58 <_dtoa_r+0x630>)
 8008e24:	2000      	movs	r0, #0
 8008e26:	f7f7 fd29 	bl	800087c <__aeabi_ddiv>
 8008e2a:	4652      	mov	r2, sl
 8008e2c:	465b      	mov	r3, fp
 8008e2e:	f7f7 fa43 	bl	80002b8 <__aeabi_dsub>
 8008e32:	9d01      	ldr	r5, [sp, #4]
 8008e34:	4682      	mov	sl, r0
 8008e36:	468b      	mov	fp, r1
 8008e38:	4649      	mov	r1, r9
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	f7f7 fea4 	bl	8000b88 <__aeabi_d2iz>
 8008e40:	4606      	mov	r6, r0
 8008e42:	f7f7 fb87 	bl	8000554 <__aeabi_i2d>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	f7f7 fa33 	bl	80002b8 <__aeabi_dsub>
 8008e52:	3630      	adds	r6, #48	; 0x30
 8008e54:	f805 6b01 	strb.w	r6, [r5], #1
 8008e58:	4652      	mov	r2, sl
 8008e5a:	465b      	mov	r3, fp
 8008e5c:	4680      	mov	r8, r0
 8008e5e:	4689      	mov	r9, r1
 8008e60:	f7f7 fe54 	bl	8000b0c <__aeabi_dcmplt>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d163      	bne.n	8008f30 <_dtoa_r+0x608>
 8008e68:	4642      	mov	r2, r8
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	4936      	ldr	r1, [pc, #216]	; (8008f48 <_dtoa_r+0x620>)
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f7f7 fa22 	bl	80002b8 <__aeabi_dsub>
 8008e74:	4652      	mov	r2, sl
 8008e76:	465b      	mov	r3, fp
 8008e78:	f7f7 fe48 	bl	8000b0c <__aeabi_dcmplt>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	f040 80b5 	bne.w	8008fec <_dtoa_r+0x6c4>
 8008e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e84:	429d      	cmp	r5, r3
 8008e86:	d081      	beq.n	8008d8c <_dtoa_r+0x464>
 8008e88:	4b30      	ldr	r3, [pc, #192]	; (8008f4c <_dtoa_r+0x624>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	4650      	mov	r0, sl
 8008e8e:	4659      	mov	r1, fp
 8008e90:	f7f7 fbca 	bl	8000628 <__aeabi_dmul>
 8008e94:	4b2d      	ldr	r3, [pc, #180]	; (8008f4c <_dtoa_r+0x624>)
 8008e96:	4682      	mov	sl, r0
 8008e98:	468b      	mov	fp, r1
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f7f7 fbc2 	bl	8000628 <__aeabi_dmul>
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	4689      	mov	r9, r1
 8008ea8:	e7c6      	b.n	8008e38 <_dtoa_r+0x510>
 8008eaa:	4650      	mov	r0, sl
 8008eac:	4659      	mov	r1, fp
 8008eae:	f7f7 fbbb 	bl	8000628 <__aeabi_dmul>
 8008eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eb4:	9d01      	ldr	r5, [sp, #4]
 8008eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eb8:	4682      	mov	sl, r0
 8008eba:	468b      	mov	fp, r1
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	f7f7 fe62 	bl	8000b88 <__aeabi_d2iz>
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	f7f7 fb45 	bl	8000554 <__aeabi_i2d>
 8008eca:	3630      	adds	r6, #48	; 0x30
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	f7f7 f9f0 	bl	80002b8 <__aeabi_dsub>
 8008ed8:	f805 6b01 	strb.w	r6, [r5], #1
 8008edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ede:	429d      	cmp	r5, r3
 8008ee0:	4680      	mov	r8, r0
 8008ee2:	4689      	mov	r9, r1
 8008ee4:	f04f 0200 	mov.w	r2, #0
 8008ee8:	d124      	bne.n	8008f34 <_dtoa_r+0x60c>
 8008eea:	4b1b      	ldr	r3, [pc, #108]	; (8008f58 <_dtoa_r+0x630>)
 8008eec:	4650      	mov	r0, sl
 8008eee:	4659      	mov	r1, fp
 8008ef0:	f7f7 f9e4 	bl	80002bc <__adddf3>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4640      	mov	r0, r8
 8008efa:	4649      	mov	r1, r9
 8008efc:	f7f7 fe24 	bl	8000b48 <__aeabi_dcmpgt>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d173      	bne.n	8008fec <_dtoa_r+0x6c4>
 8008f04:	4652      	mov	r2, sl
 8008f06:	465b      	mov	r3, fp
 8008f08:	4913      	ldr	r1, [pc, #76]	; (8008f58 <_dtoa_r+0x630>)
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	f7f7 f9d4 	bl	80002b8 <__aeabi_dsub>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4640      	mov	r0, r8
 8008f16:	4649      	mov	r1, r9
 8008f18:	f7f7 fdf8 	bl	8000b0c <__aeabi_dcmplt>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	f43f af35 	beq.w	8008d8c <_dtoa_r+0x464>
 8008f22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f24:	1e6b      	subs	r3, r5, #1
 8008f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f2c:	2b30      	cmp	r3, #48	; 0x30
 8008f2e:	d0f8      	beq.n	8008f22 <_dtoa_r+0x5fa>
 8008f30:	9700      	str	r7, [sp, #0]
 8008f32:	e049      	b.n	8008fc8 <_dtoa_r+0x6a0>
 8008f34:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <_dtoa_r+0x624>)
 8008f36:	f7f7 fb77 	bl	8000628 <__aeabi_dmul>
 8008f3a:	4680      	mov	r8, r0
 8008f3c:	4689      	mov	r9, r1
 8008f3e:	e7bd      	b.n	8008ebc <_dtoa_r+0x594>
 8008f40:	0800aa98 	.word	0x0800aa98
 8008f44:	0800aa70 	.word	0x0800aa70
 8008f48:	3ff00000 	.word	0x3ff00000
 8008f4c:	40240000 	.word	0x40240000
 8008f50:	401c0000 	.word	0x401c0000
 8008f54:	40140000 	.word	0x40140000
 8008f58:	3fe00000 	.word	0x3fe00000
 8008f5c:	9d01      	ldr	r5, [sp, #4]
 8008f5e:	4656      	mov	r6, sl
 8008f60:	465f      	mov	r7, fp
 8008f62:	4642      	mov	r2, r8
 8008f64:	464b      	mov	r3, r9
 8008f66:	4630      	mov	r0, r6
 8008f68:	4639      	mov	r1, r7
 8008f6a:	f7f7 fc87 	bl	800087c <__aeabi_ddiv>
 8008f6e:	f7f7 fe0b 	bl	8000b88 <__aeabi_d2iz>
 8008f72:	4682      	mov	sl, r0
 8008f74:	f7f7 faee 	bl	8000554 <__aeabi_i2d>
 8008f78:	4642      	mov	r2, r8
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	f7f7 fb54 	bl	8000628 <__aeabi_dmul>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4630      	mov	r0, r6
 8008f86:	4639      	mov	r1, r7
 8008f88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008f8c:	f7f7 f994 	bl	80002b8 <__aeabi_dsub>
 8008f90:	f805 6b01 	strb.w	r6, [r5], #1
 8008f94:	9e01      	ldr	r6, [sp, #4]
 8008f96:	9f03      	ldr	r7, [sp, #12]
 8008f98:	1bae      	subs	r6, r5, r6
 8008f9a:	42b7      	cmp	r7, r6
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	d135      	bne.n	800900e <_dtoa_r+0x6e6>
 8008fa2:	f7f7 f98b 	bl	80002bc <__adddf3>
 8008fa6:	4642      	mov	r2, r8
 8008fa8:	464b      	mov	r3, r9
 8008faa:	4606      	mov	r6, r0
 8008fac:	460f      	mov	r7, r1
 8008fae:	f7f7 fdcb 	bl	8000b48 <__aeabi_dcmpgt>
 8008fb2:	b9d0      	cbnz	r0, 8008fea <_dtoa_r+0x6c2>
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	464b      	mov	r3, r9
 8008fb8:	4630      	mov	r0, r6
 8008fba:	4639      	mov	r1, r7
 8008fbc:	f7f7 fd9c 	bl	8000af8 <__aeabi_dcmpeq>
 8008fc0:	b110      	cbz	r0, 8008fc8 <_dtoa_r+0x6a0>
 8008fc2:	f01a 0f01 	tst.w	sl, #1
 8008fc6:	d110      	bne.n	8008fea <_dtoa_r+0x6c2>
 8008fc8:	4620      	mov	r0, r4
 8008fca:	ee18 1a10 	vmov	r1, s16
 8008fce:	f000 fb69 	bl	80096a4 <_Bfree>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	9800      	ldr	r0, [sp, #0]
 8008fd6:	702b      	strb	r3, [r5, #0]
 8008fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fda:	3001      	adds	r0, #1
 8008fdc:	6018      	str	r0, [r3, #0]
 8008fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f43f acf1 	beq.w	80089c8 <_dtoa_r+0xa0>
 8008fe6:	601d      	str	r5, [r3, #0]
 8008fe8:	e4ee      	b.n	80089c8 <_dtoa_r+0xa0>
 8008fea:	9f00      	ldr	r7, [sp, #0]
 8008fec:	462b      	mov	r3, r5
 8008fee:	461d      	mov	r5, r3
 8008ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ff4:	2a39      	cmp	r2, #57	; 0x39
 8008ff6:	d106      	bne.n	8009006 <_dtoa_r+0x6de>
 8008ff8:	9a01      	ldr	r2, [sp, #4]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d1f7      	bne.n	8008fee <_dtoa_r+0x6c6>
 8008ffe:	9901      	ldr	r1, [sp, #4]
 8009000:	2230      	movs	r2, #48	; 0x30
 8009002:	3701      	adds	r7, #1
 8009004:	700a      	strb	r2, [r1, #0]
 8009006:	781a      	ldrb	r2, [r3, #0]
 8009008:	3201      	adds	r2, #1
 800900a:	701a      	strb	r2, [r3, #0]
 800900c:	e790      	b.n	8008f30 <_dtoa_r+0x608>
 800900e:	4ba6      	ldr	r3, [pc, #664]	; (80092a8 <_dtoa_r+0x980>)
 8009010:	2200      	movs	r2, #0
 8009012:	f7f7 fb09 	bl	8000628 <__aeabi_dmul>
 8009016:	2200      	movs	r2, #0
 8009018:	2300      	movs	r3, #0
 800901a:	4606      	mov	r6, r0
 800901c:	460f      	mov	r7, r1
 800901e:	f7f7 fd6b 	bl	8000af8 <__aeabi_dcmpeq>
 8009022:	2800      	cmp	r0, #0
 8009024:	d09d      	beq.n	8008f62 <_dtoa_r+0x63a>
 8009026:	e7cf      	b.n	8008fc8 <_dtoa_r+0x6a0>
 8009028:	9a08      	ldr	r2, [sp, #32]
 800902a:	2a00      	cmp	r2, #0
 800902c:	f000 80d7 	beq.w	80091de <_dtoa_r+0x8b6>
 8009030:	9a06      	ldr	r2, [sp, #24]
 8009032:	2a01      	cmp	r2, #1
 8009034:	f300 80ba 	bgt.w	80091ac <_dtoa_r+0x884>
 8009038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800903a:	2a00      	cmp	r2, #0
 800903c:	f000 80b2 	beq.w	80091a4 <_dtoa_r+0x87c>
 8009040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009044:	9e07      	ldr	r6, [sp, #28]
 8009046:	9d04      	ldr	r5, [sp, #16]
 8009048:	9a04      	ldr	r2, [sp, #16]
 800904a:	441a      	add	r2, r3
 800904c:	9204      	str	r2, [sp, #16]
 800904e:	9a05      	ldr	r2, [sp, #20]
 8009050:	2101      	movs	r1, #1
 8009052:	441a      	add	r2, r3
 8009054:	4620      	mov	r0, r4
 8009056:	9205      	str	r2, [sp, #20]
 8009058:	f000 fbdc 	bl	8009814 <__i2b>
 800905c:	4607      	mov	r7, r0
 800905e:	2d00      	cmp	r5, #0
 8009060:	dd0c      	ble.n	800907c <_dtoa_r+0x754>
 8009062:	9b05      	ldr	r3, [sp, #20]
 8009064:	2b00      	cmp	r3, #0
 8009066:	dd09      	ble.n	800907c <_dtoa_r+0x754>
 8009068:	42ab      	cmp	r3, r5
 800906a:	9a04      	ldr	r2, [sp, #16]
 800906c:	bfa8      	it	ge
 800906e:	462b      	movge	r3, r5
 8009070:	1ad2      	subs	r2, r2, r3
 8009072:	9204      	str	r2, [sp, #16]
 8009074:	9a05      	ldr	r2, [sp, #20]
 8009076:	1aed      	subs	r5, r5, r3
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	9305      	str	r3, [sp, #20]
 800907c:	9b07      	ldr	r3, [sp, #28]
 800907e:	b31b      	cbz	r3, 80090c8 <_dtoa_r+0x7a0>
 8009080:	9b08      	ldr	r3, [sp, #32]
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 80af 	beq.w	80091e6 <_dtoa_r+0x8be>
 8009088:	2e00      	cmp	r6, #0
 800908a:	dd13      	ble.n	80090b4 <_dtoa_r+0x78c>
 800908c:	4639      	mov	r1, r7
 800908e:	4632      	mov	r2, r6
 8009090:	4620      	mov	r0, r4
 8009092:	f000 fc7f 	bl	8009994 <__pow5mult>
 8009096:	ee18 2a10 	vmov	r2, s16
 800909a:	4601      	mov	r1, r0
 800909c:	4607      	mov	r7, r0
 800909e:	4620      	mov	r0, r4
 80090a0:	f000 fbce 	bl	8009840 <__multiply>
 80090a4:	ee18 1a10 	vmov	r1, s16
 80090a8:	4680      	mov	r8, r0
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 fafa 	bl	80096a4 <_Bfree>
 80090b0:	ee08 8a10 	vmov	s16, r8
 80090b4:	9b07      	ldr	r3, [sp, #28]
 80090b6:	1b9a      	subs	r2, r3, r6
 80090b8:	d006      	beq.n	80090c8 <_dtoa_r+0x7a0>
 80090ba:	ee18 1a10 	vmov	r1, s16
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 fc68 	bl	8009994 <__pow5mult>
 80090c4:	ee08 0a10 	vmov	s16, r0
 80090c8:	2101      	movs	r1, #1
 80090ca:	4620      	mov	r0, r4
 80090cc:	f000 fba2 	bl	8009814 <__i2b>
 80090d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	4606      	mov	r6, r0
 80090d6:	f340 8088 	ble.w	80091ea <_dtoa_r+0x8c2>
 80090da:	461a      	mov	r2, r3
 80090dc:	4601      	mov	r1, r0
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 fc58 	bl	8009994 <__pow5mult>
 80090e4:	9b06      	ldr	r3, [sp, #24]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	4606      	mov	r6, r0
 80090ea:	f340 8081 	ble.w	80091f0 <_dtoa_r+0x8c8>
 80090ee:	f04f 0800 	mov.w	r8, #0
 80090f2:	6933      	ldr	r3, [r6, #16]
 80090f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090f8:	6918      	ldr	r0, [r3, #16]
 80090fa:	f000 fb3b 	bl	8009774 <__hi0bits>
 80090fe:	f1c0 0020 	rsb	r0, r0, #32
 8009102:	9b05      	ldr	r3, [sp, #20]
 8009104:	4418      	add	r0, r3
 8009106:	f010 001f 	ands.w	r0, r0, #31
 800910a:	f000 8092 	beq.w	8009232 <_dtoa_r+0x90a>
 800910e:	f1c0 0320 	rsb	r3, r0, #32
 8009112:	2b04      	cmp	r3, #4
 8009114:	f340 808a 	ble.w	800922c <_dtoa_r+0x904>
 8009118:	f1c0 001c 	rsb	r0, r0, #28
 800911c:	9b04      	ldr	r3, [sp, #16]
 800911e:	4403      	add	r3, r0
 8009120:	9304      	str	r3, [sp, #16]
 8009122:	9b05      	ldr	r3, [sp, #20]
 8009124:	4403      	add	r3, r0
 8009126:	4405      	add	r5, r0
 8009128:	9305      	str	r3, [sp, #20]
 800912a:	9b04      	ldr	r3, [sp, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	dd07      	ble.n	8009140 <_dtoa_r+0x818>
 8009130:	ee18 1a10 	vmov	r1, s16
 8009134:	461a      	mov	r2, r3
 8009136:	4620      	mov	r0, r4
 8009138:	f000 fc86 	bl	8009a48 <__lshift>
 800913c:	ee08 0a10 	vmov	s16, r0
 8009140:	9b05      	ldr	r3, [sp, #20]
 8009142:	2b00      	cmp	r3, #0
 8009144:	dd05      	ble.n	8009152 <_dtoa_r+0x82a>
 8009146:	4631      	mov	r1, r6
 8009148:	461a      	mov	r2, r3
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fc7c 	bl	8009a48 <__lshift>
 8009150:	4606      	mov	r6, r0
 8009152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009154:	2b00      	cmp	r3, #0
 8009156:	d06e      	beq.n	8009236 <_dtoa_r+0x90e>
 8009158:	ee18 0a10 	vmov	r0, s16
 800915c:	4631      	mov	r1, r6
 800915e:	f000 fce3 	bl	8009b28 <__mcmp>
 8009162:	2800      	cmp	r0, #0
 8009164:	da67      	bge.n	8009236 <_dtoa_r+0x90e>
 8009166:	9b00      	ldr	r3, [sp, #0]
 8009168:	3b01      	subs	r3, #1
 800916a:	ee18 1a10 	vmov	r1, s16
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	220a      	movs	r2, #10
 8009172:	2300      	movs	r3, #0
 8009174:	4620      	mov	r0, r4
 8009176:	f000 fab7 	bl	80096e8 <__multadd>
 800917a:	9b08      	ldr	r3, [sp, #32]
 800917c:	ee08 0a10 	vmov	s16, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 81b1 	beq.w	80094e8 <_dtoa_r+0xbc0>
 8009186:	2300      	movs	r3, #0
 8009188:	4639      	mov	r1, r7
 800918a:	220a      	movs	r2, #10
 800918c:	4620      	mov	r0, r4
 800918e:	f000 faab 	bl	80096e8 <__multadd>
 8009192:	9b02      	ldr	r3, [sp, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	4607      	mov	r7, r0
 8009198:	f300 808e 	bgt.w	80092b8 <_dtoa_r+0x990>
 800919c:	9b06      	ldr	r3, [sp, #24]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	dc51      	bgt.n	8009246 <_dtoa_r+0x91e>
 80091a2:	e089      	b.n	80092b8 <_dtoa_r+0x990>
 80091a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091aa:	e74b      	b.n	8009044 <_dtoa_r+0x71c>
 80091ac:	9b03      	ldr	r3, [sp, #12]
 80091ae:	1e5e      	subs	r6, r3, #1
 80091b0:	9b07      	ldr	r3, [sp, #28]
 80091b2:	42b3      	cmp	r3, r6
 80091b4:	bfbf      	itttt	lt
 80091b6:	9b07      	ldrlt	r3, [sp, #28]
 80091b8:	9607      	strlt	r6, [sp, #28]
 80091ba:	1af2      	sublt	r2, r6, r3
 80091bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80091be:	bfb6      	itet	lt
 80091c0:	189b      	addlt	r3, r3, r2
 80091c2:	1b9e      	subge	r6, r3, r6
 80091c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	bfb8      	it	lt
 80091ca:	2600      	movlt	r6, #0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bfb7      	itett	lt
 80091d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80091d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80091d8:	1a9d      	sublt	r5, r3, r2
 80091da:	2300      	movlt	r3, #0
 80091dc:	e734      	b.n	8009048 <_dtoa_r+0x720>
 80091de:	9e07      	ldr	r6, [sp, #28]
 80091e0:	9d04      	ldr	r5, [sp, #16]
 80091e2:	9f08      	ldr	r7, [sp, #32]
 80091e4:	e73b      	b.n	800905e <_dtoa_r+0x736>
 80091e6:	9a07      	ldr	r2, [sp, #28]
 80091e8:	e767      	b.n	80090ba <_dtoa_r+0x792>
 80091ea:	9b06      	ldr	r3, [sp, #24]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	dc18      	bgt.n	8009222 <_dtoa_r+0x8fa>
 80091f0:	f1ba 0f00 	cmp.w	sl, #0
 80091f4:	d115      	bne.n	8009222 <_dtoa_r+0x8fa>
 80091f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091fa:	b993      	cbnz	r3, 8009222 <_dtoa_r+0x8fa>
 80091fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009200:	0d1b      	lsrs	r3, r3, #20
 8009202:	051b      	lsls	r3, r3, #20
 8009204:	b183      	cbz	r3, 8009228 <_dtoa_r+0x900>
 8009206:	9b04      	ldr	r3, [sp, #16]
 8009208:	3301      	adds	r3, #1
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	9b05      	ldr	r3, [sp, #20]
 800920e:	3301      	adds	r3, #1
 8009210:	9305      	str	r3, [sp, #20]
 8009212:	f04f 0801 	mov.w	r8, #1
 8009216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009218:	2b00      	cmp	r3, #0
 800921a:	f47f af6a 	bne.w	80090f2 <_dtoa_r+0x7ca>
 800921e:	2001      	movs	r0, #1
 8009220:	e76f      	b.n	8009102 <_dtoa_r+0x7da>
 8009222:	f04f 0800 	mov.w	r8, #0
 8009226:	e7f6      	b.n	8009216 <_dtoa_r+0x8ee>
 8009228:	4698      	mov	r8, r3
 800922a:	e7f4      	b.n	8009216 <_dtoa_r+0x8ee>
 800922c:	f43f af7d 	beq.w	800912a <_dtoa_r+0x802>
 8009230:	4618      	mov	r0, r3
 8009232:	301c      	adds	r0, #28
 8009234:	e772      	b.n	800911c <_dtoa_r+0x7f4>
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	dc37      	bgt.n	80092ac <_dtoa_r+0x984>
 800923c:	9b06      	ldr	r3, [sp, #24]
 800923e:	2b02      	cmp	r3, #2
 8009240:	dd34      	ble.n	80092ac <_dtoa_r+0x984>
 8009242:	9b03      	ldr	r3, [sp, #12]
 8009244:	9302      	str	r3, [sp, #8]
 8009246:	9b02      	ldr	r3, [sp, #8]
 8009248:	b96b      	cbnz	r3, 8009266 <_dtoa_r+0x93e>
 800924a:	4631      	mov	r1, r6
 800924c:	2205      	movs	r2, #5
 800924e:	4620      	mov	r0, r4
 8009250:	f000 fa4a 	bl	80096e8 <__multadd>
 8009254:	4601      	mov	r1, r0
 8009256:	4606      	mov	r6, r0
 8009258:	ee18 0a10 	vmov	r0, s16
 800925c:	f000 fc64 	bl	8009b28 <__mcmp>
 8009260:	2800      	cmp	r0, #0
 8009262:	f73f adbb 	bgt.w	8008ddc <_dtoa_r+0x4b4>
 8009266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009268:	9d01      	ldr	r5, [sp, #4]
 800926a:	43db      	mvns	r3, r3
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	f04f 0800 	mov.w	r8, #0
 8009272:	4631      	mov	r1, r6
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fa15 	bl	80096a4 <_Bfree>
 800927a:	2f00      	cmp	r7, #0
 800927c:	f43f aea4 	beq.w	8008fc8 <_dtoa_r+0x6a0>
 8009280:	f1b8 0f00 	cmp.w	r8, #0
 8009284:	d005      	beq.n	8009292 <_dtoa_r+0x96a>
 8009286:	45b8      	cmp	r8, r7
 8009288:	d003      	beq.n	8009292 <_dtoa_r+0x96a>
 800928a:	4641      	mov	r1, r8
 800928c:	4620      	mov	r0, r4
 800928e:	f000 fa09 	bl	80096a4 <_Bfree>
 8009292:	4639      	mov	r1, r7
 8009294:	4620      	mov	r0, r4
 8009296:	f000 fa05 	bl	80096a4 <_Bfree>
 800929a:	e695      	b.n	8008fc8 <_dtoa_r+0x6a0>
 800929c:	2600      	movs	r6, #0
 800929e:	4637      	mov	r7, r6
 80092a0:	e7e1      	b.n	8009266 <_dtoa_r+0x93e>
 80092a2:	9700      	str	r7, [sp, #0]
 80092a4:	4637      	mov	r7, r6
 80092a6:	e599      	b.n	8008ddc <_dtoa_r+0x4b4>
 80092a8:	40240000 	.word	0x40240000
 80092ac:	9b08      	ldr	r3, [sp, #32]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 80ca 	beq.w	8009448 <_dtoa_r+0xb20>
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	9302      	str	r3, [sp, #8]
 80092b8:	2d00      	cmp	r5, #0
 80092ba:	dd05      	ble.n	80092c8 <_dtoa_r+0x9a0>
 80092bc:	4639      	mov	r1, r7
 80092be:	462a      	mov	r2, r5
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 fbc1 	bl	8009a48 <__lshift>
 80092c6:	4607      	mov	r7, r0
 80092c8:	f1b8 0f00 	cmp.w	r8, #0
 80092cc:	d05b      	beq.n	8009386 <_dtoa_r+0xa5e>
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 f9a7 	bl	8009624 <_Balloc>
 80092d6:	4605      	mov	r5, r0
 80092d8:	b928      	cbnz	r0, 80092e6 <_dtoa_r+0x9be>
 80092da:	4b87      	ldr	r3, [pc, #540]	; (80094f8 <_dtoa_r+0xbd0>)
 80092dc:	4602      	mov	r2, r0
 80092de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80092e2:	f7ff bb3b 	b.w	800895c <_dtoa_r+0x34>
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	3202      	adds	r2, #2
 80092ea:	0092      	lsls	r2, r2, #2
 80092ec:	f107 010c 	add.w	r1, r7, #12
 80092f0:	300c      	adds	r0, #12
 80092f2:	f7fe f9ee 	bl	80076d2 <memcpy>
 80092f6:	2201      	movs	r2, #1
 80092f8:	4629      	mov	r1, r5
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fba4 	bl	8009a48 <__lshift>
 8009300:	9b01      	ldr	r3, [sp, #4]
 8009302:	f103 0901 	add.w	r9, r3, #1
 8009306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800930a:	4413      	add	r3, r2
 800930c:	9305      	str	r3, [sp, #20]
 800930e:	f00a 0301 	and.w	r3, sl, #1
 8009312:	46b8      	mov	r8, r7
 8009314:	9304      	str	r3, [sp, #16]
 8009316:	4607      	mov	r7, r0
 8009318:	4631      	mov	r1, r6
 800931a:	ee18 0a10 	vmov	r0, s16
 800931e:	f7ff fa75 	bl	800880c <quorem>
 8009322:	4641      	mov	r1, r8
 8009324:	9002      	str	r0, [sp, #8]
 8009326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800932a:	ee18 0a10 	vmov	r0, s16
 800932e:	f000 fbfb 	bl	8009b28 <__mcmp>
 8009332:	463a      	mov	r2, r7
 8009334:	9003      	str	r0, [sp, #12]
 8009336:	4631      	mov	r1, r6
 8009338:	4620      	mov	r0, r4
 800933a:	f000 fc11 	bl	8009b60 <__mdiff>
 800933e:	68c2      	ldr	r2, [r0, #12]
 8009340:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009344:	4605      	mov	r5, r0
 8009346:	bb02      	cbnz	r2, 800938a <_dtoa_r+0xa62>
 8009348:	4601      	mov	r1, r0
 800934a:	ee18 0a10 	vmov	r0, s16
 800934e:	f000 fbeb 	bl	8009b28 <__mcmp>
 8009352:	4602      	mov	r2, r0
 8009354:	4629      	mov	r1, r5
 8009356:	4620      	mov	r0, r4
 8009358:	9207      	str	r2, [sp, #28]
 800935a:	f000 f9a3 	bl	80096a4 <_Bfree>
 800935e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009362:	ea43 0102 	orr.w	r1, r3, r2
 8009366:	9b04      	ldr	r3, [sp, #16]
 8009368:	430b      	orrs	r3, r1
 800936a:	464d      	mov	r5, r9
 800936c:	d10f      	bne.n	800938e <_dtoa_r+0xa66>
 800936e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009372:	d02a      	beq.n	80093ca <_dtoa_r+0xaa2>
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	dd02      	ble.n	8009380 <_dtoa_r+0xa58>
 800937a:	9b02      	ldr	r3, [sp, #8]
 800937c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009380:	f88b a000 	strb.w	sl, [fp]
 8009384:	e775      	b.n	8009272 <_dtoa_r+0x94a>
 8009386:	4638      	mov	r0, r7
 8009388:	e7ba      	b.n	8009300 <_dtoa_r+0x9d8>
 800938a:	2201      	movs	r2, #1
 800938c:	e7e2      	b.n	8009354 <_dtoa_r+0xa2c>
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	db04      	blt.n	800939e <_dtoa_r+0xa76>
 8009394:	9906      	ldr	r1, [sp, #24]
 8009396:	430b      	orrs	r3, r1
 8009398:	9904      	ldr	r1, [sp, #16]
 800939a:	430b      	orrs	r3, r1
 800939c:	d122      	bne.n	80093e4 <_dtoa_r+0xabc>
 800939e:	2a00      	cmp	r2, #0
 80093a0:	ddee      	ble.n	8009380 <_dtoa_r+0xa58>
 80093a2:	ee18 1a10 	vmov	r1, s16
 80093a6:	2201      	movs	r2, #1
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 fb4d 	bl	8009a48 <__lshift>
 80093ae:	4631      	mov	r1, r6
 80093b0:	ee08 0a10 	vmov	s16, r0
 80093b4:	f000 fbb8 	bl	8009b28 <__mcmp>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	dc03      	bgt.n	80093c4 <_dtoa_r+0xa9c>
 80093bc:	d1e0      	bne.n	8009380 <_dtoa_r+0xa58>
 80093be:	f01a 0f01 	tst.w	sl, #1
 80093c2:	d0dd      	beq.n	8009380 <_dtoa_r+0xa58>
 80093c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80093c8:	d1d7      	bne.n	800937a <_dtoa_r+0xa52>
 80093ca:	2339      	movs	r3, #57	; 0x39
 80093cc:	f88b 3000 	strb.w	r3, [fp]
 80093d0:	462b      	mov	r3, r5
 80093d2:	461d      	mov	r5, r3
 80093d4:	3b01      	subs	r3, #1
 80093d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093da:	2a39      	cmp	r2, #57	; 0x39
 80093dc:	d071      	beq.n	80094c2 <_dtoa_r+0xb9a>
 80093de:	3201      	adds	r2, #1
 80093e0:	701a      	strb	r2, [r3, #0]
 80093e2:	e746      	b.n	8009272 <_dtoa_r+0x94a>
 80093e4:	2a00      	cmp	r2, #0
 80093e6:	dd07      	ble.n	80093f8 <_dtoa_r+0xad0>
 80093e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80093ec:	d0ed      	beq.n	80093ca <_dtoa_r+0xaa2>
 80093ee:	f10a 0301 	add.w	r3, sl, #1
 80093f2:	f88b 3000 	strb.w	r3, [fp]
 80093f6:	e73c      	b.n	8009272 <_dtoa_r+0x94a>
 80093f8:	9b05      	ldr	r3, [sp, #20]
 80093fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80093fe:	4599      	cmp	r9, r3
 8009400:	d047      	beq.n	8009492 <_dtoa_r+0xb6a>
 8009402:	ee18 1a10 	vmov	r1, s16
 8009406:	2300      	movs	r3, #0
 8009408:	220a      	movs	r2, #10
 800940a:	4620      	mov	r0, r4
 800940c:	f000 f96c 	bl	80096e8 <__multadd>
 8009410:	45b8      	cmp	r8, r7
 8009412:	ee08 0a10 	vmov	s16, r0
 8009416:	f04f 0300 	mov.w	r3, #0
 800941a:	f04f 020a 	mov.w	r2, #10
 800941e:	4641      	mov	r1, r8
 8009420:	4620      	mov	r0, r4
 8009422:	d106      	bne.n	8009432 <_dtoa_r+0xb0a>
 8009424:	f000 f960 	bl	80096e8 <__multadd>
 8009428:	4680      	mov	r8, r0
 800942a:	4607      	mov	r7, r0
 800942c:	f109 0901 	add.w	r9, r9, #1
 8009430:	e772      	b.n	8009318 <_dtoa_r+0x9f0>
 8009432:	f000 f959 	bl	80096e8 <__multadd>
 8009436:	4639      	mov	r1, r7
 8009438:	4680      	mov	r8, r0
 800943a:	2300      	movs	r3, #0
 800943c:	220a      	movs	r2, #10
 800943e:	4620      	mov	r0, r4
 8009440:	f000 f952 	bl	80096e8 <__multadd>
 8009444:	4607      	mov	r7, r0
 8009446:	e7f1      	b.n	800942c <_dtoa_r+0xb04>
 8009448:	9b03      	ldr	r3, [sp, #12]
 800944a:	9302      	str	r3, [sp, #8]
 800944c:	9d01      	ldr	r5, [sp, #4]
 800944e:	ee18 0a10 	vmov	r0, s16
 8009452:	4631      	mov	r1, r6
 8009454:	f7ff f9da 	bl	800880c <quorem>
 8009458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800945c:	9b01      	ldr	r3, [sp, #4]
 800945e:	f805 ab01 	strb.w	sl, [r5], #1
 8009462:	1aea      	subs	r2, r5, r3
 8009464:	9b02      	ldr	r3, [sp, #8]
 8009466:	4293      	cmp	r3, r2
 8009468:	dd09      	ble.n	800947e <_dtoa_r+0xb56>
 800946a:	ee18 1a10 	vmov	r1, s16
 800946e:	2300      	movs	r3, #0
 8009470:	220a      	movs	r2, #10
 8009472:	4620      	mov	r0, r4
 8009474:	f000 f938 	bl	80096e8 <__multadd>
 8009478:	ee08 0a10 	vmov	s16, r0
 800947c:	e7e7      	b.n	800944e <_dtoa_r+0xb26>
 800947e:	9b02      	ldr	r3, [sp, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	bfc8      	it	gt
 8009484:	461d      	movgt	r5, r3
 8009486:	9b01      	ldr	r3, [sp, #4]
 8009488:	bfd8      	it	le
 800948a:	2501      	movle	r5, #1
 800948c:	441d      	add	r5, r3
 800948e:	f04f 0800 	mov.w	r8, #0
 8009492:	ee18 1a10 	vmov	r1, s16
 8009496:	2201      	movs	r2, #1
 8009498:	4620      	mov	r0, r4
 800949a:	f000 fad5 	bl	8009a48 <__lshift>
 800949e:	4631      	mov	r1, r6
 80094a0:	ee08 0a10 	vmov	s16, r0
 80094a4:	f000 fb40 	bl	8009b28 <__mcmp>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	dc91      	bgt.n	80093d0 <_dtoa_r+0xaa8>
 80094ac:	d102      	bne.n	80094b4 <_dtoa_r+0xb8c>
 80094ae:	f01a 0f01 	tst.w	sl, #1
 80094b2:	d18d      	bne.n	80093d0 <_dtoa_r+0xaa8>
 80094b4:	462b      	mov	r3, r5
 80094b6:	461d      	mov	r5, r3
 80094b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094bc:	2a30      	cmp	r2, #48	; 0x30
 80094be:	d0fa      	beq.n	80094b6 <_dtoa_r+0xb8e>
 80094c0:	e6d7      	b.n	8009272 <_dtoa_r+0x94a>
 80094c2:	9a01      	ldr	r2, [sp, #4]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d184      	bne.n	80093d2 <_dtoa_r+0xaaa>
 80094c8:	9b00      	ldr	r3, [sp, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	2331      	movs	r3, #49	; 0x31
 80094d0:	7013      	strb	r3, [r2, #0]
 80094d2:	e6ce      	b.n	8009272 <_dtoa_r+0x94a>
 80094d4:	4b09      	ldr	r3, [pc, #36]	; (80094fc <_dtoa_r+0xbd4>)
 80094d6:	f7ff ba95 	b.w	8008a04 <_dtoa_r+0xdc>
 80094da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f47f aa6e 	bne.w	80089be <_dtoa_r+0x96>
 80094e2:	4b07      	ldr	r3, [pc, #28]	; (8009500 <_dtoa_r+0xbd8>)
 80094e4:	f7ff ba8e 	b.w	8008a04 <_dtoa_r+0xdc>
 80094e8:	9b02      	ldr	r3, [sp, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	dcae      	bgt.n	800944c <_dtoa_r+0xb24>
 80094ee:	9b06      	ldr	r3, [sp, #24]
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	f73f aea8 	bgt.w	8009246 <_dtoa_r+0x91e>
 80094f6:	e7a9      	b.n	800944c <_dtoa_r+0xb24>
 80094f8:	0800aa00 	.word	0x0800aa00
 80094fc:	0800a85c 	.word	0x0800a85c
 8009500:	0800a981 	.word	0x0800a981

08009504 <_localeconv_r>:
 8009504:	4800      	ldr	r0, [pc, #0]	; (8009508 <_localeconv_r+0x4>)
 8009506:	4770      	bx	lr
 8009508:	20000164 	.word	0x20000164

0800950c <_lseek_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4d07      	ldr	r5, [pc, #28]	; (800952c <_lseek_r+0x20>)
 8009510:	4604      	mov	r4, r0
 8009512:	4608      	mov	r0, r1
 8009514:	4611      	mov	r1, r2
 8009516:	2200      	movs	r2, #0
 8009518:	602a      	str	r2, [r5, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	f7fa f968 	bl	80037f0 <_lseek>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d102      	bne.n	800952a <_lseek_r+0x1e>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	b103      	cbz	r3, 800952a <_lseek_r+0x1e>
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	200008e4 	.word	0x200008e4

08009530 <__swhatbuf_r>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	460e      	mov	r6, r1
 8009534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009538:	2900      	cmp	r1, #0
 800953a:	b096      	sub	sp, #88	; 0x58
 800953c:	4614      	mov	r4, r2
 800953e:	461d      	mov	r5, r3
 8009540:	da08      	bge.n	8009554 <__swhatbuf_r+0x24>
 8009542:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	602a      	str	r2, [r5, #0]
 800954a:	061a      	lsls	r2, r3, #24
 800954c:	d410      	bmi.n	8009570 <__swhatbuf_r+0x40>
 800954e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009552:	e00e      	b.n	8009572 <__swhatbuf_r+0x42>
 8009554:	466a      	mov	r2, sp
 8009556:	f000 fef7 	bl	800a348 <_fstat_r>
 800955a:	2800      	cmp	r0, #0
 800955c:	dbf1      	blt.n	8009542 <__swhatbuf_r+0x12>
 800955e:	9a01      	ldr	r2, [sp, #4]
 8009560:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009564:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009568:	425a      	negs	r2, r3
 800956a:	415a      	adcs	r2, r3
 800956c:	602a      	str	r2, [r5, #0]
 800956e:	e7ee      	b.n	800954e <__swhatbuf_r+0x1e>
 8009570:	2340      	movs	r3, #64	; 0x40
 8009572:	2000      	movs	r0, #0
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	b016      	add	sp, #88	; 0x58
 8009578:	bd70      	pop	{r4, r5, r6, pc}
	...

0800957c <__smakebuf_r>:
 800957c:	898b      	ldrh	r3, [r1, #12]
 800957e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009580:	079d      	lsls	r5, r3, #30
 8009582:	4606      	mov	r6, r0
 8009584:	460c      	mov	r4, r1
 8009586:	d507      	bpl.n	8009598 <__smakebuf_r+0x1c>
 8009588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	6123      	str	r3, [r4, #16]
 8009590:	2301      	movs	r3, #1
 8009592:	6163      	str	r3, [r4, #20]
 8009594:	b002      	add	sp, #8
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	ab01      	add	r3, sp, #4
 800959a:	466a      	mov	r2, sp
 800959c:	f7ff ffc8 	bl	8009530 <__swhatbuf_r>
 80095a0:	9900      	ldr	r1, [sp, #0]
 80095a2:	4605      	mov	r5, r0
 80095a4:	4630      	mov	r0, r6
 80095a6:	f7fe f917 	bl	80077d8 <_malloc_r>
 80095aa:	b948      	cbnz	r0, 80095c0 <__smakebuf_r+0x44>
 80095ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b0:	059a      	lsls	r2, r3, #22
 80095b2:	d4ef      	bmi.n	8009594 <__smakebuf_r+0x18>
 80095b4:	f023 0303 	bic.w	r3, r3, #3
 80095b8:	f043 0302 	orr.w	r3, r3, #2
 80095bc:	81a3      	strh	r3, [r4, #12]
 80095be:	e7e3      	b.n	8009588 <__smakebuf_r+0xc>
 80095c0:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <__smakebuf_r+0x7c>)
 80095c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	6020      	str	r0, [r4, #0]
 80095c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	9b00      	ldr	r3, [sp, #0]
 80095d0:	6163      	str	r3, [r4, #20]
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	6120      	str	r0, [r4, #16]
 80095d6:	b15b      	cbz	r3, 80095f0 <__smakebuf_r+0x74>
 80095d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095dc:	4630      	mov	r0, r6
 80095de:	f000 fec5 	bl	800a36c <_isatty_r>
 80095e2:	b128      	cbz	r0, 80095f0 <__smakebuf_r+0x74>
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	f023 0303 	bic.w	r3, r3, #3
 80095ea:	f043 0301 	orr.w	r3, r3, #1
 80095ee:	81a3      	strh	r3, [r4, #12]
 80095f0:	89a0      	ldrh	r0, [r4, #12]
 80095f2:	4305      	orrs	r5, r0
 80095f4:	81a5      	strh	r5, [r4, #12]
 80095f6:	e7cd      	b.n	8009594 <__smakebuf_r+0x18>
 80095f8:	080074e1 	.word	0x080074e1

080095fc <malloc>:
 80095fc:	4b02      	ldr	r3, [pc, #8]	; (8009608 <malloc+0xc>)
 80095fe:	4601      	mov	r1, r0
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	f7fe b8e9 	b.w	80077d8 <_malloc_r>
 8009606:	bf00      	nop
 8009608:	20000010 	.word	0x20000010

0800960c <__malloc_lock>:
 800960c:	4801      	ldr	r0, [pc, #4]	; (8009614 <__malloc_lock+0x8>)
 800960e:	f7fe b85e 	b.w	80076ce <__retarget_lock_acquire_recursive>
 8009612:	bf00      	nop
 8009614:	200008d8 	.word	0x200008d8

08009618 <__malloc_unlock>:
 8009618:	4801      	ldr	r0, [pc, #4]	; (8009620 <__malloc_unlock+0x8>)
 800961a:	f7fe b859 	b.w	80076d0 <__retarget_lock_release_recursive>
 800961e:	bf00      	nop
 8009620:	200008d8 	.word	0x200008d8

08009624 <_Balloc>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009628:	4604      	mov	r4, r0
 800962a:	460d      	mov	r5, r1
 800962c:	b976      	cbnz	r6, 800964c <_Balloc+0x28>
 800962e:	2010      	movs	r0, #16
 8009630:	f7ff ffe4 	bl	80095fc <malloc>
 8009634:	4602      	mov	r2, r0
 8009636:	6260      	str	r0, [r4, #36]	; 0x24
 8009638:	b920      	cbnz	r0, 8009644 <_Balloc+0x20>
 800963a:	4b18      	ldr	r3, [pc, #96]	; (800969c <_Balloc+0x78>)
 800963c:	4818      	ldr	r0, [pc, #96]	; (80096a0 <_Balloc+0x7c>)
 800963e:	2166      	movs	r1, #102	; 0x66
 8009640:	f000 fe52 	bl	800a2e8 <__assert_func>
 8009644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009648:	6006      	str	r6, [r0, #0]
 800964a:	60c6      	str	r6, [r0, #12]
 800964c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800964e:	68f3      	ldr	r3, [r6, #12]
 8009650:	b183      	cbz	r3, 8009674 <_Balloc+0x50>
 8009652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800965a:	b9b8      	cbnz	r0, 800968c <_Balloc+0x68>
 800965c:	2101      	movs	r1, #1
 800965e:	fa01 f605 	lsl.w	r6, r1, r5
 8009662:	1d72      	adds	r2, r6, #5
 8009664:	0092      	lsls	r2, r2, #2
 8009666:	4620      	mov	r0, r4
 8009668:	f000 fb60 	bl	8009d2c <_calloc_r>
 800966c:	b160      	cbz	r0, 8009688 <_Balloc+0x64>
 800966e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009672:	e00e      	b.n	8009692 <_Balloc+0x6e>
 8009674:	2221      	movs	r2, #33	; 0x21
 8009676:	2104      	movs	r1, #4
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fb57 	bl	8009d2c <_calloc_r>
 800967e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009680:	60f0      	str	r0, [r6, #12]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e4      	bne.n	8009652 <_Balloc+0x2e>
 8009688:	2000      	movs	r0, #0
 800968a:	bd70      	pop	{r4, r5, r6, pc}
 800968c:	6802      	ldr	r2, [r0, #0]
 800968e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009692:	2300      	movs	r3, #0
 8009694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009698:	e7f7      	b.n	800968a <_Balloc+0x66>
 800969a:	bf00      	nop
 800969c:	0800a98e 	.word	0x0800a98e
 80096a0:	0800aa11 	.word	0x0800aa11

080096a4 <_Bfree>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096a8:	4605      	mov	r5, r0
 80096aa:	460c      	mov	r4, r1
 80096ac:	b976      	cbnz	r6, 80096cc <_Bfree+0x28>
 80096ae:	2010      	movs	r0, #16
 80096b0:	f7ff ffa4 	bl	80095fc <malloc>
 80096b4:	4602      	mov	r2, r0
 80096b6:	6268      	str	r0, [r5, #36]	; 0x24
 80096b8:	b920      	cbnz	r0, 80096c4 <_Bfree+0x20>
 80096ba:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <_Bfree+0x3c>)
 80096bc:	4809      	ldr	r0, [pc, #36]	; (80096e4 <_Bfree+0x40>)
 80096be:	218a      	movs	r1, #138	; 0x8a
 80096c0:	f000 fe12 	bl	800a2e8 <__assert_func>
 80096c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096c8:	6006      	str	r6, [r0, #0]
 80096ca:	60c6      	str	r6, [r0, #12]
 80096cc:	b13c      	cbz	r4, 80096de <_Bfree+0x3a>
 80096ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096d0:	6862      	ldr	r2, [r4, #4]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096d8:	6021      	str	r1, [r4, #0]
 80096da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	0800a98e 	.word	0x0800a98e
 80096e4:	0800aa11 	.word	0x0800aa11

080096e8 <__multadd>:
 80096e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ec:	690d      	ldr	r5, [r1, #16]
 80096ee:	4607      	mov	r7, r0
 80096f0:	460c      	mov	r4, r1
 80096f2:	461e      	mov	r6, r3
 80096f4:	f101 0c14 	add.w	ip, r1, #20
 80096f8:	2000      	movs	r0, #0
 80096fa:	f8dc 3000 	ldr.w	r3, [ip]
 80096fe:	b299      	uxth	r1, r3
 8009700:	fb02 6101 	mla	r1, r2, r1, r6
 8009704:	0c1e      	lsrs	r6, r3, #16
 8009706:	0c0b      	lsrs	r3, r1, #16
 8009708:	fb02 3306 	mla	r3, r2, r6, r3
 800970c:	b289      	uxth	r1, r1
 800970e:	3001      	adds	r0, #1
 8009710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009714:	4285      	cmp	r5, r0
 8009716:	f84c 1b04 	str.w	r1, [ip], #4
 800971a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800971e:	dcec      	bgt.n	80096fa <__multadd+0x12>
 8009720:	b30e      	cbz	r6, 8009766 <__multadd+0x7e>
 8009722:	68a3      	ldr	r3, [r4, #8]
 8009724:	42ab      	cmp	r3, r5
 8009726:	dc19      	bgt.n	800975c <__multadd+0x74>
 8009728:	6861      	ldr	r1, [r4, #4]
 800972a:	4638      	mov	r0, r7
 800972c:	3101      	adds	r1, #1
 800972e:	f7ff ff79 	bl	8009624 <_Balloc>
 8009732:	4680      	mov	r8, r0
 8009734:	b928      	cbnz	r0, 8009742 <__multadd+0x5a>
 8009736:	4602      	mov	r2, r0
 8009738:	4b0c      	ldr	r3, [pc, #48]	; (800976c <__multadd+0x84>)
 800973a:	480d      	ldr	r0, [pc, #52]	; (8009770 <__multadd+0x88>)
 800973c:	21b5      	movs	r1, #181	; 0xb5
 800973e:	f000 fdd3 	bl	800a2e8 <__assert_func>
 8009742:	6922      	ldr	r2, [r4, #16]
 8009744:	3202      	adds	r2, #2
 8009746:	f104 010c 	add.w	r1, r4, #12
 800974a:	0092      	lsls	r2, r2, #2
 800974c:	300c      	adds	r0, #12
 800974e:	f7fd ffc0 	bl	80076d2 <memcpy>
 8009752:	4621      	mov	r1, r4
 8009754:	4638      	mov	r0, r7
 8009756:	f7ff ffa5 	bl	80096a4 <_Bfree>
 800975a:	4644      	mov	r4, r8
 800975c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009760:	3501      	adds	r5, #1
 8009762:	615e      	str	r6, [r3, #20]
 8009764:	6125      	str	r5, [r4, #16]
 8009766:	4620      	mov	r0, r4
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976c:	0800aa00 	.word	0x0800aa00
 8009770:	0800aa11 	.word	0x0800aa11

08009774 <__hi0bits>:
 8009774:	0c03      	lsrs	r3, r0, #16
 8009776:	041b      	lsls	r3, r3, #16
 8009778:	b9d3      	cbnz	r3, 80097b0 <__hi0bits+0x3c>
 800977a:	0400      	lsls	r0, r0, #16
 800977c:	2310      	movs	r3, #16
 800977e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009782:	bf04      	itt	eq
 8009784:	0200      	lsleq	r0, r0, #8
 8009786:	3308      	addeq	r3, #8
 8009788:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800978c:	bf04      	itt	eq
 800978e:	0100      	lsleq	r0, r0, #4
 8009790:	3304      	addeq	r3, #4
 8009792:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009796:	bf04      	itt	eq
 8009798:	0080      	lsleq	r0, r0, #2
 800979a:	3302      	addeq	r3, #2
 800979c:	2800      	cmp	r0, #0
 800979e:	db05      	blt.n	80097ac <__hi0bits+0x38>
 80097a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097a4:	f103 0301 	add.w	r3, r3, #1
 80097a8:	bf08      	it	eq
 80097aa:	2320      	moveq	r3, #32
 80097ac:	4618      	mov	r0, r3
 80097ae:	4770      	bx	lr
 80097b0:	2300      	movs	r3, #0
 80097b2:	e7e4      	b.n	800977e <__hi0bits+0xa>

080097b4 <__lo0bits>:
 80097b4:	6803      	ldr	r3, [r0, #0]
 80097b6:	f013 0207 	ands.w	r2, r3, #7
 80097ba:	4601      	mov	r1, r0
 80097bc:	d00b      	beq.n	80097d6 <__lo0bits+0x22>
 80097be:	07da      	lsls	r2, r3, #31
 80097c0:	d423      	bmi.n	800980a <__lo0bits+0x56>
 80097c2:	0798      	lsls	r0, r3, #30
 80097c4:	bf49      	itett	mi
 80097c6:	085b      	lsrmi	r3, r3, #1
 80097c8:	089b      	lsrpl	r3, r3, #2
 80097ca:	2001      	movmi	r0, #1
 80097cc:	600b      	strmi	r3, [r1, #0]
 80097ce:	bf5c      	itt	pl
 80097d0:	600b      	strpl	r3, [r1, #0]
 80097d2:	2002      	movpl	r0, #2
 80097d4:	4770      	bx	lr
 80097d6:	b298      	uxth	r0, r3
 80097d8:	b9a8      	cbnz	r0, 8009806 <__lo0bits+0x52>
 80097da:	0c1b      	lsrs	r3, r3, #16
 80097dc:	2010      	movs	r0, #16
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	b90a      	cbnz	r2, 80097e6 <__lo0bits+0x32>
 80097e2:	3008      	adds	r0, #8
 80097e4:	0a1b      	lsrs	r3, r3, #8
 80097e6:	071a      	lsls	r2, r3, #28
 80097e8:	bf04      	itt	eq
 80097ea:	091b      	lsreq	r3, r3, #4
 80097ec:	3004      	addeq	r0, #4
 80097ee:	079a      	lsls	r2, r3, #30
 80097f0:	bf04      	itt	eq
 80097f2:	089b      	lsreq	r3, r3, #2
 80097f4:	3002      	addeq	r0, #2
 80097f6:	07da      	lsls	r2, r3, #31
 80097f8:	d403      	bmi.n	8009802 <__lo0bits+0x4e>
 80097fa:	085b      	lsrs	r3, r3, #1
 80097fc:	f100 0001 	add.w	r0, r0, #1
 8009800:	d005      	beq.n	800980e <__lo0bits+0x5a>
 8009802:	600b      	str	r3, [r1, #0]
 8009804:	4770      	bx	lr
 8009806:	4610      	mov	r0, r2
 8009808:	e7e9      	b.n	80097de <__lo0bits+0x2a>
 800980a:	2000      	movs	r0, #0
 800980c:	4770      	bx	lr
 800980e:	2020      	movs	r0, #32
 8009810:	4770      	bx	lr
	...

08009814 <__i2b>:
 8009814:	b510      	push	{r4, lr}
 8009816:	460c      	mov	r4, r1
 8009818:	2101      	movs	r1, #1
 800981a:	f7ff ff03 	bl	8009624 <_Balloc>
 800981e:	4602      	mov	r2, r0
 8009820:	b928      	cbnz	r0, 800982e <__i2b+0x1a>
 8009822:	4b05      	ldr	r3, [pc, #20]	; (8009838 <__i2b+0x24>)
 8009824:	4805      	ldr	r0, [pc, #20]	; (800983c <__i2b+0x28>)
 8009826:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800982a:	f000 fd5d 	bl	800a2e8 <__assert_func>
 800982e:	2301      	movs	r3, #1
 8009830:	6144      	str	r4, [r0, #20]
 8009832:	6103      	str	r3, [r0, #16]
 8009834:	bd10      	pop	{r4, pc}
 8009836:	bf00      	nop
 8009838:	0800aa00 	.word	0x0800aa00
 800983c:	0800aa11 	.word	0x0800aa11

08009840 <__multiply>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	4691      	mov	r9, r2
 8009846:	690a      	ldr	r2, [r1, #16]
 8009848:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800984c:	429a      	cmp	r2, r3
 800984e:	bfb8      	it	lt
 8009850:	460b      	movlt	r3, r1
 8009852:	460c      	mov	r4, r1
 8009854:	bfbc      	itt	lt
 8009856:	464c      	movlt	r4, r9
 8009858:	4699      	movlt	r9, r3
 800985a:	6927      	ldr	r7, [r4, #16]
 800985c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009860:	68a3      	ldr	r3, [r4, #8]
 8009862:	6861      	ldr	r1, [r4, #4]
 8009864:	eb07 060a 	add.w	r6, r7, sl
 8009868:	42b3      	cmp	r3, r6
 800986a:	b085      	sub	sp, #20
 800986c:	bfb8      	it	lt
 800986e:	3101      	addlt	r1, #1
 8009870:	f7ff fed8 	bl	8009624 <_Balloc>
 8009874:	b930      	cbnz	r0, 8009884 <__multiply+0x44>
 8009876:	4602      	mov	r2, r0
 8009878:	4b44      	ldr	r3, [pc, #272]	; (800998c <__multiply+0x14c>)
 800987a:	4845      	ldr	r0, [pc, #276]	; (8009990 <__multiply+0x150>)
 800987c:	f240 115d 	movw	r1, #349	; 0x15d
 8009880:	f000 fd32 	bl	800a2e8 <__assert_func>
 8009884:	f100 0514 	add.w	r5, r0, #20
 8009888:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800988c:	462b      	mov	r3, r5
 800988e:	2200      	movs	r2, #0
 8009890:	4543      	cmp	r3, r8
 8009892:	d321      	bcc.n	80098d8 <__multiply+0x98>
 8009894:	f104 0314 	add.w	r3, r4, #20
 8009898:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800989c:	f109 0314 	add.w	r3, r9, #20
 80098a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098a4:	9202      	str	r2, [sp, #8]
 80098a6:	1b3a      	subs	r2, r7, r4
 80098a8:	3a15      	subs	r2, #21
 80098aa:	f022 0203 	bic.w	r2, r2, #3
 80098ae:	3204      	adds	r2, #4
 80098b0:	f104 0115 	add.w	r1, r4, #21
 80098b4:	428f      	cmp	r7, r1
 80098b6:	bf38      	it	cc
 80098b8:	2204      	movcc	r2, #4
 80098ba:	9201      	str	r2, [sp, #4]
 80098bc:	9a02      	ldr	r2, [sp, #8]
 80098be:	9303      	str	r3, [sp, #12]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d80c      	bhi.n	80098de <__multiply+0x9e>
 80098c4:	2e00      	cmp	r6, #0
 80098c6:	dd03      	ble.n	80098d0 <__multiply+0x90>
 80098c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d05a      	beq.n	8009986 <__multiply+0x146>
 80098d0:	6106      	str	r6, [r0, #16]
 80098d2:	b005      	add	sp, #20
 80098d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d8:	f843 2b04 	str.w	r2, [r3], #4
 80098dc:	e7d8      	b.n	8009890 <__multiply+0x50>
 80098de:	f8b3 a000 	ldrh.w	sl, [r3]
 80098e2:	f1ba 0f00 	cmp.w	sl, #0
 80098e6:	d024      	beq.n	8009932 <__multiply+0xf2>
 80098e8:	f104 0e14 	add.w	lr, r4, #20
 80098ec:	46a9      	mov	r9, r5
 80098ee:	f04f 0c00 	mov.w	ip, #0
 80098f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098f6:	f8d9 1000 	ldr.w	r1, [r9]
 80098fa:	fa1f fb82 	uxth.w	fp, r2
 80098fe:	b289      	uxth	r1, r1
 8009900:	fb0a 110b 	mla	r1, sl, fp, r1
 8009904:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009908:	f8d9 2000 	ldr.w	r2, [r9]
 800990c:	4461      	add	r1, ip
 800990e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009912:	fb0a c20b 	mla	r2, sl, fp, ip
 8009916:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800991a:	b289      	uxth	r1, r1
 800991c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009920:	4577      	cmp	r7, lr
 8009922:	f849 1b04 	str.w	r1, [r9], #4
 8009926:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800992a:	d8e2      	bhi.n	80098f2 <__multiply+0xb2>
 800992c:	9a01      	ldr	r2, [sp, #4]
 800992e:	f845 c002 	str.w	ip, [r5, r2]
 8009932:	9a03      	ldr	r2, [sp, #12]
 8009934:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009938:	3304      	adds	r3, #4
 800993a:	f1b9 0f00 	cmp.w	r9, #0
 800993e:	d020      	beq.n	8009982 <__multiply+0x142>
 8009940:	6829      	ldr	r1, [r5, #0]
 8009942:	f104 0c14 	add.w	ip, r4, #20
 8009946:	46ae      	mov	lr, r5
 8009948:	f04f 0a00 	mov.w	sl, #0
 800994c:	f8bc b000 	ldrh.w	fp, [ip]
 8009950:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009954:	fb09 220b 	mla	r2, r9, fp, r2
 8009958:	4492      	add	sl, r2
 800995a:	b289      	uxth	r1, r1
 800995c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009960:	f84e 1b04 	str.w	r1, [lr], #4
 8009964:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009968:	f8be 1000 	ldrh.w	r1, [lr]
 800996c:	0c12      	lsrs	r2, r2, #16
 800996e:	fb09 1102 	mla	r1, r9, r2, r1
 8009972:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009976:	4567      	cmp	r7, ip
 8009978:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800997c:	d8e6      	bhi.n	800994c <__multiply+0x10c>
 800997e:	9a01      	ldr	r2, [sp, #4]
 8009980:	50a9      	str	r1, [r5, r2]
 8009982:	3504      	adds	r5, #4
 8009984:	e79a      	b.n	80098bc <__multiply+0x7c>
 8009986:	3e01      	subs	r6, #1
 8009988:	e79c      	b.n	80098c4 <__multiply+0x84>
 800998a:	bf00      	nop
 800998c:	0800aa00 	.word	0x0800aa00
 8009990:	0800aa11 	.word	0x0800aa11

08009994 <__pow5mult>:
 8009994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009998:	4615      	mov	r5, r2
 800999a:	f012 0203 	ands.w	r2, r2, #3
 800999e:	4606      	mov	r6, r0
 80099a0:	460f      	mov	r7, r1
 80099a2:	d007      	beq.n	80099b4 <__pow5mult+0x20>
 80099a4:	4c25      	ldr	r4, [pc, #148]	; (8009a3c <__pow5mult+0xa8>)
 80099a6:	3a01      	subs	r2, #1
 80099a8:	2300      	movs	r3, #0
 80099aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099ae:	f7ff fe9b 	bl	80096e8 <__multadd>
 80099b2:	4607      	mov	r7, r0
 80099b4:	10ad      	asrs	r5, r5, #2
 80099b6:	d03d      	beq.n	8009a34 <__pow5mult+0xa0>
 80099b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099ba:	b97c      	cbnz	r4, 80099dc <__pow5mult+0x48>
 80099bc:	2010      	movs	r0, #16
 80099be:	f7ff fe1d 	bl	80095fc <malloc>
 80099c2:	4602      	mov	r2, r0
 80099c4:	6270      	str	r0, [r6, #36]	; 0x24
 80099c6:	b928      	cbnz	r0, 80099d4 <__pow5mult+0x40>
 80099c8:	4b1d      	ldr	r3, [pc, #116]	; (8009a40 <__pow5mult+0xac>)
 80099ca:	481e      	ldr	r0, [pc, #120]	; (8009a44 <__pow5mult+0xb0>)
 80099cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099d0:	f000 fc8a 	bl	800a2e8 <__assert_func>
 80099d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099d8:	6004      	str	r4, [r0, #0]
 80099da:	60c4      	str	r4, [r0, #12]
 80099dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099e4:	b94c      	cbnz	r4, 80099fa <__pow5mult+0x66>
 80099e6:	f240 2171 	movw	r1, #625	; 0x271
 80099ea:	4630      	mov	r0, r6
 80099ec:	f7ff ff12 	bl	8009814 <__i2b>
 80099f0:	2300      	movs	r3, #0
 80099f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80099f6:	4604      	mov	r4, r0
 80099f8:	6003      	str	r3, [r0, #0]
 80099fa:	f04f 0900 	mov.w	r9, #0
 80099fe:	07eb      	lsls	r3, r5, #31
 8009a00:	d50a      	bpl.n	8009a18 <__pow5mult+0x84>
 8009a02:	4639      	mov	r1, r7
 8009a04:	4622      	mov	r2, r4
 8009a06:	4630      	mov	r0, r6
 8009a08:	f7ff ff1a 	bl	8009840 <__multiply>
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	4680      	mov	r8, r0
 8009a10:	4630      	mov	r0, r6
 8009a12:	f7ff fe47 	bl	80096a4 <_Bfree>
 8009a16:	4647      	mov	r7, r8
 8009a18:	106d      	asrs	r5, r5, #1
 8009a1a:	d00b      	beq.n	8009a34 <__pow5mult+0xa0>
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	b938      	cbnz	r0, 8009a30 <__pow5mult+0x9c>
 8009a20:	4622      	mov	r2, r4
 8009a22:	4621      	mov	r1, r4
 8009a24:	4630      	mov	r0, r6
 8009a26:	f7ff ff0b 	bl	8009840 <__multiply>
 8009a2a:	6020      	str	r0, [r4, #0]
 8009a2c:	f8c0 9000 	str.w	r9, [r0]
 8009a30:	4604      	mov	r4, r0
 8009a32:	e7e4      	b.n	80099fe <__pow5mult+0x6a>
 8009a34:	4638      	mov	r0, r7
 8009a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a3a:	bf00      	nop
 8009a3c:	0800ab60 	.word	0x0800ab60
 8009a40:	0800a98e 	.word	0x0800a98e
 8009a44:	0800aa11 	.word	0x0800aa11

08009a48 <__lshift>:
 8009a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	6849      	ldr	r1, [r1, #4]
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a56:	68a3      	ldr	r3, [r4, #8]
 8009a58:	4607      	mov	r7, r0
 8009a5a:	4691      	mov	r9, r2
 8009a5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a60:	f108 0601 	add.w	r6, r8, #1
 8009a64:	42b3      	cmp	r3, r6
 8009a66:	db0b      	blt.n	8009a80 <__lshift+0x38>
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f7ff fddb 	bl	8009624 <_Balloc>
 8009a6e:	4605      	mov	r5, r0
 8009a70:	b948      	cbnz	r0, 8009a86 <__lshift+0x3e>
 8009a72:	4602      	mov	r2, r0
 8009a74:	4b2a      	ldr	r3, [pc, #168]	; (8009b20 <__lshift+0xd8>)
 8009a76:	482b      	ldr	r0, [pc, #172]	; (8009b24 <__lshift+0xdc>)
 8009a78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a7c:	f000 fc34 	bl	800a2e8 <__assert_func>
 8009a80:	3101      	adds	r1, #1
 8009a82:	005b      	lsls	r3, r3, #1
 8009a84:	e7ee      	b.n	8009a64 <__lshift+0x1c>
 8009a86:	2300      	movs	r3, #0
 8009a88:	f100 0114 	add.w	r1, r0, #20
 8009a8c:	f100 0210 	add.w	r2, r0, #16
 8009a90:	4618      	mov	r0, r3
 8009a92:	4553      	cmp	r3, sl
 8009a94:	db37      	blt.n	8009b06 <__lshift+0xbe>
 8009a96:	6920      	ldr	r0, [r4, #16]
 8009a98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a9c:	f104 0314 	add.w	r3, r4, #20
 8009aa0:	f019 091f 	ands.w	r9, r9, #31
 8009aa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009aa8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009aac:	d02f      	beq.n	8009b0e <__lshift+0xc6>
 8009aae:	f1c9 0e20 	rsb	lr, r9, #32
 8009ab2:	468a      	mov	sl, r1
 8009ab4:	f04f 0c00 	mov.w	ip, #0
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	fa02 f209 	lsl.w	r2, r2, r9
 8009abe:	ea42 020c 	orr.w	r2, r2, ip
 8009ac2:	f84a 2b04 	str.w	r2, [sl], #4
 8009ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aca:	4298      	cmp	r0, r3
 8009acc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ad0:	d8f2      	bhi.n	8009ab8 <__lshift+0x70>
 8009ad2:	1b03      	subs	r3, r0, r4
 8009ad4:	3b15      	subs	r3, #21
 8009ad6:	f023 0303 	bic.w	r3, r3, #3
 8009ada:	3304      	adds	r3, #4
 8009adc:	f104 0215 	add.w	r2, r4, #21
 8009ae0:	4290      	cmp	r0, r2
 8009ae2:	bf38      	it	cc
 8009ae4:	2304      	movcc	r3, #4
 8009ae6:	f841 c003 	str.w	ip, [r1, r3]
 8009aea:	f1bc 0f00 	cmp.w	ip, #0
 8009aee:	d001      	beq.n	8009af4 <__lshift+0xac>
 8009af0:	f108 0602 	add.w	r6, r8, #2
 8009af4:	3e01      	subs	r6, #1
 8009af6:	4638      	mov	r0, r7
 8009af8:	612e      	str	r6, [r5, #16]
 8009afa:	4621      	mov	r1, r4
 8009afc:	f7ff fdd2 	bl	80096a4 <_Bfree>
 8009b00:	4628      	mov	r0, r5
 8009b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b06:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	e7c1      	b.n	8009a92 <__lshift+0x4a>
 8009b0e:	3904      	subs	r1, #4
 8009b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b14:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b18:	4298      	cmp	r0, r3
 8009b1a:	d8f9      	bhi.n	8009b10 <__lshift+0xc8>
 8009b1c:	e7ea      	b.n	8009af4 <__lshift+0xac>
 8009b1e:	bf00      	nop
 8009b20:	0800aa00 	.word	0x0800aa00
 8009b24:	0800aa11 	.word	0x0800aa11

08009b28 <__mcmp>:
 8009b28:	b530      	push	{r4, r5, lr}
 8009b2a:	6902      	ldr	r2, [r0, #16]
 8009b2c:	690c      	ldr	r4, [r1, #16]
 8009b2e:	1b12      	subs	r2, r2, r4
 8009b30:	d10e      	bne.n	8009b50 <__mcmp+0x28>
 8009b32:	f100 0314 	add.w	r3, r0, #20
 8009b36:	3114      	adds	r1, #20
 8009b38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b48:	42a5      	cmp	r5, r4
 8009b4a:	d003      	beq.n	8009b54 <__mcmp+0x2c>
 8009b4c:	d305      	bcc.n	8009b5a <__mcmp+0x32>
 8009b4e:	2201      	movs	r2, #1
 8009b50:	4610      	mov	r0, r2
 8009b52:	bd30      	pop	{r4, r5, pc}
 8009b54:	4283      	cmp	r3, r0
 8009b56:	d3f3      	bcc.n	8009b40 <__mcmp+0x18>
 8009b58:	e7fa      	b.n	8009b50 <__mcmp+0x28>
 8009b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b5e:	e7f7      	b.n	8009b50 <__mcmp+0x28>

08009b60 <__mdiff>:
 8009b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	460c      	mov	r4, r1
 8009b66:	4606      	mov	r6, r0
 8009b68:	4611      	mov	r1, r2
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	4690      	mov	r8, r2
 8009b6e:	f7ff ffdb 	bl	8009b28 <__mcmp>
 8009b72:	1e05      	subs	r5, r0, #0
 8009b74:	d110      	bne.n	8009b98 <__mdiff+0x38>
 8009b76:	4629      	mov	r1, r5
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f7ff fd53 	bl	8009624 <_Balloc>
 8009b7e:	b930      	cbnz	r0, 8009b8e <__mdiff+0x2e>
 8009b80:	4b3a      	ldr	r3, [pc, #232]	; (8009c6c <__mdiff+0x10c>)
 8009b82:	4602      	mov	r2, r0
 8009b84:	f240 2132 	movw	r1, #562	; 0x232
 8009b88:	4839      	ldr	r0, [pc, #228]	; (8009c70 <__mdiff+0x110>)
 8009b8a:	f000 fbad 	bl	800a2e8 <__assert_func>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b98:	bfa4      	itt	ge
 8009b9a:	4643      	movge	r3, r8
 8009b9c:	46a0      	movge	r8, r4
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ba4:	bfa6      	itte	ge
 8009ba6:	461c      	movge	r4, r3
 8009ba8:	2500      	movge	r5, #0
 8009baa:	2501      	movlt	r5, #1
 8009bac:	f7ff fd3a 	bl	8009624 <_Balloc>
 8009bb0:	b920      	cbnz	r0, 8009bbc <__mdiff+0x5c>
 8009bb2:	4b2e      	ldr	r3, [pc, #184]	; (8009c6c <__mdiff+0x10c>)
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bba:	e7e5      	b.n	8009b88 <__mdiff+0x28>
 8009bbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bc0:	6926      	ldr	r6, [r4, #16]
 8009bc2:	60c5      	str	r5, [r0, #12]
 8009bc4:	f104 0914 	add.w	r9, r4, #20
 8009bc8:	f108 0514 	add.w	r5, r8, #20
 8009bcc:	f100 0e14 	add.w	lr, r0, #20
 8009bd0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009bd4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009bd8:	f108 0210 	add.w	r2, r8, #16
 8009bdc:	46f2      	mov	sl, lr
 8009bde:	2100      	movs	r1, #0
 8009be0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009be4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009be8:	fa1f f883 	uxth.w	r8, r3
 8009bec:	fa11 f18b 	uxtah	r1, r1, fp
 8009bf0:	0c1b      	lsrs	r3, r3, #16
 8009bf2:	eba1 0808 	sub.w	r8, r1, r8
 8009bf6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bfa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009bfe:	fa1f f888 	uxth.w	r8, r8
 8009c02:	1419      	asrs	r1, r3, #16
 8009c04:	454e      	cmp	r6, r9
 8009c06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c0a:	f84a 3b04 	str.w	r3, [sl], #4
 8009c0e:	d8e7      	bhi.n	8009be0 <__mdiff+0x80>
 8009c10:	1b33      	subs	r3, r6, r4
 8009c12:	3b15      	subs	r3, #21
 8009c14:	f023 0303 	bic.w	r3, r3, #3
 8009c18:	3304      	adds	r3, #4
 8009c1a:	3415      	adds	r4, #21
 8009c1c:	42a6      	cmp	r6, r4
 8009c1e:	bf38      	it	cc
 8009c20:	2304      	movcc	r3, #4
 8009c22:	441d      	add	r5, r3
 8009c24:	4473      	add	r3, lr
 8009c26:	469e      	mov	lr, r3
 8009c28:	462e      	mov	r6, r5
 8009c2a:	4566      	cmp	r6, ip
 8009c2c:	d30e      	bcc.n	8009c4c <__mdiff+0xec>
 8009c2e:	f10c 0203 	add.w	r2, ip, #3
 8009c32:	1b52      	subs	r2, r2, r5
 8009c34:	f022 0203 	bic.w	r2, r2, #3
 8009c38:	3d03      	subs	r5, #3
 8009c3a:	45ac      	cmp	ip, r5
 8009c3c:	bf38      	it	cc
 8009c3e:	2200      	movcc	r2, #0
 8009c40:	441a      	add	r2, r3
 8009c42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c46:	b17b      	cbz	r3, 8009c68 <__mdiff+0x108>
 8009c48:	6107      	str	r7, [r0, #16]
 8009c4a:	e7a3      	b.n	8009b94 <__mdiff+0x34>
 8009c4c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c50:	fa11 f288 	uxtah	r2, r1, r8
 8009c54:	1414      	asrs	r4, r2, #16
 8009c56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c5a:	b292      	uxth	r2, r2
 8009c5c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c60:	f84e 2b04 	str.w	r2, [lr], #4
 8009c64:	1421      	asrs	r1, r4, #16
 8009c66:	e7e0      	b.n	8009c2a <__mdiff+0xca>
 8009c68:	3f01      	subs	r7, #1
 8009c6a:	e7ea      	b.n	8009c42 <__mdiff+0xe2>
 8009c6c:	0800aa00 	.word	0x0800aa00
 8009c70:	0800aa11 	.word	0x0800aa11

08009c74 <__d2b>:
 8009c74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c78:	4689      	mov	r9, r1
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	ec57 6b10 	vmov	r6, r7, d0
 8009c80:	4690      	mov	r8, r2
 8009c82:	f7ff fccf 	bl	8009624 <_Balloc>
 8009c86:	4604      	mov	r4, r0
 8009c88:	b930      	cbnz	r0, 8009c98 <__d2b+0x24>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	4b25      	ldr	r3, [pc, #148]	; (8009d24 <__d2b+0xb0>)
 8009c8e:	4826      	ldr	r0, [pc, #152]	; (8009d28 <__d2b+0xb4>)
 8009c90:	f240 310a 	movw	r1, #778	; 0x30a
 8009c94:	f000 fb28 	bl	800a2e8 <__assert_func>
 8009c98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ca0:	bb35      	cbnz	r5, 8009cf0 <__d2b+0x7c>
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	9301      	str	r3, [sp, #4]
 8009ca6:	d028      	beq.n	8009cfa <__d2b+0x86>
 8009ca8:	4668      	mov	r0, sp
 8009caa:	9600      	str	r6, [sp, #0]
 8009cac:	f7ff fd82 	bl	80097b4 <__lo0bits>
 8009cb0:	9900      	ldr	r1, [sp, #0]
 8009cb2:	b300      	cbz	r0, 8009cf6 <__d2b+0x82>
 8009cb4:	9a01      	ldr	r2, [sp, #4]
 8009cb6:	f1c0 0320 	rsb	r3, r0, #32
 8009cba:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbe:	430b      	orrs	r3, r1
 8009cc0:	40c2      	lsrs	r2, r0
 8009cc2:	6163      	str	r3, [r4, #20]
 8009cc4:	9201      	str	r2, [sp, #4]
 8009cc6:	9b01      	ldr	r3, [sp, #4]
 8009cc8:	61a3      	str	r3, [r4, #24]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	bf14      	ite	ne
 8009cce:	2202      	movne	r2, #2
 8009cd0:	2201      	moveq	r2, #1
 8009cd2:	6122      	str	r2, [r4, #16]
 8009cd4:	b1d5      	cbz	r5, 8009d0c <__d2b+0x98>
 8009cd6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009cda:	4405      	add	r5, r0
 8009cdc:	f8c9 5000 	str.w	r5, [r9]
 8009ce0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ce4:	f8c8 0000 	str.w	r0, [r8]
 8009ce8:	4620      	mov	r0, r4
 8009cea:	b003      	add	sp, #12
 8009cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cf4:	e7d5      	b.n	8009ca2 <__d2b+0x2e>
 8009cf6:	6161      	str	r1, [r4, #20]
 8009cf8:	e7e5      	b.n	8009cc6 <__d2b+0x52>
 8009cfa:	a801      	add	r0, sp, #4
 8009cfc:	f7ff fd5a 	bl	80097b4 <__lo0bits>
 8009d00:	9b01      	ldr	r3, [sp, #4]
 8009d02:	6163      	str	r3, [r4, #20]
 8009d04:	2201      	movs	r2, #1
 8009d06:	6122      	str	r2, [r4, #16]
 8009d08:	3020      	adds	r0, #32
 8009d0a:	e7e3      	b.n	8009cd4 <__d2b+0x60>
 8009d0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d14:	f8c9 0000 	str.w	r0, [r9]
 8009d18:	6918      	ldr	r0, [r3, #16]
 8009d1a:	f7ff fd2b 	bl	8009774 <__hi0bits>
 8009d1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d22:	e7df      	b.n	8009ce4 <__d2b+0x70>
 8009d24:	0800aa00 	.word	0x0800aa00
 8009d28:	0800aa11 	.word	0x0800aa11

08009d2c <_calloc_r>:
 8009d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d2e:	fba1 2402 	umull	r2, r4, r1, r2
 8009d32:	b94c      	cbnz	r4, 8009d48 <_calloc_r+0x1c>
 8009d34:	4611      	mov	r1, r2
 8009d36:	9201      	str	r2, [sp, #4]
 8009d38:	f7fd fd4e 	bl	80077d8 <_malloc_r>
 8009d3c:	9a01      	ldr	r2, [sp, #4]
 8009d3e:	4605      	mov	r5, r0
 8009d40:	b930      	cbnz	r0, 8009d50 <_calloc_r+0x24>
 8009d42:	4628      	mov	r0, r5
 8009d44:	b003      	add	sp, #12
 8009d46:	bd30      	pop	{r4, r5, pc}
 8009d48:	220c      	movs	r2, #12
 8009d4a:	6002      	str	r2, [r0, #0]
 8009d4c:	2500      	movs	r5, #0
 8009d4e:	e7f8      	b.n	8009d42 <_calloc_r+0x16>
 8009d50:	4621      	mov	r1, r4
 8009d52:	f7fd fccc 	bl	80076ee <memset>
 8009d56:	e7f4      	b.n	8009d42 <_calloc_r+0x16>

08009d58 <__ssputs_r>:
 8009d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d5c:	688e      	ldr	r6, [r1, #8]
 8009d5e:	429e      	cmp	r6, r3
 8009d60:	4682      	mov	sl, r0
 8009d62:	460c      	mov	r4, r1
 8009d64:	4690      	mov	r8, r2
 8009d66:	461f      	mov	r7, r3
 8009d68:	d838      	bhi.n	8009ddc <__ssputs_r+0x84>
 8009d6a:	898a      	ldrh	r2, [r1, #12]
 8009d6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d70:	d032      	beq.n	8009dd8 <__ssputs_r+0x80>
 8009d72:	6825      	ldr	r5, [r4, #0]
 8009d74:	6909      	ldr	r1, [r1, #16]
 8009d76:	eba5 0901 	sub.w	r9, r5, r1
 8009d7a:	6965      	ldr	r5, [r4, #20]
 8009d7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d84:	3301      	adds	r3, #1
 8009d86:	444b      	add	r3, r9
 8009d88:	106d      	asrs	r5, r5, #1
 8009d8a:	429d      	cmp	r5, r3
 8009d8c:	bf38      	it	cc
 8009d8e:	461d      	movcc	r5, r3
 8009d90:	0553      	lsls	r3, r2, #21
 8009d92:	d531      	bpl.n	8009df8 <__ssputs_r+0xa0>
 8009d94:	4629      	mov	r1, r5
 8009d96:	f7fd fd1f 	bl	80077d8 <_malloc_r>
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	b950      	cbnz	r0, 8009db4 <__ssputs_r+0x5c>
 8009d9e:	230c      	movs	r3, #12
 8009da0:	f8ca 3000 	str.w	r3, [sl]
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db4:	6921      	ldr	r1, [r4, #16]
 8009db6:	464a      	mov	r2, r9
 8009db8:	f7fd fc8b 	bl	80076d2 <memcpy>
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	6126      	str	r6, [r4, #16]
 8009dca:	6165      	str	r5, [r4, #20]
 8009dcc:	444e      	add	r6, r9
 8009dce:	eba5 0509 	sub.w	r5, r5, r9
 8009dd2:	6026      	str	r6, [r4, #0]
 8009dd4:	60a5      	str	r5, [r4, #8]
 8009dd6:	463e      	mov	r6, r7
 8009dd8:	42be      	cmp	r6, r7
 8009dda:	d900      	bls.n	8009dde <__ssputs_r+0x86>
 8009ddc:	463e      	mov	r6, r7
 8009dde:	6820      	ldr	r0, [r4, #0]
 8009de0:	4632      	mov	r2, r6
 8009de2:	4641      	mov	r1, r8
 8009de4:	f000 fae4 	bl	800a3b0 <memmove>
 8009de8:	68a3      	ldr	r3, [r4, #8]
 8009dea:	1b9b      	subs	r3, r3, r6
 8009dec:	60a3      	str	r3, [r4, #8]
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	4433      	add	r3, r6
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	2000      	movs	r0, #0
 8009df6:	e7db      	b.n	8009db0 <__ssputs_r+0x58>
 8009df8:	462a      	mov	r2, r5
 8009dfa:	f000 faf3 	bl	800a3e4 <_realloc_r>
 8009dfe:	4606      	mov	r6, r0
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d1e1      	bne.n	8009dc8 <__ssputs_r+0x70>
 8009e04:	6921      	ldr	r1, [r4, #16]
 8009e06:	4650      	mov	r0, sl
 8009e08:	f7fd fc7a 	bl	8007700 <_free_r>
 8009e0c:	e7c7      	b.n	8009d9e <__ssputs_r+0x46>
	...

08009e10 <_svfiprintf_r>:
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	4698      	mov	r8, r3
 8009e16:	898b      	ldrh	r3, [r1, #12]
 8009e18:	061b      	lsls	r3, r3, #24
 8009e1a:	b09d      	sub	sp, #116	; 0x74
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	460d      	mov	r5, r1
 8009e20:	4614      	mov	r4, r2
 8009e22:	d50e      	bpl.n	8009e42 <_svfiprintf_r+0x32>
 8009e24:	690b      	ldr	r3, [r1, #16]
 8009e26:	b963      	cbnz	r3, 8009e42 <_svfiprintf_r+0x32>
 8009e28:	2140      	movs	r1, #64	; 0x40
 8009e2a:	f7fd fcd5 	bl	80077d8 <_malloc_r>
 8009e2e:	6028      	str	r0, [r5, #0]
 8009e30:	6128      	str	r0, [r5, #16]
 8009e32:	b920      	cbnz	r0, 8009e3e <_svfiprintf_r+0x2e>
 8009e34:	230c      	movs	r3, #12
 8009e36:	603b      	str	r3, [r7, #0]
 8009e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e3c:	e0d1      	b.n	8009fe2 <_svfiprintf_r+0x1d2>
 8009e3e:	2340      	movs	r3, #64	; 0x40
 8009e40:	616b      	str	r3, [r5, #20]
 8009e42:	2300      	movs	r3, #0
 8009e44:	9309      	str	r3, [sp, #36]	; 0x24
 8009e46:	2320      	movs	r3, #32
 8009e48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e50:	2330      	movs	r3, #48	; 0x30
 8009e52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ffc <_svfiprintf_r+0x1ec>
 8009e56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e5a:	f04f 0901 	mov.w	r9, #1
 8009e5e:	4623      	mov	r3, r4
 8009e60:	469a      	mov	sl, r3
 8009e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e66:	b10a      	cbz	r2, 8009e6c <_svfiprintf_r+0x5c>
 8009e68:	2a25      	cmp	r2, #37	; 0x25
 8009e6a:	d1f9      	bne.n	8009e60 <_svfiprintf_r+0x50>
 8009e6c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e70:	d00b      	beq.n	8009e8a <_svfiprintf_r+0x7a>
 8009e72:	465b      	mov	r3, fp
 8009e74:	4622      	mov	r2, r4
 8009e76:	4629      	mov	r1, r5
 8009e78:	4638      	mov	r0, r7
 8009e7a:	f7ff ff6d 	bl	8009d58 <__ssputs_r>
 8009e7e:	3001      	adds	r0, #1
 8009e80:	f000 80aa 	beq.w	8009fd8 <_svfiprintf_r+0x1c8>
 8009e84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e86:	445a      	add	r2, fp
 8009e88:	9209      	str	r2, [sp, #36]	; 0x24
 8009e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f000 80a2 	beq.w	8009fd8 <_svfiprintf_r+0x1c8>
 8009e94:	2300      	movs	r3, #0
 8009e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e9e:	f10a 0a01 	add.w	sl, sl, #1
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	9307      	str	r3, [sp, #28]
 8009ea6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eaa:	931a      	str	r3, [sp, #104]	; 0x68
 8009eac:	4654      	mov	r4, sl
 8009eae:	2205      	movs	r2, #5
 8009eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eb4:	4851      	ldr	r0, [pc, #324]	; (8009ffc <_svfiprintf_r+0x1ec>)
 8009eb6:	f7f6 f9ab 	bl	8000210 <memchr>
 8009eba:	9a04      	ldr	r2, [sp, #16]
 8009ebc:	b9d8      	cbnz	r0, 8009ef6 <_svfiprintf_r+0xe6>
 8009ebe:	06d0      	lsls	r0, r2, #27
 8009ec0:	bf44      	itt	mi
 8009ec2:	2320      	movmi	r3, #32
 8009ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ec8:	0711      	lsls	r1, r2, #28
 8009eca:	bf44      	itt	mi
 8009ecc:	232b      	movmi	r3, #43	; 0x2b
 8009ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed8:	d015      	beq.n	8009f06 <_svfiprintf_r+0xf6>
 8009eda:	9a07      	ldr	r2, [sp, #28]
 8009edc:	4654      	mov	r4, sl
 8009ede:	2000      	movs	r0, #0
 8009ee0:	f04f 0c0a 	mov.w	ip, #10
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eea:	3b30      	subs	r3, #48	; 0x30
 8009eec:	2b09      	cmp	r3, #9
 8009eee:	d94e      	bls.n	8009f8e <_svfiprintf_r+0x17e>
 8009ef0:	b1b0      	cbz	r0, 8009f20 <_svfiprintf_r+0x110>
 8009ef2:	9207      	str	r2, [sp, #28]
 8009ef4:	e014      	b.n	8009f20 <_svfiprintf_r+0x110>
 8009ef6:	eba0 0308 	sub.w	r3, r0, r8
 8009efa:	fa09 f303 	lsl.w	r3, r9, r3
 8009efe:	4313      	orrs	r3, r2
 8009f00:	9304      	str	r3, [sp, #16]
 8009f02:	46a2      	mov	sl, r4
 8009f04:	e7d2      	b.n	8009eac <_svfiprintf_r+0x9c>
 8009f06:	9b03      	ldr	r3, [sp, #12]
 8009f08:	1d19      	adds	r1, r3, #4
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	9103      	str	r1, [sp, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	bfbb      	ittet	lt
 8009f12:	425b      	neglt	r3, r3
 8009f14:	f042 0202 	orrlt.w	r2, r2, #2
 8009f18:	9307      	strge	r3, [sp, #28]
 8009f1a:	9307      	strlt	r3, [sp, #28]
 8009f1c:	bfb8      	it	lt
 8009f1e:	9204      	strlt	r2, [sp, #16]
 8009f20:	7823      	ldrb	r3, [r4, #0]
 8009f22:	2b2e      	cmp	r3, #46	; 0x2e
 8009f24:	d10c      	bne.n	8009f40 <_svfiprintf_r+0x130>
 8009f26:	7863      	ldrb	r3, [r4, #1]
 8009f28:	2b2a      	cmp	r3, #42	; 0x2a
 8009f2a:	d135      	bne.n	8009f98 <_svfiprintf_r+0x188>
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	1d1a      	adds	r2, r3, #4
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	9203      	str	r2, [sp, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	bfb8      	it	lt
 8009f38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f3c:	3402      	adds	r4, #2
 8009f3e:	9305      	str	r3, [sp, #20]
 8009f40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a00c <_svfiprintf_r+0x1fc>
 8009f44:	7821      	ldrb	r1, [r4, #0]
 8009f46:	2203      	movs	r2, #3
 8009f48:	4650      	mov	r0, sl
 8009f4a:	f7f6 f961 	bl	8000210 <memchr>
 8009f4e:	b140      	cbz	r0, 8009f62 <_svfiprintf_r+0x152>
 8009f50:	2340      	movs	r3, #64	; 0x40
 8009f52:	eba0 000a 	sub.w	r0, r0, sl
 8009f56:	fa03 f000 	lsl.w	r0, r3, r0
 8009f5a:	9b04      	ldr	r3, [sp, #16]
 8009f5c:	4303      	orrs	r3, r0
 8009f5e:	3401      	adds	r4, #1
 8009f60:	9304      	str	r3, [sp, #16]
 8009f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f66:	4826      	ldr	r0, [pc, #152]	; (800a000 <_svfiprintf_r+0x1f0>)
 8009f68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f6c:	2206      	movs	r2, #6
 8009f6e:	f7f6 f94f 	bl	8000210 <memchr>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d038      	beq.n	8009fe8 <_svfiprintf_r+0x1d8>
 8009f76:	4b23      	ldr	r3, [pc, #140]	; (800a004 <_svfiprintf_r+0x1f4>)
 8009f78:	bb1b      	cbnz	r3, 8009fc2 <_svfiprintf_r+0x1b2>
 8009f7a:	9b03      	ldr	r3, [sp, #12]
 8009f7c:	3307      	adds	r3, #7
 8009f7e:	f023 0307 	bic.w	r3, r3, #7
 8009f82:	3308      	adds	r3, #8
 8009f84:	9303      	str	r3, [sp, #12]
 8009f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f88:	4433      	add	r3, r6
 8009f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f8c:	e767      	b.n	8009e5e <_svfiprintf_r+0x4e>
 8009f8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f92:	460c      	mov	r4, r1
 8009f94:	2001      	movs	r0, #1
 8009f96:	e7a5      	b.n	8009ee4 <_svfiprintf_r+0xd4>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	3401      	adds	r4, #1
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	f04f 0c0a 	mov.w	ip, #10
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009faa:	3a30      	subs	r2, #48	; 0x30
 8009fac:	2a09      	cmp	r2, #9
 8009fae:	d903      	bls.n	8009fb8 <_svfiprintf_r+0x1a8>
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d0c5      	beq.n	8009f40 <_svfiprintf_r+0x130>
 8009fb4:	9105      	str	r1, [sp, #20]
 8009fb6:	e7c3      	b.n	8009f40 <_svfiprintf_r+0x130>
 8009fb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e7f0      	b.n	8009fa4 <_svfiprintf_r+0x194>
 8009fc2:	ab03      	add	r3, sp, #12
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	462a      	mov	r2, r5
 8009fc8:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <_svfiprintf_r+0x1f8>)
 8009fca:	a904      	add	r1, sp, #16
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f7fd fd17 	bl	8007a00 <_printf_float>
 8009fd2:	1c42      	adds	r2, r0, #1
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	d1d6      	bne.n	8009f86 <_svfiprintf_r+0x176>
 8009fd8:	89ab      	ldrh	r3, [r5, #12]
 8009fda:	065b      	lsls	r3, r3, #25
 8009fdc:	f53f af2c 	bmi.w	8009e38 <_svfiprintf_r+0x28>
 8009fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fe2:	b01d      	add	sp, #116	; 0x74
 8009fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe8:	ab03      	add	r3, sp, #12
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	462a      	mov	r2, r5
 8009fee:	4b06      	ldr	r3, [pc, #24]	; (800a008 <_svfiprintf_r+0x1f8>)
 8009ff0:	a904      	add	r1, sp, #16
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	f7fd ffa8 	bl	8007f48 <_printf_i>
 8009ff8:	e7eb      	b.n	8009fd2 <_svfiprintf_r+0x1c2>
 8009ffa:	bf00      	nop
 8009ffc:	0800ab6c 	.word	0x0800ab6c
 800a000:	0800ab76 	.word	0x0800ab76
 800a004:	08007a01 	.word	0x08007a01
 800a008:	08009d59 	.word	0x08009d59
 800a00c:	0800ab72 	.word	0x0800ab72

0800a010 <__sfputc_r>:
 800a010:	6893      	ldr	r3, [r2, #8]
 800a012:	3b01      	subs	r3, #1
 800a014:	2b00      	cmp	r3, #0
 800a016:	b410      	push	{r4}
 800a018:	6093      	str	r3, [r2, #8]
 800a01a:	da08      	bge.n	800a02e <__sfputc_r+0x1e>
 800a01c:	6994      	ldr	r4, [r2, #24]
 800a01e:	42a3      	cmp	r3, r4
 800a020:	db01      	blt.n	800a026 <__sfputc_r+0x16>
 800a022:	290a      	cmp	r1, #10
 800a024:	d103      	bne.n	800a02e <__sfputc_r+0x1e>
 800a026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a02a:	f7fe bb0d 	b.w	8008648 <__swbuf_r>
 800a02e:	6813      	ldr	r3, [r2, #0]
 800a030:	1c58      	adds	r0, r3, #1
 800a032:	6010      	str	r0, [r2, #0]
 800a034:	7019      	strb	r1, [r3, #0]
 800a036:	4608      	mov	r0, r1
 800a038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <__sfputs_r>:
 800a03e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a040:	4606      	mov	r6, r0
 800a042:	460f      	mov	r7, r1
 800a044:	4614      	mov	r4, r2
 800a046:	18d5      	adds	r5, r2, r3
 800a048:	42ac      	cmp	r4, r5
 800a04a:	d101      	bne.n	800a050 <__sfputs_r+0x12>
 800a04c:	2000      	movs	r0, #0
 800a04e:	e007      	b.n	800a060 <__sfputs_r+0x22>
 800a050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a054:	463a      	mov	r2, r7
 800a056:	4630      	mov	r0, r6
 800a058:	f7ff ffda 	bl	800a010 <__sfputc_r>
 800a05c:	1c43      	adds	r3, r0, #1
 800a05e:	d1f3      	bne.n	800a048 <__sfputs_r+0xa>
 800a060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a064 <_vfiprintf_r>:
 800a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a068:	460d      	mov	r5, r1
 800a06a:	b09d      	sub	sp, #116	; 0x74
 800a06c:	4614      	mov	r4, r2
 800a06e:	4698      	mov	r8, r3
 800a070:	4606      	mov	r6, r0
 800a072:	b118      	cbz	r0, 800a07c <_vfiprintf_r+0x18>
 800a074:	6983      	ldr	r3, [r0, #24]
 800a076:	b90b      	cbnz	r3, 800a07c <_vfiprintf_r+0x18>
 800a078:	f7fd fa66 	bl	8007548 <__sinit>
 800a07c:	4b89      	ldr	r3, [pc, #548]	; (800a2a4 <_vfiprintf_r+0x240>)
 800a07e:	429d      	cmp	r5, r3
 800a080:	d11b      	bne.n	800a0ba <_vfiprintf_r+0x56>
 800a082:	6875      	ldr	r5, [r6, #4]
 800a084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a086:	07d9      	lsls	r1, r3, #31
 800a088:	d405      	bmi.n	800a096 <_vfiprintf_r+0x32>
 800a08a:	89ab      	ldrh	r3, [r5, #12]
 800a08c:	059a      	lsls	r2, r3, #22
 800a08e:	d402      	bmi.n	800a096 <_vfiprintf_r+0x32>
 800a090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a092:	f7fd fb1c 	bl	80076ce <__retarget_lock_acquire_recursive>
 800a096:	89ab      	ldrh	r3, [r5, #12]
 800a098:	071b      	lsls	r3, r3, #28
 800a09a:	d501      	bpl.n	800a0a0 <_vfiprintf_r+0x3c>
 800a09c:	692b      	ldr	r3, [r5, #16]
 800a09e:	b9eb      	cbnz	r3, 800a0dc <_vfiprintf_r+0x78>
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f7fe fb34 	bl	8008710 <__swsetup_r>
 800a0a8:	b1c0      	cbz	r0, 800a0dc <_vfiprintf_r+0x78>
 800a0aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0ac:	07dc      	lsls	r4, r3, #31
 800a0ae:	d50e      	bpl.n	800a0ce <_vfiprintf_r+0x6a>
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0b4:	b01d      	add	sp, #116	; 0x74
 800a0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ba:	4b7b      	ldr	r3, [pc, #492]	; (800a2a8 <_vfiprintf_r+0x244>)
 800a0bc:	429d      	cmp	r5, r3
 800a0be:	d101      	bne.n	800a0c4 <_vfiprintf_r+0x60>
 800a0c0:	68b5      	ldr	r5, [r6, #8]
 800a0c2:	e7df      	b.n	800a084 <_vfiprintf_r+0x20>
 800a0c4:	4b79      	ldr	r3, [pc, #484]	; (800a2ac <_vfiprintf_r+0x248>)
 800a0c6:	429d      	cmp	r5, r3
 800a0c8:	bf08      	it	eq
 800a0ca:	68f5      	ldreq	r5, [r6, #12]
 800a0cc:	e7da      	b.n	800a084 <_vfiprintf_r+0x20>
 800a0ce:	89ab      	ldrh	r3, [r5, #12]
 800a0d0:	0598      	lsls	r0, r3, #22
 800a0d2:	d4ed      	bmi.n	800a0b0 <_vfiprintf_r+0x4c>
 800a0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0d6:	f7fd fafb 	bl	80076d0 <__retarget_lock_release_recursive>
 800a0da:	e7e9      	b.n	800a0b0 <_vfiprintf_r+0x4c>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e0:	2320      	movs	r3, #32
 800a0e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0ea:	2330      	movs	r3, #48	; 0x30
 800a0ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a2b0 <_vfiprintf_r+0x24c>
 800a0f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0f4:	f04f 0901 	mov.w	r9, #1
 800a0f8:	4623      	mov	r3, r4
 800a0fa:	469a      	mov	sl, r3
 800a0fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a100:	b10a      	cbz	r2, 800a106 <_vfiprintf_r+0xa2>
 800a102:	2a25      	cmp	r2, #37	; 0x25
 800a104:	d1f9      	bne.n	800a0fa <_vfiprintf_r+0x96>
 800a106:	ebba 0b04 	subs.w	fp, sl, r4
 800a10a:	d00b      	beq.n	800a124 <_vfiprintf_r+0xc0>
 800a10c:	465b      	mov	r3, fp
 800a10e:	4622      	mov	r2, r4
 800a110:	4629      	mov	r1, r5
 800a112:	4630      	mov	r0, r6
 800a114:	f7ff ff93 	bl	800a03e <__sfputs_r>
 800a118:	3001      	adds	r0, #1
 800a11a:	f000 80aa 	beq.w	800a272 <_vfiprintf_r+0x20e>
 800a11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a120:	445a      	add	r2, fp
 800a122:	9209      	str	r2, [sp, #36]	; 0x24
 800a124:	f89a 3000 	ldrb.w	r3, [sl]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 80a2 	beq.w	800a272 <_vfiprintf_r+0x20e>
 800a12e:	2300      	movs	r3, #0
 800a130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a138:	f10a 0a01 	add.w	sl, sl, #1
 800a13c:	9304      	str	r3, [sp, #16]
 800a13e:	9307      	str	r3, [sp, #28]
 800a140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a144:	931a      	str	r3, [sp, #104]	; 0x68
 800a146:	4654      	mov	r4, sl
 800a148:	2205      	movs	r2, #5
 800a14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14e:	4858      	ldr	r0, [pc, #352]	; (800a2b0 <_vfiprintf_r+0x24c>)
 800a150:	f7f6 f85e 	bl	8000210 <memchr>
 800a154:	9a04      	ldr	r2, [sp, #16]
 800a156:	b9d8      	cbnz	r0, 800a190 <_vfiprintf_r+0x12c>
 800a158:	06d1      	lsls	r1, r2, #27
 800a15a:	bf44      	itt	mi
 800a15c:	2320      	movmi	r3, #32
 800a15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a162:	0713      	lsls	r3, r2, #28
 800a164:	bf44      	itt	mi
 800a166:	232b      	movmi	r3, #43	; 0x2b
 800a168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a16c:	f89a 3000 	ldrb.w	r3, [sl]
 800a170:	2b2a      	cmp	r3, #42	; 0x2a
 800a172:	d015      	beq.n	800a1a0 <_vfiprintf_r+0x13c>
 800a174:	9a07      	ldr	r2, [sp, #28]
 800a176:	4654      	mov	r4, sl
 800a178:	2000      	movs	r0, #0
 800a17a:	f04f 0c0a 	mov.w	ip, #10
 800a17e:	4621      	mov	r1, r4
 800a180:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a184:	3b30      	subs	r3, #48	; 0x30
 800a186:	2b09      	cmp	r3, #9
 800a188:	d94e      	bls.n	800a228 <_vfiprintf_r+0x1c4>
 800a18a:	b1b0      	cbz	r0, 800a1ba <_vfiprintf_r+0x156>
 800a18c:	9207      	str	r2, [sp, #28]
 800a18e:	e014      	b.n	800a1ba <_vfiprintf_r+0x156>
 800a190:	eba0 0308 	sub.w	r3, r0, r8
 800a194:	fa09 f303 	lsl.w	r3, r9, r3
 800a198:	4313      	orrs	r3, r2
 800a19a:	9304      	str	r3, [sp, #16]
 800a19c:	46a2      	mov	sl, r4
 800a19e:	e7d2      	b.n	800a146 <_vfiprintf_r+0xe2>
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	1d19      	adds	r1, r3, #4
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	9103      	str	r1, [sp, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bfbb      	ittet	lt
 800a1ac:	425b      	neglt	r3, r3
 800a1ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a1b2:	9307      	strge	r3, [sp, #28]
 800a1b4:	9307      	strlt	r3, [sp, #28]
 800a1b6:	bfb8      	it	lt
 800a1b8:	9204      	strlt	r2, [sp, #16]
 800a1ba:	7823      	ldrb	r3, [r4, #0]
 800a1bc:	2b2e      	cmp	r3, #46	; 0x2e
 800a1be:	d10c      	bne.n	800a1da <_vfiprintf_r+0x176>
 800a1c0:	7863      	ldrb	r3, [r4, #1]
 800a1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c4:	d135      	bne.n	800a232 <_vfiprintf_r+0x1ce>
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	1d1a      	adds	r2, r3, #4
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	9203      	str	r2, [sp, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	bfb8      	it	lt
 800a1d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a1d6:	3402      	adds	r4, #2
 800a1d8:	9305      	str	r3, [sp, #20]
 800a1da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a2c0 <_vfiprintf_r+0x25c>
 800a1de:	7821      	ldrb	r1, [r4, #0]
 800a1e0:	2203      	movs	r2, #3
 800a1e2:	4650      	mov	r0, sl
 800a1e4:	f7f6 f814 	bl	8000210 <memchr>
 800a1e8:	b140      	cbz	r0, 800a1fc <_vfiprintf_r+0x198>
 800a1ea:	2340      	movs	r3, #64	; 0x40
 800a1ec:	eba0 000a 	sub.w	r0, r0, sl
 800a1f0:	fa03 f000 	lsl.w	r0, r3, r0
 800a1f4:	9b04      	ldr	r3, [sp, #16]
 800a1f6:	4303      	orrs	r3, r0
 800a1f8:	3401      	adds	r4, #1
 800a1fa:	9304      	str	r3, [sp, #16]
 800a1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a200:	482c      	ldr	r0, [pc, #176]	; (800a2b4 <_vfiprintf_r+0x250>)
 800a202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a206:	2206      	movs	r2, #6
 800a208:	f7f6 f802 	bl	8000210 <memchr>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d03f      	beq.n	800a290 <_vfiprintf_r+0x22c>
 800a210:	4b29      	ldr	r3, [pc, #164]	; (800a2b8 <_vfiprintf_r+0x254>)
 800a212:	bb1b      	cbnz	r3, 800a25c <_vfiprintf_r+0x1f8>
 800a214:	9b03      	ldr	r3, [sp, #12]
 800a216:	3307      	adds	r3, #7
 800a218:	f023 0307 	bic.w	r3, r3, #7
 800a21c:	3308      	adds	r3, #8
 800a21e:	9303      	str	r3, [sp, #12]
 800a220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a222:	443b      	add	r3, r7
 800a224:	9309      	str	r3, [sp, #36]	; 0x24
 800a226:	e767      	b.n	800a0f8 <_vfiprintf_r+0x94>
 800a228:	fb0c 3202 	mla	r2, ip, r2, r3
 800a22c:	460c      	mov	r4, r1
 800a22e:	2001      	movs	r0, #1
 800a230:	e7a5      	b.n	800a17e <_vfiprintf_r+0x11a>
 800a232:	2300      	movs	r3, #0
 800a234:	3401      	adds	r4, #1
 800a236:	9305      	str	r3, [sp, #20]
 800a238:	4619      	mov	r1, r3
 800a23a:	f04f 0c0a 	mov.w	ip, #10
 800a23e:	4620      	mov	r0, r4
 800a240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a244:	3a30      	subs	r2, #48	; 0x30
 800a246:	2a09      	cmp	r2, #9
 800a248:	d903      	bls.n	800a252 <_vfiprintf_r+0x1ee>
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0c5      	beq.n	800a1da <_vfiprintf_r+0x176>
 800a24e:	9105      	str	r1, [sp, #20]
 800a250:	e7c3      	b.n	800a1da <_vfiprintf_r+0x176>
 800a252:	fb0c 2101 	mla	r1, ip, r1, r2
 800a256:	4604      	mov	r4, r0
 800a258:	2301      	movs	r3, #1
 800a25a:	e7f0      	b.n	800a23e <_vfiprintf_r+0x1da>
 800a25c:	ab03      	add	r3, sp, #12
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	462a      	mov	r2, r5
 800a262:	4b16      	ldr	r3, [pc, #88]	; (800a2bc <_vfiprintf_r+0x258>)
 800a264:	a904      	add	r1, sp, #16
 800a266:	4630      	mov	r0, r6
 800a268:	f7fd fbca 	bl	8007a00 <_printf_float>
 800a26c:	4607      	mov	r7, r0
 800a26e:	1c78      	adds	r0, r7, #1
 800a270:	d1d6      	bne.n	800a220 <_vfiprintf_r+0x1bc>
 800a272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a274:	07d9      	lsls	r1, r3, #31
 800a276:	d405      	bmi.n	800a284 <_vfiprintf_r+0x220>
 800a278:	89ab      	ldrh	r3, [r5, #12]
 800a27a:	059a      	lsls	r2, r3, #22
 800a27c:	d402      	bmi.n	800a284 <_vfiprintf_r+0x220>
 800a27e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a280:	f7fd fa26 	bl	80076d0 <__retarget_lock_release_recursive>
 800a284:	89ab      	ldrh	r3, [r5, #12]
 800a286:	065b      	lsls	r3, r3, #25
 800a288:	f53f af12 	bmi.w	800a0b0 <_vfiprintf_r+0x4c>
 800a28c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a28e:	e711      	b.n	800a0b4 <_vfiprintf_r+0x50>
 800a290:	ab03      	add	r3, sp, #12
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	462a      	mov	r2, r5
 800a296:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <_vfiprintf_r+0x258>)
 800a298:	a904      	add	r1, sp, #16
 800a29a:	4630      	mov	r0, r6
 800a29c:	f7fd fe54 	bl	8007f48 <_printf_i>
 800a2a0:	e7e4      	b.n	800a26c <_vfiprintf_r+0x208>
 800a2a2:	bf00      	nop
 800a2a4:	0800a808 	.word	0x0800a808
 800a2a8:	0800a828 	.word	0x0800a828
 800a2ac:	0800a7e8 	.word	0x0800a7e8
 800a2b0:	0800ab6c 	.word	0x0800ab6c
 800a2b4:	0800ab76 	.word	0x0800ab76
 800a2b8:	08007a01 	.word	0x08007a01
 800a2bc:	0800a03f 	.word	0x0800a03f
 800a2c0:	0800ab72 	.word	0x0800ab72

0800a2c4 <_read_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4d07      	ldr	r5, [pc, #28]	; (800a2e4 <_read_r+0x20>)
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	4608      	mov	r0, r1
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	602a      	str	r2, [r5, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f7f9 fa48 	bl	8003768 <_read>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d102      	bne.n	800a2e2 <_read_r+0x1e>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	b103      	cbz	r3, 800a2e2 <_read_r+0x1e>
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	200008e4 	.word	0x200008e4

0800a2e8 <__assert_func>:
 800a2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ea:	4614      	mov	r4, r2
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	4b09      	ldr	r3, [pc, #36]	; (800a314 <__assert_func+0x2c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	68d8      	ldr	r0, [r3, #12]
 800a2f6:	b14c      	cbz	r4, 800a30c <__assert_func+0x24>
 800a2f8:	4b07      	ldr	r3, [pc, #28]	; (800a318 <__assert_func+0x30>)
 800a2fa:	9100      	str	r1, [sp, #0]
 800a2fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a300:	4906      	ldr	r1, [pc, #24]	; (800a31c <__assert_func+0x34>)
 800a302:	462b      	mov	r3, r5
 800a304:	f000 f80e 	bl	800a324 <fiprintf>
 800a308:	f000 f8a8 	bl	800a45c <abort>
 800a30c:	4b04      	ldr	r3, [pc, #16]	; (800a320 <__assert_func+0x38>)
 800a30e:	461c      	mov	r4, r3
 800a310:	e7f3      	b.n	800a2fa <__assert_func+0x12>
 800a312:	bf00      	nop
 800a314:	20000010 	.word	0x20000010
 800a318:	0800ab7d 	.word	0x0800ab7d
 800a31c:	0800ab8a 	.word	0x0800ab8a
 800a320:	0800abb8 	.word	0x0800abb8

0800a324 <fiprintf>:
 800a324:	b40e      	push	{r1, r2, r3}
 800a326:	b503      	push	{r0, r1, lr}
 800a328:	4601      	mov	r1, r0
 800a32a:	ab03      	add	r3, sp, #12
 800a32c:	4805      	ldr	r0, [pc, #20]	; (800a344 <fiprintf+0x20>)
 800a32e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a332:	6800      	ldr	r0, [r0, #0]
 800a334:	9301      	str	r3, [sp, #4]
 800a336:	f7ff fe95 	bl	800a064 <_vfiprintf_r>
 800a33a:	b002      	add	sp, #8
 800a33c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a340:	b003      	add	sp, #12
 800a342:	4770      	bx	lr
 800a344:	20000010 	.word	0x20000010

0800a348 <_fstat_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	4d07      	ldr	r5, [pc, #28]	; (800a368 <_fstat_r+0x20>)
 800a34c:	2300      	movs	r3, #0
 800a34e:	4604      	mov	r4, r0
 800a350:	4608      	mov	r0, r1
 800a352:	4611      	mov	r1, r2
 800a354:	602b      	str	r3, [r5, #0]
 800a356:	f7f9 fa30 	bl	80037ba <_fstat>
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	d102      	bne.n	800a364 <_fstat_r+0x1c>
 800a35e:	682b      	ldr	r3, [r5, #0]
 800a360:	b103      	cbz	r3, 800a364 <_fstat_r+0x1c>
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	bd38      	pop	{r3, r4, r5, pc}
 800a366:	bf00      	nop
 800a368:	200008e4 	.word	0x200008e4

0800a36c <_isatty_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4d06      	ldr	r5, [pc, #24]	; (800a388 <_isatty_r+0x1c>)
 800a370:	2300      	movs	r3, #0
 800a372:	4604      	mov	r4, r0
 800a374:	4608      	mov	r0, r1
 800a376:	602b      	str	r3, [r5, #0]
 800a378:	f7f9 fa2f 	bl	80037da <_isatty>
 800a37c:	1c43      	adds	r3, r0, #1
 800a37e:	d102      	bne.n	800a386 <_isatty_r+0x1a>
 800a380:	682b      	ldr	r3, [r5, #0]
 800a382:	b103      	cbz	r3, 800a386 <_isatty_r+0x1a>
 800a384:	6023      	str	r3, [r4, #0]
 800a386:	bd38      	pop	{r3, r4, r5, pc}
 800a388:	200008e4 	.word	0x200008e4

0800a38c <__ascii_mbtowc>:
 800a38c:	b082      	sub	sp, #8
 800a38e:	b901      	cbnz	r1, 800a392 <__ascii_mbtowc+0x6>
 800a390:	a901      	add	r1, sp, #4
 800a392:	b142      	cbz	r2, 800a3a6 <__ascii_mbtowc+0x1a>
 800a394:	b14b      	cbz	r3, 800a3aa <__ascii_mbtowc+0x1e>
 800a396:	7813      	ldrb	r3, [r2, #0]
 800a398:	600b      	str	r3, [r1, #0]
 800a39a:	7812      	ldrb	r2, [r2, #0]
 800a39c:	1e10      	subs	r0, r2, #0
 800a39e:	bf18      	it	ne
 800a3a0:	2001      	movne	r0, #1
 800a3a2:	b002      	add	sp, #8
 800a3a4:	4770      	bx	lr
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	e7fb      	b.n	800a3a2 <__ascii_mbtowc+0x16>
 800a3aa:	f06f 0001 	mvn.w	r0, #1
 800a3ae:	e7f8      	b.n	800a3a2 <__ascii_mbtowc+0x16>

0800a3b0 <memmove>:
 800a3b0:	4288      	cmp	r0, r1
 800a3b2:	b510      	push	{r4, lr}
 800a3b4:	eb01 0402 	add.w	r4, r1, r2
 800a3b8:	d902      	bls.n	800a3c0 <memmove+0x10>
 800a3ba:	4284      	cmp	r4, r0
 800a3bc:	4623      	mov	r3, r4
 800a3be:	d807      	bhi.n	800a3d0 <memmove+0x20>
 800a3c0:	1e43      	subs	r3, r0, #1
 800a3c2:	42a1      	cmp	r1, r4
 800a3c4:	d008      	beq.n	800a3d8 <memmove+0x28>
 800a3c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3ce:	e7f8      	b.n	800a3c2 <memmove+0x12>
 800a3d0:	4402      	add	r2, r0
 800a3d2:	4601      	mov	r1, r0
 800a3d4:	428a      	cmp	r2, r1
 800a3d6:	d100      	bne.n	800a3da <memmove+0x2a>
 800a3d8:	bd10      	pop	{r4, pc}
 800a3da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3e2:	e7f7      	b.n	800a3d4 <memmove+0x24>

0800a3e4 <_realloc_r>:
 800a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e8:	4680      	mov	r8, r0
 800a3ea:	4614      	mov	r4, r2
 800a3ec:	460e      	mov	r6, r1
 800a3ee:	b921      	cbnz	r1, 800a3fa <_realloc_r+0x16>
 800a3f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	f7fd b9ef 	b.w	80077d8 <_malloc_r>
 800a3fa:	b92a      	cbnz	r2, 800a408 <_realloc_r+0x24>
 800a3fc:	f7fd f980 	bl	8007700 <_free_r>
 800a400:	4625      	mov	r5, r4
 800a402:	4628      	mov	r0, r5
 800a404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a408:	f000 f82f 	bl	800a46a <_malloc_usable_size_r>
 800a40c:	4284      	cmp	r4, r0
 800a40e:	4607      	mov	r7, r0
 800a410:	d802      	bhi.n	800a418 <_realloc_r+0x34>
 800a412:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a416:	d812      	bhi.n	800a43e <_realloc_r+0x5a>
 800a418:	4621      	mov	r1, r4
 800a41a:	4640      	mov	r0, r8
 800a41c:	f7fd f9dc 	bl	80077d8 <_malloc_r>
 800a420:	4605      	mov	r5, r0
 800a422:	2800      	cmp	r0, #0
 800a424:	d0ed      	beq.n	800a402 <_realloc_r+0x1e>
 800a426:	42bc      	cmp	r4, r7
 800a428:	4622      	mov	r2, r4
 800a42a:	4631      	mov	r1, r6
 800a42c:	bf28      	it	cs
 800a42e:	463a      	movcs	r2, r7
 800a430:	f7fd f94f 	bl	80076d2 <memcpy>
 800a434:	4631      	mov	r1, r6
 800a436:	4640      	mov	r0, r8
 800a438:	f7fd f962 	bl	8007700 <_free_r>
 800a43c:	e7e1      	b.n	800a402 <_realloc_r+0x1e>
 800a43e:	4635      	mov	r5, r6
 800a440:	e7df      	b.n	800a402 <_realloc_r+0x1e>

0800a442 <__ascii_wctomb>:
 800a442:	b149      	cbz	r1, 800a458 <__ascii_wctomb+0x16>
 800a444:	2aff      	cmp	r2, #255	; 0xff
 800a446:	bf85      	ittet	hi
 800a448:	238a      	movhi	r3, #138	; 0x8a
 800a44a:	6003      	strhi	r3, [r0, #0]
 800a44c:	700a      	strbls	r2, [r1, #0]
 800a44e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a452:	bf98      	it	ls
 800a454:	2001      	movls	r0, #1
 800a456:	4770      	bx	lr
 800a458:	4608      	mov	r0, r1
 800a45a:	4770      	bx	lr

0800a45c <abort>:
 800a45c:	b508      	push	{r3, lr}
 800a45e:	2006      	movs	r0, #6
 800a460:	f000 f834 	bl	800a4cc <raise>
 800a464:	2001      	movs	r0, #1
 800a466:	f7f9 f975 	bl	8003754 <_exit>

0800a46a <_malloc_usable_size_r>:
 800a46a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a46e:	1f18      	subs	r0, r3, #4
 800a470:	2b00      	cmp	r3, #0
 800a472:	bfbc      	itt	lt
 800a474:	580b      	ldrlt	r3, [r1, r0]
 800a476:	18c0      	addlt	r0, r0, r3
 800a478:	4770      	bx	lr

0800a47a <_raise_r>:
 800a47a:	291f      	cmp	r1, #31
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4604      	mov	r4, r0
 800a480:	460d      	mov	r5, r1
 800a482:	d904      	bls.n	800a48e <_raise_r+0x14>
 800a484:	2316      	movs	r3, #22
 800a486:	6003      	str	r3, [r0, #0]
 800a488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a48c:	bd38      	pop	{r3, r4, r5, pc}
 800a48e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a490:	b112      	cbz	r2, 800a498 <_raise_r+0x1e>
 800a492:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a496:	b94b      	cbnz	r3, 800a4ac <_raise_r+0x32>
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 f831 	bl	800a500 <_getpid_r>
 800a49e:	462a      	mov	r2, r5
 800a4a0:	4601      	mov	r1, r0
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4a8:	f000 b818 	b.w	800a4dc <_kill_r>
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d00a      	beq.n	800a4c6 <_raise_r+0x4c>
 800a4b0:	1c59      	adds	r1, r3, #1
 800a4b2:	d103      	bne.n	800a4bc <_raise_r+0x42>
 800a4b4:	2316      	movs	r3, #22
 800a4b6:	6003      	str	r3, [r0, #0]
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	e7e7      	b.n	800a48c <_raise_r+0x12>
 800a4bc:	2400      	movs	r4, #0
 800a4be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	4798      	blx	r3
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	e7e0      	b.n	800a48c <_raise_r+0x12>
	...

0800a4cc <raise>:
 800a4cc:	4b02      	ldr	r3, [pc, #8]	; (800a4d8 <raise+0xc>)
 800a4ce:	4601      	mov	r1, r0
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	f7ff bfd2 	b.w	800a47a <_raise_r>
 800a4d6:	bf00      	nop
 800a4d8:	20000010 	.word	0x20000010

0800a4dc <_kill_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4d07      	ldr	r5, [pc, #28]	; (800a4fc <_kill_r+0x20>)
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	4608      	mov	r0, r1
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	602b      	str	r3, [r5, #0]
 800a4ea:	f7f9 f923 	bl	8003734 <_kill>
 800a4ee:	1c43      	adds	r3, r0, #1
 800a4f0:	d102      	bne.n	800a4f8 <_kill_r+0x1c>
 800a4f2:	682b      	ldr	r3, [r5, #0]
 800a4f4:	b103      	cbz	r3, 800a4f8 <_kill_r+0x1c>
 800a4f6:	6023      	str	r3, [r4, #0]
 800a4f8:	bd38      	pop	{r3, r4, r5, pc}
 800a4fa:	bf00      	nop
 800a4fc:	200008e4 	.word	0x200008e4

0800a500 <_getpid_r>:
 800a500:	f7f9 b910 	b.w	8003724 <_getpid>

0800a504 <sqrt>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	ed2d 8b02 	vpush	{d8}
 800a50a:	ec55 4b10 	vmov	r4, r5, d0
 800a50e:	f000 f825 	bl	800a55c <__ieee754_sqrt>
 800a512:	4622      	mov	r2, r4
 800a514:	462b      	mov	r3, r5
 800a516:	4620      	mov	r0, r4
 800a518:	4629      	mov	r1, r5
 800a51a:	eeb0 8a40 	vmov.f32	s16, s0
 800a51e:	eef0 8a60 	vmov.f32	s17, s1
 800a522:	f7f6 fb1b 	bl	8000b5c <__aeabi_dcmpun>
 800a526:	b990      	cbnz	r0, 800a54e <sqrt+0x4a>
 800a528:	2200      	movs	r2, #0
 800a52a:	2300      	movs	r3, #0
 800a52c:	4620      	mov	r0, r4
 800a52e:	4629      	mov	r1, r5
 800a530:	f7f6 faec 	bl	8000b0c <__aeabi_dcmplt>
 800a534:	b158      	cbz	r0, 800a54e <sqrt+0x4a>
 800a536:	f7fc fed5 	bl	80072e4 <__errno>
 800a53a:	2321      	movs	r3, #33	; 0x21
 800a53c:	6003      	str	r3, [r0, #0]
 800a53e:	2200      	movs	r2, #0
 800a540:	2300      	movs	r3, #0
 800a542:	4610      	mov	r0, r2
 800a544:	4619      	mov	r1, r3
 800a546:	f7f6 f999 	bl	800087c <__aeabi_ddiv>
 800a54a:	ec41 0b18 	vmov	d8, r0, r1
 800a54e:	eeb0 0a48 	vmov.f32	s0, s16
 800a552:	eef0 0a68 	vmov.f32	s1, s17
 800a556:	ecbd 8b02 	vpop	{d8}
 800a55a:	bd38      	pop	{r3, r4, r5, pc}

0800a55c <__ieee754_sqrt>:
 800a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	ec55 4b10 	vmov	r4, r5, d0
 800a564:	4e55      	ldr	r6, [pc, #340]	; (800a6bc <__ieee754_sqrt+0x160>)
 800a566:	43ae      	bics	r6, r5
 800a568:	ee10 0a10 	vmov	r0, s0
 800a56c:	ee10 3a10 	vmov	r3, s0
 800a570:	462a      	mov	r2, r5
 800a572:	4629      	mov	r1, r5
 800a574:	d110      	bne.n	800a598 <__ieee754_sqrt+0x3c>
 800a576:	ee10 2a10 	vmov	r2, s0
 800a57a:	462b      	mov	r3, r5
 800a57c:	f7f6 f854 	bl	8000628 <__aeabi_dmul>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4620      	mov	r0, r4
 800a586:	4629      	mov	r1, r5
 800a588:	f7f5 fe98 	bl	80002bc <__adddf3>
 800a58c:	4604      	mov	r4, r0
 800a58e:	460d      	mov	r5, r1
 800a590:	ec45 4b10 	vmov	d0, r4, r5
 800a594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a598:	2d00      	cmp	r5, #0
 800a59a:	dc10      	bgt.n	800a5be <__ieee754_sqrt+0x62>
 800a59c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a5a0:	4330      	orrs	r0, r6
 800a5a2:	d0f5      	beq.n	800a590 <__ieee754_sqrt+0x34>
 800a5a4:	b15d      	cbz	r5, 800a5be <__ieee754_sqrt+0x62>
 800a5a6:	ee10 2a10 	vmov	r2, s0
 800a5aa:	462b      	mov	r3, r5
 800a5ac:	ee10 0a10 	vmov	r0, s0
 800a5b0:	f7f5 fe82 	bl	80002b8 <__aeabi_dsub>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	f7f6 f960 	bl	800087c <__aeabi_ddiv>
 800a5bc:	e7e6      	b.n	800a58c <__ieee754_sqrt+0x30>
 800a5be:	1512      	asrs	r2, r2, #20
 800a5c0:	d074      	beq.n	800a6ac <__ieee754_sqrt+0x150>
 800a5c2:	07d4      	lsls	r4, r2, #31
 800a5c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a5c8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a5cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a5d0:	bf5e      	ittt	pl
 800a5d2:	0fda      	lsrpl	r2, r3, #31
 800a5d4:	005b      	lslpl	r3, r3, #1
 800a5d6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a5da:	2400      	movs	r4, #0
 800a5dc:	0fda      	lsrs	r2, r3, #31
 800a5de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a5e2:	107f      	asrs	r7, r7, #1
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	2516      	movs	r5, #22
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a5ee:	1886      	adds	r6, r0, r2
 800a5f0:	428e      	cmp	r6, r1
 800a5f2:	bfde      	ittt	le
 800a5f4:	1b89      	suble	r1, r1, r6
 800a5f6:	18b0      	addle	r0, r6, r2
 800a5f8:	18a4      	addle	r4, r4, r2
 800a5fa:	0049      	lsls	r1, r1, #1
 800a5fc:	3d01      	subs	r5, #1
 800a5fe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a602:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a606:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a60a:	d1f0      	bne.n	800a5ee <__ieee754_sqrt+0x92>
 800a60c:	462a      	mov	r2, r5
 800a60e:	f04f 0e20 	mov.w	lr, #32
 800a612:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a616:	4281      	cmp	r1, r0
 800a618:	eb06 0c05 	add.w	ip, r6, r5
 800a61c:	dc02      	bgt.n	800a624 <__ieee754_sqrt+0xc8>
 800a61e:	d113      	bne.n	800a648 <__ieee754_sqrt+0xec>
 800a620:	459c      	cmp	ip, r3
 800a622:	d811      	bhi.n	800a648 <__ieee754_sqrt+0xec>
 800a624:	f1bc 0f00 	cmp.w	ip, #0
 800a628:	eb0c 0506 	add.w	r5, ip, r6
 800a62c:	da43      	bge.n	800a6b6 <__ieee754_sqrt+0x15a>
 800a62e:	2d00      	cmp	r5, #0
 800a630:	db41      	blt.n	800a6b6 <__ieee754_sqrt+0x15a>
 800a632:	f100 0801 	add.w	r8, r0, #1
 800a636:	1a09      	subs	r1, r1, r0
 800a638:	459c      	cmp	ip, r3
 800a63a:	bf88      	it	hi
 800a63c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800a640:	eba3 030c 	sub.w	r3, r3, ip
 800a644:	4432      	add	r2, r6
 800a646:	4640      	mov	r0, r8
 800a648:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a64c:	f1be 0e01 	subs.w	lr, lr, #1
 800a650:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a654:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a658:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a65c:	d1db      	bne.n	800a616 <__ieee754_sqrt+0xba>
 800a65e:	430b      	orrs	r3, r1
 800a660:	d006      	beq.n	800a670 <__ieee754_sqrt+0x114>
 800a662:	1c50      	adds	r0, r2, #1
 800a664:	bf13      	iteet	ne
 800a666:	3201      	addne	r2, #1
 800a668:	3401      	addeq	r4, #1
 800a66a:	4672      	moveq	r2, lr
 800a66c:	f022 0201 	bicne.w	r2, r2, #1
 800a670:	1063      	asrs	r3, r4, #1
 800a672:	0852      	lsrs	r2, r2, #1
 800a674:	07e1      	lsls	r1, r4, #31
 800a676:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a67a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a67e:	bf48      	it	mi
 800a680:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a684:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a688:	4614      	mov	r4, r2
 800a68a:	e781      	b.n	800a590 <__ieee754_sqrt+0x34>
 800a68c:	0ad9      	lsrs	r1, r3, #11
 800a68e:	3815      	subs	r0, #21
 800a690:	055b      	lsls	r3, r3, #21
 800a692:	2900      	cmp	r1, #0
 800a694:	d0fa      	beq.n	800a68c <__ieee754_sqrt+0x130>
 800a696:	02cd      	lsls	r5, r1, #11
 800a698:	d50a      	bpl.n	800a6b0 <__ieee754_sqrt+0x154>
 800a69a:	f1c2 0420 	rsb	r4, r2, #32
 800a69e:	fa23 f404 	lsr.w	r4, r3, r4
 800a6a2:	1e55      	subs	r5, r2, #1
 800a6a4:	4093      	lsls	r3, r2
 800a6a6:	4321      	orrs	r1, r4
 800a6a8:	1b42      	subs	r2, r0, r5
 800a6aa:	e78a      	b.n	800a5c2 <__ieee754_sqrt+0x66>
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	e7f0      	b.n	800a692 <__ieee754_sqrt+0x136>
 800a6b0:	0049      	lsls	r1, r1, #1
 800a6b2:	3201      	adds	r2, #1
 800a6b4:	e7ef      	b.n	800a696 <__ieee754_sqrt+0x13a>
 800a6b6:	4680      	mov	r8, r0
 800a6b8:	e7bd      	b.n	800a636 <__ieee754_sqrt+0xda>
 800a6ba:	bf00      	nop
 800a6bc:	7ff00000 	.word	0x7ff00000

0800a6c0 <_init>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr

0800a6cc <_fini>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	bf00      	nop
 800a6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	469e      	mov	lr, r3
 800a6d6:	4770      	bx	lr
