
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000678c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006924  08006924  00016924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a64  08006a64  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a6c  08006a6c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000074  08006ae8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08006ae8  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106f5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c4  00000000  00000000  00030799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00032a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00033858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b15  00000000  00000000  00034588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd6b  00000000  00000000  0004b09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f20e  00000000  00000000  0005ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea016  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e94  00000000  00000000  000ea068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800690c 	.word	0x0800690c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	0800690c 	.word	0x0800690c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2uiz>:
 8000a98:	004a      	lsls	r2, r1, #1
 8000a9a:	d211      	bcs.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d211      	bcs.n	8000ac6 <__aeabi_d2uiz+0x2e>
 8000aa2:	d50d      	bpl.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d40e      	bmi.n	8000acc <__aeabi_d2uiz+0x34>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_d2uiz+0x3a>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b8c:	f000 b974 	b.w	8000e78 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	468e      	mov	lr, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14d      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4694      	mov	ip, r2
 8000bba:	d969      	bls.n	8000c90 <__udivmoddi4+0xe8>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b152      	cbz	r2, 8000bd8 <__udivmoddi4+0x30>
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	f1c2 0120 	rsb	r1, r2, #32
 8000bca:	fa20 f101 	lsr.w	r1, r0, r1
 8000bce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd6:	4094      	lsls	r4, r2
 8000bd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bdc:	0c21      	lsrs	r1, r4, #16
 8000bde:	fbbe f6f8 	udiv	r6, lr, r8
 8000be2:	fa1f f78c 	uxth.w	r7, ip
 8000be6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bee:	fb06 f107 	mul.w	r1, r6, r7
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bfe:	f080 811f 	bcs.w	8000e40 <__udivmoddi4+0x298>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 811c 	bls.w	8000e40 <__udivmoddi4+0x298>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 f707 	mul.w	r7, r0, r7
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x92>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2c:	f080 810a 	bcs.w	8000e44 <__udivmoddi4+0x29c>
 8000c30:	42a7      	cmp	r7, r4
 8000c32:	f240 8107 	bls.w	8000e44 <__udivmoddi4+0x29c>
 8000c36:	4464      	add	r4, ip
 8000c38:	3802      	subs	r0, #2
 8000c3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3e:	1be4      	subs	r4, r4, r7
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa4>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xc2>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80ef 	beq.w	8000e3a <__udivmoddi4+0x292>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x160>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd4>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80f9 	bhi.w	8000e6e <__udivmoddi4+0x2c6>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	469e      	mov	lr, r3
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa4>
 8000c8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xec>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 8092 	bne.w	8000dc2 <__udivmoddi4+0x21a>
 8000c9e:	eba1 010c 	sub.w	r1, r1, ip
 8000ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	2601      	movs	r6, #1
 8000cac:	0c20      	lsrs	r0, r4, #16
 8000cae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cba:	fb0e f003 	mul.w	r0, lr, r3
 8000cbe:	4288      	cmp	r0, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x12c>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x12a>
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	f200 80cb 	bhi.w	8000e68 <__udivmoddi4+0x2c0>
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce8:	45a6      	cmp	lr, r4
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x156>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x154>
 8000cf6:	45a6      	cmp	lr, r4
 8000cf8:	f200 80bb 	bhi.w	8000e72 <__udivmoddi4+0x2ca>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d06:	e79c      	b.n	8000c42 <__udivmoddi4+0x9a>
 8000d08:	f1c6 0720 	rsb	r7, r6, #32
 8000d0c:	40b3      	lsls	r3, r6
 8000d0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d16:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	431c      	orrs	r4, r3
 8000d20:	40f9      	lsrs	r1, r7
 8000d22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d26:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2e:	0c20      	lsrs	r0, r4, #16
 8000d30:	fa1f fe8c 	uxth.w	lr, ip
 8000d34:	fb09 1118 	mls	r1, r9, r8, r1
 8000d38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d40:	4288      	cmp	r0, r1
 8000d42:	fa02 f206 	lsl.w	r2, r2, r6
 8000d46:	d90b      	bls.n	8000d60 <__udivmoddi4+0x1b8>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d50:	f080 8088 	bcs.w	8000e64 <__udivmoddi4+0x2bc>
 8000d54:	4288      	cmp	r0, r1
 8000d56:	f240 8085 	bls.w	8000e64 <__udivmoddi4+0x2bc>
 8000d5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d68:	fb09 1110 	mls	r1, r9, r0, r1
 8000d6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d74:	458e      	cmp	lr, r1
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1e2>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d80:	d26c      	bcs.n	8000e5c <__udivmoddi4+0x2b4>
 8000d82:	458e      	cmp	lr, r1
 8000d84:	d96a      	bls.n	8000e5c <__udivmoddi4+0x2b4>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4461      	add	r1, ip
 8000d8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d92:	eba1 010e 	sub.w	r1, r1, lr
 8000d96:	42a1      	cmp	r1, r4
 8000d98:	46c8      	mov	r8, r9
 8000d9a:	46a6      	mov	lr, r4
 8000d9c:	d356      	bcc.n	8000e4c <__udivmoddi4+0x2a4>
 8000d9e:	d053      	beq.n	8000e48 <__udivmoddi4+0x2a0>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x212>
 8000da2:	ebb3 0208 	subs.w	r2, r3, r8
 8000da6:	eb61 010e 	sbc.w	r1, r1, lr
 8000daa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dae:	fa22 f306 	lsr.w	r3, r2, r6
 8000db2:	40f1      	lsrs	r1, r6
 8000db4:	431f      	orrs	r7, r3
 8000db6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dba:	2600      	movs	r6, #0
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	f1c2 0320 	rsb	r3, r2, #32
 8000dc6:	40d8      	lsrs	r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	4301      	orrs	r1, r0
 8000dd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de0:	fb07 3610 	mls	r6, r7, r0, r3
 8000de4:	0c0b      	lsrs	r3, r1, #16
 8000de6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dea:	fb00 f60e 	mul.w	r6, r0, lr
 8000dee:	429e      	cmp	r6, r3
 8000df0:	fa04 f402 	lsl.w	r4, r4, r2
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x260>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dfe:	d22f      	bcs.n	8000e60 <__udivmoddi4+0x2b8>
 8000e00:	429e      	cmp	r6, r3
 8000e02:	d92d      	bls.n	8000e60 <__udivmoddi4+0x2b8>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	b289      	uxth	r1, r1
 8000e0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e10:	fb07 3316 	mls	r3, r7, r6, r3
 8000e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e18:	fb06 f30e 	mul.w	r3, r6, lr
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x28a>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e28:	d216      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d914      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2e:	3e02      	subs	r6, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e38:	e738      	b.n	8000cac <__udivmoddi4+0x104>
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e705      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e3      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6f8      	b.n	8000c3a <__udivmoddi4+0x92>
 8000e48:	454b      	cmp	r3, r9
 8000e4a:	d2a9      	bcs.n	8000da0 <__udivmoddi4+0x1f8>
 8000e4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7a3      	b.n	8000da0 <__udivmoddi4+0x1f8>
 8000e58:	4646      	mov	r6, r8
 8000e5a:	e7ea      	b.n	8000e32 <__udivmoddi4+0x28a>
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	e794      	b.n	8000d8a <__udivmoddi4+0x1e2>
 8000e60:	4640      	mov	r0, r8
 8000e62:	e7d1      	b.n	8000e08 <__udivmoddi4+0x260>
 8000e64:	46d0      	mov	r8, sl
 8000e66:	e77b      	b.n	8000d60 <__udivmoddi4+0x1b8>
 8000e68:	3b02      	subs	r3, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	e732      	b.n	8000cd4 <__udivmoddi4+0x12c>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e709      	b.n	8000c86 <__udivmoddi4+0xde>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	e742      	b.n	8000cfe <__udivmoddi4+0x156>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <HAL_UART_RxCpltCallback>:
uint32_t count = 0;
int limit_switch = 1;
float ui[2]= {0.0 , 0.0};


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b0ab      	sub	sp, #172	; 0xac
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]



    double value;
    unsigned long long encoding;
    uint8_t i = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    /* read the first characters */

    memcpy(str,rx_data,sizeof str);
 8000e8a:	4a3f      	ldr	r2, [pc, #252]	; (8000f88 <HAL_UART_RxCpltCallback+0x10c>)
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4611      	mov	r1, r2
 8000e92:	2278      	movs	r2, #120	; 0x78
 8000e94:	4618      	mov	r0, r3
 8000e96:	f005 fbc9 	bl	800662c <memcpy>

    char  *save_ptr;

    cmd = strtok_r((char*) str, ":", &save_ptr);
 8000e9a:	f107 020c 	add.w	r2, r7, #12
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	493a      	ldr	r1, [pc, #232]	; (8000f8c <HAL_UART_RxCpltCallback+0x110>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 fbff 	bl	80066a8 <strtok_r>
 8000eaa:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

   // printf("%s %d \n",cmd,!strcmp(cmd, "TRJ"));
    //fflush(stdout);

    if(!strcmp(cmd, "TRJ")){
 8000eae:	4938      	ldr	r1, [pc, #224]	; (8000f90 <HAL_UART_RxCpltCallback+0x114>)
 8000eb0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000eb4:	f7ff f990 	bl	80001d8 <strcmp>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d156      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0xf0>
    	   count++;
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <HAL_UART_RxCpltCallback+0x118>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	4a33      	ldr	r2, [pc, #204]	; (8000f94 <HAL_UART_RxCpltCallback+0x118>)
 8000ec6:	6013      	str	r3, [r2, #0]

    	/* trj case*/
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        //data = strtok(cmd+sizeof cmd, ":");
	   data = strtok_r(cmd+sizeof cmd, ":",  &save_ptr);
 8000ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ecc:	3304      	adds	r3, #4
 8000ece:	f107 020c 	add.w	r2, r7, #12
 8000ed2:	492e      	ldr	r1, [pc, #184]	; (8000f8c <HAL_UART_RxCpltCallback+0x110>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f005 fbe7 	bl	80066a8 <strtok_r>
 8000eda:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        while(data != NULL){
 8000ede:	e032      	b.n	8000f46 <HAL_UART_RxCpltCallback+0xca>
            if(i == 6) break; /* reading penup */
 8000ee0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000ee4:	2b06      	cmp	r3, #6
 8000ee6:	d033      	beq.n	8000f50 <HAL_UART_RxCpltCallback+0xd4>
            // value = "0x"; /* will contain the value extracted from the received string */
            encoding = strtoull(data, NULL, 16);
 8000ee8:	2210      	movs	r2, #16
 8000eea:	2100      	movs	r1, #0
 8000eec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000ef0:	f005 fd02 	bl	80068f8 <strtoull>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000efc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
            memcpy(&value, &encoding, sizeof value);
 8000f00:	e9c7 2306 	strd	r2, r3, [r7, #24]

            // value = strcat(value, data); /* string concatenation REF: https://www.programiz.com/c-programming/library-function/string.h/strcat */
            rbpush((((ringbuffer_t *) &manip)+i), (float) value); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 8000f04:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000f08:	222c      	movs	r2, #44	; 0x2c
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <HAL_UART_RxCpltCallback+0x11c>)
 8000f10:	189c      	adds	r4, r3, r2
 8000f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fddd 	bl	8000ad8 <__aeabi_d2f>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	ee00 3a10 	vmov	s0, r3
 8000f24:	4620      	mov	r0, r4
 8000f26:	f001 fb49 	bl	80025bc <rbpush>
            data = strtok_r(NULL, ":", &save_ptr);
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4916      	ldr	r1, [pc, #88]	; (8000f8c <HAL_UART_RxCpltCallback+0x110>)
 8000f32:	2000      	movs	r0, #0
 8000f34:	f005 fbb8 	bl	80066a8 <strtok_r>
 8000f38:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
            i++;
 8000f3c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000f40:	3301      	adds	r3, #1
 8000f42:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        while(data != NULL){
 8000f46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1c8      	bne.n	8000ee0 <HAL_UART_RxCpltCallback+0x64>
 8000f4e:	e000      	b.n	8000f52 <HAL_UART_RxCpltCallback+0xd6>
            if(i == 6) break; /* reading penup */
 8000f50:	bf00      	nop
        }
        rbpush(&manip.penup, (float) atoi(data));
 8000f52:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000f56:	f005 fb3b 	bl	80065d0 <atoi>
 8000f5a:	ee07 0a90 	vmov	s15, r0
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <HAL_UART_RxCpltCallback+0x120>)
 8000f68:	f001 fb28 	bl	80025bc <rbpush>
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(huart, rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8000f6c:	2278      	movs	r2, #120	; 0x78
 8000f6e:	4906      	ldr	r1, [pc, #24]	; (8000f88 <HAL_UART_RxCpltCallback+0x10c>)
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f004 fa78 	bl	8005466 <HAL_UART_Receive_DMA>


    //__enable_irq();

       return
	   count++;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <HAL_UART_RxCpltCallback+0x118>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <HAL_UART_RxCpltCallback+0x118>)
 8000f7e:	6013      	str	r3, [r2, #0]

		  //HAL_UART_Receive_DMA(huart, rx_data, 121);



}
 8000f80:	37ac      	adds	r7, #172	; 0xac
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000090 	.word	0x20000090
 8000f8c:	08006924 	.word	0x08006924
 8000f90:	08006928 	.word	0x08006928
 8000f94:	2000044c 	.word	0x2000044c
 8000f98:	20000108 	.word	0x20000108
 8000f9c:	20000210 	.word	0x20000210

08000fa0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
    // TODO: Implement limit switch handling
    uint32_t now;
    now = HAL_GetTick();
 8000faa:	f001 ff4d 	bl	8002e48 <HAL_GetTick>
 8000fae:	60f8      	str	r0, [r7, #12]
    if((now - previous_trigger) > DEBOUNCE_DELAY){
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b32      	cmp	r3, #50	; 0x32
 8000fba:	d916      	bls.n	8000fea <HAL_GPIO_EXTI_Callback+0x4a>
        if(!triggered){
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d108      	bne.n	8000fd6 <HAL_GPIO_EXTI_Callback+0x36>
          limit_switch *= -1;
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x5c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	425b      	negs	r3, r3
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x5c>)
 8000fcc:	6013      	str	r3, [r2, #0]
            // SECTION - DEBUG
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fce:	2120      	movs	r1, #32
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <HAL_GPIO_EXTI_Callback+0x60>)
 8000fd2:	f002 fe32 	bl	8003c3a <HAL_GPIO_TogglePin>
            // !SECTION - DEBUG
        }
        triggered = 1-triggered;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	f1c3 0301 	rsb	r3, r3, #1
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000fe2:	701a      	strb	r2, [r3, #0]
        previous_trigger = now;
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6013      	str	r3, [r2, #0]
    }
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000400 	.word	0x20000400
 8000ff8:	20000404 	.word	0x20000404
 8000ffc:	20000000 	.word	0x20000000
 8001000:	40020000 	.word	0x40020000

08001004 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d102      	bne.n	800101c <HAL_TIM_PeriodElapsedCallback+0x18>
		/* check if it is the proper instance */
		read_encoders(&manip);
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001018:	f000 fa0a 	bl	8001430 <read_encoders>

	}
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40014400 	.word	0x40014400
 8001028:	20000108 	.word	0x20000108

0800102c <init_man>:
- TIM_HandleTypeDef *htim2: pointer to the timer used to decode the output of the second encode;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip, TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2){
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 8001038:	2300      	movs	r3, #0
 800103a:	75fb      	strb	r3, [r7, #23]
 800103c:	e00b      	b.n	8001056 <init_man+0x2a>
        rbclear((((ringbuffer_t *) manip)+i));
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	222c      	movs	r2, #44	; 0x2c
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4413      	add	r3, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fb94 	bl	8002778 <rbclear>
    for(i = 0; i < 14; i++){
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	3301      	adds	r3, #1
 8001054:	75fb      	strb	r3, [r7, #23]
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	2b0d      	cmp	r3, #13
 800105a:	d9f0      	bls.n	800103e <init_man+0x12>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 800105c:	2300      	movs	r3, #0
 800105e:	75fb      	strb	r3, [r7, #23]
 8001060:	e012      	b.n	8001088 <init_man+0x5c>
        manip->B[i] = (float) 0;
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	339a      	adds	r3, #154	; 0x9a
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
        manip->C[i] = (float) 0;
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	339e      	adds	r3, #158	; 0x9e
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 4; i++){
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	3301      	adds	r3, #1
 8001086:	75fb      	strb	r3, [r7, #23]
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d9e9      	bls.n	8001062 <init_man+0x36>
    }
    manip->htim_encoder1 = htim1;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    manip->htim_encoder2 = htim2;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <speed_estimation>:
- float *a_est: pointer to the variable that will hold the acceleration estimation;
@outputs: 
- void;
@#
*/
void speed_estimation(ringbuffer_t *q_actual, ringbuffer_t *dq_actual, ringbuffer_t *ddq_actual, float reduction, float *v_est, float *a_est){
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b0d6      	sub	sp, #344	; 0x158
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 80010b2:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
 80010b6:	6020      	str	r0, [r4, #0]
 80010b8:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80010bc:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
 80010c0:	6001      	str	r1, [r0, #0]
 80010c2:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80010c6:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 80010ca:	600a      	str	r2, [r1, #0]
 80010cc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80010d0:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 80010d4:	ed82 0a00 	vstr	s0, [r2]
 80010d8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80010dc:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80010e0:	6013      	str	r3, [r2, #0]
	*a_est = (a[3]-a[2])/T_S;
    return;
    */

    float prev, succ, vel,acc, a, b;
    succ=0;
 80010e2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
    prev=0;
 80010f0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
    for(i = 0; i < 5; i++){
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8001104:	e023      	b.n	800114e <speed_estimation+0xa6>
    	rbget(q_actual, i, &a);
 8001106:	f997 1157 	ldrsb.w	r1, [r7, #343]	; 0x157
 800110a:	f107 021c 	add.w	r2, r7, #28
 800110e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001112:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	f001 faee 	bl	80026f8 <rbget>
    	prev+=a;
 800111c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001120:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001124:	ed93 7a00 	vldr	s14, [r3]
 8001128:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800112c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001138:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800113c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001140:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < 5; i++){
 8001144:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001148:	3301      	adds	r3, #1
 800114a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 800114e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001152:	2b04      	cmp	r3, #4
 8001154:	d9d7      	bls.n	8001106 <speed_estimation+0x5e>
    }
    for(i = 0; i < 5; i++){
 8001156:	2300      	movs	r3, #0
 8001158:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 800115c:	e026      	b.n	80011ac <speed_estimation+0x104>
    	rbget(q_actual, 5+i, &a);
 800115e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001162:	3305      	adds	r3, #5
 8001164:	b2db      	uxtb	r3, r3
 8001166:	b259      	sxtb	r1, r3
 8001168:	f107 021c 	add.w	r2, r7, #28
 800116c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001170:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	f001 fabf 	bl	80026f8 <rbget>
    	succ+=a;
 800117a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800117e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001182:	ed93 7a00 	vldr	s14, [r3]
 8001186:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800118a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001196:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800119a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800119e:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < 5; i++){
 80011a2:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80011a6:	3301      	adds	r3, #1
 80011a8:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 80011ac:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d9d4      	bls.n	800115e <speed_estimation+0xb6>
    }
    prev /=5;
 80011b4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011bc:	ed93 7a00 	vldr	s14, [r3]
 80011c0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80011c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011d0:	edc3 7a00 	vstr	s15, [r3]
    succ /=5;
 80011d4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011dc:	ed93 7a00 	vldr	s14, [r3]
 80011e0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80011e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011f0:	edc3 7a00 	vstr	s15, [r3]



    //rbget(q_actual,RBUF_SZ-1, &pos_succ);
    //rbget(q_actual,RBUF_SZ-2, &pos_prev);
    rblast(dq_actual,&vel);
 80011f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011f8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001200:	4611      	mov	r1, r2
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	f001 fa48 	bl	8002698 <rblast>


    *v_est=0.8546*vel+((1-0.8546)*(succ-prev)/(T_C*5) );
 8001208:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800120c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f94e 	bl	80004b4 <__aeabi_f2d>
 8001218:	a34f      	add	r3, pc, #316	; (adr r3, 8001358 <speed_estimation+0x2b0>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff f9a1 	bl	8000564 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4614      	mov	r4, r2
 8001228:	461d      	mov	r5, r3
 800122a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800122e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001232:	ed93 7a00 	vldr	s14, [r3]
 8001236:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800123a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001246:	ee17 0a90 	vmov	r0, s15
 800124a:	f7ff f933 	bl	80004b4 <__aeabi_f2d>
 800124e:	a344      	add	r3, pc, #272	; (adr r3, 8001360 <speed_estimation+0x2b8>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f986 	bl	8000564 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	a341      	add	r3, pc, #260	; (adr r3, 8001368 <speed_estimation+0x2c0>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff faa7 	bl	80007b8 <__aeabi_ddiv>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7fe ffc1 	bl	80001f8 <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fc2b 	bl	8000ad8 <__aeabi_d2f>
 8001282:	4602      	mov	r2, r0
 8001284:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001288:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	601a      	str	r2, [r3, #0]


    rbget(dq_actual, RBUF_SZ-1, &succ);
 8001290:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001294:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001298:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800129c:	2109      	movs	r1, #9
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	f001 fa2a 	bl	80026f8 <rbget>
    rbget(dq_actual, RBUF_SZ-2, &prev);
 80012a4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80012a8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80012b0:	2108      	movs	r1, #8
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f001 fa20 	bl	80026f8 <rbget>
    //*a_est = (succ-prev)/T_C;
    rblast(ddq_actual,&acc);
 80012b8:	f107 0220 	add.w	r2, r7, #32
 80012bc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80012c4:	4611      	mov	r1, r2
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	f001 f9e6 	bl	8002698 <rblast>
    *a_est= 0.9245*acc+((1- 0.9245)*(succ-prev)/(T_C) );
 80012cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012d0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f8ec 	bl	80004b4 <__aeabi_f2d>
 80012dc:	a324      	add	r3, pc, #144	; (adr r3, 8001370 <speed_estimation+0x2c8>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff f93f 	bl	8000564 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4614      	mov	r4, r2
 80012ec:	461d      	mov	r5, r3
 80012ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012f6:	ed93 7a00 	vldr	s14, [r3]
 80012fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130a:	ee17 0a90 	vmov	r0, s15
 800130e:	f7ff f8d1 	bl	80004b4 <__aeabi_f2d>
 8001312:	a319      	add	r3, pc, #100	; (adr r3, 8001378 <speed_estimation+0x2d0>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f924 	bl	8000564 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	a316      	add	r3, pc, #88	; (adr r3, 8001380 <speed_estimation+0x2d8>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff fa45 	bl	80007b8 <__aeabi_ddiv>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4620      	mov	r0, r4
 8001334:	4629      	mov	r1, r5
 8001336:	f7fe ff5f 	bl	80001f8 <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fbc9 	bl	8000ad8 <__aeabi_d2f>
 8001346:	4602      	mov	r2, r0
 8001348:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800134c:	601a      	str	r2, [r3, #0]


}
 800134e:	bf00      	nop
 8001350:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8001354:	46bd      	mov	sp, r7
 8001356:	bdb0      	pop	{r4, r5, r7, pc}
 8001358:	19652bd4 	.word	0x19652bd4
 800135c:	3feb58e2 	.word	0x3feb58e2
 8001360:	9a6b50b0 	.word	0x9a6b50b0
 8001364:	3fc29c77 	.word	0x3fc29c77
 8001368:	9999999a 	.word	0x9999999a
 800136c:	3fa99999 	.word	0x3fa99999
 8001370:	0624dd2f 	.word	0x0624dd2f
 8001374:	3fed9581 	.word	0x3fed9581
 8001378:	ced91688 	.word	0xced91688
 800137c:	3fb353f7 	.word	0x3fb353f7
 8001380:	47ae147b 	.word	0x47ae147b
 8001384:	3f847ae1 	.word	0x3f847ae1

08001388 <init_rate>:
- uint32_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint32_t ms){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
    rate->last_time = HAL_GetTick();
 8001392:	f001 fd59 	bl	8002e48 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	601a      	str	r2, [r3, #0]
    rate->delta_time = ms;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	605a      	str	r2, [r3, #4]
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <rate_sleep>:
- rate_t *rate: pointer to the rate struct;
@outputs: 
- void;
@#
*/
void rate_sleep(rate_t *rate){
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
    float now, interval;
    now = HAL_GetTick();
 80013b2:	f001 fd49 	bl	8002e48 <HAL_GetTick>
 80013b6:	ee07 0a90 	vmov	s15, r0
 80013ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013be:	edc7 7a03 	vstr	s15, [r7, #12]
    interval = (uint32_t) (now - rate->last_time); /* time passed from the last rate_sleep call */
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80013d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013de:	edc7 7a02 	vstr	s15, [r7, #8]
    /* wait until enough time has passed from the last rate_sleep call */
    if(interval < rate->delta_time){
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80013f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fa:	d50f      	bpl.n	800141c <rate_sleep+0x72>
        HAL_Delay(rate->delta_time-interval);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001408:	edd7 7a02 	vldr	s15, [r7, #8]
 800140c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001414:	ee17 0a90 	vmov	r0, s15
 8001418:	f001 fd22 	bl	8002e60 <HAL_Delay>
    }
    /* if enough time has passed, save the time stamp and go on with the process */
    rate->last_time = HAL_GetTick();
 800141c:	f001 fd14 	bl	8002e48 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	601a      	str	r2, [r3, #0]
    return;
 8001426:	bf00      	nop
}
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <read_encoders>:
@inputs: 
- man_t *manip: pointer to the manipulator struct that holds both the desired and actual motor positions, speeds and accelerations;
@outputs: outputs
@#
*/
void read_encoders(man_t *manip){
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    uint16_t counter; 
    float displacement1, displacement2;
    // float v_est, a_est; /* used to hold temporarily the estimations of speed and acceleration */
    TIM_HandleTypeDef *htim1, *htim2;

    htim1 = manip->htim_encoder1; /* pointer to the timer struct that decodes the first encoder output */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800143e:	613b      	str	r3, [r7, #16]
    htim2 = manip->htim_encoder2; /* pointer to the timer struct that decodes the first encoder output */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001446:	60fb      	str	r3, [r7, #12]

    /* first encoder */
    counter = (htim1->Instance->CNT);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim1->Instance->ARR){
 8001450:	8bfa      	ldrh	r2, [r7, #30]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	429a      	cmp	r2, r3
 800145a:	d309      	bcc.n	8001470 <read_encoders+0x40>
        counter = (htim1->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	83fb      	strh	r3, [r7, #30]
        htim1->Instance->CNT = counter; /* correct cnt value */
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	8bfa      	ldrh	r2, [r7, #30]
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    displacement1 = (float) (2*M_PI*counter/(htim1->Instance->ARR));
 8001470:	8bfb      	ldrh	r3, [r7, #30]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f80c 	bl	8000490 <__aeabi_i2d>
 8001478:	a35f      	add	r3, pc, #380	; (adr r3, 80015f8 <read_encoders+0x1c8>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f871 	bl	8000564 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4614      	mov	r4, r2
 8001488:	461d      	mov	r5, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe ffed 	bl	8000470 <__aeabi_ui2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4620      	mov	r0, r4
 800149c:	4629      	mov	r1, r5
 800149e:	f7ff f98b 	bl	80007b8 <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff fb15 	bl	8000ad8 <__aeabi_d2f>
 80014ae:	4603      	mov	r3, r0
 80014b0:	61bb      	str	r3, [r7, #24]

    /* second encoder */
    counter = (htim2->Instance->CNT);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	83fb      	strh	r3, [r7, #30]
    if(counter >= htim2->Instance->ARR){
 80014ba:	8bfa      	ldrh	r2, [r7, #30]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d309      	bcc.n	80014da <read_encoders+0xaa>
        counter = (htim2->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3b01      	subs	r3, #1
 80014d0:	83fb      	strh	r3, [r7, #30]
        htim2->Instance->CNT = counter;  /* correct cnt value */
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	8bfa      	ldrh	r2, [r7, #30]
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
    }
    displacement2 = (float) (2*M_PI) - (2*M_PI*counter/(htim2->Instance->ARR)); /* the motor is upside down */
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe ffd7 	bl	8000490 <__aeabi_i2d>
 80014e2:	a345      	add	r3, pc, #276	; (adr r3, 80015f8 <read_encoders+0x1c8>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f83c 	bl	8000564 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4614      	mov	r4, r2
 80014f2:	461d      	mov	r5, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe ffb8 	bl	8000470 <__aeabi_ui2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4620      	mov	r0, r4
 8001506:	4629      	mov	r1, r5
 8001508:	f7ff f956 	bl	80007b8 <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	a13e      	add	r1, pc, #248	; (adr r1, 800160c <read_encoders+0x1dc>)
 8001512:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001516:	f7fe fe6d 	bl	80001f4 <__aeabi_dsub>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fad9 	bl	8000ad8 <__aeabi_d2f>
 8001526:	4603      	mov	r3, r0
 8001528:	617b      	str	r3, [r7, #20]

    // SECTION DEBUG
    // rbpush(&timestamps, (float) HAL_GetTick()/1000.0);
    // !SECTION DEBUG

    if(displacement1 > 2*M_PI){
 800152a:	69b8      	ldr	r0, [r7, #24]
 800152c:	f7fe ffc2 	bl	80004b4 <__aeabi_f2d>
 8001530:	a331      	add	r3, pc, #196	; (adr r3, 80015f8 <read_encoders+0x1c8>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff faa5 	bl	8000a84 <__aeabi_dcmpgt>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <read_encoders+0x114>
    	displacement1 = 2*M_PI; /* clamping */
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <read_encoders+0x1d8>)
 8001542:	61bb      	str	r3, [r7, #24]
	}
	if(displacement2 > 2*M_PI){
 8001544:	6978      	ldr	r0, [r7, #20]
 8001546:	f7fe ffb5 	bl	80004b4 <__aeabi_f2d>
 800154a:	a32b      	add	r3, pc, #172	; (adr r3, 80015f8 <read_encoders+0x1c8>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff fa98 	bl	8000a84 <__aeabi_dcmpgt>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <read_encoders+0x12e>
		displacement2 = 2*M_PI; /* clamping */
 800155a:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <read_encoders+0x1d8>)
 800155c:	617b      	str	r3, [r7, #20]
	}
    if(displacement1 > M_PI){
 800155e:	69b8      	ldr	r0, [r7, #24]
 8001560:	f7fe ffa8 	bl	80004b4 <__aeabi_f2d>
 8001564:	a326      	add	r3, pc, #152	; (adr r3, 8001600 <read_encoders+0x1d0>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff fa8b 	bl	8000a84 <__aeabi_dcmpgt>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00f      	beq.n	8001594 <read_encoders+0x164>
    	displacement1 = displacement1 - (2*M_PI); /* redefining the domain between -PI and +PI */
 8001574:	69b8      	ldr	r0, [r7, #24]
 8001576:	f7fe ff9d 	bl	80004b4 <__aeabi_f2d>
 800157a:	a31f      	add	r3, pc, #124	; (adr r3, 80015f8 <read_encoders+0x1c8>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7fe fe38 	bl	80001f4 <__aeabi_dsub>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff faa4 	bl	8000ad8 <__aeabi_d2f>
 8001590:	4603      	mov	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]
    }
    if(displacement2 > M_PI){
 8001594:	6978      	ldr	r0, [r7, #20]
 8001596:	f7fe ff8d 	bl	80004b4 <__aeabi_f2d>
 800159a:	a319      	add	r3, pc, #100	; (adr r3, 8001600 <read_encoders+0x1d0>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff fa70 	bl	8000a84 <__aeabi_dcmpgt>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00f      	beq.n	80015ca <read_encoders+0x19a>
    	displacement2 = displacement2 - (2*M_PI); /* redefining the domain between -PI and +PI */
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7fe ff82 	bl	80004b4 <__aeabi_f2d>
 80015b0:	a311      	add	r3, pc, #68	; (adr r3, 80015f8 <read_encoders+0x1c8>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7fe fe1d 	bl	80001f4 <__aeabi_dsub>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fa89 	bl	8000ad8 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	617b      	str	r3, [r7, #20]
    /*
    uint8_t dir1 = (uint8_t) (htim1->Instance->CR1 >> 4) & 1;
    uint8_t dir2 = (uint8_t) (htim2->Instance->CR1 >> 4) & 1;
    */
    // SECTION DEBUG
    rbpush(&manip->q0_actual, displacement1);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80015d0:	ed97 0a06 	vldr	s0, [r7, #24]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fff1 	bl	80025bc <rbpush>
    rbpush(&manip->q1_actual, displacement2);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80015e0:	ed97 0a05 	vldr	s0, [r7, #20]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 ffe9 	bl	80025bc <rbpush>

	rbpush(&manip->dq1_actual, v_est);
	rbpush(&manip->ddq1_actual, a_est);
    // !SECTION DEBUG
	*/
}
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bdb0      	pop	{r4, r5, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	f3af 8000 	nop.w
 80015f8:	54442d18 	.word	0x54442d18
 80015fc:	401921fb 	.word	0x401921fb
 8001600:	54442d18 	.word	0x54442d18
 8001604:	400921fb 	.word	0x400921fb
 8001608:	40c90fdb 	.word	0x40c90fdb
 800160c:	60000000 	.word	0x60000000
 8001610:	401921fb 	.word	0x401921fb

08001614 <update_speeds>:

void update_speeds(man_t *manip){
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b087      	sub	sp, #28
 8001618:	af02      	add	r7, sp, #8
 800161a:	6078      	str	r0, [r7, #4]
	float v_est, a_est;
	speed_estimation(&manip->q0_actual, &manip->dq0_actual,&manip->ddq0_actual, reduction1, &v_est, &a_est);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f503 709a 	add.w	r0, r3, #308	; 0x134
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f503 71c6 	add.w	r1, r3, #396	; 0x18c
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 800162e:	eddf 7a28 	vldr	s15, [pc, #160]	; 80016d0 <update_speeds+0xbc>
 8001632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001636:	f107 040c 	add.w	r4, r7, #12
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	4623      	mov	r3, r4
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	f7ff fd2f 	bl	80010a8 <speed_estimation>
	//disp1 = v_est;
	rbpush(&manip->dq0_actual, v_est);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001650:	edd7 7a03 	vldr	s15, [r7, #12]
 8001654:	eeb0 0a67 	vmov.f32	s0, s15
 8001658:	4618      	mov	r0, r3
 800165a:	f000 ffaf 	bl	80025bc <rbpush>
	rbpush(&manip->ddq0_actual, a_est);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001664:	edd7 7a02 	vldr	s15, [r7, #8]
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	4618      	mov	r0, r3
 800166e:	f000 ffa5 	bl	80025bc <rbpush>

	speed_estimation(&manip->q1_actual, &manip->dq1_actual,&manip->ddq1_actual, reduction2, &v_est, &a_est);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8001684:	eddf 7a13 	vldr	s15, [pc, #76]	; 80016d4 <update_speeds+0xc0>
 8001688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168c:	f107 040c 	add.w	r4, r7, #12
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4623      	mov	r3, r4
 8001698:	eeb0 0a67 	vmov.f32	s0, s15
 800169c:	f7ff fd04 	bl	80010a8 <speed_estimation>
	//disp2 = v_est;
	rbpush(&manip->dq1_actual, v_est);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 ff84 	bl	80025bc <rbpush>
	rbpush(&manip->ddq1_actual, a_est);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80016ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80016be:	eeb0 0a67 	vmov.f32	s0, s15
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 ff7a 	bl	80025bc <rbpush>
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	0000000a 	.word	0x0000000a
 80016d4:	00000005 	.word	0x00000005

080016d8 <apply_position_input>:
    // __HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
    // htim2->Instance->EGR = TIM_EGR_UG;
}


void apply_position_input(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, float *u){
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b08c      	sub	sp, #48	; 0x30
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
    __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
    htim1->Instance->EGR = TIM_EGR_UG;
    */
    // rad2stepdir(u[0], RESOLUTION, (float) 1/T_C, &steps, &dir);

    dir1 = u[0] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	bf4c      	ite	mi
 80016f4:	2301      	movmi	r3, #1
 80016f6:	2300      	movpl	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    // dir1 = 1; // DEBUG
    HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, dir1);
 80016fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001702:	461a      	mov	r2, r3
 8001704:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001708:	48b7      	ldr	r0, [pc, #732]	; (80019e8 <apply_position_input+0x310>)
 800170a:	f002 fa7d 	bl	8003c08 <HAL_GPIO_WritePin>

    dir2 = u[1] < 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3304      	adds	r3, #4
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	bf4c      	ite	mi
 8001720:	2301      	movmi	r3, #1
 8001722:	2300      	movpl	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    // dir2 = 1; // DEBUG
    HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, dir2);
 800172a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800172e:	461a      	mov	r2, r3
 8001730:	2102      	movs	r1, #2
 8001732:	48ae      	ldr	r0, [pc, #696]	; (80019ec <apply_position_input+0x314>)
 8001734:	f002 fa68 	bl	8003c08 <HAL_GPIO_WritePin>



     steps=(ABS(u[0])/ RESOLUTION)*reduction1*16;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	bfac      	ite	ge
 8001748:	2301      	movge	r3, #1
 800174a:	2300      	movlt	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	bf94      	ite	ls
 8001760:	2301      	movls	r3, #1
 8001762:	2300      	movhi	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	b25b      	sxtb	r3, r3
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177e:	ee17 0a90 	vmov	r0, s15
 8001782:	f7fe fe97 	bl	80004b4 <__aeabi_f2d>
 8001786:	a394      	add	r3, pc, #592	; (adr r3, 80019d8 <apply_position_input+0x300>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7ff f814 	bl	80007b8 <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4614      	mov	r4, r2
 8001796:	461d      	mov	r5, r3
 8001798:	230a      	movs	r3, #10
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe78 	bl	8000490 <__aeabi_i2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe fedc 	bl	8000564 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	4b8d      	ldr	r3, [pc, #564]	; (80019f0 <apply_position_input+0x318>)
 80017ba:	f7fe fed3 	bl	8000564 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff f967 	bl	8000a98 <__aeabi_d2uiz>
 80017ca:	4603      	mov	r3, r0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
     prescaler1=(uint16_t) HAL_RCC_GetHCLKFreq() / (PWM_FREQ_1 * 2) - 1;
 80017ce:	f002 fecb 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4a87      	ldr	r2, [pc, #540]	; (80019f4 <apply_position_input+0x31c>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	0adb      	lsrs	r3, r3, #11
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3b01      	subs	r3, #1
 80017e2:	84fb      	strh	r3, [r7, #38]	; 0x26
     ARR=((1<<32)-1);
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e8:	623b      	str	r3, [r7, #32]
     duty=steps/((M_PI*reduction1*16)/RESOLUTION);
 80017ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017ec:	f7fe fe40 	bl	8000470 <__aeabi_ui2d>
 80017f0:	4604      	mov	r4, r0
 80017f2:	460d      	mov	r5, r1
 80017f4:	230a      	movs	r3, #10
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe4a 	bl	8000490 <__aeabi_i2d>
 80017fc:	a378      	add	r3, pc, #480	; (adr r3, 80019e0 <apply_position_input+0x308>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7fe feaf 	bl	8000564 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	4b77      	ldr	r3, [pc, #476]	; (80019f0 <apply_position_input+0x318>)
 8001814:	f7fe fea6 	bl	8000564 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	a36d      	add	r3, pc, #436	; (adr r3, 80019d8 <apply_position_input+0x300>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe ffc7 	bl	80007b8 <__aeabi_ddiv>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4620      	mov	r0, r4
 8001830:	4629      	mov	r1, r5
 8001832:	f7fe ffc1 	bl	80007b8 <__aeabi_ddiv>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f94b 	bl	8000ad8 <__aeabi_d2f>
 8001842:	4603      	mov	r3, r0
 8001844:	61fb      	str	r3, [r7, #28]
     duty= duty>1 ? 1: duty;
 8001846:	edd7 7a07 	vldr	s15, [r7, #28]
 800184a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800184e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001856:	dd02      	ble.n	800185e <apply_position_input+0x186>
 8001858:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800185c:	e000      	b.n	8001860 <apply_position_input+0x188>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	61fb      	str	r3, [r7, #28]
    //ARR= steps==0 ? 0: (uint16_t) ((84000000/(10500))/steps);

    __HAL_TIM_SET_PRESCALER(htim1, prescaler1);//2625
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(htim1, ARR);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a3a      	ldr	r2, [r7, #32]
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6a3a      	ldr	r2, [r7, #32]
 8001876:	60da      	str	r2, [r3, #12]
	htim1->Instance->EGR = TIM_EGR_UG;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	615a      	str	r2, [r3, #20]
    CCR =(uint32_t) (duty*ARR );
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800188a:	edd7 7a07 	vldr	s15, [r7, #28]
 800188e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001896:	ee17 3a90 	vmov	r3, s15
 800189a:	61bb      	str	r3, [r7, #24]
	__HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
	htim1->Instance->EGR = TIM_EGR_UG;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	615a      	str	r2, [r3, #20]

	steps=(ABS(u[1])/ RESOLUTION)*reduction2*16;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3304      	adds	r3, #4
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	bfac      	ite	ge
 80018be:	2301      	movge	r3, #1
 80018c0:	2300      	movlt	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3304      	adds	r3, #4
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	bf94      	ite	ls
 80018d8:	2301      	movls	r3, #1
 80018da:	2300      	movhi	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f8:	ee17 0a90 	vmov	r0, s15
 80018fc:	f7fe fdda 	bl	80004b4 <__aeabi_f2d>
 8001900:	a335      	add	r3, pc, #212	; (adr r3, 80019d8 <apply_position_input+0x300>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe ff57 	bl	80007b8 <__aeabi_ddiv>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4614      	mov	r4, r2
 8001910:	461d      	mov	r5, r3
 8001912:	2305      	movs	r3, #5
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fdbb 	bl	8000490 <__aeabi_i2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	f7fe fe1f 	bl	8000564 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <apply_position_input+0x318>)
 8001934:	f7fe fe16 	bl	8000564 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f8aa 	bl	8000a98 <__aeabi_d2uiz>
 8001944:	4603      	mov	r3, r0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
	prescaler2=(uint16_t) HAL_RCC_GetHCLKFreq() / (PWM_FREQ_2 * 2) - 1;
 8001948:	f002 fe0e 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 800194c:	4603      	mov	r3, r0
 800194e:	b29b      	uxth	r3, r3
 8001950:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <apply_position_input+0x320>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	09db      	lsrs	r3, r3, #7
 8001958:	b29b      	uxth	r3, r3
 800195a:	3b01      	subs	r3, #1
 800195c:	82fb      	strh	r3, [r7, #22]
	//ARR=steps==0 ? 0: (uint16_t) ((84000000/(10500))/steps);
	//CCR = (steps == 0 || ARR==0 )? 0 : (ARR-1)/2;
	ARR=((1<<32)-1);
 800195e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001962:	623b      	str	r3, [r7, #32]
	duty=steps/((M_PI*reduction2*16)/RESOLUTION);
 8001964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001966:	f7fe fd83 	bl	8000470 <__aeabi_ui2d>
 800196a:	4604      	mov	r4, r0
 800196c:	460d      	mov	r5, r1
 800196e:	2305      	movs	r3, #5
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fd8d 	bl	8000490 <__aeabi_i2d>
 8001976:	a31a      	add	r3, pc, #104	; (adr r3, 80019e0 <apply_position_input+0x308>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fdf2 	bl	8000564 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <apply_position_input+0x318>)
 800198e:	f7fe fde9 	bl	8000564 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	a30f      	add	r3, pc, #60	; (adr r3, 80019d8 <apply_position_input+0x300>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe ff0a 	bl	80007b8 <__aeabi_ddiv>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4620      	mov	r0, r4
 80019aa:	4629      	mov	r1, r5
 80019ac:	f7fe ff04 	bl	80007b8 <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7ff f88e 	bl	8000ad8 <__aeabi_d2f>
 80019bc:	4603      	mov	r3, r0
 80019be:	61fb      	str	r3, [r7, #28]
	duty= duty>1 ? 1: duty;
 80019c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	dd14      	ble.n	80019fc <apply_position_input+0x324>
 80019d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019d6:	e012      	b.n	80019fe <apply_position_input+0x326>
 80019d8:	ae261898 	.word	0xae261898
 80019dc:	3fa015be 	.word	0x3fa015be
 80019e0:	54442d18 	.word	0x54442d18
 80019e4:	400921fb 	.word	0x400921fb
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020000 	.word	0x40020000
 80019f0:	40300000 	.word	0x40300000
 80019f4:	91a2b3c5 	.word	0x91a2b3c5
 80019f8:	10624dd3 	.word	0x10624dd3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	61fb      	str	r3, [r7, #28]
	__HAL_TIM_SET_PRESCALER(htim2, prescaler2);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	8afa      	ldrh	r2, [r7, #22]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(htim2, ARR);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6a3a      	ldr	r2, [r7, #32]
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	6a3a      	ldr	r2, [r7, #32]
 8001a14:	60da      	str	r2, [r3, #12]
	htim2->Instance->EGR = TIM_EGR_UG;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	615a      	str	r2, [r3, #20]
	CCR =(uint32_t) (duty*ARR );
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a28:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a34:	ee17 3a90 	vmov	r3, s15
 8001a38:	61bb      	str	r3, [r7, #24]
	__HAL_TIM_SET_COMPARE(htim2, TIM_CHANNEL_1, CCR);
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
	htim2->Instance->EGR = TIM_EGR_UG;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	615a      	str	r2, [r3, #20]



}
 8001a4a:	bf00      	nop
 8001a4c:	3730      	adds	r7, #48	; 0x30
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdb0      	pop	{r4, r5, r7, pc}
 8001a52:	bf00      	nop

08001a54 <start_timers>:



void start_timers(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, TIM_HandleTypeDef *htim4){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
    HAL_TIM_Base_Start_IT(htim1);
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f002 fe04 	bl	8004670 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim2);
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f002 fe01 	bl	8004670 <HAL_TIM_Base_Start_IT>
    /* start motor PWM */
    HAL_TIM_Base_Start_IT(htim3);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f002 fdfe 	bl	8004670 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(htim4);
 8001a74:	6838      	ldr	r0, [r7, #0]
 8001a76:	f002 fdfb 	bl	8004670 <HAL_TIM_Base_Start_IT>
    /* start PWM */
    if(HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1) != HAL_OK){
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f002 fea9 	bl	80047d4 <HAL_TIM_PWM_Start>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <start_timers+0x38>
        HardFault_Handler();
 8001a88:	f001 f8c9 	bl	8002c1e <HardFault_Handler>
    }
    if(HAL_TIM_PWM_Start(htim4, TIM_CHANNEL_1) != HAL_OK){
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	6838      	ldr	r0, [r7, #0]
 8001a90:	f002 fea0 	bl	80047d4 <HAL_TIM_PWM_Start>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <start_timers+0x4a>
        HardFault_Handler();
 8001a9a:	f001 f8c0 	bl	8002c1e <HardFault_Handler>
    }
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <setup_encoders>:
    sprintf(tx_data, "%X:%X:%X:%X:%X\n", (unsigned long long int) timestamp, encoding_q0, encoding_q1, encoding_q0_d, encoding_q1_d); /*Timestamp:q0:q1*/
    HAL_UART_Transmit_DMA(huart, (uint8_t *) tx_data, sizeof tx_data); /* send encoder data for logging purposes */
}


void setup_encoders(TIM_HandleTypeDef *htim){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	const uint32_t clock_freq = 84000000;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <setup_encoders+0x78>)
 8001ab2:	60fb      	str	r3, [r7, #12]
	uint16_t ARR;
	ARR = (T_S*clock_freq)/PRESCALER_ENCODER;
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7fe fcdb 	bl	8000470 <__aeabi_ui2d>
 8001aba:	a317      	add	r3, pc, #92	; (adr r3, 8001b18 <setup_encoders+0x70>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fd50 	bl	8000564 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <setup_encoders+0x7c>)
 8001ad2:	f7fe fe71 	bl	80007b8 <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7fe ffdb 	bl	8000a98 <__aeabi_d2uiz>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_PRESCALER(htim, PRESCALER_ENCODER);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2210      	movs	r2, #16
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	897a      	ldrh	r2, [r7, #10]
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001af6:	897a      	ldrh	r2, [r7, #10]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	60da      	str	r2, [r3, #12]
	htim->Instance->EGR = TIM_EGR_UG;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f002 fdb3 	bl	8004670 <HAL_TIM_Base_Start_IT>
}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b1c:	3f60624d 	.word	0x3f60624d
 8001b20:	0501bd00 	.word	0x0501bd00
 8001b24:	40300000 	.word	0x40300000

08001b28 <PID_controller>:




void PID_controller(man_t *manip, pid_controller_t *pid1,pid_controller_t *pid2, float *u){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]

	float set_point1,set_point2,measure1, measure2;

	rbpeek(&manip->dq0,&set_point1);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3358      	adds	r3, #88	; 0x58
 8001b3a:	f107 021c 	add.w	r2, r7, #28
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fd85 	bl	8002650 <rbpeek>
	rbpeek(&manip->dq1,&set_point2);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3384      	adds	r3, #132	; 0x84
 8001b4a:	f107 0218 	add.w	r2, r7, #24
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fd7d 	bl	8002650 <rbpeek>
	//ddq_actual0=set_point1;
	//ddq_actual1=set_point2;



	rblast(&manip->dq0_actual,&measure1);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b5c:	f107 0214 	add.w	r2, r7, #20
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fd98 	bl	8002698 <rblast>
	rblast(&manip->dq1_actual,&measure2);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b6e:	f107 0210 	add.w	r2, r7, #16
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fd8f 	bl	8002698 <rblast>


	PID_update(pid1,set_point1, measure1,T_C);
 8001b7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b82:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8001bc8 <PID_controller+0xa0>
 8001b86:	eef0 0a47 	vmov.f32	s1, s14
 8001b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8e:	68b8      	ldr	r0, [r7, #8]
 8001b90:	f000 fc32 	bl	80023f8 <PID_update>
	PID_update(pid2,set_point2, measure2,T_C);
 8001b94:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b98:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b9c:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8001bc8 <PID_controller+0xa0>
 8001ba0:	eef0 0a47 	vmov.f32	s1, s14
 8001ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fc25 	bl	80023f8 <PID_update>

	*u=pid1->out;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
	*(u+1)=pid2->out;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bbe:	601a      	str	r2, [r3, #0]


}
 8001bc0:	bf00      	nop
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	3c23d70a 	.word	0x3c23d70a

08001bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  rate_t rate;
  float v[2], v_est, a_est;
   char *data = "\n";
 8001bd2:	4b4e      	ldr	r3, [pc, #312]	; (8001d0c <main+0x140>)
 8001bd4:	617b      	str	r3, [r7, #20]
  float i = 1*T_C;
 8001bd6:	4b4e      	ldr	r3, [pc, #312]	; (8001d10 <main+0x144>)
 8001bd8:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bda:	f001 f8cf 	bl	8002d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bde:	f000 f8d3 	bl	8001d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be2:	f000 fb0b 	bl	80021fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001be6:	f000 fae1 	bl	80021ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001bea:	f000 fab5 	bl	8002158 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001bee:	f000 f98d 	bl	8001f0c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bf2:	f000 f9df 	bl	8001fb4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001bf6:	f000 f931 	bl	8001e5c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001bfa:	f000 fa2f 	bl	800205c <MX_TIM5_Init>
  MX_TIM10_Init();
 8001bfe:	f000 fa87 	bl	8002110 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip, &htim3, &htim4); /* initialize the manipulator struct */
 8001c02:	4a44      	ldr	r2, [pc, #272]	; (8001d14 <main+0x148>)
 8001c04:	4944      	ldr	r1, [pc, #272]	; (8001d18 <main+0x14c>)
 8001c06:	4845      	ldr	r0, [pc, #276]	; (8001d1c <main+0x150>)
 8001c08:	f7ff fa10 	bl	800102c <init_man>

  PID_init(&pid1,KP1,TI1,TD1,N1); /*initialize the pid controllers*/
 8001c0c:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001c10:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8001d20 <main+0x154>
 8001c14:	eddf 0a42 	vldr	s1, [pc, #264]	; 8001d20 <main+0x154>
 8001c18:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8001d24 <main+0x158>
 8001c1c:	4842      	ldr	r0, [pc, #264]	; (8001d28 <main+0x15c>)
 8001c1e:	f000 fb8c 	bl	800233a <PID_init>
  PID_init(&pid2,KP2,TI2,TD2,N2);
 8001c22:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001c26:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8001d20 <main+0x154>
 8001c2a:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8001d20 <main+0x154>
 8001c2e:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8001d2c <main+0x160>
 8001c32:	483f      	ldr	r0, [pc, #252]	; (8001d30 <main+0x164>)
 8001c34:	f000 fb81 	bl	800233a <PID_init>

  set_limit(&pid1,-4*M_PI,4*M_PI,-M_PI/2,M_PI/2);/*initialize the pid controllers output limits*/
 8001c38:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8001d34 <main+0x168>
 8001c3c:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8001d38 <main+0x16c>
 8001c40:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8001d3c <main+0x170>
 8001c44:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8001d40 <main+0x174>
 8001c48:	4837      	ldr	r0, [pc, #220]	; (8001d28 <main+0x15c>)
 8001c4a:	f000 fbb5 	bl	80023b8 <set_limit>
  set_limit(&pid2,-2*M_PI,2*M_PI,-M_PI/2,M_PI/2);
 8001c4e:	eddf 1a39 	vldr	s3, [pc, #228]	; 8001d34 <main+0x168>
 8001c52:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8001d38 <main+0x16c>
 8001c56:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8001d44 <main+0x178>
 8001c5a:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8001d48 <main+0x17c>
 8001c5e:	4834      	ldr	r0, [pc, #208]	; (8001d30 <main+0x164>)
 8001c60:	f000 fbaa 	bl	80023b8 <set_limit>



  init_rate(&rate, (uint32_t) (T_C*1000)); /* initialize the rate struct */
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	210a      	movs	r1, #10
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fb8c 	bl	8001388 <init_rate>
  rbclear(&timestamps);
 8001c70:	4836      	ldr	r0, [pc, #216]	; (8001d4c <main+0x180>)
 8001c72:	f000 fd81 	bl	8002778 <rbclear>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8001c76:	2278      	movs	r2, #120	; 0x78
 8001c78:	4935      	ldr	r1, [pc, #212]	; (8001d50 <main+0x184>)
 8001c7a:	4836      	ldr	r0, [pc, #216]	; (8001d54 <main+0x188>)
 8001c7c:	f003 fbf3 	bl	8005466 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* start timers */
  start_timers(&htim3, &htim4, &htim2, &htim5);
 8001c80:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <main+0x18c>)
 8001c82:	4a36      	ldr	r2, [pc, #216]	; (8001d5c <main+0x190>)
 8001c84:	4923      	ldr	r1, [pc, #140]	; (8001d14 <main+0x148>)
 8001c86:	4824      	ldr	r0, [pc, #144]	; (8001d18 <main+0x14c>)
 8001c88:	f7ff fee4 	bl	8001a54 <start_timers>
  setup_encoders(&htim10);
 8001c8c:	4834      	ldr	r0, [pc, #208]	; (8001d60 <main+0x194>)
 8001c8e:	f7ff ff0b 	bl	8001aa8 <setup_encoders>

  while (1)
  {
    // read_encoders(&htim3, &htim4, &manip);
    update_speeds(&manip);
 8001c92:	4822      	ldr	r0, [pc, #136]	; (8001d1c <main+0x150>)
 8001c94:	f7ff fcbe 	bl	8001614 <update_speeds>
    }
    else {
    	v[0]=0;
    }*/

    PID_controller( &manip, &pid1, &pid2, &v);
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <main+0x164>)
 8001c9c:	4922      	ldr	r1, [pc, #136]	; (8001d28 <main+0x15c>)
 8001c9e:	481f      	ldr	r0, [pc, #124]	; (8001d1c <main+0x150>)
 8001ca0:	f7ff ff42 	bl	8001b28 <PID_controller>




    ddq_actual0 = v[0];
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4a2f      	ldr	r2, [pc, #188]	; (8001d64 <main+0x198>)
 8001ca8:	6013      	str	r3, [r2, #0]
    ddq_actual1= v[1];
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a2e      	ldr	r2, [pc, #184]	; (8001d68 <main+0x19c>)
 8001cae:	6013      	str	r3, [r2, #0]
    rblast(&manip.dq0_actual,&dq_actual0);
 8001cb0:	492e      	ldr	r1, [pc, #184]	; (8001d6c <main+0x1a0>)
 8001cb2:	482f      	ldr	r0, [pc, #188]	; (8001d70 <main+0x1a4>)
 8001cb4:	f000 fcf0 	bl	8002698 <rblast>
    rblast(&manip.dq1_actual,&dq_actual1);
 8001cb8:	492e      	ldr	r1, [pc, #184]	; (8001d74 <main+0x1a8>)
 8001cba:	482f      	ldr	r0, [pc, #188]	; (8001d78 <main+0x1ac>)
 8001cbc:	f000 fcec 	bl	8002698 <rblast>
    // *((float *) tx_data+1) = v[1];
    // tx_data[16] = '\n';
    // HAL_UART_Transmit_DMA(&huart2, &tx_data, 17);
    // !SECTION DEBUG

    apply_position_input(&htim2, &htim5, v);
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4924      	ldr	r1, [pc, #144]	; (8001d58 <main+0x18c>)
 8001cc6:	4825      	ldr	r0, [pc, #148]	; (8001d5c <main+0x190>)
 8001cc8:	f7ff fd06 	bl	80016d8 <apply_position_input>

    disp1=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15);
 8001ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd0:	482a      	ldr	r0, [pc, #168]	; (8001d7c <main+0x1b0>)
 8001cd2:	f001 ff81 	bl	8003bd8 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <main+0x1b4>)
 8001ce2:	edc3 7a00 	vstr	s15, [r3]
    disp2=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4824      	ldr	r0, [pc, #144]	; (8001d7c <main+0x1b0>)
 8001cea:	f001 ff75 	bl	8003bd8 <HAL_GPIO_ReadPin>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <main+0x1b8>)
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    rate_sleep(&rate); /* wait with a fixed frequency */
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fb51 	bl	80013aa <rate_sleep>
    update_speeds(&manip);
 8001d08:	e7c3      	b.n	8001c92 <main+0xc6>
 8001d0a:	bf00      	nop
 8001d0c:	0800693c 	.word	0x0800693c
 8001d10:	3c23d70a 	.word	0x3c23d70a
 8001d14:	200004e0 	.word	0x200004e0
 8001d18:	20000498 	.word	0x20000498
 8001d1c:	20000108 	.word	0x20000108
 8001d20:	3ba3d70a 	.word	0x3ba3d70a
 8001d24:	40733333 	.word	0x40733333
 8001d28:	20000398 	.word	0x20000398
 8001d2c:	3fe66666 	.word	0x3fe66666
 8001d30:	200003cc 	.word	0x200003cc
 8001d34:	3fc90fdb 	.word	0x3fc90fdb
 8001d38:	bfc90fdb 	.word	0xbfc90fdb
 8001d3c:	41490fdb 	.word	0x41490fdb
 8001d40:	c1490fdb 	.word	0xc1490fdb
 8001d44:	40c90fdb 	.word	0x40c90fdb
 8001d48:	c0c90fdb 	.word	0xc0c90fdb
 8001d4c:	20000408 	.word	0x20000408
 8001d50:	20000090 	.word	0x20000090
 8001d54:	200005b8 	.word	0x200005b8
 8001d58:	20000528 	.word	0x20000528
 8001d5c:	20000450 	.word	0x20000450
 8001d60:	20000570 	.word	0x20000570
 8001d64:	20000444 	.word	0x20000444
 8001d68:	20000448 	.word	0x20000448
 8001d6c:	2000043c 	.word	0x2000043c
 8001d70:	20000294 	.word	0x20000294
 8001d74:	20000440 	.word	0x20000440
 8001d78:	200002c0 	.word	0x200002c0
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	20000434 	.word	0x20000434
 8001d84:	20000438 	.word	0x20000438

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b094      	sub	sp, #80	; 0x50
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 0320 	add.w	r3, r7, #32
 8001d92:	2230      	movs	r2, #48	; 0x30
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 fc56 	bl	8006648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <SystemClock_Config+0xcc>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <SystemClock_Config+0xcc>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <SystemClock_Config+0xcc>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <SystemClock_Config+0xd0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <SystemClock_Config+0xd0>)
 8001dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <SystemClock_Config+0xd0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001de4:	2302      	movs	r3, #2
 8001de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001de8:	2301      	movs	r3, #1
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dec:	2310      	movs	r3, #16
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df0:	2302      	movs	r3, #2
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001df4:	2300      	movs	r3, #0
 8001df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001df8:	2310      	movs	r3, #16
 8001dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001dfc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e02:	2304      	movs	r3, #4
 8001e04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e06:	2304      	movs	r3, #4
 8001e08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0a:	f107 0320 	add.w	r3, r7, #32
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 ff46 	bl	8003ca0 <HAL_RCC_OscConfig>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e1a:	f000 fa89 	bl	8002330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e1e:	230f      	movs	r3, #15
 8001e20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e22:	2302      	movs	r3, #2
 8001e24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	2102      	movs	r1, #2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 f9a8 	bl	8004190 <HAL_RCC_ClockConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e46:	f000 fa73 	bl	8002330 <Error_Handler>
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3750      	adds	r7, #80	; 0x50
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40007000 	.word	0x40007000

08001e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e62:	f107 0320 	add.w	r3, r7, #32
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]
 8001e7a:	615a      	str	r2, [r3, #20]
 8001e7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <MX_TIM2_Init+0xac>)
 8001e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <MX_TIM2_Init+0xac>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <MX_TIM2_Init+0xac>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <MX_TIM2_Init+0xac>)
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <MX_TIM2_Init+0xac>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea0:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <MX_TIM2_Init+0xac>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ea6:	4818      	ldr	r0, [pc, #96]	; (8001f08 <MX_TIM2_Init+0xac>)
 8001ea8:	f002 fc44 	bl	8004734 <HAL_TIM_PWM_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001eb2:	f000 fa3d 	bl	8002330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ebe:	f107 0320 	add.w	r3, r7, #32
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4810      	ldr	r0, [pc, #64]	; (8001f08 <MX_TIM2_Init+0xac>)
 8001ec6:	f003 f9ff 	bl	80052c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001ed0:	f000 fa2e 	bl	8002330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed4:	2360      	movs	r3, #96	; 0x60
 8001ed6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4807      	ldr	r0, [pc, #28]	; (8001f08 <MX_TIM2_Init+0xac>)
 8001eec:	f002 fed0 	bl	8004c90 <HAL_TIM_PWM_ConfigChannel>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001ef6:	f000 fa1b 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001efa:	4803      	ldr	r0, [pc, #12]	; (8001f08 <MX_TIM2_Init+0xac>)
 8001efc:	f000 fd76 	bl	80029ec <HAL_TIM_MspPostInit>

}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000450 	.word	0x20000450

08001f0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	; 0x30
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	2224      	movs	r2, #36	; 0x24
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 fb94 	bl	8006648 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f2a:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <MX_TIM3_Init+0xa4>)
 8001f2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f3c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001f40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f56:	2301      	movs	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f66:	2301      	movs	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	4619      	mov	r1, r3
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f7a:	f002 fcdb 	bl	8004934 <HAL_TIM_Encoder_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f84:	f000 f9d4 	bl	8002330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_TIM3_Init+0xa0>)
 8001f96:	f003 f997 	bl	80052c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001fa0:	f000 f9c6 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	3730      	adds	r7, #48	; 0x30
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000498 	.word	0x20000498
 8001fb0:	40000400 	.word	0x40000400

08001fb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	2224      	movs	r2, #36	; 0x24
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 fb40 	bl	8006648 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <MX_TIM4_Init+0xa0>)
 8001fd2:	4a21      	ldr	r2, [pc, #132]	; (8002058 <MX_TIM4_Init+0xa4>)
 8001fd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <MX_TIM4_Init+0xa0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <MX_TIM4_Init+0xa0>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <MX_TIM4_Init+0xa0>)
 8001fe4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001fe8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MX_TIM4_Init+0xa0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <MX_TIM4_Init+0xa0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ffe:	2301      	movs	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800200e:	2301      	movs	r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	4619      	mov	r1, r3
 8002020:	480c      	ldr	r0, [pc, #48]	; (8002054 <MX_TIM4_Init+0xa0>)
 8002022:	f002 fc87 	bl	8004934 <HAL_TIM_Encoder_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800202c:	f000 f980 	bl	8002330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_TIM4_Init+0xa0>)
 800203e:	f003 f943 	bl	80052c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002048:	f000 f972 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	3730      	adds	r7, #48	; 0x30
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200004e0 	.word	0x200004e0
 8002058:	40000800 	.word	0x40000800

0800205c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002062:	f107 0320 	add.w	r3, r7, #32
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	615a      	str	r2, [r3, #20]
 800207c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <MX_TIM5_Init+0xac>)
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <MX_TIM5_Init+0xb0>)
 8002082:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002084:	4b20      	ldr	r3, [pc, #128]	; (8002108 <MX_TIM5_Init+0xac>)
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <MX_TIM5_Init+0xac>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_TIM5_Init+0xac>)
 8002092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002096:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_TIM5_Init+0xac>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_TIM5_Init+0xac>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020a4:	4818      	ldr	r0, [pc, #96]	; (8002108 <MX_TIM5_Init+0xac>)
 80020a6:	f002 fb45 	bl	8004734 <HAL_TIM_PWM_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80020b0:	f000 f93e 	bl	8002330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020bc:	f107 0320 	add.w	r3, r7, #32
 80020c0:	4619      	mov	r1, r3
 80020c2:	4811      	ldr	r0, [pc, #68]	; (8002108 <MX_TIM5_Init+0xac>)
 80020c4:	f003 f900 	bl	80052c8 <HAL_TIMEx_MasterConfigSynchronization>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80020ce:	f000 f92f 	bl	8002330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d2:	2360      	movs	r3, #96	; 0x60
 80020d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	4619      	mov	r1, r3
 80020e8:	4807      	ldr	r0, [pc, #28]	; (8002108 <MX_TIM5_Init+0xac>)
 80020ea:	f002 fdd1 	bl	8004c90 <HAL_TIM_PWM_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80020f4:	f000 f91c 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <MX_TIM5_Init+0xac>)
 80020fa:	f000 fc77 	bl	80029ec <HAL_TIM_MspPostInit>

}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	; 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000528 	.word	0x20000528
 800210c:	40000c00 	.word	0x40000c00

08002110 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_TIM10_Init+0x40>)
 8002116:	4a0f      	ldr	r2, [pc, #60]	; (8002154 <MX_TIM10_Init+0x44>)
 8002118:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16;
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <MX_TIM10_Init+0x40>)
 800211c:	2210      	movs	r2, #16
 800211e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <MX_TIM10_Init+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 52500;
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <MX_TIM10_Init+0x40>)
 8002128:	f64c 5214 	movw	r2, #52500	; 0xcd14
 800212c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <MX_TIM10_Init+0x40>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_TIM10_Init+0x40>)
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_TIM10_Init+0x40>)
 800213c:	f002 fa48 	bl	80045d0 <HAL_TIM_Base_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002146:	f000 f8f3 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000570 	.word	0x20000570
 8002154:	40014400 	.word	0x40014400

08002158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_USART2_UART_Init+0x4c>)
 800215e:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <MX_USART2_UART_Init+0x50>)
 8002160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <MX_USART2_UART_Init+0x4c>)
 8002164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_USART2_UART_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <MX_USART2_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_USART2_UART_Init+0x4c>)
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <MX_USART2_UART_Init+0x4c>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_USART2_UART_Init+0x4c>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_USART2_UART_Init+0x4c>)
 8002190:	f003 f91c 	bl	80053cc <HAL_UART_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800219a:	f000 f8c9 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200005b8 	.word	0x200005b8
 80021a8:	40004400 	.word	0x40004400

080021ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_DMA_Init+0x4c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a0f      	ldr	r2, [pc, #60]	; (80021f8 <MX_DMA_Init+0x4c>)
 80021bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <MX_DMA_Init+0x4c>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2010      	movs	r0, #16
 80021d4:	f000 ff43 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021d8:	2010      	movs	r0, #16
 80021da:	f000 ff5c 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2011      	movs	r0, #17
 80021e4:	f000 ff3b 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021e8:	2011      	movs	r0, #17
 80021ea:	f000 ff54 	bl	8003096 <HAL_NVIC_EnableIRQ>

}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800

080021fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b43      	ldr	r3, [pc, #268]	; (8002324 <MX_GPIO_Init+0x128>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a42      	ldr	r2, [pc, #264]	; (8002324 <MX_GPIO_Init+0x128>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b40      	ldr	r3, [pc, #256]	; (8002324 <MX_GPIO_Init+0x128>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <MX_GPIO_Init+0x128>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a3b      	ldr	r2, [pc, #236]	; (8002324 <MX_GPIO_Init+0x128>)
 8002238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b39      	ldr	r3, [pc, #228]	; (8002324 <MX_GPIO_Init+0x128>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b35      	ldr	r3, [pc, #212]	; (8002324 <MX_GPIO_Init+0x128>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a34      	ldr	r2, [pc, #208]	; (8002324 <MX_GPIO_Init+0x128>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b32      	ldr	r3, [pc, #200]	; (8002324 <MX_GPIO_Init+0x128>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <MX_GPIO_Init+0x128>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <MX_GPIO_Init+0x128>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <MX_GPIO_Init+0x128>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	2122      	movs	r1, #34	; 0x22
 8002286:	4828      	ldr	r0, [pc, #160]	; (8002328 <MX_GPIO_Init+0x12c>)
 8002288:	f001 fcbe 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 800228c:	2200      	movs	r2, #0
 800228e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002292:	4826      	ldr	r0, [pc, #152]	; (800232c <MX_GPIO_Init+0x130>)
 8002294:	f001 fcb8 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800229e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	481f      	ldr	r0, [pc, #124]	; (800232c <MX_GPIO_Init+0x130>)
 80022b0:	f001 fb0e 	bl	80038d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_2_Pin|LD2_Pin;
 80022b4:	2322      	movs	r3, #34	; 0x22
 80022b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b8:	2301      	movs	r3, #1
 80022ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4619      	mov	r1, r3
 80022ca:	4817      	ldr	r0, [pc, #92]	; (8002328 <MX_GPIO_Init+0x12c>)
 80022cc:	f001 fb00 	bl	80038d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|LIMIT_SWITCH_2_Pin;
 80022d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022dc:	2301      	movs	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4810      	ldr	r0, [pc, #64]	; (8002328 <MX_GPIO_Init+0x12c>)
 80022e8:	f001 faf2 	bl	80038d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_1_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin;
 80022ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f2:	2301      	movs	r3, #1
 80022f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_1_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	4809      	ldr	r0, [pc, #36]	; (800232c <MX_GPIO_Init+0x130>)
 8002306:	f001 fae3 	bl	80038d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	2028      	movs	r0, #40	; 0x28
 8002310:	f000 fea5 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002314:	2028      	movs	r0, #40	; 0x28
 8002316:	f000 febe 	bl	8003096 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40020000 	.word	0x40020000
 800232c:	40020800 	.word	0x40020800

08002330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002334:	b672      	cpsid	i
}
 8002336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002338:	e7fe      	b.n	8002338 <Error_Handler+0x8>

0800233a <PID_init>:

*/



int PID_init(pid_controller_t *pid, float KP,float TI, float TD, float N){
 800233a:	b480      	push	{r7}
 800233c:	b087      	sub	sp, #28
 800233e:	af00      	add	r7, sp, #0
 8002340:	6178      	str	r0, [r7, #20]
 8002342:	ed87 0a04 	vstr	s0, [r7, #16]
 8002346:	edc7 0a03 	vstr	s1, [r7, #12]
 800234a:	ed87 1a02 	vstr	s2, [r7, #8]
 800234e:	edc7 1a01 	vstr	s3, [r7, #4]

	pid->Kp= KP;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	601a      	str	r2, [r3, #0]
	pid->Ti=TI;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	605a      	str	r2, [r3, #4]
	pid->Td=TD;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	609a      	str	r2, [r3, #8]
	pid->N=N;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	60da      	str	r2, [r3, #12]

	pid->integrator=0.f;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	619a      	str	r2, [r3, #24]
	pid->derivative=0.f;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
	pid->prev_err=0.f;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	611a      	str	r2, [r3, #16]

	pid->out=0.f;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	631a      	str	r2, [r3, #48]	; 0x30


	/*NB the limit must be set using the proper method */
	pid->lim_out_min=0.f;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	621a      	str	r2, [r3, #32]
	pid->lim_out_max=0.f;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

	pid->lim_integ_min=0.f;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
	pid->lim_integ_max=0.f;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c




	return 0;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <set_limit>:
- float lim_out_max;
- float lim_integ_min;
- float lim_integ_max ;

*/
int set_limit(pid_controller_t *pid, float lim_out_min, float lim_out_max, float lim_integ_min,float lim_integ_max ){
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6178      	str	r0, [r7, #20]
 80023c0:	ed87 0a04 	vstr	s0, [r7, #16]
 80023c4:	edc7 0a03 	vstr	s1, [r7, #12]
 80023c8:	ed87 1a02 	vstr	s2, [r7, #8]
 80023cc:	edc7 1a01 	vstr	s3, [r7, #4]

	pid->lim_out_min=lim_out_min;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	621a      	str	r2, [r3, #32]
	pid->lim_out_max=lim_out_max;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

	pid->lim_integ_min=lim_integ_min;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	629a      	str	r2, [r3, #40]	; 0x28
	pid->lim_integ_max=lim_integ_max;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c


	return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <PID_update>:
@outputs:
pid->out: contain the value calculated by the controller

*/

int PID_update(pid_controller_t *pid, float set_point , float measure, float T_C){
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	ed87 0a02 	vstr	s0, [r7, #8]
 8002404:	edc7 0a01 	vstr	s1, [r7, #4]
 8002408:	ed87 1a00 	vstr	s2, [r7]

	float u=0.f;
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
	float error=0.f;
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
	float proportional=0.f;
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
	float alpha= pid->Td/T_C;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	edd3 6a02 	vldr	s13, [r3, #8]
 8002424:	ed97 7a00 	vldr	s14, [r7]
 8002428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800242c:	edc7 7a04 	vstr	s15, [r7, #16]


    /* calculate the error*/
	error=set_point-measure;
 8002430:	ed97 7a02 	vldr	s14, [r7, #8]
 8002434:	edd7 7a01 	vldr	s15, [r7, #4]
 8002438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800243c:	edc7 7a06 	vstr	s15, [r7, #24]



	/* proportional contribute*/

	proportional= pid->Kp*error;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	ed97 7a06 	vldr	s14, [r7, #24]
 800244a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244e:	edc7 7a05 	vstr	s15, [r7, #20]

	/*integral contribute*/

	pid->integrator+=(pid->Kp/pid->Ti)*0.5f*T_C*(error-pid->prev_err);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	ed93 7a06 	vldr	s14, [r3, #24]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	ed93 6a00 	vldr	s12, [r3]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	edd3 6a01 	vldr	s13, [r3, #4]
 8002464:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002468:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800246c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002470:	edd7 7a00 	vldr	s15, [r7]
 8002474:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	edd3 7a04 	vldr	s15, [r3, #16]
 800247e:	ed97 6a06 	vldr	s12, [r7, #24]
 8002482:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800248a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	edc3 7a06 	vstr	s15, [r3, #24]

	/* try of anti wind-up*/

	if(pid->integrator > pid->lim_integ_max){
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	ed93 7a06 	vldr	s14, [r3, #24]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80024a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a8:	dd04      	ble.n	80024b4 <PID_update+0xbc>

		pid->integrator=pid->lim_integ_max;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	619a      	str	r2, [r3, #24]
 80024b2:	e00e      	b.n	80024d2 <PID_update+0xda>

	}else if(pid->integrator < pid->lim_integ_min)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	ed93 7a06 	vldr	s14, [r3, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80024c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c8:	d503      	bpl.n	80024d2 <PID_update+0xda>
	{
		pid->integrator=pid->lim_integ_min;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	619a      	str	r2, [r3, #24]
	}


	/*derivative contribute*/
	pid->derivative= (2*(pid->Kp)*alpha*error - pid->derivative*(1-(2*alpha)/pid->N))/(1+(2*alpha)/pid->N);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80024dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80024e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80024e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	edd3 6a07 	vldr	s13, [r3, #28]
 80024f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80024f6:	ee77 5aa7 	vadd.f32	s11, s15, s15
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	ed93 6a03 	vldr	s12, [r3, #12]
 8002500:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002504:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002508:	ee76 7a67 	vsub.f32	s15, s12, s15
 800250c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002510:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002514:	edd7 7a04 	vldr	s15, [r7, #16]
 8002518:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002522:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8002526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800252a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800252e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	edc3 7a07 	vstr	s15, [r3, #28]

	/* output  */

	u=proportional+pid->integrator+0*pid->derivative;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	ed93 7a06 	vldr	s14, [r3, #24]
 800253e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002542:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	edd3 7a07 	vldr	s15, [r3, #28]
 800254c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80025b8 <PID_update+0x1c0>
 8002550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002558:	edc7 7a07 	vstr	s15, [r7, #28]


	if(u>pid->lim_out_max)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002562:	ed97 7a07 	vldr	s14, [r7, #28]
 8002566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	dd04      	ble.n	800257a <PID_update+0x182>
	{
		pid->out=pid->lim_out_max;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
 8002578:	e011      	b.n	800259e <PID_update+0x1a6>
	}else if(u<pid->lim_out_min){
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002580:	ed97 7a07 	vldr	s14, [r7, #28]
 8002584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258c:	d504      	bpl.n	8002598 <PID_update+0x1a0>

		pid->out=pid->lim_out_min;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a1a      	ldr	r2, [r3, #32]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
 8002596:	e002      	b.n	800259e <PID_update+0x1a6>

	}else{
		pid->out=u;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
	}


	pid->prev_err=error;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	611a      	str	r2, [r3, #16]
	pid->prev_meas=measure;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	615a      	str	r2, [r3, #20]

	return 0;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3724      	adds	r7, #36	; 0x24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	00000000 	.word	0x00000000

080025bc <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3304      	adds	r3, #4
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	4b18      	ldr	r3, [pc, #96]	; (800264c <rbpush+0x90>)
 80025ea:	fba3 1302 	umull	r1, r3, r3, r2
 80025ee:	08d9      	lsrs	r1, r3, #3
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	789b      	ldrb	r3, [r3, #2]
 8002604:	2b0a      	cmp	r3, #10
 8002606:	d114      	bne.n	8002632 <rbpush+0x76>
        /* overwriting data: also move head forward */
        buffer->head++;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	785b      	ldrb	r3, [r3, #1]
 800260c:	3301      	adds	r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	785a      	ldrb	r2, [r3, #1]
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <rbpush+0x90>)
 800261a:	fba3 1302 	umull	r1, r3, r3, r2
 800261e:	08d9      	lsrs	r1, r3, #3
 8002620:	460b      	mov	r3, r1
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	b2da      	uxtb	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	705a      	strb	r2, [r3, #1]
 8002630:	e005      	b.n	800263e <rbpush+0x82>
    }else{
        buffer->length++;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	789b      	ldrb	r3, [r3, #2]
 8002636:	3301      	adds	r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	cccccccd 	.word	0xcccccccd

08002650 <rbpeek>:
- rbelement_t *data: pointer to the variable that will hold the value;
@outputs: 
- rberror_t: whether the operation was concluded successfully or not;
@#
*/
rberror_t rbpeek(ringbuffer_t *buffer, rbelement_t *data){
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	789b      	ldrb	r3, [r3, #2]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10a      	bne.n	8002678 <rbpeek+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	3304      	adds	r3, #4
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	601a      	str	r2, [r3, #0]
        return 0; /* peek operation could not be completed because the buffer is empty */
 8002674:	2300      	movs	r3, #0
 8002676:	e009      	b.n	800268c <rbpeek+0x3c>
    }
    *data = buffer->buffer[buffer->head];
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	3304      	adds	r3, #4
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	601a      	str	r2, [r3, #0]
    return 1;
 800268a:	2301      	movs	r3, #1
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <rblast>:
- rbelement_t *data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	789b      	ldrb	r3, [r3, #2]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10a      	bne.n	80026c0 <rblast+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3304      	adds	r3, #4
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	601a      	str	r2, [r3, #0]
        return 0; // operation failed
 80026bc:	2300      	movs	r3, #0
 80026be:	e015      	b.n	80026ec <rblast+0x54>
    }
    // uint8_t index = (uint8_t) ((buffer->tail-1+RBUF_SZ)%RBUF_SZ);
    int8_t index = buffer->tail-1;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
 80026ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	da03      	bge.n	80026da <rblast+0x42>
    	index += RBUF_SZ;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	330a      	adds	r3, #10
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	73fb      	strb	r3, [r7, #15]
    }
    *data = buffer->buffer[(uint8_t) index];
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	3304      	adds	r3, #4
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	601a      	str	r2, [r3, #0]
    return 1;
 80026ea:	2301      	movs	r3, #1
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <rbget>:


rberror_t rbget(ringbuffer_t *buffer, int8_t i, rbelement_t *data){
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	460b      	mov	r3, r1
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 8002706:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db05      	blt.n	800271a <rbget+0x22>
 800270e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	7892      	ldrb	r2, [r2, #2]
 8002716:	4293      	cmp	r3, r2
 8002718:	db0a      	blt.n	8002730 <rbget+0x38>
        /* out of bounds */
    	*data =  buffer->buffer[buffer->head];
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	3304      	adds	r3, #4
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	601a      	str	r2, [r3, #0]
        return 0;
 800272c:	2300      	movs	r3, #0
 800272e:	e01b      	b.n	8002768 <rbget+0x70>
    }
    uint8_t index = (uint8_t) ((buffer->head+i) % RBUF_SZ);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	461a      	mov	r2, r3
 8002736:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800273a:	441a      	add	r2, r3
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <rbget+0x7c>)
 800273e:	fb83 1302 	smull	r1, r3, r3, r2
 8002742:	1099      	asrs	r1, r3, #2
 8002744:	17d3      	asrs	r3, r2, #31
 8002746:	1ac9      	subs	r1, r1, r3
 8002748:	460b      	mov	r3, r1
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	1ad1      	subs	r1, r2, r3
 8002752:	460b      	mov	r3, r1
 8002754:	75fb      	strb	r3, [r7, #23]
    *data = buffer->buffer[index];
 8002756:	7dfb      	ldrb	r3, [r7, #23]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	3304      	adds	r3, #4
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	601a      	str	r2, [r3, #0]
    return 1;
 8002766:	2301      	movs	r3, #1
}
 8002768:	4618      	mov	r0, r3
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	66666667 	.word	0x66666667

08002778 <rbclear>:
- ringbuffer_t *buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e00a      	b.n	80027a0 <rbclear+0x28>
        buffer->buffer[i] = 0;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	3304      	adds	r3, #4
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	3301      	adds	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b09      	cmp	r3, #9
 80027a4:	d9f1      	bls.n	800278a <rbclear+0x12>
    }
    buffer->length = 0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_MspInit+0x4c>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <HAL_MspInit+0x4c>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_MspInit+0x4c>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_MspInit+0x4c>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a08      	ldr	r2, [pc, #32]	; (8002810 <HAL_MspInit+0x4c>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_MspInit+0x4c>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002802:	2007      	movs	r0, #7
 8002804:	f000 fc20 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002842:	e012      	b.n	800286a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0c      	ldr	r2, [pc, #48]	; (800287c <HAL_TIM_PWM_MspInit+0x68>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10d      	bne.n	800286a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a08      	ldr	r2, [pc, #32]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 8002858:	f043 0308 	orr.w	r3, r3, #8
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40000c00 	.word	0x40000c00

08002880 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	; 0x30
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a3a      	ldr	r2, [pc, #232]	; (8002988 <HAL_TIM_Encoder_MspInit+0x108>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d134      	bne.n	800290c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a38      	ldr	r2, [pc, #224]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b36      	ldr	r3, [pc, #216]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	4b32      	ldr	r3, [pc, #200]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a31      	ldr	r2, [pc, #196]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028da:	23c0      	movs	r3, #192	; 0xc0
 80028dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028ea:	2302      	movs	r3, #2
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	4619      	mov	r1, r3
 80028f4:	4826      	ldr	r0, [pc, #152]	; (8002990 <HAL_TIM_Encoder_MspInit+0x110>)
 80028f6:	f000 ffeb 	bl	80038d0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	201d      	movs	r0, #29
 8002900:	f000 fbad 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002904:	201d      	movs	r0, #29
 8002906:	f000 fbc6 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800290a:	e038      	b.n	800297e <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a20      	ldr	r2, [pc, #128]	; (8002994 <HAL_TIM_Encoder_MspInit+0x114>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d133      	bne.n	800297e <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a14      	ldr	r2, [pc, #80]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_TIM_Encoder_MspInit+0x10c>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800294e:	23c0      	movs	r3, #192	; 0xc0
 8002950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800295e:	2302      	movs	r3, #2
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002962:	f107 031c 	add.w	r3, r7, #28
 8002966:	4619      	mov	r1, r3
 8002968:	480b      	ldr	r0, [pc, #44]	; (8002998 <HAL_TIM_Encoder_MspInit+0x118>)
 800296a:	f000 ffb1 	bl	80038d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	201e      	movs	r0, #30
 8002974:	f000 fb73 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002978:	201e      	movs	r0, #30
 800297a:	f000 fb8c 	bl	8003096 <HAL_NVIC_EnableIRQ>
}
 800297e:	bf00      	nop
 8002980:	3730      	adds	r7, #48	; 0x30
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40000400 	.word	0x40000400
 800298c:	40023800 	.word	0x40023800
 8002990:	40020000 	.word	0x40020000
 8002994:	40000800 	.word	0x40000800
 8002998:	40020400 	.word	0x40020400

0800299c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <HAL_TIM_Base_MspInit+0x48>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d115      	bne.n	80029da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_TIM_Base_MspInit+0x4c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <HAL_TIM_Base_MspInit+0x4c>)
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_TIM_Base_MspInit+0x4c>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	2019      	movs	r0, #25
 80029d0:	f000 fb45 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029d4:	2019      	movs	r0, #25
 80029d6:	f000 fb5e 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40014400 	.word	0x40014400
 80029e8:	40023800 	.word	0x40023800

080029ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0c:	d11f      	bne.n	8002a4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_TIM_MspPostInit+0xb0>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <HAL_TIM_MspPostInit+0xb0>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <HAL_TIM_MspPostInit+0xb0>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	4619      	mov	r1, r3
 8002a46:	4816      	ldr	r0, [pc, #88]	; (8002aa0 <HAL_TIM_MspPostInit+0xb4>)
 8002a48:	f000 ff42 	bl	80038d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002a4c:	e022      	b.n	8002a94 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_TIM_MspPostInit+0xb8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d11d      	bne.n	8002a94 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_TIM_MspPostInit+0xb0>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <HAL_TIM_MspPostInit+0xb0>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_TIM_MspPostInit+0xb0>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a74:	2301      	movs	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a84:	2302      	movs	r3, #2
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <HAL_TIM_MspPostInit+0xb4>)
 8002a90:	f000 ff1e 	bl	80038d0 <HAL_GPIO_Init>
}
 8002a94:	bf00      	nop
 8002a96:	3728      	adds	r7, #40	; 0x28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40020000 	.word	0x40020000
 8002aa4:	40000c00 	.word	0x40000c00

08002aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a4d      	ldr	r2, [pc, #308]	; (8002bfc <HAL_UART_MspInit+0x154>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	f040 8094 	bne.w	8002bf4 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <HAL_UART_MspInit+0x158>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	; (8002c00 <HAL_UART_MspInit+0x158>)
 8002ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ada:	6413      	str	r3, [r2, #64]	; 0x40
 8002adc:	4b48      	ldr	r3, [pc, #288]	; (8002c00 <HAL_UART_MspInit+0x158>)
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	4b44      	ldr	r3, [pc, #272]	; (8002c00 <HAL_UART_MspInit+0x158>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	4a43      	ldr	r2, [pc, #268]	; (8002c00 <HAL_UART_MspInit+0x158>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6313      	str	r3, [r2, #48]	; 0x30
 8002af8:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <HAL_UART_MspInit+0x158>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b04:	230c      	movs	r3, #12
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2303      	movs	r3, #3
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b14:	2307      	movs	r3, #7
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4839      	ldr	r0, [pc, #228]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002b20:	f000 fed6 	bl	80038d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b24:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b26:	4a39      	ldr	r2, [pc, #228]	; (8002c0c <HAL_UART_MspInit+0x164>)
 8002b28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b2a:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b30:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b32:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b38:	4b33      	ldr	r3, [pc, #204]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b3e:	4b32      	ldr	r3, [pc, #200]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b44:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b46:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b4c:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002b52:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b58:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b5a:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b60:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b68:	4827      	ldr	r0, [pc, #156]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b6a:	f000 faaf 	bl	80030cc <HAL_DMA_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002b74:	f7ff fbdc 	bl	8002330 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a23      	ldr	r2, [pc, #140]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b7e:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002b86:	4a23      	ldr	r2, [pc, #140]	; (8002c14 <HAL_UART_MspInit+0x16c>)
 8002b88:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002b8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b90:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b92:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bac:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bc0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002bc8:	4811      	ldr	r0, [pc, #68]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bca:	f000 fa7f 	bl	80030cc <HAL_DMA_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002bd4:	f7ff fbac 	bl	8002330 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8002bde:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	2026      	movs	r0, #38	; 0x26
 8002bea:	f000 fa38 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bee:	2026      	movs	r0, #38	; 0x26
 8002bf0:	f000 fa51 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bf4:	bf00      	nop
 8002bf6:	3728      	adds	r7, #40	; 0x28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40004400 	.word	0x40004400
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020000 	.word	0x40020000
 8002c08:	200005fc 	.word	0x200005fc
 8002c0c:	40026088 	.word	0x40026088
 8002c10:	2000065c 	.word	0x2000065c
 8002c14:	400260a0 	.word	0x400260a0

08002c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <NMI_Handler+0x4>

08002c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2e:	e7fe      	b.n	8002c2e <BusFault_Handler+0x4>

08002c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <UsageFault_Handler+0x4>

08002c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c64:	f000 f8dc 	bl	8002e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <DMA1_Stream5_IRQHandler+0x10>)
 8002c72:	f000 fbc3 	bl	80033fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200005fc 	.word	0x200005fc

08002c80 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <DMA1_Stream6_IRQHandler+0x10>)
 8002c86:	f000 fbb9 	bl	80033fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000065c 	.word	0x2000065c

08002c94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c9a:	f001 fef1 	bl	8004a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000570 	.word	0x20000570

08002ca8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <TIM3_IRQHandler+0x10>)
 8002cae:	f001 fee7 	bl	8004a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000498 	.word	0x20000498

08002cbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <TIM4_IRQHandler+0x10>)
 8002cc2:	f001 fedd 	bl	8004a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	200004e0 	.word	0x200004e0

08002cd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <USART2_IRQHandler+0x10>)
 8002cd6:	f002 fbf7 	bl	80054c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200005b8 	.word	0x200005b8

08002ce4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_1_Pin);
 8002ce8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002cec:	f000 ffc0 	bl	8003c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_2_Pin);
 8002cf0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002cf4:	f000 ffbc 	bl	8003c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cfc:	f000 ffb8 	bl	8003c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <SystemInit+0x20>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <SystemInit+0x20>)
 8002d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <Reset_Handler>:
 8002d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d60 <LoopFillZerobss+0x12>
 8002d2c:	480d      	ldr	r0, [pc, #52]	; (8002d64 <LoopFillZerobss+0x16>)
 8002d2e:	490e      	ldr	r1, [pc, #56]	; (8002d68 <LoopFillZerobss+0x1a>)
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <LoopFillZerobss+0x1e>)
 8002d32:	2300      	movs	r3, #0
 8002d34:	e002      	b.n	8002d3c <LoopCopyDataInit>

08002d36 <CopyDataInit>:
 8002d36:	58d4      	ldr	r4, [r2, r3]
 8002d38:	50c4      	str	r4, [r0, r3]
 8002d3a:	3304      	adds	r3, #4

08002d3c <LoopCopyDataInit>:
 8002d3c:	18c4      	adds	r4, r0, r3
 8002d3e:	428c      	cmp	r4, r1
 8002d40:	d3f9      	bcc.n	8002d36 <CopyDataInit>
 8002d42:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <LoopFillZerobss+0x22>)
 8002d44:	4c0b      	ldr	r4, [pc, #44]	; (8002d74 <LoopFillZerobss+0x26>)
 8002d46:	2300      	movs	r3, #0
 8002d48:	e001      	b.n	8002d4e <LoopFillZerobss>

08002d4a <FillZerobss>:
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	3204      	adds	r2, #4

08002d4e <LoopFillZerobss>:
 8002d4e:	42a2      	cmp	r2, r4
 8002d50:	d3fb      	bcc.n	8002d4a <FillZerobss>
 8002d52:	f7ff ffd7 	bl	8002d04 <SystemInit>
 8002d56:	f003 fc45 	bl	80065e4 <__libc_init_array>
 8002d5a:	f7fe ff37 	bl	8001bcc <main>
 8002d5e:	4770      	bx	lr
 8002d60:	20020000 	.word	0x20020000
 8002d64:	20000000 	.word	0x20000000
 8002d68:	20000074 	.word	0x20000074
 8002d6c:	08006a74 	.word	0x08006a74
 8002d70:	20000074 	.word	0x20000074
 8002d74:	200006c0 	.word	0x200006c0

08002d78 <ADC_IRQHandler>:
 8002d78:	e7fe      	b.n	8002d78 <ADC_IRQHandler>
	...

08002d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_Init+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <HAL_Init+0x40>)
 8002d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <HAL_Init+0x40>)
 8002d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <HAL_Init+0x40>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da4:	2003      	movs	r0, #3
 8002da6:	f000 f94f 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f000 f808 	bl	8002dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db0:	f7ff fd08 	bl	80027c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023c00 	.word	0x40023c00

08002dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_InitTick+0x54>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_InitTick+0x58>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f967 	bl	80030b2 <HAL_SYSTICK_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00e      	b.n	8002e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b0f      	cmp	r3, #15
 8002df2:	d80a      	bhi.n	8002e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df4:	2200      	movs	r2, #0
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dfc:	f000 f92f 	bl	800305e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e00:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <HAL_InitTick+0x5c>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000004 	.word	0x20000004
 8002e18:	2000000c 	.word	0x2000000c
 8002e1c:	20000008 	.word	0x20000008

08002e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_IncTick+0x20>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_IncTick+0x24>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_IncTick+0x24>)
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	2000000c 	.word	0x2000000c
 8002e44:	200006bc 	.word	0x200006bc

08002e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_GetTick+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	200006bc 	.word	0x200006bc

08002e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e68:	f7ff ffee 	bl	8002e48 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e78:	d005      	beq.n	8002e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_Delay+0x44>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e86:	bf00      	nop
 8002e88:	f7ff ffde 	bl	8002e48 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d8f7      	bhi.n	8002e88 <HAL_Delay+0x28>
  {
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	2000000c 	.word	0x2000000c

08002ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eda:	4a04      	ldr	r2, [pc, #16]	; (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	60d3      	str	r3, [r2, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db0b      	blt.n	8002f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4907      	ldr	r1, [pc, #28]	; (8002f44 <__NVIC_EnableIRQ+0x38>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	; (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003014:	d301      	bcc.n	800301a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003016:	2301      	movs	r3, #1
 8003018:	e00f      	b.n	800303a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <SysTick_Config+0x40>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003022:	210f      	movs	r1, #15
 8003024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003028:	f7ff ff8e 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <SysTick_Config+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <SysTick_Config+0x40>)
 8003034:	2207      	movs	r2, #7
 8003036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff29 	bl	8002ea8 <__NVIC_SetPriorityGrouping>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003070:	f7ff ff3e 	bl	8002ef0 <__NVIC_GetPriorityGrouping>
 8003074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff8e 	bl	8002f9c <NVIC_EncodePriority>
 8003080:	4602      	mov	r2, r0
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff5d 	bl	8002f48 <__NVIC_SetPriority>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff31 	bl	8002f0c <__NVIC_EnableIRQ>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa2 	bl	8003004 <SysTick_Config>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff feb6 	bl	8002e48 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e099      	b.n	800321c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003108:	e00f      	b.n	800312a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800310a:	f7ff fe9d 	bl	8002e48 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b05      	cmp	r3, #5
 8003116:	d908      	bls.n	800312a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2203      	movs	r2, #3
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e078      	b.n	800321c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e8      	bne.n	800310a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4b38      	ldr	r3, [pc, #224]	; (8003224 <HAL_DMA_Init+0x158>)
 8003144:	4013      	ands	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003156:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2b04      	cmp	r3, #4
 8003182:	d107      	bne.n	8003194 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	4313      	orrs	r3, r2
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f023 0307 	bic.w	r3, r3, #7
 80031aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d117      	bne.n	80031ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fb01 	bl	80037d8 <DMA_CheckFifoParam>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2240      	movs	r2, #64	; 0x40
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031ea:	2301      	movs	r3, #1
 80031ec:	e016      	b.n	800321c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fab8 	bl	800376c <DMA_CalcBaseAndBitshift>
 80031fc:	4603      	mov	r3, r0
 80031fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	223f      	movs	r2, #63	; 0x3f
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	f010803f 	.word	0xf010803f

08003228 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_DMA_Start_IT+0x26>
 800324a:	2302      	movs	r3, #2
 800324c:	e040      	b.n	80032d0 <HAL_DMA_Start_IT+0xa8>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d12f      	bne.n	80032c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fa4a 	bl	8003710 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	223f      	movs	r2, #63	; 0x3f
 8003282:	409a      	lsls	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0216 	orr.w	r2, r2, #22
 8003296:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0208 	orr.w	r2, r2, #8
 80032ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e005      	b.n	80032ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
 80032cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032e6:	f7ff fdaf 	bl	8002e48 <HAL_GetTick>
 80032ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d008      	beq.n	800330a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e052      	b.n	80033b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0216 	bic.w	r2, r2, #22
 8003318:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003328:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d103      	bne.n	800333a <HAL_DMA_Abort+0x62>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0208 	bic.w	r2, r2, #8
 8003348:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800335a:	e013      	b.n	8003384 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800335c:	f7ff fd74 	bl	8002e48 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b05      	cmp	r3, #5
 8003368:	d90c      	bls.n	8003384 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2203      	movs	r2, #3
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e015      	b.n	80033b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e4      	bne.n	800335c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	223f      	movs	r2, #63	; 0x3f
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d004      	beq.n	80033d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00c      	b.n	80033f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2205      	movs	r2, #5
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003408:	4b8e      	ldr	r3, [pc, #568]	; (8003644 <HAL_DMA_IRQHandler+0x248>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a8e      	ldr	r2, [pc, #568]	; (8003648 <HAL_DMA_IRQHandler+0x24c>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0a9b      	lsrs	r3, r3, #10
 8003414:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	2208      	movs	r2, #8
 8003428:	409a      	lsls	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01a      	beq.n	8003468 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0204 	bic.w	r2, r2, #4
 800344e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	2208      	movs	r2, #8
 8003456:	409a      	lsls	r2, r3
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	f043 0201 	orr.w	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	2201      	movs	r2, #1
 800346e:	409a      	lsls	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	2201      	movs	r2, #1
 800348c:	409a      	lsls	r2, r3
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	f043 0202 	orr.w	r2, r3, #2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	2204      	movs	r2, #4
 80034a4:	409a      	lsls	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d012      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00b      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	2204      	movs	r2, #4
 80034c2:	409a      	lsls	r2, r3
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	f043 0204 	orr.w	r2, r3, #4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	2210      	movs	r2, #16
 80034da:	409a      	lsls	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d043      	beq.n	800356c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d03c      	beq.n	800356c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	2210      	movs	r2, #16
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d018      	beq.n	800353e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d108      	bne.n	800352c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d024      	beq.n	800356c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
 800352a:	e01f      	b.n	800356c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01b      	beq.n	800356c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
 800353c:	e016      	b.n	800356c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d107      	bne.n	800355c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0208 	bic.w	r2, r2, #8
 800355a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003570:	2220      	movs	r2, #32
 8003572:	409a      	lsls	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 808f 	beq.w	800369c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8087 	beq.w	800369c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	2220      	movs	r2, #32
 8003594:	409a      	lsls	r2, r3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d136      	bne.n	8003614 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0216 	bic.w	r2, r2, #22
 80035b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <HAL_DMA_IRQHandler+0x1da>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0208 	bic.w	r2, r2, #8
 80035e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ea:	223f      	movs	r2, #63	; 0x3f
 80035ec:	409a      	lsls	r2, r3
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003606:	2b00      	cmp	r3, #0
 8003608:	d07e      	beq.n	8003708 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
        }
        return;
 8003612:	e079      	b.n	8003708 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01d      	beq.n	800365e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10d      	bne.n	800364c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	2b00      	cmp	r3, #0
 8003636:	d031      	beq.n	800369c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
 8003640:	e02c      	b.n	800369c <HAL_DMA_IRQHandler+0x2a0>
 8003642:	bf00      	nop
 8003644:	20000004 	.word	0x20000004
 8003648:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d023      	beq.n	800369c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4798      	blx	r3
 800365c:	e01e      	b.n	800369c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10f      	bne.n	800368c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0210 	bic.w	r2, r2, #16
 800367a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d032      	beq.n	800370a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d022      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2205      	movs	r2, #5
 80036b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3301      	adds	r3, #1
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d307      	bcc.n	80036e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f2      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x2cc>
 80036e2:	e000      	b.n	80036e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
 8003706:	e000      	b.n	800370a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003708:	bf00      	nop
    }
  }
}
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800372c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b40      	cmp	r3, #64	; 0x40
 800373c:	d108      	bne.n	8003750 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800374e:	e007      	b.n	8003760 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	3b10      	subs	r3, #16
 800377c:	4a14      	ldr	r2, [pc, #80]	; (80037d0 <DMA_CalcBaseAndBitshift+0x64>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003786:	4a13      	ldr	r2, [pc, #76]	; (80037d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d909      	bls.n	80037ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037a2:	f023 0303 	bic.w	r3, r3, #3
 80037a6:	1d1a      	adds	r2, r3, #4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	659a      	str	r2, [r3, #88]	; 0x58
 80037ac:	e007      	b.n	80037be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037b6:	f023 0303 	bic.w	r3, r3, #3
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	aaaaaaab 	.word	0xaaaaaaab
 80037d4:	08006958 	.word	0x08006958

080037d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11f      	bne.n	8003832 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d856      	bhi.n	80038a6 <DMA_CheckFifoParam+0xce>
 80037f8:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <DMA_CheckFifoParam+0x28>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003811 	.word	0x08003811
 8003804:	08003823 	.word	0x08003823
 8003808:	08003811 	.word	0x08003811
 800380c:	080038a7 	.word	0x080038a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d046      	beq.n	80038aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003820:	e043      	b.n	80038aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800382a:	d140      	bne.n	80038ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003830:	e03d      	b.n	80038ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800383a:	d121      	bne.n	8003880 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d837      	bhi.n	80038b2 <DMA_CheckFifoParam+0xda>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <DMA_CheckFifoParam+0x70>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	08003859 	.word	0x08003859
 800384c:	0800385f 	.word	0x0800385f
 8003850:	08003859 	.word	0x08003859
 8003854:	08003871 	.word	0x08003871
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      break;
 800385c:	e030      	b.n	80038c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d025      	beq.n	80038b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386e:	e022      	b.n	80038b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003878:	d11f      	bne.n	80038ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800387e:	e01c      	b.n	80038ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d903      	bls.n	800388e <DMA_CheckFifoParam+0xb6>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b03      	cmp	r3, #3
 800388a:	d003      	beq.n	8003894 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800388c:	e018      	b.n	80038c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
      break;
 8003892:	e015      	b.n	80038c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00e      	beq.n	80038be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      break;
 80038a4:	e00b      	b.n	80038be <DMA_CheckFifoParam+0xe6>
      break;
 80038a6:	bf00      	nop
 80038a8:	e00a      	b.n	80038c0 <DMA_CheckFifoParam+0xe8>
      break;
 80038aa:	bf00      	nop
 80038ac:	e008      	b.n	80038c0 <DMA_CheckFifoParam+0xe8>
      break;
 80038ae:	bf00      	nop
 80038b0:	e006      	b.n	80038c0 <DMA_CheckFifoParam+0xe8>
      break;
 80038b2:	bf00      	nop
 80038b4:	e004      	b.n	80038c0 <DMA_CheckFifoParam+0xe8>
      break;
 80038b6:	bf00      	nop
 80038b8:	e002      	b.n	80038c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <DMA_CheckFifoParam+0xe8>
      break;
 80038be:	bf00      	nop
    }
  } 
  
  return status; 
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop

080038d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b089      	sub	sp, #36	; 0x24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	e159      	b.n	8003ba0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038ec:	2201      	movs	r2, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4013      	ands	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	429a      	cmp	r2, r3
 8003906:	f040 8148 	bne.w	8003b9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d005      	beq.n	8003922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800391e:	2b02      	cmp	r3, #2
 8003920:	d130      	bne.n	8003984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	2203      	movs	r2, #3
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003958:	2201      	movs	r2, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 0201 	and.w	r2, r3, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	2b03      	cmp	r3, #3
 800398e:	d017      	beq.n	80039c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2203      	movs	r2, #3
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d123      	bne.n	8003a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	08da      	lsrs	r2, r3, #3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3208      	adds	r2, #8
 80039d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	220f      	movs	r2, #15
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	08da      	lsrs	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3208      	adds	r2, #8
 8003a0e:	69b9      	ldr	r1, [r7, #24]
 8003a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	2203      	movs	r2, #3
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0203 	and.w	r2, r3, #3
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80a2 	beq.w	8003b9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	4b57      	ldr	r3, [pc, #348]	; (8003bb8 <HAL_GPIO_Init+0x2e8>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	4a56      	ldr	r2, [pc, #344]	; (8003bb8 <HAL_GPIO_Init+0x2e8>)
 8003a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a64:	6453      	str	r3, [r2, #68]	; 0x44
 8003a66:	4b54      	ldr	r3, [pc, #336]	; (8003bb8 <HAL_GPIO_Init+0x2e8>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a72:	4a52      	ldr	r2, [pc, #328]	; (8003bbc <HAL_GPIO_Init+0x2ec>)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	3302      	adds	r3, #2
 8003a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	220f      	movs	r2, #15
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a49      	ldr	r2, [pc, #292]	; (8003bc0 <HAL_GPIO_Init+0x2f0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d019      	beq.n	8003ad2 <HAL_GPIO_Init+0x202>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a48      	ldr	r2, [pc, #288]	; (8003bc4 <HAL_GPIO_Init+0x2f4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_GPIO_Init+0x1fe>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a47      	ldr	r2, [pc, #284]	; (8003bc8 <HAL_GPIO_Init+0x2f8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00d      	beq.n	8003aca <HAL_GPIO_Init+0x1fa>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a46      	ldr	r2, [pc, #280]	; (8003bcc <HAL_GPIO_Init+0x2fc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <HAL_GPIO_Init+0x1f6>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a45      	ldr	r2, [pc, #276]	; (8003bd0 <HAL_GPIO_Init+0x300>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_GPIO_Init+0x1f2>
 8003abe:	2304      	movs	r3, #4
 8003ac0:	e008      	b.n	8003ad4 <HAL_GPIO_Init+0x204>
 8003ac2:	2307      	movs	r3, #7
 8003ac4:	e006      	b.n	8003ad4 <HAL_GPIO_Init+0x204>
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e004      	b.n	8003ad4 <HAL_GPIO_Init+0x204>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e002      	b.n	8003ad4 <HAL_GPIO_Init+0x204>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <HAL_GPIO_Init+0x204>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	f002 0203 	and.w	r2, r2, #3
 8003ada:	0092      	lsls	r2, r2, #2
 8003adc:	4093      	lsls	r3, r2
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ae4:	4935      	ldr	r1, [pc, #212]	; (8003bbc <HAL_GPIO_Init+0x2ec>)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	089b      	lsrs	r3, r3, #2
 8003aea:	3302      	adds	r3, #2
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003af2:	4b38      	ldr	r3, [pc, #224]	; (8003bd4 <HAL_GPIO_Init+0x304>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b16:	4a2f      	ldr	r2, [pc, #188]	; (8003bd4 <HAL_GPIO_Init+0x304>)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b1c:	4b2d      	ldr	r3, [pc, #180]	; (8003bd4 <HAL_GPIO_Init+0x304>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b40:	4a24      	ldr	r2, [pc, #144]	; (8003bd4 <HAL_GPIO_Init+0x304>)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b46:	4b23      	ldr	r3, [pc, #140]	; (8003bd4 <HAL_GPIO_Init+0x304>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b6a:	4a1a      	ldr	r2, [pc, #104]	; (8003bd4 <HAL_GPIO_Init+0x304>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b70:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <HAL_GPIO_Init+0x304>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b94:	4a0f      	ldr	r2, [pc, #60]	; (8003bd4 <HAL_GPIO_Init+0x304>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b0f      	cmp	r3, #15
 8003ba4:	f67f aea2 	bls.w	80038ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3724      	adds	r7, #36	; 0x24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40013800 	.word	0x40013800
 8003bc0:	40020000 	.word	0x40020000
 8003bc4:	40020400 	.word	0x40020400
 8003bc8:	40020800 	.word	0x40020800
 8003bcc:	40020c00 	.word	0x40020c00
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40013c00 	.word	0x40013c00

08003bd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e001      	b.n	8003bfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	807b      	strh	r3, [r7, #2]
 8003c14:	4613      	mov	r3, r2
 8003c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c18:	787b      	ldrb	r3, [r7, #1]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c1e:	887a      	ldrh	r2, [r7, #2]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c24:	e003      	b.n	8003c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c26:	887b      	ldrh	r3, [r7, #2]
 8003c28:	041a      	lsls	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	619a      	str	r2, [r3, #24]
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c4c:	887a      	ldrh	r2, [r7, #2]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4013      	ands	r3, r2
 8003c52:	041a      	lsls	r2, r3, #16
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	43d9      	mvns	r1, r3
 8003c58:	887b      	ldrh	r3, [r7, #2]
 8003c5a:	400b      	ands	r3, r1
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	619a      	str	r2, [r3, #24]
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c86:	4a05      	ldr	r2, [pc, #20]	; (8003c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c88:	88fb      	ldrh	r3, [r7, #6]
 8003c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd f986 	bl	8000fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40013c00 	.word	0x40013c00

08003ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e267      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d075      	beq.n	8003daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cbe:	4b88      	ldr	r3, [pc, #544]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d00c      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cca:	4b85      	ldr	r3, [pc, #532]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d112      	bne.n	8003cfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cd6:	4b82      	ldr	r3, [pc, #520]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce2:	d10b      	bne.n	8003cfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d05b      	beq.n	8003da8 <HAL_RCC_OscConfig+0x108>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d157      	bne.n	8003da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e242      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d106      	bne.n	8003d14 <HAL_RCC_OscConfig+0x74>
 8003d06:	4b76      	ldr	r3, [pc, #472]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a75      	ldr	r2, [pc, #468]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e01d      	b.n	8003d50 <HAL_RCC_OscConfig+0xb0>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x98>
 8003d1e:	4b70      	ldr	r3, [pc, #448]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a6f      	ldr	r2, [pc, #444]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	4b6d      	ldr	r3, [pc, #436]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a6c      	ldr	r2, [pc, #432]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0xb0>
 8003d38:	4b69      	ldr	r3, [pc, #420]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a68      	ldr	r2, [pc, #416]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	4b66      	ldr	r3, [pc, #408]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a65      	ldr	r2, [pc, #404]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d013      	beq.n	8003d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7ff f876 	bl	8002e48 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d60:	f7ff f872 	bl	8002e48 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	; 0x64
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e207      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	4b5b      	ldr	r3, [pc, #364]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0xc0>
 8003d7e:	e014      	b.n	8003daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7ff f862 	bl	8002e48 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d88:	f7ff f85e 	bl	8002e48 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e1f3      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9a:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0xe8>
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d063      	beq.n	8003e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003db6:	4b4a      	ldr	r3, [pc, #296]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc2:	4b47      	ldr	r3, [pc, #284]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d11c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dce:	4b44      	ldr	r3, [pc, #272]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d116      	bne.n	8003e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dda:	4b41      	ldr	r3, [pc, #260]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_RCC_OscConfig+0x152>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d001      	beq.n	8003df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e1c7      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df2:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4937      	ldr	r1, [pc, #220]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e06:	e03a      	b.n	8003e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d020      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e10:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <HAL_RCC_OscConfig+0x244>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e16:	f7ff f817 	bl	8002e48 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1e:	f7ff f813 	bl	8002e48 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e1a8      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e30:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3c:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4925      	ldr	r1, [pc, #148]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	600b      	str	r3, [r1, #0]
 8003e50:	e015      	b.n	8003e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <HAL_RCC_OscConfig+0x244>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe fff6 	bl	8002e48 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e60:	f7fe fff2 	bl	8002e48 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e187      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e72:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d036      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e92:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <HAL_RCC_OscConfig+0x248>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e98:	f7fe ffd6 	bl	8002e48 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea0:	f7fe ffd2 	bl	8002e48 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e167      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x200>
 8003ebe:	e01b      	b.n	8003ef8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_RCC_OscConfig+0x248>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe ffbf 	bl	8002e48 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ecc:	e00e      	b.n	8003eec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ece:	f7fe ffbb 	bl	8002e48 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d907      	bls.n	8003eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e150      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	42470000 	.word	0x42470000
 8003ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eec:	4b88      	ldr	r3, [pc, #544]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1ea      	bne.n	8003ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8097 	beq.w	8004034 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0a:	4b81      	ldr	r3, [pc, #516]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	4b7d      	ldr	r3, [pc, #500]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	4a7c      	ldr	r2, [pc, #496]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f24:	6413      	str	r3, [r2, #64]	; 0x40
 8003f26:	4b7a      	ldr	r3, [pc, #488]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f36:	4b77      	ldr	r3, [pc, #476]	; (8004114 <HAL_RCC_OscConfig+0x474>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d118      	bne.n	8003f74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f42:	4b74      	ldr	r3, [pc, #464]	; (8004114 <HAL_RCC_OscConfig+0x474>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a73      	ldr	r2, [pc, #460]	; (8004114 <HAL_RCC_OscConfig+0x474>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f4e:	f7fe ff7b 	bl	8002e48 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f56:	f7fe ff77 	bl	8002e48 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e10c      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	4b6a      	ldr	r3, [pc, #424]	; (8004114 <HAL_RCC_OscConfig+0x474>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCC_OscConfig+0x2ea>
 8003f7c:	4b64      	ldr	r3, [pc, #400]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f80:	4a63      	ldr	r2, [pc, #396]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6713      	str	r3, [r2, #112]	; 0x70
 8003f88:	e01c      	b.n	8003fc4 <HAL_RCC_OscConfig+0x324>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b05      	cmp	r3, #5
 8003f90:	d10c      	bne.n	8003fac <HAL_RCC_OscConfig+0x30c>
 8003f92:	4b5f      	ldr	r3, [pc, #380]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	4a5e      	ldr	r2, [pc, #376]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003f98:	f043 0304 	orr.w	r3, r3, #4
 8003f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9e:	4b5c      	ldr	r3, [pc, #368]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	4a5b      	ldr	r2, [pc, #364]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8003faa:	e00b      	b.n	8003fc4 <HAL_RCC_OscConfig+0x324>
 8003fac:	4b58      	ldr	r3, [pc, #352]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	4a57      	ldr	r2, [pc, #348]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb8:	4b55      	ldr	r3, [pc, #340]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4a54      	ldr	r2, [pc, #336]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f023 0304 	bic.w	r3, r3, #4
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d015      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fcc:	f7fe ff3c 	bl	8002e48 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fe ff38 	bl	8002e48 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e0cb      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fea:	4b49      	ldr	r3, [pc, #292]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0ee      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x334>
 8003ff6:	e014      	b.n	8004022 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff8:	f7fe ff26 	bl	8002e48 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fe ff22 	bl	8002e48 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	; 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e0b5      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004016:	4b3e      	ldr	r3, [pc, #248]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1ee      	bne.n	8004000 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d105      	bne.n	8004034 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004028:	4b39      	ldr	r3, [pc, #228]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	4a38      	ldr	r2, [pc, #224]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 800402e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80a1 	beq.w	8004180 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800403e:	4b34      	ldr	r3, [pc, #208]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b08      	cmp	r3, #8
 8004048:	d05c      	beq.n	8004104 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d141      	bne.n	80040d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004052:	4b31      	ldr	r3, [pc, #196]	; (8004118 <HAL_RCC_OscConfig+0x478>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fe fef6 	bl	8002e48 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe fef2 	bl	8002e48 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e087      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	4b27      	ldr	r3, [pc, #156]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	019b      	lsls	r3, r3, #6
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	3b01      	subs	r3, #1
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	061b      	lsls	r3, r3, #24
 80040a2:	491b      	ldr	r1, [pc, #108]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a8:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_RCC_OscConfig+0x478>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ae:	f7fe fecb 	bl	8002e48 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b6:	f7fe fec7 	bl	8002e48 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e05c      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c8:	4b11      	ldr	r3, [pc, #68]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x416>
 80040d4:	e054      	b.n	8004180 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d6:	4b10      	ldr	r3, [pc, #64]	; (8004118 <HAL_RCC_OscConfig+0x478>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7fe feb4 	bl	8002e48 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fe feb0 	bl	8002e48 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e045      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_RCC_OscConfig+0x470>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x444>
 8004102:	e03d      	b.n	8004180 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d107      	bne.n	800411c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e038      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
 8004110:	40023800 	.word	0x40023800
 8004114:	40007000 	.word	0x40007000
 8004118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_RCC_OscConfig+0x4ec>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d028      	beq.n	800417c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004134:	429a      	cmp	r2, r3
 8004136:	d121      	bne.n	800417c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d11a      	bne.n	800417c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004154:	4293      	cmp	r3, r2
 8004156:	d111      	bne.n	800417c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	085b      	lsrs	r3, r3, #1
 8004164:	3b01      	subs	r3, #1
 8004166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d107      	bne.n	800417c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800

08004190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0cc      	b.n	800433e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4b68      	ldr	r3, [pc, #416]	; (8004348 <HAL_RCC_ClockConfig+0x1b8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d90c      	bls.n	80041cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b65      	ldr	r3, [pc, #404]	; (8004348 <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b63      	ldr	r3, [pc, #396]	; (8004348 <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0b8      	b.n	800433e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d020      	beq.n	800421a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e4:	4b59      	ldr	r3, [pc, #356]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4a58      	ldr	r2, [pc, #352]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041fc:	4b53      	ldr	r3, [pc, #332]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4a52      	ldr	r2, [pc, #328]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004208:	4b50      	ldr	r3, [pc, #320]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	494d      	ldr	r1, [pc, #308]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d044      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d107      	bne.n	800423e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422e:	4b47      	ldr	r3, [pc, #284]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d119      	bne.n	800426e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e07f      	b.n	800433e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d003      	beq.n	800424e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800424a:	2b03      	cmp	r3, #3
 800424c:	d107      	bne.n	800425e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424e:	4b3f      	ldr	r3, [pc, #252]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e06f      	b.n	800433e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425e:	4b3b      	ldr	r3, [pc, #236]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e067      	b.n	800433e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800426e:	4b37      	ldr	r3, [pc, #220]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f023 0203 	bic.w	r2, r3, #3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4934      	ldr	r1, [pc, #208]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	4313      	orrs	r3, r2
 800427e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004280:	f7fe fde2 	bl	8002e48 <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	e00a      	b.n	800429e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004288:	f7fe fdde 	bl	8002e48 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e04f      	b.n	800433e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429e:	4b2b      	ldr	r3, [pc, #172]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 020c 	and.w	r2, r3, #12
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d1eb      	bne.n	8004288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <HAL_RCC_ClockConfig+0x1b8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d20c      	bcs.n	80042d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042be:	4b22      	ldr	r3, [pc, #136]	; (8004348 <HAL_RCC_ClockConfig+0x1b8>)
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c6:	4b20      	ldr	r3, [pc, #128]	; (8004348 <HAL_RCC_ClockConfig+0x1b8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d001      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e032      	b.n	800433e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e4:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4916      	ldr	r1, [pc, #88]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004302:	4b12      	ldr	r3, [pc, #72]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	490e      	ldr	r1, [pc, #56]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004316:	f000 f821 	bl	800435c <HAL_RCC_GetSysClockFreq>
 800431a:	4602      	mov	r2, r0
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	490a      	ldr	r1, [pc, #40]	; (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 8004328:	5ccb      	ldrb	r3, [r1, r3]
 800432a:	fa22 f303 	lsr.w	r3, r2, r3
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fd42 	bl	8002dc0 <HAL_InitTick>

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40023c00 	.word	0x40023c00
 800434c:	40023800 	.word	0x40023800
 8004350:	08006940 	.word	0x08006940
 8004354:	20000004 	.word	0x20000004
 8004358:	20000008 	.word	0x20000008

0800435c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800435c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004360:	b094      	sub	sp, #80	; 0x50
 8004362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	647b      	str	r3, [r7, #68]	; 0x44
 8004368:	2300      	movs	r3, #0
 800436a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800436c:	2300      	movs	r3, #0
 800436e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004374:	4b79      	ldr	r3, [pc, #484]	; (800455c <HAL_RCC_GetSysClockFreq+0x200>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b08      	cmp	r3, #8
 800437e:	d00d      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x40>
 8004380:	2b08      	cmp	r3, #8
 8004382:	f200 80e1 	bhi.w	8004548 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x34>
 800438a:	2b04      	cmp	r3, #4
 800438c:	d003      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x3a>
 800438e:	e0db      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004390:	4b73      	ldr	r3, [pc, #460]	; (8004560 <HAL_RCC_GetSysClockFreq+0x204>)
 8004392:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004394:	e0db      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004396:	4b73      	ldr	r3, [pc, #460]	; (8004564 <HAL_RCC_GetSysClockFreq+0x208>)
 8004398:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800439a:	e0d8      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800439c:	4b6f      	ldr	r3, [pc, #444]	; (800455c <HAL_RCC_GetSysClockFreq+0x200>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a6:	4b6d      	ldr	r3, [pc, #436]	; (800455c <HAL_RCC_GetSysClockFreq+0x200>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d063      	beq.n	800447a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b2:	4b6a      	ldr	r3, [pc, #424]	; (800455c <HAL_RCC_GetSysClockFreq+0x200>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	2200      	movs	r2, #0
 80043ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80043bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c4:	633b      	str	r3, [r7, #48]	; 0x30
 80043c6:	2300      	movs	r3, #0
 80043c8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043ce:	4622      	mov	r2, r4
 80043d0:	462b      	mov	r3, r5
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f04f 0100 	mov.w	r1, #0
 80043da:	0159      	lsls	r1, r3, #5
 80043dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e0:	0150      	lsls	r0, r2, #5
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4621      	mov	r1, r4
 80043e8:	1a51      	subs	r1, r2, r1
 80043ea:	6139      	str	r1, [r7, #16]
 80043ec:	4629      	mov	r1, r5
 80043ee:	eb63 0301 	sbc.w	r3, r3, r1
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004400:	4659      	mov	r1, fp
 8004402:	018b      	lsls	r3, r1, #6
 8004404:	4651      	mov	r1, sl
 8004406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800440a:	4651      	mov	r1, sl
 800440c:	018a      	lsls	r2, r1, #6
 800440e:	4651      	mov	r1, sl
 8004410:	ebb2 0801 	subs.w	r8, r2, r1
 8004414:	4659      	mov	r1, fp
 8004416:	eb63 0901 	sbc.w	r9, r3, r1
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800442a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800442e:	4690      	mov	r8, r2
 8004430:	4699      	mov	r9, r3
 8004432:	4623      	mov	r3, r4
 8004434:	eb18 0303 	adds.w	r3, r8, r3
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	462b      	mov	r3, r5
 800443c:	eb49 0303 	adc.w	r3, r9, r3
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800444e:	4629      	mov	r1, r5
 8004450:	024b      	lsls	r3, r1, #9
 8004452:	4621      	mov	r1, r4
 8004454:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004458:	4621      	mov	r1, r4
 800445a:	024a      	lsls	r2, r1, #9
 800445c:	4610      	mov	r0, r2
 800445e:	4619      	mov	r1, r3
 8004460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004462:	2200      	movs	r2, #0
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
 8004466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800446c:	f7fc fb84 	bl	8000b78 <__aeabi_uldivmod>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4613      	mov	r3, r2
 8004476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004478:	e058      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800447a:	4b38      	ldr	r3, [pc, #224]	; (800455c <HAL_RCC_GetSysClockFreq+0x200>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	099b      	lsrs	r3, r3, #6
 8004480:	2200      	movs	r2, #0
 8004482:	4618      	mov	r0, r3
 8004484:	4611      	mov	r1, r2
 8004486:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800448a:	623b      	str	r3, [r7, #32]
 800448c:	2300      	movs	r3, #0
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
 8004490:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004494:	4642      	mov	r2, r8
 8004496:	464b      	mov	r3, r9
 8004498:	f04f 0000 	mov.w	r0, #0
 800449c:	f04f 0100 	mov.w	r1, #0
 80044a0:	0159      	lsls	r1, r3, #5
 80044a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a6:	0150      	lsls	r0, r2, #5
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4641      	mov	r1, r8
 80044ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80044b2:	4649      	mov	r1, r9
 80044b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044cc:	ebb2 040a 	subs.w	r4, r2, sl
 80044d0:	eb63 050b 	sbc.w	r5, r3, fp
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	00eb      	lsls	r3, r5, #3
 80044de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044e2:	00e2      	lsls	r2, r4, #3
 80044e4:	4614      	mov	r4, r2
 80044e6:	461d      	mov	r5, r3
 80044e8:	4643      	mov	r3, r8
 80044ea:	18e3      	adds	r3, r4, r3
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	464b      	mov	r3, r9
 80044f0:	eb45 0303 	adc.w	r3, r5, r3
 80044f4:	607b      	str	r3, [r7, #4]
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004502:	4629      	mov	r1, r5
 8004504:	028b      	lsls	r3, r1, #10
 8004506:	4621      	mov	r1, r4
 8004508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800450c:	4621      	mov	r1, r4
 800450e:	028a      	lsls	r2, r1, #10
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004516:	2200      	movs	r2, #0
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	61fa      	str	r2, [r7, #28]
 800451c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004520:	f7fc fb2a 	bl	8000b78 <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4613      	mov	r3, r2
 800452a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_GetSysClockFreq+0x200>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	3301      	adds	r3, #1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800453c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800453e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004546:	e002      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_GetSysClockFreq+0x204>)
 800454a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800454c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004550:	4618      	mov	r0, r3
 8004552:	3750      	adds	r7, #80	; 0x50
 8004554:	46bd      	mov	sp, r7
 8004556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	00f42400 	.word	0x00f42400
 8004564:	007a1200 	.word	0x007a1200

08004568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <HAL_RCC_GetHCLKFreq+0x14>)
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000004 	.word	0x20000004

08004580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004584:	f7ff fff0 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	0a9b      	lsrs	r3, r3, #10
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4903      	ldr	r1, [pc, #12]	; (80045a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40023800 	.word	0x40023800
 80045a4:	08006950 	.word	0x08006950

080045a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045ac:	f7ff ffdc 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0b5b      	lsrs	r3, r3, #13
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4903      	ldr	r1, [pc, #12]	; (80045cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40023800 	.word	0x40023800
 80045cc:	08006950 	.word	0x08006950

080045d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e041      	b.n	8004666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fe f9d0 	bl	800299c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f000 fc28 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d001      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e044      	b.n	8004712 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <HAL_TIM_Base_Start_IT+0xb0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d018      	beq.n	80046dc <HAL_TIM_Base_Start_IT+0x6c>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b2:	d013      	beq.n	80046dc <HAL_TIM_Base_Start_IT+0x6c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1a      	ldr	r2, [pc, #104]	; (8004724 <HAL_TIM_Base_Start_IT+0xb4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00e      	beq.n	80046dc <HAL_TIM_Base_Start_IT+0x6c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a19      	ldr	r2, [pc, #100]	; (8004728 <HAL_TIM_Base_Start_IT+0xb8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d009      	beq.n	80046dc <HAL_TIM_Base_Start_IT+0x6c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a17      	ldr	r2, [pc, #92]	; (800472c <HAL_TIM_Base_Start_IT+0xbc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d004      	beq.n	80046dc <HAL_TIM_Base_Start_IT+0x6c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a16      	ldr	r2, [pc, #88]	; (8004730 <HAL_TIM_Base_Start_IT+0xc0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d111      	bne.n	8004700 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b06      	cmp	r3, #6
 80046ec:	d010      	beq.n	8004710 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0201 	orr.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fe:	e007      	b.n	8004710 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40010000 	.word	0x40010000
 8004724:	40000400 	.word	0x40000400
 8004728:	40000800 	.word	0x40000800
 800472c:	40000c00 	.word	0x40000c00
 8004730:	40014000 	.word	0x40014000

08004734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e041      	b.n	80047ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fe f85a 	bl	8002814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3304      	adds	r3, #4
 8004770:	4619      	mov	r1, r3
 8004772:	4610      	mov	r0, r2
 8004774:	f000 fb76 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_TIM_PWM_Start+0x24>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	e022      	b.n	800483e <HAL_TIM_PWM_Start+0x6a>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d109      	bne.n	8004812 <HAL_TIM_PWM_Start+0x3e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b01      	cmp	r3, #1
 8004808:	bf14      	ite	ne
 800480a:	2301      	movne	r3, #1
 800480c:	2300      	moveq	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	e015      	b.n	800483e <HAL_TIM_PWM_Start+0x6a>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d109      	bne.n	800482c <HAL_TIM_PWM_Start+0x58>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e008      	b.n	800483e <HAL_TIM_PWM_Start+0x6a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	bf14      	ite	ne
 8004838:	2301      	movne	r3, #1
 800483a:	2300      	moveq	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e068      	b.n	8004918 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Start+0x82>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004854:	e013      	b.n	800487e <HAL_TIM_PWM_Start+0xaa>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b04      	cmp	r3, #4
 800485a:	d104      	bne.n	8004866 <HAL_TIM_PWM_Start+0x92>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004864:	e00b      	b.n	800487e <HAL_TIM_PWM_Start+0xaa>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Start+0xa2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004874:	e003      	b.n	800487e <HAL_TIM_PWM_Start+0xaa>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2201      	movs	r2, #1
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fcf8 	bl	800527c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a23      	ldr	r2, [pc, #140]	; (8004920 <HAL_TIM_PWM_Start+0x14c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d107      	bne.n	80048a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <HAL_TIM_PWM_Start+0x14c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d018      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x10e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d013      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x10e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a19      	ldr	r2, [pc, #100]	; (8004924 <HAL_TIM_PWM_Start+0x150>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00e      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x10e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a17      	ldr	r2, [pc, #92]	; (8004928 <HAL_TIM_PWM_Start+0x154>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d009      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x10e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a16      	ldr	r2, [pc, #88]	; (800492c <HAL_TIM_PWM_Start+0x158>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x10e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a14      	ldr	r2, [pc, #80]	; (8004930 <HAL_TIM_PWM_Start+0x15c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d111      	bne.n	8004906 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d010      	beq.n	8004916 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	e007      	b.n	8004916 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0201 	orr.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40010000 	.word	0x40010000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40014000 	.word	0x40014000

08004934 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e097      	b.n	8004a78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fd ff8f 	bl	8002880 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004978:	f023 0307 	bic.w	r3, r3, #7
 800497c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f000 fa6b 	bl	8004e64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b6:	f023 0303 	bic.w	r3, r3, #3
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	4313      	orrs	r3, r2
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049d4:	f023 030c 	bic.w	r3, r3, #12
 80049d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	4313      	orrs	r3, r2
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	011a      	lsls	r2, r3, #4
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	031b      	lsls	r3, r3, #12
 8004a04:	4313      	orrs	r3, r2
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	4313      	orrs	r3, r2
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0202 	mvn.w	r2, #2
 8004aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f9b0 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f9a2 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f9b3 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d122      	bne.n	8004b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0204 	mvn.w	r2, #4
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f986 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f978 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f989 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d122      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d11b      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0208 	mvn.w	r2, #8
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f95c 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004b70:	e005      	b.n	8004b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f94e 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f95f 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d122      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d11b      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0210 	mvn.w	r2, #16
 8004ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2208      	movs	r2, #8
 8004bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f932 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004bc4:	e005      	b.n	8004bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f924 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f935 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d10e      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d107      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0201 	mvn.w	r2, #1
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fc fa00 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b80      	cmp	r3, #128	; 0x80
 8004c10:	d10e      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1c:	2b80      	cmp	r3, #128	; 0x80
 8004c1e:	d107      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fbc4 	bl	80053b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d10e      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c48:	2b40      	cmp	r3, #64	; 0x40
 8004c4a:	d107      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f8fa 	bl	8004e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d10e      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d107      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0220 	mvn.w	r2, #32
 8004c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fb8e 	bl	80053a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e0ae      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b0c      	cmp	r3, #12
 8004cba:	f200 809f 	bhi.w	8004dfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004cf9 	.word	0x08004cf9
 8004cc8:	08004dfd 	.word	0x08004dfd
 8004ccc:	08004dfd 	.word	0x08004dfd
 8004cd0:	08004dfd 	.word	0x08004dfd
 8004cd4:	08004d39 	.word	0x08004d39
 8004cd8:	08004dfd 	.word	0x08004dfd
 8004cdc:	08004dfd 	.word	0x08004dfd
 8004ce0:	08004dfd 	.word	0x08004dfd
 8004ce4:	08004d7b 	.word	0x08004d7b
 8004ce8:	08004dfd 	.word	0x08004dfd
 8004cec:	08004dfd 	.word	0x08004dfd
 8004cf0:	08004dfd 	.word	0x08004dfd
 8004cf4:	08004dbb 	.word	0x08004dbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 f930 	bl	8004f64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0208 	orr.w	r2, r2, #8
 8004d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0204 	bic.w	r2, r2, #4
 8004d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6999      	ldr	r1, [r3, #24]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	619a      	str	r2, [r3, #24]
      break;
 8004d36:	e064      	b.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f976 	bl	8005030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6999      	ldr	r1, [r3, #24]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	021a      	lsls	r2, r3, #8
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	619a      	str	r2, [r3, #24]
      break;
 8004d78:	e043      	b.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f9c1 	bl	8005108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0208 	orr.w	r2, r2, #8
 8004d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0204 	bic.w	r2, r2, #4
 8004da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69d9      	ldr	r1, [r3, #28]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	61da      	str	r2, [r3, #28]
      break;
 8004db8:	e023      	b.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fa0b 	bl	80051dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69d9      	ldr	r1, [r3, #28]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	021a      	lsls	r2, r3, #8
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	61da      	str	r2, [r3, #28]
      break;
 8004dfa:	e002      	b.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8004e00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a34      	ldr	r2, [pc, #208]	; (8004f48 <TIM_Base_SetConfig+0xe4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00f      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e82:	d00b      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a31      	ldr	r2, [pc, #196]	; (8004f4c <TIM_Base_SetConfig+0xe8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d007      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a30      	ldr	r2, [pc, #192]	; (8004f50 <TIM_Base_SetConfig+0xec>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a2f      	ldr	r2, [pc, #188]	; (8004f54 <TIM_Base_SetConfig+0xf0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d108      	bne.n	8004eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a25      	ldr	r2, [pc, #148]	; (8004f48 <TIM_Base_SetConfig+0xe4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01b      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d017      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a22      	ldr	r2, [pc, #136]	; (8004f4c <TIM_Base_SetConfig+0xe8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a21      	ldr	r2, [pc, #132]	; (8004f50 <TIM_Base_SetConfig+0xec>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00f      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a20      	ldr	r2, [pc, #128]	; (8004f54 <TIM_Base_SetConfig+0xf0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a1f      	ldr	r2, [pc, #124]	; (8004f58 <TIM_Base_SetConfig+0xf4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a1e      	ldr	r2, [pc, #120]	; (8004f5c <TIM_Base_SetConfig+0xf8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a1d      	ldr	r2, [pc, #116]	; (8004f60 <TIM_Base_SetConfig+0xfc>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d108      	bne.n	8004f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a08      	ldr	r2, [pc, #32]	; (8004f48 <TIM_Base_SetConfig+0xe4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d103      	bne.n	8004f34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	615a      	str	r2, [r3, #20]
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800

08004f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0303 	bic.w	r3, r3, #3
 8004f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f023 0302 	bic.w	r3, r3, #2
 8004fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a1c      	ldr	r2, [pc, #112]	; (800502c <TIM_OC1_SetConfig+0xc8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10c      	bne.n	8004fda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0308 	bic.w	r3, r3, #8
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 0304 	bic.w	r3, r3, #4
 8004fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a13      	ldr	r2, [pc, #76]	; (800502c <TIM_OC1_SetConfig+0xc8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d111      	bne.n	8005006 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	621a      	str	r2, [r3, #32]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	40010000 	.word	0x40010000

08005030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f023 0210 	bic.w	r2, r3, #16
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0320 	bic.w	r3, r3, #32
 800507a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a1e      	ldr	r2, [pc, #120]	; (8005104 <TIM_OC2_SetConfig+0xd4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10d      	bne.n	80050ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a15      	ldr	r2, [pc, #84]	; (8005104 <TIM_OC2_SetConfig+0xd4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d113      	bne.n	80050dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40010000 	.word	0x40010000

08005108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <TIM_OC3_SetConfig+0xd0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d10d      	bne.n	8005182 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800516c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <TIM_OC3_SetConfig+0xd0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d113      	bne.n	80051b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	621a      	str	r2, [r3, #32]
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	40010000 	.word	0x40010000

080051dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	031b      	lsls	r3, r3, #12
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a10      	ldr	r2, [pc, #64]	; (8005278 <TIM_OC4_SetConfig+0x9c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d109      	bne.n	8005250 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	019b      	lsls	r3, r3, #6
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40010000 	.word	0x40010000

0800527c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	2201      	movs	r2, #1
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1a      	ldr	r2, [r3, #32]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	43db      	mvns	r3, r3
 800529e:	401a      	ands	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	fa01 f303 	lsl.w	r3, r1, r3
 80052b4:	431a      	orrs	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052dc:	2302      	movs	r3, #2
 80052de:	e050      	b.n	8005382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d018      	beq.n	8005356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532c:	d013      	beq.n	8005356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a18      	ldr	r2, [pc, #96]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00e      	beq.n	8005356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a16      	ldr	r2, [pc, #88]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d009      	beq.n	8005356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a15      	ldr	r2, [pc, #84]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d004      	beq.n	8005356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a13      	ldr	r2, [pc, #76]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d10c      	bne.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800535c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	4313      	orrs	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40014000 	.word	0x40014000

080053a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e03f      	b.n	800545e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fd fb58 	bl	8002aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2224      	movs	r2, #36	; 0x24
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800540e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fe69 	bl	80060e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695a      	ldr	r2, [r3, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005434:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005444:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	4613      	mov	r3, r2
 8005472:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b20      	cmp	r3, #32
 800547e:	d11d      	bne.n	80054bc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_UART_Receive_DMA+0x26>
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e016      	b.n	80054be <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_UART_Receive_DMA+0x38>
 800549a:	2302      	movs	r3, #2
 800549c:	e00f      	b.n	80054be <HAL_UART_Receive_DMA+0x58>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	461a      	mov	r2, r3
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 fbb8 	bl	8005c28 <UART_Start_Receive_DMA>
 80054b8:	4603      	mov	r3, r0
 80054ba:	e000      	b.n	80054be <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
  }
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b0ba      	sub	sp, #232	; 0xe8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <HAL_UART_IRQHandler+0x66>
 800551a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fd23 	bl	8005f72 <UART_Receive_IT>
      return;
 800552c:	e256      	b.n	80059dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800552e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80de 	beq.w	80056f4 <HAL_UART_IRQHandler+0x22c>
 8005538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005548:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80d1 	beq.w	80056f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_UART_IRQHandler+0xae>
 800555e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0201 	orr.w	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <HAL_UART_IRQHandler+0xd2>
 8005582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f043 0202 	orr.w	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <HAL_UART_IRQHandler+0xf6>
 80055a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f043 0204 	orr.w	r2, r3, #4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d011      	beq.n	80055ee <HAL_UART_IRQHandler+0x126>
 80055ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d105      	bne.n	80055e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f043 0208 	orr.w	r2, r3, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 81ed 	beq.w	80059d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_UART_IRQHandler+0x14e>
 8005604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fcae 	bl	8005f72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005620:	2b40      	cmp	r3, #64	; 0x40
 8005622:	bf0c      	ite	eq
 8005624:	2301      	moveq	r3, #1
 8005626:	2300      	movne	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d103      	bne.n	8005642 <HAL_UART_IRQHandler+0x17a>
 800563a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800563e:	2b00      	cmp	r3, #0
 8005640:	d04f      	beq.n	80056e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fbb6 	bl	8005db4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d141      	bne.n	80056da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3314      	adds	r3, #20
 800565c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800566c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3314      	adds	r3, #20
 800567e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800568e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800569a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1d9      	bne.n	8005656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d013      	beq.n	80056d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	4a7d      	ldr	r2, [pc, #500]	; (80058a4 <HAL_UART_IRQHandler+0x3dc>)
 80056b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fd fe7e 	bl	80033b8 <HAL_DMA_Abort_IT>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d016      	beq.n	80056f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056cc:	4610      	mov	r0, r2
 80056ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d0:	e00e      	b.n	80056f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f99a 	bl	8005a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d8:	e00a      	b.n	80056f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f996 	bl	8005a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	e006      	b.n	80056f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f992 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80056ee:	e170      	b.n	80059d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	bf00      	nop
    return;
 80056f2:	e16e      	b.n	80059d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	f040 814a 	bne.w	8005992 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 8143 	beq.w	8005992 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800570c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 813c 	beq.w	8005992 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60bb      	str	r3, [r7, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	f040 80b4 	bne.w	80058a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800574c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8140 	beq.w	80059d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800575a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800575e:	429a      	cmp	r2, r3
 8005760:	f080 8139 	bcs.w	80059d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800576a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005776:	f000 8088 	beq.w	800588a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1d9      	bne.n	800577a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3314      	adds	r3, #20
 80057cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3314      	adds	r3, #20
 80057e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e1      	bne.n	80057c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3314      	adds	r3, #20
 8005808:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3314      	adds	r3, #20
 8005822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800582c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e3      	bne.n	8005802 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800585a:	f023 0310 	bic.w	r3, r3, #16
 800585e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	330c      	adds	r3, #12
 8005868:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800586c:	65ba      	str	r2, [r7, #88]	; 0x58
 800586e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005872:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800587a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e3      	bne.n	8005848 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	4618      	mov	r0, r3
 8005886:	f7fd fd27 	bl	80032d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005892:	b29b      	uxth	r3, r3
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	b29b      	uxth	r3, r3
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f8c0 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058a0:	e099      	b.n	80059d6 <HAL_UART_IRQHandler+0x50e>
 80058a2:	bf00      	nop
 80058a4:	08005e7b 	.word	0x08005e7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 808b 	beq.w	80059da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80058c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8086 	beq.w	80059da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80058f2:	647a      	str	r2, [r7, #68]	; 0x44
 80058f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e3      	bne.n	80058ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3314      	adds	r3, #20
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	623b      	str	r3, [r7, #32]
   return(result);
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3314      	adds	r3, #20
 8005926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800592a:	633a      	str	r2, [r7, #48]	; 0x30
 800592c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e3      	bne.n	8005906 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	60fb      	str	r3, [r7, #12]
   return(result);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0310 	bic.w	r3, r3, #16
 8005962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	330c      	adds	r3, #12
 800596c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005970:	61fa      	str	r2, [r7, #28]
 8005972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	69b9      	ldr	r1, [r7, #24]
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	617b      	str	r3, [r7, #20]
   return(result);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e3      	bne.n	800594c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f848 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005990:	e023      	b.n	80059da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <HAL_UART_IRQHandler+0x4ea>
 800599e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa79 	bl	8005ea2 <UART_Transmit_IT>
    return;
 80059b0:	e014      	b.n	80059dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00e      	beq.n	80059dc <HAL_UART_IRQHandler+0x514>
 80059be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d008      	beq.n	80059dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fab9 	bl	8005f42 <UART_EndTransmit_IT>
    return;
 80059d0:	e004      	b.n	80059dc <HAL_UART_IRQHandler+0x514>
    return;
 80059d2:	bf00      	nop
 80059d4:	e002      	b.n	80059dc <HAL_UART_IRQHandler+0x514>
      return;
 80059d6:	bf00      	nop
 80059d8:	e000      	b.n	80059dc <HAL_UART_IRQHandler+0x514>
      return;
 80059da:	bf00      	nop
  }
}
 80059dc:	37e8      	adds	r7, #232	; 0xe8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop

080059e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b09c      	sub	sp, #112	; 0x70
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d172      	bne.n	8005b3a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a56:	2200      	movs	r2, #0
 8005a58:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	330c      	adds	r3, #12
 8005a60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a7c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e5      	bne.n	8005a5a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3314      	adds	r3, #20
 8005a94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	667b      	str	r3, [r7, #100]	; 0x64
 8005aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005aae:	647a      	str	r2, [r7, #68]	; 0x44
 8005ab0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e5      	bne.n	8005a8e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3314      	adds	r3, #20
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad8:	663b      	str	r3, [r7, #96]	; 0x60
 8005ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3314      	adds	r3, #20
 8005ae0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ae2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e5      	bne.n	8005ac2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d119      	bne.n	8005b3a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f023 0310 	bic.w	r3, r3, #16
 8005b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b26:	61fa      	str	r2, [r7, #28]
 8005b28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	69b9      	ldr	r1, [r7, #24]
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	617b      	str	r3, [r7, #20]
   return(result);
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e5      	bne.n	8005b06 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d106      	bne.n	8005b50 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b46:	4619      	mov	r1, r3
 8005b48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b4a:	f7ff ff69 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b4e:	e002      	b.n	8005b56 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005b50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b52:	f7fb f993 	bl	8000e7c <HAL_UART_RxCpltCallback>
}
 8005b56:	bf00      	nop
 8005b58:	3770      	adds	r7, #112	; 0x70
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d108      	bne.n	8005b86 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b78:	085b      	lsrs	r3, r3, #1
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff ff4e 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b84:	e002      	b.n	8005b8c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff ff36 	bl	80059f8 <HAL_UART_RxHalfCpltCallback>
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb0:	2b80      	cmp	r3, #128	; 0x80
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b21      	cmp	r3, #33	; 0x21
 8005bc6:	d108      	bne.n	8005bda <UART_DMAError+0x46>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005bd4:	68b8      	ldr	r0, [r7, #8]
 8005bd6:	f000 f8c5 	bl	8005d64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	bf0c      	ite	eq
 8005be8:	2301      	moveq	r3, #1
 8005bea:	2300      	movne	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b22      	cmp	r3, #34	; 0x22
 8005bfa:	d108      	bne.n	8005c0e <UART_DMAError+0x7a>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2200      	movs	r2, #0
 8005c06:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005c08:	68b8      	ldr	r0, [r7, #8]
 8005c0a:	f000 f8d3 	bl	8005db4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f043 0210 	orr.w	r2, r3, #16
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c1a:	68b8      	ldr	r0, [r7, #8]
 8005c1c:	f7ff fef6 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c20:	bf00      	nop
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b098      	sub	sp, #96	; 0x60
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	88fa      	ldrh	r2, [r7, #6]
 8005c40:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2222      	movs	r2, #34	; 0x22
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	4a40      	ldr	r2, [pc, #256]	; (8005d58 <UART_Start_Receive_DMA+0x130>)
 8005c56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	4a3f      	ldr	r2, [pc, #252]	; (8005d5c <UART_Start_Receive_DMA+0x134>)
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	4a3e      	ldr	r2, [pc, #248]	; (8005d60 <UART_Start_Receive_DMA+0x138>)
 8005c66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c70:	f107 0308 	add.w	r3, r7, #8
 8005c74:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4619      	mov	r1, r3
 8005c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	f7fd face 	bl	8003228 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d019      	beq.n	8005ce6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	330c      	adds	r3, #12
 8005cd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cd2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005cd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005cd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e5      	bne.n	8005cb2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3314      	adds	r3, #20
 8005cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	f043 0301 	orr.w	r3, r3, #1
 8005cfc:	657b      	str	r3, [r7, #84]	; 0x54
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3314      	adds	r3, #20
 8005d04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d06:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e5      	bne.n	8005ce6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3314      	adds	r3, #20
 8005d20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	617b      	str	r3, [r7, #20]
   return(result);
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d30:	653b      	str	r3, [r7, #80]	; 0x50
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3314      	adds	r3, #20
 8005d38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d3a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	6a39      	ldr	r1, [r7, #32]
 8005d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e5      	bne.n	8005d1a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3760      	adds	r7, #96	; 0x60
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	08005a39 	.word	0x08005a39
 8005d5c:	08005b5f 	.word	0x08005b5f
 8005d60:	08005b95 	.word	0x08005b95

08005d64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b089      	sub	sp, #36	; 0x24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	61ba      	str	r2, [r7, #24]
 8005d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6979      	ldr	r1, [r7, #20]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	613b      	str	r3, [r7, #16]
   return(result);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e5      	bne.n	8005d6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005da8:	bf00      	nop
 8005daa:	3724      	adds	r7, #36	; 0x24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b095      	sub	sp, #84	; 0x54
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ddc:	643a      	str	r2, [r7, #64]	; 0x40
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e5      	bne.n	8005dbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3314      	adds	r3, #20
 8005df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f023 0301 	bic.w	r3, r3, #1
 8005e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3314      	adds	r3, #20
 8005e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e5      	bne.n	8005df0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d119      	bne.n	8005e60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f023 0310 	bic.w	r3, r3, #16
 8005e42:	647b      	str	r3, [r7, #68]	; 0x44
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	330c      	adds	r3, #12
 8005e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e4c:	61ba      	str	r2, [r7, #24]
 8005e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6979      	ldr	r1, [r7, #20]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e5      	bne.n	8005e2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e6e:	bf00      	nop
 8005e70:	3754      	adds	r7, #84	; 0x54
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff fdb9 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b085      	sub	sp, #20
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b21      	cmp	r3, #33	; 0x21
 8005eb4:	d13e      	bne.n	8005f34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebe:	d114      	bne.n	8005eea <UART_Transmit_IT+0x48>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d110      	bne.n	8005eea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005edc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	1c9a      	adds	r2, r3, #2
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	621a      	str	r2, [r3, #32]
 8005ee8:	e008      	b.n	8005efc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	1c59      	adds	r1, r3, #1
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6211      	str	r1, [r2, #32]
 8005ef4:	781a      	ldrb	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10f      	bne.n	8005f30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	e000      	b.n	8005f36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f34:	2302      	movs	r3, #2
  }
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fd3e 	bl	80059e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b08c      	sub	sp, #48	; 0x30
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b22      	cmp	r3, #34	; 0x22
 8005f84:	f040 80ab 	bne.w	80060de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f90:	d117      	bne.n	8005fc2 <UART_Receive_IT+0x50>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d113      	bne.n	8005fc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	1c9a      	adds	r2, r3, #2
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8005fc0:	e026      	b.n	8006010 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd4:	d007      	beq.n	8005fe6 <UART_Receive_IT+0x74>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <UART_Receive_IT+0x82>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e008      	b.n	8006006 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006000:	b2da      	uxtb	r2, r3
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29b      	uxth	r3, r3
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	4619      	mov	r1, r3
 800601e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006020:	2b00      	cmp	r3, #0
 8006022:	d15a      	bne.n	80060da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0220 	bic.w	r2, r2, #32
 8006032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695a      	ldr	r2, [r3, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0201 	bic.w	r2, r2, #1
 8006052:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	2b01      	cmp	r3, #1
 8006062:	d135      	bne.n	80060d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	330c      	adds	r3, #12
 8006070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	613b      	str	r3, [r7, #16]
   return(result);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f023 0310 	bic.w	r3, r3, #16
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	330c      	adds	r3, #12
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	623a      	str	r2, [r7, #32]
 800608c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	69f9      	ldr	r1, [r7, #28]
 8006090:	6a3a      	ldr	r2, [r7, #32]
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	61bb      	str	r3, [r7, #24]
   return(result);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d10a      	bne.n	80060c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff fca9 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
 80060ce:	e002      	b.n	80060d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fa fed3 	bl	8000e7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e002      	b.n	80060e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e000      	b.n	80060e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
  }
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3730      	adds	r7, #48	; 0x30
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ec:	b0c0      	sub	sp, #256	; 0x100
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006104:	68d9      	ldr	r1, [r3, #12]
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	ea40 0301 	orr.w	r3, r0, r1
 8006110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	431a      	orrs	r2, r3
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	431a      	orrs	r2, r3
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006140:	f021 010c 	bic.w	r1, r1, #12
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800614e:	430b      	orrs	r3, r1
 8006150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006162:	6999      	ldr	r1, [r3, #24]
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	ea40 0301 	orr.w	r3, r0, r1
 800616e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4b8f      	ldr	r3, [pc, #572]	; (80063b4 <UART_SetConfig+0x2cc>)
 8006178:	429a      	cmp	r2, r3
 800617a:	d005      	beq.n	8006188 <UART_SetConfig+0xa0>
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4b8d      	ldr	r3, [pc, #564]	; (80063b8 <UART_SetConfig+0x2d0>)
 8006184:	429a      	cmp	r2, r3
 8006186:	d104      	bne.n	8006192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006188:	f7fe fa0e 	bl	80045a8 <HAL_RCC_GetPCLK2Freq>
 800618c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006190:	e003      	b.n	800619a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006192:	f7fe f9f5 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 8006196:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800619a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a4:	f040 810c 	bne.w	80063c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ac:	2200      	movs	r2, #0
 80061ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061ba:	4622      	mov	r2, r4
 80061bc:	462b      	mov	r3, r5
 80061be:	1891      	adds	r1, r2, r2
 80061c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80061c2:	415b      	adcs	r3, r3
 80061c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061ca:	4621      	mov	r1, r4
 80061cc:	eb12 0801 	adds.w	r8, r2, r1
 80061d0:	4629      	mov	r1, r5
 80061d2:	eb43 0901 	adc.w	r9, r3, r1
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ea:	4690      	mov	r8, r2
 80061ec:	4699      	mov	r9, r3
 80061ee:	4623      	mov	r3, r4
 80061f0:	eb18 0303 	adds.w	r3, r8, r3
 80061f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061f8:	462b      	mov	r3, r5
 80061fa:	eb49 0303 	adc.w	r3, r9, r3
 80061fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800620e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006216:	460b      	mov	r3, r1
 8006218:	18db      	adds	r3, r3, r3
 800621a:	653b      	str	r3, [r7, #80]	; 0x50
 800621c:	4613      	mov	r3, r2
 800621e:	eb42 0303 	adc.w	r3, r2, r3
 8006222:	657b      	str	r3, [r7, #84]	; 0x54
 8006224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800622c:	f7fa fca4 	bl	8000b78 <__aeabi_uldivmod>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4b61      	ldr	r3, [pc, #388]	; (80063bc <UART_SetConfig+0x2d4>)
 8006236:	fba3 2302 	umull	r2, r3, r3, r2
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	011c      	lsls	r4, r3, #4
 800623e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006242:	2200      	movs	r2, #0
 8006244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006248:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800624c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006250:	4642      	mov	r2, r8
 8006252:	464b      	mov	r3, r9
 8006254:	1891      	adds	r1, r2, r2
 8006256:	64b9      	str	r1, [r7, #72]	; 0x48
 8006258:	415b      	adcs	r3, r3
 800625a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800625c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006260:	4641      	mov	r1, r8
 8006262:	eb12 0a01 	adds.w	sl, r2, r1
 8006266:	4649      	mov	r1, r9
 8006268:	eb43 0b01 	adc.w	fp, r3, r1
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800627c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006280:	4692      	mov	sl, r2
 8006282:	469b      	mov	fp, r3
 8006284:	4643      	mov	r3, r8
 8006286:	eb1a 0303 	adds.w	r3, sl, r3
 800628a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800628e:	464b      	mov	r3, r9
 8006290:	eb4b 0303 	adc.w	r3, fp, r3
 8006294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062ac:	460b      	mov	r3, r1
 80062ae:	18db      	adds	r3, r3, r3
 80062b0:	643b      	str	r3, [r7, #64]	; 0x40
 80062b2:	4613      	mov	r3, r2
 80062b4:	eb42 0303 	adc.w	r3, r2, r3
 80062b8:	647b      	str	r3, [r7, #68]	; 0x44
 80062ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062c2:	f7fa fc59 	bl	8000b78 <__aeabi_uldivmod>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4611      	mov	r1, r2
 80062cc:	4b3b      	ldr	r3, [pc, #236]	; (80063bc <UART_SetConfig+0x2d4>)
 80062ce:	fba3 2301 	umull	r2, r3, r3, r1
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	2264      	movs	r2, #100	; 0x64
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	1acb      	subs	r3, r1, r3
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062e2:	4b36      	ldr	r3, [pc, #216]	; (80063bc <UART_SetConfig+0x2d4>)
 80062e4:	fba3 2302 	umull	r2, r3, r3, r2
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062f0:	441c      	add	r4, r3
 80062f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006304:	4642      	mov	r2, r8
 8006306:	464b      	mov	r3, r9
 8006308:	1891      	adds	r1, r2, r2
 800630a:	63b9      	str	r1, [r7, #56]	; 0x38
 800630c:	415b      	adcs	r3, r3
 800630e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006314:	4641      	mov	r1, r8
 8006316:	1851      	adds	r1, r2, r1
 8006318:	6339      	str	r1, [r7, #48]	; 0x30
 800631a:	4649      	mov	r1, r9
 800631c:	414b      	adcs	r3, r1
 800631e:	637b      	str	r3, [r7, #52]	; 0x34
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800632c:	4659      	mov	r1, fp
 800632e:	00cb      	lsls	r3, r1, #3
 8006330:	4651      	mov	r1, sl
 8006332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006336:	4651      	mov	r1, sl
 8006338:	00ca      	lsls	r2, r1, #3
 800633a:	4610      	mov	r0, r2
 800633c:	4619      	mov	r1, r3
 800633e:	4603      	mov	r3, r0
 8006340:	4642      	mov	r2, r8
 8006342:	189b      	adds	r3, r3, r2
 8006344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006348:	464b      	mov	r3, r9
 800634a:	460a      	mov	r2, r1
 800634c:	eb42 0303 	adc.w	r3, r2, r3
 8006350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006360:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006368:	460b      	mov	r3, r1
 800636a:	18db      	adds	r3, r3, r3
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
 800636e:	4613      	mov	r3, r2
 8006370:	eb42 0303 	adc.w	r3, r2, r3
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800637a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800637e:	f7fa fbfb 	bl	8000b78 <__aeabi_uldivmod>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <UART_SetConfig+0x2d4>)
 8006388:	fba3 1302 	umull	r1, r3, r3, r2
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	2164      	movs	r1, #100	; 0x64
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	3332      	adds	r3, #50	; 0x32
 800639a:	4a08      	ldr	r2, [pc, #32]	; (80063bc <UART_SetConfig+0x2d4>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	f003 0207 	and.w	r2, r3, #7
 80063a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4422      	add	r2, r4
 80063ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063b0:	e105      	b.n	80065be <UART_SetConfig+0x4d6>
 80063b2:	bf00      	nop
 80063b4:	40011000 	.word	0x40011000
 80063b8:	40011400 	.word	0x40011400
 80063bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063d2:	4642      	mov	r2, r8
 80063d4:	464b      	mov	r3, r9
 80063d6:	1891      	adds	r1, r2, r2
 80063d8:	6239      	str	r1, [r7, #32]
 80063da:	415b      	adcs	r3, r3
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
 80063de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063e2:	4641      	mov	r1, r8
 80063e4:	1854      	adds	r4, r2, r1
 80063e6:	4649      	mov	r1, r9
 80063e8:	eb43 0501 	adc.w	r5, r3, r1
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	00eb      	lsls	r3, r5, #3
 80063f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063fa:	00e2      	lsls	r2, r4, #3
 80063fc:	4614      	mov	r4, r2
 80063fe:	461d      	mov	r5, r3
 8006400:	4643      	mov	r3, r8
 8006402:	18e3      	adds	r3, r4, r3
 8006404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006408:	464b      	mov	r3, r9
 800640a:	eb45 0303 	adc.w	r3, r5, r3
 800640e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800641e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006422:	f04f 0200 	mov.w	r2, #0
 8006426:	f04f 0300 	mov.w	r3, #0
 800642a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800642e:	4629      	mov	r1, r5
 8006430:	008b      	lsls	r3, r1, #2
 8006432:	4621      	mov	r1, r4
 8006434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006438:	4621      	mov	r1, r4
 800643a:	008a      	lsls	r2, r1, #2
 800643c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006440:	f7fa fb9a 	bl	8000b78 <__aeabi_uldivmod>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4b60      	ldr	r3, [pc, #384]	; (80065cc <UART_SetConfig+0x4e4>)
 800644a:	fba3 2302 	umull	r2, r3, r3, r2
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	011c      	lsls	r4, r3, #4
 8006452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006456:	2200      	movs	r2, #0
 8006458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800645c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006464:	4642      	mov	r2, r8
 8006466:	464b      	mov	r3, r9
 8006468:	1891      	adds	r1, r2, r2
 800646a:	61b9      	str	r1, [r7, #24]
 800646c:	415b      	adcs	r3, r3
 800646e:	61fb      	str	r3, [r7, #28]
 8006470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006474:	4641      	mov	r1, r8
 8006476:	1851      	adds	r1, r2, r1
 8006478:	6139      	str	r1, [r7, #16]
 800647a:	4649      	mov	r1, r9
 800647c:	414b      	adcs	r3, r1
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800648c:	4659      	mov	r1, fp
 800648e:	00cb      	lsls	r3, r1, #3
 8006490:	4651      	mov	r1, sl
 8006492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006496:	4651      	mov	r1, sl
 8006498:	00ca      	lsls	r2, r1, #3
 800649a:	4610      	mov	r0, r2
 800649c:	4619      	mov	r1, r3
 800649e:	4603      	mov	r3, r0
 80064a0:	4642      	mov	r2, r8
 80064a2:	189b      	adds	r3, r3, r2
 80064a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064a8:	464b      	mov	r3, r9
 80064aa:	460a      	mov	r2, r1
 80064ac:	eb42 0303 	adc.w	r3, r2, r3
 80064b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80064be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064cc:	4649      	mov	r1, r9
 80064ce:	008b      	lsls	r3, r1, #2
 80064d0:	4641      	mov	r1, r8
 80064d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064d6:	4641      	mov	r1, r8
 80064d8:	008a      	lsls	r2, r1, #2
 80064da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064de:	f7fa fb4b 	bl	8000b78 <__aeabi_uldivmod>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4b39      	ldr	r3, [pc, #228]	; (80065cc <UART_SetConfig+0x4e4>)
 80064e8:	fba3 1302 	umull	r1, r3, r3, r2
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	2164      	movs	r1, #100	; 0x64
 80064f0:	fb01 f303 	mul.w	r3, r1, r3
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	3332      	adds	r3, #50	; 0x32
 80064fa:	4a34      	ldr	r2, [pc, #208]	; (80065cc <UART_SetConfig+0x4e4>)
 80064fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006500:	095b      	lsrs	r3, r3, #5
 8006502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006506:	441c      	add	r4, r3
 8006508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800650c:	2200      	movs	r2, #0
 800650e:	673b      	str	r3, [r7, #112]	; 0x70
 8006510:	677a      	str	r2, [r7, #116]	; 0x74
 8006512:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006516:	4642      	mov	r2, r8
 8006518:	464b      	mov	r3, r9
 800651a:	1891      	adds	r1, r2, r2
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	415b      	adcs	r3, r3
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006526:	4641      	mov	r1, r8
 8006528:	1851      	adds	r1, r2, r1
 800652a:	6039      	str	r1, [r7, #0]
 800652c:	4649      	mov	r1, r9
 800652e:	414b      	adcs	r3, r1
 8006530:	607b      	str	r3, [r7, #4]
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800653e:	4659      	mov	r1, fp
 8006540:	00cb      	lsls	r3, r1, #3
 8006542:	4651      	mov	r1, sl
 8006544:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006548:	4651      	mov	r1, sl
 800654a:	00ca      	lsls	r2, r1, #3
 800654c:	4610      	mov	r0, r2
 800654e:	4619      	mov	r1, r3
 8006550:	4603      	mov	r3, r0
 8006552:	4642      	mov	r2, r8
 8006554:	189b      	adds	r3, r3, r2
 8006556:	66bb      	str	r3, [r7, #104]	; 0x68
 8006558:	464b      	mov	r3, r9
 800655a:	460a      	mov	r2, r1
 800655c:	eb42 0303 	adc.w	r3, r2, r3
 8006560:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	663b      	str	r3, [r7, #96]	; 0x60
 800656c:	667a      	str	r2, [r7, #100]	; 0x64
 800656e:	f04f 0200 	mov.w	r2, #0
 8006572:	f04f 0300 	mov.w	r3, #0
 8006576:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800657a:	4649      	mov	r1, r9
 800657c:	008b      	lsls	r3, r1, #2
 800657e:	4641      	mov	r1, r8
 8006580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006584:	4641      	mov	r1, r8
 8006586:	008a      	lsls	r2, r1, #2
 8006588:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800658c:	f7fa faf4 	bl	8000b78 <__aeabi_uldivmod>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <UART_SetConfig+0x4e4>)
 8006596:	fba3 1302 	umull	r1, r3, r3, r2
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	2164      	movs	r1, #100	; 0x64
 800659e:	fb01 f303 	mul.w	r3, r1, r3
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	3332      	adds	r3, #50	; 0x32
 80065a8:	4a08      	ldr	r2, [pc, #32]	; (80065cc <UART_SetConfig+0x4e4>)
 80065aa:	fba2 2303 	umull	r2, r3, r2, r3
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	f003 020f 	and.w	r2, r3, #15
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4422      	add	r2, r4
 80065bc:	609a      	str	r2, [r3, #8]
}
 80065be:	bf00      	nop
 80065c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065c4:	46bd      	mov	sp, r7
 80065c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ca:	bf00      	nop
 80065cc:	51eb851f 	.word	0x51eb851f

080065d0 <atoi>:
 80065d0:	220a      	movs	r2, #10
 80065d2:	2100      	movs	r1, #0
 80065d4:	f000 b8ee 	b.w	80067b4 <strtol>

080065d8 <__errno>:
 80065d8:	4b01      	ldr	r3, [pc, #4]	; (80065e0 <__errno+0x8>)
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	20000010 	.word	0x20000010

080065e4 <__libc_init_array>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	4d0d      	ldr	r5, [pc, #52]	; (800661c <__libc_init_array+0x38>)
 80065e8:	4c0d      	ldr	r4, [pc, #52]	; (8006620 <__libc_init_array+0x3c>)
 80065ea:	1b64      	subs	r4, r4, r5
 80065ec:	10a4      	asrs	r4, r4, #2
 80065ee:	2600      	movs	r6, #0
 80065f0:	42a6      	cmp	r6, r4
 80065f2:	d109      	bne.n	8006608 <__libc_init_array+0x24>
 80065f4:	4d0b      	ldr	r5, [pc, #44]	; (8006624 <__libc_init_array+0x40>)
 80065f6:	4c0c      	ldr	r4, [pc, #48]	; (8006628 <__libc_init_array+0x44>)
 80065f8:	f000 f988 	bl	800690c <_init>
 80065fc:	1b64      	subs	r4, r4, r5
 80065fe:	10a4      	asrs	r4, r4, #2
 8006600:	2600      	movs	r6, #0
 8006602:	42a6      	cmp	r6, r4
 8006604:	d105      	bne.n	8006612 <__libc_init_array+0x2e>
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	f855 3b04 	ldr.w	r3, [r5], #4
 800660c:	4798      	blx	r3
 800660e:	3601      	adds	r6, #1
 8006610:	e7ee      	b.n	80065f0 <__libc_init_array+0xc>
 8006612:	f855 3b04 	ldr.w	r3, [r5], #4
 8006616:	4798      	blx	r3
 8006618:	3601      	adds	r6, #1
 800661a:	e7f2      	b.n	8006602 <__libc_init_array+0x1e>
 800661c:	08006a6c 	.word	0x08006a6c
 8006620:	08006a6c 	.word	0x08006a6c
 8006624:	08006a6c 	.word	0x08006a6c
 8006628:	08006a70 	.word	0x08006a70

0800662c <memcpy>:
 800662c:	440a      	add	r2, r1
 800662e:	4291      	cmp	r1, r2
 8006630:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006634:	d100      	bne.n	8006638 <memcpy+0xc>
 8006636:	4770      	bx	lr
 8006638:	b510      	push	{r4, lr}
 800663a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800663e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006642:	4291      	cmp	r1, r2
 8006644:	d1f9      	bne.n	800663a <memcpy+0xe>
 8006646:	bd10      	pop	{r4, pc}

08006648 <memset>:
 8006648:	4402      	add	r2, r0
 800664a:	4603      	mov	r3, r0
 800664c:	4293      	cmp	r3, r2
 800664e:	d100      	bne.n	8006652 <memset+0xa>
 8006650:	4770      	bx	lr
 8006652:	f803 1b01 	strb.w	r1, [r3], #1
 8006656:	e7f9      	b.n	800664c <memset+0x4>

08006658 <__strtok_r>:
 8006658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800665a:	b908      	cbnz	r0, 8006660 <__strtok_r+0x8>
 800665c:	6810      	ldr	r0, [r2, #0]
 800665e:	b188      	cbz	r0, 8006684 <__strtok_r+0x2c>
 8006660:	4604      	mov	r4, r0
 8006662:	4620      	mov	r0, r4
 8006664:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006668:	460f      	mov	r7, r1
 800666a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800666e:	b91e      	cbnz	r6, 8006678 <__strtok_r+0x20>
 8006670:	b965      	cbnz	r5, 800668c <__strtok_r+0x34>
 8006672:	6015      	str	r5, [r2, #0]
 8006674:	4628      	mov	r0, r5
 8006676:	e005      	b.n	8006684 <__strtok_r+0x2c>
 8006678:	42b5      	cmp	r5, r6
 800667a:	d1f6      	bne.n	800666a <__strtok_r+0x12>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1f0      	bne.n	8006662 <__strtok_r+0xa>
 8006680:	6014      	str	r4, [r2, #0]
 8006682:	7003      	strb	r3, [r0, #0]
 8006684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006686:	461c      	mov	r4, r3
 8006688:	e00c      	b.n	80066a4 <__strtok_r+0x4c>
 800668a:	b915      	cbnz	r5, 8006692 <__strtok_r+0x3a>
 800668c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006690:	460e      	mov	r6, r1
 8006692:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006696:	42ab      	cmp	r3, r5
 8006698:	d1f7      	bne.n	800668a <__strtok_r+0x32>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f3      	beq.n	8006686 <__strtok_r+0x2e>
 800669e:	2300      	movs	r3, #0
 80066a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80066a4:	6014      	str	r4, [r2, #0]
 80066a6:	e7ed      	b.n	8006684 <__strtok_r+0x2c>

080066a8 <strtok_r>:
 80066a8:	2301      	movs	r3, #1
 80066aa:	f7ff bfd5 	b.w	8006658 <__strtok_r>
	...

080066b0 <_strtol_l.constprop.0>:
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b6:	d001      	beq.n	80066bc <_strtol_l.constprop.0+0xc>
 80066b8:	2b24      	cmp	r3, #36	; 0x24
 80066ba:	d906      	bls.n	80066ca <_strtol_l.constprop.0+0x1a>
 80066bc:	f7ff ff8c 	bl	80065d8 <__errno>
 80066c0:	2316      	movs	r3, #22
 80066c2:	6003      	str	r3, [r0, #0]
 80066c4:	2000      	movs	r0, #0
 80066c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80067b0 <_strtol_l.constprop.0+0x100>
 80066ce:	460d      	mov	r5, r1
 80066d0:	462e      	mov	r6, r5
 80066d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80066da:	f017 0708 	ands.w	r7, r7, #8
 80066de:	d1f7      	bne.n	80066d0 <_strtol_l.constprop.0+0x20>
 80066e0:	2c2d      	cmp	r4, #45	; 0x2d
 80066e2:	d132      	bne.n	800674a <_strtol_l.constprop.0+0x9a>
 80066e4:	782c      	ldrb	r4, [r5, #0]
 80066e6:	2701      	movs	r7, #1
 80066e8:	1cb5      	adds	r5, r6, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d05b      	beq.n	80067a6 <_strtol_l.constprop.0+0xf6>
 80066ee:	2b10      	cmp	r3, #16
 80066f0:	d109      	bne.n	8006706 <_strtol_l.constprop.0+0x56>
 80066f2:	2c30      	cmp	r4, #48	; 0x30
 80066f4:	d107      	bne.n	8006706 <_strtol_l.constprop.0+0x56>
 80066f6:	782c      	ldrb	r4, [r5, #0]
 80066f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80066fc:	2c58      	cmp	r4, #88	; 0x58
 80066fe:	d14d      	bne.n	800679c <_strtol_l.constprop.0+0xec>
 8006700:	786c      	ldrb	r4, [r5, #1]
 8006702:	2310      	movs	r3, #16
 8006704:	3502      	adds	r5, #2
 8006706:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800670a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800670e:	f04f 0c00 	mov.w	ip, #0
 8006712:	fbb8 f9f3 	udiv	r9, r8, r3
 8006716:	4666      	mov	r6, ip
 8006718:	fb03 8a19 	mls	sl, r3, r9, r8
 800671c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006720:	f1be 0f09 	cmp.w	lr, #9
 8006724:	d816      	bhi.n	8006754 <_strtol_l.constprop.0+0xa4>
 8006726:	4674      	mov	r4, lr
 8006728:	42a3      	cmp	r3, r4
 800672a:	dd24      	ble.n	8006776 <_strtol_l.constprop.0+0xc6>
 800672c:	f1bc 0f00 	cmp.w	ip, #0
 8006730:	db1e      	blt.n	8006770 <_strtol_l.constprop.0+0xc0>
 8006732:	45b1      	cmp	r9, r6
 8006734:	d31c      	bcc.n	8006770 <_strtol_l.constprop.0+0xc0>
 8006736:	d101      	bne.n	800673c <_strtol_l.constprop.0+0x8c>
 8006738:	45a2      	cmp	sl, r4
 800673a:	db19      	blt.n	8006770 <_strtol_l.constprop.0+0xc0>
 800673c:	fb06 4603 	mla	r6, r6, r3, r4
 8006740:	f04f 0c01 	mov.w	ip, #1
 8006744:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006748:	e7e8      	b.n	800671c <_strtol_l.constprop.0+0x6c>
 800674a:	2c2b      	cmp	r4, #43	; 0x2b
 800674c:	bf04      	itt	eq
 800674e:	782c      	ldrbeq	r4, [r5, #0]
 8006750:	1cb5      	addeq	r5, r6, #2
 8006752:	e7ca      	b.n	80066ea <_strtol_l.constprop.0+0x3a>
 8006754:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006758:	f1be 0f19 	cmp.w	lr, #25
 800675c:	d801      	bhi.n	8006762 <_strtol_l.constprop.0+0xb2>
 800675e:	3c37      	subs	r4, #55	; 0x37
 8006760:	e7e2      	b.n	8006728 <_strtol_l.constprop.0+0x78>
 8006762:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006766:	f1be 0f19 	cmp.w	lr, #25
 800676a:	d804      	bhi.n	8006776 <_strtol_l.constprop.0+0xc6>
 800676c:	3c57      	subs	r4, #87	; 0x57
 800676e:	e7db      	b.n	8006728 <_strtol_l.constprop.0+0x78>
 8006770:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006774:	e7e6      	b.n	8006744 <_strtol_l.constprop.0+0x94>
 8006776:	f1bc 0f00 	cmp.w	ip, #0
 800677a:	da05      	bge.n	8006788 <_strtol_l.constprop.0+0xd8>
 800677c:	2322      	movs	r3, #34	; 0x22
 800677e:	6003      	str	r3, [r0, #0]
 8006780:	4646      	mov	r6, r8
 8006782:	b942      	cbnz	r2, 8006796 <_strtol_l.constprop.0+0xe6>
 8006784:	4630      	mov	r0, r6
 8006786:	e79e      	b.n	80066c6 <_strtol_l.constprop.0+0x16>
 8006788:	b107      	cbz	r7, 800678c <_strtol_l.constprop.0+0xdc>
 800678a:	4276      	negs	r6, r6
 800678c:	2a00      	cmp	r2, #0
 800678e:	d0f9      	beq.n	8006784 <_strtol_l.constprop.0+0xd4>
 8006790:	f1bc 0f00 	cmp.w	ip, #0
 8006794:	d000      	beq.n	8006798 <_strtol_l.constprop.0+0xe8>
 8006796:	1e69      	subs	r1, r5, #1
 8006798:	6011      	str	r1, [r2, #0]
 800679a:	e7f3      	b.n	8006784 <_strtol_l.constprop.0+0xd4>
 800679c:	2430      	movs	r4, #48	; 0x30
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1b1      	bne.n	8006706 <_strtol_l.constprop.0+0x56>
 80067a2:	2308      	movs	r3, #8
 80067a4:	e7af      	b.n	8006706 <_strtol_l.constprop.0+0x56>
 80067a6:	2c30      	cmp	r4, #48	; 0x30
 80067a8:	d0a5      	beq.n	80066f6 <_strtol_l.constprop.0+0x46>
 80067aa:	230a      	movs	r3, #10
 80067ac:	e7ab      	b.n	8006706 <_strtol_l.constprop.0+0x56>
 80067ae:	bf00      	nop
 80067b0:	08006961 	.word	0x08006961

080067b4 <strtol>:
 80067b4:	4613      	mov	r3, r2
 80067b6:	460a      	mov	r2, r1
 80067b8:	4601      	mov	r1, r0
 80067ba:	4802      	ldr	r0, [pc, #8]	; (80067c4 <strtol+0x10>)
 80067bc:	6800      	ldr	r0, [r0, #0]
 80067be:	f7ff bf77 	b.w	80066b0 <_strtol_l.constprop.0>
 80067c2:	bf00      	nop
 80067c4:	20000010 	.word	0x20000010

080067c8 <_strtoull_l.constprop.0>:
 80067c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	4692      	mov	sl, r2
 80067ce:	4a49      	ldr	r2, [pc, #292]	; (80068f4 <_strtoull_l.constprop.0+0x12c>)
 80067d0:	9001      	str	r0, [sp, #4]
 80067d2:	4689      	mov	r9, r1
 80067d4:	461d      	mov	r5, r3
 80067d6:	460e      	mov	r6, r1
 80067d8:	4633      	mov	r3, r6
 80067da:	f816 4b01 	ldrb.w	r4, [r6], #1
 80067de:	5ca7      	ldrb	r7, [r4, r2]
 80067e0:	f017 0708 	ands.w	r7, r7, #8
 80067e4:	d1f8      	bne.n	80067d8 <_strtoull_l.constprop.0+0x10>
 80067e6:	2c2d      	cmp	r4, #45	; 0x2d
 80067e8:	d14a      	bne.n	8006880 <_strtoull_l.constprop.0+0xb8>
 80067ea:	7834      	ldrb	r4, [r6, #0]
 80067ec:	2701      	movs	r7, #1
 80067ee:	1c9e      	adds	r6, r3, #2
 80067f0:	2d00      	cmp	r5, #0
 80067f2:	d07b      	beq.n	80068ec <_strtoull_l.constprop.0+0x124>
 80067f4:	2d10      	cmp	r5, #16
 80067f6:	d109      	bne.n	800680c <_strtoull_l.constprop.0+0x44>
 80067f8:	2c30      	cmp	r4, #48	; 0x30
 80067fa:	d107      	bne.n	800680c <_strtoull_l.constprop.0+0x44>
 80067fc:	7833      	ldrb	r3, [r6, #0]
 80067fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006802:	2b58      	cmp	r3, #88	; 0x58
 8006804:	d16d      	bne.n	80068e2 <_strtoull_l.constprop.0+0x11a>
 8006806:	7874      	ldrb	r4, [r6, #1]
 8006808:	2510      	movs	r5, #16
 800680a:	3602      	adds	r6, #2
 800680c:	ea4f 7be5 	mov.w	fp, r5, asr #31
 8006810:	462a      	mov	r2, r5
 8006812:	465b      	mov	r3, fp
 8006814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800681c:	f7fa f9ac 	bl	8000b78 <__aeabi_uldivmod>
 8006820:	462a      	mov	r2, r5
 8006822:	9000      	str	r0, [sp, #0]
 8006824:	4688      	mov	r8, r1
 8006826:	465b      	mov	r3, fp
 8006828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800682c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006830:	f7fa f9a2 	bl	8000b78 <__aeabi_uldivmod>
 8006834:	2300      	movs	r3, #0
 8006836:	4618      	mov	r0, r3
 8006838:	4619      	mov	r1, r3
 800683a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800683e:	f1bc 0f09 	cmp.w	ip, #9
 8006842:	d822      	bhi.n	800688a <_strtoull_l.constprop.0+0xc2>
 8006844:	4664      	mov	r4, ip
 8006846:	42a5      	cmp	r5, r4
 8006848:	dd30      	ble.n	80068ac <_strtoull_l.constprop.0+0xe4>
 800684a:	2b00      	cmp	r3, #0
 800684c:	db2b      	blt.n	80068a6 <_strtoull_l.constprop.0+0xde>
 800684e:	9b00      	ldr	r3, [sp, #0]
 8006850:	4283      	cmp	r3, r0
 8006852:	eb78 0301 	sbcs.w	r3, r8, r1
 8006856:	d326      	bcc.n	80068a6 <_strtoull_l.constprop.0+0xde>
 8006858:	9b00      	ldr	r3, [sp, #0]
 800685a:	4588      	cmp	r8, r1
 800685c:	bf08      	it	eq
 800685e:	4283      	cmpeq	r3, r0
 8006860:	d101      	bne.n	8006866 <_strtoull_l.constprop.0+0x9e>
 8006862:	42a2      	cmp	r2, r4
 8006864:	db1f      	blt.n	80068a6 <_strtoull_l.constprop.0+0xde>
 8006866:	4369      	muls	r1, r5
 8006868:	fb00 110b 	mla	r1, r0, fp, r1
 800686c:	fba5 0300 	umull	r0, r3, r5, r0
 8006870:	4419      	add	r1, r3
 8006872:	1820      	adds	r0, r4, r0
 8006874:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8006878:	2301      	movs	r3, #1
 800687a:	f816 4b01 	ldrb.w	r4, [r6], #1
 800687e:	e7dc      	b.n	800683a <_strtoull_l.constprop.0+0x72>
 8006880:	2c2b      	cmp	r4, #43	; 0x2b
 8006882:	bf04      	itt	eq
 8006884:	7834      	ldrbeq	r4, [r6, #0]
 8006886:	1c9e      	addeq	r6, r3, #2
 8006888:	e7b2      	b.n	80067f0 <_strtoull_l.constprop.0+0x28>
 800688a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800688e:	f1bc 0f19 	cmp.w	ip, #25
 8006892:	d801      	bhi.n	8006898 <_strtoull_l.constprop.0+0xd0>
 8006894:	3c37      	subs	r4, #55	; 0x37
 8006896:	e7d6      	b.n	8006846 <_strtoull_l.constprop.0+0x7e>
 8006898:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800689c:	f1bc 0f19 	cmp.w	ip, #25
 80068a0:	d804      	bhi.n	80068ac <_strtoull_l.constprop.0+0xe4>
 80068a2:	3c57      	subs	r4, #87	; 0x57
 80068a4:	e7cf      	b.n	8006846 <_strtoull_l.constprop.0+0x7e>
 80068a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068aa:	e7e6      	b.n	800687a <_strtoull_l.constprop.0+0xb2>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	da0b      	bge.n	80068c8 <_strtoull_l.constprop.0+0x100>
 80068b0:	9a01      	ldr	r2, [sp, #4]
 80068b2:	2322      	movs	r3, #34	; 0x22
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	4601      	mov	r1, r0
 80068bc:	f1ba 0f00 	cmp.w	sl, #0
 80068c0:	d10a      	bne.n	80068d8 <_strtoull_l.constprop.0+0x110>
 80068c2:	b003      	add	sp, #12
 80068c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c8:	b117      	cbz	r7, 80068d0 <_strtoull_l.constprop.0+0x108>
 80068ca:	4240      	negs	r0, r0
 80068cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80068d0:	f1ba 0f00 	cmp.w	sl, #0
 80068d4:	d0f5      	beq.n	80068c2 <_strtoull_l.constprop.0+0xfa>
 80068d6:	b10b      	cbz	r3, 80068dc <_strtoull_l.constprop.0+0x114>
 80068d8:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 80068dc:	f8ca 9000 	str.w	r9, [sl]
 80068e0:	e7ef      	b.n	80068c2 <_strtoull_l.constprop.0+0xfa>
 80068e2:	2430      	movs	r4, #48	; 0x30
 80068e4:	2d00      	cmp	r5, #0
 80068e6:	d191      	bne.n	800680c <_strtoull_l.constprop.0+0x44>
 80068e8:	2508      	movs	r5, #8
 80068ea:	e78f      	b.n	800680c <_strtoull_l.constprop.0+0x44>
 80068ec:	2c30      	cmp	r4, #48	; 0x30
 80068ee:	d085      	beq.n	80067fc <_strtoull_l.constprop.0+0x34>
 80068f0:	250a      	movs	r5, #10
 80068f2:	e78b      	b.n	800680c <_strtoull_l.constprop.0+0x44>
 80068f4:	08006961 	.word	0x08006961

080068f8 <strtoull>:
 80068f8:	4613      	mov	r3, r2
 80068fa:	460a      	mov	r2, r1
 80068fc:	4601      	mov	r1, r0
 80068fe:	4802      	ldr	r0, [pc, #8]	; (8006908 <strtoull+0x10>)
 8006900:	6800      	ldr	r0, [r0, #0]
 8006902:	f7ff bf61 	b.w	80067c8 <_strtoull_l.constprop.0>
 8006906:	bf00      	nop
 8006908:	20000010 	.word	0x20000010

0800690c <_init>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	bf00      	nop
 8006910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006912:	bc08      	pop	{r3}
 8006914:	469e      	mov	lr, r3
 8006916:	4770      	bx	lr

08006918 <_fini>:
 8006918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691a:	bf00      	nop
 800691c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691e:	bc08      	pop	{r3}
 8006920:	469e      	mov	lr, r3
 8006922:	4770      	bx	lr
