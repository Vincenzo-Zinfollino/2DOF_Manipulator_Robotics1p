
planar_arm_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08007578  08007578  00017578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab8  08007ab8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007ab8  08007ab8  00017ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac0  08007ac0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac4  08007ac4  00017ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000070  08007b38  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08007b38  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aba0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d59  00000000  00000000  0002ac40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002d208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016883  00000000  00000000  0002d9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a79c  00000000  00000000  0004423b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087bb4  00000000  00000000  0004e9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d658b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ec  00000000  00000000  000d65dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800755c 	.word	0x0800755c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800755c 	.word	0x0800755c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb0:	f000 b974 	b.w	8000e9c <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9d08      	ldr	r5, [sp, #32]
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	468e      	mov	lr, r1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d14d      	bne.n	8000c76 <__udivmoddi4+0xaa>
 8000bda:	428a      	cmp	r2, r1
 8000bdc:	4694      	mov	ip, r2
 8000bde:	d969      	bls.n	8000cb4 <__udivmoddi4+0xe8>
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	b152      	cbz	r2, 8000bfc <__udivmoddi4+0x30>
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	f1c2 0120 	rsb	r1, r2, #32
 8000bee:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfa:	4094      	lsls	r4, r2
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	0c21      	lsrs	r1, r4, #16
 8000c02:	fbbe f6f8 	udiv	r6, lr, r8
 8000c06:	fa1f f78c 	uxth.w	r7, ip
 8000c0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c12:	fb06 f107 	mul.w	r1, r6, r7
 8000c16:	4299      	cmp	r1, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x64>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c22:	f080 811f 	bcs.w	8000e64 <__udivmoddi4+0x298>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 811c 	bls.w	8000e64 <__udivmoddi4+0x298>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	4463      	add	r3, ip
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3310 	mls	r3, r8, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 f707 	mul.w	r7, r0, r7
 8000c44:	42a7      	cmp	r7, r4
 8000c46:	d90a      	bls.n	8000c5e <__udivmoddi4+0x92>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c50:	f080 810a 	bcs.w	8000e68 <__udivmoddi4+0x29c>
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	f240 8107 	bls.w	8000e68 <__udivmoddi4+0x29c>
 8000c5a:	4464      	add	r4, ip
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c62:	1be4      	subs	r4, r4, r7
 8000c64:	2600      	movs	r6, #0
 8000c66:	b11d      	cbz	r5, 8000c70 <__udivmoddi4+0xa4>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xc2>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	f000 80ef 	beq.w	8000e5e <__udivmoddi4+0x292>
 8000c80:	2600      	movs	r6, #0
 8000c82:	e9c5 0100 	strd	r0, r1, [r5]
 8000c86:	4630      	mov	r0, r6
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f683 	clz	r6, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d14a      	bne.n	8000d2c <__udivmoddi4+0x160>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd4>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80f9 	bhi.w	8000e92 <__udivmoddi4+0x2c6>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	469e      	mov	lr, r3
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa4>
 8000cae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa4>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xec>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 8092 	bne.w	8000de6 <__udivmoddi4+0x21a>
 8000cc2:	eba1 010c 	sub.w	r1, r1, ip
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2601      	movs	r6, #1
 8000cd0:	0c20      	lsrs	r0, r4, #16
 8000cd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cde:	fb0e f003 	mul.w	r0, lr, r3
 8000ce2:	4288      	cmp	r0, r1
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x12c>
 8000ce6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x12a>
 8000cf0:	4288      	cmp	r0, r1
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2c0>
 8000cf6:	4643      	mov	r3, r8
 8000cf8:	1a09      	subs	r1, r1, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d00:	fb07 1110 	mls	r1, r7, r0, r1
 8000d04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x156>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x154>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2ca>
 8000d20:	4608      	mov	r0, r1
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2a:	e79c      	b.n	8000c66 <__udivmoddi4+0x9a>
 8000d2c:	f1c6 0720 	rsb	r7, r6, #32
 8000d30:	40b3      	lsls	r3, r6
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d42:	431c      	orrs	r4, r3
 8000d44:	40f9      	lsrs	r1, r7
 8000d46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d52:	0c20      	lsrs	r0, r4, #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fb09 1118 	mls	r1, r9, r8, r1
 8000d5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d60:	fb08 f00e 	mul.w	r0, r8, lr
 8000d64:	4288      	cmp	r0, r1
 8000d66:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b8>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2bc>
 8000d78:	4288      	cmp	r0, r1
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2bc>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	458e      	cmp	lr, r1
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1e2>
 8000d9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000da0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2b4>
 8000da6:	458e      	cmp	lr, r1
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2b4>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4461      	add	r1, ip
 8000dae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db2:	fba0 9402 	umull	r9, r4, r0, r2
 8000db6:	eba1 010e 	sub.w	r1, r1, lr
 8000dba:	42a1      	cmp	r1, r4
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46a6      	mov	lr, r4
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x2a4>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x2a0>
 8000dc4:	b15d      	cbz	r5, 8000dde <__udivmoddi4+0x212>
 8000dc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dca:	eb61 010e 	sbc.w	r1, r1, lr
 8000dce:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd6:	40f1      	lsrs	r1, r6
 8000dd8:	431f      	orrs	r7, r3
 8000dda:	e9c5 7100 	strd	r7, r1, [r5]
 8000dde:	2600      	movs	r6, #0
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	f1c2 0320 	rsb	r3, r2, #32
 8000dea:	40d8      	lsrs	r0, r3
 8000dec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df0:	fa21 f303 	lsr.w	r3, r1, r3
 8000df4:	4091      	lsls	r1, r2
 8000df6:	4301      	orrs	r1, r0
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e04:	fb07 3610 	mls	r6, r7, r0, r3
 8000e08:	0c0b      	lsrs	r3, r1, #16
 8000e0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e12:	429e      	cmp	r6, r3
 8000e14:	fa04 f402 	lsl.w	r4, r4, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x260>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b8>
 8000e24:	429e      	cmp	r6, r3
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b8>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4463      	add	r3, ip
 8000e2c:	1b9b      	subs	r3, r3, r6
 8000e2e:	b289      	uxth	r1, r1
 8000e30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e34:	fb07 3316 	mls	r3, r7, r6, r3
 8000e38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x28a>
 8000e44:	eb1c 0101 	adds.w	r1, ip, r1
 8000e48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e52:	3e02      	subs	r6, #2
 8000e54:	4461      	add	r1, ip
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0x104>
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e705      	b.n	8000c70 <__udivmoddi4+0xa4>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e3      	b.n	8000c30 <__udivmoddi4+0x64>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6f8      	b.n	8000c5e <__udivmoddi4+0x92>
 8000e6c:	454b      	cmp	r3, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f8>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f8>
 8000e7c:	4646      	mov	r6, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x28a>
 8000e80:	4620      	mov	r0, r4
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1e2>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x260>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b8>
 8000e8c:	3b02      	subs	r3, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x12c>
 8000e92:	4630      	mov	r0, r6
 8000e94:	e709      	b.n	8000caa <__udivmoddi4+0xde>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x156>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <HAL_UART_RxCpltCallback>:
//controller parameters
const double Kp[4] = {1,0,0,1}; 
const double Kd[4] = {1,0,0,1};


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    char *cmd, *data, *value;
    uint8_t i = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	74fb      	strb	r3, [r7, #19]
    /* read the first characters */
    cmd = strtok((char*) &rx_data, ":");
 8000eac:	492b      	ldr	r1, [pc, #172]	; (8000f5c <HAL_UART_RxCpltCallback+0xbc>)
 8000eae:	482c      	ldr	r0, [pc, #176]	; (8000f60 <HAL_UART_RxCpltCallback+0xc0>)
 8000eb0:	f004 f92c 	bl	800510c <strtok>
 8000eb4:	60f8      	str	r0, [r7, #12]
    if(strcmp(cmd, "trj")){ /* trj case*/
 8000eb6:	492b      	ldr	r1, [pc, #172]	; (8000f64 <HAL_UART_RxCpltCallback+0xc4>)
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff f991 	bl	80001e0 <strcmp>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d041      	beq.n	8000f48 <HAL_UART_RxCpltCallback+0xa8>
        /* READ the data from the serial and populate the corresponding members of the man_t struct 
           these values will be used to set the reference value for the control loop */
        data = strtok(NULL, ":");
 8000ec4:	4925      	ldr	r1, [pc, #148]	; (8000f5c <HAL_UART_RxCpltCallback+0xbc>)
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f004 f920 	bl	800510c <strtok>
 8000ecc:	6178      	str	r0, [r7, #20]
        while(data != NULL){
 8000ece:	e028      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x82>
            if(i == 6) break; /* reading penup */
 8000ed0:	7cfb      	ldrb	r3, [r7, #19]
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d029      	beq.n	8000f2a <HAL_UART_RxCpltCallback+0x8a>
            value = "0x"; /* will contain the value extracted from the received string */
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <HAL_UART_RxCpltCallback+0xc8>)
 8000ed8:	60bb      	str	r3, [r7, #8]
            strcat(value, data); /* string concatenation REF: https://www.programiz.com/c-programming/library-function/string.h/strcat */
 8000eda:	6979      	ldr	r1, [r7, #20]
 8000edc:	68b8      	ldr	r0, [r7, #8]
 8000ede:	f004 f905 	bl	80050ec <strcat>
            rbpush((((ringbuffer_t *) &manip)+i),  strtoull(value, NULL, 16)); /* convert from str to ull -> unsigned long long (uint64_t). REF: https://cplusplus.com/reference/cstdlib/strtoull/ */
 8000ee2:	7cfb      	ldrb	r3, [r7, #19]
 8000ee4:	2258      	movs	r2, #88	; 0x58
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <HAL_UART_RxCpltCallback+0xcc>)
 8000eec:	189c      	adds	r4, r3, r2
 8000eee:	2210      	movs	r2, #16
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	68b8      	ldr	r0, [r7, #8]
 8000ef4:	f004 fa8a 	bl	800540c <strtoull>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4610      	mov	r0, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f7ff fb54 	bl	80005ac <__aeabi_ul2d>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	ec43 2b10 	vmov	d0, r2, r3
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f001 f907 	bl	8002120 <rbpush>
            data = strtok(NULL, ":");
 8000f12:	4912      	ldr	r1, [pc, #72]	; (8000f5c <HAL_UART_RxCpltCallback+0xbc>)
 8000f14:	2000      	movs	r0, #0
 8000f16:	f004 f8f9 	bl	800510c <strtok>
 8000f1a:	6178      	str	r0, [r7, #20]
            i++;
 8000f1c:	7cfb      	ldrb	r3, [r7, #19]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	74fb      	strb	r3, [r7, #19]
        while(data != NULL){
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1d3      	bne.n	8000ed0 <HAL_UART_RxCpltCallback+0x30>
 8000f28:	e000      	b.n	8000f2c <HAL_UART_RxCpltCallback+0x8c>
            if(i == 6) break; /* reading penup */
 8000f2a:	bf00      	nop
        }
        rbpush(&manip.penup, (double) atoi(data));
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f004 f885 	bl	800503c <atoi>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb05 	bl	8000544 <__aeabi_i2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	ec43 2b10 	vmov	d0, r2, r3
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <HAL_UART_RxCpltCallback+0xd0>)
 8000f44:	f001 f8ec 	bl	8002120 <rbpush>
    }else{ /* default case */

    }
    /* wait again for incoming data */
    HAL_UART_Receive_DMA(&huart, &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2240      	movs	r2, #64	; 0x40
 8000f4c:	4904      	ldr	r1, [pc, #16]	; (8000f60 <HAL_UART_RxCpltCallback+0xc0>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 ffbf 	bl	8003ed2 <HAL_UART_Receive_DMA>
}
 8000f54:	bf00      	nop
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	08007578 	.word	0x08007578
 8000f60:	2000008c 	.word	0x2000008c
 8000f64:	0800757c 	.word	0x0800757c
 8000f68:	08007580 	.word	0x08007580
 8000f6c:	200000d0 	.word	0x200000d0
 8000f70:	200002e0 	.word	0x200002e0

08000f74 <init_man>:
- man_t *manip: man_t obj. to initialize;
@outputs: 
- void;
@#
*/
void init_man(man_t *manip){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    // initialize all the ring buffers
    for(i = 0; i < 14; i++){
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e00b      	b.n	8000f9a <init_man+0x26>
        rbclear((((ringbuffer_t *) manip)+i));
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2258      	movs	r2, #88	; 0x58
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 f96c 	bl	800226c <rbclear>
    for(i = 0; i < 14; i++){
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3301      	adds	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b0d      	cmp	r3, #13
 8000f9e:	d9f0      	bls.n	8000f82 <init_man+0xe>
    }
    // initialize the inertia and coriolis matrices
    for(i = 0; i < 4; i++){
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e018      	b.n	8000fd8 <init_man+0x64>
        manip->B[i] = (double) 0;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	339a      	adds	r3, #154	; 0x9a
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	18d1      	adds	r1, r2, r3
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	f04f 0300 	mov.w	r3, #0
 8000fb8:	e9c1 2300 	strd	r2, r3, [r1]
        manip->C[i] = (double) 0;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	339e      	adds	r3, #158	; 0x9e
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	18d1      	adds	r1, r2, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < 4; i++){
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d9e3      	bls.n	8000fa6 <init_man+0x32>
    }
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <dot>:
- double *C: pointer to a vector of doubles of size nA*mB, which represents the resulting nAxmB matrix -> if the operation cannot be done, it will be NULL;
@outputs: 
- uint8_t: 0 or 1 that shows whether the operation completed successfully or not.
@#
*/
uint8_t dot(double *A, uint8_t nA, uint8_t mA, double* B, uint8_t nB, uint8_t mB, double* C){ /* nAxmA * nBxmB dot product */
 8000fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fec:	b087      	sub	sp, #28
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	72fb      	strb	r3, [r7, #11]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	72bb      	strb	r3, [r7, #10]
        this method exists just to make the code more readable and understand what each
        operation actually does instead of having meaningless calculations */
    
    /* C[i, j] = \sum_k A[i, k]*B[k, j] */
    /* given n rows and m columns, the matrix indexes i, j correspond to j+i*m array index */
    if(mA != nB){
 8000ffc:	7aba      	ldrb	r2, [r7, #10]
 8000ffe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001002:	429a      	cmp	r2, r3
 8001004:	d003      	beq.n	800100e <dot+0x26>
        C = NULL;
 8001006:	2300      	movs	r3, #0
 8001008:	643b      	str	r3, [r7, #64]	; 0x40
        return 0; /* matrix multiplication cannot be done */
 800100a:	2300      	movs	r3, #0
 800100c:	e074      	b.n	80010f8 <dot+0x110>
    }
    uint8_t i, j, k;
    for(i = 0; i < nA*mB; i++){
 800100e:	2300      	movs	r3, #0
 8001010:	75fb      	strb	r3, [r7, #23]
 8001012:	e00c      	b.n	800102e <dot+0x46>
        C[i] = (double) 0.0;
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800101a:	18d1      	adds	r1, r2, r3
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < nA*mB; i++){
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	3301      	adds	r3, #1
 800102c:	75fb      	strb	r3, [r7, #23]
 800102e:	7dfa      	ldrb	r2, [r7, #23]
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8001036:	fb01 f303 	mul.w	r3, r1, r3
 800103a:	429a      	cmp	r2, r3
 800103c:	dbea      	blt.n	8001014 <dot+0x2c>
    }

    for( i = 0; i < nA; i++){
 800103e:	2300      	movs	r3, #0
 8001040:	75fb      	strb	r3, [r7, #23]
 8001042:	e054      	b.n	80010ee <dot+0x106>
        for( j = 0; j < mB; j++){
 8001044:	2300      	movs	r3, #0
 8001046:	75bb      	strb	r3, [r7, #22]
 8001048:	e049      	b.n	80010de <dot+0xf6>
            for( k = 0; k < mA; k++){
 800104a:	2300      	movs	r3, #0
 800104c:	757b      	strb	r3, [r7, #21]
 800104e:	e03f      	b.n	80010d0 <dot+0xe8>
                C[j+i*mB] += (double) (A[k+i*mA]*B[j+k*mB]);
 8001050:	7dba      	ldrb	r2, [r7, #22]
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8001058:	fb01 f303 	mul.w	r3, r1, r3
 800105c:	4413      	add	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001062:	4413      	add	r3, r2
 8001064:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001068:	7d7a      	ldrb	r2, [r7, #21]
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	7ab9      	ldrb	r1, [r7, #10]
 800106e:	fb01 f303 	mul.w	r3, r1, r3
 8001072:	4413      	add	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800107e:	7dba      	ldrb	r2, [r7, #22]
 8001080:	7d7b      	ldrb	r3, [r7, #21]
 8001082:	f897 603c 	ldrb.w	r6, [r7, #60]	; 0x3c
 8001086:	fb06 f303 	mul.w	r3, r6, r3
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fabf 	bl	8000618 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4690      	mov	r8, r2
 80010a0:	4699      	mov	r9, r3
 80010a2:	7dba      	ldrb	r2, [r7, #22]
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 80010aa:	fb01 f303 	mul.w	r3, r1, r3
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010b4:	18d6      	adds	r6, r2, r3
 80010b6:	4642      	mov	r2, r8
 80010b8:	464b      	mov	r3, r9
 80010ba:	4620      	mov	r0, r4
 80010bc:	4629      	mov	r1, r5
 80010be:	f7ff f8f5 	bl	80002ac <__adddf3>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	e9c6 2300 	strd	r2, r3, [r6]
            for( k = 0; k < mA; k++){
 80010ca:	7d7b      	ldrb	r3, [r7, #21]
 80010cc:	3301      	adds	r3, #1
 80010ce:	757b      	strb	r3, [r7, #21]
 80010d0:	7d7a      	ldrb	r2, [r7, #21]
 80010d2:	7abb      	ldrb	r3, [r7, #10]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d3bb      	bcc.n	8001050 <dot+0x68>
        for( j = 0; j < mB; j++){
 80010d8:	7dbb      	ldrb	r3, [r7, #22]
 80010da:	3301      	adds	r3, #1
 80010dc:	75bb      	strb	r3, [r7, #22]
 80010de:	7dba      	ldrb	r2, [r7, #22]
 80010e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3b0      	bcc.n	800104a <dot+0x62>
    for( i = 0; i < nA; i++){
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	3301      	adds	r3, #1
 80010ec:	75fb      	strb	r3, [r7, #23]
 80010ee:	7dfa      	ldrb	r2, [r7, #23]
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3a6      	bcc.n	8001044 <dot+0x5c>
            }
        }
    }
    return 1; // matrix multiplication successfully completed
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001102 <inv2x2>:
- double *invM: pointer to the inverted matrix (NULL if inversion is not possible);
@outputs: 
- uint8_t: shows whether the inversion was completed or not
@#
*/
uint8_t inv2x2(double *M, double *invM){
 8001102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    double d = DET(M);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3318      	adds	r3, #24
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa7c 	bl	8000618 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4692      	mov	sl, r2
 8001126:	469b      	mov	fp, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3308      	adds	r3, #8
 800112c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3310      	adds	r3, #16
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff fa6e 	bl	8000618 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4650      	mov	r0, sl
 8001142:	4659      	mov	r1, fp
 8001144:	f7ff f8b0 	bl	80002a8 <__aeabi_dsub>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if(d == 0){
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800115c:	f7ff fcc4 	bl	8000ae8 <__aeabi_dcmpeq>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <inv2x2+0x6c>
        invM = NULL;
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
        return 0; /* Inversion not possible */
 800116a:	2300      	movs	r3, #0
 800116c:	e043      	b.n	80011f6 <inv2x2+0xf4>
    }
    invM[0] =  M[3]/d;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3318      	adds	r3, #24
 8001172:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001176:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800117a:	f7ff fb77 	bl	800086c <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	6839      	ldr	r1, [r7, #0]
 8001184:	e9c1 2300 	strd	r2, r3, [r1]
    invM[3] =  M[0]/d;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f103 0618 	add.w	r6, r3, #24
 8001194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001198:	f7ff fb68 	bl	800086c <__aeabi_ddiv>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	e9c6 2300 	strd	r2, r3, [r6]
    invM[1] = -M[1]/d;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3308      	adds	r3, #8
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	4690      	mov	r8, r2
 80011ae:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	f103 0608 	add.w	r6, r3, #8
 80011b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011bc:	4640      	mov	r0, r8
 80011be:	4649      	mov	r1, r9
 80011c0:	f7ff fb54 	bl	800086c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	e9c6 2300 	strd	r2, r3, [r6]
    invM[2] = -M[2]/d;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3310      	adds	r3, #16
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	4614      	mov	r4, r2
 80011d6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	f103 0610 	add.w	r6, r3, #16
 80011e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff fb40 	bl	800086c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	e9c6 2300 	strd	r2, r3, [r6]
    return 1; /* Inversion completed successfully */
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001200 <sum>:
- double *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void sum(double *A, double *B, uint8_t n, double *C){
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4613      	mov	r3, r2
 800120e:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]
 8001214:	e018      	b.n	8001248 <sum+0x48>
        C[i] = A[i] + B[i];
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	4413      	add	r3, r2
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	7dfc      	ldrb	r4, [r7, #23]
 8001230:	00e4      	lsls	r4, r4, #3
 8001232:	683d      	ldr	r5, [r7, #0]
 8001234:	442c      	add	r4, r5
 8001236:	f7ff f839 	bl	80002ac <__adddf3>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	e9c4 2300 	strd	r2, r3, [r4]
    for(i = 0; i < n; i++){
 8001242:	7dfb      	ldrb	r3, [r7, #23]
 8001244:	3301      	adds	r3, #1
 8001246:	75fb      	strb	r3, [r7, #23]
 8001248:	7dfa      	ldrb	r2, [r7, #23]
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3e2      	bcc.n	8001216 <sum+0x16>
    }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bdb0      	pop	{r4, r5, r7, pc}

0800125a <diff>:
- double *C: pointer to the resulting matrix;
@outputs: 
- void;
@#
*/
void diff(double *A, double *B, uint8_t n, double *C){
 800125a:	b5b0      	push	{r4, r5, r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4613      	mov	r3, r2
 8001268:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < n; i++){
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
 800126e:	e018      	b.n	80012a2 <diff+0x48>
        C[i] = A[i] - B[i];
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	e9d3 0100 	ldrd	r0, r1, [r3]
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	4413      	add	r3, r2
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	7dfc      	ldrb	r4, [r7, #23]
 800128a:	00e4      	lsls	r4, r4, #3
 800128c:	683d      	ldr	r5, [r7, #0]
 800128e:	442c      	add	r4, r5
 8001290:	f7ff f80a 	bl	80002a8 <__aeabi_dsub>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	e9c4 2300 	strd	r2, r3, [r4]
    for(i = 0; i < n; i++){
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	3301      	adds	r3, #1
 80012a0:	75fb      	strb	r3, [r7, #23]
 80012a2:	7dfa      	ldrb	r2, [r7, #23]
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d3e2      	bcc.n	8001270 <diff+0x16>
    }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bdb0      	pop	{r4, r5, r7, pc}
 80012b4:	0000      	movs	r0, r0
	...

080012b8 <B_calc>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void B_calc(man_t *manip){
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    double q1,q2;
    rblast(&manip->q0_actual, &q1);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80012c6:	f107 0210 	add.w	r2, r7, #16
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 ffad 	bl	800222c <rblast>
    rblast(&manip->q1_actual, &q2);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80012d8:	f107 0208 	add.w	r2, r7, #8
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 ffa4 	bl	800222c <rblast>
    manip->B[0] = (double) (0.024938*cos(q1 + 2*q2) + 0.12469*cos(q1 + q2) + 0.26194*cos(q1) + 0.074812*cos(q2) + 0.16349);
 80012e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	f7fe ffde 	bl	80002ac <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012fc:	f7fe ffd6 	bl	80002ac <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	ec43 2b17 	vmov	d7, r2, r3
 8001308:	eeb0 0a47 	vmov.f32	s0, s14
 800130c:	eef0 0a67 	vmov.f32	s1, s15
 8001310:	f005 f886 	bl	8006420 <cos>
 8001314:	ec51 0b10 	vmov	r0, r1, d0
 8001318:	a3a9      	add	r3, pc, #676	; (adr r3, 80015c0 <B_calc+0x308>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f97b 	bl	8000618 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4614      	mov	r4, r2
 8001328:	461d      	mov	r5, r3
 800132a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800132e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001332:	f7fe ffbb 	bl	80002ac <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	ec43 2b17 	vmov	d7, r2, r3
 800133e:	eeb0 0a47 	vmov.f32	s0, s14
 8001342:	eef0 0a67 	vmov.f32	s1, s15
 8001346:	f005 f86b 	bl	8006420 <cos>
 800134a:	ec51 0b10 	vmov	r0, r1, d0
 800134e:	a39e      	add	r3, pc, #632	; (adr r3, 80015c8 <B_calc+0x310>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f960 	bl	8000618 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4620      	mov	r0, r4
 800135e:	4629      	mov	r1, r5
 8001360:	f7fe ffa4 	bl	80002ac <__adddf3>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4614      	mov	r4, r2
 800136a:	461d      	mov	r5, r3
 800136c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001370:	eeb0 0a47 	vmov.f32	s0, s14
 8001374:	eef0 0a67 	vmov.f32	s1, s15
 8001378:	f005 f852 	bl	8006420 <cos>
 800137c:	ec51 0b10 	vmov	r0, r1, d0
 8001380:	a393      	add	r3, pc, #588	; (adr r3, 80015d0 <B_calc+0x318>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f947 	bl	8000618 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4620      	mov	r0, r4
 8001390:	4629      	mov	r1, r5
 8001392:	f7fe ff8b 	bl	80002ac <__adddf3>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4614      	mov	r4, r2
 800139c:	461d      	mov	r5, r3
 800139e:	ed97 7b02 	vldr	d7, [r7, #8]
 80013a2:	eeb0 0a47 	vmov.f32	s0, s14
 80013a6:	eef0 0a67 	vmov.f32	s1, s15
 80013aa:	f005 f839 	bl	8006420 <cos>
 80013ae:	ec51 0b10 	vmov	r0, r1, d0
 80013b2:	a389      	add	r3, pc, #548	; (adr r3, 80015d8 <B_calc+0x320>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f92e 	bl	8000618 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4620      	mov	r0, r4
 80013c2:	4629      	mov	r1, r5
 80013c4:	f7fe ff72 	bl	80002ac <__adddf3>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	a383      	add	r3, pc, #524	; (adr r3, 80015e0 <B_calc+0x328>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7fe ff69 	bl	80002ac <__adddf3>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f501 619a 	add.w	r1, r1, #1232	; 0x4d0
 80013e4:	e9c1 2300 	strd	r2, r3, [r1]
    manip->B[1] = (double) (0.012469*cos(q1 + 2*q2) + 0.09975*cos(q1 + q2) + 0.14962*cos(q1) + 0.049875*cos(q2) + 0.058307);
 80013e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	f7fe ff5c 	bl	80002ac <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001400:	f7fe ff54 	bl	80002ac <__adddf3>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	ec43 2b17 	vmov	d7, r2, r3
 800140c:	eeb0 0a47 	vmov.f32	s0, s14
 8001410:	eef0 0a67 	vmov.f32	s1, s15
 8001414:	f005 f804 	bl	8006420 <cos>
 8001418:	ec51 0b10 	vmov	r0, r1, d0
 800141c:	a372      	add	r3, pc, #456	; (adr r3, 80015e8 <B_calc+0x330>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f8f9 	bl	8000618 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4614      	mov	r4, r2
 800142c:	461d      	mov	r5, r3
 800142e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001432:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001436:	f7fe ff39 	bl	80002ac <__adddf3>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	ec43 2b17 	vmov	d7, r2, r3
 8001442:	eeb0 0a47 	vmov.f32	s0, s14
 8001446:	eef0 0a67 	vmov.f32	s1, s15
 800144a:	f004 ffe9 	bl	8006420 <cos>
 800144e:	ec51 0b10 	vmov	r0, r1, d0
 8001452:	a367      	add	r3, pc, #412	; (adr r3, 80015f0 <B_calc+0x338>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f8de 	bl	8000618 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4620      	mov	r0, r4
 8001462:	4629      	mov	r1, r5
 8001464:	f7fe ff22 	bl	80002ac <__adddf3>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4614      	mov	r4, r2
 800146e:	461d      	mov	r5, r3
 8001470:	ed97 7b04 	vldr	d7, [r7, #16]
 8001474:	eeb0 0a47 	vmov.f32	s0, s14
 8001478:	eef0 0a67 	vmov.f32	s1, s15
 800147c:	f004 ffd0 	bl	8006420 <cos>
 8001480:	ec51 0b10 	vmov	r0, r1, d0
 8001484:	a35c      	add	r3, pc, #368	; (adr r3, 80015f8 <B_calc+0x340>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f8c5 	bl	8000618 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4620      	mov	r0, r4
 8001494:	4629      	mov	r1, r5
 8001496:	f7fe ff09 	bl	80002ac <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4614      	mov	r4, r2
 80014a0:	461d      	mov	r5, r3
 80014a2:	ed97 7b02 	vldr	d7, [r7, #8]
 80014a6:	eeb0 0a47 	vmov.f32	s0, s14
 80014aa:	eef0 0a67 	vmov.f32	s1, s15
 80014ae:	f004 ffb7 	bl	8006420 <cos>
 80014b2:	ec51 0b10 	vmov	r0, r1, d0
 80014b6:	a352      	add	r3, pc, #328	; (adr r3, 8001600 <B_calc+0x348>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f8ac 	bl	8000618 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7fe fef0 	bl	80002ac <__adddf3>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	a34c      	add	r3, pc, #304	; (adr r3, 8001608 <B_calc+0x350>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7fe fee7 	bl	80002ac <__adddf3>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 80014e8:	e941 2302 	strd	r2, r3, [r1, #-8]
    manip->B[2] = manip->B[1]; // the matrix is symmetrical
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 80014f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]
    manip->B[3] = (double) (0.074812*cos(q1 + q2) + 0.14962*cos(q1) + 0.024938*cos(q2) + 0.058309);
 8001500:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001508:	f7fe fed0 	bl	80002ac <__adddf3>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	ec43 2b17 	vmov	d7, r2, r3
 8001514:	eeb0 0a47 	vmov.f32	s0, s14
 8001518:	eef0 0a67 	vmov.f32	s1, s15
 800151c:	f004 ff80 	bl	8006420 <cos>
 8001520:	ec51 0b10 	vmov	r0, r1, d0
 8001524:	a32c      	add	r3, pc, #176	; (adr r3, 80015d8 <B_calc+0x320>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f875 	bl	8000618 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4614      	mov	r4, r2
 8001534:	461d      	mov	r5, r3
 8001536:	ed97 7b04 	vldr	d7, [r7, #16]
 800153a:	eeb0 0a47 	vmov.f32	s0, s14
 800153e:	eef0 0a67 	vmov.f32	s1, s15
 8001542:	f004 ff6d 	bl	8006420 <cos>
 8001546:	ec51 0b10 	vmov	r0, r1, d0
 800154a:	a32b      	add	r3, pc, #172	; (adr r3, 80015f8 <B_calc+0x340>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f862 	bl	8000618 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4620      	mov	r0, r4
 800155a:	4629      	mov	r1, r5
 800155c:	f7fe fea6 	bl	80002ac <__adddf3>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4614      	mov	r4, r2
 8001566:	461d      	mov	r5, r3
 8001568:	ed97 7b02 	vldr	d7, [r7, #8]
 800156c:	eeb0 0a47 	vmov.f32	s0, s14
 8001570:	eef0 0a67 	vmov.f32	s1, s15
 8001574:	f004 ff54 	bl	8006420 <cos>
 8001578:	ec51 0b10 	vmov	r0, r1, d0
 800157c:	a310      	add	r3, pc, #64	; (adr r3, 80015c0 <B_calc+0x308>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7ff f849 	bl	8000618 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4620      	mov	r0, r4
 800158c:	4629      	mov	r1, r5
 800158e:	f7fe fe8d 	bl	80002ac <__adddf3>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	a31d      	add	r3, pc, #116	; (adr r3, 8001610 <B_calc+0x358>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7fe fe84 	bl	80002ac <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 80015ae:	e941 2302 	strd	r2, r3, [r1, #-8]
    /*  manip::B is actually a vector, but it can be seen as follows: 
        [B[0], B[1]]
        [B[2], B[3]] */
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ba:	bf00      	nop
 80015bc:	f3af 8000 	nop.w
 80015c0:	d9b5e95b 	.word	0xd9b5e95b
 80015c4:	3f998958 	.word	0x3f998958
 80015c8:	102363b2 	.word	0x102363b2
 80015cc:	3fbfebaf 	.word	0x3fbfebaf
 80015d0:	fd60e94f 	.word	0xfd60e94f
 80015d4:	3fd0c39f 	.word	0x3fd0c39f
 80015d8:	15592d99 	.word	0x15592d99
 80015dc:	3fb326e1 	.word	0x3fb326e1
 80015e0:	859c8c93 	.word	0x859c8c93
 80015e4:	3fc4ed3d 	.word	0x3fc4ed3d
 80015e8:	d9b5e95b 	.word	0xd9b5e95b
 80015ec:	3f898958 	.word	0x3f898958
 80015f0:	4bc6a7f0 	.word	0x4bc6a7f0
 80015f4:	3fb98937 	.word	0x3fb98937
 80015f8:	8769ec2d 	.word	0x8769ec2d
 80015fc:	3fc326bf 	.word	0x3fc326bf
 8001600:	4bc6a7f0 	.word	0x4bc6a7f0
 8001604:	3fa98937 	.word	0x3fa98937
 8001608:	44417870 	.word	0x44417870
 800160c:	3fadda6a 	.word	0x3fadda6a
 8001610:	601ffb48 	.word	0x601ffb48
 8001614:	3faddaad 	.word	0x3faddaad

08001618 <C_calc>:
- man_t *manip: pointer to the manipulator struct that olds the reference and actual values of the position, speed and acceleration of the motors;
@outputs:
- void;
@#
*/
void C_calc(man_t *manip){
 8001618:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800161c:	b08a      	sub	sp, #40	; 0x28
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
    double q1, q2, dq1, dq2;
    rblast(&manip->q0_actual, &q1);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001628:	f107 0220 	add.w	r2, r7, #32
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fdfc 	bl	800222c <rblast>
    rblast(&manip->q1_actual, &q2);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800163a:	f107 0218 	add.w	r2, r7, #24
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fdf3 	bl	800222c <rblast>
    rblast(&manip->dq0_actual, &dq1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800164c:	f107 0210 	add.w	r2, r7, #16
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fdea 	bl	800222c <rblast>
    rblast(&manip->dq1_actual, &dq2);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800165e:	f107 0208 	add.w	r2, r7, #8
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fde1 	bl	800222c <rblast>
    manip->C[0] = (double) ( - 0.5*dq2*(0.024938*sin(q1 + 2*q2) + 0.049875*sin(q1 + q2) + 0.049875*sin(q2)));
 800166a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	4bb1      	ldr	r3, [pc, #708]	; (8001938 <C_calc+0x320>)
 8001674:	f7fe ffd0 	bl	8000618 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4614      	mov	r4, r2
 800167e:	461d      	mov	r5, r3
 8001680:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	f7fe fe10 	bl	80002ac <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001698:	f7fe fe08 	bl	80002ac <__adddf3>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	ec43 2b17 	vmov	d7, r2, r3
 80016a4:	eeb0 0a47 	vmov.f32	s0, s14
 80016a8:	eef0 0a67 	vmov.f32	s1, s15
 80016ac:	f004 ff0c 	bl	80064c8 <sin>
 80016b0:	ec51 0b10 	vmov	r0, r1, d0
 80016b4:	a398      	add	r3, pc, #608	; (adr r3, 8001918 <C_calc+0x300>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7fe ffad 	bl	8000618 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4690      	mov	r8, r2
 80016c4:	4699      	mov	r9, r3
 80016c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ce:	f7fe fded 	bl	80002ac <__adddf3>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	ec43 2b17 	vmov	d7, r2, r3
 80016da:	eeb0 0a47 	vmov.f32	s0, s14
 80016de:	eef0 0a67 	vmov.f32	s1, s15
 80016e2:	f004 fef1 	bl	80064c8 <sin>
 80016e6:	ec51 0b10 	vmov	r0, r1, d0
 80016ea:	a38d      	add	r3, pc, #564	; (adr r3, 8001920 <C_calc+0x308>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7fe ff92 	bl	8000618 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4640      	mov	r0, r8
 80016fa:	4649      	mov	r1, r9
 80016fc:	f7fe fdd6 	bl	80002ac <__adddf3>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4690      	mov	r8, r2
 8001706:	4699      	mov	r9, r3
 8001708:	ed97 7b06 	vldr	d7, [r7, #24]
 800170c:	eeb0 0a47 	vmov.f32	s0, s14
 8001710:	eef0 0a67 	vmov.f32	s1, s15
 8001714:	f004 fed8 	bl	80064c8 <sin>
 8001718:	ec51 0b10 	vmov	r0, r1, d0
 800171c:	a380      	add	r3, pc, #512	; (adr r3, 8001920 <C_calc+0x308>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7fe ff79 	bl	8000618 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4640      	mov	r0, r8
 800172c:	4649      	mov	r1, r9
 800172e:	f7fe fdbd 	bl	80002ac <__adddf3>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4620      	mov	r0, r4
 8001738:	4629      	mov	r1, r5
 800173a:	f7fe ff6d 	bl	8000618 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f501 619e 	add.w	r1, r1, #1264	; 0x4f0
 8001748:	e9c1 2300 	strd	r2, r3, [r1]
    manip->C[1] = (double) ( - 0.012469*(dq1 + dq2)*(sin(q1 + 2*q2) + 2*sin(q1 + q2) + 2*sin(q2)));
 800174c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001754:	f7fe fdaa 	bl	80002ac <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	a371      	add	r3, pc, #452	; (adr r3, 8001928 <C_calc+0x310>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe ff57 	bl	8000618 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4614      	mov	r4, r2
 8001770:	461d      	mov	r5, r3
 8001772:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	f7fe fd97 	bl	80002ac <__adddf3>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800178a:	f7fe fd8f 	bl	80002ac <__adddf3>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	ec43 2b17 	vmov	d7, r2, r3
 8001796:	eeb0 0a47 	vmov.f32	s0, s14
 800179a:	eef0 0a67 	vmov.f32	s1, s15
 800179e:	f004 fe93 	bl	80064c8 <sin>
 80017a2:	ec59 8b10 	vmov	r8, r9, d0
 80017a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ae:	f7fe fd7d 	bl	80002ac <__adddf3>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	ec43 2b17 	vmov	d7, r2, r3
 80017ba:	eeb0 0a47 	vmov.f32	s0, s14
 80017be:	eef0 0a67 	vmov.f32	s1, s15
 80017c2:	f004 fe81 	bl	80064c8 <sin>
 80017c6:	ec51 0b10 	vmov	r0, r1, d0
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	f7fe fd6d 	bl	80002ac <__adddf3>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4640      	mov	r0, r8
 80017d8:	4649      	mov	r1, r9
 80017da:	f7fe fd67 	bl	80002ac <__adddf3>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4690      	mov	r8, r2
 80017e4:	4699      	mov	r9, r3
 80017e6:	ed97 7b06 	vldr	d7, [r7, #24]
 80017ea:	eeb0 0a47 	vmov.f32	s0, s14
 80017ee:	eef0 0a67 	vmov.f32	s1, s15
 80017f2:	f004 fe69 	bl	80064c8 <sin>
 80017f6:	ec51 0b10 	vmov	r0, r1, d0
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	f7fe fd55 	bl	80002ac <__adddf3>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4640      	mov	r0, r8
 8001808:	4649      	mov	r1, r9
 800180a:	f7fe fd4f 	bl	80002ac <__adddf3>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe feff 	bl	8000618 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8001824:	e941 2302 	strd	r2, r3, [r1, #-8]
    manip->C[2] = (double) (dq1*(0.012469*sin(q1 + 2*q2) + 0.024938*sin(q1 + q2) + 0.024938*sin(q2)));
 8001828:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	f7fe fd3c 	bl	80002ac <__adddf3>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001840:	f7fe fd34 	bl	80002ac <__adddf3>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	ec43 2b17 	vmov	d7, r2, r3
 800184c:	eeb0 0a47 	vmov.f32	s0, s14
 8001850:	eef0 0a67 	vmov.f32	s1, s15
 8001854:	f004 fe38 	bl	80064c8 <sin>
 8001858:	ec51 0b10 	vmov	r0, r1, d0
 800185c:	a334      	add	r3, pc, #208	; (adr r3, 8001930 <C_calc+0x318>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fed9 	bl	8000618 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4614      	mov	r4, r2
 800186c:	461d      	mov	r5, r3
 800186e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001872:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001876:	f7fe fd19 	bl	80002ac <__adddf3>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	ec43 2b17 	vmov	d7, r2, r3
 8001882:	eeb0 0a47 	vmov.f32	s0, s14
 8001886:	eef0 0a67 	vmov.f32	s1, s15
 800188a:	f004 fe1d 	bl	80064c8 <sin>
 800188e:	ec51 0b10 	vmov	r0, r1, d0
 8001892:	a321      	add	r3, pc, #132	; (adr r3, 8001918 <C_calc+0x300>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe febe 	bl	8000618 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4620      	mov	r0, r4
 80018a2:	4629      	mov	r1, r5
 80018a4:	f7fe fd02 	bl	80002ac <__adddf3>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4614      	mov	r4, r2
 80018ae:	461d      	mov	r5, r3
 80018b0:	ed97 7b06 	vldr	d7, [r7, #24]
 80018b4:	eeb0 0a47 	vmov.f32	s0, s14
 80018b8:	eef0 0a67 	vmov.f32	s1, s15
 80018bc:	f004 fe04 	bl	80064c8 <sin>
 80018c0:	ec51 0b10 	vmov	r0, r1, d0
 80018c4:	a314      	add	r3, pc, #80	; (adr r3, 8001918 <C_calc+0x300>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fea5 	bl	8000618 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4620      	mov	r0, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	f7fe fce9 	bl	80002ac <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018e6:	f7fe fe97 	bl	8000618 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80018f4:	e9c1 2300 	strd	r2, r3, [r1]
    manip->C[3] = (double) 0.0;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e941 2302 	strd	r2, r3, [r1, #-8]
    /*  manip::C is actually a vector, but it can be seen as follows: 
        [C[0], C[1]]
        [C[2], C[3]] */
}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001916:	bf00      	nop
 8001918:	d9b5e95b 	.word	0xd9b5e95b
 800191c:	3f998958 	.word	0x3f998958
 8001920:	4bc6a7f0 	.word	0x4bc6a7f0
 8001924:	3fa98937 	.word	0x3fa98937
 8001928:	d9b5e95b 	.word	0xd9b5e95b
 800192c:	bf898958 	.word	0xbf898958
 8001930:	d9b5e95b 	.word	0xd9b5e95b
 8001934:	3f898958 	.word	0x3f898958
 8001938:	bfe00000 	.word	0xbfe00000

0800193c <controller>:
- double *u: double[2] vector pointer that holds the control input to apply to motors (speed control);
@outputs: 
- void;
@#
*/
void controller(man_t *manip, double *u){
 800193c:	b580      	push	{r7, lr}
 800193e:	b0ce      	sub	sp, #312	; 0x138
 8001940:	af04      	add	r7, sp, #16
 8001942:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001946:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800194a:	6018      	str	r0, [r3, #0]
 800194c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001950:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001954:	6019      	str	r1, [r3, #0]
    double q[2], dq[2], ddq[2], q_actual[2], dq_actual[2], ddq_actual[2];
    double ep[2], ed[2], y[2], tau[2], Kpep[2], Kded[2], By[2], Cdq[2];
    double Bddq[2], invC[4], result[2];

    /* data preparation */
    rbpop(&manip->q0, &q[0]);
 8001956:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800195a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fc26 	bl	80021b8 <rbpop>
    rbpop(&manip->q1, &q[1]);
 800196c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001970:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800197a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800197e:	3308      	adds	r3, #8
 8001980:	4619      	mov	r1, r3
 8001982:	4610      	mov	r0, r2
 8001984:	f000 fc18 	bl	80021b8 <rbpop>
    rbpop(&manip->dq0, &dq[0]);
 8001988:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800198c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	33b0      	adds	r3, #176	; 0xb0
 8001994:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fc0c 	bl	80021b8 <rbpop>
    rbpop(&manip->dq1, &dq[1]);
 80019a0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80019ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80019b2:	3308      	adds	r3, #8
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f000 fbfe 	bl	80021b8 <rbpop>
    rbpop(&manip->ddq0, &ddq[0]);
 80019bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80019ca:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fbf1 	bl	80021b8 <rbpop>
    rbpop(&manip->ddq1, &ddq[1]);
 80019d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019da:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 80019e4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019e8:	3308      	adds	r3, #8
 80019ea:	4619      	mov	r1, r3
 80019ec:	4610      	mov	r0, r2
 80019ee:	f000 fbe3 	bl	80021b8 <rbpop>
    rblast(&manip->q0_actual, &q_actual[0]);
 80019f2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019f6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001a00:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fc10 	bl	800222c <rblast>
    rblast(&manip->q1_actual, &q_actual[1]);
 8001a0c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 8001a1a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a1e:	3308      	adds	r3, #8
 8001a20:	4619      	mov	r1, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f000 fc02 	bl	800222c <rblast>
    rblast(&manip->dq0_actual, &dq_actual[0]);
 8001a28:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001a36:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fbf5 	bl	800222c <rblast>
    rblast(&manip->dq1_actual, &dq_actual[1]);
 8001a42:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a46:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f503 725c 	add.w	r2, r3, #880	; 0x370
 8001a50:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a54:	3308      	adds	r3, #8
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f000 fbe7 	bl	800222c <rblast>
    rblast(&manip->ddq0_actual, &ddq_actual[0]);
 8001a5e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a62:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8001a6c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fbda 	bl	800222c <rblast>
    rblast(&manip->ddq1_actual, &ddq_actual[1]);
 8001a78:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 8001a86:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a8a:	3308      	adds	r3, #8
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f000 fbcc 	bl	800222c <rblast>
    B_calc(manip);
 8001a94:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	f7ff fc0b 	bl	80012b8 <B_calc>
    C_calc(manip);
 8001aa2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001aa6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	f7ff fdb4 	bl	8001618 <C_calc>

    diff(q, q_actual, 2, ep); /* q - q_d */
 8001ab0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ab4:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001ab8:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001abc:	2202      	movs	r2, #2
 8001abe:	f7ff fbcc 	bl	800125a <diff>
    diff(dq, dq_actual, 2, ed); /* dq - dq_d */
 8001ac2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ac6:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001aca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f7ff fbc3 	bl	800125a <diff>

    dot(Kp, 2, 2, ep, 2, 1, Kpep); /* Kp*ep */
 8001ad4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001ad8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	2202      	movs	r2, #2
 8001aea:	2102      	movs	r1, #2
 8001aec:	484c      	ldr	r0, [pc, #304]	; (8001c20 <controller+0x2e4>)
 8001aee:	f7ff fa7b 	bl	8000fe8 <dot>
    dot(Kd, 2, 2, ed, 2, 1, Kded); /* Kd*ed */
 8001af2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001af6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001afa:	9302      	str	r3, [sp, #8]
 8001afc:	2301      	movs	r3, #1
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2302      	movs	r3, #2
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	2202      	movs	r2, #2
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4846      	ldr	r0, [pc, #280]	; (8001c24 <controller+0x2e8>)
 8001b0c:	f7ff fa6c 	bl	8000fe8 <dot>

    /* y = Kp*e_p + Kd*e_d + ddq */
    sum(Kpep, Kded, 2, y);
 8001b10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b14:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001b18:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	f7ff fb6f 	bl	8001200 <sum>
    sum(y, ddq, 2, y);
 8001b22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b26:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8001b2a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f7ff fb66 	bl	8001200 <sum>

    dot(manip->B, 2, 2, y, 2, 1, By); /* B*y */
 8001b34:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f503 609a 	add.w	r0, r3, #1232	; 0x4d0
 8001b42:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001b46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2302      	movs	r3, #2
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4613      	mov	r3, r2
 8001b56:	2202      	movs	r2, #2
 8001b58:	2102      	movs	r1, #2
 8001b5a:	f7ff fa45 	bl	8000fe8 <dot>
    dot(manip->C, 2, 2, dq_actual, 2, 1, Cdq); /* C*dq */
 8001b5e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b62:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f503 609e 	add.w	r0, r3, #1264	; 0x4f0
 8001b6c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001b70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	2301      	movs	r3, #1
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	2202      	movs	r2, #2
 8001b82:	2102      	movs	r1, #2
 8001b84:	f7ff fa30 	bl	8000fe8 <dot>
    sum(By, Cdq, 2, tau); /* tau = B*y+C*dq  */
 8001b88:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b8c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b90:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001b94:	2202      	movs	r2, #2
 8001b96:	f7ff fb33 	bl	8001200 <sum>

    dot(manip->B, 2, 2, ddq_actual, 2, 1, Bddq); /* B*ddq */
 8001b9a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b9e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f503 609a 	add.w	r0, r3, #1232	; 0x4d0
 8001ba8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001bac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb0:	9302      	str	r3, [sp, #8]
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	f7ff fa12 	bl	8000fe8 <dot>
    diff(tau, Bddq, 2, result); /* tau - B*ddq */
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001bcc:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f7ff fb42 	bl	800125a <diff>
    inv2x2(manip->C, invC); /* inv(C) */
 8001bd6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bda:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8001be4:	f107 0218 	add.w	r2, r7, #24
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fa89 	bl	8001102 <inv2x2>
    dot(invC, 2, 2, result, 2, 1, u); /* u = inv(C) * (tau - B*ddq) */
 8001bf0:	f107 0208 	add.w	r2, r7, #8
 8001bf4:	f107 0018 	add.w	r0, r7, #24
 8001bf8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bfc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	2301      	movs	r3, #1
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2302      	movs	r3, #2
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	2202      	movs	r2, #2
 8001c10:	2102      	movs	r1, #2
 8001c12:	f7ff f9e9 	bl	8000fe8 <dot>
}
 8001c16:	bf00      	nop
 8001c18:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	08007638 	.word	0x08007638
 8001c24:	08007658 	.word	0x08007658

08001c28 <rad2stepdir>:
- int8_t *dir: pointer to the variable that will hold the direction (+1 means counterclockwise, -1 means clockwise);
@outputs: 
- void;
@#
*/
void rad2stepdir(double dq, double resolution, double frequency, uint32_t *steps, int8_t *dir){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	ed87 0b06 	vstr	d0, [r7, #24]
 8001c32:	ed87 1b04 	vstr	d1, [r7, #16]
 8001c36:	ed87 2b02 	vstr	d2, [r7, #8]
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
    dq = delta_q/delta_t = delta_q*f -> stepdir*Resolution*f
    stepdir = dq/(Resolution*f)
    dir = sign(stepdir)
    step = abs(stepdir)
    */
    int32_t stepdir = (int32_t) (dq/(resolution*frequency));
 8001c3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c46:	f7fe fce7 	bl	8000618 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c52:	f7fe fe0b 	bl	800086c <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe ff75 	bl	8000b4c <__aeabi_d2iz>
 8001c62:	4603      	mov	r3, r0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    *dir = SIGN(stepdir);
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	0fdb      	lsrs	r3, r3, #31
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bfd4      	ite	le
 8001c76:	2301      	movle	r3, #1
 8001c78:	2300      	movgt	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	b25a      	sxtb	r2, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	701a      	strb	r2, [r3, #0]
    *steps = abs(stepdir);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bfb8      	it	lt
 8001c8c:	425b      	neglt	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	601a      	str	r2, [r3, #0]
}
 8001c94:	bf00      	nop
 8001c96:	3728      	adds	r7, #40	; 0x28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <init_rate>:
- uint16_t ms: number of millisecond that define the rate;
@outputs: 
- void;
@#
*/
void init_rate(rate_t *rate, uint16_t ms){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
    rate->last_time = (double) NOW_TIME;
 8001ca8:	f003 f9cc 	bl	8005044 <clock>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fc38 	bl	8000524 <__aeabi_ui2d>
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <init_rate+0x3c>)
 8001cba:	f7fe fdd7 	bl	800086c <__aeabi_ddiv>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	e9c1 2300 	strd	r2, r3, [r1]
    rate->delta_time = ms;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	811a      	strh	r2, [r3, #8]
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40590000 	.word	0x40590000

08001cdc <rate_sleep>:
- rate_t *rate: pointer to the rate struct;
@outputs: 
- void;
@#
*/
void rate_sleep(rate_t *rate){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
    double now, interval;
    now = (double) NOW_TIME;
 8001ce4:	f003 f9ae 	bl	8005044 <clock>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc1a 	bl	8000524 <__aeabi_ui2d>
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <rate_sleep+0xa0>)
 8001cf6:	f7fe fdb9 	bl	800086c <__aeabi_ddiv>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    interval = (double) (now - rate->last_time); /* time passed from the last rate_sleep call */
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d0c:	f7fe facc 	bl	80002a8 <__aeabi_dsub>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	e9c7 2302 	strd	r2, r3, [r7, #8]
    /* wait until enough time has passed from the last rate_sleep call */
    while( interval < rate->delta_time){
 8001d18:	e019      	b.n	8001d4e <rate_sleep+0x72>
        now = (double) NOW_TIME;
 8001d1a:	f003 f993 	bl	8005044 <clock>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fbff 	bl	8000524 <__aeabi_ui2d>
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <rate_sleep+0xa0>)
 8001d2c:	f7fe fd9e 	bl	800086c <__aeabi_ddiv>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	e9c7 2304 	strd	r2, r3, [r7, #16]
        interval = (double) (now - rate->last_time);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d42:	f7fe fab1 	bl	80002a8 <__aeabi_dsub>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while( interval < rate->delta_time){
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	891b      	ldrh	r3, [r3, #8]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fbf6 	bl	8000544 <__aeabi_i2d>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d60:	f7fe fecc 	bl	8000afc <__aeabi_dcmplt>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1d7      	bne.n	8001d1a <rate_sleep+0x3e>
    }
    /* if enough time has passed, save the time stamp and go on with the process */
    rate->last_time = now;
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d70:	e9c1 2300 	strd	r2, r3, [r1]
    return;
 8001d74:	bf00      	nop
}
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40590000 	.word	0x40590000

08001d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d88:	f000 fc9a 	bl	80026c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d8c:	f000 f8a0 	bl	8001ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d90:	f000 f952 	bl	8002038 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d94:	f000 f930 	bl	8001ff8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d98:	f000 f904 	bl	8001fa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_man(&manip); /* initialize the manipulator struct */
 8001d9c:	4846      	ldr	r0, [pc, #280]	; (8001eb8 <main+0x138>)
 8001d9e:	f7ff f8e9 	bl	8000f74 <init_man>
  init_rate(&rate, T_C); /* initialize the rate struct */
 8001da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff77 	bl	8001c9c <init_rate>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*) &rx_data, (uint8_t) DATA_SZ); /* DATA_SZ bytes of data for each reception */
 8001dae:	2240      	movs	r2, #64	; 0x40
 8001db0:	4942      	ldr	r1, [pc, #264]	; (8001ebc <main+0x13c>)
 8001db2:	4843      	ldr	r0, [pc, #268]	; (8001ec0 <main+0x140>)
 8001db4:	f002 f88d 	bl	8003ed2 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* ANCHOR DEBUG */
  double A[3*3] = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};
 8001db8:	4a42      	ldr	r2, [pc, #264]	; (8001ec4 <main+0x144>)
 8001dba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	2248      	movs	r2, #72	; 0x48
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 f97c 	bl	80050c0 <memcpy>
  double B[3*3] = {1.0, 3.0, 6.0, 9.0, 12.0, 27.0, 1.0, 2.0, 3.0};
 8001dc8:	4a3f      	ldr	r2, [pc, #252]	; (8001ec8 <main+0x148>)
 8001dca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001dce:	4611      	mov	r1, r2
 8001dd0:	2248      	movs	r2, #72	; 0x48
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 f974 	bl	80050c0 <memcpy>
  double I[2*2] = {1.0, 1.0, 3.0, 4.0};
 8001dd8:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <main+0x14c>)
 8001dda:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8001dde:	461d      	mov	r5, r3
 8001de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001de4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  double I_det[2*2] = {1.0, 1.0, 3.0, 4.0};
 8001dec:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001df0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001df4:	4a35      	ldr	r2, [pc, #212]	; (8001ecc <main+0x14c>)
 8001df6:	461c      	mov	r4, r3
 8001df8:	4615      	mov	r5, r2
 8001dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  inv(I,adjI, subI, trI, 2, invI);
  pseudo_inv(I, trI, tempI, adjI, subI, invI, dotI, 2, psinvI);
  tr(I, 2, 2, trI);
  */

  B_calc(&manip);
 8001e06:	482c      	ldr	r0, [pc, #176]	; (8001eb8 <main+0x138>)
 8001e08:	f7ff fa56 	bl	80012b8 <B_calc>
  C_calc(&manip);
 8001e0c:	482a      	ldr	r0, [pc, #168]	; (8001eb8 <main+0x138>)
 8001e0e:	f7ff fc03 	bl	8001618 <C_calc>
  rad2stepdir(-1.5, 6.28/1000, T_C, &steps, &dir);
 8001e12:	1cfa      	adds	r2, r7, #3
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8001e90 <main+0x110>
 8001e1e:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001e98 <main+0x118>
 8001e22:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001ea0 <main+0x120>
 8001e26:	f7ff feff 	bl	8001c28 <rad2stepdir>


  /* ANCHOR END DEBUG */
  while (1)
  {
    controller(&manip, &u); /* apply the control law to find the input */
 8001e2a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4821      	ldr	r0, [pc, #132]	; (8001eb8 <main+0x138>)
 8001e32:	f7ff fd83 	bl	800193c <controller>
    /* change the input from [rad/s] to [steps] and [direction] (stepdir) */
    rad2stepdir(u[0], (double) RESOLUTION, (double) 1/T_C, &steps0, &dir0); /* first motor */
 8001e36:	ed97 7b7e 	vldr	d7, [r7, #504]	; 0x1f8
 8001e3a:	f207 12ef 	addw	r2, r7, #495	; 0x1ef
 8001e3e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	ed9f 2b18 	vldr	d2, [pc, #96]	; 8001ea8 <main+0x128>
 8001e4a:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001eb0 <main+0x130>
 8001e4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e52:	eef0 0a67 	vmov.f32	s1, s15
 8001e56:	f7ff fee7 	bl	8001c28 <rad2stepdir>
    rad2stepdir(u[1], (double) RESOLUTION, (double) 1/T_C, &steps1, &dir1); /* second motor */
 8001e5a:	ed97 7b80 	vldr	d7, [r7, #512]	; 0x200
 8001e5e:	f507 72f7 	add.w	r2, r7, #494	; 0x1ee
 8001e62:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 8001ea8 <main+0x128>
 8001e6e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8001eb0 <main+0x130>
 8001e72:	eeb0 0a47 	vmov.f32	s0, s14
 8001e76:	eef0 0a67 	vmov.f32	s1, s15
 8001e7a:	f7ff fed5 	bl	8001c28 <rad2stepdir>
    /* apply the inputs to the motors */
    // TODO: implement methods to apply inputs to motors !!
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    rate_sleep(&rate); /* wait with a fixed frequency */
 8001e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff2a 	bl	8001cdc <rate_sleep>
    controller(&manip, &u); /* apply the control law to find the input */
 8001e88:	e7cf      	b.n	8001e2a <main+0xaa>
 8001e8a:	bf00      	nop
 8001e8c:	f3af 8000 	nop.w
 8001e90:	47ae147b 	.word	0x47ae147b
 8001e94:	3f847ae1 	.word	0x3f847ae1
 8001e98:	a9e6eeb7 	.word	0xa9e6eeb7
 8001e9c:	3f79b90e 	.word	0x3f79b90e
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	bff80000 	.word	0xbff80000
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	40590000 	.word	0x40590000
 8001eb0:	2a305532 	.word	0x2a305532
 8001eb4:	3fa013a9 	.word	0x3fa013a9
 8001eb8:	200000d0 	.word	0x200000d0
 8001ebc:	2000008c 	.word	0x2000008c
 8001ec0:	200005e0 	.word	0x200005e0
 8001ec4:	08007588 	.word	0x08007588
 8001ec8:	080075d0 	.word	0x080075d0
 8001ecc:	08007618 	.word	0x08007618

08001ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b094      	sub	sp, #80	; 0x50
 8001ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed6:	f107 0320 	add.w	r3, r7, #32
 8001eda:	2230      	movs	r2, #48	; 0x30
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 f8fc 	bl	80050dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <SystemClock_Config+0xcc>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <SystemClock_Config+0xcc>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6413      	str	r3, [r2, #64]	; 0x40
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <SystemClock_Config+0xcc>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <SystemClock_Config+0xd0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <SystemClock_Config+0xd0>)
 8001f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <SystemClock_Config+0xd0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f30:	2301      	movs	r3, #1
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f34:	2310      	movs	r3, #16
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f40:	2310      	movs	r3, #16
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	4618      	mov	r0, r3
 8001f58:	f001 fad6 	bl	8003508 <HAL_RCC_OscConfig>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f62:	f000 f8d7 	bl	8002114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f66:	230f      	movs	r3, #15
 8001f68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2102      	movs	r1, #2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fd38 	bl	80039f8 <HAL_RCC_ClockConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f8e:	f000 f8c1 	bl	8002114 <Error_Handler>
  }
}
 8001f92:	bf00      	nop
 8001f94:	3750      	adds	r7, #80	; 0x50
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40007000 	.word	0x40007000

08001fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <MX_USART2_UART_Init+0x50>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fdc:	f001 ff2c 	bl	8003e38 <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fe6:	f000 f895 	bl	8002114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200005e0 	.word	0x200005e0
 8001ff4:	40004400 	.word	0x40004400

08001ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_DMA_Init+0x3c>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <MX_DMA_Init+0x3c>)
 8002008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_DMA_Init+0x3c>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	2010      	movs	r0, #16
 8002020:	f000 fc9b 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002024:	2010      	movs	r0, #16
 8002026:	f000 fcb4 	bl	8002992 <HAL_NVIC_EnableIRQ>

}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800

08002038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
 800204c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <MX_GPIO_Init+0xd0>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a2c      	ldr	r2, [pc, #176]	; (8002108 <MX_GPIO_Init+0xd0>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <MX_GPIO_Init+0xd0>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b26      	ldr	r3, [pc, #152]	; (8002108 <MX_GPIO_Init+0xd0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a25      	ldr	r2, [pc, #148]	; (8002108 <MX_GPIO_Init+0xd0>)
 8002074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <MX_GPIO_Init+0xd0>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <MX_GPIO_Init+0xd0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <MX_GPIO_Init+0xd0>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <MX_GPIO_Init+0xd0>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_GPIO_Init+0xd0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a17      	ldr	r2, [pc, #92]	; (8002108 <MX_GPIO_Init+0xd0>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <MX_GPIO_Init+0xd0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	2120      	movs	r1, #32
 80020c2:	4812      	ldr	r0, [pc, #72]	; (800210c <MX_GPIO_Init+0xd4>)
 80020c4:	f001 fa06 	bl	80034d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	480c      	ldr	r0, [pc, #48]	; (8002110 <MX_GPIO_Init+0xd8>)
 80020e0:	f001 f874 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020e4:	2320      	movs	r3, #32
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	4804      	ldr	r0, [pc, #16]	; (800210c <MX_GPIO_Init+0xd4>)
 80020fc:	f001 f866 	bl	80031cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002100:	bf00      	nop
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	40020000 	.word	0x40020000
 8002110:	40020800 	.word	0x40020800

08002114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002118:	b672      	cpsid	i
}
 800211a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800211c:	e7fe      	b.n	800211c <Error_Handler+0x8>
	...

08002120 <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	ed87 0b00 	vstr	d0, [r7]
    buffer->buffer[buffer->tail] = data;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	3301      	adds	r3, #1
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	18d1      	adds	r1, r2, r3
 8002138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800213c:	e9c1 2300 	strd	r2, r3, [r1]
    buffer->tail++;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <rbpush+0x94>)
 8002152:	fba3 1302 	umull	r1, r3, r3, r2
 8002156:	08d9      	lsrs	r1, r3, #3
 8002158:	460b      	mov	r3, r1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	b2da      	uxtb	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	789b      	ldrb	r3, [r3, #2]
 800216c:	2b0a      	cmp	r3, #10
 800216e:	d114      	bne.n	800219a <rbpush+0x7a>
        /* overwriting data: also move head forward */
        buffer->head++;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	3301      	adds	r3, #1
 8002176:	b2da      	uxtb	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	785a      	ldrb	r2, [r3, #1]
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <rbpush+0x94>)
 8002182:	fba3 1302 	umull	r1, r3, r3, r2
 8002186:	08d9      	lsrs	r1, r3, #3
 8002188:	460b      	mov	r3, r1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	b2da      	uxtb	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	705a      	strb	r2, [r3, #1]
 8002198:	e005      	b.n	80021a6 <rbpush+0x86>
    }else{
        buffer->length++;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	789b      	ldrb	r3, [r3, #2]
 800219e:	3301      	adds	r3, #1
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	cccccccd 	.word	0xcccccccd

080021b8 <rbpop>:
- rbelement_t *data: pointer to the variable that will hold the popped value;
@outputs: 
- rberror_t: whether the popping procedure was concluded successfully.
@#
*/
rberror_t rbpop(ringbuffer_t *buffer, rbelement_t *data){
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	789b      	ldrb	r3, [r3, #2]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <rbpop+0x16>
        return 0; /* pop operation could not be completed because the buffer is empty */
 80021ca:	2300      	movs	r3, #0
 80021cc:	e025      	b.n	800221a <rbpop+0x62>
    }
    *data = buffer->buffer[buffer->head];
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	785b      	ldrb	r3, [r3, #1]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	3301      	adds	r3, #1
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	6839      	ldr	r1, [r7, #0]
 80021e0:	e9c1 2300 	strd	r2, r3, [r1]
    buffer->head++;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	785b      	ldrb	r3, [r3, #1]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	705a      	strb	r2, [r3, #1]
    buffer->head %= RBUF_SZ;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	785a      	ldrb	r2, [r3, #1]
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <rbpop+0x70>)
 80021f6:	fba3 1302 	umull	r1, r3, r3, r2
 80021fa:	08d9      	lsrs	r1, r3, #3
 80021fc:	460b      	mov	r3, r1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	b2da      	uxtb	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	705a      	strb	r2, [r3, #1]
    buffer->length--;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	789b      	ldrb	r3, [r3, #2]
 8002210:	3b01      	subs	r3, #1
 8002212:	b2da      	uxtb	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	709a      	strb	r2, [r3, #2]
    return 1;
 8002218:	2301      	movs	r3, #1
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	cccccccd 	.word	0xcccccccd

0800222c <rblast>:
- rbelement_t *data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	789b      	ldrb	r3, [r3, #2]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <rblast+0x16>
        return 0; // operation failed
 800223e:	2300      	movs	r3, #0
 8002240:	e00e      	b.n	8002260 <rblast+0x34>
    }
    uint8_t index = buffer->tail-1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	3b01      	subs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
        index += RBUF_SZ;
    }
    *data = buffer->buffer[index];
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	3301      	adds	r3, #1
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	6839      	ldr	r1, [r7, #0]
 800225a:	e9c1 2300 	strd	r2, r3, [r1]
    return 1;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <rbclear>:
- ringbuffer_t *buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e00d      	b.n	800229a <rbclear+0x2e>
        buffer->buffer[i] = 0;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	3301      	adds	r3, #1
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	18d1      	adds	r1, r2, r3
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9c1 2300 	strd	r2, r3, [r1]
    for(i = 0; i < RBUF_SZ; i++){
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	3301      	adds	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b09      	cmp	r3, #9
 800229e:	d9ee      	bls.n	800227e <rbclear+0x12>
    }
    buffer->length = 0;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_MspInit+0x4c>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <HAL_MspInit+0x4c>)
 80022d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d4:	6453      	str	r3, [r2, #68]	; 0x44
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_MspInit+0x4c>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_MspInit+0x4c>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_MspInit+0x4c>)
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f0:	6413      	str	r3, [r2, #64]	; 0x40
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_MspInit+0x4c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022fe:	2007      	movs	r0, #7
 8002300:	f000 fb20 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800

08002310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a39      	ldr	r2, [pc, #228]	; (8002414 <HAL_UART_MspInit+0x104>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d16b      	bne.n	800240a <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b38      	ldr	r3, [pc, #224]	; (8002418 <HAL_UART_MspInit+0x108>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a37      	ldr	r2, [pc, #220]	; (8002418 <HAL_UART_MspInit+0x108>)
 800233c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b35      	ldr	r3, [pc, #212]	; (8002418 <HAL_UART_MspInit+0x108>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b31      	ldr	r3, [pc, #196]	; (8002418 <HAL_UART_MspInit+0x108>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a30      	ldr	r2, [pc, #192]	; (8002418 <HAL_UART_MspInit+0x108>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <HAL_UART_MspInit+0x108>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800236a:	230c      	movs	r3, #12
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800237a:	2307      	movs	r3, #7
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	4619      	mov	r1, r3
 8002384:	4825      	ldr	r0, [pc, #148]	; (800241c <HAL_UART_MspInit+0x10c>)
 8002386:	f000 ff21 	bl	80031cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800238a:	4b25      	ldr	r3, [pc, #148]	; (8002420 <HAL_UART_MspInit+0x110>)
 800238c:	4a25      	ldr	r2, [pc, #148]	; (8002424 <HAL_UART_MspInit+0x114>)
 800238e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_UART_MspInit+0x110>)
 8002392:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002396:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <HAL_UART_MspInit+0x110>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800239e:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023a4:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ac:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023b2:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023c4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023c8:	2204      	movs	r2, #4
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023ce:	2203      	movs	r2, #3
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023da:	2200      	movs	r2, #0
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80023de:	4810      	ldr	r0, [pc, #64]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023e0:	f000 faf2 	bl	80029c8 <HAL_DMA_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80023ea:	f7ff fe93 	bl	8002114 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <HAL_UART_MspInit+0x110>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	2026      	movs	r0, #38	; 0x26
 8002400:	f000 faab 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002404:	2026      	movs	r0, #38	; 0x26
 8002406:	f000 fac4 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	; 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40004400 	.word	0x40004400
 8002418:	40023800 	.word	0x40023800
 800241c:	40020000 	.word	0x40020000
 8002420:	20000624 	.word	0x20000624
 8002424:	40026088 	.word	0x40026088

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800242c:	e7fe      	b.n	800242c <NMI_Handler+0x4>

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002474:	f000 f976 	bl	8002764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Stream5_IRQHandler+0x10>)
 8002482:	f000 fc39 	bl	8002cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000624 	.word	0x20000624

08002490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <USART2_IRQHandler+0x10>)
 8002496:	f001 fd4d 	bl	8003f34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200005e0 	.word	0x200005e0

080024a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
	return 1;
 80024a8:	2301      	movs	r3, #1
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_kill>:

int _kill(int pid, int sig)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024be:	f002 fdd5 	bl	800506c <__errno>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2216      	movs	r2, #22
 80024c6:	601a      	str	r2, [r3, #0]
	return -1;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_exit>:

void _exit (int status)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ffe7 	bl	80024b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024e6:	e7fe      	b.n	80024e6 <_exit+0x12>

080024e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e00a      	b.n	8002510 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024fa:	f3af 8000 	nop.w
 80024fe:	4601      	mov	r1, r0
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	60ba      	str	r2, [r7, #8]
 8002506:	b2ca      	uxtb	r2, r1
 8002508:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	dbf0      	blt.n	80024fa <_read+0x12>
	}

return len;
 8002518:	687b      	ldr	r3, [r7, #4]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	e009      	b.n	8002548 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	60ba      	str	r2, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3301      	adds	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	dbf1      	blt.n	8002534 <_write+0x12>
	}
	return len;
 8002550:	687b      	ldr	r3, [r7, #4]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_close>:

int _close(int file)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
	return -1;
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002582:	605a      	str	r2, [r3, #4]
	return 0;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_isatty>:

int _isatty(int file)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
	return 1;
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
	return 0;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
	return -1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <_sbrk+0x5c>)
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <_sbrk+0x60>)
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <_sbrk+0x64>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <_sbrk+0x64>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <_sbrk+0x68>)
 80025fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	d207      	bcs.n	800261c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800260c:	f002 fd2e 	bl	800506c <__errno>
 8002610:	4603      	mov	r3, r0
 8002612:	220c      	movs	r2, #12
 8002614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	e009      	b.n	8002630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <_sbrk+0x64>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <_sbrk+0x64>)
 800262c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20020000 	.word	0x20020000
 800263c:	00000400 	.word	0x00000400
 8002640:	20000684 	.word	0x20000684
 8002644:	200006a0 	.word	0x200006a0

08002648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <SystemInit+0x20>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <SystemInit+0x20>)
 8002654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800266c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002670:	480d      	ldr	r0, [pc, #52]	; (80026a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002672:	490e      	ldr	r1, [pc, #56]	; (80026ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002674:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002678:	e002      	b.n	8002680 <LoopCopyDataInit>

0800267a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800267c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267e:	3304      	adds	r3, #4

08002680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002684:	d3f9      	bcc.n	800267a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002686:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002688:	4c0b      	ldr	r4, [pc, #44]	; (80026b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800268c:	e001      	b.n	8002692 <LoopFillZerobss>

0800268e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002690:	3204      	adds	r2, #4

08002692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002694:	d3fb      	bcc.n	800268e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002696:	f7ff ffd7 	bl	8002648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800269a:	f002 fced 	bl	8005078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800269e:	f7ff fb6f 	bl	8001d80 <main>
  bx  lr    
 80026a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80026b0:	08007ac8 	.word	0x08007ac8
  ldr r2, =_sbss
 80026b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80026b8:	2000069c 	.word	0x2000069c

080026bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC_IRQHandler>
	...

080026c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <HAL_Init+0x40>)
 80026ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <HAL_Init+0x40>)
 80026d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_Init+0x40>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a07      	ldr	r2, [pc, #28]	; (8002700 <HAL_Init+0x40>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f000 f92b 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f000 f808 	bl	8002704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026f4:	f7ff fde4 	bl	80022c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023c00 	.word	0x40023c00

08002704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_InitTick+0x54>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_InitTick+0x58>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271a:	fbb3 f3f1 	udiv	r3, r3, r1
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f943 	bl	80029ae <HAL_SYSTICK_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e00e      	b.n	8002750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d80a      	bhi.n	800274e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002738:	2200      	movs	r2, #0
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	f04f 30ff 	mov.w	r0, #4294967295
 8002740:	f000 f90b 	bl	800295a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002744:	4a06      	ldr	r2, [pc, #24]	; (8002760 <HAL_InitTick+0x5c>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000000 	.word	0x20000000
 800275c:	20000008 	.word	0x20000008
 8002760:	20000004 	.word	0x20000004

08002764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_IncTick+0x20>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_IncTick+0x24>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <HAL_IncTick+0x24>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000008 	.word	0x20000008
 8002788:	20000688 	.word	0x20000688

0800278c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return uwTick;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_GetTick+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000688 	.word	0x20000688

080027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d6:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <__NVIC_EnableIRQ+0x38>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002910:	d301      	bcc.n	8002916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002912:	2301      	movs	r3, #1
 8002914:	e00f      	b.n	8002936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <SysTick_Config+0x40>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291e:	210f      	movs	r1, #15
 8002920:	f04f 30ff 	mov.w	r0, #4294967295
 8002924:	f7ff ff8e 	bl	8002844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <SysTick_Config+0x40>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <SysTick_Config+0x40>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff29 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296c:	f7ff ff3e 	bl	80027ec <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ff8e 	bl	8002898 <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff5d 	bl	8002844 <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff31 	bl	8002808 <__NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffa2 	bl	8002900 <SysTick_Config>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff feda 	bl	800278c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e099      	b.n	8002b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a04:	e00f      	b.n	8002a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a06:	f7ff fec1 	bl	800278c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d908      	bls.n	8002a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e078      	b.n	8002b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e8      	bne.n	8002a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_DMA_Init+0x158>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d107      	bne.n	8002a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0307 	bic.w	r3, r3, #7
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d117      	bne.n	8002aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fb01 	bl	80030d4 <DMA_CheckFifoParam>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e016      	b.n	8002b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fab8 	bl	8003068 <DMA_CalcBaseAndBitshift>
 8002af8:	4603      	mov	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	223f      	movs	r2, #63	; 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	f010803f 	.word	0xf010803f

08002b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA_Start_IT+0x26>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e040      	b.n	8002bcc <HAL_DMA_Start_IT+0xa8>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d12f      	bne.n	8002bbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fa4a 	bl	800300c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	223f      	movs	r2, #63	; 0x3f
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0216 	orr.w	r2, r2, #22
 8002b92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0208 	orr.w	r2, r2, #8
 8002baa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e005      	b.n	8002bca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002be2:	f7ff fdd3 	bl	800278c <HAL_GetTick>
 8002be6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d008      	beq.n	8002c06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e052      	b.n	8002cac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0216 	bic.w	r2, r2, #22
 8002c14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <HAL_DMA_Abort+0x62>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0208 	bic.w	r2, r2, #8
 8002c44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c56:	e013      	b.n	8002c80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c58:	f7ff fd98 	bl	800278c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d90c      	bls.n	8002c80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e015      	b.n	8002cac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e4      	bne.n	8002c58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	223f      	movs	r2, #63	; 0x3f
 8002c94:	409a      	lsls	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00c      	b.n	8002cec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d04:	4b8e      	ldr	r3, [pc, #568]	; (8002f40 <HAL_DMA_IRQHandler+0x248>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a8e      	ldr	r2, [pc, #568]	; (8002f44 <HAL_DMA_IRQHandler+0x24c>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0a9b      	lsrs	r3, r3, #10
 8002d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	2208      	movs	r2, #8
 8002d24:	409a      	lsls	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01a      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	2208      	movs	r2, #8
 8002d52:	409a      	lsls	r2, r3
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	2201      	movs	r2, #1
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d012      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d86:	2201      	movs	r2, #1
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	f043 0202 	orr.w	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	2204      	movs	r2, #4
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d012      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc8:	f043 0204 	orr.w	r2, r3, #4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d043      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d03c      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	2210      	movs	r2, #16
 8002df4:	409a      	lsls	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d018      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d108      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d024      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
 8002e26:	e01f      	b.n	8002e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01b      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
 8002e38:	e016      	b.n	8002e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0208 	bic.w	r2, r2, #8
 8002e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 808f 	beq.w	8002f98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8087 	beq.w	8002f98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	2220      	movs	r2, #32
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d136      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0216 	bic.w	r2, r2, #22
 8002eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_DMA_IRQHandler+0x1da>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0208 	bic.w	r2, r2, #8
 8002ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	223f      	movs	r2, #63	; 0x3f
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d07e      	beq.n	8003004 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
        }
        return;
 8002f0e:	e079      	b.n	8003004 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01d      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10d      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d031      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
 8002f3c:	e02c      	b.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
 8002f3e:	bf00      	nop
 8002f40:	20000000 	.word	0x20000000
 8002f44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d023      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
 8002f58:	e01e      	b.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10f      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0210 	bic.w	r2, r2, #16
 8002f76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d032      	beq.n	8003006 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d022      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2205      	movs	r2, #5
 8002fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d307      	bcc.n	8002fe0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f2      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0x2cc>
 8002fde:	e000      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fe0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
 8003002:	e000      	b.n	8003006 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003004:	bf00      	nop
    }
  }
}
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003028:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	d108      	bne.n	800304c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800304a:	e007      	b.n	800305c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	60da      	str	r2, [r3, #12]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	3b10      	subs	r3, #16
 8003078:	4a14      	ldr	r2, [pc, #80]	; (80030cc <DMA_CalcBaseAndBitshift+0x64>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003082:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d909      	bls.n	80030aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800309e:	f023 0303 	bic.w	r3, r3, #3
 80030a2:	1d1a      	adds	r2, r3, #4
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	659a      	str	r2, [r3, #88]	; 0x58
 80030a8:	e007      	b.n	80030ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030b2:	f023 0303 	bic.w	r3, r3, #3
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	aaaaaaab 	.word	0xaaaaaaab
 80030d0:	08007690 	.word	0x08007690

080030d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d11f      	bne.n	800312e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d856      	bhi.n	80031a2 <DMA_CheckFifoParam+0xce>
 80030f4:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <DMA_CheckFifoParam+0x28>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	0800311f 	.word	0x0800311f
 8003104:	0800310d 	.word	0x0800310d
 8003108:	080031a3 	.word	0x080031a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d046      	beq.n	80031a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800311c:	e043      	b.n	80031a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003126:	d140      	bne.n	80031aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312c:	e03d      	b.n	80031aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003136:	d121      	bne.n	800317c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d837      	bhi.n	80031ae <DMA_CheckFifoParam+0xda>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <DMA_CheckFifoParam+0x70>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003155 	.word	0x08003155
 8003148:	0800315b 	.word	0x0800315b
 800314c:	08003155 	.word	0x08003155
 8003150:	0800316d 	.word	0x0800316d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
      break;
 8003158:	e030      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d025      	beq.n	80031b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800316a:	e022      	b.n	80031b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003174:	d11f      	bne.n	80031b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800317a:	e01c      	b.n	80031b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d903      	bls.n	800318a <DMA_CheckFifoParam+0xb6>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d003      	beq.n	8003190 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003188:	e018      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
      break;
 800318e:	e015      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00e      	beq.n	80031ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      break;
 80031a0:	e00b      	b.n	80031ba <DMA_CheckFifoParam+0xe6>
      break;
 80031a2:	bf00      	nop
 80031a4:	e00a      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;
 80031a6:	bf00      	nop
 80031a8:	e008      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;
 80031aa:	bf00      	nop
 80031ac:	e006      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;
 80031ae:	bf00      	nop
 80031b0:	e004      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;
 80031b2:	bf00      	nop
 80031b4:	e002      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;   
 80031b6:	bf00      	nop
 80031b8:	e000      	b.n	80031bc <DMA_CheckFifoParam+0xe8>
      break;
 80031ba:	bf00      	nop
    }
  } 
  
  return status; 
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop

080031cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	e159      	b.n	800349c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	429a      	cmp	r2, r3
 8003202:	f040 8148 	bne.w	8003496 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d005      	beq.n	800321e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321a:	2b02      	cmp	r3, #2
 800321c:	d130      	bne.n	8003280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	2203      	movs	r2, #3
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003254:	2201      	movs	r2, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 0201 	and.w	r2, r3, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b03      	cmp	r3, #3
 800328a:	d017      	beq.n	80032bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d123      	bne.n	8003310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	08da      	lsrs	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3208      	adds	r2, #8
 80032d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	220f      	movs	r2, #15
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	08da      	lsrs	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3208      	adds	r2, #8
 800330a:	69b9      	ldr	r1, [r7, #24]
 800330c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	2203      	movs	r2, #3
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0203 	and.w	r2, r3, #3
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a2 	beq.w	8003496 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b57      	ldr	r3, [pc, #348]	; (80034b4 <HAL_GPIO_Init+0x2e8>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	4a56      	ldr	r2, [pc, #344]	; (80034b4 <HAL_GPIO_Init+0x2e8>)
 800335c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003360:	6453      	str	r3, [r2, #68]	; 0x44
 8003362:	4b54      	ldr	r3, [pc, #336]	; (80034b4 <HAL_GPIO_Init+0x2e8>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800336e:	4a52      	ldr	r2, [pc, #328]	; (80034b8 <HAL_GPIO_Init+0x2ec>)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	3302      	adds	r3, #2
 8003376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	220f      	movs	r2, #15
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a49      	ldr	r2, [pc, #292]	; (80034bc <HAL_GPIO_Init+0x2f0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d019      	beq.n	80033ce <HAL_GPIO_Init+0x202>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a48      	ldr	r2, [pc, #288]	; (80034c0 <HAL_GPIO_Init+0x2f4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d013      	beq.n	80033ca <HAL_GPIO_Init+0x1fe>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a47      	ldr	r2, [pc, #284]	; (80034c4 <HAL_GPIO_Init+0x2f8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00d      	beq.n	80033c6 <HAL_GPIO_Init+0x1fa>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a46      	ldr	r2, [pc, #280]	; (80034c8 <HAL_GPIO_Init+0x2fc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d007      	beq.n	80033c2 <HAL_GPIO_Init+0x1f6>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a45      	ldr	r2, [pc, #276]	; (80034cc <HAL_GPIO_Init+0x300>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <HAL_GPIO_Init+0x1f2>
 80033ba:	2304      	movs	r3, #4
 80033bc:	e008      	b.n	80033d0 <HAL_GPIO_Init+0x204>
 80033be:	2307      	movs	r3, #7
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_Init+0x204>
 80033c2:	2303      	movs	r3, #3
 80033c4:	e004      	b.n	80033d0 <HAL_GPIO_Init+0x204>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e002      	b.n	80033d0 <HAL_GPIO_Init+0x204>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_GPIO_Init+0x204>
 80033ce:	2300      	movs	r3, #0
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	f002 0203 	and.w	r2, r2, #3
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	4093      	lsls	r3, r2
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e0:	4935      	ldr	r1, [pc, #212]	; (80034b8 <HAL_GPIO_Init+0x2ec>)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ee:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <HAL_GPIO_Init+0x304>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003412:	4a2f      	ldr	r2, [pc, #188]	; (80034d0 <HAL_GPIO_Init+0x304>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_GPIO_Init+0x304>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800343c:	4a24      	ldr	r2, [pc, #144]	; (80034d0 <HAL_GPIO_Init+0x304>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003442:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <HAL_GPIO_Init+0x304>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003466:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <HAL_GPIO_Init+0x304>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800346c:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_GPIO_Init+0x304>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003490:	4a0f      	ldr	r2, [pc, #60]	; (80034d0 <HAL_GPIO_Init+0x304>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b0f      	cmp	r3, #15
 80034a0:	f67f aea2 	bls.w	80031e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40013800 	.word	0x40013800
 80034bc:	40020000 	.word	0x40020000
 80034c0:	40020400 	.word	0x40020400
 80034c4:	40020800 	.word	0x40020800
 80034c8:	40020c00 	.word	0x40020c00
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40013c00 	.word	0x40013c00

080034d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	807b      	strh	r3, [r7, #2]
 80034e0:	4613      	mov	r3, r2
 80034e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e4:	787b      	ldrb	r3, [r7, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ea:	887a      	ldrh	r2, [r7, #2]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034f0:	e003      	b.n	80034fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034f2:	887b      	ldrh	r3, [r7, #2]
 80034f4:	041a      	lsls	r2, r3, #16
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	619a      	str	r2, [r3, #24]
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e267      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d075      	beq.n	8003612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b04      	cmp	r3, #4
 8003530:	d00c      	beq.n	800354c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003532:	4b85      	ldr	r3, [pc, #532]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353a:	2b08      	cmp	r3, #8
 800353c:	d112      	bne.n	8003564 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353e:	4b82      	ldr	r3, [pc, #520]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354a:	d10b      	bne.n	8003564 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354c:	4b7e      	ldr	r3, [pc, #504]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d05b      	beq.n	8003610 <HAL_RCC_OscConfig+0x108>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d157      	bne.n	8003610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e242      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d106      	bne.n	800357c <HAL_RCC_OscConfig+0x74>
 800356e:	4b76      	ldr	r3, [pc, #472]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a75      	ldr	r2, [pc, #468]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e01d      	b.n	80035b8 <HAL_RCC_OscConfig+0xb0>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x98>
 8003586:	4b70      	ldr	r3, [pc, #448]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6f      	ldr	r2, [pc, #444]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 800358c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b6d      	ldr	r3, [pc, #436]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6c      	ldr	r2, [pc, #432]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0xb0>
 80035a0:	4b69      	ldr	r3, [pc, #420]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a68      	ldr	r2, [pc, #416]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b66      	ldr	r3, [pc, #408]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a65      	ldr	r2, [pc, #404]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7ff f8e4 	bl	800278c <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c8:	f7ff f8e0 	bl	800278c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e207      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0xc0>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7ff f8d0 	bl	800278c <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f0:	f7ff f8cc 	bl	800278c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1f3      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003602:	4b51      	ldr	r3, [pc, #324]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0xe8>
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d063      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361e:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003632:	2b08      	cmp	r3, #8
 8003634:	d11c      	bne.n	8003670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003636:	4b44      	ldr	r3, [pc, #272]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d116      	bne.n	8003670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x152>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e1c7      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365a:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4937      	ldr	r1, [pc, #220]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	e03a      	b.n	80036e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003678:	4b34      	ldr	r3, [pc, #208]	; (800374c <HAL_RCC_OscConfig+0x244>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7ff f885 	bl	800278c <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003686:	f7ff f881 	bl	800278c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1a8      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4925      	ldr	r1, [pc, #148]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
 80036b8:	e015      	b.n	80036e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ba:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_RCC_OscConfig+0x244>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7ff f864 	bl	800278c <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c8:	f7ff f860 	bl	800278c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e187      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d036      	beq.n	8003760 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fa:	4b15      	ldr	r3, [pc, #84]	; (8003750 <HAL_RCC_OscConfig+0x248>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7ff f844 	bl	800278c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003708:	f7ff f840 	bl	800278c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e167      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_OscConfig+0x240>)
 800371c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x200>
 8003726:	e01b      	b.n	8003760 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003728:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCC_OscConfig+0x248>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372e:	f7ff f82d 	bl	800278c <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003734:	e00e      	b.n	8003754 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003736:	f7ff f829 	bl	800278c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d907      	bls.n	8003754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e150      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
 8003748:	40023800 	.word	0x40023800
 800374c:	42470000 	.word	0x42470000
 8003750:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003754:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ea      	bne.n	8003736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8097 	beq.w	800389c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003772:	4b81      	ldr	r3, [pc, #516]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10f      	bne.n	800379e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	4b7d      	ldr	r3, [pc, #500]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	4a7c      	ldr	r2, [pc, #496]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378c:	6413      	str	r3, [r2, #64]	; 0x40
 800378e:	4b7a      	ldr	r3, [pc, #488]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379e:	4b77      	ldr	r3, [pc, #476]	; (800397c <HAL_RCC_OscConfig+0x474>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d118      	bne.n	80037dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037aa:	4b74      	ldr	r3, [pc, #464]	; (800397c <HAL_RCC_OscConfig+0x474>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a73      	ldr	r2, [pc, #460]	; (800397c <HAL_RCC_OscConfig+0x474>)
 80037b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b6:	f7fe ffe9 	bl	800278c <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037be:	f7fe ffe5 	bl	800278c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e10c      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	4b6a      	ldr	r3, [pc, #424]	; (800397c <HAL_RCC_OscConfig+0x474>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d106      	bne.n	80037f2 <HAL_RCC_OscConfig+0x2ea>
 80037e4:	4b64      	ldr	r3, [pc, #400]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	4a63      	ldr	r2, [pc, #396]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6713      	str	r3, [r2, #112]	; 0x70
 80037f0:	e01c      	b.n	800382c <HAL_RCC_OscConfig+0x324>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x30c>
 80037fa:	4b5f      	ldr	r3, [pc, #380]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	4a5e      	ldr	r2, [pc, #376]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	6713      	str	r3, [r2, #112]	; 0x70
 8003806:	4b5c      	ldr	r3, [pc, #368]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	4a5b      	ldr	r2, [pc, #364]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6713      	str	r3, [r2, #112]	; 0x70
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0x324>
 8003814:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	4a57      	ldr	r2, [pc, #348]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	6713      	str	r3, [r2, #112]	; 0x70
 8003820:	4b55      	ldr	r3, [pc, #340]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a54      	ldr	r2, [pc, #336]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003826:	f023 0304 	bic.w	r3, r3, #4
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d015      	beq.n	8003860 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fe ffaa 	bl	800278c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383c:	f7fe ffa6 	bl	800278c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0cb      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003852:	4b49      	ldr	r3, [pc, #292]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0ee      	beq.n	800383c <HAL_RCC_OscConfig+0x334>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003860:	f7fe ff94 	bl	800278c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003866:	e00a      	b.n	800387e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fe ff90 	bl	800278c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e0b5      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387e:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1ee      	bne.n	8003868 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	4a38      	ldr	r2, [pc, #224]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80a1 	beq.w	80039e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a6:	4b34      	ldr	r3, [pc, #208]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d05c      	beq.n	800396c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d141      	bne.n	800393e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <HAL_RCC_OscConfig+0x478>)
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fe ff64 	bl	800278c <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fe ff60 	bl	800278c <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e087      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	4b27      	ldr	r3, [pc, #156]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	019b      	lsls	r3, r3, #6
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	3b01      	subs	r3, #1
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	491b      	ldr	r1, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003910:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <HAL_RCC_OscConfig+0x478>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fe ff39 	bl	800278c <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391e:	f7fe ff35 	bl	800278c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e05c      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x416>
 800393c:	e054      	b.n	80039e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCC_OscConfig+0x478>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe ff22 	bl	800278c <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394c:	f7fe ff1e 	bl	800278c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e045      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCC_OscConfig+0x470>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x444>
 800396a:	e03d      	b.n	80039e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e038      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
 8003978:	40023800 	.word	0x40023800
 800397c:	40007000 	.word	0x40007000
 8003980:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x4ec>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d028      	beq.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d121      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d11a      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039b4:	4013      	ands	r3, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039bc:	4293      	cmp	r3, r2
 80039be:	d111      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	3b01      	subs	r3, #1
 80039ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d107      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800

080039f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0cc      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b68      	ldr	r3, [pc, #416]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d90c      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b65      	ldr	r3, [pc, #404]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0b8      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a4c:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a58      	ldr	r2, [pc, #352]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a64:	4b53      	ldr	r3, [pc, #332]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a52      	ldr	r2, [pc, #328]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a70:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	494d      	ldr	r1, [pc, #308]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d044      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d119      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e07f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab6:	4b3f      	ldr	r3, [pc, #252]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e06f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac6:	4b3b      	ldr	r3, [pc, #236]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e067      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad6:	4b37      	ldr	r3, [pc, #220]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f023 0203 	bic.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4934      	ldr	r1, [pc, #208]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae8:	f7fe fe50 	bl	800278c <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af0:	f7fe fe4c 	bl	800278c <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e04f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 020c 	and.w	r2, r3, #12
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d1eb      	bne.n	8003af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b18:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d20c      	bcs.n	8003b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e032      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4916      	ldr	r1, [pc, #88]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	490e      	ldr	r1, [pc, #56]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b7e:	f000 f821 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b82:	4602      	mov	r2, r0
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	490a      	ldr	r1, [pc, #40]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b90:	5ccb      	ldrb	r3, [r1, r3]
 8003b92:	fa22 f303 	lsr.w	r3, r2, r3
 8003b96:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe fdb0 	bl	8002704 <HAL_InitTick>

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023c00 	.word	0x40023c00
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	08007678 	.word	0x08007678
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc8:	b094      	sub	sp, #80	; 0x50
 8003bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bdc:	4b79      	ldr	r3, [pc, #484]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d00d      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x40>
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	f200 80e1 	bhi.w	8003db0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8003bf6:	e0db      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bfc:	e0db      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bfe:	4b73      	ldr	r3, [pc, #460]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x208>)
 8003c00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c02:	e0d8      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c04:	4b6f      	ldr	r3, [pc, #444]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c0e:	4b6d      	ldr	r3, [pc, #436]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d063      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1a:	4b6a      	ldr	r3, [pc, #424]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	099b      	lsrs	r3, r3, #6
 8003c20:	2200      	movs	r2, #0
 8003c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c2e:	2300      	movs	r3, #0
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
 8003c32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c36:	4622      	mov	r2, r4
 8003c38:	462b      	mov	r3, r5
 8003c3a:	f04f 0000 	mov.w	r0, #0
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	0159      	lsls	r1, r3, #5
 8003c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c48:	0150      	lsls	r0, r2, #5
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4621      	mov	r1, r4
 8003c50:	1a51      	subs	r1, r2, r1
 8003c52:	6139      	str	r1, [r7, #16]
 8003c54:	4629      	mov	r1, r5
 8003c56:	eb63 0301 	sbc.w	r3, r3, r1
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c68:	4659      	mov	r1, fp
 8003c6a:	018b      	lsls	r3, r1, #6
 8003c6c:	4651      	mov	r1, sl
 8003c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c72:	4651      	mov	r1, sl
 8003c74:	018a      	lsls	r2, r1, #6
 8003c76:	4651      	mov	r1, sl
 8003c78:	ebb2 0801 	subs.w	r8, r2, r1
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c96:	4690      	mov	r8, r2
 8003c98:	4699      	mov	r9, r3
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	eb18 0303 	adds.w	r3, r8, r3
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	462b      	mov	r3, r5
 8003ca4:	eb49 0303 	adc.w	r3, r9, r3
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	024b      	lsls	r3, r1, #9
 8003cba:	4621      	mov	r1, r4
 8003cbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	024a      	lsls	r2, r1, #9
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cca:	2200      	movs	r2, #0
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cd4:	f7fc ff62 	bl	8000b9c <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4613      	mov	r3, r2
 8003cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce0:	e058      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce2:	4b38      	ldr	r3, [pc, #224]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	2200      	movs	r2, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	4611      	mov	r1, r2
 8003cee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cf2:	623b      	str	r3, [r7, #32]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	464b      	mov	r3, r9
 8003d00:	f04f 0000 	mov.w	r0, #0
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	0159      	lsls	r1, r3, #5
 8003d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d0e:	0150      	lsls	r0, r2, #5
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4641      	mov	r1, r8
 8003d16:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d34:	ebb2 040a 	subs.w	r4, r2, sl
 8003d38:	eb63 050b 	sbc.w	r5, r3, fp
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	00eb      	lsls	r3, r5, #3
 8003d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4a:	00e2      	lsls	r2, r4, #3
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	461d      	mov	r5, r3
 8003d50:	4643      	mov	r3, r8
 8003d52:	18e3      	adds	r3, r4, r3
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	464b      	mov	r3, r9
 8003d58:	eb45 0303 	adc.w	r3, r5, r3
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	028b      	lsls	r3, r1, #10
 8003d6e:	4621      	mov	r1, r4
 8003d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d74:	4621      	mov	r1, r4
 8003d76:	028a      	lsls	r2, r1, #10
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7e:	2200      	movs	r2, #0
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	61fa      	str	r2, [r7, #28]
 8003d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d88:	f7fc ff08 	bl	8000b9c <__aeabi_uldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4613      	mov	r3, r2
 8003d92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	0c1b      	lsrs	r3, r3, #16
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dae:	e002      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003db2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3750      	adds	r7, #80	; 0x50
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	007a1200 	.word	0x007a1200

08003dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000000 	.word	0x20000000

08003de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dec:	f7ff fff0 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0a9b      	lsrs	r3, r3, #10
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4903      	ldr	r1, [pc, #12]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	08007688 	.word	0x08007688

08003e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e14:	f7ff ffdc 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	0b5b      	lsrs	r3, r3, #13
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4903      	ldr	r1, [pc, #12]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40023800 	.word	0x40023800
 8003e34:	08007688 	.word	0x08007688

08003e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e03f      	b.n	8003eca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fe fa56 	bl	8002310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	; 0x24
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fe69 	bl	8004b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	4613      	mov	r3, r2
 8003ede:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d11d      	bne.n	8003f28 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_UART_Receive_DMA+0x26>
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e016      	b.n	8003f2a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Receive_DMA+0x38>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e00f      	b.n	8003f2a <HAL_UART_Receive_DMA+0x58>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fbb8 	bl	8004694 <UART_Start_Receive_DMA>
 8003f24:	4603      	mov	r3, r0
 8003f26:	e000      	b.n	8003f2a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b0ba      	sub	sp, #232	; 0xe8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <HAL_UART_IRQHandler+0x66>
 8003f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fd23 	bl	80049de <UART_Receive_IT>
      return;
 8003f98:	e256      	b.n	8004448 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80de 	beq.w	8004160 <HAL_UART_IRQHandler+0x22c>
 8003fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80d1 	beq.w	8004160 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xae>
 8003fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f043 0201 	orr.w	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_UART_IRQHandler+0xd2>
 8003fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f043 0202 	orr.w	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_UART_IRQHandler+0xf6>
 8004012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0204 	orr.w	r2, r3, #4
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800402a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d011      	beq.n	800405a <HAL_UART_IRQHandler+0x126>
 8004036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	d105      	bne.n	800404e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f043 0208 	orr.w	r2, r3, #8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 81ed 	beq.w	800443e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_UART_IRQHandler+0x14e>
 8004070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fcae 	bl	80049de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b40      	cmp	r3, #64	; 0x40
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <HAL_UART_IRQHandler+0x17a>
 80040a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d04f      	beq.n	800414e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fbb6 	bl	8004820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d141      	bne.n	8004146 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3314      	adds	r3, #20
 80040c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3314      	adds	r3, #20
 80040ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1d9      	bne.n	80040c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	2b00      	cmp	r3, #0
 8004114:	d013      	beq.n	800413e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	4a7d      	ldr	r2, [pc, #500]	; (8004310 <HAL_UART_IRQHandler+0x3dc>)
 800411c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe fdc6 	bl	8002cb4 <HAL_DMA_Abort_IT>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d016      	beq.n	800415c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004138:	4610      	mov	r0, r2
 800413a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	e00e      	b.n	800415c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f99a 	bl	8004478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	e00a      	b.n	800415c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f996 	bl	8004478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	e006      	b.n	800415c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f992 	bl	8004478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800415a:	e170      	b.n	800443e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	bf00      	nop
    return;
 800415e:	e16e      	b.n	800443e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	2b01      	cmp	r3, #1
 8004166:	f040 814a 	bne.w	80043fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8143 	beq.w	80043fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 813c 	beq.w	80043fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a6:	2b40      	cmp	r3, #64	; 0x40
 80041a8:	f040 80b4 	bne.w	8004314 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8140 	beq.w	8004442 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ca:	429a      	cmp	r2, r3
 80041cc:	f080 8139 	bcs.w	8004442 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e2:	f000 8088 	beq.w	80042f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004204:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004212:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800421e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800422a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1d9      	bne.n	80041e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3314      	adds	r3, #20
 8004252:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004256:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800425a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800425e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e1      	bne.n	8004232 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3314      	adds	r3, #20
 8004274:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800427e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3314      	adds	r3, #20
 800428e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004292:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004294:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004298:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e3      	bne.n	800426e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c6:	f023 0310 	bic.w	r3, r3, #16
 80042ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	330c      	adds	r3, #12
 80042d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80042da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e3      	bne.n	80042b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fc6f 	bl	8002bd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042fe:	b29b      	uxth	r3, r3
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	b29b      	uxth	r3, r3
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8c0 	bl	800448c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800430c:	e099      	b.n	8004442 <HAL_UART_IRQHandler+0x50e>
 800430e:	bf00      	nop
 8004310:	080048e7 	.word	0x080048e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800431c:	b29b      	uxth	r3, r3
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 808b 	beq.w	8004446 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8086 	beq.w	8004446 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800434a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004350:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800435e:	647a      	str	r2, [r7, #68]	; 0x44
 8004360:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004362:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800436c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1e3      	bne.n	800433a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	623b      	str	r3, [r7, #32]
   return(result);
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3314      	adds	r3, #20
 8004392:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004396:	633a      	str	r2, [r7, #48]	; 0x30
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e3      	bne.n	8004372 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0310 	bic.w	r3, r3, #16
 80043ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
 80043d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043dc:	61fa      	str	r2, [r7, #28]
 80043de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	69b9      	ldr	r1, [r7, #24]
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e3      	bne.n	80043b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f848 	bl	800448c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043fc:	e023      	b.n	8004446 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_UART_IRQHandler+0x4ea>
 800440a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fa79 	bl	800490e <UART_Transmit_IT>
    return;
 800441c:	e014      	b.n	8004448 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800441e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00e      	beq.n	8004448 <HAL_UART_IRQHandler+0x514>
 800442a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fab9 	bl	80049ae <UART_EndTransmit_IT>
    return;
 800443c:	e004      	b.n	8004448 <HAL_UART_IRQHandler+0x514>
    return;
 800443e:	bf00      	nop
 8004440:	e002      	b.n	8004448 <HAL_UART_IRQHandler+0x514>
      return;
 8004442:	bf00      	nop
 8004444:	e000      	b.n	8004448 <HAL_UART_IRQHandler+0x514>
      return;
 8004446:	bf00      	nop
  }
}
 8004448:	37e8      	adds	r7, #232	; 0xe8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop

08004450 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b09c      	sub	sp, #112	; 0x70
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d172      	bne.n	80045a6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c2:	2200      	movs	r2, #0
 80044c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80044de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80044e8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e5      	bne.n	80044c6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800450a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	667b      	str	r3, [r7, #100]	; 0x64
 8004512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800451a:	647a      	str	r2, [r7, #68]	; 0x44
 800451c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e5      	bne.n	80044fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800452e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3314      	adds	r3, #20
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	623b      	str	r3, [r7, #32]
   return(result);
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004544:	663b      	str	r3, [r7, #96]	; 0x60
 8004546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800454e:	633a      	str	r2, [r7, #48]	; 0x30
 8004550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e5      	bne.n	800452e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800456a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	2b01      	cmp	r3, #1
 8004570:	d119      	bne.n	80045a6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	330c      	adds	r3, #12
 8004578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	60fb      	str	r3, [r7, #12]
   return(result);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 0310 	bic.w	r3, r3, #16
 8004588:	65fb      	str	r3, [r7, #92]	; 0x5c
 800458a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004592:	61fa      	str	r2, [r7, #28]
 8004594:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	617b      	str	r3, [r7, #20]
   return(result);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e5      	bne.n	8004572 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d106      	bne.n	80045bc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045b2:	4619      	mov	r1, r3
 80045b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045b6:	f7ff ff69 	bl	800448c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045ba:	e002      	b.n	80045c2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80045bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045be:	f7fc fc6f 	bl	8000ea0 <HAL_UART_RxCpltCallback>
}
 80045c2:	bf00      	nop
 80045c4:	3770      	adds	r7, #112	; 0x70
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d108      	bne.n	80045f2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	4619      	mov	r1, r3
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff ff4e 	bl	800448c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045f0:	e002      	b.n	80045f8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff ff36 	bl	8004464 <HAL_UART_RxHalfCpltCallback>
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461c:	2b80      	cmp	r3, #128	; 0x80
 800461e:	bf0c      	ite	eq
 8004620:	2301      	moveq	r3, #1
 8004622:	2300      	movne	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b21      	cmp	r3, #33	; 0x21
 8004632:	d108      	bne.n	8004646 <UART_DMAError+0x46>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2200      	movs	r2, #0
 800463e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004640:	68b8      	ldr	r0, [r7, #8]
 8004642:	f000 f8c5 	bl	80047d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b40      	cmp	r3, #64	; 0x40
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b22      	cmp	r3, #34	; 0x22
 8004666:	d108      	bne.n	800467a <UART_DMAError+0x7a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2200      	movs	r2, #0
 8004672:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004674:	68b8      	ldr	r0, [r7, #8]
 8004676:	f000 f8d3 	bl	8004820 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f043 0210 	orr.w	r2, r3, #16
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004686:	68b8      	ldr	r0, [r7, #8]
 8004688:	f7ff fef6 	bl	8004478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b098      	sub	sp, #96	; 0x60
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	4613      	mov	r3, r2
 80046a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2222      	movs	r2, #34	; 0x22
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	4a40      	ldr	r2, [pc, #256]	; (80047c4 <UART_Start_Receive_DMA+0x130>)
 80046c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	4a3f      	ldr	r2, [pc, #252]	; (80047c8 <UART_Start_Receive_DMA+0x134>)
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	4a3e      	ldr	r2, [pc, #248]	; (80047cc <UART_Start_Receive_DMA+0x138>)
 80046d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	2200      	movs	r2, #0
 80046da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80046dc:	f107 0308 	add.w	r3, r7, #8
 80046e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	f7fe fa16 	bl	8002b24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d019      	beq.n	8004752 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800472e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004734:	65bb      	str	r3, [r7, #88]	; 0x58
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800473e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004740:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004744:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800474c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e5      	bne.n	800471e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3314      	adds	r3, #20
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	657b      	str	r3, [r7, #84]	; 0x54
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3314      	adds	r3, #20
 8004770:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004772:	63ba      	str	r2, [r7, #56]	; 0x38
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3314      	adds	r3, #20
 800478c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	617b      	str	r3, [r7, #20]
   return(result);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479c:	653b      	str	r3, [r7, #80]	; 0x50
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3314      	adds	r3, #20
 80047a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047a6:	627a      	str	r2, [r7, #36]	; 0x24
 80047a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6a39      	ldr	r1, [r7, #32]
 80047ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e5      	bne.n	8004786 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3760      	adds	r7, #96	; 0x60
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	080044a5 	.word	0x080044a5
 80047c8:	080045cb 	.word	0x080045cb
 80047cc:	08004601 	.word	0x08004601

080047d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	; 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	61ba      	str	r2, [r7, #24]
 80047fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6979      	ldr	r1, [r7, #20]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	613b      	str	r3, [r7, #16]
   return(result);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004814:	bf00      	nop
 8004816:	3724      	adds	r7, #36	; 0x24
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004820:	b480      	push	{r7}
 8004822:	b095      	sub	sp, #84	; 0x54
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800483e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004848:	643a      	str	r2, [r7, #64]	; 0x40
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800484e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e5      	bne.n	8004828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3314      	adds	r3, #20
 8004862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	61fb      	str	r3, [r7, #28]
   return(result);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	64bb      	str	r3, [r7, #72]	; 0x48
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3314      	adds	r3, #20
 800487a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800487c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	2b01      	cmp	r3, #1
 8004896:	d119      	bne.n	80048cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f023 0310 	bic.w	r3, r3, #16
 80048ae:	647b      	str	r3, [r7, #68]	; 0x44
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048b8:	61ba      	str	r2, [r7, #24]
 80048ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6979      	ldr	r1, [r7, #20]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	613b      	str	r3, [r7, #16]
   return(result);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048da:	bf00      	nop
 80048dc:	3754      	adds	r7, #84	; 0x54
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7ff fdb9 	bl	8004478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800490e:	b480      	push	{r7}
 8004910:	b085      	sub	sp, #20
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b21      	cmp	r3, #33	; 0x21
 8004920:	d13e      	bne.n	80049a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492a:	d114      	bne.n	8004956 <UART_Transmit_IT+0x48>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d110      	bne.n	8004956 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004948:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	1c9a      	adds	r2, r3, #2
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	621a      	str	r2, [r3, #32]
 8004954:	e008      	b.n	8004968 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6211      	str	r1, [r2, #32]
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29b      	uxth	r3, r3
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4619      	mov	r1, r3
 8004976:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10f      	bne.n	800499c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800498a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800499a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff fd3e 	bl	8004450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b08c      	sub	sp, #48	; 0x30
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b22      	cmp	r3, #34	; 0x22
 80049f0:	f040 80ab 	bne.w	8004b4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fc:	d117      	bne.n	8004a2e <UART_Receive_IT+0x50>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d113      	bne.n	8004a2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	1c9a      	adds	r2, r3, #2
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a2c:	e026      	b.n	8004a7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a40:	d007      	beq.n	8004a52 <UART_Receive_IT+0x74>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10a      	bne.n	8004a60 <UART_Receive_IT+0x82>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e008      	b.n	8004a72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d15a      	bne.n	8004b46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0220 	bic.w	r2, r2, #32
 8004a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d135      	bne.n	8004b3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f023 0310 	bic.w	r3, r3, #16
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af6:	623a      	str	r2, [r7, #32]
 8004af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	69f9      	ldr	r1, [r7, #28]
 8004afc:	6a3a      	ldr	r2, [r7, #32]
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e5      	bne.n	8004ad6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b10      	cmp	r3, #16
 8004b16:	d10a      	bne.n	8004b2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff fca9 	bl	800448c <HAL_UARTEx_RxEventCallback>
 8004b3a:	e002      	b.n	8004b42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fc f9af 	bl	8000ea0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	e002      	b.n	8004b4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e000      	b.n	8004b4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
  }
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3730      	adds	r7, #48	; 0x30
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b58:	b0c0      	sub	sp, #256	; 0x100
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	68d9      	ldr	r1, [r3, #12]
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	ea40 0301 	orr.w	r3, r0, r1
 8004b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bac:	f021 010c 	bic.w	r1, r1, #12
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bce:	6999      	ldr	r1, [r3, #24]
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	ea40 0301 	orr.w	r3, r0, r1
 8004bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4b8f      	ldr	r3, [pc, #572]	; (8004e20 <UART_SetConfig+0x2cc>)
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d005      	beq.n	8004bf4 <UART_SetConfig+0xa0>
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b8d      	ldr	r3, [pc, #564]	; (8004e24 <UART_SetConfig+0x2d0>)
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d104      	bne.n	8004bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bf4:	f7ff f90c 	bl	8003e10 <HAL_RCC_GetPCLK2Freq>
 8004bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bfc:	e003      	b.n	8004c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bfe:	f7ff f8f3 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8004c02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c10:	f040 810c 	bne.w	8004e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c26:	4622      	mov	r2, r4
 8004c28:	462b      	mov	r3, r5
 8004c2a:	1891      	adds	r1, r2, r2
 8004c2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c2e:	415b      	adcs	r3, r3
 8004c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c36:	4621      	mov	r1, r4
 8004c38:	eb12 0801 	adds.w	r8, r2, r1
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	eb43 0901 	adc.w	r9, r3, r1
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c56:	4690      	mov	r8, r2
 8004c58:	4699      	mov	r9, r3
 8004c5a:	4623      	mov	r3, r4
 8004c5c:	eb18 0303 	adds.w	r3, r8, r3
 8004c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c64:	462b      	mov	r3, r5
 8004c66:	eb49 0303 	adc.w	r3, r9, r3
 8004c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c82:	460b      	mov	r3, r1
 8004c84:	18db      	adds	r3, r3, r3
 8004c86:	653b      	str	r3, [r7, #80]	; 0x50
 8004c88:	4613      	mov	r3, r2
 8004c8a:	eb42 0303 	adc.w	r3, r2, r3
 8004c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c98:	f7fb ff80 	bl	8000b9c <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <UART_SetConfig+0x2d4>)
 8004ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	011c      	lsls	r4, r3, #4
 8004caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	1891      	adds	r1, r2, r2
 8004cc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cc4:	415b      	adcs	r3, r3
 8004cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ccc:	4641      	mov	r1, r8
 8004cce:	eb12 0a01 	adds.w	sl, r2, r1
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cec:	4692      	mov	sl, r2
 8004cee:	469b      	mov	fp, r3
 8004cf0:	4643      	mov	r3, r8
 8004cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8004cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8004d00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	18db      	adds	r3, r3, r3
 8004d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1e:	4613      	mov	r3, r2
 8004d20:	eb42 0303 	adc.w	r3, r2, r3
 8004d24:	647b      	str	r3, [r7, #68]	; 0x44
 8004d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d2e:	f7fb ff35 	bl	8000b9c <__aeabi_uldivmod>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <UART_SetConfig+0x2d4>)
 8004d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	2264      	movs	r2, #100	; 0x64
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	1acb      	subs	r3, r1, r3
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d4e:	4b36      	ldr	r3, [pc, #216]	; (8004e28 <UART_SetConfig+0x2d4>)
 8004d50:	fba3 2302 	umull	r2, r3, r3, r2
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d5c:	441c      	add	r4, r3
 8004d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d70:	4642      	mov	r2, r8
 8004d72:	464b      	mov	r3, r9
 8004d74:	1891      	adds	r1, r2, r2
 8004d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d78:	415b      	adcs	r3, r3
 8004d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d80:	4641      	mov	r1, r8
 8004d82:	1851      	adds	r1, r2, r1
 8004d84:	6339      	str	r1, [r7, #48]	; 0x30
 8004d86:	4649      	mov	r1, r9
 8004d88:	414b      	adcs	r3, r1
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d98:	4659      	mov	r1, fp
 8004d9a:	00cb      	lsls	r3, r1, #3
 8004d9c:	4651      	mov	r1, sl
 8004d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da2:	4651      	mov	r1, sl
 8004da4:	00ca      	lsls	r2, r1, #3
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	4642      	mov	r2, r8
 8004dae:	189b      	adds	r3, r3, r2
 8004db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004db4:	464b      	mov	r3, r9
 8004db6:	460a      	mov	r2, r1
 8004db8:	eb42 0303 	adc.w	r3, r2, r3
 8004dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	18db      	adds	r3, r3, r3
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dda:	4613      	mov	r3, r2
 8004ddc:	eb42 0303 	adc.w	r3, r2, r3
 8004de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dea:	f7fb fed7 	bl	8000b9c <__aeabi_uldivmod>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <UART_SetConfig+0x2d4>)
 8004df4:	fba3 1302 	umull	r1, r3, r3, r2
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	2164      	movs	r1, #100	; 0x64
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	3332      	adds	r3, #50	; 0x32
 8004e06:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <UART_SetConfig+0x2d4>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	f003 0207 	and.w	r2, r3, #7
 8004e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4422      	add	r2, r4
 8004e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e1c:	e105      	b.n	800502a <UART_SetConfig+0x4d6>
 8004e1e:	bf00      	nop
 8004e20:	40011000 	.word	0x40011000
 8004e24:	40011400 	.word	0x40011400
 8004e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e3e:	4642      	mov	r2, r8
 8004e40:	464b      	mov	r3, r9
 8004e42:	1891      	adds	r1, r2, r2
 8004e44:	6239      	str	r1, [r7, #32]
 8004e46:	415b      	adcs	r3, r3
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e4e:	4641      	mov	r1, r8
 8004e50:	1854      	adds	r4, r2, r1
 8004e52:	4649      	mov	r1, r9
 8004e54:	eb43 0501 	adc.w	r5, r3, r1
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	00eb      	lsls	r3, r5, #3
 8004e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e66:	00e2      	lsls	r2, r4, #3
 8004e68:	4614      	mov	r4, r2
 8004e6a:	461d      	mov	r5, r3
 8004e6c:	4643      	mov	r3, r8
 8004e6e:	18e3      	adds	r3, r4, r3
 8004e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e74:	464b      	mov	r3, r9
 8004e76:	eb45 0303 	adc.w	r3, r5, r3
 8004e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	008b      	lsls	r3, r1, #2
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	008a      	lsls	r2, r1, #2
 8004ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004eac:	f7fb fe76 	bl	8000b9c <__aeabi_uldivmod>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4b60      	ldr	r3, [pc, #384]	; (8005038 <UART_SetConfig+0x4e4>)
 8004eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	011c      	lsls	r4, r3, #4
 8004ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ec8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	1891      	adds	r1, r2, r2
 8004ed6:	61b9      	str	r1, [r7, #24]
 8004ed8:	415b      	adcs	r3, r3
 8004eda:	61fb      	str	r3, [r7, #28]
 8004edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	1851      	adds	r1, r2, r1
 8004ee4:	6139      	str	r1, [r7, #16]
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	414b      	adcs	r3, r1
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ef8:	4659      	mov	r1, fp
 8004efa:	00cb      	lsls	r3, r1, #3
 8004efc:	4651      	mov	r1, sl
 8004efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f02:	4651      	mov	r1, sl
 8004f04:	00ca      	lsls	r2, r1, #3
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	189b      	adds	r3, r3, r2
 8004f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f14:	464b      	mov	r3, r9
 8004f16:	460a      	mov	r2, r1
 8004f18:	eb42 0303 	adc.w	r3, r2, r3
 8004f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f38:	4649      	mov	r1, r9
 8004f3a:	008b      	lsls	r3, r1, #2
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f42:	4641      	mov	r1, r8
 8004f44:	008a      	lsls	r2, r1, #2
 8004f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f4a:	f7fb fe27 	bl	8000b9c <__aeabi_uldivmod>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4b39      	ldr	r3, [pc, #228]	; (8005038 <UART_SetConfig+0x4e4>)
 8004f54:	fba3 1302 	umull	r1, r3, r3, r2
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	2164      	movs	r1, #100	; 0x64
 8004f5c:	fb01 f303 	mul.w	r3, r1, r3
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	3332      	adds	r3, #50	; 0x32
 8004f66:	4a34      	ldr	r2, [pc, #208]	; (8005038 <UART_SetConfig+0x4e4>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f72:	441c      	add	r4, r3
 8004f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f78:	2200      	movs	r2, #0
 8004f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8004f7c:	677a      	str	r2, [r7, #116]	; 0x74
 8004f7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f82:	4642      	mov	r2, r8
 8004f84:	464b      	mov	r3, r9
 8004f86:	1891      	adds	r1, r2, r2
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	415b      	adcs	r3, r3
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f92:	4641      	mov	r1, r8
 8004f94:	1851      	adds	r1, r2, r1
 8004f96:	6039      	str	r1, [r7, #0]
 8004f98:	4649      	mov	r1, r9
 8004f9a:	414b      	adcs	r3, r1
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004faa:	4659      	mov	r1, fp
 8004fac:	00cb      	lsls	r3, r1, #3
 8004fae:	4651      	mov	r1, sl
 8004fb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fb4:	4651      	mov	r1, sl
 8004fb6:	00ca      	lsls	r2, r1, #3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4642      	mov	r2, r8
 8004fc0:	189b      	adds	r3, r3, r2
 8004fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc4:	464b      	mov	r3, r9
 8004fc6:	460a      	mov	r2, r1
 8004fc8:	eb42 0303 	adc.w	r3, r2, r3
 8004fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8004fd8:	667a      	str	r2, [r7, #100]	; 0x64
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	008b      	lsls	r3, r1, #2
 8004fea:	4641      	mov	r1, r8
 8004fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	008a      	lsls	r2, r1, #2
 8004ff4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ff8:	f7fb fdd0 	bl	8000b9c <__aeabi_uldivmod>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <UART_SetConfig+0x4e4>)
 8005002:	fba3 1302 	umull	r1, r3, r3, r2
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	2164      	movs	r1, #100	; 0x64
 800500a:	fb01 f303 	mul.w	r3, r1, r3
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	3332      	adds	r3, #50	; 0x32
 8005014:	4a08      	ldr	r2, [pc, #32]	; (8005038 <UART_SetConfig+0x4e4>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	f003 020f 	and.w	r2, r3, #15
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4422      	add	r2, r4
 8005028:	609a      	str	r2, [r3, #8]
}
 800502a:	bf00      	nop
 800502c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005030:	46bd      	mov	sp, r7
 8005032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005036:	bf00      	nop
 8005038:	51eb851f 	.word	0x51eb851f

0800503c <atoi>:
 800503c:	220a      	movs	r2, #10
 800503e:	2100      	movs	r1, #0
 8005040:	f000 b942 	b.w	80052c8 <strtol>

08005044 <clock>:
 8005044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005046:	4b08      	ldr	r3, [pc, #32]	; (8005068 <clock+0x24>)
 8005048:	4669      	mov	r1, sp
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	f000 f9e8 	bl	8005420 <_times_r>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d006      	beq.n	8005062 <clock+0x1e>
 8005054:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005058:	4418      	add	r0, r3
 800505a:	9b02      	ldr	r3, [sp, #8]
 800505c:	4418      	add	r0, r3
 800505e:	9b03      	ldr	r3, [sp, #12]
 8005060:	4418      	add	r0, r3
 8005062:	b005      	add	sp, #20
 8005064:	f85d fb04 	ldr.w	pc, [sp], #4
 8005068:	2000000c 	.word	0x2000000c

0800506c <__errno>:
 800506c:	4b01      	ldr	r3, [pc, #4]	; (8005074 <__errno+0x8>)
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	2000000c 	.word	0x2000000c

08005078 <__libc_init_array>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	4d0d      	ldr	r5, [pc, #52]	; (80050b0 <__libc_init_array+0x38>)
 800507c:	4c0d      	ldr	r4, [pc, #52]	; (80050b4 <__libc_init_array+0x3c>)
 800507e:	1b64      	subs	r4, r4, r5
 8005080:	10a4      	asrs	r4, r4, #2
 8005082:	2600      	movs	r6, #0
 8005084:	42a6      	cmp	r6, r4
 8005086:	d109      	bne.n	800509c <__libc_init_array+0x24>
 8005088:	4d0b      	ldr	r5, [pc, #44]	; (80050b8 <__libc_init_array+0x40>)
 800508a:	4c0c      	ldr	r4, [pc, #48]	; (80050bc <__libc_init_array+0x44>)
 800508c:	f002 fa66 	bl	800755c <_init>
 8005090:	1b64      	subs	r4, r4, r5
 8005092:	10a4      	asrs	r4, r4, #2
 8005094:	2600      	movs	r6, #0
 8005096:	42a6      	cmp	r6, r4
 8005098:	d105      	bne.n	80050a6 <__libc_init_array+0x2e>
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a0:	4798      	blx	r3
 80050a2:	3601      	adds	r6, #1
 80050a4:	e7ee      	b.n	8005084 <__libc_init_array+0xc>
 80050a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050aa:	4798      	blx	r3
 80050ac:	3601      	adds	r6, #1
 80050ae:	e7f2      	b.n	8005096 <__libc_init_array+0x1e>
 80050b0:	08007ac0 	.word	0x08007ac0
 80050b4:	08007ac0 	.word	0x08007ac0
 80050b8:	08007ac0 	.word	0x08007ac0
 80050bc:	08007ac4 	.word	0x08007ac4

080050c0 <memcpy>:
 80050c0:	440a      	add	r2, r1
 80050c2:	4291      	cmp	r1, r2
 80050c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050c8:	d100      	bne.n	80050cc <memcpy+0xc>
 80050ca:	4770      	bx	lr
 80050cc:	b510      	push	{r4, lr}
 80050ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d6:	4291      	cmp	r1, r2
 80050d8:	d1f9      	bne.n	80050ce <memcpy+0xe>
 80050da:	bd10      	pop	{r4, pc}

080050dc <memset>:
 80050dc:	4402      	add	r2, r0
 80050de:	4603      	mov	r3, r0
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d100      	bne.n	80050e6 <memset+0xa>
 80050e4:	4770      	bx	lr
 80050e6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ea:	e7f9      	b.n	80050e0 <memset+0x4>

080050ec <strcat>:
 80050ec:	b510      	push	{r4, lr}
 80050ee:	4602      	mov	r2, r0
 80050f0:	7814      	ldrb	r4, [r2, #0]
 80050f2:	4613      	mov	r3, r2
 80050f4:	3201      	adds	r2, #1
 80050f6:	2c00      	cmp	r4, #0
 80050f8:	d1fa      	bne.n	80050f0 <strcat+0x4>
 80050fa:	3b01      	subs	r3, #1
 80050fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005100:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005104:	2a00      	cmp	r2, #0
 8005106:	d1f9      	bne.n	80050fc <strcat+0x10>
 8005108:	bd10      	pop	{r4, pc}
	...

0800510c <strtok>:
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <strtok+0x5c>)
 800510e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005110:	681e      	ldr	r6, [r3, #0]
 8005112:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005114:	4605      	mov	r5, r0
 8005116:	b9fc      	cbnz	r4, 8005158 <strtok+0x4c>
 8005118:	2050      	movs	r0, #80	; 0x50
 800511a:	9101      	str	r1, [sp, #4]
 800511c:	f000 f9b4 	bl	8005488 <malloc>
 8005120:	9901      	ldr	r1, [sp, #4]
 8005122:	65b0      	str	r0, [r6, #88]	; 0x58
 8005124:	4602      	mov	r2, r0
 8005126:	b920      	cbnz	r0, 8005132 <strtok+0x26>
 8005128:	4b10      	ldr	r3, [pc, #64]	; (800516c <strtok+0x60>)
 800512a:	4811      	ldr	r0, [pc, #68]	; (8005170 <strtok+0x64>)
 800512c:	2157      	movs	r1, #87	; 0x57
 800512e:	f000 f97b 	bl	8005428 <__assert_func>
 8005132:	e9c0 4400 	strd	r4, r4, [r0]
 8005136:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800513a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800513e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005142:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005146:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800514a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800514e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005152:	6184      	str	r4, [r0, #24]
 8005154:	7704      	strb	r4, [r0, #28]
 8005156:	6244      	str	r4, [r0, #36]	; 0x24
 8005158:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800515a:	2301      	movs	r3, #1
 800515c:	4628      	mov	r0, r5
 800515e:	b002      	add	sp, #8
 8005160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005164:	f000 b806 	b.w	8005174 <__strtok_r>
 8005168:	2000000c 	.word	0x2000000c
 800516c:	0800769c 	.word	0x0800769c
 8005170:	080076b3 	.word	0x080076b3

08005174 <__strtok_r>:
 8005174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005176:	b908      	cbnz	r0, 800517c <__strtok_r+0x8>
 8005178:	6810      	ldr	r0, [r2, #0]
 800517a:	b188      	cbz	r0, 80051a0 <__strtok_r+0x2c>
 800517c:	4604      	mov	r4, r0
 800517e:	4620      	mov	r0, r4
 8005180:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005184:	460f      	mov	r7, r1
 8005186:	f817 6b01 	ldrb.w	r6, [r7], #1
 800518a:	b91e      	cbnz	r6, 8005194 <__strtok_r+0x20>
 800518c:	b965      	cbnz	r5, 80051a8 <__strtok_r+0x34>
 800518e:	6015      	str	r5, [r2, #0]
 8005190:	4628      	mov	r0, r5
 8005192:	e005      	b.n	80051a0 <__strtok_r+0x2c>
 8005194:	42b5      	cmp	r5, r6
 8005196:	d1f6      	bne.n	8005186 <__strtok_r+0x12>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f0      	bne.n	800517e <__strtok_r+0xa>
 800519c:	6014      	str	r4, [r2, #0]
 800519e:	7003      	strb	r3, [r0, #0]
 80051a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051a2:	461c      	mov	r4, r3
 80051a4:	e00c      	b.n	80051c0 <__strtok_r+0x4c>
 80051a6:	b915      	cbnz	r5, 80051ae <__strtok_r+0x3a>
 80051a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80051ac:	460e      	mov	r6, r1
 80051ae:	f816 5b01 	ldrb.w	r5, [r6], #1
 80051b2:	42ab      	cmp	r3, r5
 80051b4:	d1f7      	bne.n	80051a6 <__strtok_r+0x32>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f3      	beq.n	80051a2 <__strtok_r+0x2e>
 80051ba:	2300      	movs	r3, #0
 80051bc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80051c0:	6014      	str	r4, [r2, #0]
 80051c2:	e7ed      	b.n	80051a0 <__strtok_r+0x2c>

080051c4 <_strtol_l.constprop.0>:
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ca:	d001      	beq.n	80051d0 <_strtol_l.constprop.0+0xc>
 80051cc:	2b24      	cmp	r3, #36	; 0x24
 80051ce:	d906      	bls.n	80051de <_strtol_l.constprop.0+0x1a>
 80051d0:	f7ff ff4c 	bl	800506c <__errno>
 80051d4:	2316      	movs	r3, #22
 80051d6:	6003      	str	r3, [r0, #0]
 80051d8:	2000      	movs	r0, #0
 80051da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80052c4 <_strtol_l.constprop.0+0x100>
 80051e2:	460d      	mov	r5, r1
 80051e4:	462e      	mov	r6, r5
 80051e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051ea:	f814 700c 	ldrb.w	r7, [r4, ip]
 80051ee:	f017 0708 	ands.w	r7, r7, #8
 80051f2:	d1f7      	bne.n	80051e4 <_strtol_l.constprop.0+0x20>
 80051f4:	2c2d      	cmp	r4, #45	; 0x2d
 80051f6:	d132      	bne.n	800525e <_strtol_l.constprop.0+0x9a>
 80051f8:	782c      	ldrb	r4, [r5, #0]
 80051fa:	2701      	movs	r7, #1
 80051fc:	1cb5      	adds	r5, r6, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d05b      	beq.n	80052ba <_strtol_l.constprop.0+0xf6>
 8005202:	2b10      	cmp	r3, #16
 8005204:	d109      	bne.n	800521a <_strtol_l.constprop.0+0x56>
 8005206:	2c30      	cmp	r4, #48	; 0x30
 8005208:	d107      	bne.n	800521a <_strtol_l.constprop.0+0x56>
 800520a:	782c      	ldrb	r4, [r5, #0]
 800520c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005210:	2c58      	cmp	r4, #88	; 0x58
 8005212:	d14d      	bne.n	80052b0 <_strtol_l.constprop.0+0xec>
 8005214:	786c      	ldrb	r4, [r5, #1]
 8005216:	2310      	movs	r3, #16
 8005218:	3502      	adds	r5, #2
 800521a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800521e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005222:	f04f 0c00 	mov.w	ip, #0
 8005226:	fbb8 f9f3 	udiv	r9, r8, r3
 800522a:	4666      	mov	r6, ip
 800522c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005230:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005234:	f1be 0f09 	cmp.w	lr, #9
 8005238:	d816      	bhi.n	8005268 <_strtol_l.constprop.0+0xa4>
 800523a:	4674      	mov	r4, lr
 800523c:	42a3      	cmp	r3, r4
 800523e:	dd24      	ble.n	800528a <_strtol_l.constprop.0+0xc6>
 8005240:	f1bc 0f00 	cmp.w	ip, #0
 8005244:	db1e      	blt.n	8005284 <_strtol_l.constprop.0+0xc0>
 8005246:	45b1      	cmp	r9, r6
 8005248:	d31c      	bcc.n	8005284 <_strtol_l.constprop.0+0xc0>
 800524a:	d101      	bne.n	8005250 <_strtol_l.constprop.0+0x8c>
 800524c:	45a2      	cmp	sl, r4
 800524e:	db19      	blt.n	8005284 <_strtol_l.constprop.0+0xc0>
 8005250:	fb06 4603 	mla	r6, r6, r3, r4
 8005254:	f04f 0c01 	mov.w	ip, #1
 8005258:	f815 4b01 	ldrb.w	r4, [r5], #1
 800525c:	e7e8      	b.n	8005230 <_strtol_l.constprop.0+0x6c>
 800525e:	2c2b      	cmp	r4, #43	; 0x2b
 8005260:	bf04      	itt	eq
 8005262:	782c      	ldrbeq	r4, [r5, #0]
 8005264:	1cb5      	addeq	r5, r6, #2
 8005266:	e7ca      	b.n	80051fe <_strtol_l.constprop.0+0x3a>
 8005268:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800526c:	f1be 0f19 	cmp.w	lr, #25
 8005270:	d801      	bhi.n	8005276 <_strtol_l.constprop.0+0xb2>
 8005272:	3c37      	subs	r4, #55	; 0x37
 8005274:	e7e2      	b.n	800523c <_strtol_l.constprop.0+0x78>
 8005276:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800527a:	f1be 0f19 	cmp.w	lr, #25
 800527e:	d804      	bhi.n	800528a <_strtol_l.constprop.0+0xc6>
 8005280:	3c57      	subs	r4, #87	; 0x57
 8005282:	e7db      	b.n	800523c <_strtol_l.constprop.0+0x78>
 8005284:	f04f 3cff 	mov.w	ip, #4294967295
 8005288:	e7e6      	b.n	8005258 <_strtol_l.constprop.0+0x94>
 800528a:	f1bc 0f00 	cmp.w	ip, #0
 800528e:	da05      	bge.n	800529c <_strtol_l.constprop.0+0xd8>
 8005290:	2322      	movs	r3, #34	; 0x22
 8005292:	6003      	str	r3, [r0, #0]
 8005294:	4646      	mov	r6, r8
 8005296:	b942      	cbnz	r2, 80052aa <_strtol_l.constprop.0+0xe6>
 8005298:	4630      	mov	r0, r6
 800529a:	e79e      	b.n	80051da <_strtol_l.constprop.0+0x16>
 800529c:	b107      	cbz	r7, 80052a0 <_strtol_l.constprop.0+0xdc>
 800529e:	4276      	negs	r6, r6
 80052a0:	2a00      	cmp	r2, #0
 80052a2:	d0f9      	beq.n	8005298 <_strtol_l.constprop.0+0xd4>
 80052a4:	f1bc 0f00 	cmp.w	ip, #0
 80052a8:	d000      	beq.n	80052ac <_strtol_l.constprop.0+0xe8>
 80052aa:	1e69      	subs	r1, r5, #1
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	e7f3      	b.n	8005298 <_strtol_l.constprop.0+0xd4>
 80052b0:	2430      	movs	r4, #48	; 0x30
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1b1      	bne.n	800521a <_strtol_l.constprop.0+0x56>
 80052b6:	2308      	movs	r3, #8
 80052b8:	e7af      	b.n	800521a <_strtol_l.constprop.0+0x56>
 80052ba:	2c30      	cmp	r4, #48	; 0x30
 80052bc:	d0a5      	beq.n	800520a <_strtol_l.constprop.0+0x46>
 80052be:	230a      	movs	r3, #10
 80052c0:	e7ab      	b.n	800521a <_strtol_l.constprop.0+0x56>
 80052c2:	bf00      	nop
 80052c4:	0800774d 	.word	0x0800774d

080052c8 <strtol>:
 80052c8:	4613      	mov	r3, r2
 80052ca:	460a      	mov	r2, r1
 80052cc:	4601      	mov	r1, r0
 80052ce:	4802      	ldr	r0, [pc, #8]	; (80052d8 <strtol+0x10>)
 80052d0:	6800      	ldr	r0, [r0, #0]
 80052d2:	f7ff bf77 	b.w	80051c4 <_strtol_l.constprop.0>
 80052d6:	bf00      	nop
 80052d8:	2000000c 	.word	0x2000000c

080052dc <_strtoull_l.constprop.0>:
 80052dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e0:	4692      	mov	sl, r2
 80052e2:	4a49      	ldr	r2, [pc, #292]	; (8005408 <_strtoull_l.constprop.0+0x12c>)
 80052e4:	9001      	str	r0, [sp, #4]
 80052e6:	4689      	mov	r9, r1
 80052e8:	461d      	mov	r5, r3
 80052ea:	460e      	mov	r6, r1
 80052ec:	4633      	mov	r3, r6
 80052ee:	f816 4b01 	ldrb.w	r4, [r6], #1
 80052f2:	5ca7      	ldrb	r7, [r4, r2]
 80052f4:	f017 0708 	ands.w	r7, r7, #8
 80052f8:	d1f8      	bne.n	80052ec <_strtoull_l.constprop.0+0x10>
 80052fa:	2c2d      	cmp	r4, #45	; 0x2d
 80052fc:	d14a      	bne.n	8005394 <_strtoull_l.constprop.0+0xb8>
 80052fe:	7834      	ldrb	r4, [r6, #0]
 8005300:	2701      	movs	r7, #1
 8005302:	1c9e      	adds	r6, r3, #2
 8005304:	2d00      	cmp	r5, #0
 8005306:	d07b      	beq.n	8005400 <_strtoull_l.constprop.0+0x124>
 8005308:	2d10      	cmp	r5, #16
 800530a:	d109      	bne.n	8005320 <_strtoull_l.constprop.0+0x44>
 800530c:	2c30      	cmp	r4, #48	; 0x30
 800530e:	d107      	bne.n	8005320 <_strtoull_l.constprop.0+0x44>
 8005310:	7833      	ldrb	r3, [r6, #0]
 8005312:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005316:	2b58      	cmp	r3, #88	; 0x58
 8005318:	d16d      	bne.n	80053f6 <_strtoull_l.constprop.0+0x11a>
 800531a:	7874      	ldrb	r4, [r6, #1]
 800531c:	2510      	movs	r5, #16
 800531e:	3602      	adds	r6, #2
 8005320:	ea4f 7be5 	mov.w	fp, r5, asr #31
 8005324:	462a      	mov	r2, r5
 8005326:	465b      	mov	r3, fp
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	f04f 31ff 	mov.w	r1, #4294967295
 8005330:	f7fb fc34 	bl	8000b9c <__aeabi_uldivmod>
 8005334:	462a      	mov	r2, r5
 8005336:	9000      	str	r0, [sp, #0]
 8005338:	4688      	mov	r8, r1
 800533a:	465b      	mov	r3, fp
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	f04f 31ff 	mov.w	r1, #4294967295
 8005344:	f7fb fc2a 	bl	8000b9c <__aeabi_uldivmod>
 8005348:	2300      	movs	r3, #0
 800534a:	4618      	mov	r0, r3
 800534c:	4619      	mov	r1, r3
 800534e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005352:	f1bc 0f09 	cmp.w	ip, #9
 8005356:	d822      	bhi.n	800539e <_strtoull_l.constprop.0+0xc2>
 8005358:	4664      	mov	r4, ip
 800535a:	42a5      	cmp	r5, r4
 800535c:	dd30      	ble.n	80053c0 <_strtoull_l.constprop.0+0xe4>
 800535e:	2b00      	cmp	r3, #0
 8005360:	db2b      	blt.n	80053ba <_strtoull_l.constprop.0+0xde>
 8005362:	9b00      	ldr	r3, [sp, #0]
 8005364:	4283      	cmp	r3, r0
 8005366:	eb78 0301 	sbcs.w	r3, r8, r1
 800536a:	d326      	bcc.n	80053ba <_strtoull_l.constprop.0+0xde>
 800536c:	9b00      	ldr	r3, [sp, #0]
 800536e:	4588      	cmp	r8, r1
 8005370:	bf08      	it	eq
 8005372:	4283      	cmpeq	r3, r0
 8005374:	d101      	bne.n	800537a <_strtoull_l.constprop.0+0x9e>
 8005376:	42a2      	cmp	r2, r4
 8005378:	db1f      	blt.n	80053ba <_strtoull_l.constprop.0+0xde>
 800537a:	4369      	muls	r1, r5
 800537c:	fb00 110b 	mla	r1, r0, fp, r1
 8005380:	fba5 0300 	umull	r0, r3, r5, r0
 8005384:	4419      	add	r1, r3
 8005386:	1820      	adds	r0, r4, r0
 8005388:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800538c:	2301      	movs	r3, #1
 800538e:	f816 4b01 	ldrb.w	r4, [r6], #1
 8005392:	e7dc      	b.n	800534e <_strtoull_l.constprop.0+0x72>
 8005394:	2c2b      	cmp	r4, #43	; 0x2b
 8005396:	bf04      	itt	eq
 8005398:	7834      	ldrbeq	r4, [r6, #0]
 800539a:	1c9e      	addeq	r6, r3, #2
 800539c:	e7b2      	b.n	8005304 <_strtoull_l.constprop.0+0x28>
 800539e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80053a2:	f1bc 0f19 	cmp.w	ip, #25
 80053a6:	d801      	bhi.n	80053ac <_strtoull_l.constprop.0+0xd0>
 80053a8:	3c37      	subs	r4, #55	; 0x37
 80053aa:	e7d6      	b.n	800535a <_strtoull_l.constprop.0+0x7e>
 80053ac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80053b0:	f1bc 0f19 	cmp.w	ip, #25
 80053b4:	d804      	bhi.n	80053c0 <_strtoull_l.constprop.0+0xe4>
 80053b6:	3c57      	subs	r4, #87	; 0x57
 80053b8:	e7cf      	b.n	800535a <_strtoull_l.constprop.0+0x7e>
 80053ba:	f04f 33ff 	mov.w	r3, #4294967295
 80053be:	e7e6      	b.n	800538e <_strtoull_l.constprop.0+0xb2>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	da0b      	bge.n	80053dc <_strtoull_l.constprop.0+0x100>
 80053c4:	9a01      	ldr	r2, [sp, #4]
 80053c6:	2322      	movs	r3, #34	; 0x22
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	4601      	mov	r1, r0
 80053d0:	f1ba 0f00 	cmp.w	sl, #0
 80053d4:	d10a      	bne.n	80053ec <_strtoull_l.constprop.0+0x110>
 80053d6:	b003      	add	sp, #12
 80053d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053dc:	b117      	cbz	r7, 80053e4 <_strtoull_l.constprop.0+0x108>
 80053de:	4240      	negs	r0, r0
 80053e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80053e4:	f1ba 0f00 	cmp.w	sl, #0
 80053e8:	d0f5      	beq.n	80053d6 <_strtoull_l.constprop.0+0xfa>
 80053ea:	b10b      	cbz	r3, 80053f0 <_strtoull_l.constprop.0+0x114>
 80053ec:	f106 39ff 	add.w	r9, r6, #4294967295
 80053f0:	f8ca 9000 	str.w	r9, [sl]
 80053f4:	e7ef      	b.n	80053d6 <_strtoull_l.constprop.0+0xfa>
 80053f6:	2430      	movs	r4, #48	; 0x30
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	d191      	bne.n	8005320 <_strtoull_l.constprop.0+0x44>
 80053fc:	2508      	movs	r5, #8
 80053fe:	e78f      	b.n	8005320 <_strtoull_l.constprop.0+0x44>
 8005400:	2c30      	cmp	r4, #48	; 0x30
 8005402:	d085      	beq.n	8005310 <_strtoull_l.constprop.0+0x34>
 8005404:	250a      	movs	r5, #10
 8005406:	e78b      	b.n	8005320 <_strtoull_l.constprop.0+0x44>
 8005408:	0800774d 	.word	0x0800774d

0800540c <strtoull>:
 800540c:	4613      	mov	r3, r2
 800540e:	460a      	mov	r2, r1
 8005410:	4601      	mov	r1, r0
 8005412:	4802      	ldr	r0, [pc, #8]	; (800541c <strtoull+0x10>)
 8005414:	6800      	ldr	r0, [r0, #0]
 8005416:	f7ff bf61 	b.w	80052dc <_strtoull_l.constprop.0>
 800541a:	bf00      	nop
 800541c:	2000000c 	.word	0x2000000c

08005420 <_times_r>:
 8005420:	4608      	mov	r0, r1
 8005422:	f7fd b8ce 	b.w	80025c2 <_times>
	...

08005428 <__assert_func>:
 8005428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800542a:	4614      	mov	r4, r2
 800542c:	461a      	mov	r2, r3
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <__assert_func+0x2c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4605      	mov	r5, r0
 8005434:	68d8      	ldr	r0, [r3, #12]
 8005436:	b14c      	cbz	r4, 800544c <__assert_func+0x24>
 8005438:	4b07      	ldr	r3, [pc, #28]	; (8005458 <__assert_func+0x30>)
 800543a:	9100      	str	r1, [sp, #0]
 800543c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005440:	4906      	ldr	r1, [pc, #24]	; (800545c <__assert_func+0x34>)
 8005442:	462b      	mov	r3, r5
 8005444:	f000 f80e 	bl	8005464 <fiprintf>
 8005448:	f000 fcc4 	bl	8005dd4 <abort>
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <__assert_func+0x38>)
 800544e:	461c      	mov	r4, r3
 8005450:	e7f3      	b.n	800543a <__assert_func+0x12>
 8005452:	bf00      	nop
 8005454:	2000000c 	.word	0x2000000c
 8005458:	08007710 	.word	0x08007710
 800545c:	0800771d 	.word	0x0800771d
 8005460:	0800774b 	.word	0x0800774b

08005464 <fiprintf>:
 8005464:	b40e      	push	{r1, r2, r3}
 8005466:	b503      	push	{r0, r1, lr}
 8005468:	4601      	mov	r1, r0
 800546a:	ab03      	add	r3, sp, #12
 800546c:	4805      	ldr	r0, [pc, #20]	; (8005484 <fiprintf+0x20>)
 800546e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005472:	6800      	ldr	r0, [r0, #0]
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	f000 f919 	bl	80056ac <_vfiprintf_r>
 800547a:	b002      	add	sp, #8
 800547c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005480:	b003      	add	sp, #12
 8005482:	4770      	bx	lr
 8005484:	2000000c 	.word	0x2000000c

08005488 <malloc>:
 8005488:	4b02      	ldr	r3, [pc, #8]	; (8005494 <malloc+0xc>)
 800548a:	4601      	mov	r1, r0
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	f000 b86f 	b.w	8005570 <_malloc_r>
 8005492:	bf00      	nop
 8005494:	2000000c 	.word	0x2000000c

08005498 <_free_r>:
 8005498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800549a:	2900      	cmp	r1, #0
 800549c:	d044      	beq.n	8005528 <_free_r+0x90>
 800549e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054a2:	9001      	str	r0, [sp, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f1a1 0404 	sub.w	r4, r1, #4
 80054aa:	bfb8      	it	lt
 80054ac:	18e4      	addlt	r4, r4, r3
 80054ae:	f000 feb9 	bl	8006224 <__malloc_lock>
 80054b2:	4a1e      	ldr	r2, [pc, #120]	; (800552c <_free_r+0x94>)
 80054b4:	9801      	ldr	r0, [sp, #4]
 80054b6:	6813      	ldr	r3, [r2, #0]
 80054b8:	b933      	cbnz	r3, 80054c8 <_free_r+0x30>
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	6014      	str	r4, [r2, #0]
 80054be:	b003      	add	sp, #12
 80054c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054c4:	f000 beb4 	b.w	8006230 <__malloc_unlock>
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	d908      	bls.n	80054de <_free_r+0x46>
 80054cc:	6825      	ldr	r5, [r4, #0]
 80054ce:	1961      	adds	r1, r4, r5
 80054d0:	428b      	cmp	r3, r1
 80054d2:	bf01      	itttt	eq
 80054d4:	6819      	ldreq	r1, [r3, #0]
 80054d6:	685b      	ldreq	r3, [r3, #4]
 80054d8:	1949      	addeq	r1, r1, r5
 80054da:	6021      	streq	r1, [r4, #0]
 80054dc:	e7ed      	b.n	80054ba <_free_r+0x22>
 80054de:	461a      	mov	r2, r3
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	b10b      	cbz	r3, 80054e8 <_free_r+0x50>
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	d9fa      	bls.n	80054de <_free_r+0x46>
 80054e8:	6811      	ldr	r1, [r2, #0]
 80054ea:	1855      	adds	r5, r2, r1
 80054ec:	42a5      	cmp	r5, r4
 80054ee:	d10b      	bne.n	8005508 <_free_r+0x70>
 80054f0:	6824      	ldr	r4, [r4, #0]
 80054f2:	4421      	add	r1, r4
 80054f4:	1854      	adds	r4, r2, r1
 80054f6:	42a3      	cmp	r3, r4
 80054f8:	6011      	str	r1, [r2, #0]
 80054fa:	d1e0      	bne.n	80054be <_free_r+0x26>
 80054fc:	681c      	ldr	r4, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	6053      	str	r3, [r2, #4]
 8005502:	4421      	add	r1, r4
 8005504:	6011      	str	r1, [r2, #0]
 8005506:	e7da      	b.n	80054be <_free_r+0x26>
 8005508:	d902      	bls.n	8005510 <_free_r+0x78>
 800550a:	230c      	movs	r3, #12
 800550c:	6003      	str	r3, [r0, #0]
 800550e:	e7d6      	b.n	80054be <_free_r+0x26>
 8005510:	6825      	ldr	r5, [r4, #0]
 8005512:	1961      	adds	r1, r4, r5
 8005514:	428b      	cmp	r3, r1
 8005516:	bf04      	itt	eq
 8005518:	6819      	ldreq	r1, [r3, #0]
 800551a:	685b      	ldreq	r3, [r3, #4]
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	bf04      	itt	eq
 8005520:	1949      	addeq	r1, r1, r5
 8005522:	6021      	streq	r1, [r4, #0]
 8005524:	6054      	str	r4, [r2, #4]
 8005526:	e7ca      	b.n	80054be <_free_r+0x26>
 8005528:	b003      	add	sp, #12
 800552a:	bd30      	pop	{r4, r5, pc}
 800552c:	2000068c 	.word	0x2000068c

08005530 <sbrk_aligned>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4e0e      	ldr	r6, [pc, #56]	; (800556c <sbrk_aligned+0x3c>)
 8005534:	460c      	mov	r4, r1
 8005536:	6831      	ldr	r1, [r6, #0]
 8005538:	4605      	mov	r5, r0
 800553a:	b911      	cbnz	r1, 8005542 <sbrk_aligned+0x12>
 800553c:	f000 fb7a 	bl	8005c34 <_sbrk_r>
 8005540:	6030      	str	r0, [r6, #0]
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 fb75 	bl	8005c34 <_sbrk_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d00a      	beq.n	8005564 <sbrk_aligned+0x34>
 800554e:	1cc4      	adds	r4, r0, #3
 8005550:	f024 0403 	bic.w	r4, r4, #3
 8005554:	42a0      	cmp	r0, r4
 8005556:	d007      	beq.n	8005568 <sbrk_aligned+0x38>
 8005558:	1a21      	subs	r1, r4, r0
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fb6a 	bl	8005c34 <_sbrk_r>
 8005560:	3001      	adds	r0, #1
 8005562:	d101      	bne.n	8005568 <sbrk_aligned+0x38>
 8005564:	f04f 34ff 	mov.w	r4, #4294967295
 8005568:	4620      	mov	r0, r4
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	20000690 	.word	0x20000690

08005570 <_malloc_r>:
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	1ccd      	adds	r5, r1, #3
 8005576:	f025 0503 	bic.w	r5, r5, #3
 800557a:	3508      	adds	r5, #8
 800557c:	2d0c      	cmp	r5, #12
 800557e:	bf38      	it	cc
 8005580:	250c      	movcc	r5, #12
 8005582:	2d00      	cmp	r5, #0
 8005584:	4607      	mov	r7, r0
 8005586:	db01      	blt.n	800558c <_malloc_r+0x1c>
 8005588:	42a9      	cmp	r1, r5
 800558a:	d905      	bls.n	8005598 <_malloc_r+0x28>
 800558c:	230c      	movs	r3, #12
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	2600      	movs	r6, #0
 8005592:	4630      	mov	r0, r6
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005598:	4e2e      	ldr	r6, [pc, #184]	; (8005654 <_malloc_r+0xe4>)
 800559a:	f000 fe43 	bl	8006224 <__malloc_lock>
 800559e:	6833      	ldr	r3, [r6, #0]
 80055a0:	461c      	mov	r4, r3
 80055a2:	bb34      	cbnz	r4, 80055f2 <_malloc_r+0x82>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7ff ffc2 	bl	8005530 <sbrk_aligned>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	4604      	mov	r4, r0
 80055b0:	d14d      	bne.n	800564e <_malloc_r+0xde>
 80055b2:	6834      	ldr	r4, [r6, #0]
 80055b4:	4626      	mov	r6, r4
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	d140      	bne.n	800563c <_malloc_r+0xcc>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	4631      	mov	r1, r6
 80055be:	4638      	mov	r0, r7
 80055c0:	eb04 0803 	add.w	r8, r4, r3
 80055c4:	f000 fb36 	bl	8005c34 <_sbrk_r>
 80055c8:	4580      	cmp	r8, r0
 80055ca:	d13a      	bne.n	8005642 <_malloc_r+0xd2>
 80055cc:	6821      	ldr	r1, [r4, #0]
 80055ce:	3503      	adds	r5, #3
 80055d0:	1a6d      	subs	r5, r5, r1
 80055d2:	f025 0503 	bic.w	r5, r5, #3
 80055d6:	3508      	adds	r5, #8
 80055d8:	2d0c      	cmp	r5, #12
 80055da:	bf38      	it	cc
 80055dc:	250c      	movcc	r5, #12
 80055de:	4629      	mov	r1, r5
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff ffa5 	bl	8005530 <sbrk_aligned>
 80055e6:	3001      	adds	r0, #1
 80055e8:	d02b      	beq.n	8005642 <_malloc_r+0xd2>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	442b      	add	r3, r5
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	e00e      	b.n	8005610 <_malloc_r+0xa0>
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	1b52      	subs	r2, r2, r5
 80055f6:	d41e      	bmi.n	8005636 <_malloc_r+0xc6>
 80055f8:	2a0b      	cmp	r2, #11
 80055fa:	d916      	bls.n	800562a <_malloc_r+0xba>
 80055fc:	1961      	adds	r1, r4, r5
 80055fe:	42a3      	cmp	r3, r4
 8005600:	6025      	str	r5, [r4, #0]
 8005602:	bf18      	it	ne
 8005604:	6059      	strne	r1, [r3, #4]
 8005606:	6863      	ldr	r3, [r4, #4]
 8005608:	bf08      	it	eq
 800560a:	6031      	streq	r1, [r6, #0]
 800560c:	5162      	str	r2, [r4, r5]
 800560e:	604b      	str	r3, [r1, #4]
 8005610:	4638      	mov	r0, r7
 8005612:	f104 060b 	add.w	r6, r4, #11
 8005616:	f000 fe0b 	bl	8006230 <__malloc_unlock>
 800561a:	f026 0607 	bic.w	r6, r6, #7
 800561e:	1d23      	adds	r3, r4, #4
 8005620:	1af2      	subs	r2, r6, r3
 8005622:	d0b6      	beq.n	8005592 <_malloc_r+0x22>
 8005624:	1b9b      	subs	r3, r3, r6
 8005626:	50a3      	str	r3, [r4, r2]
 8005628:	e7b3      	b.n	8005592 <_malloc_r+0x22>
 800562a:	6862      	ldr	r2, [r4, #4]
 800562c:	42a3      	cmp	r3, r4
 800562e:	bf0c      	ite	eq
 8005630:	6032      	streq	r2, [r6, #0]
 8005632:	605a      	strne	r2, [r3, #4]
 8005634:	e7ec      	b.n	8005610 <_malloc_r+0xa0>
 8005636:	4623      	mov	r3, r4
 8005638:	6864      	ldr	r4, [r4, #4]
 800563a:	e7b2      	b.n	80055a2 <_malloc_r+0x32>
 800563c:	4634      	mov	r4, r6
 800563e:	6876      	ldr	r6, [r6, #4]
 8005640:	e7b9      	b.n	80055b6 <_malloc_r+0x46>
 8005642:	230c      	movs	r3, #12
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4638      	mov	r0, r7
 8005648:	f000 fdf2 	bl	8006230 <__malloc_unlock>
 800564c:	e7a1      	b.n	8005592 <_malloc_r+0x22>
 800564e:	6025      	str	r5, [r4, #0]
 8005650:	e7de      	b.n	8005610 <_malloc_r+0xa0>
 8005652:	bf00      	nop
 8005654:	2000068c 	.word	0x2000068c

08005658 <__sfputc_r>:
 8005658:	6893      	ldr	r3, [r2, #8]
 800565a:	3b01      	subs	r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	b410      	push	{r4}
 8005660:	6093      	str	r3, [r2, #8]
 8005662:	da08      	bge.n	8005676 <__sfputc_r+0x1e>
 8005664:	6994      	ldr	r4, [r2, #24]
 8005666:	42a3      	cmp	r3, r4
 8005668:	db01      	blt.n	800566e <__sfputc_r+0x16>
 800566a:	290a      	cmp	r1, #10
 800566c:	d103      	bne.n	8005676 <__sfputc_r+0x1e>
 800566e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005672:	f000 baef 	b.w	8005c54 <__swbuf_r>
 8005676:	6813      	ldr	r3, [r2, #0]
 8005678:	1c58      	adds	r0, r3, #1
 800567a:	6010      	str	r0, [r2, #0]
 800567c:	7019      	strb	r1, [r3, #0]
 800567e:	4608      	mov	r0, r1
 8005680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005684:	4770      	bx	lr

08005686 <__sfputs_r>:
 8005686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005688:	4606      	mov	r6, r0
 800568a:	460f      	mov	r7, r1
 800568c:	4614      	mov	r4, r2
 800568e:	18d5      	adds	r5, r2, r3
 8005690:	42ac      	cmp	r4, r5
 8005692:	d101      	bne.n	8005698 <__sfputs_r+0x12>
 8005694:	2000      	movs	r0, #0
 8005696:	e007      	b.n	80056a8 <__sfputs_r+0x22>
 8005698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569c:	463a      	mov	r2, r7
 800569e:	4630      	mov	r0, r6
 80056a0:	f7ff ffda 	bl	8005658 <__sfputc_r>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d1f3      	bne.n	8005690 <__sfputs_r+0xa>
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056ac <_vfiprintf_r>:
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	460d      	mov	r5, r1
 80056b2:	b09d      	sub	sp, #116	; 0x74
 80056b4:	4614      	mov	r4, r2
 80056b6:	4698      	mov	r8, r3
 80056b8:	4606      	mov	r6, r0
 80056ba:	b118      	cbz	r0, 80056c4 <_vfiprintf_r+0x18>
 80056bc:	6983      	ldr	r3, [r0, #24]
 80056be:	b90b      	cbnz	r3, 80056c4 <_vfiprintf_r+0x18>
 80056c0:	f000 fcaa 	bl	8006018 <__sinit>
 80056c4:	4b89      	ldr	r3, [pc, #548]	; (80058ec <_vfiprintf_r+0x240>)
 80056c6:	429d      	cmp	r5, r3
 80056c8:	d11b      	bne.n	8005702 <_vfiprintf_r+0x56>
 80056ca:	6875      	ldr	r5, [r6, #4]
 80056cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056ce:	07d9      	lsls	r1, r3, #31
 80056d0:	d405      	bmi.n	80056de <_vfiprintf_r+0x32>
 80056d2:	89ab      	ldrh	r3, [r5, #12]
 80056d4:	059a      	lsls	r2, r3, #22
 80056d6:	d402      	bmi.n	80056de <_vfiprintf_r+0x32>
 80056d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056da:	f000 fd3b 	bl	8006154 <__retarget_lock_acquire_recursive>
 80056de:	89ab      	ldrh	r3, [r5, #12]
 80056e0:	071b      	lsls	r3, r3, #28
 80056e2:	d501      	bpl.n	80056e8 <_vfiprintf_r+0x3c>
 80056e4:	692b      	ldr	r3, [r5, #16]
 80056e6:	b9eb      	cbnz	r3, 8005724 <_vfiprintf_r+0x78>
 80056e8:	4629      	mov	r1, r5
 80056ea:	4630      	mov	r0, r6
 80056ec:	f000 fb04 	bl	8005cf8 <__swsetup_r>
 80056f0:	b1c0      	cbz	r0, 8005724 <_vfiprintf_r+0x78>
 80056f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056f4:	07dc      	lsls	r4, r3, #31
 80056f6:	d50e      	bpl.n	8005716 <_vfiprintf_r+0x6a>
 80056f8:	f04f 30ff 	mov.w	r0, #4294967295
 80056fc:	b01d      	add	sp, #116	; 0x74
 80056fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005702:	4b7b      	ldr	r3, [pc, #492]	; (80058f0 <_vfiprintf_r+0x244>)
 8005704:	429d      	cmp	r5, r3
 8005706:	d101      	bne.n	800570c <_vfiprintf_r+0x60>
 8005708:	68b5      	ldr	r5, [r6, #8]
 800570a:	e7df      	b.n	80056cc <_vfiprintf_r+0x20>
 800570c:	4b79      	ldr	r3, [pc, #484]	; (80058f4 <_vfiprintf_r+0x248>)
 800570e:	429d      	cmp	r5, r3
 8005710:	bf08      	it	eq
 8005712:	68f5      	ldreq	r5, [r6, #12]
 8005714:	e7da      	b.n	80056cc <_vfiprintf_r+0x20>
 8005716:	89ab      	ldrh	r3, [r5, #12]
 8005718:	0598      	lsls	r0, r3, #22
 800571a:	d4ed      	bmi.n	80056f8 <_vfiprintf_r+0x4c>
 800571c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800571e:	f000 fd1a 	bl	8006156 <__retarget_lock_release_recursive>
 8005722:	e7e9      	b.n	80056f8 <_vfiprintf_r+0x4c>
 8005724:	2300      	movs	r3, #0
 8005726:	9309      	str	r3, [sp, #36]	; 0x24
 8005728:	2320      	movs	r3, #32
 800572a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800572e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005732:	2330      	movs	r3, #48	; 0x30
 8005734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058f8 <_vfiprintf_r+0x24c>
 8005738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800573c:	f04f 0901 	mov.w	r9, #1
 8005740:	4623      	mov	r3, r4
 8005742:	469a      	mov	sl, r3
 8005744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005748:	b10a      	cbz	r2, 800574e <_vfiprintf_r+0xa2>
 800574a:	2a25      	cmp	r2, #37	; 0x25
 800574c:	d1f9      	bne.n	8005742 <_vfiprintf_r+0x96>
 800574e:	ebba 0b04 	subs.w	fp, sl, r4
 8005752:	d00b      	beq.n	800576c <_vfiprintf_r+0xc0>
 8005754:	465b      	mov	r3, fp
 8005756:	4622      	mov	r2, r4
 8005758:	4629      	mov	r1, r5
 800575a:	4630      	mov	r0, r6
 800575c:	f7ff ff93 	bl	8005686 <__sfputs_r>
 8005760:	3001      	adds	r0, #1
 8005762:	f000 80aa 	beq.w	80058ba <_vfiprintf_r+0x20e>
 8005766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005768:	445a      	add	r2, fp
 800576a:	9209      	str	r2, [sp, #36]	; 0x24
 800576c:	f89a 3000 	ldrb.w	r3, [sl]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80a2 	beq.w	80058ba <_vfiprintf_r+0x20e>
 8005776:	2300      	movs	r3, #0
 8005778:	f04f 32ff 	mov.w	r2, #4294967295
 800577c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005780:	f10a 0a01 	add.w	sl, sl, #1
 8005784:	9304      	str	r3, [sp, #16]
 8005786:	9307      	str	r3, [sp, #28]
 8005788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800578c:	931a      	str	r3, [sp, #104]	; 0x68
 800578e:	4654      	mov	r4, sl
 8005790:	2205      	movs	r2, #5
 8005792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005796:	4858      	ldr	r0, [pc, #352]	; (80058f8 <_vfiprintf_r+0x24c>)
 8005798:	f7fa fd32 	bl	8000200 <memchr>
 800579c:	9a04      	ldr	r2, [sp, #16]
 800579e:	b9d8      	cbnz	r0, 80057d8 <_vfiprintf_r+0x12c>
 80057a0:	06d1      	lsls	r1, r2, #27
 80057a2:	bf44      	itt	mi
 80057a4:	2320      	movmi	r3, #32
 80057a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057aa:	0713      	lsls	r3, r2, #28
 80057ac:	bf44      	itt	mi
 80057ae:	232b      	movmi	r3, #43	; 0x2b
 80057b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b4:	f89a 3000 	ldrb.w	r3, [sl]
 80057b8:	2b2a      	cmp	r3, #42	; 0x2a
 80057ba:	d015      	beq.n	80057e8 <_vfiprintf_r+0x13c>
 80057bc:	9a07      	ldr	r2, [sp, #28]
 80057be:	4654      	mov	r4, sl
 80057c0:	2000      	movs	r0, #0
 80057c2:	f04f 0c0a 	mov.w	ip, #10
 80057c6:	4621      	mov	r1, r4
 80057c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057cc:	3b30      	subs	r3, #48	; 0x30
 80057ce:	2b09      	cmp	r3, #9
 80057d0:	d94e      	bls.n	8005870 <_vfiprintf_r+0x1c4>
 80057d2:	b1b0      	cbz	r0, 8005802 <_vfiprintf_r+0x156>
 80057d4:	9207      	str	r2, [sp, #28]
 80057d6:	e014      	b.n	8005802 <_vfiprintf_r+0x156>
 80057d8:	eba0 0308 	sub.w	r3, r0, r8
 80057dc:	fa09 f303 	lsl.w	r3, r9, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	46a2      	mov	sl, r4
 80057e6:	e7d2      	b.n	800578e <_vfiprintf_r+0xe2>
 80057e8:	9b03      	ldr	r3, [sp, #12]
 80057ea:	1d19      	adds	r1, r3, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	9103      	str	r1, [sp, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bfbb      	ittet	lt
 80057f4:	425b      	neglt	r3, r3
 80057f6:	f042 0202 	orrlt.w	r2, r2, #2
 80057fa:	9307      	strge	r3, [sp, #28]
 80057fc:	9307      	strlt	r3, [sp, #28]
 80057fe:	bfb8      	it	lt
 8005800:	9204      	strlt	r2, [sp, #16]
 8005802:	7823      	ldrb	r3, [r4, #0]
 8005804:	2b2e      	cmp	r3, #46	; 0x2e
 8005806:	d10c      	bne.n	8005822 <_vfiprintf_r+0x176>
 8005808:	7863      	ldrb	r3, [r4, #1]
 800580a:	2b2a      	cmp	r3, #42	; 0x2a
 800580c:	d135      	bne.n	800587a <_vfiprintf_r+0x1ce>
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	1d1a      	adds	r2, r3, #4
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	9203      	str	r2, [sp, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	bfb8      	it	lt
 800581a:	f04f 33ff 	movlt.w	r3, #4294967295
 800581e:	3402      	adds	r4, #2
 8005820:	9305      	str	r3, [sp, #20]
 8005822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005908 <_vfiprintf_r+0x25c>
 8005826:	7821      	ldrb	r1, [r4, #0]
 8005828:	2203      	movs	r2, #3
 800582a:	4650      	mov	r0, sl
 800582c:	f7fa fce8 	bl	8000200 <memchr>
 8005830:	b140      	cbz	r0, 8005844 <_vfiprintf_r+0x198>
 8005832:	2340      	movs	r3, #64	; 0x40
 8005834:	eba0 000a 	sub.w	r0, r0, sl
 8005838:	fa03 f000 	lsl.w	r0, r3, r0
 800583c:	9b04      	ldr	r3, [sp, #16]
 800583e:	4303      	orrs	r3, r0
 8005840:	3401      	adds	r4, #1
 8005842:	9304      	str	r3, [sp, #16]
 8005844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005848:	482c      	ldr	r0, [pc, #176]	; (80058fc <_vfiprintf_r+0x250>)
 800584a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800584e:	2206      	movs	r2, #6
 8005850:	f7fa fcd6 	bl	8000200 <memchr>
 8005854:	2800      	cmp	r0, #0
 8005856:	d03f      	beq.n	80058d8 <_vfiprintf_r+0x22c>
 8005858:	4b29      	ldr	r3, [pc, #164]	; (8005900 <_vfiprintf_r+0x254>)
 800585a:	bb1b      	cbnz	r3, 80058a4 <_vfiprintf_r+0x1f8>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	3307      	adds	r3, #7
 8005860:	f023 0307 	bic.w	r3, r3, #7
 8005864:	3308      	adds	r3, #8
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800586a:	443b      	add	r3, r7
 800586c:	9309      	str	r3, [sp, #36]	; 0x24
 800586e:	e767      	b.n	8005740 <_vfiprintf_r+0x94>
 8005870:	fb0c 3202 	mla	r2, ip, r2, r3
 8005874:	460c      	mov	r4, r1
 8005876:	2001      	movs	r0, #1
 8005878:	e7a5      	b.n	80057c6 <_vfiprintf_r+0x11a>
 800587a:	2300      	movs	r3, #0
 800587c:	3401      	adds	r4, #1
 800587e:	9305      	str	r3, [sp, #20]
 8005880:	4619      	mov	r1, r3
 8005882:	f04f 0c0a 	mov.w	ip, #10
 8005886:	4620      	mov	r0, r4
 8005888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800588c:	3a30      	subs	r2, #48	; 0x30
 800588e:	2a09      	cmp	r2, #9
 8005890:	d903      	bls.n	800589a <_vfiprintf_r+0x1ee>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0c5      	beq.n	8005822 <_vfiprintf_r+0x176>
 8005896:	9105      	str	r1, [sp, #20]
 8005898:	e7c3      	b.n	8005822 <_vfiprintf_r+0x176>
 800589a:	fb0c 2101 	mla	r1, ip, r1, r2
 800589e:	4604      	mov	r4, r0
 80058a0:	2301      	movs	r3, #1
 80058a2:	e7f0      	b.n	8005886 <_vfiprintf_r+0x1da>
 80058a4:	ab03      	add	r3, sp, #12
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	462a      	mov	r2, r5
 80058aa:	4b16      	ldr	r3, [pc, #88]	; (8005904 <_vfiprintf_r+0x258>)
 80058ac:	a904      	add	r1, sp, #16
 80058ae:	4630      	mov	r0, r6
 80058b0:	f3af 8000 	nop.w
 80058b4:	4607      	mov	r7, r0
 80058b6:	1c78      	adds	r0, r7, #1
 80058b8:	d1d6      	bne.n	8005868 <_vfiprintf_r+0x1bc>
 80058ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058bc:	07d9      	lsls	r1, r3, #31
 80058be:	d405      	bmi.n	80058cc <_vfiprintf_r+0x220>
 80058c0:	89ab      	ldrh	r3, [r5, #12]
 80058c2:	059a      	lsls	r2, r3, #22
 80058c4:	d402      	bmi.n	80058cc <_vfiprintf_r+0x220>
 80058c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058c8:	f000 fc45 	bl	8006156 <__retarget_lock_release_recursive>
 80058cc:	89ab      	ldrh	r3, [r5, #12]
 80058ce:	065b      	lsls	r3, r3, #25
 80058d0:	f53f af12 	bmi.w	80056f8 <_vfiprintf_r+0x4c>
 80058d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058d6:	e711      	b.n	80056fc <_vfiprintf_r+0x50>
 80058d8:	ab03      	add	r3, sp, #12
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	462a      	mov	r2, r5
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <_vfiprintf_r+0x258>)
 80058e0:	a904      	add	r1, sp, #16
 80058e2:	4630      	mov	r0, r6
 80058e4:	f000 f880 	bl	80059e8 <_printf_i>
 80058e8:	e7e4      	b.n	80058b4 <_vfiprintf_r+0x208>
 80058ea:	bf00      	nop
 80058ec:	080078a0 	.word	0x080078a0
 80058f0:	080078c0 	.word	0x080078c0
 80058f4:	08007880 	.word	0x08007880
 80058f8:	0800784d 	.word	0x0800784d
 80058fc:	08007857 	.word	0x08007857
 8005900:	00000000 	.word	0x00000000
 8005904:	08005687 	.word	0x08005687
 8005908:	08007853 	.word	0x08007853

0800590c <_printf_common>:
 800590c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005910:	4616      	mov	r6, r2
 8005912:	4699      	mov	r9, r3
 8005914:	688a      	ldr	r2, [r1, #8]
 8005916:	690b      	ldr	r3, [r1, #16]
 8005918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800591c:	4293      	cmp	r3, r2
 800591e:	bfb8      	it	lt
 8005920:	4613      	movlt	r3, r2
 8005922:	6033      	str	r3, [r6, #0]
 8005924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005928:	4607      	mov	r7, r0
 800592a:	460c      	mov	r4, r1
 800592c:	b10a      	cbz	r2, 8005932 <_printf_common+0x26>
 800592e:	3301      	adds	r3, #1
 8005930:	6033      	str	r3, [r6, #0]
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	0699      	lsls	r1, r3, #26
 8005936:	bf42      	ittt	mi
 8005938:	6833      	ldrmi	r3, [r6, #0]
 800593a:	3302      	addmi	r3, #2
 800593c:	6033      	strmi	r3, [r6, #0]
 800593e:	6825      	ldr	r5, [r4, #0]
 8005940:	f015 0506 	ands.w	r5, r5, #6
 8005944:	d106      	bne.n	8005954 <_printf_common+0x48>
 8005946:	f104 0a19 	add.w	sl, r4, #25
 800594a:	68e3      	ldr	r3, [r4, #12]
 800594c:	6832      	ldr	r2, [r6, #0]
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	42ab      	cmp	r3, r5
 8005952:	dc26      	bgt.n	80059a2 <_printf_common+0x96>
 8005954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005958:	1e13      	subs	r3, r2, #0
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	bf18      	it	ne
 800595e:	2301      	movne	r3, #1
 8005960:	0692      	lsls	r2, r2, #26
 8005962:	d42b      	bmi.n	80059bc <_printf_common+0xb0>
 8005964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005968:	4649      	mov	r1, r9
 800596a:	4638      	mov	r0, r7
 800596c:	47c0      	blx	r8
 800596e:	3001      	adds	r0, #1
 8005970:	d01e      	beq.n	80059b0 <_printf_common+0xa4>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	68e5      	ldr	r5, [r4, #12]
 8005976:	6832      	ldr	r2, [r6, #0]
 8005978:	f003 0306 	and.w	r3, r3, #6
 800597c:	2b04      	cmp	r3, #4
 800597e:	bf08      	it	eq
 8005980:	1aad      	subeq	r5, r5, r2
 8005982:	68a3      	ldr	r3, [r4, #8]
 8005984:	6922      	ldr	r2, [r4, #16]
 8005986:	bf0c      	ite	eq
 8005988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800598c:	2500      	movne	r5, #0
 800598e:	4293      	cmp	r3, r2
 8005990:	bfc4      	itt	gt
 8005992:	1a9b      	subgt	r3, r3, r2
 8005994:	18ed      	addgt	r5, r5, r3
 8005996:	2600      	movs	r6, #0
 8005998:	341a      	adds	r4, #26
 800599a:	42b5      	cmp	r5, r6
 800599c:	d11a      	bne.n	80059d4 <_printf_common+0xc8>
 800599e:	2000      	movs	r0, #0
 80059a0:	e008      	b.n	80059b4 <_printf_common+0xa8>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4652      	mov	r2, sl
 80059a6:	4649      	mov	r1, r9
 80059a8:	4638      	mov	r0, r7
 80059aa:	47c0      	blx	r8
 80059ac:	3001      	adds	r0, #1
 80059ae:	d103      	bne.n	80059b8 <_printf_common+0xac>
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295
 80059b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b8:	3501      	adds	r5, #1
 80059ba:	e7c6      	b.n	800594a <_printf_common+0x3e>
 80059bc:	18e1      	adds	r1, r4, r3
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	2030      	movs	r0, #48	; 0x30
 80059c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059c6:	4422      	add	r2, r4
 80059c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059d0:	3302      	adds	r3, #2
 80059d2:	e7c7      	b.n	8005964 <_printf_common+0x58>
 80059d4:	2301      	movs	r3, #1
 80059d6:	4622      	mov	r2, r4
 80059d8:	4649      	mov	r1, r9
 80059da:	4638      	mov	r0, r7
 80059dc:	47c0      	blx	r8
 80059de:	3001      	adds	r0, #1
 80059e0:	d0e6      	beq.n	80059b0 <_printf_common+0xa4>
 80059e2:	3601      	adds	r6, #1
 80059e4:	e7d9      	b.n	800599a <_printf_common+0x8e>
	...

080059e8 <_printf_i>:
 80059e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	7e0f      	ldrb	r7, [r1, #24]
 80059ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059f0:	2f78      	cmp	r7, #120	; 0x78
 80059f2:	4691      	mov	r9, r2
 80059f4:	4680      	mov	r8, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	469a      	mov	sl, r3
 80059fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059fe:	d807      	bhi.n	8005a10 <_printf_i+0x28>
 8005a00:	2f62      	cmp	r7, #98	; 0x62
 8005a02:	d80a      	bhi.n	8005a1a <_printf_i+0x32>
 8005a04:	2f00      	cmp	r7, #0
 8005a06:	f000 80d8 	beq.w	8005bba <_printf_i+0x1d2>
 8005a0a:	2f58      	cmp	r7, #88	; 0x58
 8005a0c:	f000 80a3 	beq.w	8005b56 <_printf_i+0x16e>
 8005a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a18:	e03a      	b.n	8005a90 <_printf_i+0xa8>
 8005a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a1e:	2b15      	cmp	r3, #21
 8005a20:	d8f6      	bhi.n	8005a10 <_printf_i+0x28>
 8005a22:	a101      	add	r1, pc, #4	; (adr r1, 8005a28 <_printf_i+0x40>)
 8005a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a28:	08005a81 	.word	0x08005a81
 8005a2c:	08005a95 	.word	0x08005a95
 8005a30:	08005a11 	.word	0x08005a11
 8005a34:	08005a11 	.word	0x08005a11
 8005a38:	08005a11 	.word	0x08005a11
 8005a3c:	08005a11 	.word	0x08005a11
 8005a40:	08005a95 	.word	0x08005a95
 8005a44:	08005a11 	.word	0x08005a11
 8005a48:	08005a11 	.word	0x08005a11
 8005a4c:	08005a11 	.word	0x08005a11
 8005a50:	08005a11 	.word	0x08005a11
 8005a54:	08005ba1 	.word	0x08005ba1
 8005a58:	08005ac5 	.word	0x08005ac5
 8005a5c:	08005b83 	.word	0x08005b83
 8005a60:	08005a11 	.word	0x08005a11
 8005a64:	08005a11 	.word	0x08005a11
 8005a68:	08005bc3 	.word	0x08005bc3
 8005a6c:	08005a11 	.word	0x08005a11
 8005a70:	08005ac5 	.word	0x08005ac5
 8005a74:	08005a11 	.word	0x08005a11
 8005a78:	08005a11 	.word	0x08005a11
 8005a7c:	08005b8b 	.word	0x08005b8b
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	1d1a      	adds	r2, r3, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	602a      	str	r2, [r5, #0]
 8005a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0a3      	b.n	8005bdc <_printf_i+0x1f4>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	6829      	ldr	r1, [r5, #0]
 8005a98:	0606      	lsls	r6, r0, #24
 8005a9a:	f101 0304 	add.w	r3, r1, #4
 8005a9e:	d50a      	bpl.n	8005ab6 <_printf_i+0xce>
 8005aa0:	680e      	ldr	r6, [r1, #0]
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	2e00      	cmp	r6, #0
 8005aa6:	da03      	bge.n	8005ab0 <_printf_i+0xc8>
 8005aa8:	232d      	movs	r3, #45	; 0x2d
 8005aaa:	4276      	negs	r6, r6
 8005aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab0:	485e      	ldr	r0, [pc, #376]	; (8005c2c <_printf_i+0x244>)
 8005ab2:	230a      	movs	r3, #10
 8005ab4:	e019      	b.n	8005aea <_printf_i+0x102>
 8005ab6:	680e      	ldr	r6, [r1, #0]
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005abe:	bf18      	it	ne
 8005ac0:	b236      	sxthne	r6, r6
 8005ac2:	e7ef      	b.n	8005aa4 <_printf_i+0xbc>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	6820      	ldr	r0, [r4, #0]
 8005ac8:	1d19      	adds	r1, r3, #4
 8005aca:	6029      	str	r1, [r5, #0]
 8005acc:	0601      	lsls	r1, r0, #24
 8005ace:	d501      	bpl.n	8005ad4 <_printf_i+0xec>
 8005ad0:	681e      	ldr	r6, [r3, #0]
 8005ad2:	e002      	b.n	8005ada <_printf_i+0xf2>
 8005ad4:	0646      	lsls	r6, r0, #25
 8005ad6:	d5fb      	bpl.n	8005ad0 <_printf_i+0xe8>
 8005ad8:	881e      	ldrh	r6, [r3, #0]
 8005ada:	4854      	ldr	r0, [pc, #336]	; (8005c2c <_printf_i+0x244>)
 8005adc:	2f6f      	cmp	r7, #111	; 0x6f
 8005ade:	bf0c      	ite	eq
 8005ae0:	2308      	moveq	r3, #8
 8005ae2:	230a      	movne	r3, #10
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aea:	6865      	ldr	r5, [r4, #4]
 8005aec:	60a5      	str	r5, [r4, #8]
 8005aee:	2d00      	cmp	r5, #0
 8005af0:	bfa2      	ittt	ge
 8005af2:	6821      	ldrge	r1, [r4, #0]
 8005af4:	f021 0104 	bicge.w	r1, r1, #4
 8005af8:	6021      	strge	r1, [r4, #0]
 8005afa:	b90e      	cbnz	r6, 8005b00 <_printf_i+0x118>
 8005afc:	2d00      	cmp	r5, #0
 8005afe:	d04d      	beq.n	8005b9c <_printf_i+0x1b4>
 8005b00:	4615      	mov	r5, r2
 8005b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b06:	fb03 6711 	mls	r7, r3, r1, r6
 8005b0a:	5dc7      	ldrb	r7, [r0, r7]
 8005b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b10:	4637      	mov	r7, r6
 8005b12:	42bb      	cmp	r3, r7
 8005b14:	460e      	mov	r6, r1
 8005b16:	d9f4      	bls.n	8005b02 <_printf_i+0x11a>
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d10b      	bne.n	8005b34 <_printf_i+0x14c>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	07de      	lsls	r6, r3, #31
 8005b20:	d508      	bpl.n	8005b34 <_printf_i+0x14c>
 8005b22:	6923      	ldr	r3, [r4, #16]
 8005b24:	6861      	ldr	r1, [r4, #4]
 8005b26:	4299      	cmp	r1, r3
 8005b28:	bfde      	ittt	le
 8005b2a:	2330      	movle	r3, #48	; 0x30
 8005b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b34:	1b52      	subs	r2, r2, r5
 8005b36:	6122      	str	r2, [r4, #16]
 8005b38:	f8cd a000 	str.w	sl, [sp]
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	aa03      	add	r2, sp, #12
 8005b40:	4621      	mov	r1, r4
 8005b42:	4640      	mov	r0, r8
 8005b44:	f7ff fee2 	bl	800590c <_printf_common>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d14c      	bne.n	8005be6 <_printf_i+0x1fe>
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	b004      	add	sp, #16
 8005b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b56:	4835      	ldr	r0, [pc, #212]	; (8005c2c <_printf_i+0x244>)
 8005b58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b5c:	6829      	ldr	r1, [r5, #0]
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b64:	6029      	str	r1, [r5, #0]
 8005b66:	061d      	lsls	r5, r3, #24
 8005b68:	d514      	bpl.n	8005b94 <_printf_i+0x1ac>
 8005b6a:	07df      	lsls	r7, r3, #31
 8005b6c:	bf44      	itt	mi
 8005b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b72:	6023      	strmi	r3, [r4, #0]
 8005b74:	b91e      	cbnz	r6, 8005b7e <_printf_i+0x196>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	f023 0320 	bic.w	r3, r3, #32
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	2310      	movs	r3, #16
 8005b80:	e7b0      	b.n	8005ae4 <_printf_i+0xfc>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	f043 0320 	orr.w	r3, r3, #32
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	2378      	movs	r3, #120	; 0x78
 8005b8c:	4828      	ldr	r0, [pc, #160]	; (8005c30 <_printf_i+0x248>)
 8005b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b92:	e7e3      	b.n	8005b5c <_printf_i+0x174>
 8005b94:	0659      	lsls	r1, r3, #25
 8005b96:	bf48      	it	mi
 8005b98:	b2b6      	uxthmi	r6, r6
 8005b9a:	e7e6      	b.n	8005b6a <_printf_i+0x182>
 8005b9c:	4615      	mov	r5, r2
 8005b9e:	e7bb      	b.n	8005b18 <_printf_i+0x130>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	6826      	ldr	r6, [r4, #0]
 8005ba4:	6961      	ldr	r1, [r4, #20]
 8005ba6:	1d18      	adds	r0, r3, #4
 8005ba8:	6028      	str	r0, [r5, #0]
 8005baa:	0635      	lsls	r5, r6, #24
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	d501      	bpl.n	8005bb4 <_printf_i+0x1cc>
 8005bb0:	6019      	str	r1, [r3, #0]
 8005bb2:	e002      	b.n	8005bba <_printf_i+0x1d2>
 8005bb4:	0670      	lsls	r0, r6, #25
 8005bb6:	d5fb      	bpl.n	8005bb0 <_printf_i+0x1c8>
 8005bb8:	8019      	strh	r1, [r3, #0]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	6123      	str	r3, [r4, #16]
 8005bbe:	4615      	mov	r5, r2
 8005bc0:	e7ba      	b.n	8005b38 <_printf_i+0x150>
 8005bc2:	682b      	ldr	r3, [r5, #0]
 8005bc4:	1d1a      	adds	r2, r3, #4
 8005bc6:	602a      	str	r2, [r5, #0]
 8005bc8:	681d      	ldr	r5, [r3, #0]
 8005bca:	6862      	ldr	r2, [r4, #4]
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f7fa fb16 	bl	8000200 <memchr>
 8005bd4:	b108      	cbz	r0, 8005bda <_printf_i+0x1f2>
 8005bd6:	1b40      	subs	r0, r0, r5
 8005bd8:	6060      	str	r0, [r4, #4]
 8005bda:	6863      	ldr	r3, [r4, #4]
 8005bdc:	6123      	str	r3, [r4, #16]
 8005bde:	2300      	movs	r3, #0
 8005be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005be4:	e7a8      	b.n	8005b38 <_printf_i+0x150>
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	462a      	mov	r2, r5
 8005bea:	4649      	mov	r1, r9
 8005bec:	4640      	mov	r0, r8
 8005bee:	47d0      	blx	sl
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d0ab      	beq.n	8005b4c <_printf_i+0x164>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	079b      	lsls	r3, r3, #30
 8005bf8:	d413      	bmi.n	8005c22 <_printf_i+0x23a>
 8005bfa:	68e0      	ldr	r0, [r4, #12]
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	4298      	cmp	r0, r3
 8005c00:	bfb8      	it	lt
 8005c02:	4618      	movlt	r0, r3
 8005c04:	e7a4      	b.n	8005b50 <_printf_i+0x168>
 8005c06:	2301      	movs	r3, #1
 8005c08:	4632      	mov	r2, r6
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	47d0      	blx	sl
 8005c10:	3001      	adds	r0, #1
 8005c12:	d09b      	beq.n	8005b4c <_printf_i+0x164>
 8005c14:	3501      	adds	r5, #1
 8005c16:	68e3      	ldr	r3, [r4, #12]
 8005c18:	9903      	ldr	r1, [sp, #12]
 8005c1a:	1a5b      	subs	r3, r3, r1
 8005c1c:	42ab      	cmp	r3, r5
 8005c1e:	dcf2      	bgt.n	8005c06 <_printf_i+0x21e>
 8005c20:	e7eb      	b.n	8005bfa <_printf_i+0x212>
 8005c22:	2500      	movs	r5, #0
 8005c24:	f104 0619 	add.w	r6, r4, #25
 8005c28:	e7f5      	b.n	8005c16 <_printf_i+0x22e>
 8005c2a:	bf00      	nop
 8005c2c:	0800785e 	.word	0x0800785e
 8005c30:	0800786f 	.word	0x0800786f

08005c34 <_sbrk_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d06      	ldr	r5, [pc, #24]	; (8005c50 <_sbrk_r+0x1c>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fc fccc 	bl	80025dc <_sbrk>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_sbrk_r+0x1a>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_sbrk_r+0x1a>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	20000698 	.word	0x20000698

08005c54 <__swbuf_r>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	460e      	mov	r6, r1
 8005c58:	4614      	mov	r4, r2
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	b118      	cbz	r0, 8005c66 <__swbuf_r+0x12>
 8005c5e:	6983      	ldr	r3, [r0, #24]
 8005c60:	b90b      	cbnz	r3, 8005c66 <__swbuf_r+0x12>
 8005c62:	f000 f9d9 	bl	8006018 <__sinit>
 8005c66:	4b21      	ldr	r3, [pc, #132]	; (8005cec <__swbuf_r+0x98>)
 8005c68:	429c      	cmp	r4, r3
 8005c6a:	d12b      	bne.n	8005cc4 <__swbuf_r+0x70>
 8005c6c:	686c      	ldr	r4, [r5, #4]
 8005c6e:	69a3      	ldr	r3, [r4, #24]
 8005c70:	60a3      	str	r3, [r4, #8]
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	071a      	lsls	r2, r3, #28
 8005c76:	d52f      	bpl.n	8005cd8 <__swbuf_r+0x84>
 8005c78:	6923      	ldr	r3, [r4, #16]
 8005c7a:	b36b      	cbz	r3, 8005cd8 <__swbuf_r+0x84>
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	6820      	ldr	r0, [r4, #0]
 8005c80:	1ac0      	subs	r0, r0, r3
 8005c82:	6963      	ldr	r3, [r4, #20]
 8005c84:	b2f6      	uxtb	r6, r6
 8005c86:	4283      	cmp	r3, r0
 8005c88:	4637      	mov	r7, r6
 8005c8a:	dc04      	bgt.n	8005c96 <__swbuf_r+0x42>
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 f92e 	bl	8005ef0 <_fflush_r>
 8005c94:	bb30      	cbnz	r0, 8005ce4 <__swbuf_r+0x90>
 8005c96:	68a3      	ldr	r3, [r4, #8]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	60a3      	str	r3, [r4, #8]
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	6022      	str	r2, [r4, #0]
 8005ca2:	701e      	strb	r6, [r3, #0]
 8005ca4:	6963      	ldr	r3, [r4, #20]
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	4283      	cmp	r3, r0
 8005caa:	d004      	beq.n	8005cb6 <__swbuf_r+0x62>
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	07db      	lsls	r3, r3, #31
 8005cb0:	d506      	bpl.n	8005cc0 <__swbuf_r+0x6c>
 8005cb2:	2e0a      	cmp	r6, #10
 8005cb4:	d104      	bne.n	8005cc0 <__swbuf_r+0x6c>
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f000 f919 	bl	8005ef0 <_fflush_r>
 8005cbe:	b988      	cbnz	r0, 8005ce4 <__swbuf_r+0x90>
 8005cc0:	4638      	mov	r0, r7
 8005cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <__swbuf_r+0x9c>)
 8005cc6:	429c      	cmp	r4, r3
 8005cc8:	d101      	bne.n	8005cce <__swbuf_r+0x7a>
 8005cca:	68ac      	ldr	r4, [r5, #8]
 8005ccc:	e7cf      	b.n	8005c6e <__swbuf_r+0x1a>
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <__swbuf_r+0xa0>)
 8005cd0:	429c      	cmp	r4, r3
 8005cd2:	bf08      	it	eq
 8005cd4:	68ec      	ldreq	r4, [r5, #12]
 8005cd6:	e7ca      	b.n	8005c6e <__swbuf_r+0x1a>
 8005cd8:	4621      	mov	r1, r4
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f000 f80c 	bl	8005cf8 <__swsetup_r>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d0cb      	beq.n	8005c7c <__swbuf_r+0x28>
 8005ce4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ce8:	e7ea      	b.n	8005cc0 <__swbuf_r+0x6c>
 8005cea:	bf00      	nop
 8005cec:	080078a0 	.word	0x080078a0
 8005cf0:	080078c0 	.word	0x080078c0
 8005cf4:	08007880 	.word	0x08007880

08005cf8 <__swsetup_r>:
 8005cf8:	4b32      	ldr	r3, [pc, #200]	; (8005dc4 <__swsetup_r+0xcc>)
 8005cfa:	b570      	push	{r4, r5, r6, lr}
 8005cfc:	681d      	ldr	r5, [r3, #0]
 8005cfe:	4606      	mov	r6, r0
 8005d00:	460c      	mov	r4, r1
 8005d02:	b125      	cbz	r5, 8005d0e <__swsetup_r+0x16>
 8005d04:	69ab      	ldr	r3, [r5, #24]
 8005d06:	b913      	cbnz	r3, 8005d0e <__swsetup_r+0x16>
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f000 f985 	bl	8006018 <__sinit>
 8005d0e:	4b2e      	ldr	r3, [pc, #184]	; (8005dc8 <__swsetup_r+0xd0>)
 8005d10:	429c      	cmp	r4, r3
 8005d12:	d10f      	bne.n	8005d34 <__swsetup_r+0x3c>
 8005d14:	686c      	ldr	r4, [r5, #4]
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d1c:	0719      	lsls	r1, r3, #28
 8005d1e:	d42c      	bmi.n	8005d7a <__swsetup_r+0x82>
 8005d20:	06dd      	lsls	r5, r3, #27
 8005d22:	d411      	bmi.n	8005d48 <__swsetup_r+0x50>
 8005d24:	2309      	movs	r3, #9
 8005d26:	6033      	str	r3, [r6, #0]
 8005d28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d32:	e03e      	b.n	8005db2 <__swsetup_r+0xba>
 8005d34:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <__swsetup_r+0xd4>)
 8005d36:	429c      	cmp	r4, r3
 8005d38:	d101      	bne.n	8005d3e <__swsetup_r+0x46>
 8005d3a:	68ac      	ldr	r4, [r5, #8]
 8005d3c:	e7eb      	b.n	8005d16 <__swsetup_r+0x1e>
 8005d3e:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <__swsetup_r+0xd8>)
 8005d40:	429c      	cmp	r4, r3
 8005d42:	bf08      	it	eq
 8005d44:	68ec      	ldreq	r4, [r5, #12]
 8005d46:	e7e6      	b.n	8005d16 <__swsetup_r+0x1e>
 8005d48:	0758      	lsls	r0, r3, #29
 8005d4a:	d512      	bpl.n	8005d72 <__swsetup_r+0x7a>
 8005d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d4e:	b141      	cbz	r1, 8005d62 <__swsetup_r+0x6a>
 8005d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d54:	4299      	cmp	r1, r3
 8005d56:	d002      	beq.n	8005d5e <__swsetup_r+0x66>
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f7ff fb9d 	bl	8005498 <_free_r>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6363      	str	r3, [r4, #52]	; 0x34
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d68:	81a3      	strh	r3, [r4, #12]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6063      	str	r3, [r4, #4]
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f043 0308 	orr.w	r3, r3, #8
 8005d78:	81a3      	strh	r3, [r4, #12]
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	b94b      	cbnz	r3, 8005d92 <__swsetup_r+0x9a>
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d88:	d003      	beq.n	8005d92 <__swsetup_r+0x9a>
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f000 fa09 	bl	80061a4 <__smakebuf_r>
 8005d92:	89a0      	ldrh	r0, [r4, #12]
 8005d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d98:	f010 0301 	ands.w	r3, r0, #1
 8005d9c:	d00a      	beq.n	8005db4 <__swsetup_r+0xbc>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	6963      	ldr	r3, [r4, #20]
 8005da4:	425b      	negs	r3, r3
 8005da6:	61a3      	str	r3, [r4, #24]
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	b943      	cbnz	r3, 8005dbe <__swsetup_r+0xc6>
 8005dac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005db0:	d1ba      	bne.n	8005d28 <__swsetup_r+0x30>
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	0781      	lsls	r1, r0, #30
 8005db6:	bf58      	it	pl
 8005db8:	6963      	ldrpl	r3, [r4, #20]
 8005dba:	60a3      	str	r3, [r4, #8]
 8005dbc:	e7f4      	b.n	8005da8 <__swsetup_r+0xb0>
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e7f7      	b.n	8005db2 <__swsetup_r+0xba>
 8005dc2:	bf00      	nop
 8005dc4:	2000000c 	.word	0x2000000c
 8005dc8:	080078a0 	.word	0x080078a0
 8005dcc:	080078c0 	.word	0x080078c0
 8005dd0:	08007880 	.word	0x08007880

08005dd4 <abort>:
 8005dd4:	b508      	push	{r3, lr}
 8005dd6:	2006      	movs	r0, #6
 8005dd8:	f000 fa58 	bl	800628c <raise>
 8005ddc:	2001      	movs	r0, #1
 8005dde:	f7fc fb79 	bl	80024d4 <_exit>
	...

08005de4 <__sflush_r>:
 8005de4:	898a      	ldrh	r2, [r1, #12]
 8005de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dea:	4605      	mov	r5, r0
 8005dec:	0710      	lsls	r0, r2, #28
 8005dee:	460c      	mov	r4, r1
 8005df0:	d458      	bmi.n	8005ea4 <__sflush_r+0xc0>
 8005df2:	684b      	ldr	r3, [r1, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dc05      	bgt.n	8005e04 <__sflush_r+0x20>
 8005df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	dc02      	bgt.n	8005e04 <__sflush_r+0x20>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e06:	2e00      	cmp	r6, #0
 8005e08:	d0f9      	beq.n	8005dfe <__sflush_r+0x1a>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e10:	682f      	ldr	r7, [r5, #0]
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	d032      	beq.n	8005e7c <__sflush_r+0x98>
 8005e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	075a      	lsls	r2, r3, #29
 8005e1c:	d505      	bpl.n	8005e2a <__sflush_r+0x46>
 8005e1e:	6863      	ldr	r3, [r4, #4]
 8005e20:	1ac0      	subs	r0, r0, r3
 8005e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e24:	b10b      	cbz	r3, 8005e2a <__sflush_r+0x46>
 8005e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e28:	1ac0      	subs	r0, r0, r3
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e30:	6a21      	ldr	r1, [r4, #32]
 8005e32:	4628      	mov	r0, r5
 8005e34:	47b0      	blx	r6
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	d106      	bne.n	8005e4a <__sflush_r+0x66>
 8005e3c:	6829      	ldr	r1, [r5, #0]
 8005e3e:	291d      	cmp	r1, #29
 8005e40:	d82c      	bhi.n	8005e9c <__sflush_r+0xb8>
 8005e42:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <__sflush_r+0x108>)
 8005e44:	40ca      	lsrs	r2, r1
 8005e46:	07d6      	lsls	r6, r2, #31
 8005e48:	d528      	bpl.n	8005e9c <__sflush_r+0xb8>
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	6062      	str	r2, [r4, #4]
 8005e4e:	04d9      	lsls	r1, r3, #19
 8005e50:	6922      	ldr	r2, [r4, #16]
 8005e52:	6022      	str	r2, [r4, #0]
 8005e54:	d504      	bpl.n	8005e60 <__sflush_r+0x7c>
 8005e56:	1c42      	adds	r2, r0, #1
 8005e58:	d101      	bne.n	8005e5e <__sflush_r+0x7a>
 8005e5a:	682b      	ldr	r3, [r5, #0]
 8005e5c:	b903      	cbnz	r3, 8005e60 <__sflush_r+0x7c>
 8005e5e:	6560      	str	r0, [r4, #84]	; 0x54
 8005e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e62:	602f      	str	r7, [r5, #0]
 8005e64:	2900      	cmp	r1, #0
 8005e66:	d0ca      	beq.n	8005dfe <__sflush_r+0x1a>
 8005e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e6c:	4299      	cmp	r1, r3
 8005e6e:	d002      	beq.n	8005e76 <__sflush_r+0x92>
 8005e70:	4628      	mov	r0, r5
 8005e72:	f7ff fb11 	bl	8005498 <_free_r>
 8005e76:	2000      	movs	r0, #0
 8005e78:	6360      	str	r0, [r4, #52]	; 0x34
 8005e7a:	e7c1      	b.n	8005e00 <__sflush_r+0x1c>
 8005e7c:	6a21      	ldr	r1, [r4, #32]
 8005e7e:	2301      	movs	r3, #1
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b0      	blx	r6
 8005e84:	1c41      	adds	r1, r0, #1
 8005e86:	d1c7      	bne.n	8005e18 <__sflush_r+0x34>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0c4      	beq.n	8005e18 <__sflush_r+0x34>
 8005e8e:	2b1d      	cmp	r3, #29
 8005e90:	d001      	beq.n	8005e96 <__sflush_r+0xb2>
 8005e92:	2b16      	cmp	r3, #22
 8005e94:	d101      	bne.n	8005e9a <__sflush_r+0xb6>
 8005e96:	602f      	str	r7, [r5, #0]
 8005e98:	e7b1      	b.n	8005dfe <__sflush_r+0x1a>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	e7ad      	b.n	8005e00 <__sflush_r+0x1c>
 8005ea4:	690f      	ldr	r7, [r1, #16]
 8005ea6:	2f00      	cmp	r7, #0
 8005ea8:	d0a9      	beq.n	8005dfe <__sflush_r+0x1a>
 8005eaa:	0793      	lsls	r3, r2, #30
 8005eac:	680e      	ldr	r6, [r1, #0]
 8005eae:	bf08      	it	eq
 8005eb0:	694b      	ldreq	r3, [r1, #20]
 8005eb2:	600f      	str	r7, [r1, #0]
 8005eb4:	bf18      	it	ne
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	eba6 0807 	sub.w	r8, r6, r7
 8005ebc:	608b      	str	r3, [r1, #8]
 8005ebe:	f1b8 0f00 	cmp.w	r8, #0
 8005ec2:	dd9c      	ble.n	8005dfe <__sflush_r+0x1a>
 8005ec4:	6a21      	ldr	r1, [r4, #32]
 8005ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ec8:	4643      	mov	r3, r8
 8005eca:	463a      	mov	r2, r7
 8005ecc:	4628      	mov	r0, r5
 8005ece:	47b0      	blx	r6
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	dc06      	bgt.n	8005ee2 <__sflush_r+0xfe>
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee0:	e78e      	b.n	8005e00 <__sflush_r+0x1c>
 8005ee2:	4407      	add	r7, r0
 8005ee4:	eba8 0800 	sub.w	r8, r8, r0
 8005ee8:	e7e9      	b.n	8005ebe <__sflush_r+0xda>
 8005eea:	bf00      	nop
 8005eec:	20400001 	.word	0x20400001

08005ef0 <_fflush_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	690b      	ldr	r3, [r1, #16]
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	b913      	cbnz	r3, 8005f00 <_fflush_r+0x10>
 8005efa:	2500      	movs	r5, #0
 8005efc:	4628      	mov	r0, r5
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	b118      	cbz	r0, 8005f0a <_fflush_r+0x1a>
 8005f02:	6983      	ldr	r3, [r0, #24]
 8005f04:	b90b      	cbnz	r3, 8005f0a <_fflush_r+0x1a>
 8005f06:	f000 f887 	bl	8006018 <__sinit>
 8005f0a:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <_fflush_r+0x6c>)
 8005f0c:	429c      	cmp	r4, r3
 8005f0e:	d11b      	bne.n	8005f48 <_fflush_r+0x58>
 8005f10:	686c      	ldr	r4, [r5, #4]
 8005f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0ef      	beq.n	8005efa <_fflush_r+0xa>
 8005f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f1c:	07d0      	lsls	r0, r2, #31
 8005f1e:	d404      	bmi.n	8005f2a <_fflush_r+0x3a>
 8005f20:	0599      	lsls	r1, r3, #22
 8005f22:	d402      	bmi.n	8005f2a <_fflush_r+0x3a>
 8005f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f26:	f000 f915 	bl	8006154 <__retarget_lock_acquire_recursive>
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	f7ff ff59 	bl	8005de4 <__sflush_r>
 8005f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f34:	07da      	lsls	r2, r3, #31
 8005f36:	4605      	mov	r5, r0
 8005f38:	d4e0      	bmi.n	8005efc <_fflush_r+0xc>
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	059b      	lsls	r3, r3, #22
 8005f3e:	d4dd      	bmi.n	8005efc <_fflush_r+0xc>
 8005f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f42:	f000 f908 	bl	8006156 <__retarget_lock_release_recursive>
 8005f46:	e7d9      	b.n	8005efc <_fflush_r+0xc>
 8005f48:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <_fflush_r+0x70>)
 8005f4a:	429c      	cmp	r4, r3
 8005f4c:	d101      	bne.n	8005f52 <_fflush_r+0x62>
 8005f4e:	68ac      	ldr	r4, [r5, #8]
 8005f50:	e7df      	b.n	8005f12 <_fflush_r+0x22>
 8005f52:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <_fflush_r+0x74>)
 8005f54:	429c      	cmp	r4, r3
 8005f56:	bf08      	it	eq
 8005f58:	68ec      	ldreq	r4, [r5, #12]
 8005f5a:	e7da      	b.n	8005f12 <_fflush_r+0x22>
 8005f5c:	080078a0 	.word	0x080078a0
 8005f60:	080078c0 	.word	0x080078c0
 8005f64:	08007880 	.word	0x08007880

08005f68 <std>:
 8005f68:	2300      	movs	r3, #0
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f76:	6083      	str	r3, [r0, #8]
 8005f78:	8181      	strh	r1, [r0, #12]
 8005f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f7c:	81c2      	strh	r2, [r0, #14]
 8005f7e:	6183      	str	r3, [r0, #24]
 8005f80:	4619      	mov	r1, r3
 8005f82:	2208      	movs	r2, #8
 8005f84:	305c      	adds	r0, #92	; 0x5c
 8005f86:	f7ff f8a9 	bl	80050dc <memset>
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <std+0x38>)
 8005f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <std+0x3c>)
 8005f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <std+0x40>)
 8005f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <std+0x44>)
 8005f98:	6224      	str	r4, [r4, #32]
 8005f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	bf00      	nop
 8005fa0:	080062c5 	.word	0x080062c5
 8005fa4:	080062e7 	.word	0x080062e7
 8005fa8:	0800631f 	.word	0x0800631f
 8005fac:	08006343 	.word	0x08006343

08005fb0 <_cleanup_r>:
 8005fb0:	4901      	ldr	r1, [pc, #4]	; (8005fb8 <_cleanup_r+0x8>)
 8005fb2:	f000 b8af 	b.w	8006114 <_fwalk_reent>
 8005fb6:	bf00      	nop
 8005fb8:	08005ef1 	.word	0x08005ef1

08005fbc <__sfmoreglue>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	2268      	movs	r2, #104	; 0x68
 8005fc0:	1e4d      	subs	r5, r1, #1
 8005fc2:	4355      	muls	r5, r2
 8005fc4:	460e      	mov	r6, r1
 8005fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fca:	f7ff fad1 	bl	8005570 <_malloc_r>
 8005fce:	4604      	mov	r4, r0
 8005fd0:	b140      	cbz	r0, 8005fe4 <__sfmoreglue+0x28>
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8005fd8:	300c      	adds	r0, #12
 8005fda:	60a0      	str	r0, [r4, #8]
 8005fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fe0:	f7ff f87c 	bl	80050dc <memset>
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}

08005fe8 <__sfp_lock_acquire>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__sfp_lock_acquire+0x8>)
 8005fea:	f000 b8b3 	b.w	8006154 <__retarget_lock_acquire_recursive>
 8005fee:	bf00      	nop
 8005ff0:	20000695 	.word	0x20000695

08005ff4 <__sfp_lock_release>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__sfp_lock_release+0x8>)
 8005ff6:	f000 b8ae 	b.w	8006156 <__retarget_lock_release_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	20000695 	.word	0x20000695

08006000 <__sinit_lock_acquire>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__sinit_lock_acquire+0x8>)
 8006002:	f000 b8a7 	b.w	8006154 <__retarget_lock_acquire_recursive>
 8006006:	bf00      	nop
 8006008:	20000696 	.word	0x20000696

0800600c <__sinit_lock_release>:
 800600c:	4801      	ldr	r0, [pc, #4]	; (8006014 <__sinit_lock_release+0x8>)
 800600e:	f000 b8a2 	b.w	8006156 <__retarget_lock_release_recursive>
 8006012:	bf00      	nop
 8006014:	20000696 	.word	0x20000696

08006018 <__sinit>:
 8006018:	b510      	push	{r4, lr}
 800601a:	4604      	mov	r4, r0
 800601c:	f7ff fff0 	bl	8006000 <__sinit_lock_acquire>
 8006020:	69a3      	ldr	r3, [r4, #24]
 8006022:	b11b      	cbz	r3, 800602c <__sinit+0x14>
 8006024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006028:	f7ff bff0 	b.w	800600c <__sinit_lock_release>
 800602c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006030:	6523      	str	r3, [r4, #80]	; 0x50
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <__sinit+0x68>)
 8006034:	4a13      	ldr	r2, [pc, #76]	; (8006084 <__sinit+0x6c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	62a2      	str	r2, [r4, #40]	; 0x28
 800603a:	42a3      	cmp	r3, r4
 800603c:	bf04      	itt	eq
 800603e:	2301      	moveq	r3, #1
 8006040:	61a3      	streq	r3, [r4, #24]
 8006042:	4620      	mov	r0, r4
 8006044:	f000 f820 	bl	8006088 <__sfp>
 8006048:	6060      	str	r0, [r4, #4]
 800604a:	4620      	mov	r0, r4
 800604c:	f000 f81c 	bl	8006088 <__sfp>
 8006050:	60a0      	str	r0, [r4, #8]
 8006052:	4620      	mov	r0, r4
 8006054:	f000 f818 	bl	8006088 <__sfp>
 8006058:	2200      	movs	r2, #0
 800605a:	60e0      	str	r0, [r4, #12]
 800605c:	2104      	movs	r1, #4
 800605e:	6860      	ldr	r0, [r4, #4]
 8006060:	f7ff ff82 	bl	8005f68 <std>
 8006064:	68a0      	ldr	r0, [r4, #8]
 8006066:	2201      	movs	r2, #1
 8006068:	2109      	movs	r1, #9
 800606a:	f7ff ff7d 	bl	8005f68 <std>
 800606e:	68e0      	ldr	r0, [r4, #12]
 8006070:	2202      	movs	r2, #2
 8006072:	2112      	movs	r1, #18
 8006074:	f7ff ff78 	bl	8005f68 <std>
 8006078:	2301      	movs	r3, #1
 800607a:	61a3      	str	r3, [r4, #24]
 800607c:	e7d2      	b.n	8006024 <__sinit+0xc>
 800607e:	bf00      	nop
 8006080:	08007698 	.word	0x08007698
 8006084:	08005fb1 	.word	0x08005fb1

08006088 <__sfp>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	4607      	mov	r7, r0
 800608c:	f7ff ffac 	bl	8005fe8 <__sfp_lock_acquire>
 8006090:	4b1e      	ldr	r3, [pc, #120]	; (800610c <__sfp+0x84>)
 8006092:	681e      	ldr	r6, [r3, #0]
 8006094:	69b3      	ldr	r3, [r6, #24]
 8006096:	b913      	cbnz	r3, 800609e <__sfp+0x16>
 8006098:	4630      	mov	r0, r6
 800609a:	f7ff ffbd 	bl	8006018 <__sinit>
 800609e:	3648      	adds	r6, #72	; 0x48
 80060a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060a4:	3b01      	subs	r3, #1
 80060a6:	d503      	bpl.n	80060b0 <__sfp+0x28>
 80060a8:	6833      	ldr	r3, [r6, #0]
 80060aa:	b30b      	cbz	r3, 80060f0 <__sfp+0x68>
 80060ac:	6836      	ldr	r6, [r6, #0]
 80060ae:	e7f7      	b.n	80060a0 <__sfp+0x18>
 80060b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060b4:	b9d5      	cbnz	r5, 80060ec <__sfp+0x64>
 80060b6:	4b16      	ldr	r3, [pc, #88]	; (8006110 <__sfp+0x88>)
 80060b8:	60e3      	str	r3, [r4, #12]
 80060ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060be:	6665      	str	r5, [r4, #100]	; 0x64
 80060c0:	f000 f847 	bl	8006152 <__retarget_lock_init_recursive>
 80060c4:	f7ff ff96 	bl	8005ff4 <__sfp_lock_release>
 80060c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060d0:	6025      	str	r5, [r4, #0]
 80060d2:	61a5      	str	r5, [r4, #24]
 80060d4:	2208      	movs	r2, #8
 80060d6:	4629      	mov	r1, r5
 80060d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060dc:	f7fe fffe 	bl	80050dc <memset>
 80060e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060e8:	4620      	mov	r0, r4
 80060ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ec:	3468      	adds	r4, #104	; 0x68
 80060ee:	e7d9      	b.n	80060a4 <__sfp+0x1c>
 80060f0:	2104      	movs	r1, #4
 80060f2:	4638      	mov	r0, r7
 80060f4:	f7ff ff62 	bl	8005fbc <__sfmoreglue>
 80060f8:	4604      	mov	r4, r0
 80060fa:	6030      	str	r0, [r6, #0]
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d1d5      	bne.n	80060ac <__sfp+0x24>
 8006100:	f7ff ff78 	bl	8005ff4 <__sfp_lock_release>
 8006104:	230c      	movs	r3, #12
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	e7ee      	b.n	80060e8 <__sfp+0x60>
 800610a:	bf00      	nop
 800610c:	08007698 	.word	0x08007698
 8006110:	ffff0001 	.word	0xffff0001

08006114 <_fwalk_reent>:
 8006114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006118:	4606      	mov	r6, r0
 800611a:	4688      	mov	r8, r1
 800611c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006120:	2700      	movs	r7, #0
 8006122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006126:	f1b9 0901 	subs.w	r9, r9, #1
 800612a:	d505      	bpl.n	8006138 <_fwalk_reent+0x24>
 800612c:	6824      	ldr	r4, [r4, #0]
 800612e:	2c00      	cmp	r4, #0
 8006130:	d1f7      	bne.n	8006122 <_fwalk_reent+0xe>
 8006132:	4638      	mov	r0, r7
 8006134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006138:	89ab      	ldrh	r3, [r5, #12]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d907      	bls.n	800614e <_fwalk_reent+0x3a>
 800613e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006142:	3301      	adds	r3, #1
 8006144:	d003      	beq.n	800614e <_fwalk_reent+0x3a>
 8006146:	4629      	mov	r1, r5
 8006148:	4630      	mov	r0, r6
 800614a:	47c0      	blx	r8
 800614c:	4307      	orrs	r7, r0
 800614e:	3568      	adds	r5, #104	; 0x68
 8006150:	e7e9      	b.n	8006126 <_fwalk_reent+0x12>

08006152 <__retarget_lock_init_recursive>:
 8006152:	4770      	bx	lr

08006154 <__retarget_lock_acquire_recursive>:
 8006154:	4770      	bx	lr

08006156 <__retarget_lock_release_recursive>:
 8006156:	4770      	bx	lr

08006158 <__swhatbuf_r>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	460e      	mov	r6, r1
 800615c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006160:	2900      	cmp	r1, #0
 8006162:	b096      	sub	sp, #88	; 0x58
 8006164:	4614      	mov	r4, r2
 8006166:	461d      	mov	r5, r3
 8006168:	da08      	bge.n	800617c <__swhatbuf_r+0x24>
 800616a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	602a      	str	r2, [r5, #0]
 8006172:	061a      	lsls	r2, r3, #24
 8006174:	d410      	bmi.n	8006198 <__swhatbuf_r+0x40>
 8006176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800617a:	e00e      	b.n	800619a <__swhatbuf_r+0x42>
 800617c:	466a      	mov	r2, sp
 800617e:	f000 f907 	bl	8006390 <_fstat_r>
 8006182:	2800      	cmp	r0, #0
 8006184:	dbf1      	blt.n	800616a <__swhatbuf_r+0x12>
 8006186:	9a01      	ldr	r2, [sp, #4]
 8006188:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800618c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006190:	425a      	negs	r2, r3
 8006192:	415a      	adcs	r2, r3
 8006194:	602a      	str	r2, [r5, #0]
 8006196:	e7ee      	b.n	8006176 <__swhatbuf_r+0x1e>
 8006198:	2340      	movs	r3, #64	; 0x40
 800619a:	2000      	movs	r0, #0
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	b016      	add	sp, #88	; 0x58
 80061a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080061a4 <__smakebuf_r>:
 80061a4:	898b      	ldrh	r3, [r1, #12]
 80061a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061a8:	079d      	lsls	r5, r3, #30
 80061aa:	4606      	mov	r6, r0
 80061ac:	460c      	mov	r4, r1
 80061ae:	d507      	bpl.n	80061c0 <__smakebuf_r+0x1c>
 80061b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	6123      	str	r3, [r4, #16]
 80061b8:	2301      	movs	r3, #1
 80061ba:	6163      	str	r3, [r4, #20]
 80061bc:	b002      	add	sp, #8
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	ab01      	add	r3, sp, #4
 80061c2:	466a      	mov	r2, sp
 80061c4:	f7ff ffc8 	bl	8006158 <__swhatbuf_r>
 80061c8:	9900      	ldr	r1, [sp, #0]
 80061ca:	4605      	mov	r5, r0
 80061cc:	4630      	mov	r0, r6
 80061ce:	f7ff f9cf 	bl	8005570 <_malloc_r>
 80061d2:	b948      	cbnz	r0, 80061e8 <__smakebuf_r+0x44>
 80061d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061d8:	059a      	lsls	r2, r3, #22
 80061da:	d4ef      	bmi.n	80061bc <__smakebuf_r+0x18>
 80061dc:	f023 0303 	bic.w	r3, r3, #3
 80061e0:	f043 0302 	orr.w	r3, r3, #2
 80061e4:	81a3      	strh	r3, [r4, #12]
 80061e6:	e7e3      	b.n	80061b0 <__smakebuf_r+0xc>
 80061e8:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <__smakebuf_r+0x7c>)
 80061ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	6020      	str	r0, [r4, #0]
 80061f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f4:	81a3      	strh	r3, [r4, #12]
 80061f6:	9b00      	ldr	r3, [sp, #0]
 80061f8:	6163      	str	r3, [r4, #20]
 80061fa:	9b01      	ldr	r3, [sp, #4]
 80061fc:	6120      	str	r0, [r4, #16]
 80061fe:	b15b      	cbz	r3, 8006218 <__smakebuf_r+0x74>
 8006200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006204:	4630      	mov	r0, r6
 8006206:	f000 f8d5 	bl	80063b4 <_isatty_r>
 800620a:	b128      	cbz	r0, 8006218 <__smakebuf_r+0x74>
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	f023 0303 	bic.w	r3, r3, #3
 8006212:	f043 0301 	orr.w	r3, r3, #1
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	89a0      	ldrh	r0, [r4, #12]
 800621a:	4305      	orrs	r5, r0
 800621c:	81a5      	strh	r5, [r4, #12]
 800621e:	e7cd      	b.n	80061bc <__smakebuf_r+0x18>
 8006220:	08005fb1 	.word	0x08005fb1

08006224 <__malloc_lock>:
 8006224:	4801      	ldr	r0, [pc, #4]	; (800622c <__malloc_lock+0x8>)
 8006226:	f7ff bf95 	b.w	8006154 <__retarget_lock_acquire_recursive>
 800622a:	bf00      	nop
 800622c:	20000694 	.word	0x20000694

08006230 <__malloc_unlock>:
 8006230:	4801      	ldr	r0, [pc, #4]	; (8006238 <__malloc_unlock+0x8>)
 8006232:	f7ff bf90 	b.w	8006156 <__retarget_lock_release_recursive>
 8006236:	bf00      	nop
 8006238:	20000694 	.word	0x20000694

0800623c <_raise_r>:
 800623c:	291f      	cmp	r1, #31
 800623e:	b538      	push	{r3, r4, r5, lr}
 8006240:	4604      	mov	r4, r0
 8006242:	460d      	mov	r5, r1
 8006244:	d904      	bls.n	8006250 <_raise_r+0x14>
 8006246:	2316      	movs	r3, #22
 8006248:	6003      	str	r3, [r0, #0]
 800624a:	f04f 30ff 	mov.w	r0, #4294967295
 800624e:	bd38      	pop	{r3, r4, r5, pc}
 8006250:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006252:	b112      	cbz	r2, 800625a <_raise_r+0x1e>
 8006254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006258:	b94b      	cbnz	r3, 800626e <_raise_r+0x32>
 800625a:	4620      	mov	r0, r4
 800625c:	f000 f830 	bl	80062c0 <_getpid_r>
 8006260:	462a      	mov	r2, r5
 8006262:	4601      	mov	r1, r0
 8006264:	4620      	mov	r0, r4
 8006266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800626a:	f000 b817 	b.w	800629c <_kill_r>
 800626e:	2b01      	cmp	r3, #1
 8006270:	d00a      	beq.n	8006288 <_raise_r+0x4c>
 8006272:	1c59      	adds	r1, r3, #1
 8006274:	d103      	bne.n	800627e <_raise_r+0x42>
 8006276:	2316      	movs	r3, #22
 8006278:	6003      	str	r3, [r0, #0]
 800627a:	2001      	movs	r0, #1
 800627c:	e7e7      	b.n	800624e <_raise_r+0x12>
 800627e:	2400      	movs	r4, #0
 8006280:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006284:	4628      	mov	r0, r5
 8006286:	4798      	blx	r3
 8006288:	2000      	movs	r0, #0
 800628a:	e7e0      	b.n	800624e <_raise_r+0x12>

0800628c <raise>:
 800628c:	4b02      	ldr	r3, [pc, #8]	; (8006298 <raise+0xc>)
 800628e:	4601      	mov	r1, r0
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	f7ff bfd3 	b.w	800623c <_raise_r>
 8006296:	bf00      	nop
 8006298:	2000000c 	.word	0x2000000c

0800629c <_kill_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d07      	ldr	r5, [pc, #28]	; (80062bc <_kill_r+0x20>)
 80062a0:	2300      	movs	r3, #0
 80062a2:	4604      	mov	r4, r0
 80062a4:	4608      	mov	r0, r1
 80062a6:	4611      	mov	r1, r2
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	f7fc f903 	bl	80024b4 <_kill>
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	d102      	bne.n	80062b8 <_kill_r+0x1c>
 80062b2:	682b      	ldr	r3, [r5, #0]
 80062b4:	b103      	cbz	r3, 80062b8 <_kill_r+0x1c>
 80062b6:	6023      	str	r3, [r4, #0]
 80062b8:	bd38      	pop	{r3, r4, r5, pc}
 80062ba:	bf00      	nop
 80062bc:	20000698 	.word	0x20000698

080062c0 <_getpid_r>:
 80062c0:	f7fc b8f0 	b.w	80024a4 <_getpid>

080062c4 <__sread>:
 80062c4:	b510      	push	{r4, lr}
 80062c6:	460c      	mov	r4, r1
 80062c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062cc:	f000 f894 	bl	80063f8 <_read_r>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	bfab      	itete	ge
 80062d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062d6:	89a3      	ldrhlt	r3, [r4, #12]
 80062d8:	181b      	addge	r3, r3, r0
 80062da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062de:	bfac      	ite	ge
 80062e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80062e2:	81a3      	strhlt	r3, [r4, #12]
 80062e4:	bd10      	pop	{r4, pc}

080062e6 <__swrite>:
 80062e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ea:	461f      	mov	r7, r3
 80062ec:	898b      	ldrh	r3, [r1, #12]
 80062ee:	05db      	lsls	r3, r3, #23
 80062f0:	4605      	mov	r5, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	4616      	mov	r6, r2
 80062f6:	d505      	bpl.n	8006304 <__swrite+0x1e>
 80062f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fc:	2302      	movs	r3, #2
 80062fe:	2200      	movs	r2, #0
 8006300:	f000 f868 	bl	80063d4 <_lseek_r>
 8006304:	89a3      	ldrh	r3, [r4, #12]
 8006306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800630a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800630e:	81a3      	strh	r3, [r4, #12]
 8006310:	4632      	mov	r2, r6
 8006312:	463b      	mov	r3, r7
 8006314:	4628      	mov	r0, r5
 8006316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800631a:	f000 b817 	b.w	800634c <_write_r>

0800631e <__sseek>:
 800631e:	b510      	push	{r4, lr}
 8006320:	460c      	mov	r4, r1
 8006322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006326:	f000 f855 	bl	80063d4 <_lseek_r>
 800632a:	1c43      	adds	r3, r0, #1
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	bf15      	itete	ne
 8006330:	6560      	strne	r0, [r4, #84]	; 0x54
 8006332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800633a:	81a3      	strheq	r3, [r4, #12]
 800633c:	bf18      	it	ne
 800633e:	81a3      	strhne	r3, [r4, #12]
 8006340:	bd10      	pop	{r4, pc}

08006342 <__sclose>:
 8006342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006346:	f000 b813 	b.w	8006370 <_close_r>
	...

0800634c <_write_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d07      	ldr	r5, [pc, #28]	; (800636c <_write_r+0x20>)
 8006350:	4604      	mov	r4, r0
 8006352:	4608      	mov	r0, r1
 8006354:	4611      	mov	r1, r2
 8006356:	2200      	movs	r2, #0
 8006358:	602a      	str	r2, [r5, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	f7fc f8e1 	bl	8002522 <_write>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_write_r+0x1e>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b103      	cbz	r3, 800636a <_write_r+0x1e>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	20000698 	.word	0x20000698

08006370 <_close_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4d06      	ldr	r5, [pc, #24]	; (800638c <_close_r+0x1c>)
 8006374:	2300      	movs	r3, #0
 8006376:	4604      	mov	r4, r0
 8006378:	4608      	mov	r0, r1
 800637a:	602b      	str	r3, [r5, #0]
 800637c:	f7fc f8ed 	bl	800255a <_close>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_close_r+0x1a>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_close_r+0x1a>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	20000698 	.word	0x20000698

08006390 <_fstat_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	; (80063b0 <_fstat_r+0x20>)
 8006394:	2300      	movs	r3, #0
 8006396:	4604      	mov	r4, r0
 8006398:	4608      	mov	r0, r1
 800639a:	4611      	mov	r1, r2
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	f7fc f8e8 	bl	8002572 <_fstat>
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	d102      	bne.n	80063ac <_fstat_r+0x1c>
 80063a6:	682b      	ldr	r3, [r5, #0]
 80063a8:	b103      	cbz	r3, 80063ac <_fstat_r+0x1c>
 80063aa:	6023      	str	r3, [r4, #0]
 80063ac:	bd38      	pop	{r3, r4, r5, pc}
 80063ae:	bf00      	nop
 80063b0:	20000698 	.word	0x20000698

080063b4 <_isatty_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4d06      	ldr	r5, [pc, #24]	; (80063d0 <_isatty_r+0x1c>)
 80063b8:	2300      	movs	r3, #0
 80063ba:	4604      	mov	r4, r0
 80063bc:	4608      	mov	r0, r1
 80063be:	602b      	str	r3, [r5, #0]
 80063c0:	f7fc f8e7 	bl	8002592 <_isatty>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d102      	bne.n	80063ce <_isatty_r+0x1a>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	b103      	cbz	r3, 80063ce <_isatty_r+0x1a>
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	20000698 	.word	0x20000698

080063d4 <_lseek_r>:
 80063d4:	b538      	push	{r3, r4, r5, lr}
 80063d6:	4d07      	ldr	r5, [pc, #28]	; (80063f4 <_lseek_r+0x20>)
 80063d8:	4604      	mov	r4, r0
 80063da:	4608      	mov	r0, r1
 80063dc:	4611      	mov	r1, r2
 80063de:	2200      	movs	r2, #0
 80063e0:	602a      	str	r2, [r5, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	f7fc f8e0 	bl	80025a8 <_lseek>
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	d102      	bne.n	80063f2 <_lseek_r+0x1e>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	b103      	cbz	r3, 80063f2 <_lseek_r+0x1e>
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	20000698 	.word	0x20000698

080063f8 <_read_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d07      	ldr	r5, [pc, #28]	; (8006418 <_read_r+0x20>)
 80063fc:	4604      	mov	r4, r0
 80063fe:	4608      	mov	r0, r1
 8006400:	4611      	mov	r1, r2
 8006402:	2200      	movs	r2, #0
 8006404:	602a      	str	r2, [r5, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	f7fc f86e 	bl	80024e8 <_read>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_read_r+0x1e>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_read_r+0x1e>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20000698 	.word	0x20000698
 800641c:	00000000 	.word	0x00000000

08006420 <cos>:
 8006420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006422:	ec53 2b10 	vmov	r2, r3, d0
 8006426:	4826      	ldr	r0, [pc, #152]	; (80064c0 <cos+0xa0>)
 8006428:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800642c:	4281      	cmp	r1, r0
 800642e:	dc06      	bgt.n	800643e <cos+0x1e>
 8006430:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80064b8 <cos+0x98>
 8006434:	b005      	add	sp, #20
 8006436:	f85d eb04 	ldr.w	lr, [sp], #4
 800643a:	f000 baa9 	b.w	8006990 <__kernel_cos>
 800643e:	4821      	ldr	r0, [pc, #132]	; (80064c4 <cos+0xa4>)
 8006440:	4281      	cmp	r1, r0
 8006442:	dd09      	ble.n	8006458 <cos+0x38>
 8006444:	ee10 0a10 	vmov	r0, s0
 8006448:	4619      	mov	r1, r3
 800644a:	f7f9 ff2d 	bl	80002a8 <__aeabi_dsub>
 800644e:	ec41 0b10 	vmov	d0, r0, r1
 8006452:	b005      	add	sp, #20
 8006454:	f85d fb04 	ldr.w	pc, [sp], #4
 8006458:	4668      	mov	r0, sp
 800645a:	f000 f88d 	bl	8006578 <__ieee754_rem_pio2>
 800645e:	f000 0003 	and.w	r0, r0, #3
 8006462:	2801      	cmp	r0, #1
 8006464:	d00b      	beq.n	800647e <cos+0x5e>
 8006466:	2802      	cmp	r0, #2
 8006468:	d016      	beq.n	8006498 <cos+0x78>
 800646a:	b9e0      	cbnz	r0, 80064a6 <cos+0x86>
 800646c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006470:	ed9d 0b00 	vldr	d0, [sp]
 8006474:	f000 fa8c 	bl	8006990 <__kernel_cos>
 8006478:	ec51 0b10 	vmov	r0, r1, d0
 800647c:	e7e7      	b.n	800644e <cos+0x2e>
 800647e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006482:	ed9d 0b00 	vldr	d0, [sp]
 8006486:	f000 fe9b 	bl	80071c0 <__kernel_sin>
 800648a:	ec53 2b10 	vmov	r2, r3, d0
 800648e:	ee10 0a10 	vmov	r0, s0
 8006492:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006496:	e7da      	b.n	800644e <cos+0x2e>
 8006498:	ed9d 1b02 	vldr	d1, [sp, #8]
 800649c:	ed9d 0b00 	vldr	d0, [sp]
 80064a0:	f000 fa76 	bl	8006990 <__kernel_cos>
 80064a4:	e7f1      	b.n	800648a <cos+0x6a>
 80064a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064aa:	ed9d 0b00 	vldr	d0, [sp]
 80064ae:	2001      	movs	r0, #1
 80064b0:	f000 fe86 	bl	80071c0 <__kernel_sin>
 80064b4:	e7e0      	b.n	8006478 <cos+0x58>
 80064b6:	bf00      	nop
	...
 80064c0:	3fe921fb 	.word	0x3fe921fb
 80064c4:	7fefffff 	.word	0x7fefffff

080064c8 <sin>:
 80064c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064ca:	ec53 2b10 	vmov	r2, r3, d0
 80064ce:	4828      	ldr	r0, [pc, #160]	; (8006570 <sin+0xa8>)
 80064d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80064d4:	4281      	cmp	r1, r0
 80064d6:	dc07      	bgt.n	80064e8 <sin+0x20>
 80064d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006568 <sin+0xa0>
 80064dc:	2000      	movs	r0, #0
 80064de:	b005      	add	sp, #20
 80064e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064e4:	f000 be6c 	b.w	80071c0 <__kernel_sin>
 80064e8:	4822      	ldr	r0, [pc, #136]	; (8006574 <sin+0xac>)
 80064ea:	4281      	cmp	r1, r0
 80064ec:	dd09      	ble.n	8006502 <sin+0x3a>
 80064ee:	ee10 0a10 	vmov	r0, s0
 80064f2:	4619      	mov	r1, r3
 80064f4:	f7f9 fed8 	bl	80002a8 <__aeabi_dsub>
 80064f8:	ec41 0b10 	vmov	d0, r0, r1
 80064fc:	b005      	add	sp, #20
 80064fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006502:	4668      	mov	r0, sp
 8006504:	f000 f838 	bl	8006578 <__ieee754_rem_pio2>
 8006508:	f000 0003 	and.w	r0, r0, #3
 800650c:	2801      	cmp	r0, #1
 800650e:	d00c      	beq.n	800652a <sin+0x62>
 8006510:	2802      	cmp	r0, #2
 8006512:	d011      	beq.n	8006538 <sin+0x70>
 8006514:	b9f0      	cbnz	r0, 8006554 <sin+0x8c>
 8006516:	ed9d 1b02 	vldr	d1, [sp, #8]
 800651a:	ed9d 0b00 	vldr	d0, [sp]
 800651e:	2001      	movs	r0, #1
 8006520:	f000 fe4e 	bl	80071c0 <__kernel_sin>
 8006524:	ec51 0b10 	vmov	r0, r1, d0
 8006528:	e7e6      	b.n	80064f8 <sin+0x30>
 800652a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800652e:	ed9d 0b00 	vldr	d0, [sp]
 8006532:	f000 fa2d 	bl	8006990 <__kernel_cos>
 8006536:	e7f5      	b.n	8006524 <sin+0x5c>
 8006538:	ed9d 1b02 	vldr	d1, [sp, #8]
 800653c:	ed9d 0b00 	vldr	d0, [sp]
 8006540:	2001      	movs	r0, #1
 8006542:	f000 fe3d 	bl	80071c0 <__kernel_sin>
 8006546:	ec53 2b10 	vmov	r2, r3, d0
 800654a:	ee10 0a10 	vmov	r0, s0
 800654e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006552:	e7d1      	b.n	80064f8 <sin+0x30>
 8006554:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006558:	ed9d 0b00 	vldr	d0, [sp]
 800655c:	f000 fa18 	bl	8006990 <__kernel_cos>
 8006560:	e7f1      	b.n	8006546 <sin+0x7e>
 8006562:	bf00      	nop
 8006564:	f3af 8000 	nop.w
	...
 8006570:	3fe921fb 	.word	0x3fe921fb
 8006574:	7fefffff 	.word	0x7fefffff

08006578 <__ieee754_rem_pio2>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	ed2d 8b02 	vpush	{d8}
 8006580:	ec55 4b10 	vmov	r4, r5, d0
 8006584:	4bca      	ldr	r3, [pc, #808]	; (80068b0 <__ieee754_rem_pio2+0x338>)
 8006586:	b08b      	sub	sp, #44	; 0x2c
 8006588:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800658c:	4598      	cmp	r8, r3
 800658e:	4682      	mov	sl, r0
 8006590:	9502      	str	r5, [sp, #8]
 8006592:	dc08      	bgt.n	80065a6 <__ieee754_rem_pio2+0x2e>
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	ed80 0b00 	vstr	d0, [r0]
 800659c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80065a0:	f04f 0b00 	mov.w	fp, #0
 80065a4:	e028      	b.n	80065f8 <__ieee754_rem_pio2+0x80>
 80065a6:	4bc3      	ldr	r3, [pc, #780]	; (80068b4 <__ieee754_rem_pio2+0x33c>)
 80065a8:	4598      	cmp	r8, r3
 80065aa:	dc78      	bgt.n	800669e <__ieee754_rem_pio2+0x126>
 80065ac:	9b02      	ldr	r3, [sp, #8]
 80065ae:	4ec2      	ldr	r6, [pc, #776]	; (80068b8 <__ieee754_rem_pio2+0x340>)
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	ee10 0a10 	vmov	r0, s0
 80065b6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006878 <__ieee754_rem_pio2+0x300>)
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	4629      	mov	r1, r5
 80065be:	dd39      	ble.n	8006634 <__ieee754_rem_pio2+0xbc>
 80065c0:	f7f9 fe72 	bl	80002a8 <__aeabi_dsub>
 80065c4:	45b0      	cmp	r8, r6
 80065c6:	4604      	mov	r4, r0
 80065c8:	460d      	mov	r5, r1
 80065ca:	d01b      	beq.n	8006604 <__ieee754_rem_pio2+0x8c>
 80065cc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006880 <__ieee754_rem_pio2+0x308>)
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f7f9 fe69 	bl	80002a8 <__aeabi_dsub>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	e9ca 2300 	strd	r2, r3, [sl]
 80065de:	4620      	mov	r0, r4
 80065e0:	4629      	mov	r1, r5
 80065e2:	f7f9 fe61 	bl	80002a8 <__aeabi_dsub>
 80065e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006880 <__ieee754_rem_pio2+0x308>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f7f9 fe5c 	bl	80002a8 <__aeabi_dsub>
 80065f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80065f4:	f04f 0b01 	mov.w	fp, #1
 80065f8:	4658      	mov	r0, fp
 80065fa:	b00b      	add	sp, #44	; 0x2c
 80065fc:	ecbd 8b02 	vpop	{d8}
 8006600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006604:	a3a0      	add	r3, pc, #640	; (adr r3, 8006888 <__ieee754_rem_pio2+0x310>)
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f7f9 fe4d 	bl	80002a8 <__aeabi_dsub>
 800660e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006890 <__ieee754_rem_pio2+0x318>)
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	4604      	mov	r4, r0
 8006616:	460d      	mov	r5, r1
 8006618:	f7f9 fe46 	bl	80002a8 <__aeabi_dsub>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	e9ca 2300 	strd	r2, r3, [sl]
 8006624:	4620      	mov	r0, r4
 8006626:	4629      	mov	r1, r5
 8006628:	f7f9 fe3e 	bl	80002a8 <__aeabi_dsub>
 800662c:	a398      	add	r3, pc, #608	; (adr r3, 8006890 <__ieee754_rem_pio2+0x318>)
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	e7db      	b.n	80065ec <__ieee754_rem_pio2+0x74>
 8006634:	f7f9 fe3a 	bl	80002ac <__adddf3>
 8006638:	45b0      	cmp	r8, r6
 800663a:	4604      	mov	r4, r0
 800663c:	460d      	mov	r5, r1
 800663e:	d016      	beq.n	800666e <__ieee754_rem_pio2+0xf6>
 8006640:	a38f      	add	r3, pc, #572	; (adr r3, 8006880 <__ieee754_rem_pio2+0x308>)
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f7f9 fe31 	bl	80002ac <__adddf3>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	e9ca 2300 	strd	r2, r3, [sl]
 8006652:	4620      	mov	r0, r4
 8006654:	4629      	mov	r1, r5
 8006656:	f7f9 fe27 	bl	80002a8 <__aeabi_dsub>
 800665a:	a389      	add	r3, pc, #548	; (adr r3, 8006880 <__ieee754_rem_pio2+0x308>)
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	f7f9 fe24 	bl	80002ac <__adddf3>
 8006664:	f04f 3bff 	mov.w	fp, #4294967295
 8006668:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800666c:	e7c4      	b.n	80065f8 <__ieee754_rem_pio2+0x80>
 800666e:	a386      	add	r3, pc, #536	; (adr r3, 8006888 <__ieee754_rem_pio2+0x310>)
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	f7f9 fe1a 	bl	80002ac <__adddf3>
 8006678:	a385      	add	r3, pc, #532	; (adr r3, 8006890 <__ieee754_rem_pio2+0x318>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	4604      	mov	r4, r0
 8006680:	460d      	mov	r5, r1
 8006682:	f7f9 fe13 	bl	80002ac <__adddf3>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	e9ca 2300 	strd	r2, r3, [sl]
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f7f9 fe09 	bl	80002a8 <__aeabi_dsub>
 8006696:	a37e      	add	r3, pc, #504	; (adr r3, 8006890 <__ieee754_rem_pio2+0x318>)
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	e7e0      	b.n	8006660 <__ieee754_rem_pio2+0xe8>
 800669e:	4b87      	ldr	r3, [pc, #540]	; (80068bc <__ieee754_rem_pio2+0x344>)
 80066a0:	4598      	cmp	r8, r3
 80066a2:	f300 80d9 	bgt.w	8006858 <__ieee754_rem_pio2+0x2e0>
 80066a6:	f000 fe49 	bl	800733c <fabs>
 80066aa:	ec55 4b10 	vmov	r4, r5, d0
 80066ae:	ee10 0a10 	vmov	r0, s0
 80066b2:	a379      	add	r3, pc, #484	; (adr r3, 8006898 <__ieee754_rem_pio2+0x320>)
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	4629      	mov	r1, r5
 80066ba:	f7f9 ffad 	bl	8000618 <__aeabi_dmul>
 80066be:	4b80      	ldr	r3, [pc, #512]	; (80068c0 <__ieee754_rem_pio2+0x348>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	f7f9 fdf3 	bl	80002ac <__adddf3>
 80066c6:	f7fa fa41 	bl	8000b4c <__aeabi_d2iz>
 80066ca:	4683      	mov	fp, r0
 80066cc:	f7f9 ff3a 	bl	8000544 <__aeabi_i2d>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	ec43 2b18 	vmov	d8, r2, r3
 80066d8:	a367      	add	r3, pc, #412	; (adr r3, 8006878 <__ieee754_rem_pio2+0x300>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f7f9 ff9b 	bl	8000618 <__aeabi_dmul>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4620      	mov	r0, r4
 80066e8:	4629      	mov	r1, r5
 80066ea:	f7f9 fddd 	bl	80002a8 <__aeabi_dsub>
 80066ee:	a364      	add	r3, pc, #400	; (adr r3, 8006880 <__ieee754_rem_pio2+0x308>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	ec51 0b18 	vmov	r0, r1, d8
 80066fc:	f7f9 ff8c 	bl	8000618 <__aeabi_dmul>
 8006700:	f1bb 0f1f 	cmp.w	fp, #31
 8006704:	4604      	mov	r4, r0
 8006706:	460d      	mov	r5, r1
 8006708:	dc0d      	bgt.n	8006726 <__ieee754_rem_pio2+0x1ae>
 800670a:	4b6e      	ldr	r3, [pc, #440]	; (80068c4 <__ieee754_rem_pio2+0x34c>)
 800670c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006714:	4543      	cmp	r3, r8
 8006716:	d006      	beq.n	8006726 <__ieee754_rem_pio2+0x1ae>
 8006718:	4622      	mov	r2, r4
 800671a:	462b      	mov	r3, r5
 800671c:	4630      	mov	r0, r6
 800671e:	4639      	mov	r1, r7
 8006720:	f7f9 fdc2 	bl	80002a8 <__aeabi_dsub>
 8006724:	e00f      	b.n	8006746 <__ieee754_rem_pio2+0x1ce>
 8006726:	462b      	mov	r3, r5
 8006728:	4622      	mov	r2, r4
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	f7f9 fdbb 	bl	80002a8 <__aeabi_dsub>
 8006732:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006736:	9303      	str	r3, [sp, #12]
 8006738:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800673c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006740:	f1b8 0f10 	cmp.w	r8, #16
 8006744:	dc02      	bgt.n	800674c <__ieee754_rem_pio2+0x1d4>
 8006746:	e9ca 0100 	strd	r0, r1, [sl]
 800674a:	e039      	b.n	80067c0 <__ieee754_rem_pio2+0x248>
 800674c:	a34e      	add	r3, pc, #312	; (adr r3, 8006888 <__ieee754_rem_pio2+0x310>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	ec51 0b18 	vmov	r0, r1, d8
 8006756:	f7f9 ff5f 	bl	8000618 <__aeabi_dmul>
 800675a:	4604      	mov	r4, r0
 800675c:	460d      	mov	r5, r1
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4630      	mov	r0, r6
 8006764:	4639      	mov	r1, r7
 8006766:	f7f9 fd9f 	bl	80002a8 <__aeabi_dsub>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4680      	mov	r8, r0
 8006770:	4689      	mov	r9, r1
 8006772:	4630      	mov	r0, r6
 8006774:	4639      	mov	r1, r7
 8006776:	f7f9 fd97 	bl	80002a8 <__aeabi_dsub>
 800677a:	4622      	mov	r2, r4
 800677c:	462b      	mov	r3, r5
 800677e:	f7f9 fd93 	bl	80002a8 <__aeabi_dsub>
 8006782:	a343      	add	r3, pc, #268	; (adr r3, 8006890 <__ieee754_rem_pio2+0x318>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	4604      	mov	r4, r0
 800678a:	460d      	mov	r5, r1
 800678c:	ec51 0b18 	vmov	r0, r1, d8
 8006790:	f7f9 ff42 	bl	8000618 <__aeabi_dmul>
 8006794:	4622      	mov	r2, r4
 8006796:	462b      	mov	r3, r5
 8006798:	f7f9 fd86 	bl	80002a8 <__aeabi_dsub>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4604      	mov	r4, r0
 80067a2:	460d      	mov	r5, r1
 80067a4:	4640      	mov	r0, r8
 80067a6:	4649      	mov	r1, r9
 80067a8:	f7f9 fd7e 	bl	80002a8 <__aeabi_dsub>
 80067ac:	9a03      	ldr	r2, [sp, #12]
 80067ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b31      	cmp	r3, #49	; 0x31
 80067b6:	dc24      	bgt.n	8006802 <__ieee754_rem_pio2+0x28a>
 80067b8:	e9ca 0100 	strd	r0, r1, [sl]
 80067bc:	4646      	mov	r6, r8
 80067be:	464f      	mov	r7, r9
 80067c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80067c4:	4630      	mov	r0, r6
 80067c6:	4642      	mov	r2, r8
 80067c8:	464b      	mov	r3, r9
 80067ca:	4639      	mov	r1, r7
 80067cc:	f7f9 fd6c 	bl	80002a8 <__aeabi_dsub>
 80067d0:	462b      	mov	r3, r5
 80067d2:	4622      	mov	r2, r4
 80067d4:	f7f9 fd68 	bl	80002a8 <__aeabi_dsub>
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80067e0:	f6bf af0a 	bge.w	80065f8 <__ieee754_rem_pio2+0x80>
 80067e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80067e8:	f8ca 3004 	str.w	r3, [sl, #4]
 80067ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067f0:	f8ca 8000 	str.w	r8, [sl]
 80067f4:	f8ca 0008 	str.w	r0, [sl, #8]
 80067f8:	f8ca 300c 	str.w	r3, [sl, #12]
 80067fc:	f1cb 0b00 	rsb	fp, fp, #0
 8006800:	e6fa      	b.n	80065f8 <__ieee754_rem_pio2+0x80>
 8006802:	a327      	add	r3, pc, #156	; (adr r3, 80068a0 <__ieee754_rem_pio2+0x328>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	ec51 0b18 	vmov	r0, r1, d8
 800680c:	f7f9 ff04 	bl	8000618 <__aeabi_dmul>
 8006810:	4604      	mov	r4, r0
 8006812:	460d      	mov	r5, r1
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4640      	mov	r0, r8
 800681a:	4649      	mov	r1, r9
 800681c:	f7f9 fd44 	bl	80002a8 <__aeabi_dsub>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4606      	mov	r6, r0
 8006826:	460f      	mov	r7, r1
 8006828:	4640      	mov	r0, r8
 800682a:	4649      	mov	r1, r9
 800682c:	f7f9 fd3c 	bl	80002a8 <__aeabi_dsub>
 8006830:	4622      	mov	r2, r4
 8006832:	462b      	mov	r3, r5
 8006834:	f7f9 fd38 	bl	80002a8 <__aeabi_dsub>
 8006838:	a31b      	add	r3, pc, #108	; (adr r3, 80068a8 <__ieee754_rem_pio2+0x330>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	4604      	mov	r4, r0
 8006840:	460d      	mov	r5, r1
 8006842:	ec51 0b18 	vmov	r0, r1, d8
 8006846:	f7f9 fee7 	bl	8000618 <__aeabi_dmul>
 800684a:	4622      	mov	r2, r4
 800684c:	462b      	mov	r3, r5
 800684e:	f7f9 fd2b 	bl	80002a8 <__aeabi_dsub>
 8006852:	4604      	mov	r4, r0
 8006854:	460d      	mov	r5, r1
 8006856:	e75f      	b.n	8006718 <__ieee754_rem_pio2+0x1a0>
 8006858:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <__ieee754_rem_pio2+0x350>)
 800685a:	4598      	cmp	r8, r3
 800685c:	dd36      	ble.n	80068cc <__ieee754_rem_pio2+0x354>
 800685e:	ee10 2a10 	vmov	r2, s0
 8006862:	462b      	mov	r3, r5
 8006864:	4620      	mov	r0, r4
 8006866:	4629      	mov	r1, r5
 8006868:	f7f9 fd1e 	bl	80002a8 <__aeabi_dsub>
 800686c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006870:	e9ca 0100 	strd	r0, r1, [sl]
 8006874:	e694      	b.n	80065a0 <__ieee754_rem_pio2+0x28>
 8006876:	bf00      	nop
 8006878:	54400000 	.word	0x54400000
 800687c:	3ff921fb 	.word	0x3ff921fb
 8006880:	1a626331 	.word	0x1a626331
 8006884:	3dd0b461 	.word	0x3dd0b461
 8006888:	1a600000 	.word	0x1a600000
 800688c:	3dd0b461 	.word	0x3dd0b461
 8006890:	2e037073 	.word	0x2e037073
 8006894:	3ba3198a 	.word	0x3ba3198a
 8006898:	6dc9c883 	.word	0x6dc9c883
 800689c:	3fe45f30 	.word	0x3fe45f30
 80068a0:	2e000000 	.word	0x2e000000
 80068a4:	3ba3198a 	.word	0x3ba3198a
 80068a8:	252049c1 	.word	0x252049c1
 80068ac:	397b839a 	.word	0x397b839a
 80068b0:	3fe921fb 	.word	0x3fe921fb
 80068b4:	4002d97b 	.word	0x4002d97b
 80068b8:	3ff921fb 	.word	0x3ff921fb
 80068bc:	413921fb 	.word	0x413921fb
 80068c0:	3fe00000 	.word	0x3fe00000
 80068c4:	080078e0 	.word	0x080078e0
 80068c8:	7fefffff 	.word	0x7fefffff
 80068cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80068d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80068d4:	ee10 0a10 	vmov	r0, s0
 80068d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80068dc:	ee10 6a10 	vmov	r6, s0
 80068e0:	460f      	mov	r7, r1
 80068e2:	f7fa f933 	bl	8000b4c <__aeabi_d2iz>
 80068e6:	f7f9 fe2d 	bl	8000544 <__aeabi_i2d>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4630      	mov	r0, r6
 80068f0:	4639      	mov	r1, r7
 80068f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068f6:	f7f9 fcd7 	bl	80002a8 <__aeabi_dsub>
 80068fa:	4b23      	ldr	r3, [pc, #140]	; (8006988 <__ieee754_rem_pio2+0x410>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	f7f9 fe8b 	bl	8000618 <__aeabi_dmul>
 8006902:	460f      	mov	r7, r1
 8006904:	4606      	mov	r6, r0
 8006906:	f7fa f921 	bl	8000b4c <__aeabi_d2iz>
 800690a:	f7f9 fe1b 	bl	8000544 <__aeabi_i2d>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	4630      	mov	r0, r6
 8006914:	4639      	mov	r1, r7
 8006916:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800691a:	f7f9 fcc5 	bl	80002a8 <__aeabi_dsub>
 800691e:	4b1a      	ldr	r3, [pc, #104]	; (8006988 <__ieee754_rem_pio2+0x410>)
 8006920:	2200      	movs	r2, #0
 8006922:	f7f9 fe79 	bl	8000618 <__aeabi_dmul>
 8006926:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800692a:	ad04      	add	r5, sp, #16
 800692c:	f04f 0803 	mov.w	r8, #3
 8006930:	46a9      	mov	r9, r5
 8006932:	2600      	movs	r6, #0
 8006934:	2700      	movs	r7, #0
 8006936:	4632      	mov	r2, r6
 8006938:	463b      	mov	r3, r7
 800693a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800693e:	46c3      	mov	fp, r8
 8006940:	3d08      	subs	r5, #8
 8006942:	f108 38ff 	add.w	r8, r8, #4294967295
 8006946:	f7fa f8cf 	bl	8000ae8 <__aeabi_dcmpeq>
 800694a:	2800      	cmp	r0, #0
 800694c:	d1f3      	bne.n	8006936 <__ieee754_rem_pio2+0x3be>
 800694e:	4b0f      	ldr	r3, [pc, #60]	; (800698c <__ieee754_rem_pio2+0x414>)
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	2302      	movs	r3, #2
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	4622      	mov	r2, r4
 8006958:	465b      	mov	r3, fp
 800695a:	4651      	mov	r1, sl
 800695c:	4648      	mov	r0, r9
 800695e:	f000 f8df 	bl	8006b20 <__kernel_rem_pio2>
 8006962:	9b02      	ldr	r3, [sp, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	4683      	mov	fp, r0
 8006968:	f6bf ae46 	bge.w	80065f8 <__ieee754_rem_pio2+0x80>
 800696c:	e9da 2100 	ldrd	r2, r1, [sl]
 8006970:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006974:	e9ca 2300 	strd	r2, r3, [sl]
 8006978:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800697c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006980:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006984:	e73a      	b.n	80067fc <__ieee754_rem_pio2+0x284>
 8006986:	bf00      	nop
 8006988:	41700000 	.word	0x41700000
 800698c:	08007960 	.word	0x08007960

08006990 <__kernel_cos>:
 8006990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	ec57 6b10 	vmov	r6, r7, d0
 8006998:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800699c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80069a0:	ed8d 1b00 	vstr	d1, [sp]
 80069a4:	da07      	bge.n	80069b6 <__kernel_cos+0x26>
 80069a6:	ee10 0a10 	vmov	r0, s0
 80069aa:	4639      	mov	r1, r7
 80069ac:	f7fa f8ce 	bl	8000b4c <__aeabi_d2iz>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	f000 8088 	beq.w	8006ac6 <__kernel_cos+0x136>
 80069b6:	4632      	mov	r2, r6
 80069b8:	463b      	mov	r3, r7
 80069ba:	4630      	mov	r0, r6
 80069bc:	4639      	mov	r1, r7
 80069be:	f7f9 fe2b 	bl	8000618 <__aeabi_dmul>
 80069c2:	4b51      	ldr	r3, [pc, #324]	; (8006b08 <__kernel_cos+0x178>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	4604      	mov	r4, r0
 80069c8:	460d      	mov	r5, r1
 80069ca:	f7f9 fe25 	bl	8000618 <__aeabi_dmul>
 80069ce:	a340      	add	r3, pc, #256	; (adr r3, 8006ad0 <__kernel_cos+0x140>)
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	4682      	mov	sl, r0
 80069d6:	468b      	mov	fp, r1
 80069d8:	4620      	mov	r0, r4
 80069da:	4629      	mov	r1, r5
 80069dc:	f7f9 fe1c 	bl	8000618 <__aeabi_dmul>
 80069e0:	a33d      	add	r3, pc, #244	; (adr r3, 8006ad8 <__kernel_cos+0x148>)
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f7f9 fc61 	bl	80002ac <__adddf3>
 80069ea:	4622      	mov	r2, r4
 80069ec:	462b      	mov	r3, r5
 80069ee:	f7f9 fe13 	bl	8000618 <__aeabi_dmul>
 80069f2:	a33b      	add	r3, pc, #236	; (adr r3, 8006ae0 <__kernel_cos+0x150>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f7f9 fc56 	bl	80002a8 <__aeabi_dsub>
 80069fc:	4622      	mov	r2, r4
 80069fe:	462b      	mov	r3, r5
 8006a00:	f7f9 fe0a 	bl	8000618 <__aeabi_dmul>
 8006a04:	a338      	add	r3, pc, #224	; (adr r3, 8006ae8 <__kernel_cos+0x158>)
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	f7f9 fc4f 	bl	80002ac <__adddf3>
 8006a0e:	4622      	mov	r2, r4
 8006a10:	462b      	mov	r3, r5
 8006a12:	f7f9 fe01 	bl	8000618 <__aeabi_dmul>
 8006a16:	a336      	add	r3, pc, #216	; (adr r3, 8006af0 <__kernel_cos+0x160>)
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f7f9 fc44 	bl	80002a8 <__aeabi_dsub>
 8006a20:	4622      	mov	r2, r4
 8006a22:	462b      	mov	r3, r5
 8006a24:	f7f9 fdf8 	bl	8000618 <__aeabi_dmul>
 8006a28:	a333      	add	r3, pc, #204	; (adr r3, 8006af8 <__kernel_cos+0x168>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f7f9 fc3d 	bl	80002ac <__adddf3>
 8006a32:	4622      	mov	r2, r4
 8006a34:	462b      	mov	r3, r5
 8006a36:	f7f9 fdef 	bl	8000618 <__aeabi_dmul>
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	f7f9 fdeb 	bl	8000618 <__aeabi_dmul>
 8006a42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a46:	4604      	mov	r4, r0
 8006a48:	460d      	mov	r5, r1
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	4639      	mov	r1, r7
 8006a4e:	f7f9 fde3 	bl	8000618 <__aeabi_dmul>
 8006a52:	460b      	mov	r3, r1
 8006a54:	4602      	mov	r2, r0
 8006a56:	4629      	mov	r1, r5
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f7f9 fc25 	bl	80002a8 <__aeabi_dsub>
 8006a5e:	4b2b      	ldr	r3, [pc, #172]	; (8006b0c <__kernel_cos+0x17c>)
 8006a60:	4598      	cmp	r8, r3
 8006a62:	4606      	mov	r6, r0
 8006a64:	460f      	mov	r7, r1
 8006a66:	dc10      	bgt.n	8006a8a <__kernel_cos+0xfa>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	4659      	mov	r1, fp
 8006a70:	f7f9 fc1a 	bl	80002a8 <__aeabi_dsub>
 8006a74:	460b      	mov	r3, r1
 8006a76:	4926      	ldr	r1, [pc, #152]	; (8006b10 <__kernel_cos+0x180>)
 8006a78:	4602      	mov	r2, r0
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	f7f9 fc14 	bl	80002a8 <__aeabi_dsub>
 8006a80:	ec41 0b10 	vmov	d0, r0, r1
 8006a84:	b003      	add	sp, #12
 8006a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8a:	4b22      	ldr	r3, [pc, #136]	; (8006b14 <__kernel_cos+0x184>)
 8006a8c:	4920      	ldr	r1, [pc, #128]	; (8006b10 <__kernel_cos+0x180>)
 8006a8e:	4598      	cmp	r8, r3
 8006a90:	bfcc      	ite	gt
 8006a92:	4d21      	ldrgt	r5, [pc, #132]	; (8006b18 <__kernel_cos+0x188>)
 8006a94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006a98:	2400      	movs	r4, #0
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	f7f9 fc02 	bl	80002a8 <__aeabi_dsub>
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	4680      	mov	r8, r0
 8006aa8:	4689      	mov	r9, r1
 8006aaa:	462b      	mov	r3, r5
 8006aac:	4650      	mov	r0, sl
 8006aae:	4659      	mov	r1, fp
 8006ab0:	f7f9 fbfa 	bl	80002a8 <__aeabi_dsub>
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	f7f9 fbf6 	bl	80002a8 <__aeabi_dsub>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	e7da      	b.n	8006a7c <__kernel_cos+0xec>
 8006ac6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006b00 <__kernel_cos+0x170>
 8006aca:	e7db      	b.n	8006a84 <__kernel_cos+0xf4>
 8006acc:	f3af 8000 	nop.w
 8006ad0:	be8838d4 	.word	0xbe8838d4
 8006ad4:	bda8fae9 	.word	0xbda8fae9
 8006ad8:	bdb4b1c4 	.word	0xbdb4b1c4
 8006adc:	3e21ee9e 	.word	0x3e21ee9e
 8006ae0:	809c52ad 	.word	0x809c52ad
 8006ae4:	3e927e4f 	.word	0x3e927e4f
 8006ae8:	19cb1590 	.word	0x19cb1590
 8006aec:	3efa01a0 	.word	0x3efa01a0
 8006af0:	16c15177 	.word	0x16c15177
 8006af4:	3f56c16c 	.word	0x3f56c16c
 8006af8:	5555554c 	.word	0x5555554c
 8006afc:	3fa55555 	.word	0x3fa55555
 8006b00:	00000000 	.word	0x00000000
 8006b04:	3ff00000 	.word	0x3ff00000
 8006b08:	3fe00000 	.word	0x3fe00000
 8006b0c:	3fd33332 	.word	0x3fd33332
 8006b10:	3ff00000 	.word	0x3ff00000
 8006b14:	3fe90000 	.word	0x3fe90000
 8006b18:	3fd20000 	.word	0x3fd20000
 8006b1c:	00000000 	.word	0x00000000

08006b20 <__kernel_rem_pio2>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	ed2d 8b02 	vpush	{d8}
 8006b28:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006b2c:	f112 0f14 	cmn.w	r2, #20
 8006b30:	9308      	str	r3, [sp, #32]
 8006b32:	9101      	str	r1, [sp, #4]
 8006b34:	4bc4      	ldr	r3, [pc, #784]	; (8006e48 <__kernel_rem_pio2+0x328>)
 8006b36:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006b38:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b3e:	9302      	str	r3, [sp, #8]
 8006b40:	9b08      	ldr	r3, [sp, #32]
 8006b42:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b46:	bfa8      	it	ge
 8006b48:	1ed4      	subge	r4, r2, #3
 8006b4a:	9306      	str	r3, [sp, #24]
 8006b4c:	bfb2      	itee	lt
 8006b4e:	2400      	movlt	r4, #0
 8006b50:	2318      	movge	r3, #24
 8006b52:	fb94 f4f3 	sdivge	r4, r4, r3
 8006b56:	f06f 0317 	mvn.w	r3, #23
 8006b5a:	fb04 3303 	mla	r3, r4, r3, r3
 8006b5e:	eb03 0a02 	add.w	sl, r3, r2
 8006b62:	9b02      	ldr	r3, [sp, #8]
 8006b64:	9a06      	ldr	r2, [sp, #24]
 8006b66:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006e38 <__kernel_rem_pio2+0x318>
 8006b6a:	eb03 0802 	add.w	r8, r3, r2
 8006b6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006b70:	1aa7      	subs	r7, r4, r2
 8006b72:	ae22      	add	r6, sp, #136	; 0x88
 8006b74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006b78:	2500      	movs	r5, #0
 8006b7a:	4545      	cmp	r5, r8
 8006b7c:	dd13      	ble.n	8006ba6 <__kernel_rem_pio2+0x86>
 8006b7e:	9b08      	ldr	r3, [sp, #32]
 8006b80:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006e38 <__kernel_rem_pio2+0x318>
 8006b84:	aa22      	add	r2, sp, #136	; 0x88
 8006b86:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006b8a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006b8e:	f04f 0800 	mov.w	r8, #0
 8006b92:	9b02      	ldr	r3, [sp, #8]
 8006b94:	4598      	cmp	r8, r3
 8006b96:	dc2f      	bgt.n	8006bf8 <__kernel_rem_pio2+0xd8>
 8006b98:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006b9c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006ba0:	462f      	mov	r7, r5
 8006ba2:	2600      	movs	r6, #0
 8006ba4:	e01b      	b.n	8006bde <__kernel_rem_pio2+0xbe>
 8006ba6:	42ef      	cmn	r7, r5
 8006ba8:	d407      	bmi.n	8006bba <__kernel_rem_pio2+0x9a>
 8006baa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006bae:	f7f9 fcc9 	bl	8000544 <__aeabi_i2d>
 8006bb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006bb6:	3501      	adds	r5, #1
 8006bb8:	e7df      	b.n	8006b7a <__kernel_rem_pio2+0x5a>
 8006bba:	ec51 0b18 	vmov	r0, r1, d8
 8006bbe:	e7f8      	b.n	8006bb2 <__kernel_rem_pio2+0x92>
 8006bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006bc8:	f7f9 fd26 	bl	8000618 <__aeabi_dmul>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bd4:	f7f9 fb6a 	bl	80002ac <__adddf3>
 8006bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bdc:	3601      	adds	r6, #1
 8006bde:	9b06      	ldr	r3, [sp, #24]
 8006be0:	429e      	cmp	r6, r3
 8006be2:	f1a7 0708 	sub.w	r7, r7, #8
 8006be6:	ddeb      	ble.n	8006bc0 <__kernel_rem_pio2+0xa0>
 8006be8:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006bec:	f108 0801 	add.w	r8, r8, #1
 8006bf0:	ecab 7b02 	vstmia	fp!, {d7}
 8006bf4:	3508      	adds	r5, #8
 8006bf6:	e7cc      	b.n	8006b92 <__kernel_rem_pio2+0x72>
 8006bf8:	9b02      	ldr	r3, [sp, #8]
 8006bfa:	aa0e      	add	r2, sp, #56	; 0x38
 8006bfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c00:	930d      	str	r3, [sp, #52]	; 0x34
 8006c02:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006c04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006c08:	9c02      	ldr	r4, [sp, #8]
 8006c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8006c0c:	00e3      	lsls	r3, r4, #3
 8006c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c10:	ab9a      	add	r3, sp, #616	; 0x268
 8006c12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c16:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006c1a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006c1e:	ab72      	add	r3, sp, #456	; 0x1c8
 8006c20:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006c24:	46c3      	mov	fp, r8
 8006c26:	46a1      	mov	r9, r4
 8006c28:	f1b9 0f00 	cmp.w	r9, #0
 8006c2c:	f1a5 0508 	sub.w	r5, r5, #8
 8006c30:	dc77      	bgt.n	8006d22 <__kernel_rem_pio2+0x202>
 8006c32:	ec47 6b10 	vmov	d0, r6, r7
 8006c36:	4650      	mov	r0, sl
 8006c38:	f000 fc0a 	bl	8007450 <scalbn>
 8006c3c:	ec57 6b10 	vmov	r6, r7, d0
 8006c40:	2200      	movs	r2, #0
 8006c42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006c46:	ee10 0a10 	vmov	r0, s0
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 fce4 	bl	8000618 <__aeabi_dmul>
 8006c50:	ec41 0b10 	vmov	d0, r0, r1
 8006c54:	f000 fb7c 	bl	8007350 <floor>
 8006c58:	4b7c      	ldr	r3, [pc, #496]	; (8006e4c <__kernel_rem_pio2+0x32c>)
 8006c5a:	ec51 0b10 	vmov	r0, r1, d0
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f7f9 fcda 	bl	8000618 <__aeabi_dmul>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4630      	mov	r0, r6
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	f7f9 fb1c 	bl	80002a8 <__aeabi_dsub>
 8006c70:	460f      	mov	r7, r1
 8006c72:	4606      	mov	r6, r0
 8006c74:	f7f9 ff6a 	bl	8000b4c <__aeabi_d2iz>
 8006c78:	9004      	str	r0, [sp, #16]
 8006c7a:	f7f9 fc63 	bl	8000544 <__aeabi_i2d>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4630      	mov	r0, r6
 8006c84:	4639      	mov	r1, r7
 8006c86:	f7f9 fb0f 	bl	80002a8 <__aeabi_dsub>
 8006c8a:	f1ba 0f00 	cmp.w	sl, #0
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460f      	mov	r7, r1
 8006c92:	dd6d      	ble.n	8006d70 <__kernel_rem_pio2+0x250>
 8006c94:	1e62      	subs	r2, r4, #1
 8006c96:	ab0e      	add	r3, sp, #56	; 0x38
 8006c98:	9d04      	ldr	r5, [sp, #16]
 8006c9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006c9e:	f1ca 0118 	rsb	r1, sl, #24
 8006ca2:	fa40 f301 	asr.w	r3, r0, r1
 8006ca6:	441d      	add	r5, r3
 8006ca8:	408b      	lsls	r3, r1
 8006caa:	1ac0      	subs	r0, r0, r3
 8006cac:	ab0e      	add	r3, sp, #56	; 0x38
 8006cae:	9504      	str	r5, [sp, #16]
 8006cb0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006cb4:	f1ca 0317 	rsb	r3, sl, #23
 8006cb8:	fa40 fb03 	asr.w	fp, r0, r3
 8006cbc:	f1bb 0f00 	cmp.w	fp, #0
 8006cc0:	dd65      	ble.n	8006d8e <__kernel_rem_pio2+0x26e>
 8006cc2:	9b04      	ldr	r3, [sp, #16]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	9304      	str	r3, [sp, #16]
 8006cca:	4615      	mov	r5, r2
 8006ccc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006cd0:	4294      	cmp	r4, r2
 8006cd2:	f300 809c 	bgt.w	8006e0e <__kernel_rem_pio2+0x2ee>
 8006cd6:	f1ba 0f00 	cmp.w	sl, #0
 8006cda:	dd07      	ble.n	8006cec <__kernel_rem_pio2+0x1cc>
 8006cdc:	f1ba 0f01 	cmp.w	sl, #1
 8006ce0:	f000 80c0 	beq.w	8006e64 <__kernel_rem_pio2+0x344>
 8006ce4:	f1ba 0f02 	cmp.w	sl, #2
 8006ce8:	f000 80c6 	beq.w	8006e78 <__kernel_rem_pio2+0x358>
 8006cec:	f1bb 0f02 	cmp.w	fp, #2
 8006cf0:	d14d      	bne.n	8006d8e <__kernel_rem_pio2+0x26e>
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	463b      	mov	r3, r7
 8006cf6:	4956      	ldr	r1, [pc, #344]	; (8006e50 <__kernel_rem_pio2+0x330>)
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	f7f9 fad5 	bl	80002a8 <__aeabi_dsub>
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460f      	mov	r7, r1
 8006d02:	2d00      	cmp	r5, #0
 8006d04:	d043      	beq.n	8006d8e <__kernel_rem_pio2+0x26e>
 8006d06:	4650      	mov	r0, sl
 8006d08:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006e40 <__kernel_rem_pio2+0x320>
 8006d0c:	f000 fba0 	bl	8007450 <scalbn>
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	ec53 2b10 	vmov	r2, r3, d0
 8006d18:	f7f9 fac6 	bl	80002a8 <__aeabi_dsub>
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	e035      	b.n	8006d8e <__kernel_rem_pio2+0x26e>
 8006d22:	4b4c      	ldr	r3, [pc, #304]	; (8006e54 <__kernel_rem_pio2+0x334>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	4630      	mov	r0, r6
 8006d28:	4639      	mov	r1, r7
 8006d2a:	f7f9 fc75 	bl	8000618 <__aeabi_dmul>
 8006d2e:	f7f9 ff0d 	bl	8000b4c <__aeabi_d2iz>
 8006d32:	f7f9 fc07 	bl	8000544 <__aeabi_i2d>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	ec43 2b18 	vmov	d8, r2, r3
 8006d3e:	4b46      	ldr	r3, [pc, #280]	; (8006e58 <__kernel_rem_pio2+0x338>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	f7f9 fc69 	bl	8000618 <__aeabi_dmul>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	f7f9 faab 	bl	80002a8 <__aeabi_dsub>
 8006d52:	f7f9 fefb 	bl	8000b4c <__aeabi_d2iz>
 8006d56:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d5a:	f84b 0b04 	str.w	r0, [fp], #4
 8006d5e:	ec51 0b18 	vmov	r0, r1, d8
 8006d62:	f7f9 faa3 	bl	80002ac <__adddf3>
 8006d66:	f109 39ff 	add.w	r9, r9, #4294967295
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	460f      	mov	r7, r1
 8006d6e:	e75b      	b.n	8006c28 <__kernel_rem_pio2+0x108>
 8006d70:	d106      	bne.n	8006d80 <__kernel_rem_pio2+0x260>
 8006d72:	1e63      	subs	r3, r4, #1
 8006d74:	aa0e      	add	r2, sp, #56	; 0x38
 8006d76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006d7a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006d7e:	e79d      	b.n	8006cbc <__kernel_rem_pio2+0x19c>
 8006d80:	4b36      	ldr	r3, [pc, #216]	; (8006e5c <__kernel_rem_pio2+0x33c>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	f7f9 fece 	bl	8000b24 <__aeabi_dcmpge>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d13d      	bne.n	8006e08 <__kernel_rem_pio2+0x2e8>
 8006d8c:	4683      	mov	fp, r0
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2300      	movs	r3, #0
 8006d92:	4630      	mov	r0, r6
 8006d94:	4639      	mov	r1, r7
 8006d96:	f7f9 fea7 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	f000 80c0 	beq.w	8006f20 <__kernel_rem_pio2+0x400>
 8006da0:	1e65      	subs	r5, r4, #1
 8006da2:	462b      	mov	r3, r5
 8006da4:	2200      	movs	r2, #0
 8006da6:	9902      	ldr	r1, [sp, #8]
 8006da8:	428b      	cmp	r3, r1
 8006daa:	da6c      	bge.n	8006e86 <__kernel_rem_pio2+0x366>
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	f000 8089 	beq.w	8006ec4 <__kernel_rem_pio2+0x3a4>
 8006db2:	ab0e      	add	r3, sp, #56	; 0x38
 8006db4:	f1aa 0a18 	sub.w	sl, sl, #24
 8006db8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80ad 	beq.w	8006f1c <__kernel_rem_pio2+0x3fc>
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006e40 <__kernel_rem_pio2+0x320>
 8006dc8:	f000 fb42 	bl	8007450 <scalbn>
 8006dcc:	ab9a      	add	r3, sp, #616	; 0x268
 8006dce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006dd2:	ec57 6b10 	vmov	r6, r7, d0
 8006dd6:	00ec      	lsls	r4, r5, #3
 8006dd8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006ddc:	46aa      	mov	sl, r5
 8006dde:	f1ba 0f00 	cmp.w	sl, #0
 8006de2:	f280 80d6 	bge.w	8006f92 <__kernel_rem_pio2+0x472>
 8006de6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006e38 <__kernel_rem_pio2+0x318>
 8006dea:	462e      	mov	r6, r5
 8006dec:	2e00      	cmp	r6, #0
 8006dee:	f2c0 8104 	blt.w	8006ffa <__kernel_rem_pio2+0x4da>
 8006df2:	ab72      	add	r3, sp, #456	; 0x1c8
 8006df4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006df8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006e60 <__kernel_rem_pio2+0x340>
 8006dfc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006e00:	f04f 0800 	mov.w	r8, #0
 8006e04:	1baf      	subs	r7, r5, r6
 8006e06:	e0ea      	b.n	8006fde <__kernel_rem_pio2+0x4be>
 8006e08:	f04f 0b02 	mov.w	fp, #2
 8006e0c:	e759      	b.n	8006cc2 <__kernel_rem_pio2+0x1a2>
 8006e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e12:	b955      	cbnz	r5, 8006e2a <__kernel_rem_pio2+0x30a>
 8006e14:	b123      	cbz	r3, 8006e20 <__kernel_rem_pio2+0x300>
 8006e16:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006e1a:	f8c8 3000 	str.w	r3, [r8]
 8006e1e:	2301      	movs	r3, #1
 8006e20:	3201      	adds	r2, #1
 8006e22:	f108 0804 	add.w	r8, r8, #4
 8006e26:	461d      	mov	r5, r3
 8006e28:	e752      	b.n	8006cd0 <__kernel_rem_pio2+0x1b0>
 8006e2a:	1acb      	subs	r3, r1, r3
 8006e2c:	f8c8 3000 	str.w	r3, [r8]
 8006e30:	462b      	mov	r3, r5
 8006e32:	e7f5      	b.n	8006e20 <__kernel_rem_pio2+0x300>
 8006e34:	f3af 8000 	nop.w
	...
 8006e44:	3ff00000 	.word	0x3ff00000
 8006e48:	08007aa8 	.word	0x08007aa8
 8006e4c:	40200000 	.word	0x40200000
 8006e50:	3ff00000 	.word	0x3ff00000
 8006e54:	3e700000 	.word	0x3e700000
 8006e58:	41700000 	.word	0x41700000
 8006e5c:	3fe00000 	.word	0x3fe00000
 8006e60:	08007a68 	.word	0x08007a68
 8006e64:	1e62      	subs	r2, r4, #1
 8006e66:	ab0e      	add	r3, sp, #56	; 0x38
 8006e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006e70:	a90e      	add	r1, sp, #56	; 0x38
 8006e72:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006e76:	e739      	b.n	8006cec <__kernel_rem_pio2+0x1cc>
 8006e78:	1e62      	subs	r2, r4, #1
 8006e7a:	ab0e      	add	r3, sp, #56	; 0x38
 8006e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006e84:	e7f4      	b.n	8006e70 <__kernel_rem_pio2+0x350>
 8006e86:	a90e      	add	r1, sp, #56	; 0x38
 8006e88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	e789      	b.n	8006da6 <__kernel_rem_pio2+0x286>
 8006e92:	3301      	adds	r3, #1
 8006e94:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006e98:	2900      	cmp	r1, #0
 8006e9a:	d0fa      	beq.n	8006e92 <__kernel_rem_pio2+0x372>
 8006e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e9e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006ea2:	446a      	add	r2, sp
 8006ea4:	3a98      	subs	r2, #152	; 0x98
 8006ea6:	920a      	str	r2, [sp, #40]	; 0x28
 8006ea8:	9a08      	ldr	r2, [sp, #32]
 8006eaa:	18e3      	adds	r3, r4, r3
 8006eac:	18a5      	adds	r5, r4, r2
 8006eae:	aa22      	add	r2, sp, #136	; 0x88
 8006eb0:	f104 0801 	add.w	r8, r4, #1
 8006eb4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	9b04      	ldr	r3, [sp, #16]
 8006ebc:	4543      	cmp	r3, r8
 8006ebe:	da04      	bge.n	8006eca <__kernel_rem_pio2+0x3aa>
 8006ec0:	461c      	mov	r4, r3
 8006ec2:	e6a3      	b.n	8006c0c <__kernel_rem_pio2+0xec>
 8006ec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e7e4      	b.n	8006e94 <__kernel_rem_pio2+0x374>
 8006eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ecc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006ed0:	f7f9 fb38 	bl	8000544 <__aeabi_i2d>
 8006ed4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eda:	46ab      	mov	fp, r5
 8006edc:	461c      	mov	r4, r3
 8006ede:	f04f 0900 	mov.w	r9, #0
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	2700      	movs	r7, #0
 8006ee6:	9b06      	ldr	r3, [sp, #24]
 8006ee8:	4599      	cmp	r9, r3
 8006eea:	dd06      	ble.n	8006efa <__kernel_rem_pio2+0x3da>
 8006eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eee:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006ef2:	f108 0801 	add.w	r8, r8, #1
 8006ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ef8:	e7df      	b.n	8006eba <__kernel_rem_pio2+0x39a>
 8006efa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006efe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006f02:	f7f9 fb89 	bl	8000618 <__aeabi_dmul>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	f7f9 f9cd 	bl	80002ac <__adddf3>
 8006f12:	f109 0901 	add.w	r9, r9, #1
 8006f16:	4606      	mov	r6, r0
 8006f18:	460f      	mov	r7, r1
 8006f1a:	e7e4      	b.n	8006ee6 <__kernel_rem_pio2+0x3c6>
 8006f1c:	3d01      	subs	r5, #1
 8006f1e:	e748      	b.n	8006db2 <__kernel_rem_pio2+0x292>
 8006f20:	ec47 6b10 	vmov	d0, r6, r7
 8006f24:	f1ca 0000 	rsb	r0, sl, #0
 8006f28:	f000 fa92 	bl	8007450 <scalbn>
 8006f2c:	ec57 6b10 	vmov	r6, r7, d0
 8006f30:	4ba0      	ldr	r3, [pc, #640]	; (80071b4 <__kernel_rem_pio2+0x694>)
 8006f32:	ee10 0a10 	vmov	r0, s0
 8006f36:	2200      	movs	r2, #0
 8006f38:	4639      	mov	r1, r7
 8006f3a:	f7f9 fdf3 	bl	8000b24 <__aeabi_dcmpge>
 8006f3e:	b1f8      	cbz	r0, 8006f80 <__kernel_rem_pio2+0x460>
 8006f40:	4b9d      	ldr	r3, [pc, #628]	; (80071b8 <__kernel_rem_pio2+0x698>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	4630      	mov	r0, r6
 8006f46:	4639      	mov	r1, r7
 8006f48:	f7f9 fb66 	bl	8000618 <__aeabi_dmul>
 8006f4c:	f7f9 fdfe 	bl	8000b4c <__aeabi_d2iz>
 8006f50:	4680      	mov	r8, r0
 8006f52:	f7f9 faf7 	bl	8000544 <__aeabi_i2d>
 8006f56:	4b97      	ldr	r3, [pc, #604]	; (80071b4 <__kernel_rem_pio2+0x694>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f7f9 fb5d 	bl	8000618 <__aeabi_dmul>
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4602      	mov	r2, r0
 8006f62:	4639      	mov	r1, r7
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7f9 f99f 	bl	80002a8 <__aeabi_dsub>
 8006f6a:	f7f9 fdef 	bl	8000b4c <__aeabi_d2iz>
 8006f6e:	1c65      	adds	r5, r4, #1
 8006f70:	ab0e      	add	r3, sp, #56	; 0x38
 8006f72:	f10a 0a18 	add.w	sl, sl, #24
 8006f76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006f7a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006f7e:	e720      	b.n	8006dc2 <__kernel_rem_pio2+0x2a2>
 8006f80:	4630      	mov	r0, r6
 8006f82:	4639      	mov	r1, r7
 8006f84:	f7f9 fde2 	bl	8000b4c <__aeabi_d2iz>
 8006f88:	ab0e      	add	r3, sp, #56	; 0x38
 8006f8a:	4625      	mov	r5, r4
 8006f8c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006f90:	e717      	b.n	8006dc2 <__kernel_rem_pio2+0x2a2>
 8006f92:	ab0e      	add	r3, sp, #56	; 0x38
 8006f94:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006f98:	f7f9 fad4 	bl	8000544 <__aeabi_i2d>
 8006f9c:	4632      	mov	r2, r6
 8006f9e:	463b      	mov	r3, r7
 8006fa0:	f7f9 fb3a 	bl	8000618 <__aeabi_dmul>
 8006fa4:	4b84      	ldr	r3, [pc, #528]	; (80071b8 <__kernel_rem_pio2+0x698>)
 8006fa6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006faa:	2200      	movs	r2, #0
 8006fac:	4630      	mov	r0, r6
 8006fae:	4639      	mov	r1, r7
 8006fb0:	f7f9 fb32 	bl	8000618 <__aeabi_dmul>
 8006fb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fb8:	4606      	mov	r6, r0
 8006fba:	460f      	mov	r7, r1
 8006fbc:	e70f      	b.n	8006dde <__kernel_rem_pio2+0x2be>
 8006fbe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006fc2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006fc6:	f7f9 fb27 	bl	8000618 <__aeabi_dmul>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fd2:	f7f9 f96b 	bl	80002ac <__adddf3>
 8006fd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fda:	f108 0801 	add.w	r8, r8, #1
 8006fde:	9b02      	ldr	r3, [sp, #8]
 8006fe0:	4598      	cmp	r8, r3
 8006fe2:	dc01      	bgt.n	8006fe8 <__kernel_rem_pio2+0x4c8>
 8006fe4:	45b8      	cmp	r8, r7
 8006fe6:	ddea      	ble.n	8006fbe <__kernel_rem_pio2+0x49e>
 8006fe8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006fec:	ab4a      	add	r3, sp, #296	; 0x128
 8006fee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006ff2:	ed87 7b00 	vstr	d7, [r7]
 8006ff6:	3e01      	subs	r6, #1
 8006ff8:	e6f8      	b.n	8006dec <__kernel_rem_pio2+0x2cc>
 8006ffa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	dc0b      	bgt.n	8007018 <__kernel_rem_pio2+0x4f8>
 8007000:	2b00      	cmp	r3, #0
 8007002:	dc35      	bgt.n	8007070 <__kernel_rem_pio2+0x550>
 8007004:	d059      	beq.n	80070ba <__kernel_rem_pio2+0x59a>
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	f003 0007 	and.w	r0, r3, #7
 800700c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007010:	ecbd 8b02 	vpop	{d8}
 8007014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007018:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800701a:	2b03      	cmp	r3, #3
 800701c:	d1f3      	bne.n	8007006 <__kernel_rem_pio2+0x4e6>
 800701e:	ab4a      	add	r3, sp, #296	; 0x128
 8007020:	4423      	add	r3, r4
 8007022:	9306      	str	r3, [sp, #24]
 8007024:	461c      	mov	r4, r3
 8007026:	469a      	mov	sl, r3
 8007028:	9502      	str	r5, [sp, #8]
 800702a:	9b02      	ldr	r3, [sp, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f1aa 0a08 	sub.w	sl, sl, #8
 8007032:	dc6b      	bgt.n	800710c <__kernel_rem_pio2+0x5ec>
 8007034:	46aa      	mov	sl, r5
 8007036:	f1ba 0f01 	cmp.w	sl, #1
 800703a:	f1a4 0408 	sub.w	r4, r4, #8
 800703e:	f300 8085 	bgt.w	800714c <__kernel_rem_pio2+0x62c>
 8007042:	9c06      	ldr	r4, [sp, #24]
 8007044:	2000      	movs	r0, #0
 8007046:	3408      	adds	r4, #8
 8007048:	2100      	movs	r1, #0
 800704a:	2d01      	cmp	r5, #1
 800704c:	f300 809d 	bgt.w	800718a <__kernel_rem_pio2+0x66a>
 8007050:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007054:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007058:	f1bb 0f00 	cmp.w	fp, #0
 800705c:	f040 809b 	bne.w	8007196 <__kernel_rem_pio2+0x676>
 8007060:	9b01      	ldr	r3, [sp, #4]
 8007062:	e9c3 5600 	strd	r5, r6, [r3]
 8007066:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800706a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800706e:	e7ca      	b.n	8007006 <__kernel_rem_pio2+0x4e6>
 8007070:	3408      	adds	r4, #8
 8007072:	ab4a      	add	r3, sp, #296	; 0x128
 8007074:	441c      	add	r4, r3
 8007076:	462e      	mov	r6, r5
 8007078:	2000      	movs	r0, #0
 800707a:	2100      	movs	r1, #0
 800707c:	2e00      	cmp	r6, #0
 800707e:	da36      	bge.n	80070ee <__kernel_rem_pio2+0x5ce>
 8007080:	f1bb 0f00 	cmp.w	fp, #0
 8007084:	d039      	beq.n	80070fa <__kernel_rem_pio2+0x5da>
 8007086:	4602      	mov	r2, r0
 8007088:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800708c:	9c01      	ldr	r4, [sp, #4]
 800708e:	e9c4 2300 	strd	r2, r3, [r4]
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800709a:	f7f9 f905 	bl	80002a8 <__aeabi_dsub>
 800709e:	ae4c      	add	r6, sp, #304	; 0x130
 80070a0:	2401      	movs	r4, #1
 80070a2:	42a5      	cmp	r5, r4
 80070a4:	da2c      	bge.n	8007100 <__kernel_rem_pio2+0x5e0>
 80070a6:	f1bb 0f00 	cmp.w	fp, #0
 80070aa:	d002      	beq.n	80070b2 <__kernel_rem_pio2+0x592>
 80070ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070b0:	4619      	mov	r1, r3
 80070b2:	9b01      	ldr	r3, [sp, #4]
 80070b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80070b8:	e7a5      	b.n	8007006 <__kernel_rem_pio2+0x4e6>
 80070ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80070be:	eb0d 0403 	add.w	r4, sp, r3
 80070c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80070c6:	2000      	movs	r0, #0
 80070c8:	2100      	movs	r1, #0
 80070ca:	2d00      	cmp	r5, #0
 80070cc:	da09      	bge.n	80070e2 <__kernel_rem_pio2+0x5c2>
 80070ce:	f1bb 0f00 	cmp.w	fp, #0
 80070d2:	d002      	beq.n	80070da <__kernel_rem_pio2+0x5ba>
 80070d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070d8:	4619      	mov	r1, r3
 80070da:	9b01      	ldr	r3, [sp, #4]
 80070dc:	e9c3 0100 	strd	r0, r1, [r3]
 80070e0:	e791      	b.n	8007006 <__kernel_rem_pio2+0x4e6>
 80070e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80070e6:	f7f9 f8e1 	bl	80002ac <__adddf3>
 80070ea:	3d01      	subs	r5, #1
 80070ec:	e7ed      	b.n	80070ca <__kernel_rem_pio2+0x5aa>
 80070ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80070f2:	f7f9 f8db 	bl	80002ac <__adddf3>
 80070f6:	3e01      	subs	r6, #1
 80070f8:	e7c0      	b.n	800707c <__kernel_rem_pio2+0x55c>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	e7c5      	b.n	800708c <__kernel_rem_pio2+0x56c>
 8007100:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007104:	f7f9 f8d2 	bl	80002ac <__adddf3>
 8007108:	3401      	adds	r4, #1
 800710a:	e7ca      	b.n	80070a2 <__kernel_rem_pio2+0x582>
 800710c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007110:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007114:	9b02      	ldr	r3, [sp, #8]
 8007116:	3b01      	subs	r3, #1
 8007118:	9302      	str	r3, [sp, #8]
 800711a:	4632      	mov	r2, r6
 800711c:	463b      	mov	r3, r7
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	f7f9 f8c3 	bl	80002ac <__adddf3>
 8007126:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4640      	mov	r0, r8
 8007130:	4649      	mov	r1, r9
 8007132:	f7f9 f8b9 	bl	80002a8 <__aeabi_dsub>
 8007136:	4632      	mov	r2, r6
 8007138:	463b      	mov	r3, r7
 800713a:	f7f9 f8b7 	bl	80002ac <__adddf3>
 800713e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007142:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007146:	ed8a 7b00 	vstr	d7, [sl]
 800714a:	e76e      	b.n	800702a <__kernel_rem_pio2+0x50a>
 800714c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007150:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007154:	4640      	mov	r0, r8
 8007156:	4632      	mov	r2, r6
 8007158:	463b      	mov	r3, r7
 800715a:	4649      	mov	r1, r9
 800715c:	f7f9 f8a6 	bl	80002ac <__adddf3>
 8007160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4640      	mov	r0, r8
 800716a:	4649      	mov	r1, r9
 800716c:	f7f9 f89c 	bl	80002a8 <__aeabi_dsub>
 8007170:	4632      	mov	r2, r6
 8007172:	463b      	mov	r3, r7
 8007174:	f7f9 f89a 	bl	80002ac <__adddf3>
 8007178:	ed9d 7b02 	vldr	d7, [sp, #8]
 800717c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007180:	ed84 7b00 	vstr	d7, [r4]
 8007184:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007188:	e755      	b.n	8007036 <__kernel_rem_pio2+0x516>
 800718a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800718e:	f7f9 f88d 	bl	80002ac <__adddf3>
 8007192:	3d01      	subs	r5, #1
 8007194:	e759      	b.n	800704a <__kernel_rem_pio2+0x52a>
 8007196:	9b01      	ldr	r3, [sp, #4]
 8007198:	9a01      	ldr	r2, [sp, #4]
 800719a:	601d      	str	r5, [r3, #0]
 800719c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80071a0:	605c      	str	r4, [r3, #4]
 80071a2:	609f      	str	r7, [r3, #8]
 80071a4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80071a8:	60d3      	str	r3, [r2, #12]
 80071aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ae:	6110      	str	r0, [r2, #16]
 80071b0:	6153      	str	r3, [r2, #20]
 80071b2:	e728      	b.n	8007006 <__kernel_rem_pio2+0x4e6>
 80071b4:	41700000 	.word	0x41700000
 80071b8:	3e700000 	.word	0x3e700000
 80071bc:	00000000 	.word	0x00000000

080071c0 <__kernel_sin>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	ed2d 8b04 	vpush	{d8-d9}
 80071c8:	eeb0 8a41 	vmov.f32	s16, s2
 80071cc:	eef0 8a61 	vmov.f32	s17, s3
 80071d0:	ec55 4b10 	vmov	r4, r5, d0
 80071d4:	b083      	sub	sp, #12
 80071d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80071da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80071de:	9001      	str	r0, [sp, #4]
 80071e0:	da06      	bge.n	80071f0 <__kernel_sin+0x30>
 80071e2:	ee10 0a10 	vmov	r0, s0
 80071e6:	4629      	mov	r1, r5
 80071e8:	f7f9 fcb0 	bl	8000b4c <__aeabi_d2iz>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d051      	beq.n	8007294 <__kernel_sin+0xd4>
 80071f0:	4622      	mov	r2, r4
 80071f2:	462b      	mov	r3, r5
 80071f4:	4620      	mov	r0, r4
 80071f6:	4629      	mov	r1, r5
 80071f8:	f7f9 fa0e 	bl	8000618 <__aeabi_dmul>
 80071fc:	4682      	mov	sl, r0
 80071fe:	468b      	mov	fp, r1
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4620      	mov	r0, r4
 8007206:	4629      	mov	r1, r5
 8007208:	f7f9 fa06 	bl	8000618 <__aeabi_dmul>
 800720c:	a341      	add	r3, pc, #260	; (adr r3, 8007314 <__kernel_sin+0x154>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	4680      	mov	r8, r0
 8007214:	4689      	mov	r9, r1
 8007216:	4650      	mov	r0, sl
 8007218:	4659      	mov	r1, fp
 800721a:	f7f9 f9fd 	bl	8000618 <__aeabi_dmul>
 800721e:	a33f      	add	r3, pc, #252	; (adr r3, 800731c <__kernel_sin+0x15c>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f9 f840 	bl	80002a8 <__aeabi_dsub>
 8007228:	4652      	mov	r2, sl
 800722a:	465b      	mov	r3, fp
 800722c:	f7f9 f9f4 	bl	8000618 <__aeabi_dmul>
 8007230:	a33c      	add	r3, pc, #240	; (adr r3, 8007324 <__kernel_sin+0x164>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f9 f839 	bl	80002ac <__adddf3>
 800723a:	4652      	mov	r2, sl
 800723c:	465b      	mov	r3, fp
 800723e:	f7f9 f9eb 	bl	8000618 <__aeabi_dmul>
 8007242:	a33a      	add	r3, pc, #232	; (adr r3, 800732c <__kernel_sin+0x16c>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f9 f82e 	bl	80002a8 <__aeabi_dsub>
 800724c:	4652      	mov	r2, sl
 800724e:	465b      	mov	r3, fp
 8007250:	f7f9 f9e2 	bl	8000618 <__aeabi_dmul>
 8007254:	a337      	add	r3, pc, #220	; (adr r3, 8007334 <__kernel_sin+0x174>)
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f7f9 f827 	bl	80002ac <__adddf3>
 800725e:	9b01      	ldr	r3, [sp, #4]
 8007260:	4606      	mov	r6, r0
 8007262:	460f      	mov	r7, r1
 8007264:	b9eb      	cbnz	r3, 80072a2 <__kernel_sin+0xe2>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4650      	mov	r0, sl
 800726c:	4659      	mov	r1, fp
 800726e:	f7f9 f9d3 	bl	8000618 <__aeabi_dmul>
 8007272:	a325      	add	r3, pc, #148	; (adr r3, 8007308 <__kernel_sin+0x148>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f9 f816 	bl	80002a8 <__aeabi_dsub>
 800727c:	4642      	mov	r2, r8
 800727e:	464b      	mov	r3, r9
 8007280:	f7f9 f9ca 	bl	8000618 <__aeabi_dmul>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4620      	mov	r0, r4
 800728a:	4629      	mov	r1, r5
 800728c:	f7f9 f80e 	bl	80002ac <__adddf3>
 8007290:	4604      	mov	r4, r0
 8007292:	460d      	mov	r5, r1
 8007294:	ec45 4b10 	vmov	d0, r4, r5
 8007298:	b003      	add	sp, #12
 800729a:	ecbd 8b04 	vpop	{d8-d9}
 800729e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a2:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <__kernel_sin+0x150>)
 80072a4:	ec51 0b18 	vmov	r0, r1, d8
 80072a8:	2200      	movs	r2, #0
 80072aa:	f7f9 f9b5 	bl	8000618 <__aeabi_dmul>
 80072ae:	4632      	mov	r2, r6
 80072b0:	ec41 0b19 	vmov	d9, r0, r1
 80072b4:	463b      	mov	r3, r7
 80072b6:	4640      	mov	r0, r8
 80072b8:	4649      	mov	r1, r9
 80072ba:	f7f9 f9ad 	bl	8000618 <__aeabi_dmul>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	ec51 0b19 	vmov	r0, r1, d9
 80072c6:	f7f8 ffef 	bl	80002a8 <__aeabi_dsub>
 80072ca:	4652      	mov	r2, sl
 80072cc:	465b      	mov	r3, fp
 80072ce:	f7f9 f9a3 	bl	8000618 <__aeabi_dmul>
 80072d2:	ec53 2b18 	vmov	r2, r3, d8
 80072d6:	f7f8 ffe7 	bl	80002a8 <__aeabi_dsub>
 80072da:	a30b      	add	r3, pc, #44	; (adr r3, 8007308 <__kernel_sin+0x148>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	4606      	mov	r6, r0
 80072e2:	460f      	mov	r7, r1
 80072e4:	4640      	mov	r0, r8
 80072e6:	4649      	mov	r1, r9
 80072e8:	f7f9 f996 	bl	8000618 <__aeabi_dmul>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4630      	mov	r0, r6
 80072f2:	4639      	mov	r1, r7
 80072f4:	f7f8 ffda 	bl	80002ac <__adddf3>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4620      	mov	r0, r4
 80072fe:	4629      	mov	r1, r5
 8007300:	f7f8 ffd2 	bl	80002a8 <__aeabi_dsub>
 8007304:	e7c4      	b.n	8007290 <__kernel_sin+0xd0>
 8007306:	bf00      	nop
 8007308:	55555549 	.word	0x55555549
 800730c:	3fc55555 	.word	0x3fc55555
 8007310:	3fe00000 	.word	0x3fe00000
 8007314:	5acfd57c 	.word	0x5acfd57c
 8007318:	3de5d93a 	.word	0x3de5d93a
 800731c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007320:	3e5ae5e6 	.word	0x3e5ae5e6
 8007324:	57b1fe7d 	.word	0x57b1fe7d
 8007328:	3ec71de3 	.word	0x3ec71de3
 800732c:	19c161d5 	.word	0x19c161d5
 8007330:	3f2a01a0 	.word	0x3f2a01a0
 8007334:	1110f8a6 	.word	0x1110f8a6
 8007338:	3f811111 	.word	0x3f811111

0800733c <fabs>:
 800733c:	ec51 0b10 	vmov	r0, r1, d0
 8007340:	ee10 2a10 	vmov	r2, s0
 8007344:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007348:	ec43 2b10 	vmov	d0, r2, r3
 800734c:	4770      	bx	lr
	...

08007350 <floor>:
 8007350:	ec51 0b10 	vmov	r0, r1, d0
 8007354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007358:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800735c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007360:	2e13      	cmp	r6, #19
 8007362:	ee10 5a10 	vmov	r5, s0
 8007366:	ee10 8a10 	vmov	r8, s0
 800736a:	460c      	mov	r4, r1
 800736c:	dc32      	bgt.n	80073d4 <floor+0x84>
 800736e:	2e00      	cmp	r6, #0
 8007370:	da14      	bge.n	800739c <floor+0x4c>
 8007372:	a333      	add	r3, pc, #204	; (adr r3, 8007440 <floor+0xf0>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f8 ff98 	bl	80002ac <__adddf3>
 800737c:	2200      	movs	r2, #0
 800737e:	2300      	movs	r3, #0
 8007380:	f7f9 fbda 	bl	8000b38 <__aeabi_dcmpgt>
 8007384:	b138      	cbz	r0, 8007396 <floor+0x46>
 8007386:	2c00      	cmp	r4, #0
 8007388:	da57      	bge.n	800743a <floor+0xea>
 800738a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800738e:	431d      	orrs	r5, r3
 8007390:	d001      	beq.n	8007396 <floor+0x46>
 8007392:	4c2d      	ldr	r4, [pc, #180]	; (8007448 <floor+0xf8>)
 8007394:	2500      	movs	r5, #0
 8007396:	4621      	mov	r1, r4
 8007398:	4628      	mov	r0, r5
 800739a:	e025      	b.n	80073e8 <floor+0x98>
 800739c:	4f2b      	ldr	r7, [pc, #172]	; (800744c <floor+0xfc>)
 800739e:	4137      	asrs	r7, r6
 80073a0:	ea01 0307 	and.w	r3, r1, r7
 80073a4:	4303      	orrs	r3, r0
 80073a6:	d01f      	beq.n	80073e8 <floor+0x98>
 80073a8:	a325      	add	r3, pc, #148	; (adr r3, 8007440 <floor+0xf0>)
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f7f8 ff7d 	bl	80002ac <__adddf3>
 80073b2:	2200      	movs	r2, #0
 80073b4:	2300      	movs	r3, #0
 80073b6:	f7f9 fbbf 	bl	8000b38 <__aeabi_dcmpgt>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d0eb      	beq.n	8007396 <floor+0x46>
 80073be:	2c00      	cmp	r4, #0
 80073c0:	bfbe      	ittt	lt
 80073c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80073c6:	fa43 f606 	asrlt.w	r6, r3, r6
 80073ca:	19a4      	addlt	r4, r4, r6
 80073cc:	ea24 0407 	bic.w	r4, r4, r7
 80073d0:	2500      	movs	r5, #0
 80073d2:	e7e0      	b.n	8007396 <floor+0x46>
 80073d4:	2e33      	cmp	r6, #51	; 0x33
 80073d6:	dd0b      	ble.n	80073f0 <floor+0xa0>
 80073d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80073dc:	d104      	bne.n	80073e8 <floor+0x98>
 80073de:	ee10 2a10 	vmov	r2, s0
 80073e2:	460b      	mov	r3, r1
 80073e4:	f7f8 ff62 	bl	80002ac <__adddf3>
 80073e8:	ec41 0b10 	vmov	d0, r0, r1
 80073ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80073f4:	f04f 33ff 	mov.w	r3, #4294967295
 80073f8:	fa23 f707 	lsr.w	r7, r3, r7
 80073fc:	4207      	tst	r7, r0
 80073fe:	d0f3      	beq.n	80073e8 <floor+0x98>
 8007400:	a30f      	add	r3, pc, #60	; (adr r3, 8007440 <floor+0xf0>)
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	f7f8 ff51 	bl	80002ac <__adddf3>
 800740a:	2200      	movs	r2, #0
 800740c:	2300      	movs	r3, #0
 800740e:	f7f9 fb93 	bl	8000b38 <__aeabi_dcmpgt>
 8007412:	2800      	cmp	r0, #0
 8007414:	d0bf      	beq.n	8007396 <floor+0x46>
 8007416:	2c00      	cmp	r4, #0
 8007418:	da02      	bge.n	8007420 <floor+0xd0>
 800741a:	2e14      	cmp	r6, #20
 800741c:	d103      	bne.n	8007426 <floor+0xd6>
 800741e:	3401      	adds	r4, #1
 8007420:	ea25 0507 	bic.w	r5, r5, r7
 8007424:	e7b7      	b.n	8007396 <floor+0x46>
 8007426:	2301      	movs	r3, #1
 8007428:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800742c:	fa03 f606 	lsl.w	r6, r3, r6
 8007430:	4435      	add	r5, r6
 8007432:	4545      	cmp	r5, r8
 8007434:	bf38      	it	cc
 8007436:	18e4      	addcc	r4, r4, r3
 8007438:	e7f2      	b.n	8007420 <floor+0xd0>
 800743a:	2500      	movs	r5, #0
 800743c:	462c      	mov	r4, r5
 800743e:	e7aa      	b.n	8007396 <floor+0x46>
 8007440:	8800759c 	.word	0x8800759c
 8007444:	7e37e43c 	.word	0x7e37e43c
 8007448:	bff00000 	.word	0xbff00000
 800744c:	000fffff 	.word	0x000fffff

08007450 <scalbn>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	ec55 4b10 	vmov	r4, r5, d0
 8007456:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800745a:	4606      	mov	r6, r0
 800745c:	462b      	mov	r3, r5
 800745e:	b99a      	cbnz	r2, 8007488 <scalbn+0x38>
 8007460:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007464:	4323      	orrs	r3, r4
 8007466:	d036      	beq.n	80074d6 <scalbn+0x86>
 8007468:	4b39      	ldr	r3, [pc, #228]	; (8007550 <scalbn+0x100>)
 800746a:	4629      	mov	r1, r5
 800746c:	ee10 0a10 	vmov	r0, s0
 8007470:	2200      	movs	r2, #0
 8007472:	f7f9 f8d1 	bl	8000618 <__aeabi_dmul>
 8007476:	4b37      	ldr	r3, [pc, #220]	; (8007554 <scalbn+0x104>)
 8007478:	429e      	cmp	r6, r3
 800747a:	4604      	mov	r4, r0
 800747c:	460d      	mov	r5, r1
 800747e:	da10      	bge.n	80074a2 <scalbn+0x52>
 8007480:	a32b      	add	r3, pc, #172	; (adr r3, 8007530 <scalbn+0xe0>)
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	e03a      	b.n	80074fe <scalbn+0xae>
 8007488:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800748c:	428a      	cmp	r2, r1
 800748e:	d10c      	bne.n	80074aa <scalbn+0x5a>
 8007490:	ee10 2a10 	vmov	r2, s0
 8007494:	4620      	mov	r0, r4
 8007496:	4629      	mov	r1, r5
 8007498:	f7f8 ff08 	bl	80002ac <__adddf3>
 800749c:	4604      	mov	r4, r0
 800749e:	460d      	mov	r5, r1
 80074a0:	e019      	b.n	80074d6 <scalbn+0x86>
 80074a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80074a6:	460b      	mov	r3, r1
 80074a8:	3a36      	subs	r2, #54	; 0x36
 80074aa:	4432      	add	r2, r6
 80074ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80074b0:	428a      	cmp	r2, r1
 80074b2:	dd08      	ble.n	80074c6 <scalbn+0x76>
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	a120      	add	r1, pc, #128	; (adr r1, 8007538 <scalbn+0xe8>)
 80074b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074bc:	da1c      	bge.n	80074f8 <scalbn+0xa8>
 80074be:	a120      	add	r1, pc, #128	; (adr r1, 8007540 <scalbn+0xf0>)
 80074c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074c4:	e018      	b.n	80074f8 <scalbn+0xa8>
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	dd08      	ble.n	80074dc <scalbn+0x8c>
 80074ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80074ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80074d6:	ec45 4b10 	vmov	d0, r4, r5
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80074e0:	da19      	bge.n	8007516 <scalbn+0xc6>
 80074e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80074e6:	429e      	cmp	r6, r3
 80074e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80074ec:	dd0a      	ble.n	8007504 <scalbn+0xb4>
 80074ee:	a112      	add	r1, pc, #72	; (adr r1, 8007538 <scalbn+0xe8>)
 80074f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e2      	bne.n	80074be <scalbn+0x6e>
 80074f8:	a30f      	add	r3, pc, #60	; (adr r3, 8007538 <scalbn+0xe8>)
 80074fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fe:	f7f9 f88b 	bl	8000618 <__aeabi_dmul>
 8007502:	e7cb      	b.n	800749c <scalbn+0x4c>
 8007504:	a10a      	add	r1, pc, #40	; (adr r1, 8007530 <scalbn+0xe0>)
 8007506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0b8      	beq.n	8007480 <scalbn+0x30>
 800750e:	a10e      	add	r1, pc, #56	; (adr r1, 8007548 <scalbn+0xf8>)
 8007510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007514:	e7b4      	b.n	8007480 <scalbn+0x30>
 8007516:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800751a:	3236      	adds	r2, #54	; 0x36
 800751c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007520:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007524:	4620      	mov	r0, r4
 8007526:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <scalbn+0x108>)
 8007528:	2200      	movs	r2, #0
 800752a:	e7e8      	b.n	80074fe <scalbn+0xae>
 800752c:	f3af 8000 	nop.w
 8007530:	c2f8f359 	.word	0xc2f8f359
 8007534:	01a56e1f 	.word	0x01a56e1f
 8007538:	8800759c 	.word	0x8800759c
 800753c:	7e37e43c 	.word	0x7e37e43c
 8007540:	8800759c 	.word	0x8800759c
 8007544:	fe37e43c 	.word	0xfe37e43c
 8007548:	c2f8f359 	.word	0xc2f8f359
 800754c:	81a56e1f 	.word	0x81a56e1f
 8007550:	43500000 	.word	0x43500000
 8007554:	ffff3cb0 	.word	0xffff3cb0
 8007558:	3c900000 	.word	0x3c900000

0800755c <_init>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	bf00      	nop
 8007560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007562:	bc08      	pop	{r3}
 8007564:	469e      	mov	lr, r3
 8007566:	4770      	bx	lr

08007568 <_fini>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	bf00      	nop
 800756c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756e:	bc08      	pop	{r3}
 8007570:	469e      	mov	lr, r3
 8007572:	4770      	bx	lr
